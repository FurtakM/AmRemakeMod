// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export timerStatus , timeAction ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 59
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 60
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 61
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 63
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 62
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 64
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 57
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 58
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 48
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 49
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 50
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 53
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 51
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellAttacks = 0 ;
 171: LD_ADDR_EXP 52
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// centerPowell = 0 ;
 179: LD_ADDR_EXP 55
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 187: LD_ADDR_EXP 38
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// legionVehicles = [ ] ;
 195: LD_ADDR_EXP 39
 199: PUSH
 200: EMPTY
 201: ST_TO_ADDR
// russianVehicles = [ ] ;
 202: LD_ADDR_EXP 45
 206: PUSH
 207: EMPTY
 208: ST_TO_ADDR
// allianceVehicles = [ ] ;
 209: LD_ADDR_EXP 46
 213: PUSH
 214: EMPTY
 215: ST_TO_ADDR
// ruVehicles = [ ] ;
 216: LD_ADDR_EXP 41
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// ruBehMehs = [ ] ;
 223: LD_ADDR_EXP 42
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// ruBehs = [ ] ;
 230: LD_ADDR_EXP 43
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// missionStage = 0 ;
 237: LD_ADDR_EXP 75
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// behemothStatus = 0 ;
 245: LD_ADDR_EXP 44
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// LegionAI = 1 ;
 253: LD_ADDR_EXP 65
 257: PUSH
 258: LD_INT 1
 260: ST_TO_ADDR
// AllianceAI = 1 ;
 261: LD_ADDR_EXP 66
 265: PUSH
 266: LD_INT 1
 268: ST_TO_ADDR
// RussianAI = 1 ;
 269: LD_ADDR_EXP 67
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// timerStatus = 0 ;
 277: LD_ADDR_EXP 73
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// timeAction = 0 0$00 ;
 285: LD_ADDR_EXP 74
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// blockEvent1 = 0 ;
 293: LD_ADDR_EXP 76
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// debugMode = 0 ;
 301: LD_ADDR_EXP 77
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareHeroes ;
 309: CALL 665 0 0
// PrepareHeroesFromEpsilon ;
 313: CALL 1187 0 0
// PrepareRandoms ;
 317: CALL 1531 0 0
// PrepareLegion ;
 321: CALL 3499 0 0
// PrepareRussians ;
 325: CALL 3896 0 0
// PrepareAlliance ;
 329: CALL 5015 0 0
// PrepareDifficulty ;
 333: CALL 6328 0 0
// SetBName ( RuDep2 , zhukov ) ;
 337: LD_INT 23
 339: PPUSH
 340: LD_STRING zhukov
 342: PPUSH
 343: CALL_OW 500
// end ;
 347: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 348: LD_EXP 77
 352: PUSH
 353: LD_INT 1
 355: EQUAL
 356: IFFALSE 662
 358: GO 360
 360: DISABLE
 361: LD_INT 0
 363: PPUSH
// begin enable ;
 364: ENABLE
// fogoff ( true ) ;
 365: LD_INT 1
 367: PPUSH
 368: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 372: LD_ADDR_VAR 0 1
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 1
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 21
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PPUSH
 401: CALL_OW 69
 405: PUSH
 406: FOR_IN
 407: IFFALSE 423
// SetLives ( i , 1000 ) ;
 409: LD_VAR 0 1
 413: PPUSH
 414: LD_INT 1000
 416: PPUSH
 417: CALL_OW 234
 421: GO 406
 423: POP
 424: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 425: LD_ADDR_VAR 0 1
 429: PUSH
 430: LD_INT 22
 432: PUSH
 433: LD_INT 1
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 2
 442: PUSH
 443: LD_INT 30
 445: PUSH
 446: LD_INT 0
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 30
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PPUSH
 472: CALL_OW 69
 476: PUSH
 477: FOR_IN
 478: IFFALSE 502
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 480: LD_VAR 0 1
 484: PPUSH
 485: CALL_OW 274
 489: PPUSH
 490: LD_INT 1
 492: PPUSH
 493: LD_INT 9999
 495: PPUSH
 496: CALL_OW 277
 500: GO 477
 502: POP
 503: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 504: LD_ADDR_VAR 0 1
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_INT 1
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 0
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 30
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: LIST
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL_OW 69
 555: PUSH
 556: FOR_IN
 557: IFFALSE 581
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 274
 568: PPUSH
 569: LD_INT 2
 571: PPUSH
 572: LD_INT 9999
 574: PPUSH
 575: CALL_OW 277
 579: GO 556
 581: POP
 582: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 583: LD_ADDR_VAR 0 1
 587: PUSH
 588: LD_INT 22
 590: PUSH
 591: LD_INT 1
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: LD_INT 30
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PPUSH
 630: CALL_OW 69
 634: PUSH
 635: FOR_IN
 636: IFFALSE 660
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 638: LD_VAR 0 1
 642: PPUSH
 643: CALL_OW 274
 647: PPUSH
 648: LD_INT 3
 650: PPUSH
 651: LD_INT 9999
 653: PPUSH
 654: CALL_OW 277
 658: GO 635
 660: POP
 661: POP
// end ; end_of_file
 662: PPOPN 1
 664: END
// export function PrepareHeroes ; begin
 665: LD_INT 0
 667: PPUSH
// uc_side = 1 ;
 668: LD_ADDR_OWVAR 20
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// uc_nation = 1 ;
 676: LD_ADDR_OWVAR 21
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// if JMMVeh = [ ] then
 684: LD_EXP 59
 688: PUSH
 689: EMPTY
 690: EQUAL
 691: IFFALSE 737
// begin vc_engine = 3 ;
 693: LD_ADDR_OWVAR 39
 697: PUSH
 698: LD_INT 3
 700: ST_TO_ADDR
// vc_control = 1 ;
 701: LD_ADDR_OWVAR 38
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// vc_chassis = 5 ;
 709: LD_ADDR_OWVAR 37
 713: PUSH
 714: LD_INT 5
 716: ST_TO_ADDR
// vc_weapon = 9 ;
 717: LD_ADDR_OWVAR 40
 721: PUSH
 722: LD_INT 9
 724: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 725: LD_ADDR_EXP 24
 729: PUSH
 730: CALL_OW 45
 734: ST_TO_ADDR
// end else
 735: GO 819
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 737: LD_ADDR_OWVAR 37
 741: PUSH
 742: LD_EXP 59
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PUSH
 751: LD_INT 1
 753: ARRAY
 754: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_EXP 59
 764: PUSH
 765: LD_INT 2
 767: ARRAY
 768: PUSH
 769: LD_INT 1
 771: ARRAY
 772: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 773: LD_ADDR_OWVAR 38
 777: PUSH
 778: LD_EXP 59
 782: PUSH
 783: LD_INT 3
 785: ARRAY
 786: PUSH
 787: LD_INT 1
 789: ARRAY
 790: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 791: LD_ADDR_OWVAR 40
 795: PUSH
 796: LD_EXP 59
 800: PUSH
 801: LD_INT 4
 803: ARRAY
 804: PUSH
 805: LD_INT 1
 807: ARRAY
 808: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 809: LD_ADDR_EXP 24
 813: PUSH
 814: CALL_OW 45
 818: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 819: LD_EXP 60
 823: PUSH
 824: EMPTY
 825: EQUAL
 826: NOT
 827: IFFALSE 911
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 829: LD_ADDR_OWVAR 37
 833: PUSH
 834: LD_EXP 60
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PUSH
 843: LD_INT 1
 845: ARRAY
 846: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 847: LD_ADDR_OWVAR 39
 851: PUSH
 852: LD_EXP 60
 856: PUSH
 857: LD_INT 2
 859: ARRAY
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 865: LD_ADDR_OWVAR 38
 869: PUSH
 870: LD_EXP 60
 874: PUSH
 875: LD_INT 3
 877: ARRAY
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 883: LD_ADDR_OWVAR 40
 887: PUSH
 888: LD_EXP 60
 892: PUSH
 893: LD_INT 4
 895: ARRAY
 896: PUSH
 897: LD_INT 1
 899: ARRAY
 900: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 901: LD_ADDR_EXP 25
 905: PUSH
 906: CALL_OW 45
 910: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 911: LD_EXP 24
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 923: LD_EXP 25
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 935: LD_EXP 24
 939: PPUSH
 940: LD_INT 99
 942: PPUSH
 943: LD_INT 154
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 48
// if JMMGirlVeh then
 953: LD_EXP 60
 957: IFFALSE 977
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 959: LD_EXP 25
 963: PPUSH
 964: LD_INT 98
 966: PPUSH
 967: LD_INT 159
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
 977: LD_ADDR_EXP 1
 981: PUSH
 982: LD_STRING 14_JMM
 984: PPUSH
 985: LD_INT 1
 987: PPUSH
 988: CALL 5416 0 2
 992: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
 993: LD_EXP 1
 997: PPUSH
 998: LD_EXP 24
1002: PPUSH
1003: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1007: LD_EXP 60
1011: PUSH
1012: EMPTY
1013: EQUAL
1014: NOT
1015: IFFALSE 1137
// begin if JMMGirl = 1 then
1017: LD_EXP 61
1021: PUSH
1022: LD_INT 1
1024: EQUAL
1025: IFFALSE 1057
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1027: LD_ADDR_EXP 2
1031: PUSH
1032: LD_STRING 14_Joan
1034: PPUSH
1035: LD_INT 1
1037: PPUSH
1038: CALL 5416 0 2
1042: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1043: LD_EXP 2
1047: PPUSH
1048: LD_EXP 25
1052: PPUSH
1053: CALL_OW 52
// end ; if JMMGirl = 2 then
1057: LD_EXP 61
1061: PUSH
1062: LD_INT 2
1064: EQUAL
1065: IFFALSE 1097
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1067: LD_ADDR_EXP 4
1071: PUSH
1072: LD_STRING 14_Lisa
1074: PPUSH
1075: LD_INT 1
1077: PPUSH
1078: CALL 5416 0 2
1082: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1083: LD_EXP 4
1087: PPUSH
1088: LD_EXP 25
1092: PPUSH
1093: CALL_OW 52
// end ; if JMMGirl = 3 then
1097: LD_EXP 61
1101: PUSH
1102: LD_INT 3
1104: EQUAL
1105: IFFALSE 1137
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1107: LD_ADDR_EXP 16
1111: PUSH
1112: LD_STRING 14_Connie
1114: PPUSH
1115: LD_INT 1
1117: PPUSH
1118: CALL 5416 0 2
1122: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1123: LD_EXP 16
1127: PPUSH
1128: LD_EXP 25
1132: PPUSH
1133: CALL_OW 52
// end ; end ; uc_side = 4 ;
1137: LD_ADDR_OWVAR 20
1141: PUSH
1142: LD_INT 4
1144: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1145: LD_ADDR_EXP 17
1149: PUSH
1150: LD_STRING Powell
1152: PPUSH
1153: LD_INT 0
1155: PPUSH
1156: CALL 5416 0 2
1160: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 47 , 63 , 5 , false ) ;
1161: LD_EXP 17
1165: PPUSH
1166: LD_INT 47
1168: PPUSH
1169: LD_INT 63
1171: PPUSH
1172: LD_INT 5
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 50
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareHeroesFromEpsilon ; begin
1187: LD_INT 0
1189: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1190: LD_ADDR_EXP 4
1194: PUSH
1195: LD_STRING Lisa
1197: PPUSH
1198: CALL 5473 0 1
1202: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1203: LD_ADDR_EXP 5
1207: PUSH
1208: LD_STRING Donaldson
1210: PPUSH
1211: CALL 5473 0 1
1215: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1216: LD_ADDR_EXP 6
1220: PUSH
1221: LD_STRING Bobby
1223: PPUSH
1224: CALL 5473 0 1
1228: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1229: LD_ADDR_EXP 7
1233: PUSH
1234: LD_STRING Cyrus
1236: PPUSH
1237: CALL 5473 0 1
1241: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1242: LD_ADDR_EXP 8
1246: PUSH
1247: LD_STRING Denis
1249: PPUSH
1250: CALL 5473 0 1
1254: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1255: LD_ADDR_EXP 9
1259: PUSH
1260: LD_STRING Brown
1262: PPUSH
1263: CALL 5473 0 1
1267: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1268: LD_ADDR_EXP 10
1272: PUSH
1273: LD_STRING Gladstone
1275: PPUSH
1276: CALL 5473 0 1
1280: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1281: LD_ADDR_EXP 11
1285: PUSH
1286: LD_STRING Houten
1288: PPUSH
1289: CALL 5473 0 1
1293: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1294: LD_ADDR_EXP 12
1298: PUSH
1299: LD_STRING Cornel
1301: PPUSH
1302: CALL 5473 0 1
1306: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1307: LD_ADDR_EXP 13
1311: PUSH
1312: LD_STRING Gary
1314: PPUSH
1315: CALL 5473 0 1
1319: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1320: LD_ADDR_EXP 14
1324: PUSH
1325: LD_STRING Frank
1327: PPUSH
1328: CALL 5473 0 1
1332: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1333: LD_ADDR_EXP 15
1337: PUSH
1338: LD_STRING Kikuchi
1340: PPUSH
1341: CALL 5473 0 1
1345: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1346: LD_EXP 4
1350: PPUSH
1351: LD_INT 6
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1361: LD_EXP 5
1365: PPUSH
1366: LD_INT 6
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1376: LD_EXP 6
1380: PPUSH
1381: LD_INT 6
1383: PPUSH
1384: LD_INT 0
1386: PPUSH
1387: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1391: LD_EXP 7
1395: PPUSH
1396: LD_INT 6
1398: PPUSH
1399: LD_INT 0
1401: PPUSH
1402: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1406: LD_EXP 8
1410: PPUSH
1411: LD_INT 6
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1421: LD_EXP 9
1425: PPUSH
1426: LD_INT 6
1428: PPUSH
1429: LD_INT 0
1431: PPUSH
1432: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1436: LD_EXP 10
1440: PPUSH
1441: LD_INT 6
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1451: LD_EXP 11
1455: PPUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1466: LD_EXP 12
1470: PPUSH
1471: LD_INT 6
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1481: LD_EXP 13
1485: PPUSH
1486: LD_INT 6
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1496: LD_EXP 14
1500: PPUSH
1501: LD_INT 6
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1511: LD_EXP 15
1515: PPUSH
1516: LD_INT 6
1518: PPUSH
1519: LD_INT 0
1521: PPUSH
1522: CALL_OW 49
// end ;
1526: LD_VAR 0 1
1530: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1531: LD_INT 0
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// uc_side = 4 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 4
1545: ST_TO_ADDR
// uc_nation = 1 ;
1546: LD_ADDR_OWVAR 21
1550: PUSH
1551: LD_INT 1
1553: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1554: LD_ADDR_EXP 18
1558: PUSH
1559: LD_STRING 13s_others
1561: PPUSH
1562: CALL_OW 31
1566: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1567: LD_ADDR_VAR 0 4
1571: PUSH
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 21
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL_OW 69
1600: PUSH
1601: LD_EXP 17
1605: PUSH
1606: EMPTY
1607: LIST
1608: DIFF
1609: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1610: LD_ADDR_VAR 0 5
1614: PUSH
1615: LD_VAR 0 4
1619: PPUSH
1620: CALL 5603 0 1
1624: ST_TO_ADDR
// if others13 >= 8 then
1625: LD_EXP 18
1629: PUSH
1630: LD_INT 8
1632: GREATEREQUAL
1633: IFFALSE 1694
// begin for i = 1 to 8 do
1635: LD_ADDR_VAR 0 2
1639: PUSH
1640: DOUBLE
1641: LD_INT 1
1643: DEC
1644: ST_TO_ADDR
1645: LD_INT 8
1647: PUSH
1648: FOR_TO
1649: IFFALSE 1690
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1651: LD_EXP 18
1655: PUSH
1656: LD_INT 1
1658: ARRAY
1659: PPUSH
1660: LD_INT 6
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1670: LD_ADDR_EXP 18
1674: PUSH
1675: LD_EXP 18
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 3
1687: ST_TO_ADDR
// end ;
1688: GO 1648
1690: POP
1691: POP
// end else
1692: GO 1753
// begin for i = 1 to others13 do
1694: LD_ADDR_VAR 0 2
1698: PUSH
1699: DOUBLE
1700: LD_INT 1
1702: DEC
1703: ST_TO_ADDR
1704: LD_EXP 18
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1751
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1712: LD_EXP 18
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: LD_INT 6
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1731: LD_ADDR_EXP 18
1735: PUSH
1736: LD_EXP 18
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: CALL_OW 3
1748: ST_TO_ADDR
// end ;
1749: GO 1709
1751: POP
1752: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1753: LD_ADDR_VAR 0 4
1757: PUSH
1758: LD_INT 22
1760: PUSH
1761: LD_INT 4
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 21
1770: PUSH
1771: LD_INT 1
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 69
1786: PUSH
1787: LD_EXP 17
1791: PUSH
1792: EMPTY
1793: LIST
1794: DIFF
1795: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1796: LD_ADDR_VAR 0 5
1800: PUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 5603 0 1
1810: ST_TO_ADDR
// if others13 >= 6 then
1811: LD_EXP 18
1815: PUSH
1816: LD_INT 6
1818: GREATEREQUAL
1819: IFFALSE 1880
// begin for i = 1 to 6 do
1821: LD_ADDR_VAR 0 2
1825: PUSH
1826: DOUBLE
1827: LD_INT 1
1829: DEC
1830: ST_TO_ADDR
1831: LD_INT 6
1833: PUSH
1834: FOR_TO
1835: IFFALSE 1876
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1837: LD_EXP 18
1841: PUSH
1842: LD_INT 1
1844: ARRAY
1845: PPUSH
1846: LD_INT 6
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1856: LD_ADDR_EXP 18
1860: PUSH
1861: LD_EXP 18
1865: PPUSH
1866: LD_INT 1
1868: PPUSH
1869: CALL_OW 3
1873: ST_TO_ADDR
// end ;
1874: GO 1834
1876: POP
1877: POP
// end else
1878: GO 1939
// begin for i = 1 to others13 do
1880: LD_ADDR_VAR 0 2
1884: PUSH
1885: DOUBLE
1886: LD_INT 1
1888: DEC
1889: ST_TO_ADDR
1890: LD_EXP 18
1894: PUSH
1895: FOR_TO
1896: IFFALSE 1937
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1898: LD_EXP 18
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: PPUSH
1907: LD_INT 6
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1917: LD_ADDR_EXP 18
1921: PUSH
1922: LD_EXP 18
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 3
1934: ST_TO_ADDR
// end ;
1935: GO 1895
1937: POP
1938: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1939: LD_ADDR_VAR 0 4
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 1
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PPUSH
1968: CALL_OW 69
1972: PUSH
1973: LD_EXP 17
1977: PUSH
1978: EMPTY
1979: LIST
1980: DIFF
1981: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1982: LD_ADDR_VAR 0 5
1986: PUSH
1987: LD_VAR 0 4
1991: PPUSH
1992: CALL 5603 0 1
1996: ST_TO_ADDR
// if heroLenght < 19 then
1997: LD_VAR 0 5
2001: PUSH
2002: LD_INT 19
2004: LESS
2005: IFFALSE 2103
// for i = 1 to 19 - heroLenght do
2007: LD_ADDR_VAR 0 2
2011: PUSH
2012: DOUBLE
2013: LD_INT 1
2015: DEC
2016: ST_TO_ADDR
2017: LD_INT 19
2019: PUSH
2020: LD_VAR 0 5
2024: MINUS
2025: PUSH
2026: FOR_TO
2027: IFFALSE 2101
// begin hc_gallery =  ;
2029: LD_ADDR_OWVAR 33
2033: PUSH
2034: LD_STRING 
2036: ST_TO_ADDR
// hc_name =  ;
2037: LD_ADDR_OWVAR 26
2041: PUSH
2042: LD_STRING 
2044: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2045: LD_INT 0
2047: PPUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: CALL_OW 12
2058: PPUSH
2059: LD_INT 6
2061: PPUSH
2062: LD_INT 8
2064: PPUSH
2065: CALL_OW 12
2069: PPUSH
2070: CALL_OW 380
// un = CreateHuman ;
2074: LD_ADDR_VAR 0 3
2078: PUSH
2079: CALL_OW 44
2083: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2084: LD_VAR 0 3
2088: PPUSH
2089: LD_INT 6
2091: PPUSH
2092: LD_INT 0
2094: PPUSH
2095: CALL_OW 49
// end ;
2099: GO 2026
2101: POP
2102: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2103: LD_ADDR_VAR 0 4
2107: PUSH
2108: LD_INT 22
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 21
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: PUSH
2137: LD_EXP 17
2141: PUSH
2142: LD_EXP 1
2146: PUSH
2147: LD_EXP 2
2151: PUSH
2152: LD_EXP 3
2156: PUSH
2157: LD_EXP 4
2161: PUSH
2162: LD_EXP 5
2166: PUSH
2167: LD_EXP 6
2171: PUSH
2172: LD_EXP 7
2176: PUSH
2177: LD_EXP 8
2181: PUSH
2182: LD_EXP 9
2186: PUSH
2187: LD_EXP 10
2191: PUSH
2192: LD_EXP 11
2196: PUSH
2197: LD_EXP 12
2201: PUSH
2202: LD_EXP 13
2206: PUSH
2207: LD_EXP 14
2211: PUSH
2212: LD_EXP 15
2216: PUSH
2217: LD_EXP 16
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: DIFF
2241: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2242: LD_ADDR_EXP 48
2246: PUSH
2247: LD_VAR 0 4
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: CALL 5961 0 2
2259: ST_TO_ADDR
// for i = 1 to 8 do
2260: LD_ADDR_VAR 0 2
2264: PUSH
2265: DOUBLE
2266: LD_INT 1
2268: DEC
2269: ST_TO_ADDR
2270: LD_INT 8
2272: PUSH
2273: FOR_TO
2274: IFFALSE 2304
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2276: LD_ADDR_EXP 49
2280: PUSH
2281: LD_EXP 49
2285: PUSH
2286: LD_EXP 48
2290: PUSH
2291: LD_VAR 0 2
2295: ARRAY
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: ADD
2301: ST_TO_ADDR
2302: GO 2273
2304: POP
2305: POP
// SetClass ( amUnitsAttack , 1 ) ;
2306: LD_EXP 49
2310: PPUSH
2311: LD_INT 1
2313: PPUSH
2314: CALL_OW 336
// end ;
2318: LD_VAR 0 1
2322: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2323: LD_INT 0
2325: PPUSH
2326: PPUSH
2327: PPUSH
// uc_side = 1 ;
2328: LD_ADDR_OWVAR 20
2332: PUSH
2333: LD_INT 1
2335: ST_TO_ADDR
// uc_nation = 1 ;
2336: LD_ADDR_OWVAR 21
2340: PUSH
2341: LD_INT 1
2343: ST_TO_ADDR
// for i := 1 to 5 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 5
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2442
// begin vc_engine = 3 ;
2360: LD_ADDR_OWVAR 39
2364: PUSH
2365: LD_INT 3
2367: ST_TO_ADDR
// vc_control = 3 ;
2368: LD_ADDR_OWVAR 38
2372: PUSH
2373: LD_INT 3
2375: ST_TO_ADDR
// vc_chassis = 3 ;
2376: LD_ADDR_OWVAR 37
2380: PUSH
2381: LD_INT 3
2383: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 5
2391: PUSH
2392: LD_INT 9
2394: PUSH
2395: LD_INT 7
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 3
2408: PPUSH
2409: CALL_OW 12
2413: ARRAY
2414: ST_TO_ADDR
// veh = CreateVehicle ;
2415: LD_ADDR_VAR 0 3
2419: PUSH
2420: CALL_OW 45
2424: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2425: LD_VAR 0 3
2429: PPUSH
2430: LD_INT 14
2432: PPUSH
2433: LD_INT 0
2435: PPUSH
2436: CALL_OW 49
// end ;
2440: GO 2357
2442: POP
2443: POP
// vc_engine = 3 ;
2444: LD_ADDR_OWVAR 39
2448: PUSH
2449: LD_INT 3
2451: ST_TO_ADDR
// vc_control = 1 ;
2452: LD_ADDR_OWVAR 38
2456: PUSH
2457: LD_INT 1
2459: ST_TO_ADDR
// vc_chassis = 3 ;
2460: LD_ADDR_OWVAR 37
2464: PUSH
2465: LD_INT 3
2467: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2468: LD_ADDR_OWVAR 40
2472: PUSH
2473: LD_INT 5
2475: PUSH
2476: LD_INT 9
2478: PUSH
2479: LD_INT 7
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 1
2489: PPUSH
2490: LD_INT 3
2492: PPUSH
2493: CALL_OW 12
2497: ARRAY
2498: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2499: LD_ADDR_EXP 25
2503: PUSH
2504: CALL_OW 45
2508: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2509: LD_EXP 25
2513: PPUSH
2514: LD_INT 14
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: CALL_OW 49
// if JMMGirl = 1 then
2524: LD_EXP 61
2528: PUSH
2529: LD_INT 1
2531: EQUAL
2532: IFFALSE 2585
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2534: LD_ADDR_EXP 2
2538: PUSH
2539: LD_STRING 14_Joan
2541: PPUSH
2542: LD_INT 1
2544: PPUSH
2545: CALL 5416 0 2
2549: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2550: LD_EXP 2
2554: PPUSH
2555: LD_EXP 25
2559: PPUSH
2560: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2564: LD_EXP 25
2568: PPUSH
2569: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2573: LD_EXP 2
2577: PPUSH
2578: LD_STRING D10BW-Joan-1
2580: PPUSH
2581: CALL_OW 88
// end ; if JMMGirl = 2 then
2585: LD_EXP 61
2589: PUSH
2590: LD_INT 2
2592: EQUAL
2593: IFFALSE 2646
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2595: LD_ADDR_EXP 4
2599: PUSH
2600: LD_STRING 14_Lisa
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL 5416 0 2
2610: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2611: LD_EXP 4
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2625: LD_EXP 25
2629: PPUSH
2630: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2634: LD_EXP 4
2638: PPUSH
2639: LD_STRING D10BW-Lisa-1
2641: PPUSH
2642: CALL_OW 88
// end ; if JMMGirl = 3 then
2646: LD_EXP 61
2650: PUSH
2651: LD_INT 3
2653: EQUAL
2654: IFFALSE 2707
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2656: LD_ADDR_EXP 16
2660: PUSH
2661: LD_STRING 14_Connie
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL 5416 0 2
2671: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2672: LD_EXP 16
2676: PPUSH
2677: LD_EXP 25
2681: PPUSH
2682: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2686: LD_EXP 25
2690: PPUSH
2691: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2695: LD_EXP 4
2699: PPUSH
2700: LD_STRING D10BW-Con-1
2702: PPUSH
2703: CALL_OW 88
// end ; end ;
2707: LD_VAR 0 1
2711: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles ; begin
2712: LD_INT 0
2714: PPUSH
2715: PPUSH
2716: PPUSH
2717: PPUSH
2718: PPUSH
2719: PPUSH
2720: PPUSH
// uc_side = 1 ;
2721: LD_ADDR_OWVAR 20
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// uc_nation = 1 ;
2729: LD_ADDR_OWVAR 21
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// omegaVeh = [ ] ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: EMPTY
2743: ST_TO_ADDR
// if TestCharacters ( 13_Lisa ) = false then
2744: LD_STRING 13_Lisa
2746: PPUSH
2747: CALL_OW 28
2751: PUSH
2752: LD_INT 0
2754: EQUAL
2755: IFFALSE 2770
// Lisa = PrepareUnitOmega ( Lisa ) ;
2757: LD_ADDR_EXP 4
2761: PUSH
2762: LD_STRING Lisa
2764: PPUSH
2765: CALL 5530 0 1
2769: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2770: LD_STRING 13s_Donaldson
2772: PPUSH
2773: CALL_OW 28
2777: PUSH
2778: LD_INT 0
2780: EQUAL
2781: IFFALSE 2796
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2783: LD_ADDR_EXP 5
2787: PUSH
2788: LD_STRING Donaldson
2790: PPUSH
2791: CALL 5530 0 1
2795: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2796: LD_STRING 13s_Bobby
2798: PPUSH
2799: CALL_OW 28
2803: PUSH
2804: LD_INT 0
2806: EQUAL
2807: IFFALSE 2822
// Bobby = PrepareUnitOmega ( Bobby ) ;
2809: LD_ADDR_EXP 6
2813: PUSH
2814: LD_STRING Bobby
2816: PPUSH
2817: CALL 5530 0 1
2821: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2822: LD_STRING 13s_Cyrus
2824: PPUSH
2825: CALL_OW 28
2829: PUSH
2830: LD_INT 0
2832: EQUAL
2833: IFFALSE 2848
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2835: LD_ADDR_EXP 7
2839: PUSH
2840: LD_STRING Cyrus
2842: PPUSH
2843: CALL 5530 0 1
2847: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2848: LD_STRING 13s_Denis
2850: PPUSH
2851: CALL_OW 28
2855: PUSH
2856: LD_INT 0
2858: EQUAL
2859: IFFALSE 2874
// Denis = PrepareUnitOmega ( Denis ) ;
2861: LD_ADDR_EXP 8
2865: PUSH
2866: LD_STRING Denis
2868: PPUSH
2869: CALL 5530 0 1
2873: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2874: LD_STRING 13s_Brown
2876: PPUSH
2877: CALL_OW 28
2881: PUSH
2882: LD_INT 0
2884: EQUAL
2885: IFFALSE 2900
// Brown = PrepareUnitOmega ( Brown ) ;
2887: LD_ADDR_EXP 9
2891: PUSH
2892: LD_STRING Brown
2894: PPUSH
2895: CALL 5530 0 1
2899: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2900: LD_STRING 13s_Gladstone
2902: PPUSH
2903: CALL_OW 28
2907: PUSH
2908: LD_INT 0
2910: EQUAL
2911: IFFALSE 2926
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2913: LD_ADDR_EXP 10
2917: PUSH
2918: LD_STRING Gladstone
2920: PPUSH
2921: CALL 5530 0 1
2925: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
2926: LD_STRING 13s_Houten
2928: PPUSH
2929: CALL_OW 28
2933: PUSH
2934: LD_INT 0
2936: EQUAL
2937: IFFALSE 2952
// Houten = PrepareUnitOmega ( Houten ) ;
2939: LD_ADDR_EXP 11
2943: PUSH
2944: LD_STRING Houten
2946: PPUSH
2947: CALL 5530 0 1
2951: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
2952: LD_STRING 13s_Cornel
2954: PPUSH
2955: CALL_OW 28
2959: PUSH
2960: LD_INT 0
2962: EQUAL
2963: IFFALSE 2978
// Cornel = PrepareUnitOmega ( Cornel ) ;
2965: LD_ADDR_EXP 12
2969: PUSH
2970: LD_STRING Cornel
2972: PPUSH
2973: CALL 5530 0 1
2977: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
2978: LD_STRING 13s_Gary
2980: PPUSH
2981: CALL_OW 28
2985: PUSH
2986: LD_INT 0
2988: EQUAL
2989: IFFALSE 3004
// Gary = PrepareUnitOmega ( Gary ) ;
2991: LD_ADDR_EXP 13
2995: PUSH
2996: LD_STRING Gary
2998: PPUSH
2999: CALL 5530 0 1
3003: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3004: LD_STRING 13s_Frank
3006: PPUSH
3007: CALL_OW 28
3011: PUSH
3012: LD_INT 0
3014: EQUAL
3015: IFFALSE 3030
// Frank = PrepareUnitOmega ( Frank ) ;
3017: LD_ADDR_EXP 14
3021: PUSH
3022: LD_STRING Frank
3024: PPUSH
3025: CALL 5530 0 1
3029: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3030: LD_STRING 13s_Kikuchi
3032: PPUSH
3033: CALL_OW 28
3037: PUSH
3038: LD_INT 0
3040: EQUAL
3041: IFFALSE 3056
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3043: LD_ADDR_EXP 15
3047: PUSH
3048: LD_STRING Kikuchi
3050: PPUSH
3051: CALL 5530 0 1
3055: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3056: LD_STRING 13s_Kikuchi
3058: PPUSH
3059: CALL_OW 28
3063: PUSH
3064: LD_INT 0
3066: EQUAL
3067: IFFALSE 3082
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3069: LD_ADDR_EXP 15
3073: PUSH
3074: LD_STRING Kikuchi
3076: PPUSH
3077: CALL 5530 0 1
3081: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3082: LD_ADDR_EXP 22
3086: PUSH
3087: LD_STRING Gordon
3089: PPUSH
3090: CALL 5530 0 1
3094: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3095: LD_ADDR_EXP 23
3099: PUSH
3100: LD_STRING Peter
3102: PPUSH
3103: CALL 5530 0 1
3107: ST_TO_ADDR
// if StevensStatus = 1 then
3108: LD_EXP 58
3112: PUSH
3113: LD_INT 1
3115: EQUAL
3116: IFFALSE 3133
// Stevens = PrepareUnitOmega ( Stevens ) else
3118: LD_ADDR_EXP 3
3122: PUSH
3123: LD_STRING Stevens
3125: PPUSH
3126: CALL 5530 0 1
3130: ST_TO_ADDR
3131: GO 3146
// Baker = PrepareUnitOmega ( Baker ) ;
3133: LD_ADDR_EXP 21
3137: PUSH
3138: LD_STRING Baker
3140: PPUSH
3141: CALL 5530 0 1
3145: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3146: LD_ADDR_EXP 19
3150: PUSH
3151: LD_STRING 15_other_survivors
3153: PPUSH
3154: CALL_OW 31
3158: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3159: LD_ADDR_VAR 0 7
3163: PUSH
3164: LD_STRING 15_Vehicles_1
3166: PPUSH
3167: EMPTY
3168: PPUSH
3169: CALL_OW 30
3173: ST_TO_ADDR
// for i := 1 to vehicles do
3174: LD_ADDR_VAR 0 2
3178: PUSH
3179: DOUBLE
3180: LD_INT 1
3182: DEC
3183: ST_TO_ADDR
3184: LD_VAR 0 7
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3375
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3192: LD_ADDR_OWVAR 21
3196: PUSH
3197: LD_VAR 0 7
3201: PUSH
3202: LD_VAR 0 2
3206: ARRAY
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3212: LD_ADDR_OWVAR 37
3216: PUSH
3217: LD_VAR 0 7
3221: PUSH
3222: LD_VAR 0 2
3226: ARRAY
3227: PUSH
3228: LD_INT 2
3230: ARRAY
3231: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3232: LD_ADDR_OWVAR 39
3236: PUSH
3237: LD_VAR 0 7
3241: PUSH
3242: LD_VAR 0 2
3246: ARRAY
3247: PUSH
3248: LD_INT 3
3250: ARRAY
3251: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3252: LD_ADDR_OWVAR 38
3256: PUSH
3257: LD_VAR 0 7
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_INT 4
3270: ARRAY
3271: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3272: LD_ADDR_OWVAR 40
3276: PUSH
3277: LD_VAR 0 7
3281: PUSH
3282: LD_VAR 0 2
3286: ARRAY
3287: PUSH
3288: LD_INT 5
3290: ARRAY
3291: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3292: LD_ADDR_OWVAR 41
3296: PUSH
3297: LD_INT 40
3299: ST_TO_ADDR
// veh = CreateVehicle ;
3300: LD_ADDR_VAR 0 5
3304: PUSH
3305: CALL_OW 45
3309: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3310: LD_VAR 0 5
3314: PPUSH
3315: LD_INT 5
3317: PPUSH
3318: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3322: LD_VAR 0 5
3326: PPUSH
3327: LD_INT 300
3329: PPUSH
3330: LD_INT 800
3332: PPUSH
3333: CALL_OW 12
3337: PPUSH
3338: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PUSH
3352: LD_VAR 0 5
3356: ADD
3357: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3358: LD_VAR 0 5
3362: PPUSH
3363: LD_INT 16
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
// end ;
3373: GO 3189
3375: POP
3376: POP
// for i := 1 to heroesFromOmega do
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: DOUBLE
3383: LD_INT 1
3385: DEC
3386: ST_TO_ADDR
3387: LD_EXP 20
3391: PUSH
3392: FOR_TO
3393: IFFALSE 3423
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3395: LD_EXP 20
3399: PUSH
3400: LD_VAR 0 2
3404: ARRAY
3405: PPUSH
3406: LD_VAR 0 3
3410: PUSH
3411: LD_VAR 0 2
3415: ARRAY
3416: PPUSH
3417: CALL_OW 52
// end ;
3421: GO 3392
3423: POP
3424: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_VAR 0 3
3434: PPUSH
3435: LD_INT 58
3437: PUSH
3438: EMPTY
3439: LIST
3440: PPUSH
3441: CALL_OW 72
3445: ST_TO_ADDR
// for i := 1 to others13Omega do
3446: LD_ADDR_VAR 0 2
3450: PUSH
3451: DOUBLE
3452: LD_INT 1
3454: DEC
3455: ST_TO_ADDR
3456: LD_EXP 19
3460: PUSH
3461: FOR_TO
3462: IFFALSE 3492
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3464: LD_EXP 19
3468: PUSH
3469: LD_VAR 0 2
3473: ARRAY
3474: PPUSH
3475: LD_VAR 0 6
3479: PUSH
3480: LD_VAR 0 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 52
// end ;
3490: GO 3461
3492: POP
3493: POP
// end ; end_of_file
3494: LD_VAR 0 1
3498: RET
// export function PrepareLegion ; var i ; begin
3499: LD_INT 0
3501: PPUSH
3502: PPUSH
// uc_side = 8 ;
3503: LD_ADDR_OWVAR 20
3507: PUSH
3508: LD_INT 8
3510: ST_TO_ADDR
// uc_nation = 2 ;
3511: LD_ADDR_OWVAR 21
3515: PUSH
3516: LD_INT 2
3518: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3519: LD_ADDR_EXP 30
3523: PUSH
3524: LD_STRING Kurt
3526: PPUSH
3527: LD_INT 0
3529: PPUSH
3530: CALL 5416 0 2
3534: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3535: LD_ADDR_EXP 35
3539: PUSH
3540: LD_STRING Kozlov
3542: PPUSH
3543: LD_INT 0
3545: PPUSH
3546: CALL 5416 0 2
3550: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3551: LD_INT 8
3553: PPUSH
3554: LD_INT 2
3556: PPUSH
3557: LD_INT 122
3559: PPUSH
3560: LD_INT 10
3562: PPUSH
3563: LD_INT 2
3565: PPUSH
3566: LD_INT 4
3568: PPUSH
3569: CALL 6522 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3573: LD_INT 8
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: LD_INT 99
3581: PPUSH
3582: LD_INT 10
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: LD_INT 2
3590: PPUSH
3591: CALL 6522 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3595: LD_INT 8
3597: PPUSH
3598: LD_INT 2
3600: PPUSH
3601: LD_INT 104
3603: PPUSH
3604: LD_INT 10
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: CALL 6522 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3617: LD_INT 8
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: LD_INT 104
3625: PPUSH
3626: LD_INT 10
3628: PPUSH
3629: LD_INT 8
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL 6522 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3639: LD_INT 8
3641: PPUSH
3642: LD_INT 2
3644: PPUSH
3645: LD_INT 118
3647: PPUSH
3648: LD_INT 10
3650: PPUSH
3651: LD_INT 1
3653: PPUSH
3654: LD_INT 1
3656: PPUSH
3657: CALL 6522 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
3661: LD_INT 8
3663: PPUSH
3664: LD_INT 2
3666: PPUSH
3667: LD_INT 117
3669: PPUSH
3670: LD_INT 10
3672: PPUSH
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 4
3678: PPUSH
3679: CALL 6522 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
3683: LD_INT 8
3685: PPUSH
3686: LD_INT 2
3688: PPUSH
3689: LD_INT 252
3691: PPUSH
3692: LD_INT 10
3694: PPUSH
3695: LD_INT 4
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: CALL 6522 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
3705: LD_ADDR_VAR 0 2
3709: PUSH
3710: LD_INT 22
3712: PUSH
3713: LD_INT 8
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_INT 21
3722: PUSH
3723: LD_INT 3
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: LD_INT 30
3732: PUSH
3733: LD_INT 32
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 58
3742: PUSH
3743: EMPTY
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PPUSH
3752: CALL_OW 69
3756: PUSH
3757: FOR_IN
3758: IFFALSE 3786
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
3760: LD_INT 8
3762: PPUSH
3763: LD_INT 2
3765: PPUSH
3766: LD_VAR 0 2
3770: PPUSH
3771: LD_INT 10
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: LD_INT 1
3779: PPUSH
3780: CALL 6522 0 6
3784: GO 3757
3786: POP
3787: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
3788: LD_INT 8
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: LD_INT 140
3796: PPUSH
3797: LD_INT 10
3799: PPUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: CALL 6522 0 6
// arControler = UnitsInside ( ArControl ) ;
3810: LD_ADDR_EXP 40
3814: PUSH
3815: LD_INT 140
3817: PPUSH
3818: CALL_OW 313
3822: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
3823: LD_INT 139
3825: PPUSH
3826: LD_EXP 40
3830: PUSH
3831: LD_INT 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
3839: LD_INT 138
3841: PPUSH
3842: LD_EXP 40
3846: PUSH
3847: LD_INT 1
3849: ARRAY
3850: PPUSH
3851: CALL_OW 195
// hc_name = Ali Hadarach ;
3855: LD_ADDR_OWVAR 26
3859: PUSH
3860: LD_STRING Ali Hadarach
3862: ST_TO_ADDR
// hc_gallery =  ;
3863: LD_ADDR_OWVAR 33
3867: PUSH
3868: LD_STRING 
3870: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
3871: LD_INT 1
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: CALL_OW 383
// LegionFriend = CreateHuman ;
3881: LD_ADDR_EXP 37
3885: PUSH
3886: CALL_OW 44
3890: ST_TO_ADDR
// end ; end_of_file
3891: LD_VAR 0 1
3895: RET
// export function PrepareRussians ; var i ; begin
3896: LD_INT 0
3898: PPUSH
3899: PPUSH
// uc_side = 3 ;
3900: LD_ADDR_OWVAR 20
3904: PUSH
3905: LD_INT 3
3907: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
3908: LD_ADDR_EXP 26
3912: PUSH
3913: LD_STRING Platonov
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: CALL 5416 0 2
3923: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
3924: LD_EXP 26
3928: PPUSH
3929: LD_INT 23
3931: PPUSH
3932: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
3936: LD_ADDR_EXP 27
3940: PUSH
3941: LD_STRING Yakotich
3943: PPUSH
3944: LD_INT 0
3946: PPUSH
3947: CALL 5416 0 2
3951: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
3952: LD_EXP 27
3956: PPUSH
3957: LD_INT 26
3959: PPUSH
3960: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
3964: LD_ADDR_EXP 36
3968: PUSH
3969: LD_STRING Kovalyuk
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL 5416 0 2
3979: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
3980: LD_EXP 36
3984: PPUSH
3985: LD_INT 3
3987: PPUSH
3988: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
3992: LD_ADDR_EXP 42
3996: PUSH
3997: LD_EXP 42
4001: PUSH
4002: LD_EXP 36
4006: ADD
4007: ST_TO_ADDR
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 3
4013: PPUSH
4014: LD_INT 26
4016: PPUSH
4017: LD_INT 10
4019: PPUSH
4020: LD_INT 2
4022: PPUSH
4023: LD_INT 5
4025: PPUSH
4026: CALL 6522 0 6
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 6 ) ;
4030: LD_INT 3
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: LD_INT 26
4038: PPUSH
4039: LD_INT 10
4041: PPUSH
4042: LD_INT 2
4044: PPUSH
4045: LD_INT 6
4047: PPUSH
4048: CALL 6522 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
4052: LD_INT 3
4054: PPUSH
4055: LD_INT 3
4057: PPUSH
4058: LD_INT 27
4060: PPUSH
4061: LD_INT 10
4063: PPUSH
4064: LD_INT 9
4066: PPUSH
4067: LD_INT 6
4069: PPUSH
4070: CALL 6522 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
4074: LD_INT 3
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 27
4082: PPUSH
4083: LD_INT 10
4085: PPUSH
4086: LD_INT 3
4088: PPUSH
4089: LD_INT 3
4091: PPUSH
4092: CALL 6522 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
4096: LD_INT 3
4098: PPUSH
4099: LD_INT 3
4101: PPUSH
4102: LD_INT 4
4104: PPUSH
4105: LD_INT 10
4107: PPUSH
4108: LD_INT 3
4110: PPUSH
4111: LD_INT 6
4113: PPUSH
4114: CALL 6522 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
4118: LD_INT 3
4120: PPUSH
4121: LD_INT 3
4123: PPUSH
4124: LD_INT 10
4126: PPUSH
4127: LD_INT 10
4129: PPUSH
4130: LD_INT 3
4132: PPUSH
4133: LD_INT 6
4135: PPUSH
4136: CALL 6522 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
4140: LD_INT 3
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 2
4148: PPUSH
4149: LD_INT 10
4151: PPUSH
4152: LD_INT 4
4154: PPUSH
4155: LD_INT 3
4157: PPUSH
4158: CALL 6522 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
4162: LD_INT 3
4164: PPUSH
4165: LD_INT 3
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: LD_INT 10
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: LD_INT 3
4179: PPUSH
4180: CALL 6522 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4184: LD_ADDR_VAR 0 2
4188: PUSH
4189: LD_INT 22
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 21
4201: PUSH
4202: LD_INT 3
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 30
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 58
4221: PUSH
4222: EMPTY
4223: LIST
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PPUSH
4231: CALL_OW 69
4235: PUSH
4236: FOR_IN
4237: IFFALSE 4265
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
4239: LD_INT 3
4241: PPUSH
4242: LD_INT 3
4244: PPUSH
4245: LD_VAR 0 2
4249: PPUSH
4250: LD_INT 10
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL 6522 0 6
4263: GO 4236
4265: POP
4266: POP
// end ;
4267: LD_VAR 0 1
4271: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
4272: LD_INT 0
4274: PPUSH
4275: PPUSH
4276: PPUSH
4277: PPUSH
// uc_side = 6 ;
4278: LD_ADDR_OWVAR 20
4282: PUSH
4283: LD_INT 6
4285: ST_TO_ADDR
// uc_nation = 1 ;
4286: LD_ADDR_OWVAR 21
4290: PUSH
4291: LD_INT 1
4293: ST_TO_ADDR
// vc_engine = 3 ;
4294: LD_ADDR_OWVAR 39
4298: PUSH
4299: LD_INT 3
4301: ST_TO_ADDR
// vc_control = 1 ;
4302: LD_ADDR_OWVAR 38
4306: PUSH
4307: LD_INT 1
4309: ST_TO_ADDR
// vc_chassis = 5 ;
4310: LD_ADDR_OWVAR 37
4314: PUSH
4315: LD_INT 5
4317: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
4318: LD_ADDR_OWVAR 40
4322: PUSH
4323: LD_INT 5
4325: PUSH
4326: LD_INT 9
4328: PUSH
4329: LD_INT 7
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: PUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 3
4342: PPUSH
4343: CALL_OW 12
4347: ARRAY
4348: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
4349: LD_ADDR_EXP 34
4353: PUSH
4354: CALL_OW 45
4358: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
4359: LD_EXP 34
4363: PPUSH
4364: LD_INT 14
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
4374: LD_ADDR_EXP 33
4378: PUSH
4379: LD_STRING Vsevolod
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: CALL 5416 0 2
4389: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
4390: LD_EXP 33
4394: PPUSH
4395: LD_EXP 34
4399: PPUSH
4400: CALL_OW 52
// for i := 1 to 5 do
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: DOUBLE
4410: LD_INT 1
4412: DEC
4413: ST_TO_ADDR
4414: LD_INT 5
4416: PUSH
4417: FOR_TO
4418: IFFALSE 4502
// begin vc_engine = 3 ;
4420: LD_ADDR_OWVAR 39
4424: PUSH
4425: LD_INT 3
4427: ST_TO_ADDR
// vc_control = 3 ;
4428: LD_ADDR_OWVAR 38
4432: PUSH
4433: LD_INT 3
4435: ST_TO_ADDR
// vc_chassis = 3 ;
4436: LD_ADDR_OWVAR 37
4440: PUSH
4441: LD_INT 3
4443: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
4444: LD_ADDR_OWVAR 40
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: LD_INT 9
4454: PUSH
4455: LD_INT 7
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 3
4468: PPUSH
4469: CALL_OW 12
4473: ARRAY
4474: ST_TO_ADDR
// veh = CreateVehicle ;
4475: LD_ADDR_VAR 0 3
4479: PUSH
4480: CALL_OW 45
4484: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
4485: LD_VAR 0 3
4489: PPUSH
4490: LD_INT 14
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 49
// end ;
4500: GO 4417
4502: POP
4503: POP
// uc_nation = 3 ;
4504: LD_ADDR_OWVAR 21
4508: PUSH
4509: LD_INT 3
4511: ST_TO_ADDR
// for i := 1 to 7 do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: DOUBLE
4518: LD_INT 1
4520: DEC
4521: ST_TO_ADDR
4522: LD_INT 7
4524: PUSH
4525: FOR_TO
4526: IFFALSE 4618
// begin vc_engine = 3 ;
4528: LD_ADDR_OWVAR 39
4532: PUSH
4533: LD_INT 3
4535: ST_TO_ADDR
// vc_control = 3 ;
4536: LD_ADDR_OWVAR 38
4540: PUSH
4541: LD_INT 3
4543: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
4544: LD_ADDR_OWVAR 37
4548: PUSH
4549: LD_INT 24
4551: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
4552: LD_ADDR_OWVAR 40
4556: PUSH
4557: LD_INT 44
4559: PUSH
4560: LD_INT 47
4562: PUSH
4563: LD_INT 45
4565: PUSH
4566: LD_INT 46
4568: PUSH
4569: LD_INT 49
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 4
4584: PPUSH
4585: CALL_OW 12
4589: ARRAY
4590: ST_TO_ADDR
// veh = CreateVehicle ;
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: CALL_OW 45
4600: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
4601: LD_VAR 0 3
4605: PPUSH
4606: LD_INT 14
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 49
// end ;
4616: GO 4525
4618: POP
4619: POP
// repeat wait ( 0 0$1 ) ;
4620: LD_INT 35
4622: PPUSH
4623: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 6
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 50
4654: PUSH
4655: EMPTY
4656: LIST
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: PPUSH
4663: CALL_OW 69
4667: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4668: LD_EXP 1
4672: PPUSH
4673: CALL_OW 310
4677: NOT
4678: IFFALSE 4711
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
4680: LD_VAR 0 4
4684: PPUSH
4685: LD_EXP 1
4689: PPUSH
4690: CALL_OW 250
4694: PPUSH
4695: LD_EXP 1
4699: PPUSH
4700: CALL_OW 251
4704: PPUSH
4705: CALL_OW 114
4709: GO 4750
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
4711: LD_VAR 0 4
4715: PPUSH
4716: LD_EXP 1
4720: PPUSH
4721: CALL_OW 310
4725: PPUSH
4726: CALL_OW 250
4730: PPUSH
4731: LD_EXP 1
4735: PPUSH
4736: CALL_OW 310
4740: PPUSH
4741: CALL_OW 251
4745: PPUSH
4746: CALL_OW 114
// until vehList = 0 ;
4750: LD_VAR 0 4
4754: PUSH
4755: LD_INT 0
4757: EQUAL
4758: IFFALSE 4620
// end ;
4760: LD_VAR 0 1
4764: RET
// export function PreapreMehBehs ; var i , un ; begin
4765: LD_INT 0
4767: PPUSH
4768: PPUSH
4769: PPUSH
// uc_side = 6 ;
4770: LD_ADDR_OWVAR 20
4774: PUSH
4775: LD_INT 6
4777: ST_TO_ADDR
// uc_nation = 3 ;
4778: LD_ADDR_OWVAR 21
4782: PUSH
4783: LD_INT 3
4785: ST_TO_ADDR
// for i := 1 to 3 do
4786: LD_ADDR_VAR 0 2
4790: PUSH
4791: DOUBLE
4792: LD_INT 1
4794: DEC
4795: ST_TO_ADDR
4796: LD_INT 3
4798: PUSH
4799: FOR_TO
4800: IFFALSE 4871
// begin hc_name =  ;
4802: LD_ADDR_OWVAR 26
4806: PUSH
4807: LD_STRING 
4809: ST_TO_ADDR
// hc_gallery =  ;
4810: LD_ADDR_OWVAR 33
4814: PUSH
4815: LD_STRING 
4817: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
4818: LD_INT 0
4820: PPUSH
4821: LD_INT 10
4823: PPUSH
4824: CALL_OW 383
// un = CreateHuman ;
4828: LD_ADDR_VAR 0 3
4832: PUSH
4833: CALL_OW 44
4837: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
4838: LD_ADDR_EXP 42
4842: PUSH
4843: LD_EXP 42
4847: PUSH
4848: LD_VAR 0 3
4852: ADD
4853: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
4854: LD_VAR 0 3
4858: PPUSH
4859: LD_INT 17
4861: PPUSH
4862: LD_INT 0
4864: PPUSH
4865: CALL_OW 49
// end ;
4869: GO 4799
4871: POP
4872: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
4873: LD_EXP 36
4877: PPUSH
4878: LD_INT 17
4880: PPUSH
4881: LD_INT 0
4883: PPUSH
4884: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
4888: LD_EXP 36
4892: PPUSH
4893: LD_INT 6
4895: PPUSH
4896: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
4900: LD_INT 145
4902: PPUSH
4903: LD_INT 6
4905: PPUSH
4906: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
4910: LD_EXP 42
4914: PUSH
4915: LD_INT 1
4917: ARRAY
4918: PPUSH
4919: LD_INT 37
4921: PPUSH
4922: LD_INT 193
4924: PPUSH
4925: LD_INT 118
4927: PPUSH
4928: LD_INT 0
4930: PPUSH
4931: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
4935: LD_EXP 42
4939: PUSH
4940: LD_INT 2
4942: ARRAY
4943: PPUSH
4944: LD_INT 37
4946: PPUSH
4947: LD_INT 204
4949: PPUSH
4950: LD_INT 119
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
4960: LD_EXP 42
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: LD_INT 37
4971: PPUSH
4972: LD_INT 195
4974: PPUSH
4975: LD_INT 126
4977: PPUSH
4978: LD_INT 0
4980: PPUSH
4981: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
4985: LD_EXP 42
4989: PUSH
4990: LD_INT 4
4992: ARRAY
4993: PPUSH
4994: LD_INT 37
4996: PPUSH
4997: LD_INT 207
4999: PPUSH
5000: LD_INT 126
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 170
// end ; end_of_file
5010: LD_VAR 0 1
5014: RET
// export function PrepareAlliance ; var i ; begin
5015: LD_INT 0
5017: PPUSH
5018: PPUSH
// uc_side = 7 ;
5019: LD_ADDR_OWVAR 20
5023: PUSH
5024: LD_INT 7
5026: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
5027: LD_ADDR_EXP 28
5031: PUSH
5032: LD_STRING Roth
5034: PPUSH
5035: LD_INT 0
5037: PPUSH
5038: CALL 5416 0 2
5042: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
5043: LD_EXP 28
5047: PPUSH
5048: LD_INT 249
5050: PPUSH
5051: LD_INT 187
5053: PPUSH
5054: LD_INT 0
5056: PPUSH
5057: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
5061: LD_EXP 28
5065: PPUSH
5066: LD_INT 248
5068: PPUSH
5069: LD_INT 187
5071: PPUSH
5072: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
5076: LD_INT 7
5078: PPUSH
5079: LD_INT 1
5081: PPUSH
5082: LD_INT 45
5084: PPUSH
5085: LD_INT 10
5087: PPUSH
5088: LD_INT 2
5090: PPUSH
5091: LD_INT 3
5093: PPUSH
5094: CALL 6522 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
5098: LD_INT 7
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: LD_INT 45
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: LD_INT 2
5112: PPUSH
5113: LD_INT 2
5115: PPUSH
5116: CALL 6522 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
5120: LD_INT 7
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: LD_INT 194
5128: PPUSH
5129: LD_INT 10
5131: PPUSH
5132: LD_INT 5
5134: PPUSH
5135: LD_INT 4
5137: PPUSH
5138: CALL 6522 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
5142: LD_INT 7
5144: PPUSH
5145: LD_INT 3
5147: PPUSH
5148: LD_INT 194
5150: PPUSH
5151: LD_INT 10
5153: PPUSH
5154: LD_INT 8
5156: PPUSH
5157: LD_INT 6
5159: PPUSH
5160: CALL 6522 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
5164: LD_INT 7
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_INT 156
5172: PPUSH
5173: LD_INT 10
5175: PPUSH
5176: LD_INT 3
5178: PPUSH
5179: LD_INT 6
5181: PPUSH
5182: CALL 6522 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
5186: LD_INT 7
5188: PPUSH
5189: LD_INT 3
5191: PPUSH
5192: LD_INT 162
5194: PPUSH
5195: LD_INT 10
5197: PPUSH
5198: LD_INT 3
5200: PPUSH
5201: LD_INT 6
5203: PPUSH
5204: CALL 6522 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
5208: LD_INT 7
5210: PPUSH
5211: LD_INT 3
5213: PPUSH
5214: LD_INT 39
5216: PPUSH
5217: LD_INT 10
5219: PPUSH
5220: LD_INT 4
5222: PPUSH
5223: LD_INT 4
5225: PPUSH
5226: CALL 6522 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
5230: LD_INT 7
5232: PPUSH
5233: LD_INT 3
5235: PPUSH
5236: LD_INT 133
5238: PPUSH
5239: LD_INT 10
5241: PPUSH
5242: LD_INT 4
5244: PPUSH
5245: LD_INT 4
5247: PPUSH
5248: CALL 6522 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
5252: LD_INT 7
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_INT 46
5260: PPUSH
5261: LD_INT 10
5263: PPUSH
5264: LD_INT 4
5266: PPUSH
5267: LD_INT 2
5269: PPUSH
5270: CALL 6522 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5274: LD_ADDR_VAR 0 2
5278: PUSH
5279: LD_INT 22
5281: PUSH
5282: LD_INT 7
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 21
5291: PUSH
5292: LD_INT 3
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 30
5301: PUSH
5302: LD_INT 32
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 58
5311: PUSH
5312: EMPTY
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 69
5325: PUSH
5326: FOR_IN
5327: IFFALSE 5374
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
5329: LD_INT 7
5331: PPUSH
5332: LD_INT 1
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 1
5344: PPUSH
5345: LD_INT 2
5347: PPUSH
5348: CALL_OW 12
5352: ARRAY
5353: PPUSH
5354: LD_VAR 0 2
5358: PPUSH
5359: LD_INT 10
5361: PPUSH
5362: LD_INT 1
5364: PPUSH
5365: LD_INT 1
5367: PPUSH
5368: CALL 6522 0 6
5372: GO 5326
5374: POP
5375: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
5376: LD_INT 7
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_INT 226
5384: PPUSH
5385: LD_INT 10
5387: PPUSH
5388: LD_INT 3
5390: PPUSH
5391: LD_INT 3
5393: PPUSH
5394: CALL 6522 0 6
// allianceControler = UnitsInside ( AllControl ) ;
5398: LD_ADDR_EXP 47
5402: PUSH
5403: LD_INT 226
5405: PPUSH
5406: CALL_OW 313
5410: ST_TO_ADDR
// end ; end_of_file
5411: LD_VAR 0 1
5415: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
// if exist_mode then
5420: LD_VAR 0 2
5424: IFFALSE 5443
// unit := CreateCharacter ( ident ) else
5426: LD_ADDR_VAR 0 4
5430: PUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: CALL_OW 34
5440: ST_TO_ADDR
5441: GO 5458
// unit := NewCharacter ( ident ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 25
5457: ST_TO_ADDR
// result := unit ;
5458: LD_ADDR_VAR 0 3
5462: PUSH
5463: LD_VAR 0 4
5467: ST_TO_ADDR
// end ;
5468: LD_VAR 0 3
5472: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
5473: LD_INT 0
5475: PPUSH
5476: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
5477: LD_STRING 13s_
5479: PUSH
5480: LD_VAR 0 1
5484: STR
5485: PPUSH
5486: CALL_OW 28
5490: PUSH
5491: LD_INT 1
5493: EQUAL
5494: IFFALSE 5515
// unit = CreateCharacter ( 13s_ & ident ) ;
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_STRING 13s_
5503: PUSH
5504: LD_VAR 0 1
5508: STR
5509: PPUSH
5510: CALL_OW 34
5514: ST_TO_ADDR
// result := unit ;
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: LD_VAR 0 3
5524: ST_TO_ADDR
// end ;
5525: LD_VAR 0 2
5529: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
5530: LD_INT 0
5532: PPUSH
5533: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
5534: LD_STRING 13f_
5536: PUSH
5537: LD_VAR 0 1
5541: STR
5542: PPUSH
5543: CALL_OW 28
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5588
// begin unit = CreateCharacter ( 13f_ & ident ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_STRING 13f_
5560: PUSH
5561: LD_VAR 0 1
5565: STR
5566: PPUSH
5567: CALL_OW 34
5571: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
5572: LD_ADDR_EXP 20
5576: PUSH
5577: LD_EXP 20
5581: PUSH
5582: LD_VAR 0 3
5586: ADD
5587: ST_TO_ADDR
// end ; result := unit ;
5588: LD_ADDR_VAR 0 2
5592: PUSH
5593: LD_VAR 0 3
5597: ST_TO_ADDR
// end ;
5598: LD_VAR 0 2
5602: RET
// export function TabLenght ( tab ) ; var i ; begin
5603: LD_INT 0
5605: PPUSH
5606: PPUSH
// for i = 1 to tab do
5607: LD_ADDR_VAR 0 3
5611: PUSH
5612: DOUBLE
5613: LD_INT 1
5615: DEC
5616: ST_TO_ADDR
5617: LD_VAR 0 1
5621: PUSH
5622: FOR_TO
5623: IFFALSE 5637
// result = i ;
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: LD_VAR 0 3
5634: ST_TO_ADDR
5635: GO 5622
5637: POP
5638: POP
// end ;
5639: LD_VAR 0 2
5643: RET
// export function Video ( mode ) ; begin
5644: LD_INT 0
5646: PPUSH
// if mode = true then
5647: LD_VAR 0 1
5651: PUSH
5652: LD_INT 1
5654: EQUAL
5655: IFFALSE 5675
// begin ingame_video = true ;
5657: LD_ADDR_OWVAR 52
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// interface_hidden = true ;
5665: LD_ADDR_OWVAR 54
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// end else
5673: GO 5691
// begin ingame_video = false ;
5675: LD_ADDR_OWVAR 52
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// interface_hidden = false ;
5683: LD_ADDR_OWVAR 54
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// end ; end ;
5691: LD_VAR 0 2
5695: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5696: LD_INT 0
5698: PPUSH
5699: PPUSH
5700: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5701: LD_ADDR_VAR 0 1
5705: PUSH
5706: LD_VAR 0 1
5710: PUSH
5711: LD_EXP 1
5715: PUSH
5716: LD_EXP 3
5720: PUSH
5721: LD_EXP 21
5725: PUSH
5726: LD_EXP 4
5730: PUSH
5731: LD_EXP 5
5735: PUSH
5736: LD_EXP 6
5740: PUSH
5741: LD_EXP 7
5745: PUSH
5746: LD_EXP 8
5750: PUSH
5751: LD_EXP 9
5755: PUSH
5756: LD_EXP 10
5760: PUSH
5761: LD_EXP 11
5765: PUSH
5766: LD_EXP 12
5770: PUSH
5771: LD_EXP 13
5775: PUSH
5776: LD_EXP 14
5780: PUSH
5781: LD_EXP 15
5785: PUSH
5786: LD_EXP 17
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: DIFF
5809: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
5810: LD_ADDR_VAR 0 6
5814: PUSH
5815: LD_INT 1
5817: PPUSH
5818: LD_VAR 0 1
5822: PPUSH
5823: CALL_OW 12
5827: ST_TO_ADDR
// for i = 1 to characters do
5828: LD_ADDR_VAR 0 5
5832: PUSH
5833: DOUBLE
5834: LD_INT 1
5836: DEC
5837: ST_TO_ADDR
5838: LD_VAR 0 1
5842: PUSH
5843: FOR_TO
5844: IFFALSE 5954
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5846: LD_VAR 0 5
5850: PUSH
5851: LD_VAR 0 6
5855: EQUAL
5856: PUSH
5857: LD_VAR 0 1
5861: PUSH
5862: LD_VAR 0 5
5866: ARRAY
5867: PPUSH
5868: CALL_OW 258
5872: PUSH
5873: LD_INT 1
5875: EQUAL
5876: AND
5877: IFFALSE 5899
// Say ( characters [ i ] , dialogMID ) ;
5879: LD_VAR 0 1
5883: PUSH
5884: LD_VAR 0 5
5888: ARRAY
5889: PPUSH
5890: LD_VAR 0 2
5894: PPUSH
5895: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5899: LD_VAR 0 5
5903: PUSH
5904: LD_VAR 0 6
5908: EQUAL
5909: PUSH
5910: LD_VAR 0 1
5914: PUSH
5915: LD_VAR 0 5
5919: ARRAY
5920: PPUSH
5921: CALL_OW 258
5925: PUSH
5926: LD_INT 2
5928: EQUAL
5929: AND
5930: IFFALSE 5952
// Say ( characters [ i ] , dialogFID ) ;
5932: LD_VAR 0 1
5936: PUSH
5937: LD_VAR 0 5
5941: ARRAY
5942: PPUSH
5943: LD_VAR 0 3
5947: PPUSH
5948: CALL_OW 88
// end ;
5952: GO 5843
5954: POP
5955: POP
// end ;
5956: LD_VAR 0 4
5960: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
// if not list then
5967: LD_VAR 0 1
5971: NOT
5972: IFFALSE 5976
// exit ;
5974: GO 6323
// result := [ ] ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: EMPTY
5982: ST_TO_ADDR
// for i in list do
5983: LD_ADDR_VAR 0 4
5987: PUSH
5988: LD_VAR 0 1
5992: PUSH
5993: FOR_IN
5994: IFFALSE 6235
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
5996: LD_ADDR_VAR 0 6
6000: PUSH
6001: LD_VAR 0 4
6005: PPUSH
6006: LD_INT 1
6008: PPUSH
6009: CALL_OW 259
6013: PUSH
6014: LD_VAR 0 4
6018: PPUSH
6019: LD_INT 2
6021: PPUSH
6022: CALL_OW 259
6026: PLUS
6027: PUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: LD_INT 3
6035: PPUSH
6036: CALL_OW 259
6040: PLUS
6041: PUSH
6042: LD_VAR 0 4
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: CALL_OW 259
6054: PLUS
6055: PUSH
6056: LD_INT 4
6058: DIV
6059: ST_TO_ADDR
// if not result then
6060: LD_VAR 0 3
6064: NOT
6065: IFFALSE 6091
// result := [ [ i , tmp ] ] else
6067: LD_ADDR_VAR 0 3
6071: PUSH
6072: LD_VAR 0 4
6076: PUSH
6077: LD_VAR 0 6
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: ST_TO_ADDR
6089: GO 6233
// begin if result [ result ] [ 2 ] <= tmp then
6091: LD_VAR 0 3
6095: PUSH
6096: LD_VAR 0 3
6100: ARRAY
6101: PUSH
6102: LD_INT 2
6104: ARRAY
6105: PUSH
6106: LD_VAR 0 6
6110: LESSEQUAL
6111: IFFALSE 6153
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6113: LD_ADDR_VAR 0 3
6117: PUSH
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 1
6130: PLUS
6131: PPUSH
6132: LD_VAR 0 4
6136: PUSH
6137: LD_VAR 0 6
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PPUSH
6146: CALL_OW 2
6150: ST_TO_ADDR
6151: GO 6233
// for j = 1 to result do
6153: LD_ADDR_VAR 0 5
6157: PUSH
6158: DOUBLE
6159: LD_INT 1
6161: DEC
6162: ST_TO_ADDR
6163: LD_VAR 0 3
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6231
// begin if tmp < result [ j ] [ 2 ] then
6171: LD_VAR 0 6
6175: PUSH
6176: LD_VAR 0 3
6180: PUSH
6181: LD_VAR 0 5
6185: ARRAY
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: LESS
6191: IFFALSE 6229
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6193: LD_ADDR_VAR 0 3
6197: PUSH
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_VAR 0 5
6207: PPUSH
6208: LD_VAR 0 4
6212: PUSH
6213: LD_VAR 0 6
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 2
6226: ST_TO_ADDR
// break ;
6227: GO 6231
// end ; end ;
6229: GO 6168
6231: POP
6232: POP
// end ; end ;
6233: GO 5993
6235: POP
6236: POP
// if result and not asc then
6237: LD_VAR 0 3
6241: PUSH
6242: LD_VAR 0 2
6246: NOT
6247: AND
6248: IFFALSE 6323
// begin tmp := result ;
6250: LD_ADDR_VAR 0 6
6254: PUSH
6255: LD_VAR 0 3
6259: ST_TO_ADDR
// for i = tmp downto 1 do
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: DOUBLE
6266: LD_VAR 0 6
6270: INC
6271: ST_TO_ADDR
6272: LD_INT 1
6274: PUSH
6275: FOR_DOWNTO
6276: IFFALSE 6321
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6278: LD_ADDR_VAR 0 3
6282: PUSH
6283: LD_VAR 0 3
6287: PPUSH
6288: LD_VAR 0 6
6292: PUSH
6293: LD_VAR 0 4
6297: MINUS
6298: PUSH
6299: LD_INT 1
6301: PLUS
6302: PPUSH
6303: LD_VAR 0 6
6307: PUSH
6308: LD_VAR 0 4
6312: ARRAY
6313: PPUSH
6314: CALL_OW 1
6318: ST_TO_ADDR
6319: GO 6275
6321: POP
6322: POP
// end ; end ;
6323: LD_VAR 0 3
6327: RET
// export function PrepareDifficulty ; begin
6328: LD_INT 0
6330: PPUSH
// if difficulty = 1 then
6331: LD_OWVAR 67
6335: PUSH
6336: LD_INT 1
6338: EQUAL
6339: IFFALSE 6367
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
6341: LD_INT 51
6343: PPUSH
6344: LD_INT 6
6346: PPUSH
6347: LD_INT 2
6349: PPUSH
6350: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
6354: LD_INT 57
6356: PPUSH
6357: LD_INT 6
6359: PPUSH
6360: LD_INT 2
6362: PPUSH
6363: CALL_OW 322
// end ; if difficulty = 2 then
6367: LD_OWVAR 67
6371: PUSH
6372: LD_INT 2
6374: EQUAL
6375: IFFALSE 6429
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
6377: LD_INT 51
6379: PPUSH
6380: LD_INT 6
6382: PPUSH
6383: LD_INT 2
6385: PPUSH
6386: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
6390: LD_INT 57
6392: PPUSH
6393: LD_INT 6
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
6403: LD_INT 52
6405: PPUSH
6406: LD_INT 6
6408: PPUSH
6409: LD_INT 2
6411: PPUSH
6412: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
6416: LD_INT 58
6418: PPUSH
6419: LD_INT 6
6421: PPUSH
6422: LD_INT 2
6424: PPUSH
6425: CALL_OW 322
// end ; if difficulty = 3 then
6429: LD_OWVAR 67
6433: PUSH
6434: LD_INT 3
6436: EQUAL
6437: IFFALSE 6517
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
6439: LD_INT 51
6441: PPUSH
6442: LD_INT 6
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
6452: LD_INT 57
6454: PPUSH
6455: LD_INT 6
6457: PPUSH
6458: LD_INT 2
6460: PPUSH
6461: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
6465: LD_INT 52
6467: PPUSH
6468: LD_INT 6
6470: PPUSH
6471: LD_INT 2
6473: PPUSH
6474: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
6478: LD_INT 58
6480: PPUSH
6481: LD_INT 6
6483: PPUSH
6484: LD_INT 2
6486: PPUSH
6487: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
6491: LD_INT 53
6493: PPUSH
6494: LD_INT 6
6496: PPUSH
6497: LD_INT 2
6499: PPUSH
6500: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
6504: LD_INT 59
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: LD_INT 2
6512: PPUSH
6513: CALL_OW 322
// end ; end ;
6517: LD_VAR 0 1
6521: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
// for i = 1 to count do
6529: LD_ADDR_VAR 0 8
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 6
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6626
// begin uc_side = side ;
6547: LD_ADDR_OWVAR 20
6551: PUSH
6552: LD_VAR 0 1
6556: ST_TO_ADDR
// uc_nation = nation ;
6557: LD_ADDR_OWVAR 21
6561: PUSH
6562: LD_VAR 0 2
6566: ST_TO_ADDR
// hc_gallery =  ;
6567: LD_ADDR_OWVAR 33
6571: PUSH
6572: LD_STRING 
6574: ST_TO_ADDR
// hc_name =  ;
6575: LD_ADDR_OWVAR 26
6579: PUSH
6580: LD_STRING 
6582: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6583: LD_INT 0
6585: PPUSH
6586: LD_VAR 0 5
6590: PPUSH
6591: LD_VAR 0 4
6595: PPUSH
6596: CALL_OW 380
// un = CreateHuman ;
6600: LD_ADDR_VAR 0 10
6604: PUSH
6605: CALL_OW 44
6609: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6610: LD_VAR 0 10
6614: PPUSH
6615: LD_VAR 0 3
6619: PPUSH
6620: CALL_OW 52
// end ;
6624: GO 6544
6626: POP
6627: POP
// end ;
6628: LD_VAR 0 7
6632: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
6633: LD_INT 0
6635: PPUSH
6636: PPUSH
6637: PPUSH
6638: PPUSH
6639: PPUSH
6640: PPUSH
6641: PPUSH
6642: PPUSH
6643: PPUSH
6644: PPUSH
6645: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
6646: LD_INT 2100
6648: PUSH
6649: LD_INT 3150
6651: PUSH
6652: LD_INT 4200
6654: PUSH
6655: LD_INT 5250
6657: PUSH
6658: LD_INT 6300
6660: PUSH
6661: LD_INT 7350
6663: PUSH
6664: LD_INT 8400
6666: PUSH
6667: LD_INT 9450
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 1
6682: PPUSH
6683: LD_INT 8
6685: PPUSH
6686: CALL_OW 12
6690: ARRAY
6691: PPUSH
6692: CALL_OW 67
// amChassisTab = [ ] ;
6696: LD_ADDR_VAR 0 19
6700: PUSH
6701: EMPTY
6702: ST_TO_ADDR
// arChassisTab = [ ] ;
6703: LD_ADDR_VAR 0 18
6707: PUSH
6708: EMPTY
6709: ST_TO_ADDR
// ruChassisTab = [ ] ;
6710: LD_ADDR_VAR 0 17
6714: PUSH
6715: EMPTY
6716: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6717: LD_INT 35
6719: PPUSH
6720: CALL_OW 67
// if nation = 1 then
6724: LD_VAR 0 5
6728: PUSH
6729: LD_INT 1
6731: EQUAL
6732: IFFALSE 7223
// begin uc_side = side ;
6734: LD_ADDR_OWVAR 20
6738: PUSH
6739: LD_VAR 0 2
6743: ST_TO_ADDR
// uc_nation = nation ;
6744: LD_ADDR_OWVAR 21
6748: PUSH
6749: LD_VAR 0 5
6753: ST_TO_ADDR
// vc_engine = vehengine ;
6754: LD_ADDR_OWVAR 39
6758: PUSH
6759: LD_VAR 0 6
6763: ST_TO_ADDR
// vc_control = vehcontrol ;
6764: LD_ADDR_OWVAR 38
6768: PUSH
6769: LD_VAR 0 7
6773: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
6774: LD_ADDR_OWVAR 40
6778: PUSH
6779: LD_VAR 0 10
6783: PUSH
6784: LD_INT 1
6786: PPUSH
6787: LD_VAR 0 10
6791: PPUSH
6792: CALL_OW 12
6796: ARRAY
6797: ST_TO_ADDR
// for j = 1 to AMWeapon do
6798: LD_ADDR_VAR 0 14
6802: PUSH
6803: DOUBLE
6804: LD_INT 1
6806: DEC
6807: ST_TO_ADDR
6808: LD_VAR 0 10
6812: PUSH
6813: FOR_TO
6814: IFFALSE 7115
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
6816: LD_VAR 0 10
6820: PUSH
6821: LD_VAR 0 14
6825: ARRAY
6826: PUSH
6827: LD_INT 2
6829: EQUAL
6830: PUSH
6831: LD_VAR 0 10
6835: PUSH
6836: LD_VAR 0 14
6840: ARRAY
6841: PUSH
6842: LD_INT 3
6844: EQUAL
6845: OR
6846: IFFALSE 6899
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
6848: LD_ADDR_VAR 0 19
6852: PUSH
6853: LD_INT 1
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: LD_INT 5
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6875: LD_ADDR_OWVAR 37
6879: PUSH
6880: LD_VAR 0 19
6884: PUSH
6885: LD_INT 1
6887: PPUSH
6888: LD_VAR 0 19
6892: PPUSH
6893: CALL_OW 12
6897: ARRAY
6898: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
6899: LD_VAR 0 10
6903: PUSH
6904: LD_VAR 0 14
6908: ARRAY
6909: PUSH
6910: LD_INT 4
6912: EQUAL
6913: PUSH
6914: LD_VAR 0 10
6918: PUSH
6919: LD_VAR 0 14
6923: ARRAY
6924: PUSH
6925: LD_INT 5
6927: EQUAL
6928: OR
6929: PUSH
6930: LD_VAR 0 10
6934: PUSH
6935: LD_VAR 0 14
6939: ARRAY
6940: PUSH
6941: LD_INT 9
6943: EQUAL
6944: OR
6945: PUSH
6946: LD_VAR 0 10
6950: PUSH
6951: LD_VAR 0 14
6955: ARRAY
6956: PUSH
6957: LD_INT 11
6959: EQUAL
6960: OR
6961: PUSH
6962: LD_VAR 0 10
6966: PUSH
6967: LD_VAR 0 14
6971: ARRAY
6972: PUSH
6973: LD_INT 7
6975: EQUAL
6976: OR
6977: IFFALSE 7026
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
6979: LD_ADDR_VAR 0 19
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 4
6992: PUSH
6993: LD_INT 5
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7002: LD_ADDR_OWVAR 37
7006: PUSH
7007: LD_VAR 0 19
7011: PUSH
7012: LD_INT 1
7014: PPUSH
7015: LD_VAR 0 19
7019: PPUSH
7020: CALL_OW 12
7024: ARRAY
7025: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
7026: LD_VAR 0 10
7030: PUSH
7031: LD_VAR 0 14
7035: ARRAY
7036: PUSH
7037: LD_INT 8
7039: EQUAL
7040: PUSH
7041: LD_VAR 0 10
7045: PUSH
7046: LD_VAR 0 14
7050: ARRAY
7051: PUSH
7052: LD_INT 6
7054: EQUAL
7055: OR
7056: PUSH
7057: LD_VAR 0 10
7061: PUSH
7062: LD_VAR 0 14
7066: ARRAY
7067: PUSH
7068: LD_INT 10
7070: EQUAL
7071: OR
7072: IFFALSE 7113
// begin amChassisTab = [ 4 , 5 ] ;
7074: LD_ADDR_VAR 0 19
7078: PUSH
7079: LD_INT 4
7081: PUSH
7082: LD_INT 5
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7089: LD_ADDR_OWVAR 37
7093: PUSH
7094: LD_VAR 0 19
7098: PUSH
7099: LD_INT 1
7101: PPUSH
7102: LD_VAR 0 19
7106: PPUSH
7107: CALL_OW 12
7111: ARRAY
7112: ST_TO_ADDR
// end ; end ;
7113: GO 6813
7115: POP
7116: POP
// veh = CreateVehicle ;
7117: LD_ADDR_VAR 0 16
7121: PUSH
7122: CALL_OW 45
7126: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7127: LD_VAR 0 16
7131: PPUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_INT 0
7139: PPUSH
7140: CALL_OW 49
// if vc_control = 1 then
7144: LD_OWVAR 38
7148: PUSH
7149: LD_INT 1
7151: EQUAL
7152: IFFALSE 7209
// begin hc_gallery =  ;
7154: LD_ADDR_OWVAR 33
7158: PUSH
7159: LD_STRING 
7161: ST_TO_ADDR
// hc_name =  ;
7162: LD_ADDR_OWVAR 26
7166: PUSH
7167: LD_STRING 
7169: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7170: LD_INT 0
7172: PPUSH
7173: LD_INT 3
7175: PPUSH
7176: LD_VAR 0 4
7180: PPUSH
7181: CALL_OW 380
// un = CreateHuman ;
7185: LD_ADDR_VAR 0 15
7189: PUSH
7190: CALL_OW 44
7194: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7195: LD_VAR 0 15
7199: PPUSH
7200: LD_VAR 0 16
7204: PPUSH
7205: CALL_OW 52
// end ; i = i + 1 ;
7209: LD_ADDR_VAR 0 13
7213: PUSH
7214: LD_VAR 0 13
7218: PUSH
7219: LD_INT 1
7221: PLUS
7222: ST_TO_ADDR
// end ; if nation = 2 then
7223: LD_VAR 0 5
7227: PUSH
7228: LD_INT 2
7230: EQUAL
7231: IFFALSE 7655
// begin uc_side = side ;
7233: LD_ADDR_OWVAR 20
7237: PUSH
7238: LD_VAR 0 2
7242: ST_TO_ADDR
// uc_nation = nation ;
7243: LD_ADDR_OWVAR 21
7247: PUSH
7248: LD_VAR 0 5
7252: ST_TO_ADDR
// vc_engine = vehengine ;
7253: LD_ADDR_OWVAR 39
7257: PUSH
7258: LD_VAR 0 6
7262: ST_TO_ADDR
// vc_control = vehcontrol ;
7263: LD_ADDR_OWVAR 38
7267: PUSH
7268: LD_VAR 0 7
7272: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
7273: LD_ADDR_OWVAR 40
7277: PUSH
7278: LD_VAR 0 9
7282: PUSH
7283: LD_INT 1
7285: PPUSH
7286: LD_VAR 0 9
7290: PPUSH
7291: CALL_OW 12
7295: ARRAY
7296: ST_TO_ADDR
// for j = 1 to ARWeapons do
7297: LD_ADDR_VAR 0 14
7301: PUSH
7302: DOUBLE
7303: LD_INT 1
7305: DEC
7306: ST_TO_ADDR
7307: LD_VAR 0 9
7311: PUSH
7312: FOR_TO
7313: IFFALSE 7547
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
7315: LD_VAR 0 9
7319: PUSH
7320: LD_VAR 0 14
7324: ARRAY
7325: PUSH
7326: LD_INT 24
7328: EQUAL
7329: PUSH
7330: LD_VAR 0 9
7334: PUSH
7335: LD_VAR 0 14
7339: ARRAY
7340: PUSH
7341: LD_INT 22
7343: EQUAL
7344: OR
7345: PUSH
7346: LD_VAR 0 9
7350: PUSH
7351: LD_VAR 0 14
7355: ARRAY
7356: PUSH
7357: LD_INT 23
7359: EQUAL
7360: OR
7361: PUSH
7362: LD_VAR 0 9
7366: PUSH
7367: LD_VAR 0 14
7371: ARRAY
7372: PUSH
7373: LD_INT 30
7375: EQUAL
7376: OR
7377: IFFALSE 7426
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
7379: LD_ADDR_VAR 0 18
7383: PUSH
7384: LD_INT 11
7386: PUSH
7387: LD_INT 12
7389: PUSH
7390: LD_INT 13
7392: PUSH
7393: LD_INT 14
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7402: LD_ADDR_OWVAR 37
7406: PUSH
7407: LD_VAR 0 18
7411: PUSH
7412: LD_INT 1
7414: PPUSH
7415: LD_VAR 0 18
7419: PPUSH
7420: CALL_OW 12
7424: ARRAY
7425: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
7426: LD_VAR 0 9
7430: PUSH
7431: LD_VAR 0 14
7435: ARRAY
7436: PUSH
7437: LD_INT 29
7439: EQUAL
7440: PUSH
7441: LD_VAR 0 9
7445: PUSH
7446: LD_VAR 0 14
7450: ARRAY
7451: PUSH
7452: LD_INT 28
7454: EQUAL
7455: OR
7456: PUSH
7457: LD_VAR 0 9
7461: PUSH
7462: LD_VAR 0 14
7466: ARRAY
7467: PUSH
7468: LD_INT 27
7470: EQUAL
7471: OR
7472: PUSH
7473: LD_VAR 0 9
7477: PUSH
7478: LD_VAR 0 14
7482: ARRAY
7483: PUSH
7484: LD_INT 26
7486: EQUAL
7487: OR
7488: PUSH
7489: LD_VAR 0 9
7493: PUSH
7494: LD_VAR 0 14
7498: ARRAY
7499: PUSH
7500: LD_INT 25
7502: EQUAL
7503: OR
7504: IFFALSE 7545
// begin arChassisTab = [ 13 , 14 ] ;
7506: LD_ADDR_VAR 0 18
7510: PUSH
7511: LD_INT 13
7513: PUSH
7514: LD_INT 14
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7521: LD_ADDR_OWVAR 37
7525: PUSH
7526: LD_VAR 0 18
7530: PUSH
7531: LD_INT 1
7533: PPUSH
7534: LD_VAR 0 18
7538: PPUSH
7539: CALL_OW 12
7543: ARRAY
7544: ST_TO_ADDR
// end ; end ;
7545: GO 7312
7547: POP
7548: POP
// veh = CreateVehicle ;
7549: LD_ADDR_VAR 0 16
7553: PUSH
7554: CALL_OW 45
7558: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7559: LD_VAR 0 16
7563: PPUSH
7564: LD_VAR 0 1
7568: PPUSH
7569: LD_INT 0
7571: PPUSH
7572: CALL_OW 49
// if vc_control = 1 then
7576: LD_OWVAR 38
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7641
// begin hc_gallery =  ;
7586: LD_ADDR_OWVAR 33
7590: PUSH
7591: LD_STRING 
7593: ST_TO_ADDR
// hc_name =  ;
7594: LD_ADDR_OWVAR 26
7598: PUSH
7599: LD_STRING 
7601: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7602: LD_INT 0
7604: PPUSH
7605: LD_INT 3
7607: PPUSH
7608: LD_VAR 0 4
7612: PPUSH
7613: CALL_OW 380
// un = CreateHuman ;
7617: LD_ADDR_VAR 0 15
7621: PUSH
7622: CALL_OW 44
7626: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7627: LD_VAR 0 15
7631: PPUSH
7632: LD_VAR 0 16
7636: PPUSH
7637: CALL_OW 52
// end ; i = i + 1 ;
7641: LD_ADDR_VAR 0 13
7645: PUSH
7646: LD_VAR 0 13
7650: PUSH
7651: LD_INT 1
7653: PLUS
7654: ST_TO_ADDR
// end ; if nation = 3 then
7655: LD_VAR 0 5
7659: PUSH
7660: LD_INT 3
7662: EQUAL
7663: IFFALSE 8039
// begin uc_side = side ;
7665: LD_ADDR_OWVAR 20
7669: PUSH
7670: LD_VAR 0 2
7674: ST_TO_ADDR
// uc_nation = nation ;
7675: LD_ADDR_OWVAR 21
7679: PUSH
7680: LD_VAR 0 5
7684: ST_TO_ADDR
// vc_engine = vehengine ;
7685: LD_ADDR_OWVAR 39
7689: PUSH
7690: LD_VAR 0 6
7694: ST_TO_ADDR
// vc_control = vehcontrol ;
7695: LD_ADDR_OWVAR 38
7699: PUSH
7700: LD_VAR 0 7
7704: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
7705: LD_ADDR_OWVAR 40
7709: PUSH
7710: LD_VAR 0 8
7714: PUSH
7715: LD_INT 1
7717: PPUSH
7718: LD_VAR 0 8
7722: PPUSH
7723: CALL_OW 12
7727: ARRAY
7728: ST_TO_ADDR
// for j = 1 to RuWeapons do
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 8
7743: PUSH
7744: FOR_TO
7745: IFFALSE 7931
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
7747: LD_VAR 0 8
7751: PUSH
7752: LD_VAR 0 14
7756: ARRAY
7757: PUSH
7758: LD_INT 42
7760: EQUAL
7761: PUSH
7762: LD_VAR 0 8
7766: PUSH
7767: LD_VAR 0 14
7771: ARRAY
7772: PUSH
7773: LD_INT 43
7775: EQUAL
7776: OR
7777: PUSH
7778: LD_VAR 0 8
7782: PUSH
7783: LD_VAR 0 14
7787: ARRAY
7788: PUSH
7789: LD_INT 44
7791: EQUAL
7792: OR
7793: PUSH
7794: LD_VAR 0 8
7798: PUSH
7799: LD_VAR 0 14
7803: ARRAY
7804: PUSH
7805: LD_INT 45
7807: EQUAL
7808: OR
7809: PUSH
7810: LD_VAR 0 8
7814: PUSH
7815: LD_VAR 0 14
7819: ARRAY
7820: PUSH
7821: LD_INT 49
7823: EQUAL
7824: OR
7825: IFFALSE 7862
// begin ruChassisTab = [ 24 ] ;
7827: LD_ADDR_VAR 0 17
7831: PUSH
7832: LD_INT 24
7834: PUSH
7835: EMPTY
7836: LIST
7837: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7838: LD_ADDR_OWVAR 37
7842: PUSH
7843: LD_VAR 0 17
7847: PUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_VAR 0 17
7855: PPUSH
7856: CALL_OW 12
7860: ARRAY
7861: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
7862: LD_VAR 0 8
7866: PUSH
7867: LD_VAR 0 14
7871: ARRAY
7872: PUSH
7873: LD_INT 46
7875: EQUAL
7876: PUSH
7877: LD_VAR 0 8
7881: PUSH
7882: LD_VAR 0 14
7886: ARRAY
7887: PUSH
7888: LD_INT 47
7890: EQUAL
7891: OR
7892: IFFALSE 7929
// begin ruChassisTab = [ 24 ] ;
7894: LD_ADDR_VAR 0 17
7898: PUSH
7899: LD_INT 24
7901: PUSH
7902: EMPTY
7903: LIST
7904: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7905: LD_ADDR_OWVAR 37
7909: PUSH
7910: LD_VAR 0 17
7914: PUSH
7915: LD_INT 1
7917: PPUSH
7918: LD_VAR 0 17
7922: PPUSH
7923: CALL_OW 12
7927: ARRAY
7928: ST_TO_ADDR
// end ; end ;
7929: GO 7744
7931: POP
7932: POP
// veh = CreateVehicle ;
7933: LD_ADDR_VAR 0 16
7937: PUSH
7938: CALL_OW 45
7942: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7943: LD_VAR 0 16
7947: PPUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 49
// if vc_control = 1 then
7960: LD_OWVAR 38
7964: PUSH
7965: LD_INT 1
7967: EQUAL
7968: IFFALSE 8025
// begin hc_gallery =  ;
7970: LD_ADDR_OWVAR 33
7974: PUSH
7975: LD_STRING 
7977: ST_TO_ADDR
// hc_name =  ;
7978: LD_ADDR_OWVAR 26
7982: PUSH
7983: LD_STRING 
7985: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7986: LD_INT 0
7988: PPUSH
7989: LD_INT 3
7991: PPUSH
7992: LD_VAR 0 4
7996: PPUSH
7997: CALL_OW 380
// un = CreateHuman ;
8001: LD_ADDR_VAR 0 15
8005: PUSH
8006: CALL_OW 44
8010: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8011: LD_VAR 0 15
8015: PPUSH
8016: LD_VAR 0 16
8020: PPUSH
8021: CALL_OW 52
// end ; i = i + 1 ;
8025: LD_ADDR_VAR 0 13
8029: PUSH
8030: LD_VAR 0 13
8034: PUSH
8035: LD_INT 1
8037: PLUS
8038: ST_TO_ADDR
// end ; until i = vehCount ;
8039: LD_VAR 0 13
8043: PUSH
8044: LD_VAR 0 3
8048: EQUAL
8049: IFFALSE 6717
// repeat wait ( 0 0$1 ) ;
8051: LD_INT 35
8053: PPUSH
8054: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
8058: LD_ADDR_VAR 0 20
8062: PUSH
8063: LD_INT 22
8065: PUSH
8066: LD_VAR 0 2
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 21
8077: PUSH
8078: LD_INT 2
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 24
8087: PUSH
8088: LD_INT 250
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 69
8104: ST_TO_ADDR
// if vehicleOK_list > 0 then
8105: LD_VAR 0 20
8109: PUSH
8110: LD_INT 0
8112: GREATER
8113: IFFALSE 8304
// begin for i in vehicleOK_list do
8115: LD_ADDR_VAR 0 13
8119: PUSH
8120: LD_VAR 0 20
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8302
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8128: LD_ADDR_VAR 0 21
8132: PUSH
8133: LD_INT 22
8135: PUSH
8136: LD_VAR 0 11
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PPUSH
8145: CALL_OW 69
8149: PPUSH
8150: LD_VAR 0 13
8154: PPUSH
8155: CALL_OW 74
8159: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8160: LD_ADDR_VAR 0 22
8164: PUSH
8165: LD_INT 22
8167: PUSH
8168: LD_VAR 0 11
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 2
8179: PUSH
8180: LD_INT 59
8182: PUSH
8183: EMPTY
8184: LIST
8185: PUSH
8186: LD_INT 21
8188: PUSH
8189: LD_INT 1
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 21
8198: PUSH
8199: LD_INT 2
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: PPUSH
8219: CALL_OW 69
8223: PPUSH
8224: LD_VAR 0 13
8228: PPUSH
8229: CALL_OW 74
8233: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8234: LD_VAR 0 13
8238: PPUSH
8239: LD_VAR 0 21
8243: PPUSH
8244: CALL_OW 296
8248: PUSH
8249: LD_INT 8
8251: PLUS
8252: PUSH
8253: LD_VAR 0 13
8257: PPUSH
8258: LD_VAR 0 22
8262: PPUSH
8263: CALL_OW 296
8267: LESS
8268: IFFALSE 8286
// begin ComAttackUnit ( i , target1 ) ;
8270: LD_VAR 0 13
8274: PPUSH
8275: LD_VAR 0 21
8279: PPUSH
8280: CALL_OW 115
// end else
8284: GO 8300
// begin ComAttackUnit ( i , target2 ) ;
8286: LD_VAR 0 13
8290: PPUSH
8291: LD_VAR 0 22
8295: PPUSH
8296: CALL_OW 115
// end ; end ;
8300: GO 8125
8302: POP
8303: POP
// end ; until vehicleOK_list = [ ] ;
8304: LD_VAR 0 20
8308: PUSH
8309: EMPTY
8310: EQUAL
8311: IFFALSE 8051
// end ;
8313: LD_VAR 0 12
8317: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
8318: LD_INT 0
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
// for i = 1 to 72 do
8324: LD_ADDR_VAR 0 5
8328: PUSH
8329: DOUBLE
8330: LD_INT 1
8332: DEC
8333: ST_TO_ADDR
8334: LD_INT 72
8336: PUSH
8337: FOR_TO
8338: IFFALSE 8396
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
8340: LD_VAR 0 5
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 321
8354: PUSH
8355: LD_INT 1
8357: EQUAL
8358: PUSH
8359: LD_VAR 0 5
8363: PPUSH
8364: LD_VAR 0 3
8368: PPUSH
8369: CALL_OW 482
8373: PUSH
8374: LD_INT 1
8376: EQUAL
8377: AND
8378: IFFALSE 8394
// AddComResearch ( lab , i ) ;
8380: LD_VAR 0 2
8384: PPUSH
8385: LD_VAR 0 5
8389: PPUSH
8390: CALL_OW 184
8394: GO 8337
8396: POP
8397: POP
// end ;
8398: LD_VAR 0 4
8402: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8403: LD_INT 0
8405: PPUSH
8406: PPUSH
8407: PPUSH
8408: PPUSH
8409: PPUSH
8410: PPUSH
// engineerOkInside = UnitFilter ( UnitsInside ( building ) , [ f_class , 2 ] ) ;
8411: LD_ADDR_VAR 0 7
8415: PUSH
8416: LD_VAR 0 2
8420: PPUSH
8421: CALL_OW 313
8425: PPUSH
8426: LD_INT 25
8428: PUSH
8429: LD_INT 2
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PPUSH
8436: CALL_OW 72
8440: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
8441: LD_ADDR_VAR 0 8
8445: PUSH
8446: LD_VAR 0 3
8450: PPUSH
8451: LD_INT 22
8453: PUSH
8454: LD_VAR 0 1
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 25
8465: PUSH
8466: LD_INT 2
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 24
8475: PUSH
8476: LD_INT 750
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: LD_INT 54
8488: PUSH
8489: EMPTY
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 70
8506: PUSH
8507: LD_EXP 35
8511: PUSH
8512: EMPTY
8513: LIST
8514: DIFF
8515: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8516: LD_ADDR_VAR 0 5
8520: PUSH
8521: LD_VAR 0 3
8525: PPUSH
8526: LD_INT 22
8528: PUSH
8529: LD_VAR 0 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 21
8540: PUSH
8541: LD_INT 3
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 3
8550: PUSH
8551: LD_INT 24
8553: PUSH
8554: LD_INT 1000
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: PPUSH
8573: CALL_OW 70
8577: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8578: LD_VAR 0 5
8582: NOT
8583: PUSH
8584: LD_INT 22
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 25
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 24
8608: PUSH
8609: LD_INT 250
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: PPUSH
8621: CALL_OW 69
8625: NOT
8626: AND
8627: IFFALSE 8631
// exit ;
8629: GO 8743
// if buildings_list > 0 and engineerOkInside then
8631: LD_VAR 0 5
8635: PUSH
8636: LD_INT 0
8638: GREATER
8639: PUSH
8640: LD_VAR 0 7
8644: AND
8645: IFFALSE 8671
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
8647: LD_VAR 0 7
8651: PPUSH
8652: LD_INT 25
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 72
8666: PPUSH
8667: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8671: LD_VAR 0 5
8675: PUSH
8676: LD_INT 0
8678: GREATER
8679: PUSH
8680: LD_VAR 0 8
8684: PUSH
8685: LD_INT 0
8687: GREATER
8688: AND
8689: IFFALSE 8709
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8691: LD_VAR 0 8
8695: PPUSH
8696: LD_VAR 0 5
8700: PUSH
8701: LD_INT 1
8703: ARRAY
8704: PPUSH
8705: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
8709: LD_VAR 0 5
8713: PUSH
8714: LD_INT 0
8716: EQUAL
8717: PUSH
8718: LD_VAR 0 8
8722: PUSH
8723: LD_INT 0
8725: GREATER
8726: AND
8727: IFFALSE 8743
// ComEnterUnit ( engineerOkOutside , building ) ;
8729: LD_VAR 0 8
8733: PPUSH
8734: LD_VAR 0 2
8738: PPUSH
8739: CALL_OW 120
// end ;
8743: LD_VAR 0 4
8747: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8748: LD_INT 0
8750: PPUSH
8751: PPUSH
8752: PPUSH
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
8759: LD_ADDR_VAR 0 6
8763: PUSH
8764: LD_INT 22
8766: PUSH
8767: LD_VAR 0 1
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 4
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 23
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 24
8798: PUSH
8799: LD_INT 251
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PPUSH
8812: CALL_OW 69
8816: PUSH
8817: LD_EXP 35
8821: PUSH
8822: EMPTY
8823: LIST
8824: DIFF
8825: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
8826: LD_ADDR_VAR 0 7
8830: PUSH
8831: LD_VAR 0 3
8835: PPUSH
8836: LD_INT 22
8838: PUSH
8839: LD_VAR 0 1
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 23
8850: PUSH
8851: LD_INT 2
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 25
8860: PUSH
8861: LD_INT 4
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 50
8870: PUSH
8871: EMPTY
8872: LIST
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 70
8884: PUSH
8885: LD_EXP 35
8889: PUSH
8890: EMPTY
8891: LIST
8892: DIFF
8893: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8894: LD_ADDR_VAR 0 10
8898: PUSH
8899: LD_VAR 0 3
8903: PPUSH
8904: LD_INT 22
8906: PUSH
8907: LD_VAR 0 1
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: LD_INT 25
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 3
8945: PUSH
8946: LD_INT 24
8948: PUSH
8949: LD_INT 750
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 70
8970: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8971: LD_ADDR_VAR 0 11
8975: PUSH
8976: LD_VAR 0 2
8980: PPUSH
8981: LD_INT 22
8983: PUSH
8984: LD_VAR 0 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 21
8995: PUSH
8996: LD_INT 1
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: LD_INT 25
9008: PUSH
9009: LD_INT 3
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 24
9025: PUSH
9026: LD_INT 1000
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: PPUSH
9043: CALL_OW 70
9047: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9048: LD_VAR 0 10
9052: NOT
9053: PUSH
9054: LD_VAR 0 11
9058: NOT
9059: AND
9060: PUSH
9061: LD_VAR 0 6
9065: NOT
9066: AND
9067: IFFALSE 9071
// exit ;
9069: GO 9305
// if damageUnits > 0 and sci_list > 0 then
9071: LD_VAR 0 10
9075: PUSH
9076: LD_INT 0
9078: GREATER
9079: PUSH
9080: LD_VAR 0 6
9084: PUSH
9085: LD_INT 0
9087: GREATER
9088: AND
9089: IFFALSE 9105
// ComMoveToArea ( damageUnits , healArea ) ;
9091: LD_VAR 0 10
9095: PPUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9105: LD_VAR 0 11
9109: PUSH
9110: LD_INT 0
9112: GREATER
9113: PUSH
9114: LD_VAR 0 6
9118: PUSH
9119: LD_INT 0
9121: GREATER
9122: AND
9123: IFFALSE 9134
// ComExitBuilding ( sci_list ) ;
9125: LD_VAR 0 6
9129: PPUSH
9130: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9134: LD_VAR 0 11
9138: PUSH
9139: LD_INT 0
9141: GREATER
9142: PUSH
9143: LD_VAR 0 7
9147: PUSH
9148: LD_INT 0
9150: GREATER
9151: AND
9152: IFFALSE 9172
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9154: LD_VAR 0 7
9158: PPUSH
9159: LD_VAR 0 11
9163: PUSH
9164: LD_INT 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9172: LD_VAR 0 10
9176: PUSH
9177: LD_INT 0
9179: EQUAL
9180: PUSH
9181: LD_VAR 0 11
9185: PUSH
9186: LD_INT 0
9188: EQUAL
9189: AND
9190: PUSH
9191: LD_VAR 0 7
9195: PUSH
9196: LD_INT 0
9198: GREATER
9199: AND
9200: IFFALSE 9305
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9202: LD_ADDR_VAR 0 12
9206: PUSH
9207: LD_INT 22
9209: PUSH
9210: LD_VAR 0 1
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PUSH
9219: LD_INT 21
9221: PUSH
9222: LD_INT 3
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 30
9231: PUSH
9232: LD_INT 8
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: PPUSH
9244: CALL_OW 69
9248: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9249: LD_ADDR_VAR 0 13
9253: PUSH
9254: LD_INT 1
9256: PPUSH
9257: LD_VAR 0 12
9261: PPUSH
9262: CALL_OW 12
9266: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9267: LD_VAR 0 7
9271: PPUSH
9272: LD_INT 3
9274: PUSH
9275: LD_INT 60
9277: PUSH
9278: EMPTY
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PPUSH
9285: CALL_OW 72
9289: PPUSH
9290: LD_VAR 0 12
9294: PUSH
9295: LD_VAR 0 13
9299: ARRAY
9300: PPUSH
9301: CALL_OW 120
// end ; end ;
9305: LD_VAR 0 5
9309: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9310: LD_INT 0
9312: PPUSH
9313: PPUSH
9314: PPUSH
9315: PPUSH
// tmpTab = [ ] ;
9316: LD_ADDR_VAR 0 6
9320: PUSH
9321: EMPTY
9322: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9323: LD_INT 22
9325: PUSH
9326: LD_VAR 0 1
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: LD_INT 30
9337: PUSH
9338: LD_INT 32
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PPUSH
9349: CALL_OW 69
9353: PUSH
9354: LD_INT 0
9356: GREATER
9357: IFFALSE 9440
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9359: LD_ADDR_VAR 0 4
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_VAR 0 1
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 30
9378: PUSH
9379: LD_INT 32
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 69
9394: PUSH
9395: FOR_IN
9396: IFFALSE 9438
// begin for j in UnitsInside ( i ) do
9398: LD_ADDR_VAR 0 5
9402: PUSH
9403: LD_VAR 0 4
9407: PPUSH
9408: CALL_OW 313
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9434
// tmpTab = tmpTab ^ j ;
9416: LD_ADDR_VAR 0 6
9420: PUSH
9421: LD_VAR 0 6
9425: PUSH
9426: LD_VAR 0 5
9430: ADD
9431: ST_TO_ADDR
9432: GO 9413
9434: POP
9435: POP
// end ;
9436: GO 9395
9438: POP
9439: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9440: LD_VAR 0 6
9444: PPUSH
9445: LD_VAR 0 2
9449: PPUSH
9450: CALL_OW 250
9454: PPUSH
9455: LD_VAR 0 2
9459: PPUSH
9460: CALL_OW 251
9464: PPUSH
9465: CALL_OW 114
// end ;
9469: LD_VAR 0 3
9473: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
9478: PPUSH
9479: PPUSH
9480: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9481: LD_ADDR_VAR 0 6
9485: PUSH
9486: LD_INT 22
9488: PUSH
9489: LD_VAR 0 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 30
9503: PUSH
9504: LD_INT 31
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 30
9513: PUSH
9514: LD_INT 32
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: LD_INT 33
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 30
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 30
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 69
9567: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9568: LD_ADDR_VAR 0 7
9572: PUSH
9573: LD_INT 22
9575: PUSH
9576: LD_VAR 0 2
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 21
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 58
9597: PUSH
9598: EMPTY
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9611: LD_VAR 0 6
9615: PUSH
9616: LD_INT 0
9618: GREATER
9619: PUSH
9620: LD_VAR 0 7
9624: PUSH
9625: LD_INT 0
9627: GREATER
9628: AND
9629: IFFALSE 9699
// begin for i in turretsList do
9631: LD_ADDR_VAR 0 4
9635: PUSH
9636: LD_VAR 0 6
9640: PUSH
9641: FOR_IN
9642: IFFALSE 9697
// begin for j in enemyBuildings do
9644: LD_ADDR_VAR 0 5
9648: PUSH
9649: LD_VAR 0 7
9653: PUSH
9654: FOR_IN
9655: IFFALSE 9693
// begin if GetDistUnits ( i , j ) < 20 then
9657: LD_VAR 0 4
9661: PPUSH
9662: LD_VAR 0 5
9666: PPUSH
9667: CALL_OW 296
9671: PUSH
9672: LD_INT 20
9674: LESS
9675: IFFALSE 9691
// begin ComAttackUnit ( i , j ) ;
9677: LD_VAR 0 4
9681: PPUSH
9682: LD_VAR 0 5
9686: PPUSH
9687: CALL_OW 115
// end ; end ;
9691: GO 9654
9693: POP
9694: POP
// end ;
9695: GO 9641
9697: POP
9698: POP
// end ; end ;
9699: LD_VAR 0 3
9703: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
9704: LD_INT 0
9706: PPUSH
9707: PPUSH
// for i = 1 to vehCount do
9708: LD_ADDR_VAR 0 9
9712: PUSH
9713: DOUBLE
9714: LD_INT 1
9716: DEC
9717: ST_TO_ADDR
9718: LD_VAR 0 3
9722: PUSH
9723: FOR_TO
9724: IFFALSE 9771
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9726: LD_VAR 0 2
9730: PPUSH
9731: LD_VAR 0 7
9735: PPUSH
9736: LD_VAR 0 5
9740: PPUSH
9741: LD_VAR 0 6
9745: PPUSH
9746: LD_VAR 0 4
9750: PUSH
9751: LD_INT 1
9753: PPUSH
9754: LD_VAR 0 4
9758: PPUSH
9759: CALL_OW 12
9763: ARRAY
9764: PPUSH
9765: CALL_OW 185
9769: GO 9723
9771: POP
9772: POP
// end ;
9773: LD_VAR 0 8
9777: RET
// export function AttackVehicles ( enemySide , vehTab ) ; var i , j , vehiclesOK , target1 , target2 ; begin
9778: LD_INT 0
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
// repeat wait ( 0 0$1 ) ;
9786: LD_INT 35
9788: PPUSH
9789: CALL_OW 67
// for j in vehTab do
9793: LD_ADDR_VAR 0 5
9797: PUSH
9798: LD_VAR 0 2
9802: PUSH
9803: FOR_IN
9804: IFFALSE 9962
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
9806: LD_ADDR_VAR 0 7
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_VAR 0 1
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PPUSH
9823: CALL_OW 69
9827: PPUSH
9828: LD_VAR 0 5
9832: PPUSH
9833: CALL_OW 74
9837: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
9838: LD_ADDR_VAR 0 8
9842: PUSH
9843: LD_INT 22
9845: PUSH
9846: LD_VAR 0 1
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 30
9857: PUSH
9858: LD_INT 32
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 59
9867: PUSH
9868: EMPTY
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: PPUSH
9884: LD_VAR 0 5
9888: PPUSH
9889: CALL_OW 74
9893: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9894: LD_VAR 0 5
9898: PPUSH
9899: LD_VAR 0 7
9903: PPUSH
9904: CALL_OW 296
9908: PUSH
9909: LD_INT 8
9911: PLUS
9912: PUSH
9913: LD_VAR 0 5
9917: PPUSH
9918: LD_VAR 0 8
9922: PPUSH
9923: CALL_OW 296
9927: LESS
9928: IFFALSE 9946
// ComAttackUnit ( j , target1 ) else
9930: LD_VAR 0 5
9934: PPUSH
9935: LD_VAR 0 7
9939: PPUSH
9940: CALL_OW 115
9944: GO 9960
// ComAttackUnit ( j , target2 ) ;
9946: LD_VAR 0 5
9950: PPUSH
9951: LD_VAR 0 8
9955: PPUSH
9956: CALL_OW 115
// end ;
9960: GO 9803
9962: POP
9963: POP
// until vehTab = 0 ;
9964: LD_VAR 0 2
9968: PUSH
9969: LD_INT 0
9971: EQUAL
9972: IFFALSE 9786
// end ;
9974: LD_VAR 0 3
9978: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
9979: LD_INT 0
9981: PPUSH
9982: PPUSH
9983: PPUSH
9984: PPUSH
9985: PPUSH
9986: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
9987: LD_ADDR_VAR 0 6
9991: PUSH
9992: LD_INT 22
9994: PUSH
9995: LD_VAR 0 1
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 25
10006: PUSH
10007: LD_INT 9
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 69
10022: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10023: LD_ADDR_VAR 0 7
10027: PUSH
10028: LD_INT 81
10030: PUSH
10031: LD_VAR 0 1
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 3
10042: PUSH
10043: LD_INT 21
10045: PUSH
10046: LD_INT 3
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PPUSH
10061: CALL_OW 69
10065: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10066: LD_ADDR_VAR 0 4
10070: PUSH
10071: LD_INT 1
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: CALL_OW 12
10081: ST_TO_ADDR
// for i = 1 to list do
10082: LD_ADDR_VAR 0 5
10086: PUSH
10087: DOUBLE
10088: LD_INT 1
10090: DEC
10091: ST_TO_ADDR
10092: LD_VAR 0 6
10096: PUSH
10097: FOR_TO
10098: IFFALSE 10300
// for ta in filter do
10100: LD_ADDR_VAR 0 3
10104: PUSH
10105: LD_VAR 0 7
10109: PUSH
10110: FOR_IN
10111: IFFALSE 10296
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
10113: LD_VAR 0 6
10117: PUSH
10118: LD_VAR 0 5
10122: ARRAY
10123: PPUSH
10124: LD_VAR 0 3
10128: PPUSH
10129: CALL_OW 296
10133: PUSH
10134: LD_INT 15
10136: LESSEQUAL
10137: IFFALSE 10294
// begin case c of 1 :
10139: LD_VAR 0 4
10143: PUSH
10144: LD_INT 1
10146: DOUBLE
10147: EQUAL
10148: IFTRUE 10152
10150: GO 10190
10152: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
10153: LD_VAR 0 6
10157: PUSH
10158: LD_VAR 0 5
10162: ARRAY
10163: PPUSH
10164: LD_VAR 0 3
10168: PPUSH
10169: CALL_OW 250
10173: PPUSH
10174: LD_VAR 0 3
10178: PPUSH
10179: CALL_OW 251
10183: PPUSH
10184: CALL_OW 154
10188: GO 10294
10190: LD_INT 2
10192: DOUBLE
10193: EQUAL
10194: IFTRUE 10198
10196: GO 10262
10198: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
10199: LD_VAR 0 6
10203: PUSH
10204: LD_VAR 0 5
10208: ARRAY
10209: PPUSH
10210: LD_VAR 0 3
10214: PPUSH
10215: CALL_OW 250
10219: PUSH
10220: LD_INT 1
10222: NEG
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL_OW 12
10231: PLUS
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: CALL_OW 251
10242: PUSH
10243: LD_INT 1
10245: NEG
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 12
10254: PLUS
10255: PPUSH
10256: CALL_OW 153
10260: GO 10294
10262: LD_INT 3
10264: DOUBLE
10265: EQUAL
10266: IFTRUE 10270
10268: GO 10293
10270: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
10271: LD_VAR 0 6
10275: PUSH
10276: LD_VAR 0 5
10280: ARRAY
10281: PPUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: CALL_OW 115
10291: GO 10294
10293: POP
// end ; end ;
10294: GO 10110
10296: POP
10297: POP
10298: GO 10097
10300: POP
10301: POP
// end ; end_of_file
10302: LD_VAR 0 2
10306: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
10307: LD_VAR 0 1
10311: PUSH
10312: LD_INT 235
10314: EQUAL
10315: PUSH
10316: LD_VAR 0 2
10320: PPUSH
10321: CALL_OW 255
10325: PUSH
10326: LD_INT 4
10328: EQUAL
10329: AND
10330: IFFALSE 10378
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
10332: LD_INT 235
10334: PPUSH
10335: LD_INT 84
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
10345: LD_INT 235
10347: PPUSH
10348: LD_INT 68
10350: PPUSH
10351: LD_INT 100
10353: PPUSH
10354: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
10358: LD_INT 235
10360: PPUSH
10361: CALL_OW 219
// AddComMoveXY ( PowellCargo , 41 , 61 ) ;
10365: LD_INT 235
10367: PPUSH
10368: LD_INT 41
10370: PPUSH
10371: LD_INT 61
10373: PPUSH
10374: CALL_OW 171
// end ; end ;
10378: PPOPN 2
10380: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
10381: LD_INT 0
10383: PPUSH
10384: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
10385: LD_ADDR_VAR 0 3
10389: PUSH
10390: LD_INT 22
10392: PUSH
10393: LD_INT 4
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 21
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 56
10412: PUSH
10413: EMPTY
10414: LIST
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 60
10421: PUSH
10422: EMPTY
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: PPUSH
10435: CALL_OW 69
10439: PUSH
10440: LD_EXP 17
10444: PUSH
10445: EMPTY
10446: LIST
10447: DIFF
10448: ST_TO_ADDR
// if GetSide ( building ) = 4 then
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 255
10458: PUSH
10459: LD_INT 4
10461: EQUAL
10462: IFFALSE 10593
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
10464: LD_INT 22
10466: PUSH
10467: LD_INT 4
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 30
10476: PUSH
10477: LD_INT 8
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: IFFALSE 10593
// begin for i = 1 to 3 do
10498: LD_ADDR_VAR 0 2
10502: PUSH
10503: DOUBLE
10504: LD_INT 1
10506: DEC
10507: ST_TO_ADDR
10508: LD_INT 3
10510: PUSH
10511: FOR_TO
10512: IFFALSE 10576
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
10514: LD_VAR 0 3
10518: PUSH
10519: LD_VAR 0 2
10523: ARRAY
10524: PPUSH
10525: LD_INT 3
10527: PUSH
10528: LD_INT 25
10530: PUSH
10531: LD_INT 2
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PPUSH
10542: CALL_OW 72
10546: PPUSH
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
10556: LD_VAR 0 3
10560: PUSH
10561: LD_VAR 0 2
10565: ARRAY
10566: PPUSH
10567: LD_INT 4
10569: PPUSH
10570: CALL_OW 183
// end ;
10574: GO 10511
10576: POP
10577: POP
// ResAllTechs ( 4 , building , 1 ) ;
10578: LD_INT 4
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 1
10588: PPUSH
10589: CALL 8318 0 3
// end ; if GetSide ( building ) = 8 then
10593: LD_VAR 0 1
10597: PPUSH
10598: CALL_OW 255
10602: PUSH
10603: LD_INT 8
10605: EQUAL
10606: IFFALSE 10802
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_workshop ] , [ f_nation , 3 ] ] ) = 1 and GetNation ( building ) = 3 then
10608: LD_INT 22
10610: PUSH
10611: LD_INT 8
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 2
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 23
10630: PUSH
10631: LD_INT 3
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: PUSH
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 248
10661: PUSH
10662: LD_INT 3
10664: EQUAL
10665: AND
10666: IFFALSE 10802
// begin ComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 3 ) ;
10668: LD_EXP 35
10672: PPUSH
10673: LD_INT 21
10675: PPUSH
10676: LD_INT 74
10678: PPUSH
10679: LD_INT 12
10681: PPUSH
10682: LD_INT 3
10684: PPUSH
10685: CALL_OW 145
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
10689: LD_EXP 35
10693: PPUSH
10694: LD_INT 22
10696: PUSH
10697: LD_INT 4
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 30
10706: PUSH
10707: LD_INT 3
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 23
10716: PUSH
10717: LD_INT 3
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: CALL_OW 180
// ComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
10742: LD_INT 22
10744: PUSH
10745: LD_INT 4
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 30
10754: PUSH
10755: LD_INT 3
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 23
10764: PUSH
10765: LD_INT 3
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 69
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: LD_INT 24
10788: PPUSH
10789: LD_INT 3
10791: PPUSH
10792: LD_INT 3
10794: PPUSH
10795: LD_INT 48
10797: PPUSH
10798: CALL_OW 125
// end ; end ; end ;
10802: PPOPN 3
10804: END
// on BuildingComplete ( building ) do var powellPeople ;
10805: LD_INT 0
10807: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
10808: LD_VAR 0 1
10812: PPUSH
10813: CALL_OW 255
10817: PUSH
10818: LD_INT 4
10820: EQUAL
10821: PUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 266
10831: PUSH
10832: LD_INT 17
10834: EQUAL
10835: AND
10836: IFFALSE 11118
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
10838: LD_ADDR_VAR 0 2
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_INT 4
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 21
10855: PUSH
10856: LD_INT 1
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 56
10865: PUSH
10866: EMPTY
10867: LIST
10868: PUSH
10869: LD_INT 3
10871: PUSH
10872: LD_INT 60
10874: PUSH
10875: EMPTY
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: PPUSH
10888: CALL_OW 69
10892: PUSH
10893: LD_EXP 17
10897: PUSH
10898: EMPTY
10899: LIST
10900: DIFF
10901: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
10902: LD_INT 22
10904: PUSH
10905: LD_INT 4
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 21
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 30
10924: PUSH
10925: LD_INT 32
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: PPUSH
10937: CALL_OW 69
10941: PUSH
10942: LD_INT 1
10944: ARRAY
10945: PPUSH
10946: LD_INT 6
10948: PPUSH
10949: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
10953: LD_INT 22
10955: PUSH
10956: LD_INT 4
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 21
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 30
10975: PUSH
10976: LD_INT 32
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: PUSH
10993: LD_INT 2
10995: ARRAY
10996: PPUSH
10997: LD_INT 5
10999: PPUSH
11000: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
11004: LD_VAR 0 2
11008: PUSH
11009: LD_INT 1
11011: ARRAY
11012: PPUSH
11013: LD_INT 22
11015: PUSH
11016: LD_INT 4
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 21
11025: PUSH
11026: LD_INT 3
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 32
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: PPUSH
11048: CALL_OW 69
11052: PUSH
11053: LD_INT 1
11055: ARRAY
11056: PPUSH
11057: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
11061: LD_VAR 0 2
11065: PUSH
11066: LD_INT 2
11068: ARRAY
11069: PPUSH
11070: LD_INT 22
11072: PUSH
11073: LD_INT 4
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 21
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 30
11092: PUSH
11093: LD_INT 32
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 69
11109: PUSH
11110: LD_INT 2
11112: ARRAY
11113: PPUSH
11114: CALL_OW 120
// end ; if GetSide ( building ) = 8 then
11118: LD_VAR 0 1
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: LD_INT 8
11130: EQUAL
11131: IFFALSE 11157
// begin if GetBType ( building ) = b_workshop then
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 266
11142: PUSH
11143: LD_INT 2
11145: EQUAL
11146: IFFALSE 11157
// ComUpgrade ( building ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: CALL_OW 146
// end ; end ;
11157: PPOPN 2
11159: END
// on EnterBuilding ( building , human ) do begin end ;
11160: PPOPN 2
11162: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
11163: LD_VAR 0 1
11167: PPUSH
11168: CALL_OW 255
11172: PUSH
11173: LD_INT 6
11175: EQUAL
11176: IFFALSE 11194
// ruBehs = ruBehs ^ vehicle ;
11178: LD_ADDR_EXP 43
11182: PUSH
11183: LD_EXP 43
11187: PUSH
11188: LD_VAR 0 1
11192: ADD
11193: ST_TO_ADDR
// end ;
11194: PPOPN 1
11196: END
// on VehicleConstructed ( vehicle , building ) do begin if vehicle = powellVeh then
11197: LD_VAR 0 1
11201: PUSH
11202: LD_EXP 54
11206: EQUAL
11207: IFFALSE 11223
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 313
11218: PPUSH
11219: CALL_OW 121
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL_OW 255
11232: PUSH
11233: LD_INT 4
11235: EQUAL
11236: PUSH
11237: LD_EXP 52
11241: PUSH
11242: LD_INT 2
11244: EQUAL
11245: AND
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 264
11256: PUSH
11257: LD_INT 6
11259: EQUAL
11260: AND
11261: IFFALSE 11315
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
11263: LD_EXP 49
11267: PUSH
11268: LD_INT 5
11270: ARRAY
11271: PPUSH
11272: CALL_OW 122
// wait ( 0 0$1 ) ;
11276: LD_INT 35
11278: PPUSH
11279: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
11283: LD_EXP 49
11287: PUSH
11288: LD_INT 5
11290: ARRAY
11291: PPUSH
11292: LD_INT 85
11294: PPUSH
11295: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
11299: LD_EXP 49
11303: PUSH
11304: LD_INT 5
11306: ARRAY
11307: PPUSH
11308: LD_INT 3
11310: PPUSH
11311: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
11315: LD_VAR 0 1
11319: PPUSH
11320: CALL_OW 255
11324: PUSH
11325: LD_INT 4
11327: EQUAL
11328: PUSH
11329: LD_EXP 52
11333: PUSH
11334: LD_INT 2
11336: EQUAL
11337: AND
11338: PUSH
11339: LD_VAR 0 1
11343: PPUSH
11344: CALL_OW 264
11348: PUSH
11349: LD_INT 3
11351: EQUAL
11352: AND
11353: IFFALSE 11380
// begin powellVeh = vehicle ;
11355: LD_ADDR_EXP 54
11359: PUSH
11360: LD_VAR 0 1
11364: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
11365: LD_VAR 0 1
11369: PPUSH
11370: LD_INT 49
11372: PPUSH
11373: LD_INT 74
11375: PPUSH
11376: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
11380: LD_VAR 0 1
11384: PPUSH
11385: CALL_OW 255
11389: PUSH
11390: LD_INT 8
11392: EQUAL
11393: PUSH
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL_OW 248
11403: PUSH
11404: LD_INT 2
11406: EQUAL
11407: AND
11408: PUSH
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 247
11418: PUSH
11419: LD_INT 2
11421: EQUAL
11422: AND
11423: IFFALSE 11459
// begin legionVehicles = legionVehicles ^ vehicle ;
11425: LD_ADDR_EXP 39
11429: PUSH
11430: LD_EXP 39
11434: PUSH
11435: LD_VAR 0 1
11439: ADD
11440: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
11441: LD_VAR 0 1
11445: PPUSH
11446: LD_EXP 40
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: CALL_OW 135
// end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
11459: LD_VAR 0 1
11463: PPUSH
11464: CALL_OW 255
11468: PUSH
11469: LD_INT 3
11471: EQUAL
11472: PUSH
11473: LD_VAR 0 1
11477: PPUSH
11478: CALL_OW 248
11482: PUSH
11483: LD_INT 3
11485: EQUAL
11486: AND
11487: PUSH
11488: LD_VAR 0 1
11492: PPUSH
11493: CALL_OW 247
11497: PUSH
11498: LD_INT 2
11500: EQUAL
11501: AND
11502: IFFALSE 11520
// RussianVehicles = RussianVehicles ^ vehicle ;
11504: LD_ADDR_EXP 45
11508: PUSH
11509: LD_EXP 45
11513: PUSH
11514: LD_VAR 0 1
11518: ADD
11519: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
11520: LD_VAR 0 1
11524: PPUSH
11525: CALL_OW 255
11529: PUSH
11530: LD_INT 7
11532: EQUAL
11533: PUSH
11534: LD_VAR 0 1
11538: PPUSH
11539: CALL_OW 247
11543: PUSH
11544: LD_INT 2
11546: EQUAL
11547: AND
11548: IFFALSE 11607
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
11550: LD_ADDR_EXP 46
11554: PUSH
11555: LD_EXP 46
11559: PUSH
11560: LD_VAR 0 1
11564: ADD
11565: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
11566: LD_VAR 0 1
11570: PPUSH
11571: CALL_OW 263
11575: PUSH
11576: LD_INT 2
11578: EQUAL
11579: IFFALSE 11607
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
11581: LD_VAR 0 1
11585: PPUSH
11586: LD_EXP 47
11590: PUSH
11591: LD_INT 1
11593: PPUSH
11594: LD_INT 3
11596: PPUSH
11597: CALL_OW 12
11601: ARRAY
11602: PPUSH
11603: CALL_OW 135
// end ; end ;
11607: PPOPN 2
11609: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 255
11619: PUSH
11620: LD_INT 4
11622: EQUAL
11623: PUSH
11624: LD_EXP 52
11628: PUSH
11629: LD_INT 1
11631: EQUAL
11632: AND
11633: IFFALSE 11736
// begin ComEnterUnit ( human , AmFact ) ;
11635: LD_VAR 0 2
11639: PPUSH
11640: LD_INT 85
11642: PPUSH
11643: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
11647: LD_VAR 0 2
11651: PPUSH
11652: CALL_OW 258
11656: PUSH
11657: LD_INT 1
11659: EQUAL
11660: PUSH
11661: LD_EXP 76
11665: PUSH
11666: LD_INT 0
11668: EQUAL
11669: AND
11670: IFFALSE 11736
// begin blockEvent1 = 1 ;
11672: LD_ADDR_EXP 76
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// startAttacks = 1 ;
11680: LD_ADDR_EXP 53
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
11688: LD_VAR 0 2
11692: PPUSH
11693: LD_STRING D4a-Sol1-1
11695: PPUSH
11696: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
11700: LD_EXP 17
11704: PPUSH
11705: LD_STRING D4a-Pow-1
11707: PPUSH
11708: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
11712: LD_VAR 0 2
11716: PPUSH
11717: LD_STRING D4a-Sol1-2
11719: PPUSH
11720: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
11724: LD_EXP 17
11728: PPUSH
11729: LD_STRING D4a-Pow-2
11731: PPUSH
11732: CALL_OW 88
// end ; end ; end ;
11736: PPOPN 2
11738: END
// on UnitDestroyed ( unit ) do var i ;
11739: LD_INT 0
11741: PPUSH
// begin if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
11742: LD_VAR 0 1
11746: PPUSH
11747: CALL_OW 255
11751: PUSH
11752: LD_INT 4
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 247
11765: PUSH
11766: LD_INT 1
11768: EQUAL
11769: AND
11770: IFFALSE 11820
// begin for i in amUnitsAttack do
11772: LD_ADDR_VAR 0 2
11776: PUSH
11777: LD_EXP 49
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11818
// if i = unit then
11785: LD_VAR 0 2
11789: PUSH
11790: LD_VAR 0 1
11794: EQUAL
11795: IFFALSE 11816
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
11797: LD_ADDR_EXP 49
11801: PUSH
11802: LD_EXP 49
11806: PUSH
11807: LD_VAR 0 1
11811: PUSH
11812: EMPTY
11813: LIST
11814: DIFF
11815: ST_TO_ADDR
11816: GO 11782
11818: POP
11819: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
11820: LD_VAR 0 1
11824: PPUSH
11825: CALL_OW 255
11829: PUSH
11830: LD_INT 8
11832: EQUAL
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 247
11843: PUSH
11844: LD_INT 2
11846: EQUAL
11847: AND
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 248
11858: PUSH
11859: LD_INT 2
11861: EQUAL
11862: AND
11863: IFFALSE 11913
// begin for i in legionVehicles do
11865: LD_ADDR_VAR 0 2
11869: PUSH
11870: LD_EXP 39
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11911
// if i = unit then
11878: LD_VAR 0 2
11882: PUSH
11883: LD_VAR 0 1
11887: EQUAL
11888: IFFALSE 11909
// legionVehicles = legionVehicles diff [ unit ] ;
11890: LD_ADDR_EXP 39
11894: PUSH
11895: LD_EXP 39
11899: PUSH
11900: LD_VAR 0 1
11904: PUSH
11905: EMPTY
11906: LIST
11907: DIFF
11908: ST_TO_ADDR
11909: GO 11875
11911: POP
11912: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
11913: LD_VAR 0 1
11917: PPUSH
11918: CALL_OW 255
11922: PUSH
11923: LD_INT 3
11925: EQUAL
11926: PUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 247
11936: PUSH
11937: LD_INT 2
11939: EQUAL
11940: AND
11941: IFFALSE 11991
// begin for i in RussianVehicles do
11943: LD_ADDR_VAR 0 2
11947: PUSH
11948: LD_EXP 45
11952: PUSH
11953: FOR_IN
11954: IFFALSE 11989
// if i = unit then
11956: LD_VAR 0 2
11960: PUSH
11961: LD_VAR 0 1
11965: EQUAL
11966: IFFALSE 11987
// RussianVehicles = RussianVehicles diff [ unit ] ;
11968: LD_ADDR_EXP 45
11972: PUSH
11973: LD_EXP 45
11977: PUSH
11978: LD_VAR 0 1
11982: PUSH
11983: EMPTY
11984: LIST
11985: DIFF
11986: ST_TO_ADDR
11987: GO 11953
11989: POP
11990: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 255
12000: PUSH
12001: LD_INT 7
12003: EQUAL
12004: PUSH
12005: LD_VAR 0 1
12009: PPUSH
12010: CALL_OW 247
12014: PUSH
12015: LD_INT 2
12017: EQUAL
12018: AND
12019: IFFALSE 12069
// begin for i in AllianceVehicles do
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_EXP 46
12030: PUSH
12031: FOR_IN
12032: IFFALSE 12067
// if i = unit then
12034: LD_VAR 0 2
12038: PUSH
12039: LD_VAR 0 1
12043: EQUAL
12044: IFFALSE 12065
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
12046: LD_ADDR_EXP 46
12050: PUSH
12051: LD_EXP 46
12055: PUSH
12056: LD_VAR 0 1
12060: PUSH
12061: EMPTY
12062: LIST
12063: DIFF
12064: ST_TO_ADDR
12065: GO 12031
12067: POP
12068: POP
// end ; end ; end_of_file
12069: PPOPN 2
12071: END
// every 3 3$0 do
12072: GO 12074
12074: DISABLE
// begin enable ;
12075: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
12076: LD_ADDR_EXP 68
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_INT 2
12096: PPUSH
12097: CALL_OW 12
12101: ARRAY
12102: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
12103: LD_INT 22
12105: PUSH
12106: LD_INT 8
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 21
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: PUSH
12132: LD_INT 1
12134: GREATER
12135: IFFALSE 12166
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
12137: LD_ADDR_EXP 70
12141: PUSH
12142: LD_INT 1
12144: PUSH
12145: LD_INT 8
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 1
12154: PPUSH
12155: LD_INT 2
12157: PPUSH
12158: CALL_OW 12
12162: ARRAY
12163: ST_TO_ADDR
12164: GO 12174
// RussianTarget = 1 ;
12166: LD_ADDR_EXP 70
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
12174: LD_INT 22
12176: PUSH
12177: LD_INT 8
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 21
12186: PUSH
12187: LD_INT 1
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 69
12202: PUSH
12203: LD_INT 1
12205: GREATER
12206: IFFALSE 12241
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
12208: LD_ADDR_EXP 69
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: LD_INT 8
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 1
12229: PPUSH
12230: LD_INT 3
12232: PPUSH
12233: CALL_OW 12
12237: ARRAY
12238: ST_TO_ADDR
12239: GO 12268
// RussianTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
12241: LD_ADDR_EXP 70
12245: PUSH
12246: LD_INT 1
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 1
12258: PPUSH
12259: LD_INT 2
12261: PPUSH
12262: CALL_OW 12
12266: ARRAY
12267: ST_TO_ADDR
// end ;
12268: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
12269: LD_EXP 51
12273: PUSH
12274: LD_INT 1
12276: EQUAL
12277: IFFALSE 12854
12279: GO 12281
12281: DISABLE
12282: LD_INT 0
12284: PPUSH
12285: PPUSH
// begin for i = 1 to 4 do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: DOUBLE
12292: LD_INT 1
12294: DEC
12295: ST_TO_ADDR
12296: LD_INT 4
12298: PUSH
12299: FOR_TO
12300: IFFALSE 12340
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
12302: LD_EXP 49
12306: PUSH
12307: LD_VAR 0 1
12311: ARRAY
12312: PPUSH
12313: LD_INT 85
12315: PPUSH
12316: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
12320: LD_EXP 49
12324: PUSH
12325: LD_VAR 0 1
12329: ARRAY
12330: PPUSH
12331: LD_INT 3
12333: PPUSH
12334: CALL_OW 183
// end ;
12338: GO 12299
12340: POP
12341: POP
// wait ( 0 0$1 ) ;
12342: LD_INT 35
12344: PPUSH
12345: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12349: LD_ADDR_VAR 0 2
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_INT 4
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 1
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 56
12376: PUSH
12377: EMPTY
12378: LIST
12379: PUSH
12380: LD_INT 3
12382: PUSH
12383: LD_INT 60
12385: PUSH
12386: EMPTY
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 69
12403: PUSH
12404: LD_EXP 17
12408: PUSH
12409: EMPTY
12410: LIST
12411: DIFF
12412: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
12413: LD_VAR 0 2
12417: PUSH
12418: LD_INT 1
12420: ARRAY
12421: PPUSH
12422: LD_INT 235
12424: PPUSH
12425: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
12429: LD_VAR 0 2
12433: PUSH
12434: LD_INT 2
12436: ARRAY
12437: PPUSH
12438: LD_INT 2
12440: PPUSH
12441: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
12445: LD_VAR 0 2
12449: PUSH
12450: LD_INT 3
12452: ARRAY
12453: PPUSH
12454: LD_INT 2
12456: PPUSH
12457: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
12461: LD_INT 30
12463: PPUSH
12464: LD_INT 49
12466: PPUSH
12467: LD_INT 4
12469: PPUSH
12470: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
12474: LD_INT 91
12476: PPUSH
12477: LD_INT 10
12479: PPUSH
12480: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
12484: LD_INT 91
12486: PPUSH
12487: LD_INT 11
12489: PPUSH
12490: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
12494: LD_INT 22
12496: PUSH
12497: LD_INT 4
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 25
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: PPUSH
12523: LD_INT 30
12525: PPUSH
12526: LD_INT 30
12528: PPUSH
12529: LD_INT 49
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
12539: LD_INT 22
12541: PUSH
12542: LD_INT 4
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 25
12551: PUSH
12552: LD_INT 2
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PPUSH
12563: CALL_OW 69
12567: PPUSH
12568: LD_INT 32
12570: PPUSH
12571: LD_INT 55
12573: PPUSH
12574: LD_INT 56
12576: PPUSH
12577: LD_INT 4
12579: PPUSH
12580: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
12584: LD_INT 22
12586: PUSH
12587: LD_INT 4
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 25
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PPUSH
12613: LD_INT 32
12615: PPUSH
12616: LD_INT 63
12618: PPUSH
12619: LD_INT 71
12621: PPUSH
12622: LD_INT 4
12624: PPUSH
12625: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
12629: LD_INT 22
12631: PUSH
12632: LD_INT 4
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 25
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PPUSH
12658: LD_INT 28
12660: PPUSH
12661: LD_INT 40
12663: PPUSH
12664: LD_INT 72
12666: PPUSH
12667: LD_INT 4
12669: PPUSH
12670: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
12674: LD_INT 22
12676: PUSH
12677: LD_INT 4
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 69
12702: PPUSH
12703: LD_INT 27
12705: PPUSH
12706: LD_INT 45
12708: PPUSH
12709: LD_INT 73
12711: PPUSH
12712: LD_INT 4
12714: PPUSH
12715: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
12719: LD_INT 22
12721: PUSH
12722: LD_INT 4
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 25
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: PPUSH
12748: LD_INT 18
12750: PPUSH
12751: LD_INT 37
12753: PPUSH
12754: LD_INT 50
12756: PPUSH
12757: LD_INT 2
12759: PPUSH
12760: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
12764: LD_INT 22
12766: PUSH
12767: LD_INT 4
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 25
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 69
12792: PPUSH
12793: LD_INT 17
12795: PPUSH
12796: LD_INT 41
12798: PPUSH
12799: LD_INT 51
12801: PPUSH
12802: LD_INT 3
12804: PPUSH
12805: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
12809: LD_INT 22
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 25
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PPUSH
12833: CALL_OW 69
12837: PPUSH
12838: LD_INT 21
12840: PPUSH
12841: LD_INT 38
12843: PPUSH
12844: LD_INT 54
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 205
// end ;
12854: PPOPN 2
12856: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
12857: LD_INT 22
12859: PUSH
12860: LD_INT 4
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 30
12869: PUSH
12870: LD_INT 8
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PUSH
12886: LD_INT 1
12888: EQUAL
12889: IFFALSE 13039
12891: GO 12893
12893: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
12894: LD_INT 85
12896: PPUSH
12897: LD_INT 3
12899: PPUSH
12900: LD_INT 3
12902: PPUSH
12903: LD_INT 1
12905: PPUSH
12906: LD_INT 3
12908: PUSH
12909: LD_INT 5
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 1
12922: PPUSH
12923: LD_INT 3
12925: PPUSH
12926: CALL_OW 12
12930: ARRAY
12931: PPUSH
12932: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
12936: LD_INT 85
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_INT 3
12944: PPUSH
12945: LD_INT 1
12947: PPUSH
12948: LD_INT 3
12950: PUSH
12951: LD_INT 5
12953: PUSH
12954: LD_INT 7
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_INT 3
12967: PPUSH
12968: CALL_OW 12
12972: ARRAY
12973: PPUSH
12974: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
12978: LD_INT 85
12980: PPUSH
12981: LD_INT 3
12983: PPUSH
12984: LD_INT 3
12986: PPUSH
12987: LD_INT 1
12989: PPUSH
12990: LD_INT 3
12992: PUSH
12993: LD_INT 5
12995: PUSH
12996: LD_INT 7
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 1
13006: PPUSH
13007: LD_INT 3
13009: PPUSH
13010: CALL_OW 12
13014: ARRAY
13015: PPUSH
13016: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
13020: LD_INT 85
13022: PPUSH
13023: LD_INT 5
13025: PPUSH
13026: LD_INT 3
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: LD_INT 6
13034: PPUSH
13035: CALL_OW 185
// end ;
13039: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) do
13040: LD_INT 235
13042: PPUSH
13043: LD_INT 10
13045: PPUSH
13046: CALL_OW 308
13050: IFFALSE 13074
13052: GO 13054
13054: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
13055: LD_INT 235
13057: PPUSH
13058: CALL_OW 313
13062: PPUSH
13063: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
13067: LD_INT 84
13069: PPUSH
13070: CALL_OW 146
// end ;
13074: END
// every 0 0$1 trigger legionAI = 1 do
13075: LD_EXP 65
13079: PUSH
13080: LD_INT 1
13082: EQUAL
13083: IFFALSE 13131
13085: GO 13087
13087: DISABLE
// begin enable ;
13088: ENABLE
// RepairBuilding ( 8 , ArDep2 , LegionBaseArea ) ;
13089: LD_INT 8
13091: PPUSH
13092: LD_INT 99
13094: PPUSH
13095: LD_INT 11
13097: PPUSH
13098: CALL 8403 0 3
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
13102: LD_INT 8
13104: PPUSH
13105: LD_INT 20
13107: PPUSH
13108: LD_INT 11
13110: PPUSH
13111: LD_INT 252
13113: PUSH
13114: EMPTY
13115: LIST
13116: PPUSH
13117: CALL 8748 0 4
// AttackNearBuildings ( 8 , 1 ) ;
13121: LD_INT 8
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL 9474 0 2
// end ;
13131: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
13132: LD_EXP 65
13136: PUSH
13137: LD_INT 1
13139: EQUAL
13140: PUSH
13141: LD_EXP 75
13145: PUSH
13146: LD_INT 1
13148: GREATEREQUAL
13149: AND
13150: PUSH
13151: LD_EXP 39
13155: PUSH
13156: EMPTY
13157: EQUAL
13158: AND
13159: PUSH
13160: LD_INT 117
13162: PPUSH
13163: CALL_OW 302
13167: AND
13168: PUSH
13169: LD_INT 117
13171: PPUSH
13172: CALL_OW 255
13176: PUSH
13177: LD_INT 8
13179: EQUAL
13180: AND
13181: IFFALSE 13244
13183: GO 13185
13185: DISABLE
// begin enable ;
13186: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
13187: LD_INT 8
13189: PPUSH
13190: LD_INT 117
13192: PPUSH
13193: LD_INT 5
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 7
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_OWVAR 67
13211: ARRAY
13212: PPUSH
13213: LD_INT 27
13215: PUSH
13216: LD_INT 28
13218: PUSH
13219: LD_INT 25
13221: PUSH
13222: LD_INT 29
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PPUSH
13231: LD_INT 3
13233: PPUSH
13234: LD_INT 2
13236: PPUSH
13237: LD_INT 14
13239: PPUSH
13240: CALL 9704 0 7
// end ;
13244: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
13245: LD_EXP 65
13249: PUSH
13250: LD_INT 1
13252: EQUAL
13253: PUSH
13254: LD_EXP 75
13258: PUSH
13259: LD_INT 1
13261: GREATEREQUAL
13262: AND
13263: PUSH
13264: LD_EXP 39
13268: PUSH
13269: LD_INT 5
13271: PUSH
13272: LD_INT 6
13274: PUSH
13275: LD_INT 7
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: LIST
13282: PUSH
13283: LD_OWVAR 67
13287: ARRAY
13288: EQUAL
13289: AND
13290: IFFALSE 13310
13292: GO 13294
13294: DISABLE
// begin enable ;
13295: ENABLE
// AttackVehicles ( LegionTarget , LegionVehicles ) ;
13296: LD_EXP 68
13300: PPUSH
13301: LD_EXP 39
13305: PPUSH
13306: CALL 9778 0 2
// end ;
13310: END
// every 0 0$1 trigger RussianAI = 1 do
13311: LD_EXP 67
13315: PUSH
13316: LD_INT 1
13318: EQUAL
13319: IFFALSE 13371
13321: GO 13323
13323: DISABLE
// begin enable ;
13324: ENABLE
// RepairBuilding ( 3 , RuDep1 , RussianBaseArea ) ;
13325: LD_INT 3
13327: PPUSH
13328: LD_INT 26
13330: PPUSH
13331: LD_INT 21
13333: PPUSH
13334: CALL 8403 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
13338: LD_INT 3
13340: PPUSH
13341: LD_INT 22
13343: PPUSH
13344: LD_INT 21
13346: PPUSH
13347: LD_INT 2
13349: PUSH
13350: LD_INT 1
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL 8748 0 4
// AttackNearBuildings ( 3 , 1 ) ;
13361: LD_INT 3
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL 9474 0 2
// end ;
13371: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
13372: LD_EXP 67
13376: PUSH
13377: LD_INT 1
13379: EQUAL
13380: PUSH
13381: LD_EXP 75
13385: PUSH
13386: LD_INT 3
13388: GREATEREQUAL
13389: AND
13390: PUSH
13391: LD_EXP 45
13395: PUSH
13396: EMPTY
13397: EQUAL
13398: AND
13399: PUSH
13400: LD_INT 10
13402: PPUSH
13403: CALL_OW 302
13407: AND
13408: PUSH
13409: LD_INT 10
13411: PPUSH
13412: CALL_OW 255
13416: PUSH
13417: LD_INT 3
13419: EQUAL
13420: AND
13421: PUSH
13422: LD_INT 4
13424: PPUSH
13425: CALL_OW 302
13429: AND
13430: PUSH
13431: LD_INT 4
13433: PPUSH
13434: CALL_OW 255
13438: PUSH
13439: LD_INT 3
13441: EQUAL
13442: AND
13443: IFFALSE 13563
13445: GO 13447
13447: DISABLE
// begin enable ;
13448: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
13449: LD_INT 3
13451: PPUSH
13452: LD_INT 4
13454: PPUSH
13455: LD_INT 3
13457: PUSH
13458: LD_INT 4
13460: PUSH
13461: LD_INT 5
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_OWVAR 67
13473: ARRAY
13474: PPUSH
13475: LD_INT 45
13477: PUSH
13478: LD_INT 46
13480: PUSH
13481: LD_INT 47
13483: PUSH
13484: LD_INT 49
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: PPUSH
13493: LD_INT 3
13495: PPUSH
13496: LD_INT 3
13498: PPUSH
13499: LD_INT 24
13501: PPUSH
13502: CALL 9704 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
13506: LD_INT 3
13508: PPUSH
13509: LD_INT 10
13511: PPUSH
13512: LD_INT 3
13514: PUSH
13515: LD_INT 4
13517: PUSH
13518: LD_INT 5
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_OWVAR 67
13530: ARRAY
13531: PPUSH
13532: LD_INT 45
13534: PUSH
13535: LD_INT 46
13537: PUSH
13538: LD_INT 47
13540: PUSH
13541: LD_INT 49
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PPUSH
13550: LD_INT 3
13552: PPUSH
13553: LD_INT 3
13555: PPUSH
13556: LD_INT 24
13558: PPUSH
13559: CALL 9704 0 7
// end ;
13563: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 6 , 8 , 10 ] [ Difficulty ] do
13564: LD_EXP 67
13568: PUSH
13569: LD_INT 1
13571: EQUAL
13572: PUSH
13573: LD_EXP 75
13577: PUSH
13578: LD_INT 3
13580: GREATEREQUAL
13581: AND
13582: PUSH
13583: LD_EXP 45
13587: PUSH
13588: LD_INT 6
13590: PUSH
13591: LD_INT 8
13593: PUSH
13594: LD_INT 10
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: PUSH
13602: LD_OWVAR 67
13606: ARRAY
13607: EQUAL
13608: AND
13609: IFFALSE 13749
13611: GO 13613
13613: DISABLE
// begin enable ;
13614: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
13615: LD_INT 22
13617: PUSH
13618: LD_INT 3
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 21
13627: PUSH
13628: LD_INT 2
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: LD_INT 60
13640: PUSH
13641: EMPTY
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: PPUSH
13653: CALL_OW 69
13657: PPUSH
13658: LD_INT 24
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 1
13670: PPUSH
13671: LD_INT 2
13673: PPUSH
13674: CALL_OW 12
13678: ARRAY
13679: PPUSH
13680: CALL_OW 120
// wait ( 0 0$20 ) ;
13684: LD_INT 700
13686: PPUSH
13687: CALL_OW 67
// AttackVehicles ( RussianTarget , UnitFilter ( RussianVehicles , [ f_or , [ f_weapon , 45 ] , [ f_weapon , 46 ] , [ f_weapon , 47 ] ] ) ) ;
13691: LD_EXP 70
13695: PPUSH
13696: LD_EXP 45
13700: PPUSH
13701: LD_INT 2
13703: PUSH
13704: LD_INT 34
13706: PUSH
13707: LD_INT 45
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 34
13716: PUSH
13717: LD_INT 46
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 34
13726: PUSH
13727: LD_INT 47
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: PPUSH
13740: CALL_OW 72
13744: PPUSH
13745: CALL 9778 0 2
// end ;
13749: END
// every 0 0$1 trigger AllianceAI = 1 do
13750: LD_EXP 66
13754: PUSH
13755: LD_INT 1
13757: EQUAL
13758: IFFALSE 13814
13760: GO 13762
13762: DISABLE
// begin enable ;
13763: ENABLE
// RepairBuilding ( 8 , AllDep , AllianceBaseArea ) ;
13764: LD_INT 8
13766: PPUSH
13767: LD_INT 45
13769: PPUSH
13770: LD_INT 23
13772: PPUSH
13773: CALL 8403 0 3
// HealUnitInBase ( 8 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
13777: LD_INT 8
13779: PPUSH
13780: LD_INT 24
13782: PPUSH
13783: LD_INT 23
13785: PPUSH
13786: LD_INT 46
13788: PUSH
13789: LD_INT 39
13791: PUSH
13792: LD_INT 133
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL 8748 0 4
// AttackNearBuildings ( 8 , 1 ) ;
13804: LD_INT 8
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL 9474 0 2
// end ;
13814: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
13815: LD_EXP 66
13819: PUSH
13820: LD_INT 1
13822: EQUAL
13823: PUSH
13824: LD_EXP 75
13828: PUSH
13829: LD_INT 4
13831: GREATEREQUAL
13832: AND
13833: PUSH
13834: LD_EXP 46
13838: PUSH
13839: EMPTY
13840: EQUAL
13841: AND
13842: PUSH
13843: LD_INT 156
13845: PPUSH
13846: CALL_OW 302
13850: AND
13851: PUSH
13852: LD_INT 156
13854: PPUSH
13855: CALL_OW 255
13859: PUSH
13860: LD_INT 7
13862: EQUAL
13863: AND
13864: PUSH
13865: LD_INT 162
13867: PPUSH
13868: CALL_OW 302
13872: AND
13873: PUSH
13874: LD_INT 162
13876: PPUSH
13877: CALL_OW 255
13881: PUSH
13882: LD_INT 7
13884: EQUAL
13885: AND
13886: IFFALSE 14002
13888: GO 13890
13890: DISABLE
// begin enable ;
13891: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
13892: LD_INT 3
13894: PPUSH
13895: LD_INT 156
13897: PPUSH
13898: LD_INT 3
13900: PUSH
13901: LD_INT 3
13903: PUSH
13904: LD_INT 4
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: LD_OWVAR 67
13916: ARRAY
13917: PPUSH
13918: LD_INT 9
13920: PUSH
13921: LD_INT 10
13923: PUSH
13924: LD_INT 7
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: LD_INT 3
13934: PPUSH
13935: LD_INT 2
13937: PPUSH
13938: LD_INT 5
13940: PPUSH
13941: CALL 9704 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
13945: LD_INT 3
13947: PPUSH
13948: LD_INT 162
13950: PPUSH
13951: LD_INT 2
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_OWVAR 67
13969: ARRAY
13970: PPUSH
13971: LD_INT 45
13973: PUSH
13974: LD_INT 46
13976: PUSH
13977: LD_INT 47
13979: PUSH
13980: LD_INT 49
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: PPUSH
13989: LD_INT 3
13991: PPUSH
13992: LD_INT 3
13994: PPUSH
13995: LD_INT 24
13997: PPUSH
13998: CALL 9704 0 7
// end ;
14002: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
14003: LD_EXP 66
14007: PUSH
14008: LD_INT 1
14010: EQUAL
14011: PUSH
14012: LD_EXP 75
14016: PUSH
14017: LD_INT 4
14019: GREATEREQUAL
14020: AND
14021: PUSH
14022: LD_EXP 46
14026: PUSH
14027: LD_INT 5
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 7
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: PUSH
14041: LD_OWVAR 67
14045: ARRAY
14046: EQUAL
14047: AND
14048: IFFALSE 14109
14050: GO 14052
14052: DISABLE
14053: LD_INT 0
14055: PPUSH
// begin for i in AllianceVehicles do
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_EXP 46
14065: PUSH
14066: FOR_IN
14067: IFFALSE 14092
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 117
14076: PPUSH
14077: LD_INT 112
14079: PPUSH
14080: LD_INT 10
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 483
14090: GO 14066
14092: POP
14093: POP
// AttackVehicles ( AllianceTarget , AllianceVehicles ) ;
14094: LD_EXP 69
14098: PPUSH
14099: LD_EXP 46
14103: PPUSH
14104: CALL 9778 0 2
// enable ;
14108: ENABLE
// end ;
14109: PPOPN 1
14111: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
14112: LD_EXP 65
14116: PUSH
14117: LD_INT 1
14119: EQUAL
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_INT 8
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 21
14133: PUSH
14134: LD_INT 2
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 3
14143: PUSH
14144: LD_INT 61
14146: PUSH
14147: EMPTY
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: PPUSH
14159: CALL_OW 69
14163: PUSH
14164: LD_INT 0
14166: GREATER
14167: AND
14168: IFFALSE 14250
14170: GO 14172
14172: DISABLE
14173: LD_INT 0
14175: PPUSH
// begin enable ;
14176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
14177: LD_ADDR_VAR 0 1
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_INT 8
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 21
14194: PUSH
14195: LD_INT 2
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 3
14204: PUSH
14205: LD_INT 61
14207: PUSH
14208: EMPTY
14209: LIST
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: PPUSH
14220: CALL_OW 69
14224: PUSH
14225: FOR_IN
14226: IFFALSE 14248
// ComLinkTo ( i , arControler [ 1 ] ) ;
14228: LD_VAR 0 1
14232: PPUSH
14233: LD_EXP 40
14237: PUSH
14238: LD_INT 1
14240: ARRAY
14241: PPUSH
14242: CALL_OW 135
14246: GO 14225
14248: POP
14249: POP
// end ;
14250: PPOPN 1
14252: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
14253: LD_EXP 66
14257: PUSH
14258: LD_INT 1
14260: EQUAL
14261: PUSH
14262: LD_INT 22
14264: PUSH
14265: LD_INT 7
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: LD_INT 61
14287: PUSH
14288: EMPTY
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: LIST
14299: PPUSH
14300: CALL_OW 69
14304: PUSH
14305: LD_INT 0
14307: GREATER
14308: AND
14309: IFFALSE 14399
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
// begin enable ;
14317: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
14318: LD_ADDR_VAR 0 1
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 7
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 2
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 3
14345: PUSH
14346: LD_INT 61
14348: PUSH
14349: EMPTY
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: PUSH
14366: FOR_IN
14367: IFFALSE 14397
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
14369: LD_VAR 0 1
14373: PPUSH
14374: LD_EXP 47
14378: PUSH
14379: LD_INT 1
14381: PPUSH
14382: LD_INT 3
14384: PPUSH
14385: CALL_OW 12
14389: ARRAY
14390: PPUSH
14391: CALL_OW 135
14395: GO 14366
14397: POP
14398: POP
// end ; end_of_file
14399: PPOPN 1
14401: END
// every 0 0$1 trigger timerStatus = 1 do
14402: LD_EXP 73
14406: PUSH
14407: LD_INT 1
14409: EQUAL
14410: IFFALSE 14447
14412: GO 14414
14414: DISABLE
// begin enable ;
14415: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
14416: LD_ADDR_OWVAR 47
14420: PUSH
14421: LD_STRING #Am15-1
14423: PUSH
14424: LD_EXP 74
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
14433: LD_ADDR_EXP 74
14437: PUSH
14438: LD_EXP 74
14442: PUSH
14443: LD_INT 35
14445: PLUS
14446: ST_TO_ADDR
// end ; end_of_file
14447: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 do
14448: LD_EXP 53
14452: PUSH
14453: LD_INT 1
14455: EQUAL
14456: PUSH
14457: LD_EXP 75
14461: PUSH
14462: LD_INT 0
14464: EQUAL
14465: AND
14466: IFFALSE 14526
14468: GO 14470
14470: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
14471: LD_INT 2
14473: PPUSH
14474: LD_INT 6
14476: PPUSH
14477: LD_INT 2
14479: PPUSH
14480: LD_INT 4
14482: PPUSH
14483: CALL_OW 12
14487: PPUSH
14488: LD_INT 10
14490: PPUSH
14491: LD_INT 3
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: LD_INT 3
14499: PPUSH
14500: LD_INT 42
14502: PUSH
14503: LD_INT 43
14505: PUSH
14506: LD_INT 44
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: PPUSH
14514: EMPTY
14515: PPUSH
14516: EMPTY
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL 6633 0 11
// enable ;
14525: ENABLE
// end ;
14526: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 do
14527: LD_EXP 53
14531: PUSH
14532: LD_INT 1
14534: EQUAL
14535: PUSH
14536: LD_EXP 75
14540: PUSH
14541: LD_INT 1
14543: EQUAL
14544: AND
14545: IFFALSE 14605
14547: GO 14549
14549: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
14550: LD_INT 2
14552: PPUSH
14553: LD_INT 6
14555: PPUSH
14556: LD_INT 4
14558: PPUSH
14559: LD_INT 6
14561: PPUSH
14562: CALL_OW 12
14566: PPUSH
14567: LD_INT 10
14569: PPUSH
14570: LD_INT 3
14572: PPUSH
14573: LD_INT 3
14575: PPUSH
14576: LD_INT 3
14578: PPUSH
14579: LD_INT 44
14581: PUSH
14582: LD_INT 45
14584: PUSH
14585: LD_INT 46
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PPUSH
14593: EMPTY
14594: PPUSH
14595: EMPTY
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: CALL 6633 0 11
// enable ;
14604: ENABLE
// end ;
14605: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 do
14606: LD_EXP 53
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: PUSH
14615: LD_EXP 75
14619: PUSH
14620: LD_INT 3
14622: EQUAL
14623: AND
14624: IFFALSE 14688
14626: GO 14628
14628: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
14629: LD_INT 2
14631: PPUSH
14632: LD_INT 6
14634: PPUSH
14635: LD_INT 4
14637: PPUSH
14638: LD_INT 8
14640: PPUSH
14641: CALL_OW 12
14645: PPUSH
14646: LD_INT 10
14648: PPUSH
14649: LD_INT 3
14651: PPUSH
14652: LD_INT 3
14654: PPUSH
14655: LD_INT 3
14657: PPUSH
14658: LD_INT 44
14660: PUSH
14661: LD_INT 45
14663: PUSH
14664: LD_INT 46
14666: PUSH
14667: LD_INT 47
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PPUSH
14676: EMPTY
14677: PPUSH
14678: EMPTY
14679: PPUSH
14680: LD_INT 1
14682: PPUSH
14683: CALL 6633 0 11
// enable ;
14687: ENABLE
// end ;
14688: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 do
14689: LD_EXP 53
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: PUSH
14698: LD_EXP 75
14702: PUSH
14703: LD_INT 4
14705: GREATEREQUAL
14706: AND
14707: IFFALSE 14767
14709: GO 14711
14711: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
14712: LD_INT 2
14714: PPUSH
14715: LD_INT 6
14717: PPUSH
14718: LD_INT 4
14720: PPUSH
14721: LD_INT 8
14723: PPUSH
14724: CALL_OW 12
14728: PPUSH
14729: LD_INT 10
14731: PPUSH
14732: LD_INT 3
14734: PPUSH
14735: LD_INT 3
14737: PPUSH
14738: LD_INT 3
14740: PPUSH
14741: LD_INT 46
14743: PUSH
14744: LD_INT 47
14746: PUSH
14747: LD_INT 49
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PPUSH
14755: EMPTY
14756: PPUSH
14757: EMPTY
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL 6633 0 11
// enable ;
14766: ENABLE
// end ; end_of_file
14767: END
// every 1 do var i , dec1 , options , people ;
14768: GO 14770
14770: DISABLE
14771: LD_INT 0
14773: PPUSH
14774: PPUSH
14775: PPUSH
14776: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
14777: LD_INT 24
14779: PPUSH
14780: LD_INT 92
14782: PPUSH
14783: LD_INT 172
14785: PPUSH
14786: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
14790: LD_INT 25
14792: PPUSH
14793: LD_INT 103
14795: PPUSH
14796: LD_INT 74
14798: PPUSH
14799: CALL_OW 243
// InGameOn ;
14803: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
14807: LD_EXP 24
14811: PUSH
14812: LD_EXP 25
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PPUSH
14821: LD_INT 60
14823: PPUSH
14824: LD_INT 75
14826: PPUSH
14827: CALL_OW 111
// if KappaStatus = 0 then
14831: LD_EXP 62
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: IFFALSE 15128
// begin CenterNowOnUnits ( NewJMMVeh ) ;
14841: LD_EXP 24
14845: PPUSH
14846: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
14850: LD_EXP 1
14854: PPUSH
14855: LD_STRING D1T-JMM-1
14857: PPUSH
14858: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14862: LD_EXP 24
14866: PPUSH
14867: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
14871: LD_EXP 17
14875: PPUSH
14876: LD_STRING D1T-Pow-1
14878: PPUSH
14879: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14883: LD_EXP 24
14887: PPUSH
14888: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
14892: LD_EXP 1
14896: PPUSH
14897: LD_STRING D1T-JMM-2
14899: PPUSH
14900: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14904: LD_EXP 24
14908: PPUSH
14909: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
14913: LD_EXP 17
14917: PPUSH
14918: LD_STRING D1T-Pow-2
14920: PPUSH
14921: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14925: LD_EXP 24
14929: PPUSH
14930: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
14934: LD_EXP 1
14938: PPUSH
14939: LD_STRING D1T-JMM-3
14941: PPUSH
14942: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14946: LD_EXP 24
14950: PPUSH
14951: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
14955: LD_EXP 17
14959: PPUSH
14960: LD_STRING D1T-Pow-3
14962: PPUSH
14963: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
14967: LD_EXP 24
14971: PPUSH
14972: CALL_OW 87
// if not JMMGirlVeh = [ ] then
14976: LD_EXP 60
14980: PUSH
14981: EMPTY
14982: EQUAL
14983: NOT
14984: IFFALSE 15084
// begin if JMMGirl = 1 then
14986: LD_EXP 61
14990: PUSH
14991: LD_INT 1
14993: EQUAL
14994: IFFALSE 15008
// Say ( Joan , D1T-Joan-3 ) ;
14996: LD_EXP 2
15000: PPUSH
15001: LD_STRING D1T-Joan-3
15003: PPUSH
15004: CALL_OW 88
// if JMMGirl = 2 then
15008: LD_EXP 61
15012: PUSH
15013: LD_INT 2
15015: EQUAL
15016: IFFALSE 15030
// Say ( Lisa , D1T-Lisa-3 ) ;
15018: LD_EXP 4
15022: PPUSH
15023: LD_STRING D1T-Lisa-3
15025: PPUSH
15026: CALL_OW 88
// if JMMGirl = 3 then
15030: LD_EXP 61
15034: PUSH
15035: LD_INT 3
15037: EQUAL
15038: IFFALSE 15052
// Say ( Connie , D1T-Con-3 ) ;
15040: LD_EXP 16
15044: PPUSH
15045: LD_STRING D1T-Con-3
15047: PPUSH
15048: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
15052: LD_EXP 24
15056: PPUSH
15057: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
15061: LD_EXP 17
15065: PPUSH
15066: LD_STRING D1T-Pow-4
15068: PPUSH
15069: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
15073: LD_EXP 24
15077: PPUSH
15078: CALL_OW 87
// end else
15082: GO 15126
// begin Say ( JMM , D1T-JMM-4 ) ;
15084: LD_EXP 1
15088: PPUSH
15089: LD_STRING D1T-JMM-4
15091: PPUSH
15092: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
15096: LD_EXP 24
15100: PPUSH
15101: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
15105: LD_EXP 17
15109: PPUSH
15110: LD_STRING D1T-Pow-5
15112: PPUSH
15113: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
15117: LD_EXP 24
15121: PPUSH
15122: CALL_OW 87
// end ; end else
15126: GO 15212
// begin CenterNowOnUnits ( NewJMMVeh ) ;
15128: LD_EXP 24
15132: PPUSH
15133: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
15137: LD_EXP 1
15141: PPUSH
15142: LD_STRING D1T-JMM-1
15144: PPUSH
15145: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
15149: LD_EXP 24
15153: PPUSH
15154: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
15158: LD_EXP 17
15162: PPUSH
15163: LD_STRING D1T-Pow-1
15165: PPUSH
15166: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
15170: LD_EXP 24
15174: PPUSH
15175: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
15179: LD_EXP 1
15183: PPUSH
15184: LD_STRING D1T-JMM-2
15186: PPUSH
15187: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
15191: LD_EXP 24
15195: PPUSH
15196: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
15200: LD_EXP 17
15204: PPUSH
15205: LD_STRING D1T-Pow-2
15207: PPUSH
15208: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
15212: LD_INT 35
15214: PPUSH
15215: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
15219: LD_EXP 24
15223: PUSH
15224: LD_EXP 25
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PPUSH
15233: LD_INT 60
15235: PPUSH
15236: LD_INT 75
15238: PPUSH
15239: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
15243: LD_EXP 24
15247: PPUSH
15248: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 ;
15252: LD_EXP 24
15256: PPUSH
15257: LD_EXP 17
15261: PPUSH
15262: CALL_OW 296
15266: PUSH
15267: LD_INT 20
15269: LESS
15270: IFFALSE 15212
// ComExitVehicle ( JMM ) ;
15272: LD_EXP 1
15276: PPUSH
15277: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
15281: LD_INT 35
15283: PPUSH
15284: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
15288: LD_EXP 1
15292: PPUSH
15293: LD_EXP 17
15297: PPUSH
15298: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
15302: LD_EXP 1
15306: PPUSH
15307: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
15311: LD_EXP 1
15315: PPUSH
15316: LD_EXP 17
15320: PPUSH
15321: CALL_OW 296
15325: PUSH
15326: LD_INT 6
15328: LESS
15329: IFFALSE 15281
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
15331: LD_EXP 1
15335: PUSH
15336: LD_EXP 17
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PPUSH
15345: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
15349: LD_EXP 1
15353: PPUSH
15354: LD_EXP 17
15358: PPUSH
15359: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
15363: LD_EXP 17
15367: PPUSH
15368: LD_EXP 1
15372: PPUSH
15373: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
15377: LD_EXP 1
15381: PPUSH
15382: LD_STRING D1-JMM-1
15384: PPUSH
15385: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
15389: LD_EXP 17
15393: PPUSH
15394: LD_STRING D1-Pow-1
15396: PPUSH
15397: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
15401: LD_INT 1
15403: PPUSH
15404: LD_INT 3
15406: PPUSH
15407: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
15411: LD_INT 1
15413: PPUSH
15414: LD_INT 4
15416: PPUSH
15417: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
15421: LD_INT 1
15423: PPUSH
15424: LD_INT 5
15426: PPUSH
15427: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
15431: LD_INT 171
15433: PPUSH
15434: LD_INT 81
15436: PPUSH
15437: CALL_OW 84
// wait ( 0 0$4 ) ;
15441: LD_INT 140
15443: PPUSH
15444: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
15448: LD_INT 162
15450: PPUSH
15451: LD_INT 36
15453: PPUSH
15454: CALL_OW 84
// wait ( 0 0$4 ) ;
15458: LD_INT 140
15460: PPUSH
15461: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
15465: LD_INT 75
15467: PPUSH
15468: LD_INT 16
15470: PPUSH
15471: CALL_OW 84
// wait ( 0 0$4 ) ;
15475: LD_INT 140
15477: PPUSH
15478: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
15482: LD_EXP 17
15486: PUSH
15487: LD_EXP 1
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
15500: LD_EXP 1
15504: PPUSH
15505: LD_STRING D1-JMM-2
15507: PPUSH
15508: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
15512: LD_EXP 17
15516: PPUSH
15517: LD_STRING D1-Pow-2
15519: PPUSH
15520: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
15524: LD_EXP 1
15528: PPUSH
15529: LD_STRING D1-JMM-3
15531: PPUSH
15532: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
15536: LD_EXP 17
15540: PPUSH
15541: LD_STRING D1-Pow-3
15543: PPUSH
15544: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
15548: LD_EXP 1
15552: PPUSH
15553: LD_STRING D1-JMM-4
15555: PPUSH
15556: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
15560: LD_EXP 17
15564: PPUSH
15565: LD_STRING D1-Pow-4
15567: PPUSH
15568: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
15572: LD_EXP 1
15576: PPUSH
15577: LD_STRING D1-JMM-5
15579: PPUSH
15580: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
15584: LD_EXP 17
15588: PPUSH
15589: LD_STRING D1-Pow-5
15591: PPUSH
15592: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
15596: LD_ADDR_VAR 0 3
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: LD_INT 4
15612: PUSH
15613: LD_INT 5
15615: PUSH
15616: LD_INT 6
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
15627: LD_ADDR_VAR 0 2
15631: PUSH
15632: LD_STRING Q1
15634: PPUSH
15635: LD_VAR 0 3
15639: PPUSH
15640: CALL_OW 98
15644: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
15645: LD_ADDR_VAR 0 2
15649: PUSH
15650: LD_STRING Q1
15652: PPUSH
15653: LD_VAR 0 3
15657: PPUSH
15658: CALL_OW 98
15662: ST_TO_ADDR
// options = options diff dec1 ;
15663: LD_ADDR_VAR 0 3
15667: PUSH
15668: LD_VAR 0 3
15672: PUSH
15673: LD_VAR 0 2
15677: DIFF
15678: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
15679: LD_VAR 0 2
15683: PPUSH
15684: LD_VAR 0 3
15688: PPUSH
15689: CALL 17199 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
15693: LD_VAR 0 2
15697: PUSH
15698: LD_INT 5
15700: PUSH
15701: LD_INT 6
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: IN
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 2
15716: EQUAL
15717: OR
15718: IFFALSE 15645
// if not ( dec1 in [ 5 , 6 ] ) then
15720: LD_VAR 0 2
15724: PUSH
15725: LD_INT 5
15727: PUSH
15728: LD_INT 6
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: IN
15735: NOT
15736: IFFALSE 15779
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
15738: LD_ADDR_VAR 0 2
15742: PUSH
15743: LD_STRING Q1a
15745: PPUSH
15746: LD_INT 1
15748: PUSH
15749: LD_INT 2
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 98
15760: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
15761: LD_VAR 0 2
15765: PUSH
15766: LD_INT 4
15768: PLUS
15769: PPUSH
15770: LD_VAR 0 3
15774: PPUSH
15775: CALL 17199 0 2
// end ; if not JMMGirlVeh = [ ] then
15779: LD_EXP 60
15783: PUSH
15784: EMPTY
15785: EQUAL
15786: NOT
15787: IFFALSE 15949
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
15789: LD_EXP 25
15793: PPUSH
15794: CALL_OW 313
15798: PPUSH
15799: CALL_OW 121
// wait ( 0 0$1 ) ;
15803: LD_INT 35
15805: PPUSH
15806: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15810: LD_INT 35
15812: PPUSH
15813: CALL_OW 67
// if JMMGirl = 1 then
15817: LD_EXP 61
15821: PUSH
15822: LD_INT 1
15824: EQUAL
15825: IFFALSE 15841
// ComMoveUnit ( JMM , Joan ) ;
15827: LD_EXP 1
15831: PPUSH
15832: LD_EXP 2
15836: PPUSH
15837: CALL_OW 112
// if JMMGirl = 2 then
15841: LD_EXP 61
15845: PUSH
15846: LD_INT 2
15848: EQUAL
15849: IFFALSE 15865
// ComMoveUnit ( JMM , Lisa ) ;
15851: LD_EXP 1
15855: PPUSH
15856: LD_EXP 4
15860: PPUSH
15861: CALL_OW 112
// if JMMGirl = 3 then
15865: LD_EXP 61
15869: PUSH
15870: LD_INT 3
15872: EQUAL
15873: IFFALSE 15889
// ComMoveUnit ( JMM , Connie ) ;
15875: LD_EXP 1
15879: PPUSH
15880: LD_EXP 16
15884: PPUSH
15885: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
15889: LD_EXP 1
15893: PPUSH
15894: LD_EXP 2
15898: PPUSH
15899: CALL_OW 296
15903: PUSH
15904: LD_INT 6
15906: LESS
15907: PUSH
15908: LD_EXP 1
15912: PPUSH
15913: LD_EXP 4
15917: PPUSH
15918: CALL_OW 296
15922: PUSH
15923: LD_INT 6
15925: LESS
15926: OR
15927: PUSH
15928: LD_EXP 1
15932: PPUSH
15933: LD_EXP 16
15937: PPUSH
15938: CALL_OW 296
15942: PUSH
15943: LD_INT 6
15945: LESS
15946: OR
15947: IFFALSE 15810
// end ; CenterNowOnUnits ( JMM ) ;
15949: LD_EXP 1
15953: PPUSH
15954: CALL_OW 87
// case JMMGirl of 1 :
15958: LD_EXP 61
15962: PUSH
15963: LD_INT 1
15965: DOUBLE
15966: EQUAL
15967: IFTRUE 15971
15969: GO 16014
15971: POP
// begin ComTurnUnit ( JMM , Joan ) ;
15972: LD_EXP 1
15976: PPUSH
15977: LD_EXP 2
15981: PPUSH
15982: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
15986: LD_EXP 2
15990: PPUSH
15991: LD_EXP 1
15995: PPUSH
15996: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
16000: LD_EXP 2
16004: PPUSH
16005: LD_STRING D3W-Joan-1
16007: PPUSH
16008: CALL_OW 88
// end ; 2 :
16012: GO 16117
16014: LD_INT 2
16016: DOUBLE
16017: EQUAL
16018: IFTRUE 16022
16020: GO 16065
16022: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
16023: LD_EXP 1
16027: PPUSH
16028: LD_EXP 4
16032: PPUSH
16033: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
16037: LD_EXP 4
16041: PPUSH
16042: LD_EXP 1
16046: PPUSH
16047: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
16051: LD_EXP 4
16055: PPUSH
16056: LD_STRING D3W-Lisa-1
16058: PPUSH
16059: CALL_OW 88
// end ; 3 :
16063: GO 16117
16065: LD_INT 3
16067: DOUBLE
16068: EQUAL
16069: IFTRUE 16073
16071: GO 16116
16073: POP
// begin ComTurnUnit ( JMM , Connie ) ;
16074: LD_EXP 1
16078: PPUSH
16079: LD_EXP 16
16083: PPUSH
16084: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
16088: LD_EXP 16
16092: PPUSH
16093: LD_EXP 1
16097: PPUSH
16098: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
16102: LD_EXP 16
16106: PPUSH
16107: LD_STRING D3W-Con-1
16109: PPUSH
16110: CALL_OW 88
// end ; end ;
16114: GO 16117
16116: POP
// Say ( JMM , D3W-JMM-1 ) ;
16117: LD_EXP 1
16121: PPUSH
16122: LD_STRING D3W-JMM-1
16124: PPUSH
16125: CALL_OW 88
// people = 0 ;
16129: LD_ADDR_VAR 0 4
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// if Lisa and people < 5 then
16137: LD_EXP 4
16141: PUSH
16142: LD_VAR 0 4
16146: PUSH
16147: LD_INT 5
16149: LESS
16150: AND
16151: IFFALSE 16183
// begin people = people + 1 ;
16153: LD_ADDR_VAR 0 4
16157: PUSH
16158: LD_VAR 0 4
16162: PUSH
16163: LD_INT 1
16165: PLUS
16166: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
16167: LD_ADDR_EXP 50
16171: PUSH
16172: LD_EXP 50
16176: PUSH
16177: LD_EXP 4
16181: ADD
16182: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
16183: LD_EXP 5
16187: PUSH
16188: LD_VAR 0 4
16192: PUSH
16193: LD_INT 5
16195: LESS
16196: AND
16197: IFFALSE 16229
// begin people = people + 1 ;
16199: LD_ADDR_VAR 0 4
16203: PUSH
16204: LD_VAR 0 4
16208: PUSH
16209: LD_INT 1
16211: PLUS
16212: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
16213: LD_ADDR_EXP 50
16217: PUSH
16218: LD_EXP 50
16222: PUSH
16223: LD_EXP 5
16227: ADD
16228: ST_TO_ADDR
// end ; if Bobby and people < 5 then
16229: LD_EXP 6
16233: PUSH
16234: LD_VAR 0 4
16238: PUSH
16239: LD_INT 5
16241: LESS
16242: AND
16243: IFFALSE 16275
// begin people = people + 1 ;
16245: LD_ADDR_VAR 0 4
16249: PUSH
16250: LD_VAR 0 4
16254: PUSH
16255: LD_INT 1
16257: PLUS
16258: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
16259: LD_ADDR_EXP 50
16263: PUSH
16264: LD_EXP 50
16268: PUSH
16269: LD_EXP 6
16273: ADD
16274: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
16275: LD_EXP 7
16279: PUSH
16280: LD_VAR 0 4
16284: PUSH
16285: LD_INT 5
16287: LESS
16288: AND
16289: IFFALSE 16321
// begin people = people + 1 ;
16291: LD_ADDR_VAR 0 4
16295: PUSH
16296: LD_VAR 0 4
16300: PUSH
16301: LD_INT 1
16303: PLUS
16304: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
16305: LD_ADDR_EXP 50
16309: PUSH
16310: LD_EXP 50
16314: PUSH
16315: LD_EXP 7
16319: ADD
16320: ST_TO_ADDR
// end ; if Denis and people < 5 then
16321: LD_EXP 8
16325: PUSH
16326: LD_VAR 0 4
16330: PUSH
16331: LD_INT 5
16333: LESS
16334: AND
16335: IFFALSE 16367
// begin people = people + 1 ;
16337: LD_ADDR_VAR 0 4
16341: PUSH
16342: LD_VAR 0 4
16346: PUSH
16347: LD_INT 1
16349: PLUS
16350: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
16351: LD_ADDR_EXP 50
16355: PUSH
16356: LD_EXP 50
16360: PUSH
16361: LD_EXP 8
16365: ADD
16366: ST_TO_ADDR
// end ; if Brown and people < 5 then
16367: LD_EXP 9
16371: PUSH
16372: LD_VAR 0 4
16376: PUSH
16377: LD_INT 5
16379: LESS
16380: AND
16381: IFFALSE 16413
// begin people = people + 1 ;
16383: LD_ADDR_VAR 0 4
16387: PUSH
16388: LD_VAR 0 4
16392: PUSH
16393: LD_INT 1
16395: PLUS
16396: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
16397: LD_ADDR_EXP 50
16401: PUSH
16402: LD_EXP 50
16406: PUSH
16407: LD_EXP 9
16411: ADD
16412: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
16413: LD_EXP 10
16417: PUSH
16418: LD_VAR 0 4
16422: PUSH
16423: LD_INT 5
16425: LESS
16426: AND
16427: IFFALSE 16459
// begin people = people + 1 ;
16429: LD_ADDR_VAR 0 4
16433: PUSH
16434: LD_VAR 0 4
16438: PUSH
16439: LD_INT 1
16441: PLUS
16442: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
16443: LD_ADDR_EXP 50
16447: PUSH
16448: LD_EXP 50
16452: PUSH
16453: LD_EXP 10
16457: ADD
16458: ST_TO_ADDR
// end ; if Houten and people < 5 then
16459: LD_EXP 11
16463: PUSH
16464: LD_VAR 0 4
16468: PUSH
16469: LD_INT 5
16471: LESS
16472: AND
16473: IFFALSE 16505
// begin people = people + 1 ;
16475: LD_ADDR_VAR 0 4
16479: PUSH
16480: LD_VAR 0 4
16484: PUSH
16485: LD_INT 1
16487: PLUS
16488: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
16489: LD_ADDR_EXP 50
16493: PUSH
16494: LD_EXP 50
16498: PUSH
16499: LD_EXP 11
16503: ADD
16504: ST_TO_ADDR
// end ; if Cornel and people < 5 then
16505: LD_EXP 12
16509: PUSH
16510: LD_VAR 0 4
16514: PUSH
16515: LD_INT 5
16517: LESS
16518: AND
16519: IFFALSE 16551
// begin people = people + 1 ;
16521: LD_ADDR_VAR 0 4
16525: PUSH
16526: LD_VAR 0 4
16530: PUSH
16531: LD_INT 1
16533: PLUS
16534: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
16535: LD_ADDR_EXP 50
16539: PUSH
16540: LD_EXP 50
16544: PUSH
16545: LD_EXP 12
16549: ADD
16550: ST_TO_ADDR
// end ; if Gary and people < 5 then
16551: LD_EXP 13
16555: PUSH
16556: LD_VAR 0 4
16560: PUSH
16561: LD_INT 5
16563: LESS
16564: AND
16565: IFFALSE 16597
// begin people = people + 1 ;
16567: LD_ADDR_VAR 0 4
16571: PUSH
16572: LD_VAR 0 4
16576: PUSH
16577: LD_INT 1
16579: PLUS
16580: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
16581: LD_ADDR_EXP 50
16585: PUSH
16586: LD_EXP 50
16590: PUSH
16591: LD_EXP 13
16595: ADD
16596: ST_TO_ADDR
// end ; if Frank and people < 5 then
16597: LD_EXP 14
16601: PUSH
16602: LD_VAR 0 4
16606: PUSH
16607: LD_INT 5
16609: LESS
16610: AND
16611: IFFALSE 16643
// begin people = people + 1 ;
16613: LD_ADDR_VAR 0 4
16617: PUSH
16618: LD_VAR 0 4
16622: PUSH
16623: LD_INT 1
16625: PLUS
16626: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
16627: LD_ADDR_EXP 50
16631: PUSH
16632: LD_EXP 50
16636: PUSH
16637: LD_EXP 14
16641: ADD
16642: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
16643: LD_EXP 15
16647: PUSH
16648: LD_VAR 0 4
16652: PUSH
16653: LD_INT 5
16655: LESS
16656: AND
16657: IFFALSE 16689
// begin people = people + 1 ;
16659: LD_ADDR_VAR 0 4
16663: PUSH
16664: LD_VAR 0 4
16668: PUSH
16669: LD_INT 1
16671: PLUS
16672: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
16673: LD_ADDR_EXP 50
16677: PUSH
16678: LD_EXP 50
16682: PUSH
16683: LD_EXP 15
16687: ADD
16688: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
16689: LD_EXP 50
16693: PPUSH
16694: LD_INT 25
16696: PUSH
16697: LD_INT 2
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PPUSH
16704: CALL_OW 72
16708: PUSH
16709: LD_INT 0
16711: EQUAL
16712: IFFALSE 16730
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
16714: LD_EXP 50
16718: PUSH
16719: LD_INT 1
16721: ARRAY
16722: PPUSH
16723: LD_INT 2
16725: PPUSH
16726: CALL_OW 336
// for i = 1 to 5 do
16730: LD_ADDR_VAR 0 1
16734: PUSH
16735: DOUBLE
16736: LD_INT 1
16738: DEC
16739: ST_TO_ADDR
16740: LD_INT 5
16742: PUSH
16743: FOR_TO
16744: IFFALSE 16795
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
16746: LD_EXP 50
16750: PUSH
16751: LD_VAR 0 1
16755: ARRAY
16756: PPUSH
16757: LD_INT 62
16759: PUSH
16760: LD_VAR 0 1
16764: PLUS
16765: PPUSH
16766: LD_INT 95
16768: PPUSH
16769: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
16773: LD_EXP 50
16777: PUSH
16778: LD_VAR 0 1
16782: ARRAY
16783: PPUSH
16784: LD_EXP 1
16788: PPUSH
16789: CALL_OW 179
// end ;
16793: GO 16743
16795: POP
16796: POP
// repeat wait ( 0 0$1 ) ;
16797: LD_INT 35
16799: PPUSH
16800: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
16804: LD_EXP 1
16808: PPUSH
16809: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
16813: LD_EXP 1
16817: PPUSH
16818: LD_INT 66
16820: PPUSH
16821: LD_INT 98
16823: PPUSH
16824: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
16828: LD_EXP 2
16832: PUSH
16833: LD_EXP 4
16837: PUSH
16838: LD_EXP 16
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: LIST
16847: PPUSH
16848: LD_INT 67
16850: PPUSH
16851: LD_INT 98
16853: PPUSH
16854: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
16858: LD_EXP 1
16862: PUSH
16863: LD_EXP 2
16867: PUSH
16868: LD_EXP 4
16872: PUSH
16873: LD_EXP 16
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: PPUSH
16884: LD_INT 63
16886: PPUSH
16887: LD_INT 95
16889: PPUSH
16890: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
16894: LD_EXP 1
16898: PPUSH
16899: LD_INT 9
16901: PPUSH
16902: CALL_OW 308
16906: PUSH
16907: LD_INT 9
16909: PPUSH
16910: LD_INT 22
16912: PUSH
16913: LD_INT 4
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 21
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 70
16938: PUSH
16939: LD_INT 5
16941: EQUAL
16942: AND
16943: IFFALSE 16797
// wait ( 0 0$2 ) ;
16945: LD_INT 70
16947: PPUSH
16948: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
16952: LD_EXP 4
16956: PPUSH
16957: LD_INT 9
16959: PPUSH
16960: CALL_OW 308
16964: IFFALSE 16978
// Say ( Lisa , D3nW-Lisa-1 ) ;
16966: LD_EXP 4
16970: PPUSH
16971: LD_STRING D3nW-Lisa-1
16973: PPUSH
16974: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
16978: LD_EXP 7
16982: PPUSH
16983: LD_INT 9
16985: PPUSH
16986: CALL_OW 308
16990: IFFALSE 17004
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
16992: LD_EXP 7
16996: PPUSH
16997: LD_STRING D3nW-Cyrus-1
16999: PPUSH
17000: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
17004: LD_EXP 6
17008: PPUSH
17009: LD_INT 9
17011: PPUSH
17012: CALL_OW 308
17016: IFFALSE 17030
// Say ( Bobby , D3nW-Bobby-1 ) ;
17018: LD_EXP 6
17022: PPUSH
17023: LD_STRING D3nW-Bobby-1
17025: PPUSH
17026: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
17030: LD_EXP 13
17034: PPUSH
17035: LD_INT 9
17037: PPUSH
17038: CALL_OW 308
17042: IFFALSE 17056
// Say ( Gary , D3nW-Gary-1 ) ;
17044: LD_EXP 13
17048: PPUSH
17049: LD_STRING D3nW-Gary-1
17051: PPUSH
17052: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
17056: LD_EXP 5
17060: PPUSH
17061: LD_INT 9
17063: PPUSH
17064: CALL_OW 308
17068: IFFALSE 17082
// Say ( Donaldson , D3nW-Don-1 ) ;
17070: LD_EXP 5
17074: PPUSH
17075: LD_STRING D3nW-Don-1
17077: PPUSH
17078: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
17082: LD_EXP 12
17086: PPUSH
17087: LD_INT 9
17089: PPUSH
17090: CALL_OW 308
17094: IFFALSE 17108
// Say ( Cornel , D3nW-Corn-1 ) ;
17096: LD_EXP 12
17100: PPUSH
17101: LD_STRING D3nW-Corn-1
17103: PPUSH
17104: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
17108: LD_EXP 14
17112: PPUSH
17113: LD_INT 9
17115: PPUSH
17116: CALL_OW 308
17120: IFFALSE 17134
// Say ( Frank , D3nW-Frank-1 ) ;
17122: LD_EXP 14
17126: PPUSH
17127: LD_STRING D3nW-Frank-1
17129: PPUSH
17130: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
17134: LD_EXP 1
17138: PPUSH
17139: LD_STRING D3nW-JMM-1
17141: PPUSH
17142: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
17146: LD_EXP 1
17150: PPUSH
17151: LD_STRING D3nW-JMM-1a
17153: PPUSH
17154: CALL_OW 88
// InGameOff ;
17158: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
17162: LD_STRING M1
17164: PPUSH
17165: CALL_OW 337
// SaveForQuickRestart ;
17169: CALL_OW 22
// startAttacks = 1 ;
17173: LD_ADDR_EXP 53
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17181: LD_INT 175
17183: PPUSH
17184: CALL_OW 67
// powellBuildBase = 1 ;
17188: LD_ADDR_EXP 51
17192: PUSH
17193: LD_INT 1
17195: ST_TO_ADDR
// end ;
17196: PPOPN 4
17198: END
// function ResolveQuery ( question , list_of_q ) ; begin
17199: LD_INT 0
17201: PPUSH
// case question of 1 :
17202: LD_VAR 0 1
17206: PUSH
17207: LD_INT 1
17209: DOUBLE
17210: EQUAL
17211: IFTRUE 17215
17213: GO 17266
17215: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
17216: LD_EXP 1
17220: PPUSH
17221: LD_STRING D2Mot-JMM-1
17223: PPUSH
17224: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
17228: LD_EXP 17
17232: PPUSH
17233: LD_STRING D2Mot-Pow-1
17235: PPUSH
17236: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
17240: LD_EXP 1
17244: PPUSH
17245: LD_STRING D2Mot-JMM-2
17247: PPUSH
17248: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
17252: LD_EXP 17
17256: PPUSH
17257: LD_STRING D2Mot-Pow-2
17259: PPUSH
17260: CALL_OW 88
// end ; 2 :
17264: GO 17609
17266: LD_INT 2
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17350
17274: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
17275: LD_EXP 1
17279: PPUSH
17280: LD_STRING D2Rus-JMM-1
17282: PPUSH
17283: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
17287: LD_EXP 17
17291: PPUSH
17292: LD_STRING D2Rus-Pow-1
17294: PPUSH
17295: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
17299: LD_EXP 1
17303: PPUSH
17304: LD_STRING D2Rus-JMM-2
17306: PPUSH
17307: CALL_OW 88
// if not ( 3 in list_of_q ) then
17311: LD_INT 3
17313: PUSH
17314: LD_VAR 0 2
17318: IN
17319: NOT
17320: IFFALSE 17336
// Say ( Powell , D2Rus-Pow-2 ) else
17322: LD_EXP 17
17326: PPUSH
17327: LD_STRING D2Rus-Pow-2
17329: PPUSH
17330: CALL_OW 88
17334: GO 17348
// Say ( Powell , D2Rus-Pow-2a ) ;
17336: LD_EXP 17
17340: PPUSH
17341: LD_STRING D2Rus-Pow-2a
17343: PPUSH
17344: CALL_OW 88
// end ; 3 :
17348: GO 17609
17350: LD_INT 3
17352: DOUBLE
17353: EQUAL
17354: IFTRUE 17358
17356: GO 17443
17358: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
17359: LD_EXP 1
17363: PPUSH
17364: LD_STRING D2Leg-JMM-1
17366: PPUSH
17367: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
17371: LD_EXP 17
17375: PPUSH
17376: LD_STRING D2Leg-Pow-1
17378: PPUSH
17379: CALL_OW 88
// if ( 2 in list_of_q ) then
17383: LD_INT 2
17385: PUSH
17386: LD_VAR 0 2
17390: IN
17391: IFFALSE 17417
// begin Say ( JMM , D2Leg-JMM-2 ) ;
17393: LD_EXP 1
17397: PPUSH
17398: LD_STRING D2Leg-JMM-2
17400: PPUSH
17401: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
17405: LD_EXP 17
17409: PPUSH
17410: LD_STRING D2Leg-Pow-2
17412: PPUSH
17413: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
17417: LD_EXP 1
17421: PPUSH
17422: LD_STRING D2Leg-JMM-3
17424: PPUSH
17425: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
17429: LD_EXP 17
17433: PPUSH
17434: LD_STRING D2Leg-Pow-3
17436: PPUSH
17437: CALL_OW 88
// end ; 4 :
17441: GO 17609
17443: LD_INT 4
17445: DOUBLE
17446: EQUAL
17447: IFTRUE 17451
17449: GO 17526
17451: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
17452: LD_EXP 1
17456: PPUSH
17457: LD_STRING D2Ar-JMM-1
17459: PPUSH
17460: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
17464: LD_EXP 17
17468: PPUSH
17469: LD_STRING D2Ar-Pow-1
17471: PPUSH
17472: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
17476: LD_EXP 1
17480: PPUSH
17481: LD_STRING D2Ar-JMM-2
17483: PPUSH
17484: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
17488: LD_EXP 17
17492: PPUSH
17493: LD_STRING D2Ar-Pow-2
17495: PPUSH
17496: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
17500: LD_EXP 1
17504: PPUSH
17505: LD_STRING D2Ar-JMM-3
17507: PPUSH
17508: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
17512: LD_EXP 17
17516: PPUSH
17517: LD_STRING D2Ar-Pow-3
17519: PPUSH
17520: CALL_OW 88
// end ; 5 :
17524: GO 17609
17526: LD_INT 5
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17549
17534: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
17535: LD_EXP 1
17539: PPUSH
17540: LD_STRING D2Conf-JMM-1
17542: PPUSH
17543: CALL_OW 88
// end ; 6 :
17547: GO 17609
17549: LD_INT 6
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17608
17557: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
17558: LD_EXP 1
17562: PPUSH
17563: LD_STRING D2Com-JMM-1
17565: PPUSH
17566: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
17570: LD_EXP 17
17574: PPUSH
17575: LD_STRING D2Com-Pow-1
17577: PPUSH
17578: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
17582: LD_EXP 1
17586: PPUSH
17587: LD_STRING D2Com-JMM-2
17589: PPUSH
17590: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
17594: LD_EXP 17
17598: PPUSH
17599: LD_STRING D2Com-Pow-2
17601: PPUSH
17602: CALL_OW 88
// end ; end ;
17606: GO 17609
17608: POP
// end ;
17609: LD_VAR 0 3
17613: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
17614: LD_INT 9
17616: PPUSH
17617: LD_INT 22
17619: PUSH
17620: LD_INT 4
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 21
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 70
17645: IFFALSE 17690
17647: GO 17649
17649: DISABLE
// begin enable ;
17650: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
17651: LD_INT 9
17653: PPUSH
17654: LD_INT 22
17656: PUSH
17657: LD_INT 4
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 21
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 70
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 235
// end ;
17690: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
17691: LD_INT 22
17693: PUSH
17694: LD_INT 4
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 21
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: LD_INT 58
17716: PUSH
17717: EMPTY
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: PPUSH
17729: CALL_OW 69
17733: PUSH
17734: LD_INT 4
17736: EQUAL
17737: PUSH
17738: LD_EXP 53
17742: PUSH
17743: LD_INT 1
17745: EQUAL
17746: AND
17747: IFFALSE 17760
17749: GO 17751
17751: DISABLE
// startAttacks = 0 ;
17752: LD_ADDR_EXP 53
17756: PUSH
17757: LD_INT 0
17759: ST_TO_ADDR
17760: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
17761: LD_INT 22
17763: PUSH
17764: LD_INT 4
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 21
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: LD_INT 58
17786: PUSH
17787: EMPTY
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PUSH
17804: LD_INT 4
17806: EQUAL
17807: PUSH
17808: LD_INT 22
17810: PUSH
17811: LD_INT 6
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 21
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 24
17830: PUSH
17831: LD_INT 250
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 69
17847: PUSH
17848: LD_INT 0
17850: EQUAL
17851: AND
17852: PUSH
17853: LD_EXP 53
17857: PUSH
17858: LD_INT 0
17860: EQUAL
17861: AND
17862: PUSH
17863: LD_EXP 52
17867: PUSH
17868: LD_INT 0
17870: EQUAL
17871: AND
17872: IFFALSE 18060
17874: GO 17876
17876: DISABLE
17877: LD_INT 0
17879: PPUSH
// begin powellAttacks = 1 ;
17880: LD_ADDR_EXP 52
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// InGameOn ;
17888: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
17892: LD_EXP 17
17896: PPUSH
17897: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
17901: LD_EXP 17
17905: PPUSH
17906: LD_INT 47
17908: PPUSH
17909: LD_INT 60
17911: PPUSH
17912: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
17916: LD_EXP 17
17920: PPUSH
17921: LD_STRING D4-Pow-1
17923: PPUSH
17924: CALL_OW 88
// for i = 1 to amUnitsAttack do
17928: LD_ADDR_VAR 0 1
17932: PUSH
17933: DOUBLE
17934: LD_INT 1
17936: DEC
17937: ST_TO_ADDR
17938: LD_EXP 49
17942: PUSH
17943: FOR_TO
17944: IFFALSE 17989
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
17946: LD_EXP 49
17950: PUSH
17951: LD_VAR 0 1
17955: ARRAY
17956: PPUSH
17957: CALL_OW 258
17961: PUSH
17962: LD_INT 1
17964: EQUAL
17965: IFFALSE 17987
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
17967: LD_EXP 49
17971: PUSH
17972: LD_VAR 0 1
17976: ARRAY
17977: PPUSH
17978: LD_STRING D4-Sol1-1
17980: PPUSH
17981: CALL_OW 88
// break ;
17985: GO 17989
// end ;
17987: GO 17943
17989: POP
17990: POP
// Say ( Powell , D4-Pow-2 ) ;
17991: LD_EXP 17
17995: PPUSH
17996: LD_STRING D4-Pow-2
17998: PPUSH
17999: CALL_OW 88
// InGameOff ;
18003: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
18007: LD_INT 22
18009: PUSH
18010: LD_INT 4
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 21
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 58
18032: PUSH
18033: EMPTY
18034: LIST
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: PPUSH
18045: CALL_OW 69
18049: PPUSH
18050: LD_INT 59
18052: PPUSH
18053: LD_INT 21
18055: PPUSH
18056: CALL_OW 114
// end ;
18060: PPOPN 1
18062: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
18063: LD_EXP 52
18067: PUSH
18068: LD_INT 1
18070: EQUAL
18071: IFFALSE 18120
18073: GO 18075
18075: DISABLE
18076: LD_INT 0
18078: PPUSH
// begin enable ;
18079: ENABLE
// for i = 1 to amUnitsAttack do
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: DOUBLE
18086: LD_INT 1
18088: DEC
18089: ST_TO_ADDR
18090: LD_EXP 49
18094: PUSH
18095: FOR_TO
18096: IFFALSE 18118
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
18098: LD_INT 8
18100: PPUSH
18101: LD_EXP 49
18105: PUSH
18106: LD_VAR 0 1
18110: ARRAY
18111: PPUSH
18112: CALL_OW 471
18116: GO 18095
18118: POP
18119: POP
// end ;
18120: PPOPN 1
18122: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
18123: LD_INT 22
18125: PUSH
18126: LD_INT 4
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 21
18135: PUSH
18136: LD_INT 2
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 3
18145: PUSH
18146: LD_INT 58
18148: PUSH
18149: EMPTY
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: PUSH
18166: LD_INT 0
18168: EQUAL
18169: PUSH
18170: LD_EXP 52
18174: PUSH
18175: LD_INT 1
18177: EQUAL
18178: AND
18179: IFFALSE 18350
18181: GO 18183
18183: DISABLE
// begin powellAttacks = 2 ;
18184: LD_ADDR_EXP 52
18188: PUSH
18189: LD_INT 2
18191: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
18192: LD_INT 85
18194: PPUSH
18195: LD_INT 3
18197: PPUSH
18198: LD_INT 3
18200: PPUSH
18201: LD_INT 1
18203: PPUSH
18204: LD_INT 5
18206: PUSH
18207: LD_INT 7
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PPUSH
18217: LD_INT 2
18219: PPUSH
18220: CALL_OW 12
18224: ARRAY
18225: PPUSH
18226: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
18230: LD_INT 85
18232: PPUSH
18233: LD_INT 3
18235: PPUSH
18236: LD_INT 3
18238: PPUSH
18239: LD_INT 1
18241: PPUSH
18242: LD_INT 5
18244: PUSH
18245: LD_INT 7
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: PPUSH
18255: LD_INT 2
18257: PPUSH
18258: CALL_OW 12
18262: ARRAY
18263: PPUSH
18264: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
18268: LD_INT 85
18270: PPUSH
18271: LD_INT 3
18273: PPUSH
18274: LD_INT 3
18276: PPUSH
18277: LD_INT 1
18279: PPUSH
18280: LD_INT 5
18282: PUSH
18283: LD_INT 7
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PPUSH
18293: LD_INT 2
18295: PPUSH
18296: CALL_OW 12
18300: ARRAY
18301: PPUSH
18302: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
18306: LD_INT 85
18308: PPUSH
18309: LD_INT 5
18311: PPUSH
18312: LD_INT 3
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: LD_INT 6
18320: PPUSH
18321: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
18325: LD_ADDR_EXP 54
18329: PUSH
18330: LD_INT 85
18332: PPUSH
18333: LD_INT 3
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 1
18341: PPUSH
18342: LD_INT 3
18344: PPUSH
18345: CALL_OW 185
18349: ST_TO_ADDR
// end ;
18350: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
18351: LD_INT 22
18353: PUSH
18354: LD_INT 4
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 21
18363: PUSH
18364: LD_INT 2
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 3
18373: PUSH
18374: LD_INT 58
18376: PUSH
18377: EMPTY
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: PPUSH
18389: CALL_OW 69
18393: PUSH
18394: LD_INT 5
18396: GREATEREQUAL
18397: PUSH
18398: LD_EXP 53
18402: PUSH
18403: LD_INT 1
18405: EQUAL
18406: AND
18407: IFFALSE 18420
18409: GO 18411
18411: DISABLE
// startAttacks = 0 ;
18412: LD_ADDR_EXP 53
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
18420: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
18421: LD_INT 22
18423: PUSH
18424: LD_INT 4
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 21
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 3
18443: PUSH
18444: LD_INT 58
18446: PUSH
18447: EMPTY
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: PPUSH
18459: CALL_OW 69
18463: PUSH
18464: LD_INT 5
18466: GREATEREQUAL
18467: PUSH
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 0
18510: EQUAL
18511: AND
18512: PUSH
18513: LD_EXP 53
18517: PUSH
18518: LD_INT 0
18520: EQUAL
18521: AND
18522: PUSH
18523: LD_EXP 52
18527: PUSH
18528: LD_INT 2
18530: EQUAL
18531: AND
18532: IFFALSE 19441
18534: GO 18536
18536: DISABLE
18537: LD_INT 0
18539: PPUSH
18540: PPUSH
18541: PPUSH
18542: PPUSH
// begin powellAttacks = 3 ;
18543: LD_ADDR_EXP 52
18547: PUSH
18548: LD_INT 3
18550: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
18551: LD_ADDR_VAR 0 1
18555: PUSH
18556: DOUBLE
18557: LD_INT 1
18559: DEC
18560: ST_TO_ADDR
18561: LD_EXP 49
18565: PUSH
18566: FOR_TO
18567: IFFALSE 18589
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
18569: LD_INT 8
18571: PPUSH
18572: LD_EXP 49
18576: PUSH
18577: LD_VAR 0 1
18581: ARRAY
18582: PPUSH
18583: CALL_OW 472
18587: GO 18566
18589: POP
18590: POP
// wait ( 0 0$5 ) ;
18591: LD_INT 175
18593: PPUSH
18594: CALL_OW 67
// Video ( true ) ;
18598: LD_INT 1
18600: PPUSH
18601: CALL 5644 0 1
// CenterNowOnUnits ( Powell ) ;
18605: LD_EXP 17
18609: PPUSH
18610: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
18614: LD_EXP 17
18618: PPUSH
18619: LD_INT 45
18621: PPUSH
18622: LD_INT 64
18624: PPUSH
18625: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
18629: LD_EXP 17
18633: PPUSH
18634: LD_INT 46
18636: PPUSH
18637: LD_INT 66
18639: PPUSH
18640: CALL_OW 178
// for i = 5 to 8 do
18644: LD_ADDR_VAR 0 1
18648: PUSH
18649: DOUBLE
18650: LD_INT 5
18652: DEC
18653: ST_TO_ADDR
18654: LD_INT 8
18656: PUSH
18657: FOR_TO
18658: IFFALSE 18804
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
18660: LD_EXP 49
18664: PUSH
18665: LD_VAR 0 1
18669: ARRAY
18670: PPUSH
18671: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
18675: LD_EXP 49
18679: PUSH
18680: LD_VAR 0 1
18684: ARRAY
18685: PPUSH
18686: CALL_OW 121
// wait ( 0 0$1 ) ;
18690: LD_INT 35
18692: PPUSH
18693: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
18697: LD_EXP 49
18701: PUSH
18702: LD_VAR 0 1
18706: ARRAY
18707: PPUSH
18708: LD_INT 92
18710: PPUSH
18711: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
18715: LD_EXP 49
18719: PUSH
18720: LD_VAR 0 1
18724: ARRAY
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
18733: LD_EXP 49
18737: PUSH
18738: LD_VAR 0 1
18742: ARRAY
18743: PPUSH
18744: CALL_OW 182
// wait ( 0 0$1 ) ;
18748: LD_INT 35
18750: PPUSH
18751: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 45 + i , 67 ) ;
18755: LD_EXP 49
18759: PUSH
18760: LD_VAR 0 1
18764: ARRAY
18765: PPUSH
18766: LD_INT 45
18768: PUSH
18769: LD_VAR 0 1
18773: PLUS
18774: PPUSH
18775: LD_INT 67
18777: PPUSH
18778: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
18782: LD_EXP 49
18786: PUSH
18787: LD_VAR 0 1
18791: ARRAY
18792: PPUSH
18793: LD_EXP 17
18797: PPUSH
18798: CALL_OW 179
// end ;
18802: GO 18657
18804: POP
18805: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18806: LD_ADDR_VAR 0 3
18810: PUSH
18811: LD_INT 22
18813: PUSH
18814: LD_INT 4
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 21
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 56
18833: PUSH
18834: EMPTY
18835: LIST
18836: PUSH
18837: LD_INT 3
18839: PUSH
18840: LD_INT 60
18842: PUSH
18843: EMPTY
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PUSH
18861: LD_EXP 17
18865: PUSH
18866: EMPTY
18867: LIST
18868: DIFF
18869: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
18870: LD_VAR 0 3
18874: PPUSH
18875: LD_INT 92
18877: PPUSH
18878: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
18882: LD_VAR 0 3
18886: PPUSH
18887: LD_INT 1
18889: PPUSH
18890: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
18894: LD_EXP 17
18898: PPUSH
18899: LD_STRING D5-Pow-1
18901: PPUSH
18902: CALL_OW 88
// for i = 1 to amUnitsAttack do
18906: LD_ADDR_VAR 0 1
18910: PUSH
18911: DOUBLE
18912: LD_INT 1
18914: DEC
18915: ST_TO_ADDR
18916: LD_EXP 49
18920: PUSH
18921: FOR_TO
18922: IFFALSE 18967
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
18924: LD_EXP 49
18928: PUSH
18929: LD_VAR 0 1
18933: ARRAY
18934: PPUSH
18935: CALL_OW 258
18939: PUSH
18940: LD_INT 1
18942: EQUAL
18943: IFFALSE 18965
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
18945: LD_EXP 49
18949: PUSH
18950: LD_VAR 0 1
18954: ARRAY
18955: PPUSH
18956: LD_STRING D5-Sol2-1
18958: PPUSH
18959: CALL_OW 88
// break ;
18963: GO 18967
// end ;
18965: GO 18921
18967: POP
18968: POP
// Say ( Powell , D5-Pow-2 ) ;
18969: LD_EXP 17
18973: PPUSH
18974: LD_STRING D5-Pow-2
18976: PPUSH
18977: CALL_OW 88
// for i = 1 to amUnitsAttack do
18981: LD_ADDR_VAR 0 1
18985: PUSH
18986: DOUBLE
18987: LD_INT 1
18989: DEC
18990: ST_TO_ADDR
18991: LD_EXP 49
18995: PUSH
18996: FOR_TO
18997: IFFALSE 19042
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
18999: LD_EXP 49
19003: PUSH
19004: LD_VAR 0 1
19008: ARRAY
19009: PPUSH
19010: CALL_OW 258
19014: PUSH
19015: LD_INT 1
19017: EQUAL
19018: IFFALSE 19040
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
19020: LD_EXP 49
19024: PUSH
19025: LD_VAR 0 1
19029: ARRAY
19030: PPUSH
19031: LD_STRING D5-Sol2-2
19033: PPUSH
19034: CALL_OW 88
// break ;
19038: GO 19042
// end ;
19040: GO 18996
19042: POP
19043: POP
// Say ( Powell , D5-Pow-3 ) ;
19044: LD_EXP 17
19048: PPUSH
19049: LD_STRING D5-Pow-3
19051: PPUSH
19052: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
19056: LD_INT 22
19058: PUSH
19059: LD_INT 4
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 21
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: LD_INT 58
19081: PUSH
19082: EMPTY
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: PPUSH
19094: CALL_OW 69
19098: PPUSH
19099: LD_INT 59
19101: PPUSH
19102: LD_INT 21
19104: PPUSH
19105: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
19109: LD_EXP 49
19113: PPUSH
19114: LD_INT 59
19116: PPUSH
19117: LD_INT 21
19119: PPUSH
19120: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
19124: LD_INT 61
19126: PPUSH
19127: LD_INT 35
19129: PPUSH
19130: CALL_OW 84
// wait ( 0 0$15 ) ;
19134: LD_INT 525
19136: PPUSH
19137: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
19141: LD_EXP 17
19145: PPUSH
19146: LD_STRING D5a-Pow-1
19148: PPUSH
19149: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
19153: LD_EXP 17
19157: PPUSH
19158: LD_STRING D5a-Pow-1a
19160: PPUSH
19161: CALL_OW 88
// wait ( 0 0$2 ) ;
19165: LD_INT 70
19167: PPUSH
19168: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
19172: LD_EXP 17
19176: PPUSH
19177: LD_STRING D5a-Pow-1b
19179: PPUSH
19180: CALL_OW 88
// wait ( 0 0$3 ) ;
19184: LD_INT 105
19186: PPUSH
19187: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
19191: LD_EXP 17
19195: PPUSH
19196: LD_STRING D5a-Pow-1c
19198: PPUSH
19199: CALL_OW 88
// wait ( 0 0$1 ) ;
19203: LD_INT 35
19205: PPUSH
19206: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
19210: LD_EXP 17
19214: PPUSH
19215: LD_STRING D5a-Pow-1d
19217: PPUSH
19218: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
19222: LD_INT 35
19224: PPUSH
19225: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
19229: LD_INT 22
19231: PUSH
19232: LD_INT 4
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 21
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 3
19251: PUSH
19252: LD_INT 58
19254: PUSH
19255: EMPTY
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: PPUSH
19267: CALL_OW 69
19271: PPUSH
19272: LD_INT 59
19274: PPUSH
19275: LD_INT 21
19277: PPUSH
19278: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
19282: LD_EXP 49
19286: PPUSH
19287: LD_INT 59
19289: PPUSH
19290: LD_INT 21
19292: PPUSH
19293: CALL_OW 114
// until amUnitsAttack = [ ] ;
19297: LD_EXP 49
19301: PUSH
19302: EMPTY
19303: EQUAL
19304: IFFALSE 19222
// CenterNowOnUnits ( Powell ) ;
19306: LD_EXP 17
19310: PPUSH
19311: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
19315: LD_ADDR_VAR 0 3
19319: PUSH
19320: LD_INT 22
19322: PUSH
19323: LD_INT 4
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 21
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PPUSH
19344: CALL_OW 69
19348: PUSH
19349: LD_EXP 17
19353: PUSH
19354: EMPTY
19355: LIST
19356: DIFF
19357: ST_TO_ADDR
// for i in powellPeople do
19358: LD_ADDR_VAR 0 1
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: FOR_IN
19369: IFFALSE 19398
// if GetSex ( i ) = sex_male then
19371: LD_VAR 0 1
19375: PPUSH
19376: CALL_OW 258
19380: PUSH
19381: LD_INT 1
19383: EQUAL
19384: IFFALSE 19396
// sold = i ;
19386: LD_ADDR_VAR 0 2
19390: PUSH
19391: LD_VAR 0 1
19395: ST_TO_ADDR
19396: GO 19368
19398: POP
19399: POP
// Say ( sold , D6-Sol3-1 ) ;
19400: LD_VAR 0 2
19404: PPUSH
19405: LD_STRING D6-Sol3-1
19407: PPUSH
19408: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
19412: LD_EXP 17
19416: PPUSH
19417: LD_STRING D6-Pow-1
19419: PPUSH
19420: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
19424: LD_INT 139
19426: PUSH
19427: LD_INT 138
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PPUSH
19434: LD_INT 12
19436: PPUSH
19437: CALL_OW 113
// end ;
19441: PPOPN 4
19443: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
19444: LD_EXP 52
19448: PUSH
19449: LD_INT 3
19451: EQUAL
19452: PUSH
19453: LD_INT 12
19455: PPUSH
19456: LD_INT 22
19458: PUSH
19459: LD_INT 8
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 21
19468: PUSH
19469: LD_INT 2
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PPUSH
19480: CALL_OW 70
19484: PUSH
19485: LD_INT 2
19487: EQUAL
19488: AND
19489: IFFALSE 19650
19491: GO 19493
19493: DISABLE
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
19498: LD_INT 8
19500: PPUSH
19501: LD_INT 1
19503: PPUSH
19504: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
19508: LD_INT 4
19510: PPUSH
19511: LD_INT 8
19513: PPUSH
19514: LD_INT 1
19516: PPUSH
19517: LD_INT 1
19519: PPUSH
19520: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
19524: LD_ADDR_VAR 0 1
19528: PUSH
19529: LD_INT 92
19531: PPUSH
19532: CALL_OW 313
19536: PUSH
19537: FOR_IN
19538: IFFALSE 19569
// if GetSex ( i ) = sex_male then
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 258
19549: PUSH
19550: LD_INT 1
19552: EQUAL
19553: IFFALSE 19567
// begin tmp = i ;
19555: LD_ADDR_VAR 0 2
19559: PUSH
19560: LD_VAR 0 1
19564: ST_TO_ADDR
// break ;
19565: GO 19569
// end ;
19567: GO 19537
19569: POP
19570: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
19571: LD_INT 92
19573: PPUSH
19574: CALL_OW 313
19578: PPUSH
19579: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
19583: LD_VAR 0 2
19587: PPUSH
19588: LD_STRING D6-Sol3-2
19590: PPUSH
19591: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
19595: LD_INT 139
19597: PUSH
19598: LD_INT 138
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PPUSH
19605: LD_INT 85
19607: PPUSH
19608: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
19612: LD_INT 4
19614: PPUSH
19615: LD_INT 8
19617: PPUSH
19618: LD_INT 2
19620: PPUSH
19621: LD_INT 1
19623: PPUSH
19624: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
19628: LD_INT 8
19630: PPUSH
19631: LD_INT 8
19633: PPUSH
19634: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
19638: LD_EXP 17
19642: PPUSH
19643: LD_STRING D6-Pow-2
19645: PPUSH
19646: CALL_OW 88
// end ;
19650: PPOPN 2
19652: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
19653: LD_INT 85
19655: PPUSH
19656: CALL_OW 301
19660: IFFALSE 19952
19662: GO 19664
19664: DISABLE
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
19669: LD_ADDR_VAR 0 1
19673: PUSH
19674: LD_INT 22
19676: PUSH
19677: LD_INT 4
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 21
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 56
19696: PUSH
19697: EMPTY
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: PPUSH
19705: CALL_OW 69
19709: PUSH
19710: LD_EXP 17
19714: PUSH
19715: EMPTY
19716: LIST
19717: DIFF
19718: PUSH
19719: FOR_IN
19720: IFFALSE 19751
// if GetSex ( i ) = sex_male then
19722: LD_VAR 0 1
19726: PPUSH
19727: CALL_OW 258
19731: PUSH
19732: LD_INT 1
19734: EQUAL
19735: IFFALSE 19749
// begin tmp = i ;
19737: LD_ADDR_VAR 0 2
19741: PUSH
19742: LD_VAR 0 1
19746: ST_TO_ADDR
// break ;
19747: GO 19751
// end ;
19749: GO 19719
19751: POP
19752: POP
// Say ( Powell , D6a-Pow-1 ) ;
19753: LD_EXP 17
19757: PPUSH
19758: LD_STRING D6a-Pow-1
19760: PPUSH
19761: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
19765: LD_VAR 0 2
19769: PPUSH
19770: LD_STRING D6a-Sol3-1
19772: PPUSH
19773: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
19777: LD_EXP 17
19781: PPUSH
19782: LD_VAR 0 2
19786: PPUSH
19787: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
19791: LD_EXP 17
19795: PPUSH
19796: LD_STRING D6a-Pow-2
19798: PPUSH
19799: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
19803: LD_VAR 0 2
19807: PPUSH
19808: LD_STRING D6a-Sol3-2
19810: PPUSH
19811: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
19815: LD_EXP 17
19819: PPUSH
19820: LD_STRING D6a-Pow-3
19822: PPUSH
19823: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
19827: LD_EXP 17
19831: PPUSH
19832: LD_EXP 54
19836: PPUSH
19837: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19841: LD_INT 35
19843: PPUSH
19844: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
19848: LD_EXP 17
19852: PPUSH
19853: LD_EXP 54
19857: PPUSH
19858: CALL_OW 120
// until IsInUnit ( Powell ) ;
19862: LD_EXP 17
19866: PPUSH
19867: CALL_OW 310
19871: IFFALSE 19841
// wait ( 0 0$1 ) ;
19873: LD_INT 35
19875: PPUSH
19876: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
19880: LD_EXP 54
19884: PPUSH
19885: LD_INT 77
19887: PPUSH
19888: LD_INT 64
19890: PPUSH
19891: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
19895: LD_EXP 54
19899: PPUSH
19900: LD_INT 91
19902: PPUSH
19903: LD_INT 61
19905: PPUSH
19906: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
19910: LD_EXP 54
19914: PPUSH
19915: LD_INT 74
19917: PPUSH
19918: LD_INT 25
19920: PPUSH
19921: CALL_OW 171
// centerPowell = 1 ;
19925: LD_ADDR_EXP 55
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// wait ( 0 0$15 ) ;
19933: LD_INT 525
19935: PPUSH
19936: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
19940: LD_EXP 17
19944: PPUSH
19945: LD_STRING D6b-Pow-1
19947: PPUSH
19948: CALL_OW 88
// end ;
19952: PPOPN 2
19954: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
19955: LD_EXP 54
19959: PPUSH
19960: LD_INT 13
19962: PPUSH
19963: CALL_OW 308
19967: PUSH
19968: LD_EXP 52
19972: PUSH
19973: LD_INT 3
19975: EQUAL
19976: AND
19977: IFFALSE 20119
19979: GO 19981
19981: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
19982: LD_EXP 54
19986: PPUSH
19987: LD_INT 250
19989: PPUSH
19990: CALL_OW 234
// DialogueOn ;
19994: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
19998: LD_EXP 17
20002: PPUSH
20003: LD_STRING D6b-Pow-1a
20005: PPUSH
20006: CALL_OW 88
// DialogueOff ;
20010: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
20014: LD_EXP 17
20018: PPUSH
20019: LD_INT 22
20021: PUSH
20022: LD_INT 8
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 34
20031: PUSH
20032: LD_INT 29
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 50
20041: PUSH
20042: EMPTY
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PPUSH
20050: CALL_OW 69
20054: PUSH
20055: LD_INT 1
20057: ARRAY
20058: PPUSH
20059: CALL_OW 120
// wait ( 0 0$1 ) ;
20063: LD_INT 35
20065: PPUSH
20066: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
20070: LD_EXP 17
20074: PPUSH
20075: LD_INT 22
20077: PUSH
20078: LD_INT 8
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 34
20087: PUSH
20088: LD_INT 29
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 50
20097: PUSH
20098: EMPTY
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 69
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PPUSH
20115: CALL_OW 120
// end ;
20119: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
20120: LD_INT 22
20122: PUSH
20123: LD_INT 4
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 34
20132: PUSH
20133: LD_INT 29
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: IFFALSE 20527
20150: GO 20152
20152: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
20153: LD_ADDR_EXP 56
20157: PUSH
20158: LD_INT 22
20160: PUSH
20161: LD_INT 4
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 34
20170: PUSH
20171: LD_INT 29
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PPUSH
20182: CALL_OW 69
20186: PUSH
20187: LD_INT 1
20189: ARRAY
20190: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
20191: LD_INT 8
20193: PPUSH
20194: LD_INT 4
20196: PPUSH
20197: LD_INT 1
20199: PPUSH
20200: LD_INT 1
20202: PPUSH
20203: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
20207: LD_EXP 56
20211: PPUSH
20212: LD_INT 80
20214: PPUSH
20215: LD_INT 19
20217: PPUSH
20218: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
20222: LD_EXP 56
20226: PPUSH
20227: LD_INT 74
20229: PPUSH
20230: LD_INT 15
20232: PPUSH
20233: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
20237: LD_EXP 56
20241: PPUSH
20242: LD_INT 72
20244: PPUSH
20245: LD_INT 19
20247: PPUSH
20248: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
20252: LD_EXP 56
20256: PPUSH
20257: LD_INT 78
20259: PPUSH
20260: LD_INT 24
20262: PPUSH
20263: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
20267: LD_EXP 56
20271: PPUSH
20272: LD_INT 77
20274: PPUSH
20275: LD_INT 20
20277: PPUSH
20278: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
20282: LD_EXP 56
20286: PPUSH
20287: LD_INT 78
20289: PPUSH
20290: LD_INT 15
20292: PPUSH
20293: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
20297: LD_EXP 17
20301: PPUSH
20302: LD_STRING D6b-Pow-1b
20304: PPUSH
20305: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
20309: LD_INT 22
20311: PUSH
20312: LD_INT 8
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 21
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 25
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 26
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: PPUSH
20355: CALL_OW 69
20359: PUSH
20360: LD_INT 1
20362: ARRAY
20363: PPUSH
20364: LD_STRING D6b-ArSol1-1
20366: PPUSH
20367: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol2-1 ) ;
20371: LD_INT 22
20373: PUSH
20374: LD_INT 8
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 25
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 26
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 69
20421: PUSH
20422: LD_INT 1
20424: ARRAY
20425: PPUSH
20426: LD_STRING D6b-ArSol2-1
20428: PPUSH
20429: CALL_OW 88
// wait ( 0 0$3 ) ;
20433: LD_INT 105
20435: PPUSH
20436: CALL_OW 67
// Say ( Powell , D6b-Pow-2 ) ;
20440: LD_EXP 17
20444: PPUSH
20445: LD_STRING D6b-Pow-2
20447: PPUSH
20448: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
20452: LD_INT 35
20454: PPUSH
20455: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
20459: LD_EXP 56
20463: PPUSH
20464: LD_INT 78
20466: PPUSH
20467: LD_INT 15
20469: PPUSH
20470: CALL_OW 297
20474: PUSH
20475: LD_INT 2
20477: LESS
20478: IFFALSE 20452
// wait ( 0 0$1 ) ;
20480: LD_INT 35
20482: PPUSH
20483: CALL_OW 67
// DialogueOn ;
20487: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
20491: LD_EXP 17
20495: PPUSH
20496: LD_STRING D6b-Pow-2a
20498: PPUSH
20499: CALL_OW 88
// DialogueOff ;
20503: CALL_OW 7
// centerPowell = 0 ;
20507: LD_ADDR_EXP 55
20511: PUSH
20512: LD_INT 0
20514: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
20515: LD_EXP 56
20519: PPUSH
20520: LD_INT 105
20522: PPUSH
20523: CALL_OW 115
// end ;
20527: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
20528: LD_INT 105
20530: PPUSH
20531: CALL_OW 301
20535: PUSH
20536: LD_EXP 52
20540: PUSH
20541: LD_INT 3
20543: EQUAL
20544: AND
20545: IFFALSE 21265
20547: GO 20549
20549: DISABLE
20550: LD_INT 0
20552: PPUSH
20553: PPUSH
20554: PPUSH
20555: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_sex , 1 ] ] ) ;
20556: LD_ADDR_VAR 0 2
20560: PUSH
20561: LD_INT 22
20563: PUSH
20564: LD_INT 4
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 21
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 56
20583: PUSH
20584: EMPTY
20585: LIST
20586: PUSH
20587: LD_INT 26
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: PPUSH
20603: CALL_OW 69
20607: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
20608: LD_INT 49
20610: PPUSH
20611: LD_INT 66
20613: PPUSH
20614: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
20618: LD_VAR 0 2
20622: PUSH
20623: LD_INT 1
20625: ARRAY
20626: PPUSH
20627: LD_STRING D6c-Sol3-1
20629: PPUSH
20630: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
20634: LD_EXP 1
20638: PPUSH
20639: LD_STRING D6c-JMM-1
20641: PPUSH
20642: CALL_OW 88
// if IsOk ( Cyrus ) then
20646: LD_EXP 7
20650: PPUSH
20651: CALL_OW 302
20655: IFFALSE 20669
// Say ( Cyrus , D6c-Cyrus-1 ) ;
20657: LD_EXP 7
20661: PPUSH
20662: LD_STRING D6c-Cyrus-1
20664: PPUSH
20665: CALL_OW 88
// if IsOk ( Bobby ) then
20669: LD_EXP 6
20673: PPUSH
20674: CALL_OW 302
20678: IFFALSE 20692
// Say ( Bobby , D6c-Bobby-1 ) ;
20680: LD_EXP 6
20684: PPUSH
20685: LD_STRING D6c-Bobby-1
20687: PPUSH
20688: CALL_OW 88
// if IsOk ( Cornel ) then
20692: LD_EXP 12
20696: PPUSH
20697: CALL_OW 302
20701: IFFALSE 20715
// Say ( Cornel , D6c-Corn-1 ) ;
20703: LD_EXP 12
20707: PPUSH
20708: LD_STRING D6c-Corn-1
20710: PPUSH
20711: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
20715: LD_VAR 0 2
20719: PUSH
20720: LD_INT 2
20722: ARRAY
20723: PPUSH
20724: LD_STRING D6c-Sol1-1
20726: PPUSH
20727: CALL_OW 88
// if IsOk ( Lisa ) then
20731: LD_EXP 4
20735: PPUSH
20736: CALL_OW 302
20740: IFFALSE 20754
// Say ( Lisa , D6c-Lisa-1 ) ;
20742: LD_EXP 4
20746: PPUSH
20747: LD_STRING D6c-Lisa-1
20749: PPUSH
20750: CALL_OW 88
// if IsOk ( Gary ) then
20754: LD_EXP 13
20758: PPUSH
20759: CALL_OW 302
20763: IFFALSE 20777
// Say ( Gary , D6c-Gary-1 ) ;
20765: LD_EXP 13
20769: PPUSH
20770: LD_STRING D6c-Gary-1
20772: PPUSH
20773: CALL_OW 88
// if IsOK ( Donaldson ) then
20777: LD_EXP 5
20781: PPUSH
20782: CALL_OW 302
20786: IFFALSE 20800
// Say ( Donaldson , D6c-Don-1 ) ;
20788: LD_EXP 5
20792: PPUSH
20793: LD_STRING D6c-Don-1
20795: PPUSH
20796: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
20800: LD_VAR 0 2
20804: PUSH
20805: LD_INT 3
20807: ARRAY
20808: PPUSH
20809: LD_STRING D6c-Sol2-1
20811: PPUSH
20812: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
20816: LD_INT 22
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 21
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PPUSH
20840: CALL_OW 69
20844: PPUSH
20845: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
20849: LD_INT 22
20851: PUSH
20852: LD_INT 4
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 21
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PPUSH
20873: CALL_OW 69
20877: PPUSH
20878: CALL_OW 122
// wait ( 0 0$1 ) ;
20882: LD_INT 35
20884: PPUSH
20885: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: LD_INT 22
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 21
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PPUSH
20918: CALL_OW 69
20922: PUSH
20923: LD_EXP 1
20927: PUSH
20928: EMPTY
20929: LIST
20930: DIFF
20931: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
20932: LD_ADDR_VAR 0 4
20936: PUSH
20937: LD_INT 22
20939: PUSH
20940: LD_INT 4
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 21
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PPUSH
20961: CALL_OW 69
20965: ST_TO_ADDR
// for i := 1 to tmp2 do
20966: LD_ADDR_VAR 0 1
20970: PUSH
20971: DOUBLE
20972: LD_INT 1
20974: DEC
20975: ST_TO_ADDR
20976: LD_VAR 0 4
20980: PUSH
20981: FOR_TO
20982: IFFALSE 21033
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 65 ) ;
20984: LD_VAR 0 4
20988: PUSH
20989: LD_VAR 0 1
20993: ARRAY
20994: PPUSH
20995: LD_INT 43
20997: PUSH
20998: LD_VAR 0 1
21002: PLUS
21003: PPUSH
21004: LD_INT 65
21006: PPUSH
21007: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
21011: LD_VAR 0 4
21015: PUSH
21016: LD_VAR 0 1
21020: ARRAY
21021: PPUSH
21022: LD_EXP 1
21026: PPUSH
21027: CALL_OW 179
// end ;
21031: GO 20981
21033: POP
21034: POP
// for i := 1 to tmp1 do
21035: LD_ADDR_VAR 0 1
21039: PUSH
21040: DOUBLE
21041: LD_INT 1
21043: DEC
21044: ST_TO_ADDR
21045: LD_VAR 0 3
21049: PUSH
21050: FOR_TO
21051: IFFALSE 21102
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 64 ) ;
21053: LD_VAR 0 3
21057: PUSH
21058: LD_VAR 0 1
21062: ARRAY
21063: PPUSH
21064: LD_INT 43
21066: PUSH
21067: LD_VAR 0 1
21071: PLUS
21072: PPUSH
21073: LD_INT 64
21075: PPUSH
21076: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
21080: LD_VAR 0 3
21084: PUSH
21085: LD_VAR 0 1
21089: ARRAY
21090: PPUSH
21091: LD_EXP 1
21095: PPUSH
21096: CALL_OW 179
// end ;
21100: GO 21050
21102: POP
21103: POP
// ComMoveXY ( JMM , 48 , 68 ) ;
21104: LD_EXP 1
21108: PPUSH
21109: LD_INT 48
21111: PPUSH
21112: LD_INT 68
21114: PPUSH
21115: CALL_OW 111
// AddComTurnXY ( JMM , 47 , 65 ) ;
21119: LD_EXP 1
21123: PPUSH
21124: LD_INT 47
21126: PPUSH
21127: LD_INT 65
21129: PPUSH
21130: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
21134: LD_INT 35
21136: PPUSH
21137: CALL_OW 67
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
21141: LD_EXP 1
21145: PPUSH
21146: LD_INT 48
21148: PPUSH
21149: LD_INT 68
21151: PPUSH
21152: CALL_OW 297
21156: PUSH
21157: LD_INT 2
21159: LESS
21160: IFFALSE 21134
// wait ( 0 0$2 ) ;
21162: LD_INT 70
21164: PPUSH
21165: CALL_OW 67
// Say ( tmp [ 2 ] , D6c-Sol3-2 ) ;
21169: LD_VAR 0 2
21173: PUSH
21174: LD_INT 2
21176: ARRAY
21177: PPUSH
21178: LD_STRING D6c-Sol3-2
21180: PPUSH
21181: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
21185: LD_EXP 1
21189: PPUSH
21190: LD_STRING D6c-JMM-2
21192: PPUSH
21193: CALL_OW 88
// Video ( false ) ;
21197: LD_INT 0
21199: PPUSH
21200: CALL 5644 0 1
// centerPowell = 0 ;
21204: LD_ADDR_EXP 55
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
21212: LD_INT 22
21214: PUSH
21215: LD_INT 4
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PPUSH
21222: CALL_OW 69
21226: PPUSH
21227: LD_INT 1
21229: PPUSH
21230: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
21234: LD_STRING M2
21236: PPUSH
21237: CALL_OW 337
// timerStatus = 1 ;
21241: LD_ADDR_EXP 73
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// missionStage = 1 ;
21249: LD_ADDR_EXP 75
21253: PUSH
21254: LD_INT 1
21256: ST_TO_ADDR
// startAttacks = 1 ;
21257: LD_ADDR_EXP 53
21261: PUSH
21262: LD_INT 1
21264: ST_TO_ADDR
// end ;
21265: PPOPN 4
21267: END
// every 0 0$1 trigger centerPowell = 1 do
21268: LD_EXP 55
21272: PUSH
21273: LD_INT 1
21275: EQUAL
21276: IFFALSE 21367
21278: GO 21280
21280: DISABLE
// begin enable ;
21281: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
21282: LD_EXP 17
21286: PUSH
21287: LD_EXP 56
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PPUSH
21296: LD_INT 1000
21298: PPUSH
21299: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
21303: LD_EXP 54
21307: PPUSH
21308: LD_INT 13
21310: PPUSH
21311: CALL_OW 308
21315: NOT
21316: IFFALSE 21330
// SetLives ( powellVeh , 1000 ) ;
21318: LD_EXP 54
21322: PPUSH
21323: LD_INT 1000
21325: PPUSH
21326: CALL_OW 234
// if not IsInUnit ( Powell ) then
21330: LD_EXP 17
21334: PPUSH
21335: CALL_OW 310
21339: NOT
21340: IFFALSE 21353
// CenterNowOnUnits ( Powell ) else
21342: LD_EXP 17
21346: PPUSH
21347: CALL_OW 87
21351: GO 21367
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
21353: LD_EXP 17
21357: PPUSH
21358: CALL_OW 310
21362: PPUSH
21363: CALL_OW 87
// end ;
21367: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
21368: LD_EXP 74
21372: PUSH
21373: LD_INT 560
21375: GREATEREQUAL
21376: IFFALSE 21581
21378: GO 21380
21380: DISABLE
// begin DialogueOn ;
21381: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
21385: LD_EXP 37
21389: PPUSH
21390: LD_STRING D7-Friend-1
21392: PPUSH
21393: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
21397: LD_EXP 1
21401: PPUSH
21402: LD_STRING D7-JMM-1
21404: PPUSH
21405: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
21409: LD_EXP 37
21413: PPUSH
21414: LD_STRING D7-Friend-2
21416: PPUSH
21417: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
21421: LD_EXP 1
21425: PPUSH
21426: LD_STRING D7-JMM-2
21428: PPUSH
21429: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
21433: LD_EXP 37
21437: PPUSH
21438: LD_STRING D7-Friend-3
21440: PPUSH
21441: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
21445: LD_EXP 1
21449: PPUSH
21450: LD_STRING D7-JMM-3
21452: PPUSH
21453: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
21457: LD_EXP 37
21461: PPUSH
21462: LD_STRING D7-Friend-4
21464: PPUSH
21465: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
21469: LD_EXP 1
21473: PPUSH
21474: LD_STRING D7-JMM-4
21476: PPUSH
21477: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
21481: LD_EXP 37
21485: PPUSH
21486: LD_STRING D7-Friend-5
21488: PPUSH
21489: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
21493: LD_EXP 1
21497: PPUSH
21498: LD_STRING D7-JMM-5
21500: PPUSH
21501: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
21505: LD_EXP 37
21509: PPUSH
21510: LD_STRING D7-Friend-6
21512: PPUSH
21513: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
21517: LD_EXP 1
21521: PPUSH
21522: LD_STRING D7-JMM-6
21524: PPUSH
21525: CALL_OW 88
// DialogueOff ;
21529: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
21533: LD_EXP 35
21537: PPUSH
21538: LD_INT 15
21540: PPUSH
21541: LD_INT 0
21543: PPUSH
21544: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
21548: LD_EXP 35
21552: PPUSH
21553: LD_INT 2
21555: PPUSH
21556: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
21560: LD_EXP 35
21564: PPUSH
21565: LD_INT 2
21567: PPUSH
21568: LD_INT 78
21570: PPUSH
21571: LD_INT 12
21573: PPUSH
21574: LD_INT 3
21576: PPUSH
21577: CALL_OW 145
// end ;
21581: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
21582: LD_INT 22
21584: PUSH
21585: LD_INT 8
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 21
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 23
21604: PUSH
21605: LD_INT 2
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: PPUSH
21617: CALL_OW 69
21621: PUSH
21622: LD_INT 6
21624: PUSH
21625: LD_INT 5
21627: PUSH
21628: LD_INT 4
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: LIST
21635: PUSH
21636: LD_OWVAR 67
21640: ARRAY
21641: LESSEQUAL
21642: IFFALSE 21844
21644: GO 21646
21646: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
21647: LD_EXP 30
21651: PPUSH
21652: LD_INT 19
21654: PPUSH
21655: LD_INT 0
21657: PPUSH
21658: CALL_OW 49
// KillUnit ( Kozlov ) ;
21662: LD_EXP 35
21666: PPUSH
21667: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21671: LD_INT 22
21673: PUSH
21674: LD_INT 8
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 21
21683: PUSH
21684: LD_INT 3
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 23
21693: PUSH
21694: LD_INT 3
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 30
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: PPUSH
21717: CALL_OW 69
21721: PUSH
21722: LD_INT 1
21724: ARRAY
21725: PPUSH
21726: CALL_OW 66
// DialogueOn ;
21730: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
21734: LD_EXP 1
21738: PPUSH
21739: LD_STRING D13-JMM-1
21741: PPUSH
21742: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
21746: LD_EXP 30
21750: PPUSH
21751: LD_STRING D13-Kurt-1
21753: PPUSH
21754: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
21758: LD_EXP 1
21762: PPUSH
21763: LD_STRING D13-JMM-2
21765: PPUSH
21766: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
21770: LD_EXP 30
21774: PPUSH
21775: LD_STRING D13-Kurt-2a
21777: PPUSH
21778: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
21782: LD_EXP 1
21786: PPUSH
21787: LD_STRING D13-JMM-3
21789: PPUSH
21790: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
21794: LD_EXP 30
21798: PPUSH
21799: LD_STRING D13-Kurt-3
21801: PPUSH
21802: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
21806: LD_EXP 1
21810: PPUSH
21811: LD_STRING D13-JMM-4
21813: PPUSH
21814: CALL_OW 88
// DialogueOff ;
21818: CALL_OW 7
// SetSide ( FilterAllUnits ( [ f_side , 8 ] ) , 1 ) ;
21822: LD_INT 22
21824: PUSH
21825: LD_INT 8
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL_OW 69
21836: PPUSH
21837: LD_INT 1
21839: PPUSH
21840: CALL_OW 235
// end ;
21844: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
21845: LD_EXP 74
21849: PUSH
21850: LD_INT 31570
21852: GREATEREQUAL
21853: IFFALSE 21929
21855: GO 21857
21857: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
21858: LD_EXP 62
21862: PUSH
21863: LD_INT 1
21865: EQUAL
21866: PUSH
21867: LD_EXP 60
21871: PUSH
21872: EMPTY
21873: EQUAL
21874: AND
21875: IFFALSE 21881
// PrepareSupportFromKappa ;
21877: CALL 2323 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
21881: LD_EXP 62
21885: PUSH
21886: LD_INT 0
21888: EQUAL
21889: PUSH
21890: LD_EXP 63
21894: PUSH
21895: LD_INT 1
21897: EQUAL
21898: AND
21899: IFFALSE 21905
// PrepareAttackFromKappa ;
21901: CALL 4272 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
21905: LD_EXP 62
21909: PUSH
21910: LD_INT 0
21912: EQUAL
21913: PUSH
21914: LD_EXP 63
21918: PUSH
21919: LD_INT 0
21921: EQUAL
21922: AND
21923: IFFALSE 21929
// PrepareAttackFromKappa ;
21925: CALL 4272 0 0
// end ;
21929: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
21930: LD_INT 1
21932: PPUSH
21933: LD_EXP 34
21937: PPUSH
21938: CALL_OW 292
21942: IFFALSE 22210
21944: GO 21946
21946: DISABLE
// begin missionStage = 2 ;
21947: LD_ADDR_EXP 75
21951: PUSH
21952: LD_INT 2
21954: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
21955: LD_EXP 34
21959: PPUSH
21960: CALL_OW 87
// DialogueOn ;
21964: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
21968: LD_EXP 1
21972: PPUSH
21973: LD_STRING D10nB-JMM-1
21975: PPUSH
21976: CALL_OW 88
// if BurlakStatus = 1 then
21980: LD_EXP 57
21984: PUSH
21985: LD_INT 1
21987: EQUAL
21988: IFFALSE 22002
// Say ( Vsevolod , D10nB-Vse-1a ) ;
21990: LD_EXP 33
21994: PPUSH
21995: LD_STRING D10nB-Vse-1a
21997: PPUSH
21998: CALL_OW 88
// if BurlakStatus = 0 then
22002: LD_EXP 57
22006: PUSH
22007: LD_INT 0
22009: EQUAL
22010: IFFALSE 22024
// Say ( Vsevolod , D10nB-Vse-1 ) ;
22012: LD_EXP 33
22016: PPUSH
22017: LD_STRING D10nB-Vse-1
22019: PPUSH
22020: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
22024: LD_EXP 1
22028: PPUSH
22029: LD_STRING D10nB-JMM-2
22031: PPUSH
22032: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
22036: LD_EXP 62
22040: PUSH
22041: LD_EXP 63
22045: PUSH
22046: LD_INT 1
22048: EQUAL
22049: AND
22050: IFFALSE 22064
// Say ( Vsevolod , D10nB-Vse-5 ) ;
22052: LD_EXP 33
22056: PPUSH
22057: LD_STRING D10nB-Vse-5
22059: PPUSH
22060: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
22064: LD_EXP 62
22068: PUSH
22069: LD_EXP 63
22073: PUSH
22074: LD_INT 0
22076: EQUAL
22077: AND
22078: IFFALSE 22206
// begin if JMMGirl = 1 then
22080: LD_EXP 61
22084: PUSH
22085: LD_INT 1
22087: EQUAL
22088: IFFALSE 22138
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
22090: LD_EXP 33
22094: PPUSH
22095: LD_STRING D10nB-Vse-2
22097: PPUSH
22098: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
22102: LD_EXP 1
22106: PPUSH
22107: LD_STRING D10nB-JMM-3
22109: PPUSH
22110: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
22114: LD_EXP 33
22118: PPUSH
22119: LD_STRING D10nB-Vse-3
22121: PPUSH
22122: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
22126: LD_EXP 1
22130: PPUSH
22131: LD_STRING D10nB-JMM-4
22133: PPUSH
22134: CALL_OW 88
// end ; if JMMGirl = 2 then
22138: LD_EXP 61
22142: PUSH
22143: LD_INT 2
22145: EQUAL
22146: IFFALSE 22172
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
22148: LD_EXP 33
22152: PPUSH
22153: LD_STRING D10nB-Vse-4
22155: PPUSH
22156: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
22160: LD_EXP 1
22164: PPUSH
22165: LD_STRING D10nB-JMM-5
22167: PPUSH
22168: CALL_OW 88
// end ; if JMMGirl = 3 then
22172: LD_EXP 61
22176: PUSH
22177: LD_INT 3
22179: EQUAL
22180: IFFALSE 22206
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
22182: LD_EXP 33
22186: PPUSH
22187: LD_STRING D10nB-Vse-5
22189: PPUSH
22190: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
22194: LD_EXP 1
22198: PPUSH
22199: LD_STRING D10nB-JMM-6
22201: PPUSH
22202: CALL_OW 88
// end ; end ; DialogueOff ;
22206: CALL_OW 7
// end ;
22210: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
22211: LD_EXP 74
22215: PUSH
22216: LD_INT 63070
22218: GREATEREQUAL
22219: IFFALSE 22497
22221: GO 22223
22223: DISABLE
// begin PrepareOmegaTeam ;
22224: CALL 2712 0 0
// missionStage = 3 ;
22228: LD_ADDR_EXP 75
22232: PUSH
22233: LD_INT 3
22235: ST_TO_ADDR
// DialogueOn ;
22236: CALL_OW 6
// if StevensStatus = 1 then
22240: LD_EXP 58
22244: PUSH
22245: LD_INT 1
22247: EQUAL
22248: IFFALSE 22360
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
22250: LD_EXP 3
22254: PPUSH
22255: CALL_OW 310
22259: PPUSH
22260: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
22264: LD_EXP 3
22268: PPUSH
22269: LD_STRING D8-Huck-1
22271: PPUSH
22272: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
22276: LD_EXP 1
22280: PPUSH
22281: LD_STRING D8-JMM-1
22283: PPUSH
22284: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
22288: LD_EXP 3
22292: PPUSH
22293: LD_STRING D8-Huck-2
22295: PPUSH
22296: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
22300: LD_EXP 1
22304: PPUSH
22305: LD_STRING D8-JMM-2
22307: PPUSH
22308: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
22312: LD_EXP 3
22316: PPUSH
22317: LD_STRING D8-Huck-3
22319: PPUSH
22320: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
22324: LD_EXP 1
22328: PPUSH
22329: LD_STRING D8-JMM-3
22331: PPUSH
22332: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
22336: LD_EXP 3
22340: PPUSH
22341: LD_STRING D8-Huck-4
22343: PPUSH
22344: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
22348: LD_EXP 1
22352: PPUSH
22353: LD_STRING D8-JMM-4
22355: PPUSH
22356: CALL_OW 88
// end ; if StevensStatus = 0 then
22360: LD_EXP 58
22364: PUSH
22365: LD_INT 0
22367: EQUAL
22368: IFFALSE 22480
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
22370: LD_EXP 21
22374: PPUSH
22375: CALL_OW 310
22379: PPUSH
22380: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
22384: LD_EXP 21
22388: PPUSH
22389: LD_STRING D8-Huck-1
22391: PPUSH
22392: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
22396: LD_EXP 1
22400: PPUSH
22401: LD_STRING D8-JMM-1a
22403: PPUSH
22404: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
22408: LD_EXP 21
22412: PPUSH
22413: LD_STRING D8-Huck-2
22415: PPUSH
22416: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
22420: LD_EXP 1
22424: PPUSH
22425: LD_STRING D8-JMM-2
22427: PPUSH
22428: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
22432: LD_EXP 21
22436: PPUSH
22437: LD_STRING D8-Huck-3
22439: PPUSH
22440: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
22444: LD_EXP 1
22448: PPUSH
22449: LD_STRING D8-JMM-3
22451: PPUSH
22452: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
22456: LD_EXP 21
22460: PPUSH
22461: LD_STRING D8-Huck-4
22463: PPUSH
22464: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
22468: LD_EXP 1
22472: PPUSH
22473: LD_STRING D8-JMM-4
22475: PPUSH
22476: CALL_OW 88
// end ; DialogueOff ;
22480: CALL_OW 7
// SetTech ( 1 , tech_SibFiss , state_enabled ) ;
22484: LD_INT 1
22486: PPUSH
22487: LD_INT 25
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 322
// end ;
22497: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
22498: LD_EXP 74
22502: PUSH
22503: LD_INT 73570
22505: GREATEREQUAL
22506: IFFALSE 22856
22508: GO 22510
22510: DISABLE
22511: LD_INT 0
22513: PPUSH
// begin missionStage = 4 ;
22514: LD_ADDR_EXP 75
22518: PUSH
22519: LD_INT 4
22521: ST_TO_ADDR
// DialogueOn ;
22522: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
22526: LD_EXP 28
22530: PPUSH
22531: LD_STRING D9-Roth-1
22533: PPUSH
22534: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
22538: LD_EXP 1
22542: PPUSH
22543: LD_STRING D9-JMM-1
22545: PPUSH
22546: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
22550: LD_EXP 28
22554: PPUSH
22555: LD_STRING D9-Roth-2
22557: PPUSH
22558: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
22562: LD_EXP 28
22566: PPUSH
22567: LD_STRING D9-Roth-2a
22569: PPUSH
22570: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
22574: LD_EXP 26
22578: PPUSH
22579: LD_STRING D9-Pla-2
22581: PPUSH
22582: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
22586: LD_EXP 28
22590: PPUSH
22591: LD_STRING D9-Roth-3
22593: PPUSH
22594: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
22598: LD_EXP 26
22602: PPUSH
22603: LD_STRING D9-Pla-3
22605: PPUSH
22606: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
22610: LD_EXP 28
22614: PPUSH
22615: LD_STRING D9-Roth-4
22617: PPUSH
22618: CALL_OW 94
// dec = Query ( Q9 ) ;
22622: LD_ADDR_VAR 0 1
22626: PUSH
22627: LD_STRING Q9
22629: PPUSH
22630: CALL_OW 97
22634: ST_TO_ADDR
// if dec = 1 then
22635: LD_VAR 0 1
22639: PUSH
22640: LD_INT 1
22642: EQUAL
22643: IFFALSE 22657
// SayRadio ( Roth , D9a-Roth-1 ) ;
22645: LD_EXP 28
22649: PPUSH
22650: LD_STRING D9a-Roth-1
22652: PPUSH
22653: CALL_OW 94
// if dec = 2 then
22657: LD_VAR 0 1
22661: PUSH
22662: LD_INT 2
22664: EQUAL
22665: IFFALSE 22691
// begin Say ( JMM , D9b-JMM-1 ) ;
22667: LD_EXP 1
22671: PPUSH
22672: LD_STRING D9b-JMM-1
22674: PPUSH
22675: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
22679: LD_EXP 28
22683: PPUSH
22684: LD_STRING D9b-Roth-1
22686: PPUSH
22687: CALL_OW 94
// end ; if dec = 3 then
22691: LD_VAR 0 1
22695: PUSH
22696: LD_INT 3
22698: EQUAL
22699: IFFALSE 22761
// begin Say ( JMM , D9c-JMM-1 ) ;
22701: LD_EXP 1
22705: PPUSH
22706: LD_STRING D9c-JMM-1
22708: PPUSH
22709: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
22713: LD_EXP 28
22717: PPUSH
22718: LD_STRING D9c-Roth-1
22720: PPUSH
22721: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
22725: LD_EXP 1
22729: PPUSH
22730: LD_STRING D9c-JMM-2
22732: PPUSH
22733: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
22737: LD_EXP 28
22741: PPUSH
22742: LD_STRING D9c-Roth-2
22744: PPUSH
22745: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
22749: LD_EXP 1
22753: PPUSH
22754: LD_STRING D9c-JMM-3
22756: PPUSH
22757: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
22761: LD_EXP 28
22765: PPUSH
22766: LD_STRING D9c-Roth-3
22768: PPUSH
22769: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
22773: LD_EXP 28
22777: PPUSH
22778: LD_STRING D9cont-Roth-1
22780: PPUSH
22781: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
22785: LD_EXP 1
22789: PPUSH
22790: LD_STRING D9cont-JMM-1
22792: PPUSH
22793: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
22797: LD_EXP 28
22801: PPUSH
22802: LD_STRING D9cont-Roth-2
22804: PPUSH
22805: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
22809: LD_EXP 1
22813: PPUSH
22814: LD_STRING D9cont-JMM-2
22816: PPUSH
22817: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
22821: LD_EXP 28
22825: PPUSH
22826: LD_STRING D9cont-Roth-3
22828: PPUSH
22829: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
22833: LD_EXP 1
22837: PPUSH
22838: LD_STRING D9cont-JMM-3
22840: PPUSH
22841: CALL_OW 88
// DialogueOff ;
22845: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22849: LD_STRING M3
22851: PPUSH
22852: CALL_OW 337
// end ;
22856: PPOPN 1
22858: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
22859: LD_EXP 74
22863: PUSH
22864: LD_INT 94570
22866: GREATEREQUAL
22867: IFFALSE 23186
22869: GO 22871
22871: DISABLE
// begin DialogueOn ;
22872: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
22876: LD_INT 22
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 23
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 26
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 25
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 25
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 25
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 25
22941: PUSH
22942: LD_INT 4
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 25
22951: PUSH
22952: LD_INT 5
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 25
22961: PUSH
22962: LD_INT 8
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: PPUSH
22984: CALL_OW 69
22988: PPUSH
22989: LD_STRING D11-Sol1-1
22991: PPUSH
22992: LD_STRING D5-FSol1-1
22994: PPUSH
22995: CALL 5696 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
22999: LD_EXP 26
23003: PPUSH
23004: LD_STRING D11-Pla-1
23006: PPUSH
23007: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
23011: LD_EXP 36
23015: PPUSH
23016: LD_STRING D11-Kov-1
23018: PPUSH
23019: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
23023: LD_EXP 26
23027: PPUSH
23028: LD_STRING D11-Pla-2
23030: PPUSH
23031: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
23035: LD_INT 22
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 23
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 26
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 25
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 25
23080: PUSH
23081: LD_INT 2
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 25
23100: PUSH
23101: LD_INT 4
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 25
23110: PUSH
23111: LD_INT 5
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 25
23120: PUSH
23121: LD_INT 8
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: PPUSH
23143: CALL_OW 69
23147: PPUSH
23148: LD_STRING D11-Sol1-2
23150: PPUSH
23151: LD_STRING D5-FSol1-1
23153: PPUSH
23154: CALL 5696 0 3
// Say ( JMM , D11-JMM-2 ) ;
23158: LD_EXP 1
23162: PPUSH
23163: LD_STRING D11-JMM-2
23165: PPUSH
23166: CALL_OW 88
// DialogueOff ;
23170: CALL_OW 7
// PreapreMehBehs ;
23174: CALL 4765 0 0
// missionStage = 5 ;
23178: LD_ADDR_EXP 75
23182: PUSH
23183: LD_INT 5
23185: ST_TO_ADDR
// end ;
23186: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
23187: LD_EXP 74
23191: PUSH
23192: LD_INT 105070
23194: GREATEREQUAL
23195: IFFALSE 23586
23197: GO 23199
23199: DISABLE
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
// begin time = 0 0$00 ;
23204: LD_ADDR_VAR 0 2
23208: PUSH
23209: LD_INT 0
23211: ST_TO_ADDR
// DialogueOn ;
23212: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
23216: LD_EXP 26
23220: PPUSH
23221: LD_STRING D15-Pla-1
23223: PPUSH
23224: CALL_OW 94
// dec = Query ( Q15a ) ;
23228: LD_ADDR_VAR 0 1
23232: PUSH
23233: LD_STRING Q15a
23235: PPUSH
23236: CALL_OW 97
23240: ST_TO_ADDR
// if dec = 1 then
23241: LD_VAR 0 1
23245: PUSH
23246: LD_INT 1
23248: EQUAL
23249: IFFALSE 23270
// begin Say ( JMM , D15a-JMM-1 ) ;
23251: LD_EXP 1
23255: PPUSH
23256: LD_STRING D15a-JMM-1
23258: PPUSH
23259: CALL_OW 88
// YouLost ( Surrender ) ;
23263: LD_STRING Surrender
23265: PPUSH
23266: CALL_OW 104
// end ; if dec = 2 then
23270: LD_VAR 0 1
23274: PUSH
23275: LD_INT 2
23277: EQUAL
23278: IFFALSE 23308
// begin Say ( JMM , D15b-JMM-1 ) ;
23280: LD_EXP 1
23284: PPUSH
23285: LD_STRING D15b-JMM-1
23287: PPUSH
23288: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
23292: LD_EXP 26
23296: PPUSH
23297: LD_STRING D15b-Pla-1
23299: PPUSH
23300: CALL_OW 94
// DialogueOff ;
23304: CALL_OW 7
// end ; if dec = 3 then
23308: LD_VAR 0 1
23312: PUSH
23313: LD_INT 3
23315: EQUAL
23316: IFFALSE 23389
// begin Say ( JMM , D15c-JMM-1 ) ;
23318: LD_EXP 1
23322: PPUSH
23323: LD_STRING D15c-JMM-1
23325: PPUSH
23326: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
23330: LD_EXP 26
23334: PPUSH
23335: LD_STRING D15c-Pla-1
23337: PPUSH
23338: CALL_OW 94
// DialogueOff ;
23342: CALL_OW 7
// wait ( 0 0$15 ) ;
23346: LD_INT 525
23348: PPUSH
23349: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
23353: LD_EXP 26
23357: PPUSH
23358: LD_STRING D18-Pla-1
23360: PPUSH
23361: CALL_OW 88
// SiberiteExplosion ( GetX ( JMM ) , GetY ( JMM ) ) ;
23365: LD_EXP 1
23369: PPUSH
23370: CALL_OW 250
23374: PPUSH
23375: LD_EXP 1
23379: PPUSH
23380: CALL_OW 251
23384: PPUSH
23385: CALL_OW 358
// end ; if dec = 4 then
23389: LD_VAR 0 1
23393: PUSH
23394: LD_INT 4
23396: EQUAL
23397: IFFALSE 23435
// begin Say ( JMM , D15d-JMM-1 ) ;
23399: LD_EXP 1
23403: PPUSH
23404: LD_STRING D15d-JMM-1
23406: PPUSH
23407: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
23411: LD_EXP 26
23415: PPUSH
23416: LD_STRING D15d-Pla-1
23418: PPUSH
23419: CALL_OW 94
// DialogueOff ;
23423: CALL_OW 7
// missionStage = 6 ;
23427: LD_ADDR_EXP 75
23431: PUSH
23432: LD_INT 6
23434: ST_TO_ADDR
// end ; if dec = 2 then
23435: LD_VAR 0 1
23439: PUSH
23440: LD_INT 2
23442: EQUAL
23443: IFFALSE 23516
// begin repeat wait ( 0 0$01 ) ;
23445: LD_INT 35
23447: PPUSH
23448: CALL_OW 67
// time = time + 0 0$01 ;
23452: LD_ADDR_VAR 0 2
23456: PUSH
23457: LD_VAR 0 2
23461: PUSH
23462: LD_INT 35
23464: PLUS
23465: ST_TO_ADDR
// until time >= 3 3$00 ;
23466: LD_VAR 0 2
23470: PUSH
23471: LD_INT 6300
23473: GREATEREQUAL
23474: IFFALSE 23445
// DialogueOn ;
23476: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
23480: LD_EXP 1
23484: PPUSH
23485: LD_STRING D15d-JMM-1a
23487: PPUSH
23488: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
23492: LD_EXP 26
23496: PPUSH
23497: LD_STRING D15d-Pla-1
23499: PPUSH
23500: CALL_OW 94
// DialogueOff ;
23504: CALL_OW 7
// missionStage = 6 ;
23508: LD_ADDR_EXP 75
23512: PUSH
23513: LD_INT 6
23515: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
23516: LD_EXP 37
23520: PPUSH
23521: CALL_OW 302
23525: PUSH
23526: LD_EXP 37
23530: PPUSH
23531: CALL_OW 255
23535: PUSH
23536: LD_INT 1
23538: EQUAL
23539: AND
23540: IFFALSE 23586
// begin DialogueOn ;
23542: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
23546: LD_EXP 1
23550: PPUSH
23551: LD_STRING D16-JMM-1
23553: PPUSH
23554: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
23558: LD_EXP 37
23562: PPUSH
23563: LD_STRING D16-Friend-1
23565: PPUSH
23566: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
23570: LD_EXP 1
23574: PPUSH
23575: LD_STRING D16-JMM-2
23577: PPUSH
23578: CALL_OW 88
// DialogueOff ;
23582: CALL_OW 7
// end ; end ;
23586: PPOPN 2
23588: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do
23589: LD_EXP 75
23593: PUSH
23594: LD_INT 6
23596: EQUAL
23597: PUSH
23598: LD_EXP 37
23602: PPUSH
23603: CALL_OW 302
23607: AND
23608: PUSH
23609: LD_EXP 37
23613: PPUSH
23614: CALL_OW 255
23618: PUSH
23619: LD_INT 1
23621: EQUAL
23622: AND
23623: IFFALSE 24018
23625: GO 23627
23627: DISABLE
// begin DialogueOn ;
23628: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
23632: LD_INT 22
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 2
23644: PUSH
23645: LD_INT 34
23647: PUSH
23648: LD_INT 8
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 35
23657: PUSH
23658: LD_INT 8
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PPUSH
23674: CALL_OW 69
23678: PUSH
23679: LD_INT 0
23681: GREATER
23682: IFFALSE 23698
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
23684: LD_EXP 26
23688: PPUSH
23689: LD_STRING D16c-Pla-1
23691: PPUSH
23692: CALL_OW 94
// end else
23696: GO 23883
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
23698: LD_EXP 26
23702: PPUSH
23703: LD_STRING D16a-Pla-1
23705: PPUSH
23706: CALL_OW 94
// if IsOK ( Stevens ) then
23710: LD_EXP 3
23714: PPUSH
23715: CALL_OW 302
23719: IFFALSE 23735
// begin Say ( Stevens , D16a-Huck-1 ) ;
23721: LD_EXP 3
23725: PPUSH
23726: LD_STRING D16a-Huck-1
23728: PPUSH
23729: CALL_OW 88
// end else
23733: GO 23883
// begin if IsOk ( Baker ) then
23735: LD_EXP 21
23739: PPUSH
23740: CALL_OW 302
23744: IFFALSE 23760
// begin Say ( Baker , D16a-Huck-1 ) ;
23746: LD_EXP 21
23750: PPUSH
23751: LD_STRING D16a-Huck-1
23753: PPUSH
23754: CALL_OW 88
// end else
23758: GO 23883
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
23760: LD_INT 22
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 23
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 26
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 25
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 25
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 25
23815: PUSH
23816: LD_INT 3
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 25
23825: PUSH
23826: LD_INT 4
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 25
23835: PUSH
23836: LD_INT 5
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 25
23845: PUSH
23846: LD_INT 8
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: PPUSH
23868: CALL_OW 69
23872: PPUSH
23873: LD_STRING D16a-Sol1-1
23875: PPUSH
23876: LD_STRING D5-FSol1-1
23878: PPUSH
23879: CALL 5696 0 3
// end ; end ; end ; Say ( JMM , D16a-JMM-1a ) ;
23883: LD_EXP 1
23887: PPUSH
23888: LD_STRING D16a-JMM-1a
23890: PPUSH
23891: CALL_OW 88
// DialogueOff ;
23895: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
23899: LD_EXP 37
23903: PPUSH
23904: LD_INT 3
23906: PPUSH
23907: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
23911: LD_EXP 37
23915: PPUSH
23916: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
23920: LD_EXP 37
23924: PPUSH
23925: CALL_OW 121
// wait ( 0 0$1 ) ;
23929: LD_INT 35
23931: PPUSH
23932: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
23936: LD_EXP 37
23940: PPUSH
23941: LD_INT 18
23943: PPUSH
23944: CALL_OW 113
// wait ( 0 0$3 ) ;
23948: LD_INT 105
23950: PPUSH
23951: CALL_OW 67
// DialogueOn ;
23955: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
23959: LD_EXP 1
23963: PPUSH
23964: LD_STRING D16a-JMM-1
23966: PPUSH
23967: CALL_OW 88
// DialogueOff ;
23971: CALL_OW 7
// wait ( 0 0$30 ) ;
23975: LD_INT 1050
23977: PPUSH
23978: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
23982: LD_EXP 26
23986: PPUSH
23987: LD_STRING D18-Pla-1
23989: PPUSH
23990: CALL_OW 88
// SiberiteExplosion ( GetX ( JMM ) , GetY ( JMM ) ) ;
23994: LD_EXP 1
23998: PPUSH
23999: CALL_OW 250
24003: PPUSH
24004: LD_EXP 1
24008: PPUSH
24009: CALL_OW 251
24013: PPUSH
24014: CALL_OW 358
// end ;
24018: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
24019: LD_EXP 37
24023: PPUSH
24024: CALL_OW 255
24028: PUSH
24029: LD_INT 3
24031: EQUAL
24032: IFFALSE 24139
24034: GO 24036
24036: DISABLE
24037: LD_INT 0
24039: PPUSH
// begin enable ;
24040: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
24041: LD_ADDR_VAR 0 1
24045: PUSH
24046: LD_INT 22
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 21
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 56
24068: PUSH
24069: EMPTY
24070: LIST
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: PPUSH
24077: CALL_OW 69
24081: PUSH
24082: FOR_IN
24083: IFFALSE 24137
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
24085: LD_VAR 0 1
24089: PPUSH
24090: LD_EXP 37
24094: PPUSH
24095: CALL_OW 296
24099: PUSH
24100: LD_INT 8
24102: LESS
24103: IFFALSE 24135
// begin disable ;
24105: DISABLE
// DialogueOn ;
24106: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
24110: LD_EXP 37
24114: PPUSH
24115: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
24119: LD_EXP 37
24123: PPUSH
24124: LD_STRING D16a-Friend-1
24126: PPUSH
24127: CALL_OW 88
// DialogueOff ;
24131: CALL_OW 7
// end ; end ;
24135: GO 24082
24137: POP
24138: POP
// end ;
24139: PPOPN 1
24141: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) do
24142: LD_EXP 75
24146: PUSH
24147: LD_INT 6
24149: EQUAL
24150: PUSH
24151: LD_EXP 37
24155: PPUSH
24156: CALL_OW 255
24160: NOT
24161: AND
24162: IFFALSE 24300
24164: GO 24166
24166: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
24167: LD_INT 22
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: LD_INT 34
24182: PUSH
24183: LD_INT 8
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 35
24192: PUSH
24193: LD_INT 8
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PPUSH
24209: CALL_OW 69
24213: PUSH
24214: LD_INT 0
24216: GREATER
24217: IFFALSE 24233
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
24219: LD_EXP 26
24223: PPUSH
24224: LD_STRING D16c-Pla-1
24226: PPUSH
24227: CALL_OW 94
// end else
24231: GO 24300
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
24233: LD_EXP 26
24237: PPUSH
24238: LD_STRING D16b-Pla-1
24240: PPUSH
24241: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
24245: LD_EXP 1
24249: PPUSH
24250: LD_STRING D16b-JMM-1
24252: PPUSH
24253: CALL_OW 88
// wait ( 0 0$15 ) ;
24257: LD_INT 525
24259: PPUSH
24260: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
24264: LD_EXP 26
24268: PPUSH
24269: LD_STRING D18-Pla-1
24271: PPUSH
24272: CALL_OW 88
// SiberiteExplosion ( GetX ( JMM ) , GetY ( JMM ) ) ;
24276: LD_EXP 1
24280: PPUSH
24281: CALL_OW 250
24285: PPUSH
24286: LD_EXP 1
24290: PPUSH
24291: CALL_OW 251
24295: PPUSH
24296: CALL_OW 358
// end ; end ;
24300: END
// every 0 0$1 trigger missionStage >= 5 do var i ;
24301: LD_EXP 75
24305: PUSH
24306: LD_INT 5
24308: GREATEREQUAL
24309: IFFALSE 24502
24311: GO 24313
24313: DISABLE
24314: LD_INT 0
24316: PPUSH
// begin enable ;
24317: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
24318: LD_ADDR_VAR 0 1
24322: PUSH
24323: LD_INT 22
24325: PUSH
24326: LD_INT 6
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 30
24335: PUSH
24336: LD_INT 37
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 57
24345: PUSH
24346: EMPTY
24347: LIST
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: PPUSH
24354: CALL_OW 69
24358: PUSH
24359: FOR_IN
24360: IFFALSE 24433
// begin if See ( 1 , i ) then
24362: LD_INT 1
24364: PPUSH
24365: LD_VAR 0 1
24369: PPUSH
24370: CALL_OW 292
24374: IFFALSE 24431
// begin disable ;
24376: DISABLE
// DialogueOn ;
24377: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
24381: LD_EXP 1
24385: PPUSH
24386: LD_STRING D17a-JMM-1
24388: PPUSH
24389: CALL_OW 88
// DialogueOff ;
24393: CALL_OW 7
// behemothStatus = 0 ;
24397: LD_ADDR_EXP 44
24401: PUSH
24402: LD_INT 0
24404: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
24405: LD_STRING M4a
24407: PPUSH
24408: CALL_OW 337
// wait ( 0 0$2 ) ;
24412: LD_INT 70
24414: PPUSH
24415: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
24419: LD_EXP 26
24423: PPUSH
24424: LD_STRING D18-Pla-1
24426: PPUSH
24427: CALL_OW 88
// end ; end ;
24431: GO 24359
24433: POP
24434: POP
// for i in ruBehs do
24435: LD_ADDR_VAR 0 1
24439: PUSH
24440: LD_EXP 43
24444: PUSH
24445: FOR_IN
24446: IFFALSE 24500
// begin if See ( 1 , i ) then
24448: LD_INT 1
24450: PPUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 292
24460: IFFALSE 24498
// begin disable ;
24462: DISABLE
// DialogueOn ;
24463: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
24467: LD_EXP 1
24471: PPUSH
24472: LD_STRING D17b-JMM-1
24474: PPUSH
24475: CALL_OW 88
// DialogueOff ;
24479: CALL_OW 7
// behemothStatus = 1 ;
24483: LD_ADDR_EXP 44
24487: PUSH
24488: LD_INT 1
24490: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
24491: LD_STRING M4b
24493: PPUSH
24494: CALL_OW 337
// end ; end ;
24498: GO 24445
24500: POP
24501: POP
// end ;
24502: PPOPN 1
24504: END
// every 0 0$1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) do var i , tmp , arabianArmy ;
24505: LD_EXP 26
24509: PPUSH
24510: CALL_OW 301
24514: PUSH
24515: LD_EXP 27
24519: PPUSH
24520: CALL_OW 301
24524: AND
24525: IFFALSE 25054
24527: GO 24529
24529: DISABLE
24530: LD_INT 0
24532: PPUSH
24533: PPUSH
24534: PPUSH
// begin russianAI = 0 ;
24535: LD_ADDR_EXP 67
24539: PUSH
24540: LD_INT 0
24542: ST_TO_ADDR
// russianEscape = 1 ;
24543: LD_ADDR_EXP 71
24547: PUSH
24548: LD_INT 1
24550: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
24551: LD_INT 1
24553: PPUSH
24554: LD_INT 3
24556: PPUSH
24557: LD_INT 1
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
24567: LD_ADDR_VAR 0 1
24571: PUSH
24572: LD_INT 22
24574: PUSH
24575: LD_INT 3
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 21
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PPUSH
24596: CALL_OW 69
24600: PUSH
24601: FOR_IN
24602: IFFALSE 24633
// if GetSex ( i ) = sex_male then
24604: LD_VAR 0 1
24608: PPUSH
24609: CALL_OW 258
24613: PUSH
24614: LD_INT 1
24616: EQUAL
24617: IFFALSE 24631
// begin tmp = i ;
24619: LD_ADDR_VAR 0 2
24623: PUSH
24624: LD_VAR 0 1
24628: ST_TO_ADDR
// break ;
24629: GO 24633
// end ;
24631: GO 24601
24633: POP
24634: POP
// DialogueOn ;
24635: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
24639: LD_VAR 0 2
24643: PPUSH
24644: LD_STRING DSurrenderRussians-RSol1-1a
24646: PPUSH
24647: CALL_OW 88
// DialogueOff ;
24651: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
24655: LD_INT 22
24657: PUSH
24658: LD_INT 3
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 21
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PPUSH
24679: CALL_OW 69
24683: PPUSH
24684: CALL_OW 122
// wait ( 0 0$1 ) ;
24688: LD_INT 35
24690: PPUSH
24691: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
24695: LD_INT 22
24697: PUSH
24698: LD_INT 3
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 21
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PPUSH
24719: CALL_OW 69
24723: PPUSH
24724: LD_INT 25
24726: PPUSH
24727: CALL_OW 113
// wait ( 0 0$10 ) ;
24731: LD_INT 350
24733: PPUSH
24734: CALL_OW 67
// PrepareOmarArmy ;
24738: CALL 26042 0 0
// missionStage = 7 ;
24742: LD_ADDR_EXP 75
24746: PUSH
24747: LD_INT 7
24749: ST_TO_ADDR
// DialogueOn ;
24750: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
24754: LD_EXP 32
24758: PPUSH
24759: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
24763: LD_EXP 1
24767: PPUSH
24768: LD_STRING D19-JMM-1
24770: PPUSH
24771: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
24775: LD_INT 22
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 26
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 2
24797: PUSH
24798: LD_INT 25
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 25
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 25
24820: PUSH
24821: LD_INT 3
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 25
24830: PUSH
24831: LD_INT 4
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 25
24840: PUSH
24841: LD_INT 5
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 25
24850: PUSH
24851: LD_INT 8
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: PPUSH
24872: CALL_OW 69
24876: PPUSH
24877: LD_STRING D19-Sol1-1
24879: PPUSH
24880: LD_STRING D5-FSol1-1
24882: PPUSH
24883: CALL 5696 0 3
// Say ( JMM , D19-JMM-2 ) ;
24887: LD_EXP 1
24891: PPUSH
24892: LD_STRING D19-JMM-2
24894: PPUSH
24895: CALL_OW 88
// DialogueOff ;
24899: CALL_OW 7
// LaunchMines ;
24903: CALL 25057 0 0
// wait ( 0 0$3 ) ;
24907: LD_INT 105
24909: PPUSH
24910: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: LD_INT 22
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 21
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PPUSH
24943: CALL_OW 69
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_INT 2
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 21
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 25
24970: PUSH
24971: LD_INT 4
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: PPUSH
24983: CALL_OW 69
24987: DIFF
24988: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
24989: LD_VAR 0 3
24993: PPUSH
24994: LD_INT 178
24996: PPUSH
24997: LD_INT 66
24999: PPUSH
25000: CALL_OW 114
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
25004: LD_INT 22
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 21
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 25
25026: PUSH
25027: LD_INT 4
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: PPUSH
25039: CALL_OW 69
25043: PPUSH
25044: LD_INT 177
25046: PPUSH
25047: LD_INT 69
25049: PPUSH
25050: CALL_OW 158
// end ;
25054: PPOPN 3
25056: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
25057: LD_INT 0
25059: PPUSH
25060: PPUSH
25061: PPUSH
25062: PPUSH
25063: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
25064: LD_ADDR_VAR 0 2
25068: PUSH
25069: LD_INT 168
25071: PUSH
25072: LD_INT 18
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 169
25081: PUSH
25082: LD_INT 20
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 167
25091: PUSH
25092: LD_INT 20
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 164
25101: PUSH
25102: LD_INT 18
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 164
25111: PUSH
25112: LD_INT 19
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 163
25121: PUSH
25122: LD_INT 19
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 164
25131: PUSH
25132: LD_INT 21
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 165
25141: PUSH
25142: LD_INT 21
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 163
25151: PUSH
25152: LD_INT 20
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 164
25161: PUSH
25162: LD_INT 22
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 162
25171: PUSH
25172: LD_INT 20
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
25192: LD_ADDR_VAR 0 3
25196: PUSH
25197: LD_INT 169
25199: PUSH
25200: LD_INT 34
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 169
25209: PUSH
25210: LD_INT 35
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 167
25219: PUSH
25220: LD_INT 32
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 170
25229: PUSH
25230: LD_INT 31
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 173
25239: PUSH
25240: LD_INT 35
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 174
25249: PUSH
25250: LD_INT 39
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: ST_TO_ADDR
// for i = 1 to mines_pos do
25265: LD_ADDR_VAR 0 4
25269: PUSH
25270: DOUBLE
25271: LD_INT 1
25273: DEC
25274: ST_TO_ADDR
25275: LD_VAR 0 2
25279: PUSH
25280: FOR_TO
25281: IFFALSE 25493
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
25283: LD_VAR 0 2
25287: PUSH
25288: LD_VAR 0 4
25292: ARRAY
25293: PUSH
25294: LD_INT 1
25296: ARRAY
25297: PPUSH
25298: LD_VAR 0 2
25302: PUSH
25303: LD_VAR 0 4
25307: ARRAY
25308: PUSH
25309: LD_INT 2
25311: ARRAY
25312: PPUSH
25313: LD_INT 1
25315: PPUSH
25316: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
25320: LD_INT 1
25322: PPUSH
25323: LD_INT 3
25325: PPUSH
25326: CALL_OW 12
25330: PPUSH
25331: CALL_OW 67
// if i < mines_pos then
25335: LD_VAR 0 4
25339: PUSH
25340: LD_VAR 0 2
25344: LESS
25345: IFFALSE 25383
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
25347: LD_VAR 0 2
25351: PUSH
25352: LD_VAR 0 4
25356: ARRAY
25357: PUSH
25358: LD_INT 1
25360: ARRAY
25361: PPUSH
25362: LD_VAR 0 2
25366: PUSH
25367: LD_VAR 0 4
25371: ARRAY
25372: PUSH
25373: LD_INT 2
25375: ARRAY
25376: PPUSH
25377: CALL_OW 348
25381: GO 25491
// begin for j = 1 to mines_pos1 do
25383: LD_ADDR_VAR 0 5
25387: PUSH
25388: DOUBLE
25389: LD_INT 1
25391: DEC
25392: ST_TO_ADDR
25393: LD_VAR 0 3
25397: PUSH
25398: FOR_TO
25399: IFFALSE 25455
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
25401: LD_VAR 0 3
25405: PUSH
25406: LD_VAR 0 5
25410: ARRAY
25411: PUSH
25412: LD_INT 1
25414: ARRAY
25415: PPUSH
25416: LD_VAR 0 3
25420: PUSH
25421: LD_VAR 0 5
25425: ARRAY
25426: PUSH
25427: LD_INT 2
25429: ARRAY
25430: PPUSH
25431: LD_INT 1
25433: PPUSH
25434: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
25438: LD_INT 1
25440: PPUSH
25441: LD_INT 3
25443: PPUSH
25444: CALL_OW 12
25448: PPUSH
25449: CALL_OW 67
// end ;
25453: GO 25398
25455: POP
25456: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
25457: LD_VAR 0 2
25461: PUSH
25462: LD_VAR 0 4
25466: ARRAY
25467: PUSH
25468: LD_INT 1
25470: ARRAY
25471: PPUSH
25472: LD_VAR 0 2
25476: PUSH
25477: LD_VAR 0 4
25481: ARRAY
25482: PUSH
25483: LD_INT 2
25485: ARRAY
25486: PPUSH
25487: CALL_OW 347
// end ; end ;
25491: GO 25280
25493: POP
25494: POP
// end ;
25495: LD_VAR 0 1
25499: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
25500: LD_EXP 75
25504: PUSH
25505: LD_INT 7
25507: EQUAL
25508: PUSH
25509: LD_EXP 31
25513: PPUSH
25514: CALL_OW 301
25518: AND
25519: PUSH
25520: LD_EXP 32
25524: PPUSH
25525: CALL_OW 302
25529: AND
25530: IFFALSE 25567
25532: GO 25534
25534: DISABLE
// begin DialogueOn ;
25535: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
25539: LD_EXP 1
25543: PPUSH
25544: LD_STRING D19a-JMM-1
25546: PPUSH
25547: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
25551: LD_EXP 32
25555: PPUSH
25556: LD_STRING D19a-Hke-1
25558: PPUSH
25559: CALL_OW 88
// DialogueOff ;
25563: CALL_OW 7
// end ;
25567: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
25568: LD_EXP 75
25572: PUSH
25573: LD_INT 7
25575: EQUAL
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 21
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PPUSH
25601: CALL_OW 69
25605: PUSH
25606: LD_INT 0
25608: EQUAL
25609: AND
25610: PUSH
25611: LD_INT 22
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 21
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 50
25633: PUSH
25634: EMPTY
25635: LIST
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: PPUSH
25642: CALL_OW 69
25646: PUSH
25647: LD_INT 0
25649: EQUAL
25650: AND
25651: IFFALSE 26041
25653: GO 25655
25655: DISABLE
// begin DialogueOn ;
25656: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
25660: LD_EXP 1
25664: PPUSH
25665: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
25669: LD_EXP 1
25673: PPUSH
25674: LD_STRING D20-JMM-1
25676: PPUSH
25677: CALL_OW 88
// if IsOK ( Joan ) then
25681: LD_EXP 2
25685: PPUSH
25686: CALL_OW 302
25690: IFFALSE 25704
// Say ( Joan , D20-Joan-1 ) ;
25692: LD_EXP 2
25696: PPUSH
25697: LD_STRING D20-Joan-1
25699: PPUSH
25700: CALL_OW 88
// if IsOk ( Lisa ) then
25704: LD_EXP 4
25708: PPUSH
25709: CALL_OW 302
25713: IFFALSE 25727
// Say ( Lisa , D20-Lisa-1 ) ;
25715: LD_EXP 4
25719: PPUSH
25720: LD_STRING D20-Lisa-1
25722: PPUSH
25723: CALL_OW 88
// if IsOk ( Donaldson ) then
25727: LD_EXP 5
25731: PPUSH
25732: CALL_OW 302
25736: IFFALSE 25750
// Say ( Donaldson , D20-Don-1 ) ;
25738: LD_EXP 5
25742: PPUSH
25743: LD_STRING D20-Don-1
25745: PPUSH
25746: CALL_OW 88
// if IsOK ( Cornel ) then
25750: LD_EXP 12
25754: PPUSH
25755: CALL_OW 302
25759: IFFALSE 25773
// Say ( Cornel , D20-Corn-1 ) ;
25761: LD_EXP 12
25765: PPUSH
25766: LD_STRING D20-Corn-1
25768: PPUSH
25769: CALL_OW 88
// if IsOk ( Denis ) then
25773: LD_EXP 8
25777: PPUSH
25778: CALL_OW 302
25782: IFFALSE 25796
// Say ( Denis , D20-Den-1 ) ;
25784: LD_EXP 8
25788: PPUSH
25789: LD_STRING D20-Den-1
25791: PPUSH
25792: CALL_OW 88
// if IsOk ( Bobby ) then
25796: LD_EXP 6
25800: PPUSH
25801: CALL_OW 302
25805: IFFALSE 25819
// Say ( Bobby , D20-Bobby-1 ) ;
25807: LD_EXP 6
25811: PPUSH
25812: LD_STRING D20-Bobby-1
25814: PPUSH
25815: CALL_OW 88
// if IsOk ( Gladstone ) then
25819: LD_EXP 10
25823: PPUSH
25824: CALL_OW 302
25828: IFFALSE 25842
// Say ( Gladstone , D20-Glad-1 ) ;
25830: LD_EXP 10
25834: PPUSH
25835: LD_STRING D20-Glad-1
25837: PPUSH
25838: CALL_OW 88
// if IsOk ( Cyrus ) then
25842: LD_EXP 7
25846: PPUSH
25847: CALL_OW 302
25851: IFFALSE 25865
// Say ( Cyrus , D20-Cyrus-1 ) ;
25853: LD_EXP 7
25857: PPUSH
25858: LD_STRING D20-Cyrus-1
25860: PPUSH
25861: CALL_OW 88
// if IsOk ( Stevens ) then
25865: LD_EXP 3
25869: PPUSH
25870: CALL_OW 302
25874: IFFALSE 25888
// Say ( Stevens , D20-Huck-1 ) ;
25876: LD_EXP 3
25880: PPUSH
25881: LD_STRING D20-Huck-1
25883: PPUSH
25884: CALL_OW 88
// if IsOk ( Brown ) then
25888: LD_EXP 9
25892: PPUSH
25893: CALL_OW 302
25897: IFFALSE 25911
// Say ( Brown , D20-Brown-1 ) ;
25899: LD_EXP 9
25903: PPUSH
25904: LD_STRING D20-Brown-1
25906: PPUSH
25907: CALL_OW 88
// if IsOk ( Gary ) then
25911: LD_EXP 13
25915: PPUSH
25916: CALL_OW 302
25920: IFFALSE 25934
// Say ( Gary , D20-Gary-1 ) ;
25922: LD_EXP 13
25926: PPUSH
25927: LD_STRING D20-Gary-1
25929: PPUSH
25930: CALL_OW 88
// if IsOk ( Connie ) then
25934: LD_EXP 16
25938: PPUSH
25939: CALL_OW 302
25943: IFFALSE 25957
// Say ( Connie , D20-Con-1 ) ;
25945: LD_EXP 16
25949: PPUSH
25950: LD_STRING D20-Con-1
25952: PPUSH
25953: CALL_OW 88
// if IsOk ( Kurt ) then
25957: LD_EXP 30
25961: PPUSH
25962: CALL_OW 302
25966: IFFALSE 25980
// Say ( Kurt , D20-Kurt-1 ) ;
25968: LD_EXP 30
25972: PPUSH
25973: LD_STRING D20-Kurt-1
25975: PPUSH
25976: CALL_OW 88
// if IsOk ( Kikuchi ) then
25980: LD_EXP 15
25984: PPUSH
25985: CALL_OW 302
25989: IFFALSE 26003
// Say ( Kikuchi , D20-Yam-1 ) ;
25991: LD_EXP 15
25995: PPUSH
25996: LD_STRING D20-Yam-1
25998: PPUSH
25999: CALL_OW 88
// if IsOk ( Frank ) then
26003: LD_EXP 14
26007: PPUSH
26008: CALL_OW 302
26012: IFFALSE 26026
// Say ( Frank , D20-Frank-1 ) ;
26014: LD_EXP 14
26018: PPUSH
26019: LD_STRING D20-Frank-1
26021: PPUSH
26022: CALL_OW 88
// DialogueOff ;
26026: CALL_OW 7
// GiveMedals ( MAIN ) ;
26030: LD_STRING MAIN
26032: PPUSH
26033: CALL_OW 102
// YouWin ;
26037: CALL_OW 103
// end ; end_of_file
26041: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
26042: LD_INT 0
26044: PPUSH
26045: PPUSH
26046: PPUSH
26047: PPUSH
26048: PPUSH
// uc_side = 2 ;
26049: LD_ADDR_OWVAR 20
26053: PUSH
26054: LD_INT 2
26056: ST_TO_ADDR
// uc_nation = 2 ;
26057: LD_ADDR_OWVAR 21
26061: PUSH
26062: LD_INT 2
26064: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
26065: LD_ADDR_EXP 31
26069: PUSH
26070: LD_STRING Omar
26072: PPUSH
26073: LD_INT 0
26075: PPUSH
26076: CALL 5416 0 2
26080: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
26081: LD_ADDR_EXP 32
26085: PUSH
26086: LD_STRING Heike
26088: PPUSH
26089: LD_INT 0
26091: PPUSH
26092: CALL 5416 0 2
26096: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
26097: LD_EXP 32
26101: PPUSH
26102: LD_INT 26
26104: PPUSH
26105: LD_INT 0
26107: PPUSH
26108: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
26112: LD_ADDR_VAR 0 2
26116: PUSH
26117: DOUBLE
26118: LD_INT 1
26120: DEC
26121: ST_TO_ADDR
26122: LD_INT 5
26124: PUSH
26125: LD_INT 6
26127: PUSH
26128: LD_INT 7
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: PUSH
26136: LD_OWVAR 67
26140: ARRAY
26141: PUSH
26142: FOR_TO
26143: IFFALSE 26198
// begin hc_name =  ;
26145: LD_ADDR_OWVAR 26
26149: PUSH
26150: LD_STRING 
26152: ST_TO_ADDR
// hc_gallery =  ;
26153: LD_ADDR_OWVAR 33
26157: PUSH
26158: LD_STRING 
26160: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
26161: LD_INT 0
26163: PPUSH
26164: LD_INT 8
26166: PPUSH
26167: CALL_OW 381
// un = CreateHuman ;
26171: LD_ADDR_VAR 0 3
26175: PUSH
26176: CALL_OW 44
26180: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
26181: LD_VAR 0 3
26185: PPUSH
26186: LD_INT 26
26188: PPUSH
26189: LD_INT 0
26191: PPUSH
26192: CALL_OW 49
// end ;
26196: GO 26142
26198: POP
26199: POP
// for i := 1 to 4 do
26200: LD_ADDR_VAR 0 2
26204: PUSH
26205: DOUBLE
26206: LD_INT 1
26208: DEC
26209: ST_TO_ADDR
26210: LD_INT 4
26212: PUSH
26213: FOR_TO
26214: IFFALSE 26269
// begin hc_name =  ;
26216: LD_ADDR_OWVAR 26
26220: PUSH
26221: LD_STRING 
26223: ST_TO_ADDR
// hc_gallery =  ;
26224: LD_ADDR_OWVAR 33
26228: PUSH
26229: LD_STRING 
26231: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
26232: LD_INT 0
26234: PPUSH
26235: LD_INT 8
26237: PPUSH
26238: CALL_OW 384
// un = CreateHuman ;
26242: LD_ADDR_VAR 0 3
26246: PUSH
26247: CALL_OW 44
26251: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
26252: LD_VAR 0 3
26256: PPUSH
26257: LD_INT 26
26259: PPUSH
26260: LD_INT 0
26262: PPUSH
26263: CALL_OW 49
// end ;
26267: GO 26213
26269: POP
26270: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
26271: LD_ADDR_VAR 0 2
26275: PUSH
26276: DOUBLE
26277: LD_INT 1
26279: DEC
26280: ST_TO_ADDR
26281: LD_INT 8
26283: PUSH
26284: LD_INT 9
26286: PUSH
26287: LD_INT 10
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: PUSH
26295: LD_OWVAR 67
26299: ARRAY
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26390
// begin vc_engine = 3 ;
26304: LD_ADDR_OWVAR 39
26308: PUSH
26309: LD_INT 3
26311: ST_TO_ADDR
// vc_control = 5 ;
26312: LD_ADDR_OWVAR 38
26316: PUSH
26317: LD_INT 5
26319: ST_TO_ADDR
// vc_chassis = 14 ;
26320: LD_ADDR_OWVAR 37
26324: PUSH
26325: LD_INT 14
26327: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
26328: LD_ADDR_OWVAR 40
26332: PUSH
26333: LD_INT 27
26335: PUSH
26336: LD_INT 26
26338: PUSH
26339: LD_INT 28
26341: PUSH
26342: LD_INT 25
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: PPUSH
26354: LD_INT 3
26356: PPUSH
26357: CALL_OW 12
26361: ARRAY
26362: ST_TO_ADDR
// veh = CreateVehicle ;
26363: LD_ADDR_VAR 0 4
26367: PUSH
26368: CALL_OW 45
26372: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
26373: LD_VAR 0 4
26377: PPUSH
26378: LD_INT 26
26380: PPUSH
26381: LD_INT 0
26383: PPUSH
26384: CALL_OW 49
// end ;
26388: GO 26301
26390: POP
26391: POP
// vc_chassis := 31 ;
26392: LD_ADDR_OWVAR 37
26396: PUSH
26397: LD_INT 31
26399: ST_TO_ADDR
// vc_control := control_rider ;
26400: LD_ADDR_OWVAR 38
26404: PUSH
26405: LD_INT 4
26407: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
26408: LD_ADDR_VAR 0 5
26412: PUSH
26413: CALL_OW 45
26417: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
26418: LD_VAR 0 5
26422: PPUSH
26423: LD_INT 26
26425: PPUSH
26426: LD_INT 0
26428: PPUSH
26429: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
26433: LD_EXP 31
26437: PPUSH
26438: LD_VAR 0 5
26442: PPUSH
26443: CALL_OW 52
// end ; end_of_file
26447: LD_VAR 0 1
26451: RET
// every 1 1$30 trigger missionStage > 0 do
26452: LD_EXP 75
26456: PUSH
26457: LD_INT 0
26459: GREATER
26460: IFFALSE 26487
26462: GO 26464
26464: DISABLE
// begin enable ;
26465: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26466: LD_INT 3
26468: PPUSH
26469: LD_INT 5
26471: PPUSH
26472: CALL_OW 12
26476: PPUSH
26477: LD_INT 27
26479: PPUSH
26480: LD_INT 1
26482: PPUSH
26483: CALL_OW 55
// end ;
26487: END
