// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 71
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 72
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 73
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 75
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 74
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 76
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 69
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 70
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 58
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 59
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 60
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 65
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 61
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 63
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 62
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 67
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 64
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 48
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// legionVehicles = [ ] ;
 211: LD_ADDR_EXP 49
 215: PUSH
 216: EMPTY
 217: ST_TO_ADDR
// russianVehicles = [ ] ;
 218: LD_ADDR_EXP 55
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// allianceVehicles = [ ] ;
 225: LD_ADDR_EXP 56
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 232: LD_ADDR_EXP 85
 236: PUSH
 237: EMPTY
 238: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 239: LD_ADDR_EXP 86
 243: PUSH
 244: EMPTY
 245: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 246: LD_ADDR_EXP 87
 250: PUSH
 251: EMPTY
 252: ST_TO_ADDR
// ruVehicles = [ ] ;
 253: LD_ADDR_EXP 51
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruBehMehs = [ ] ;
 260: LD_ADDR_EXP 52
 264: PUSH
 265: EMPTY
 266: ST_TO_ADDR
// ruBehs = [ ] ;
 267: LD_ADDR_EXP 53
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// missionStage = 0 ;
 274: LD_ADDR_EXP 92
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// behemothStatus = 0 ;
 282: LD_ADDR_EXP 54
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// unitLost = 0 ;
 290: LD_ADDR_EXP 90
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// LegionAI = 1 ;
 298: LD_ADDR_EXP 77
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// AllianceAI = 1 ;
 306: LD_ADDR_EXP 78
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// RussianAI = 1 ;
 314: LD_ADDR_EXP 79
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// timerStatus = 0 ;
 322: LD_ADDR_EXP 88
 326: PUSH
 327: LD_INT 0
 329: ST_TO_ADDR
// timeAction = 0 0$00 ;
 330: LD_ADDR_EXP 89
 334: PUSH
 335: LD_INT 0
 337: ST_TO_ADDR
// blockEvent1 = 0 ;
 338: LD_ADDR_EXP 93
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// debugMode = 0 ;
 346: LD_ADDR_EXP 94
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// PrepareHeroes ;
 354: CALL 710 0 0
// PrepareHeroesFromEpsilon ;
 358: CALL 1247 0 0
// PrepareRandoms ;
 362: CALL 1591 0 0
// PrepareLegion ;
 366: CALL 3599 0 0
// PrepareRussians ;
 370: CALL 3996 0 0
// PrepareAlliance ;
 374: CALL 5743 0 0
// PrepareDifficulty ;
 378: CALL 7056 0 0
// SetBName ( RuDep2 , zhukov ) ;
 382: LD_INT 23
 384: PPUSH
 385: LD_STRING zhukov
 387: PPUSH
 388: CALL_OW 500
// end ;
 392: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 393: LD_EXP 94
 397: PUSH
 398: LD_INT 1
 400: EQUAL
 401: IFFALSE 707
 403: GO 405
 405: DISABLE
 406: LD_INT 0
 408: PPUSH
// begin enable ;
 409: ENABLE
// fogoff ( true ) ;
 410: LD_INT 1
 412: PPUSH
 413: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 417: LD_ADDR_VAR 0 1
 421: PUSH
 422: LD_INT 22
 424: PUSH
 425: LD_INT 1
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PUSH
 432: LD_INT 21
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PPUSH
 446: CALL_OW 69
 450: PUSH
 451: FOR_IN
 452: IFFALSE 468
// SetLives ( i , 1000 ) ;
 454: LD_VAR 0 1
 458: PPUSH
 459: LD_INT 1000
 461: PPUSH
 462: CALL_OW 234
 466: GO 451
 468: POP
 469: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 470: LD_ADDR_VAR 0 1
 474: PUSH
 475: LD_INT 22
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: LD_INT 2
 487: PUSH
 488: LD_INT 30
 490: PUSH
 491: LD_INT 0
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: PUSH
 498: LD_INT 30
 500: PUSH
 501: LD_INT 1
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: PPUSH
 517: CALL_OW 69
 521: PUSH
 522: FOR_IN
 523: IFFALSE 547
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 525: LD_VAR 0 1
 529: PPUSH
 530: CALL_OW 274
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: LD_INT 9999
 540: PPUSH
 541: CALL_OW 277
 545: GO 522
 547: POP
 548: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 549: LD_ADDR_VAR 0 1
 553: PUSH
 554: LD_INT 22
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 2
 566: PUSH
 567: LD_INT 30
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 30
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: PPUSH
 596: CALL_OW 69
 600: PUSH
 601: FOR_IN
 602: IFFALSE 626
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 604: LD_VAR 0 1
 608: PPUSH
 609: CALL_OW 274
 613: PPUSH
 614: LD_INT 2
 616: PPUSH
 617: LD_INT 9999
 619: PPUSH
 620: CALL_OW 277
 624: GO 601
 626: POP
 627: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 628: LD_ADDR_VAR 0 1
 632: PUSH
 633: LD_INT 22
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 2
 645: PUSH
 646: LD_INT 30
 648: PUSH
 649: LD_INT 0
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 30
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PPUSH
 675: CALL_OW 69
 679: PUSH
 680: FOR_IN
 681: IFFALSE 705
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: CALL_OW 274
 692: PPUSH
 693: LD_INT 3
 695: PPUSH
 696: LD_INT 9999
 698: PPUSH
 699: CALL_OW 277
 703: GO 680
 705: POP
 706: POP
// end ; end_of_file
 707: PPOPN 1
 709: END
// export function PrepareHeroes ; begin
 710: LD_INT 0
 712: PPUSH
// uc_side = 1 ;
 713: LD_ADDR_OWVAR 20
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// uc_nation = 1 ;
 721: LD_ADDR_OWVAR 21
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// if JMMVeh = [ ] then
 729: LD_EXP 71
 733: PUSH
 734: EMPTY
 735: EQUAL
 736: IFFALSE 782
// begin vc_engine = 3 ;
 738: LD_ADDR_OWVAR 39
 742: PUSH
 743: LD_INT 3
 745: ST_TO_ADDR
// vc_control = 1 ;
 746: LD_ADDR_OWVAR 38
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// vc_chassis = 5 ;
 754: LD_ADDR_OWVAR 37
 758: PUSH
 759: LD_INT 5
 761: ST_TO_ADDR
// vc_weapon = 9 ;
 762: LD_ADDR_OWVAR 40
 766: PUSH
 767: LD_INT 9
 769: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 770: LD_ADDR_EXP 24
 774: PUSH
 775: CALL_OW 45
 779: ST_TO_ADDR
// end else
 780: GO 864
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 782: LD_ADDR_OWVAR 37
 786: PUSH
 787: LD_EXP 71
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 800: LD_ADDR_OWVAR 39
 804: PUSH
 805: LD_EXP 71
 809: PUSH
 810: LD_INT 2
 812: ARRAY
 813: PUSH
 814: LD_INT 1
 816: ARRAY
 817: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 818: LD_ADDR_OWVAR 38
 822: PUSH
 823: LD_EXP 71
 827: PUSH
 828: LD_INT 3
 830: ARRAY
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 836: LD_ADDR_OWVAR 40
 840: PUSH
 841: LD_EXP 71
 845: PUSH
 846: LD_INT 4
 848: ARRAY
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 854: LD_ADDR_EXP 24
 858: PUSH
 859: CALL_OW 45
 863: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 864: LD_EXP 72
 868: PUSH
 869: EMPTY
 870: EQUAL
 871: NOT
 872: IFFALSE 956
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 874: LD_ADDR_OWVAR 37
 878: PUSH
 879: LD_EXP 72
 883: PUSH
 884: LD_INT 1
 886: ARRAY
 887: PUSH
 888: LD_INT 1
 890: ARRAY
 891: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 892: LD_ADDR_OWVAR 39
 896: PUSH
 897: LD_EXP 72
 901: PUSH
 902: LD_INT 2
 904: ARRAY
 905: PUSH
 906: LD_INT 1
 908: ARRAY
 909: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 910: LD_ADDR_OWVAR 38
 914: PUSH
 915: LD_EXP 72
 919: PUSH
 920: LD_INT 3
 922: ARRAY
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 928: LD_ADDR_OWVAR 40
 932: PUSH
 933: LD_EXP 72
 937: PUSH
 938: LD_INT 4
 940: ARRAY
 941: PUSH
 942: LD_INT 1
 944: ARRAY
 945: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 946: LD_ADDR_EXP 25
 950: PUSH
 951: CALL_OW 45
 955: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 956: LD_EXP 24
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 968: LD_EXP 25
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 980: LD_EXP 24
 984: PPUSH
 985: LD_INT 99
 987: PPUSH
 988: LD_INT 154
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 48
// if JMMGirlVeh then
 998: LD_EXP 72
1002: IFFALSE 1022
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1004: LD_EXP 25
1008: PPUSH
1009: LD_INT 98
1011: PPUSH
1012: LD_INT 159
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_STRING 14_JMM
1029: PPUSH
1030: LD_INT 1
1032: PPUSH
1033: CALL 6144 0 2
1037: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1038: LD_EXP 1
1042: PPUSH
1043: LD_EXP 24
1047: PPUSH
1048: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1052: LD_EXP 72
1056: PUSH
1057: EMPTY
1058: EQUAL
1059: NOT
1060: IFFALSE 1182
// begin if JMMGirl = 1 then
1062: LD_EXP 73
1066: PUSH
1067: LD_INT 1
1069: EQUAL
1070: IFFALSE 1102
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1072: LD_ADDR_EXP 2
1076: PUSH
1077: LD_STRING 14_Joan
1079: PPUSH
1080: LD_INT 1
1082: PPUSH
1083: CALL 6144 0 2
1087: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1088: LD_EXP 2
1092: PPUSH
1093: LD_EXP 25
1097: PPUSH
1098: CALL_OW 52
// end ; if JMMGirl = 2 then
1102: LD_EXP 73
1106: PUSH
1107: LD_INT 2
1109: EQUAL
1110: IFFALSE 1142
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1112: LD_ADDR_EXP 4
1116: PUSH
1117: LD_STRING 14_Lisa
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: CALL 6144 0 2
1127: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1128: LD_EXP 4
1132: PPUSH
1133: LD_EXP 25
1137: PPUSH
1138: CALL_OW 52
// end ; if JMMGirl = 3 then
1142: LD_EXP 73
1146: PUSH
1147: LD_INT 3
1149: EQUAL
1150: IFFALSE 1182
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1152: LD_ADDR_EXP 16
1156: PUSH
1157: LD_STRING 14_Connie
1159: PPUSH
1160: LD_INT 1
1162: PPUSH
1163: CALL 6144 0 2
1167: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1168: LD_EXP 16
1172: PPUSH
1173: LD_EXP 25
1177: PPUSH
1178: CALL_OW 52
// end ; end ; uc_side = 4 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 4
1189: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1190: LD_ADDR_EXP 17
1194: PUSH
1195: LD_STRING Powell
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 6144 0 2
1205: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1206: LD_EXP 17
1210: PPUSH
1211: LD_INT 42
1213: PPUSH
1214: LD_INT 62
1216: PPUSH
1217: LD_INT 5
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1227: LD_EXP 17
1231: PPUSH
1232: LD_INT 43
1234: PPUSH
1235: LD_INT 63
1237: PPUSH
1238: CALL_OW 118
// end ;
1242: LD_VAR 0 1
1246: RET
// export function PrepareHeroesFromEpsilon ; begin
1247: LD_INT 0
1249: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1250: LD_ADDR_EXP 4
1254: PUSH
1255: LD_STRING Lisa
1257: PPUSH
1258: CALL 6201 0 1
1262: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1263: LD_ADDR_EXP 5
1267: PUSH
1268: LD_STRING Donaldson
1270: PPUSH
1271: CALL 6201 0 1
1275: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1276: LD_ADDR_EXP 6
1280: PUSH
1281: LD_STRING Bobby
1283: PPUSH
1284: CALL 6201 0 1
1288: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1289: LD_ADDR_EXP 7
1293: PUSH
1294: LD_STRING Cyrus
1296: PPUSH
1297: CALL 6201 0 1
1301: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1302: LD_ADDR_EXP 8
1306: PUSH
1307: LD_STRING Denis
1309: PPUSH
1310: CALL 6201 0 1
1314: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1315: LD_ADDR_EXP 9
1319: PUSH
1320: LD_STRING Brown
1322: PPUSH
1323: CALL 6201 0 1
1327: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1328: LD_ADDR_EXP 10
1332: PUSH
1333: LD_STRING Gladstone
1335: PPUSH
1336: CALL 6201 0 1
1340: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1341: LD_ADDR_EXP 11
1345: PUSH
1346: LD_STRING Houten
1348: PPUSH
1349: CALL 6201 0 1
1353: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1354: LD_ADDR_EXP 12
1358: PUSH
1359: LD_STRING Cornel
1361: PPUSH
1362: CALL 6201 0 1
1366: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_STRING Gary
1374: PPUSH
1375: CALL 6201 0 1
1379: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1380: LD_ADDR_EXP 14
1384: PUSH
1385: LD_STRING Frank
1387: PPUSH
1388: CALL 6201 0 1
1392: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1393: LD_ADDR_EXP 15
1397: PUSH
1398: LD_STRING Kikuchi
1400: PPUSH
1401: CALL 6201 0 1
1405: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1406: LD_EXP 4
1410: PPUSH
1411: LD_INT 6
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1421: LD_EXP 5
1425: PPUSH
1426: LD_INT 6
1428: PPUSH
1429: LD_INT 0
1431: PPUSH
1432: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1436: LD_EXP 6
1440: PPUSH
1441: LD_INT 6
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1451: LD_EXP 7
1455: PPUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1466: LD_EXP 8
1470: PPUSH
1471: LD_INT 6
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1481: LD_EXP 9
1485: PPUSH
1486: LD_INT 6
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1496: LD_EXP 10
1500: PPUSH
1501: LD_INT 6
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1511: LD_EXP 11
1515: PPUSH
1516: LD_INT 6
1518: PPUSH
1519: LD_INT 0
1521: PPUSH
1522: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1526: LD_EXP 12
1530: PPUSH
1531: LD_INT 6
1533: PPUSH
1534: LD_INT 0
1536: PPUSH
1537: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1541: LD_EXP 13
1545: PPUSH
1546: LD_INT 6
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1556: LD_EXP 14
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1571: LD_EXP 15
1575: PPUSH
1576: LD_INT 6
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 49
// end ;
1586: LD_VAR 0 1
1590: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1591: LD_INT 0
1593: PPUSH
1594: PPUSH
1595: PPUSH
1596: PPUSH
1597: PPUSH
// uc_side = 4 ;
1598: LD_ADDR_OWVAR 20
1602: PUSH
1603: LD_INT 4
1605: ST_TO_ADDR
// uc_nation = 1 ;
1606: LD_ADDR_OWVAR 21
1610: PUSH
1611: LD_INT 1
1613: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1614: LD_ADDR_EXP 18
1618: PUSH
1619: LD_STRING 13s_others
1621: PPUSH
1622: CALL_OW 31
1626: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1627: LD_ADDR_VAR 0 4
1631: PUSH
1632: LD_INT 22
1634: PUSH
1635: LD_INT 4
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 21
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PPUSH
1656: CALL_OW 69
1660: PUSH
1661: LD_EXP 17
1665: PUSH
1666: EMPTY
1667: LIST
1668: DIFF
1669: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1670: LD_ADDR_VAR 0 5
1674: PUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 6331 0 1
1684: ST_TO_ADDR
// if others13 >= 8 then
1685: LD_EXP 18
1689: PUSH
1690: LD_INT 8
1692: GREATEREQUAL
1693: IFFALSE 1754
// begin for i = 1 to 8 do
1695: LD_ADDR_VAR 0 2
1699: PUSH
1700: DOUBLE
1701: LD_INT 1
1703: DEC
1704: ST_TO_ADDR
1705: LD_INT 8
1707: PUSH
1708: FOR_TO
1709: IFFALSE 1750
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1711: LD_EXP 18
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_INT 6
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1730: LD_ADDR_EXP 18
1734: PUSH
1735: LD_EXP 18
1739: PPUSH
1740: LD_INT 1
1742: PPUSH
1743: CALL_OW 3
1747: ST_TO_ADDR
// end ;
1748: GO 1708
1750: POP
1751: POP
// end else
1752: GO 1813
// begin for i = 1 to others13 do
1754: LD_ADDR_VAR 0 2
1758: PUSH
1759: DOUBLE
1760: LD_INT 1
1762: DEC
1763: ST_TO_ADDR
1764: LD_EXP 18
1768: PUSH
1769: FOR_TO
1770: IFFALSE 1811
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1772: LD_EXP 18
1776: PUSH
1777: LD_INT 1
1779: ARRAY
1780: PPUSH
1781: LD_INT 6
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1791: LD_ADDR_EXP 18
1795: PUSH
1796: LD_EXP 18
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: CALL_OW 3
1808: ST_TO_ADDR
// end ;
1809: GO 1769
1811: POP
1812: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1813: LD_ADDR_VAR 0 4
1817: PUSH
1818: LD_INT 22
1820: PUSH
1821: LD_INT 4
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 21
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 69
1846: PUSH
1847: LD_EXP 17
1851: PUSH
1852: EMPTY
1853: LIST
1854: DIFF
1855: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1856: LD_ADDR_VAR 0 5
1860: PUSH
1861: LD_VAR 0 4
1865: PPUSH
1866: CALL 6331 0 1
1870: ST_TO_ADDR
// if others13 >= 6 then
1871: LD_EXP 18
1875: PUSH
1876: LD_INT 6
1878: GREATEREQUAL
1879: IFFALSE 1940
// begin for i = 1 to 6 do
1881: LD_ADDR_VAR 0 2
1885: PUSH
1886: DOUBLE
1887: LD_INT 1
1889: DEC
1890: ST_TO_ADDR
1891: LD_INT 6
1893: PUSH
1894: FOR_TO
1895: IFFALSE 1936
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1897: LD_EXP 18
1901: PUSH
1902: LD_INT 1
1904: ARRAY
1905: PPUSH
1906: LD_INT 6
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1916: LD_ADDR_EXP 18
1920: PUSH
1921: LD_EXP 18
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 3
1933: ST_TO_ADDR
// end ;
1934: GO 1894
1936: POP
1937: POP
// end else
1938: GO 1999
// begin for i = 1 to others13 do
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: DOUBLE
1946: LD_INT 1
1948: DEC
1949: ST_TO_ADDR
1950: LD_EXP 18
1954: PUSH
1955: FOR_TO
1956: IFFALSE 1997
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1958: LD_EXP 18
1962: PUSH
1963: LD_INT 1
1965: ARRAY
1966: PPUSH
1967: LD_INT 6
1969: PPUSH
1970: LD_INT 0
1972: PPUSH
1973: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1977: LD_ADDR_EXP 18
1981: PUSH
1982: LD_EXP 18
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 3
1994: ST_TO_ADDR
// end ;
1995: GO 1955
1997: POP
1998: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1999: LD_ADDR_VAR 0 4
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 4
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_EXP 17
2037: PUSH
2038: EMPTY
2039: LIST
2040: DIFF
2041: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2042: LD_ADDR_VAR 0 5
2046: PUSH
2047: LD_VAR 0 4
2051: PPUSH
2052: CALL 6331 0 1
2056: ST_TO_ADDR
// if heroLenght < 19 then
2057: LD_VAR 0 5
2061: PUSH
2062: LD_INT 19
2064: LESS
2065: IFFALSE 2163
// for i = 1 to 19 - heroLenght do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_INT 19
2079: PUSH
2080: LD_VAR 0 5
2084: MINUS
2085: PUSH
2086: FOR_TO
2087: IFFALSE 2161
// begin hc_gallery =  ;
2089: LD_ADDR_OWVAR 33
2093: PUSH
2094: LD_STRING 
2096: ST_TO_ADDR
// hc_name =  ;
2097: LD_ADDR_OWVAR 26
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2105: LD_INT 0
2107: PPUSH
2108: LD_INT 1
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: LD_INT 6
2121: PPUSH
2122: LD_INT 8
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2144: LD_VAR 0 3
2148: PPUSH
2149: LD_INT 6
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
// end ;
2159: GO 2086
2161: POP
2162: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2163: LD_ADDR_VAR 0 4
2167: PUSH
2168: LD_INT 22
2170: PUSH
2171: LD_INT 4
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 21
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PPUSH
2192: CALL_OW 69
2196: PUSH
2197: LD_EXP 17
2201: PUSH
2202: LD_EXP 1
2206: PUSH
2207: LD_EXP 2
2211: PUSH
2212: LD_EXP 3
2216: PUSH
2217: LD_EXP 4
2221: PUSH
2222: LD_EXP 5
2226: PUSH
2227: LD_EXP 6
2231: PUSH
2232: LD_EXP 7
2236: PUSH
2237: LD_EXP 8
2241: PUSH
2242: LD_EXP 9
2246: PUSH
2247: LD_EXP 10
2251: PUSH
2252: LD_EXP 11
2256: PUSH
2257: LD_EXP 12
2261: PUSH
2262: LD_EXP 13
2266: PUSH
2267: LD_EXP 14
2271: PUSH
2272: LD_EXP 15
2276: PUSH
2277: LD_EXP 16
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: DIFF
2301: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2302: LD_ADDR_EXP 58
2306: PUSH
2307: LD_VAR 0 4
2311: PPUSH
2312: LD_INT 1
2314: PPUSH
2315: CALL 6689 0 2
2319: ST_TO_ADDR
// for i = 1 to 8 do
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 8
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2364
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2336: LD_ADDR_EXP 59
2340: PUSH
2341: LD_EXP 59
2345: PUSH
2346: LD_EXP 58
2350: PUSH
2351: LD_VAR 0 2
2355: ARRAY
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: ADD
2361: ST_TO_ADDR
2362: GO 2333
2364: POP
2365: POP
// SetClass ( amUnitsAttack , 1 ) ;
2366: LD_EXP 59
2370: PPUSH
2371: LD_INT 1
2373: PPUSH
2374: CALL_OW 336
// end ;
2378: LD_VAR 0 1
2382: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2383: LD_INT 0
2385: PPUSH
2386: PPUSH
2387: PPUSH
// uc_side = 1 ;
2388: LD_ADDR_OWVAR 20
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// uc_nation = 1 ;
2396: LD_ADDR_OWVAR 21
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// for i := 1 to 5 do
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: DOUBLE
2410: LD_INT 1
2412: DEC
2413: ST_TO_ADDR
2414: LD_INT 5
2416: PUSH
2417: FOR_TO
2418: IFFALSE 2502
// begin vc_engine = 3 ;
2420: LD_ADDR_OWVAR 39
2424: PUSH
2425: LD_INT 3
2427: ST_TO_ADDR
// vc_control = 3 ;
2428: LD_ADDR_OWVAR 38
2432: PUSH
2433: LD_INT 3
2435: ST_TO_ADDR
// vc_chassis = 3 ;
2436: LD_ADDR_OWVAR 37
2440: PUSH
2441: LD_INT 3
2443: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 5
2451: PUSH
2452: LD_INT 9
2454: PUSH
2455: LD_INT 7
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_INT 1
2465: PPUSH
2466: LD_INT 3
2468: PPUSH
2469: CALL_OW 12
2473: ARRAY
2474: ST_TO_ADDR
// veh = CreateVehicle ;
2475: LD_ADDR_VAR 0 3
2479: PUSH
2480: CALL_OW 45
2484: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2485: LD_VAR 0 3
2489: PPUSH
2490: LD_INT 14
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// end ;
2500: GO 2417
2502: POP
2503: POP
// vc_engine = 3 ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 3
2511: ST_TO_ADDR
// vc_control = 1 ;
2512: LD_ADDR_OWVAR 38
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// vc_chassis = 3 ;
2520: LD_ADDR_OWVAR 37
2524: PUSH
2525: LD_INT 3
2527: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2528: LD_ADDR_OWVAR 40
2532: PUSH
2533: LD_INT 5
2535: PUSH
2536: LD_INT 9
2538: PUSH
2539: LD_INT 7
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 3
2552: PPUSH
2553: CALL_OW 12
2557: ARRAY
2558: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2559: LD_ADDR_EXP 25
2563: PUSH
2564: CALL_OW 45
2568: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2569: LD_EXP 25
2573: PPUSH
2574: LD_INT 14
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// if JMMGirl = 1 then
2584: LD_EXP 73
2588: PUSH
2589: LD_INT 1
2591: EQUAL
2592: IFFALSE 2645
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2594: LD_ADDR_EXP 2
2598: PUSH
2599: LD_STRING 14_Joan
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL 6144 0 2
2609: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2610: LD_EXP 2
2614: PPUSH
2615: LD_EXP 25
2619: PPUSH
2620: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2624: LD_EXP 25
2628: PPUSH
2629: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2633: LD_EXP 2
2637: PPUSH
2638: LD_STRING D10BW-Joan-1
2640: PPUSH
2641: CALL_OW 88
// end ; if JMMGirl = 2 then
2645: LD_EXP 73
2649: PUSH
2650: LD_INT 2
2652: EQUAL
2653: IFFALSE 2706
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2655: LD_ADDR_EXP 4
2659: PUSH
2660: LD_STRING 14_Lisa
2662: PPUSH
2663: LD_INT 1
2665: PPUSH
2666: CALL 6144 0 2
2670: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2671: LD_EXP 4
2675: PPUSH
2676: LD_EXP 25
2680: PPUSH
2681: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2685: LD_EXP 25
2689: PPUSH
2690: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2694: LD_EXP 4
2698: PPUSH
2699: LD_STRING D10BW-Lisa-1
2701: PPUSH
2702: CALL_OW 88
// end ; if JMMGirl = 3 then
2706: LD_EXP 73
2710: PUSH
2711: LD_INT 3
2713: EQUAL
2714: IFFALSE 2767
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2716: LD_ADDR_EXP 16
2720: PUSH
2721: LD_STRING 14_Connie
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL 6144 0 2
2731: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2732: LD_EXP 16
2736: PPUSH
2737: LD_EXP 25
2741: PPUSH
2742: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2746: LD_EXP 25
2750: PPUSH
2751: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2755: LD_EXP 4
2759: PPUSH
2760: LD_STRING D10BW-Con-1
2762: PPUSH
2763: CALL_OW 88
// end ; end ;
2767: LD_VAR 0 1
2771: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles ; begin
2772: LD_INT 0
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
// uc_side = 1 ;
2781: LD_ADDR_OWVAR 20
2785: PUSH
2786: LD_INT 1
2788: ST_TO_ADDR
// uc_nation = 1 ;
2789: LD_ADDR_OWVAR 21
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// omegaVeh = [ ] ;
2797: LD_ADDR_VAR 0 3
2801: PUSH
2802: EMPTY
2803: ST_TO_ADDR
// if TestCharacters ( 13_Lisa ) = false then
2804: LD_STRING 13_Lisa
2806: PPUSH
2807: CALL_OW 28
2811: PUSH
2812: LD_INT 0
2814: EQUAL
2815: IFFALSE 2830
// Lisa = PrepareUnitOmega ( Lisa ) ;
2817: LD_ADDR_EXP 4
2821: PUSH
2822: LD_STRING Lisa
2824: PPUSH
2825: CALL 6258 0 1
2829: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2830: LD_STRING 13s_Donaldson
2832: PPUSH
2833: CALL_OW 28
2837: PUSH
2838: LD_INT 0
2840: EQUAL
2841: IFFALSE 2856
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2843: LD_ADDR_EXP 5
2847: PUSH
2848: LD_STRING Donaldson
2850: PPUSH
2851: CALL 6258 0 1
2855: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2856: LD_STRING 13s_Bobby
2858: PPUSH
2859: CALL_OW 28
2863: PUSH
2864: LD_INT 0
2866: EQUAL
2867: IFFALSE 2882
// Bobby = PrepareUnitOmega ( Bobby ) ;
2869: LD_ADDR_EXP 6
2873: PUSH
2874: LD_STRING Bobby
2876: PPUSH
2877: CALL 6258 0 1
2881: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2882: LD_STRING 13s_Cyrus
2884: PPUSH
2885: CALL_OW 28
2889: PUSH
2890: LD_INT 0
2892: EQUAL
2893: IFFALSE 2908
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2895: LD_ADDR_EXP 7
2899: PUSH
2900: LD_STRING Cyrus
2902: PPUSH
2903: CALL 6258 0 1
2907: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2908: LD_STRING 13s_Denis
2910: PPUSH
2911: CALL_OW 28
2915: PUSH
2916: LD_INT 0
2918: EQUAL
2919: IFFALSE 2934
// Denis = PrepareUnitOmega ( Denis ) ;
2921: LD_ADDR_EXP 8
2925: PUSH
2926: LD_STRING Denis
2928: PPUSH
2929: CALL 6258 0 1
2933: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2934: LD_STRING 13s_Brown
2936: PPUSH
2937: CALL_OW 28
2941: PUSH
2942: LD_INT 0
2944: EQUAL
2945: IFFALSE 2960
// Brown = PrepareUnitOmega ( Brown ) ;
2947: LD_ADDR_EXP 9
2951: PUSH
2952: LD_STRING Brown
2954: PPUSH
2955: CALL 6258 0 1
2959: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2960: LD_STRING 13s_Gladstone
2962: PPUSH
2963: CALL_OW 28
2967: PUSH
2968: LD_INT 0
2970: EQUAL
2971: IFFALSE 2986
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2973: LD_ADDR_EXP 10
2977: PUSH
2978: LD_STRING Gladstone
2980: PPUSH
2981: CALL 6258 0 1
2985: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
2986: LD_STRING 13s_Houten
2988: PPUSH
2989: CALL_OW 28
2993: PUSH
2994: LD_INT 0
2996: EQUAL
2997: IFFALSE 3012
// Houten = PrepareUnitOmega ( Houten ) ;
2999: LD_ADDR_EXP 11
3003: PUSH
3004: LD_STRING Houten
3006: PPUSH
3007: CALL 6258 0 1
3011: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
3012: LD_STRING 13s_Cornel
3014: PPUSH
3015: CALL_OW 28
3019: PUSH
3020: LD_INT 0
3022: EQUAL
3023: IFFALSE 3038
// Cornel = PrepareUnitOmega ( Cornel ) ;
3025: LD_ADDR_EXP 12
3029: PUSH
3030: LD_STRING Cornel
3032: PPUSH
3033: CALL 6258 0 1
3037: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3038: LD_STRING 13s_Gary
3040: PPUSH
3041: CALL_OW 28
3045: PUSH
3046: LD_INT 0
3048: EQUAL
3049: IFFALSE 3064
// Gary = PrepareUnitOmega ( Gary ) ;
3051: LD_ADDR_EXP 13
3055: PUSH
3056: LD_STRING Gary
3058: PPUSH
3059: CALL 6258 0 1
3063: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3064: LD_STRING 13s_Frank
3066: PPUSH
3067: CALL_OW 28
3071: PUSH
3072: LD_INT 0
3074: EQUAL
3075: IFFALSE 3090
// Frank = PrepareUnitOmega ( Frank ) ;
3077: LD_ADDR_EXP 14
3081: PUSH
3082: LD_STRING Frank
3084: PPUSH
3085: CALL 6258 0 1
3089: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3090: LD_STRING 13s_Kikuchi
3092: PPUSH
3093: CALL_OW 28
3097: PUSH
3098: LD_INT 0
3100: EQUAL
3101: IFFALSE 3116
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3103: LD_ADDR_EXP 15
3107: PUSH
3108: LD_STRING Kikuchi
3110: PPUSH
3111: CALL 6258 0 1
3115: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3116: LD_STRING 13s_Kikuchi
3118: PPUSH
3119: CALL_OW 28
3123: PUSH
3124: LD_INT 0
3126: EQUAL
3127: IFFALSE 3142
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3129: LD_ADDR_EXP 15
3133: PUSH
3134: LD_STRING Kikuchi
3136: PPUSH
3137: CALL 6258 0 1
3141: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3142: LD_ADDR_EXP 22
3146: PUSH
3147: LD_STRING Gordon
3149: PPUSH
3150: CALL 6258 0 1
3154: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3155: LD_ADDR_EXP 23
3159: PUSH
3160: LD_STRING Peter
3162: PPUSH
3163: CALL 6258 0 1
3167: ST_TO_ADDR
// if StevensStatus = 1 then
3168: LD_EXP 70
3172: PUSH
3173: LD_INT 1
3175: EQUAL
3176: IFFALSE 3193
// Stevens = PrepareUnitOmega ( Stevens ) else
3178: LD_ADDR_EXP 3
3182: PUSH
3183: LD_STRING Stevens
3185: PPUSH
3186: CALL 6258 0 1
3190: ST_TO_ADDR
3191: GO 3206
// Baker = PrepareUnitOmega ( Baker ) ;
3193: LD_ADDR_EXP 21
3197: PUSH
3198: LD_STRING Baker
3200: PPUSH
3201: CALL 6258 0 1
3205: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3206: LD_ADDR_EXP 19
3210: PUSH
3211: LD_STRING 15_other_survivors
3213: PPUSH
3214: CALL_OW 31
3218: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3219: LD_ADDR_VAR 0 7
3223: PUSH
3224: LD_STRING 15_Vehicles_1
3226: PPUSH
3227: EMPTY
3228: PPUSH
3229: CALL_OW 30
3233: ST_TO_ADDR
// for i := 1 to vehicles do
3234: LD_ADDR_VAR 0 2
3238: PUSH
3239: DOUBLE
3240: LD_INT 1
3242: DEC
3243: ST_TO_ADDR
3244: LD_VAR 0 7
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3475
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3252: LD_ADDR_OWVAR 21
3256: PUSH
3257: LD_VAR 0 7
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_INT 1
3270: ARRAY
3271: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3272: LD_ADDR_OWVAR 37
3276: PUSH
3277: LD_VAR 0 7
3281: PUSH
3282: LD_VAR 0 2
3286: ARRAY
3287: PUSH
3288: LD_INT 2
3290: ARRAY
3291: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3292: LD_ADDR_OWVAR 39
3296: PUSH
3297: LD_VAR 0 7
3301: PUSH
3302: LD_VAR 0 2
3306: ARRAY
3307: PUSH
3308: LD_INT 3
3310: ARRAY
3311: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3312: LD_ADDR_OWVAR 38
3316: PUSH
3317: LD_VAR 0 7
3321: PUSH
3322: LD_VAR 0 2
3326: ARRAY
3327: PUSH
3328: LD_INT 4
3330: ARRAY
3331: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3332: LD_ADDR_OWVAR 40
3336: PUSH
3337: LD_VAR 0 7
3341: PUSH
3342: LD_VAR 0 2
3346: ARRAY
3347: PUSH
3348: LD_INT 5
3350: ARRAY
3351: ST_TO_ADDR
// if vc_weapon = 8 then
3352: LD_OWVAR 40
3356: PUSH
3357: LD_INT 8
3359: EQUAL
3360: IFFALSE 3372
// vc_weapon = 9 else
3362: LD_ADDR_OWVAR 40
3366: PUSH
3367: LD_INT 9
3369: ST_TO_ADDR
3370: GO 3392
// vc_weapon = vehicles [ i ] [ 5 ] ;
3372: LD_ADDR_OWVAR 40
3376: PUSH
3377: LD_VAR 0 7
3381: PUSH
3382: LD_VAR 0 2
3386: ARRAY
3387: PUSH
3388: LD_INT 5
3390: ARRAY
3391: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3392: LD_ADDR_OWVAR 41
3396: PUSH
3397: LD_INT 40
3399: ST_TO_ADDR
// veh = CreateVehicle ;
3400: LD_ADDR_VAR 0 5
3404: PUSH
3405: CALL_OW 45
3409: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3410: LD_VAR 0 5
3414: PPUSH
3415: LD_INT 5
3417: PPUSH
3418: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3422: LD_VAR 0 5
3426: PPUSH
3427: LD_INT 300
3429: PPUSH
3430: LD_INT 800
3432: PPUSH
3433: CALL_OW 12
3437: PPUSH
3438: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3442: LD_ADDR_VAR 0 3
3446: PUSH
3447: LD_VAR 0 3
3451: PUSH
3452: LD_VAR 0 5
3456: ADD
3457: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3458: LD_VAR 0 5
3462: PPUSH
3463: LD_INT 16
3465: PPUSH
3466: LD_INT 0
3468: PPUSH
3469: CALL_OW 49
// end ;
3473: GO 3249
3475: POP
3476: POP
// for i := 1 to heroesFromOmega do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: DOUBLE
3483: LD_INT 1
3485: DEC
3486: ST_TO_ADDR
3487: LD_EXP 20
3491: PUSH
3492: FOR_TO
3493: IFFALSE 3523
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3495: LD_EXP 20
3499: PUSH
3500: LD_VAR 0 2
3504: ARRAY
3505: PPUSH
3506: LD_VAR 0 3
3510: PUSH
3511: LD_VAR 0 2
3515: ARRAY
3516: PPUSH
3517: CALL_OW 52
// end ;
3521: GO 3492
3523: POP
3524: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3525: LD_ADDR_VAR 0 6
3529: PUSH
3530: LD_VAR 0 3
3534: PPUSH
3535: LD_INT 58
3537: PUSH
3538: EMPTY
3539: LIST
3540: PPUSH
3541: CALL_OW 72
3545: ST_TO_ADDR
// for i := 1 to others13Omega do
3546: LD_ADDR_VAR 0 2
3550: PUSH
3551: DOUBLE
3552: LD_INT 1
3554: DEC
3555: ST_TO_ADDR
3556: LD_EXP 19
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3592
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3564: LD_EXP 19
3568: PUSH
3569: LD_VAR 0 2
3573: ARRAY
3574: PPUSH
3575: LD_VAR 0 6
3579: PUSH
3580: LD_VAR 0 2
3584: ARRAY
3585: PPUSH
3586: CALL_OW 52
// end ;
3590: GO 3561
3592: POP
3593: POP
// end ; end_of_file
3594: LD_VAR 0 1
3598: RET
// export function PrepareLegion ; var i ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
// uc_side = 8 ;
3603: LD_ADDR_OWVAR 20
3607: PUSH
3608: LD_INT 8
3610: ST_TO_ADDR
// uc_nation = 2 ;
3611: LD_ADDR_OWVAR 21
3615: PUSH
3616: LD_INT 2
3618: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3619: LD_ADDR_EXP 30
3623: PUSH
3624: LD_STRING Kurt
3626: PPUSH
3627: LD_INT 0
3629: PPUSH
3630: CALL 6144 0 2
3634: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3635: LD_ADDR_EXP 35
3639: PUSH
3640: LD_STRING Kozlov
3642: PPUSH
3643: LD_INT 0
3645: PPUSH
3646: CALL 6144 0 2
3650: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3651: LD_INT 8
3653: PPUSH
3654: LD_INT 2
3656: PPUSH
3657: LD_INT 122
3659: PPUSH
3660: LD_INT 10
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: CALL 7250 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3673: LD_INT 8
3675: PPUSH
3676: LD_INT 2
3678: PPUSH
3679: LD_INT 99
3681: PPUSH
3682: LD_INT 10
3684: PPUSH
3685: LD_INT 2
3687: PPUSH
3688: LD_INT 2
3690: PPUSH
3691: CALL 7250 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3695: LD_INT 8
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: LD_INT 104
3703: PPUSH
3704: LD_INT 10
3706: PPUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_INT 2
3712: PPUSH
3713: CALL 7250 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3717: LD_INT 8
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 104
3725: PPUSH
3726: LD_INT 10
3728: PPUSH
3729: LD_INT 8
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: CALL 7250 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3739: LD_INT 8
3741: PPUSH
3742: LD_INT 2
3744: PPUSH
3745: LD_INT 118
3747: PPUSH
3748: LD_INT 10
3750: PPUSH
3751: LD_INT 1
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL 7250 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
3761: LD_INT 8
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: LD_INT 117
3769: PPUSH
3770: LD_INT 10
3772: PPUSH
3773: LD_INT 3
3775: PPUSH
3776: LD_INT 4
3778: PPUSH
3779: CALL 7250 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
3783: LD_INT 8
3785: PPUSH
3786: LD_INT 2
3788: PPUSH
3789: LD_INT 252
3791: PPUSH
3792: LD_INT 10
3794: PPUSH
3795: LD_INT 4
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL 7250 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
3805: LD_ADDR_VAR 0 2
3809: PUSH
3810: LD_INT 22
3812: PUSH
3813: LD_INT 8
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 21
3822: PUSH
3823: LD_INT 3
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 30
3832: PUSH
3833: LD_INT 32
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 58
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3886
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
3860: LD_INT 8
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_INT 10
3873: PPUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 1
3879: PPUSH
3880: CALL 7250 0 6
3884: GO 3857
3886: POP
3887: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
3888: LD_INT 8
3890: PPUSH
3891: LD_INT 2
3893: PPUSH
3894: LD_INT 140
3896: PPUSH
3897: LD_INT 10
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL 7250 0 6
// arControler = UnitsInside ( ArControl ) ;
3910: LD_ADDR_EXP 50
3914: PUSH
3915: LD_INT 140
3917: PPUSH
3918: CALL_OW 313
3922: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
3923: LD_INT 139
3925: PPUSH
3926: LD_EXP 50
3930: PUSH
3931: LD_INT 1
3933: ARRAY
3934: PPUSH
3935: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
3939: LD_INT 138
3941: PPUSH
3942: LD_EXP 50
3946: PUSH
3947: LD_INT 1
3949: ARRAY
3950: PPUSH
3951: CALL_OW 195
// hc_name = Ali Hadarach ;
3955: LD_ADDR_OWVAR 26
3959: PUSH
3960: LD_STRING Ali Hadarach
3962: ST_TO_ADDR
// hc_gallery =  ;
3963: LD_ADDR_OWVAR 33
3967: PUSH
3968: LD_STRING 
3970: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
3971: LD_INT 1
3973: PPUSH
3974: LD_INT 8
3976: PPUSH
3977: CALL_OW 383
// LegionFriend = CreateHuman ;
3981: LD_ADDR_EXP 47
3985: PUSH
3986: CALL_OW 44
3990: ST_TO_ADDR
// end ; end_of_file
3991: LD_VAR 0 1
3995: RET
// export function PrepareRussians ; var i ; begin
3996: LD_INT 0
3998: PPUSH
3999: PPUSH
// uc_side = 3 ;
4000: LD_ADDR_OWVAR 20
4004: PUSH
4005: LD_INT 3
4007: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4008: LD_ADDR_EXP 26
4012: PUSH
4013: LD_STRING Platonov
4015: PPUSH
4016: LD_INT 0
4018: PPUSH
4019: CALL 6144 0 2
4023: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4024: LD_EXP 26
4028: PPUSH
4029: LD_INT 23
4031: PPUSH
4032: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4036: LD_ADDR_EXP 27
4040: PUSH
4041: LD_STRING Yakotich
4043: PPUSH
4044: LD_INT 0
4046: PPUSH
4047: CALL 6144 0 2
4051: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4052: LD_EXP 27
4056: PPUSH
4057: LD_INT 26
4059: PPUSH
4060: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4064: LD_ADDR_EXP 36
4068: PUSH
4069: LD_STRING Kovalyuk
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL 6144 0 2
4079: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4080: LD_EXP 36
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4092: LD_ADDR_EXP 52
4096: PUSH
4097: LD_EXP 52
4101: PUSH
4102: LD_EXP 36
4106: ADD
4107: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4108: LD_ADDR_EXP 37
4112: PUSH
4113: LD_STRING Oblukov
4115: PPUSH
4116: LD_INT 0
4118: PPUSH
4119: CALL 6144 0 2
4123: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4124: LD_ADDR_EXP 38
4128: PUSH
4129: LD_STRING Bystrov
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL 6144 0 2
4139: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4140: LD_ADDR_EXP 39
4144: PUSH
4145: LD_STRING Fadeev
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL 6144 0 2
4155: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4156: LD_ADDR_EXP 40
4160: PUSH
4161: LD_STRING Gleb
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL 6144 0 2
4171: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4172: LD_ADDR_EXP 41
4176: PUSH
4177: LD_STRING Petrosyan
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL 6144 0 2
4187: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4188: LD_ADDR_EXP 42
4192: PUSH
4193: LD_STRING Petrovova
4195: PPUSH
4196: LD_INT 0
4198: PPUSH
4199: CALL 6144 0 2
4203: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4204: LD_ADDR_EXP 43
4208: PUSH
4209: LD_STRING Kuzmov
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL 6144 0 2
4219: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4220: LD_ADDR_EXP 44
4224: PUSH
4225: LD_STRING Mikhail
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL 6144 0 2
4235: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4236: LD_ADDR_EXP 45
4240: PUSH
4241: LD_STRING Furmanov
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 6144 0 2
4251: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4252: LD_ADDR_EXP 46
4256: PUSH
4257: LD_STRING Belkov
4259: PPUSH
4260: LD_INT 0
4262: PPUSH
4263: CALL 6144 0 2
4267: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4268: LD_EXP 37
4272: PPUSH
4273: LD_INT 22
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 21
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 30
4295: PUSH
4296: LD_INT 32
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 58
4305: PUSH
4306: EMPTY
4307: LIST
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 69
4319: PUSH
4320: LD_INT 1
4322: ARRAY
4323: PPUSH
4324: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4328: LD_EXP 39
4332: PPUSH
4333: LD_INT 22
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 21
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 30
4355: PUSH
4356: LD_INT 32
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 58
4365: PUSH
4366: EMPTY
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 69
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4388: LD_EXP 40
4392: PPUSH
4393: LD_INT 22
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 21
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: LD_INT 30
4415: PUSH
4416: LD_INT 32
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 58
4425: PUSH
4426: EMPTY
4427: LIST
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: PUSH
4440: LD_INT 1
4442: ARRAY
4443: PPUSH
4444: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4448: LD_EXP 42
4452: PPUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 3
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 58
4485: PUSH
4486: EMPTY
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: PPUSH
4495: CALL_OW 69
4499: PUSH
4500: LD_INT 1
4502: ARRAY
4503: PPUSH
4504: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4508: LD_EXP 43
4512: PPUSH
4513: LD_INT 22
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 30
4535: PUSH
4536: LD_INT 32
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 58
4545: PUSH
4546: EMPTY
4547: LIST
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PPUSH
4555: CALL_OW 69
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4568: LD_EXP 45
4572: PPUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 3
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 21
4585: PUSH
4586: LD_INT 3
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 30
4595: PUSH
4596: LD_INT 32
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 58
4605: PUSH
4606: EMPTY
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 69
4619: PUSH
4620: LD_INT 1
4622: ARRAY
4623: PPUSH
4624: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4628: LD_EXP 46
4632: PPUSH
4633: LD_INT 22
4635: PUSH
4636: LD_INT 3
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 21
4645: PUSH
4646: LD_INT 3
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 30
4655: PUSH
4656: LD_INT 32
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_INT 58
4665: PUSH
4666: EMPTY
4667: LIST
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: PPUSH
4675: CALL_OW 69
4679: PUSH
4680: LD_INT 1
4682: ARRAY
4683: PPUSH
4684: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4688: LD_EXP 38
4692: PPUSH
4693: LD_INT 2
4695: PPUSH
4696: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4700: LD_EXP 41
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4712: LD_EXP 44
4716: PPUSH
4717: LD_INT 26
4719: PPUSH
4720: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4724: LD_EXP 44
4728: PPUSH
4729: LD_INT 2
4731: PPUSH
4732: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4736: LD_INT 3
4738: PPUSH
4739: LD_INT 3
4741: PPUSH
4742: LD_INT 26
4744: PPUSH
4745: LD_INT 10
4747: PPUSH
4748: LD_INT 2
4750: PPUSH
4751: LD_INT 5
4753: PPUSH
4754: CALL 7250 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
4758: LD_INT 3
4760: PPUSH
4761: LD_INT 3
4763: PPUSH
4764: LD_INT 23
4766: PPUSH
4767: LD_INT 10
4769: PPUSH
4770: LD_INT 2
4772: PPUSH
4773: LD_INT 4
4775: PPUSH
4776: CALL 7250 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
4780: LD_INT 3
4782: PPUSH
4783: LD_INT 3
4785: PPUSH
4786: LD_INT 27
4788: PPUSH
4789: LD_INT 10
4791: PPUSH
4792: LD_INT 9
4794: PPUSH
4795: LD_INT 6
4797: PPUSH
4798: CALL 7250 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
4802: LD_INT 3
4804: PPUSH
4805: LD_INT 3
4807: PPUSH
4808: LD_INT 27
4810: PPUSH
4811: LD_INT 10
4813: PPUSH
4814: LD_INT 3
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL 7250 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 3
4829: PPUSH
4830: LD_INT 4
4832: PPUSH
4833: LD_INT 10
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: LD_INT 6
4841: PPUSH
4842: CALL 7250 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
4846: LD_INT 3
4848: PPUSH
4849: LD_INT 3
4851: PPUSH
4852: LD_INT 10
4854: PPUSH
4855: LD_INT 10
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: LD_INT 6
4863: PPUSH
4864: CALL 7250 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
4868: LD_INT 3
4870: PPUSH
4871: LD_INT 3
4873: PPUSH
4874: LD_INT 2
4876: PPUSH
4877: LD_INT 10
4879: PPUSH
4880: LD_INT 4
4882: PPUSH
4883: LD_INT 3
4885: PPUSH
4886: CALL 7250 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
4890: LD_INT 3
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 1
4898: PPUSH
4899: LD_INT 10
4901: PPUSH
4902: LD_INT 4
4904: PPUSH
4905: LD_INT 3
4907: PPUSH
4908: CALL 7250 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4912: LD_ADDR_VAR 0 2
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 21
4929: PUSH
4930: LD_INT 3
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 30
4939: PUSH
4940: LD_INT 32
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 58
4949: PUSH
4950: EMPTY
4951: LIST
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PPUSH
4959: CALL_OW 69
4963: PUSH
4964: FOR_IN
4965: IFFALSE 4993
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
4967: LD_INT 3
4969: PPUSH
4970: LD_INT 3
4972: PPUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: LD_INT 10
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: LD_INT 1
4986: PPUSH
4987: CALL 7250 0 6
4991: GO 4964
4993: POP
4994: POP
// end ;
4995: LD_VAR 0 1
4999: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5000: LD_INT 0
5002: PPUSH
5003: PPUSH
5004: PPUSH
5005: PPUSH
// uc_side = 6 ;
5006: LD_ADDR_OWVAR 20
5010: PUSH
5011: LD_INT 6
5013: ST_TO_ADDR
// uc_nation = 1 ;
5014: LD_ADDR_OWVAR 21
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// vc_engine = 3 ;
5022: LD_ADDR_OWVAR 39
5026: PUSH
5027: LD_INT 3
5029: ST_TO_ADDR
// vc_control = 1 ;
5030: LD_ADDR_OWVAR 38
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// vc_chassis = 5 ;
5038: LD_ADDR_OWVAR 37
5042: PUSH
5043: LD_INT 5
5045: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5046: LD_ADDR_OWVAR 40
5050: PUSH
5051: LD_INT 5
5053: PUSH
5054: LD_INT 9
5056: PUSH
5057: LD_INT 7
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: PUSH
5065: LD_INT 1
5067: PPUSH
5068: LD_INT 3
5070: PPUSH
5071: CALL_OW 12
5075: ARRAY
5076: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5077: LD_ADDR_EXP 34
5081: PUSH
5082: CALL_OW 45
5086: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5087: LD_EXP 34
5091: PPUSH
5092: LD_INT 14
5094: PPUSH
5095: LD_INT 0
5097: PPUSH
5098: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5102: LD_ADDR_EXP 33
5106: PUSH
5107: LD_STRING Vsevolod
5109: PPUSH
5110: LD_INT 0
5112: PPUSH
5113: CALL 6144 0 2
5117: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5118: LD_EXP 33
5122: PPUSH
5123: LD_EXP 34
5127: PPUSH
5128: CALL_OW 52
// for i := 1 to 5 do
5132: LD_ADDR_VAR 0 2
5136: PUSH
5137: DOUBLE
5138: LD_INT 1
5140: DEC
5141: ST_TO_ADDR
5142: LD_INT 5
5144: PUSH
5145: FOR_TO
5146: IFFALSE 5230
// begin vc_engine = 3 ;
5148: LD_ADDR_OWVAR 39
5152: PUSH
5153: LD_INT 3
5155: ST_TO_ADDR
// vc_control = 3 ;
5156: LD_ADDR_OWVAR 38
5160: PUSH
5161: LD_INT 3
5163: ST_TO_ADDR
// vc_chassis = 3 ;
5164: LD_ADDR_OWVAR 37
5168: PUSH
5169: LD_INT 3
5171: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5172: LD_ADDR_OWVAR 40
5176: PUSH
5177: LD_INT 5
5179: PUSH
5180: LD_INT 9
5182: PUSH
5183: LD_INT 7
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_INT 3
5196: PPUSH
5197: CALL_OW 12
5201: ARRAY
5202: ST_TO_ADDR
// veh = CreateVehicle ;
5203: LD_ADDR_VAR 0 3
5207: PUSH
5208: CALL_OW 45
5212: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5213: LD_VAR 0 3
5217: PPUSH
5218: LD_INT 14
5220: PPUSH
5221: LD_INT 0
5223: PPUSH
5224: CALL_OW 49
// end ;
5228: GO 5145
5230: POP
5231: POP
// uc_nation = 3 ;
5232: LD_ADDR_OWVAR 21
5236: PUSH
5237: LD_INT 3
5239: ST_TO_ADDR
// for i := 1 to 7 do
5240: LD_ADDR_VAR 0 2
5244: PUSH
5245: DOUBLE
5246: LD_INT 1
5248: DEC
5249: ST_TO_ADDR
5250: LD_INT 7
5252: PUSH
5253: FOR_TO
5254: IFFALSE 5346
// begin vc_engine = 3 ;
5256: LD_ADDR_OWVAR 39
5260: PUSH
5261: LD_INT 3
5263: ST_TO_ADDR
// vc_control = 3 ;
5264: LD_ADDR_OWVAR 38
5268: PUSH
5269: LD_INT 3
5271: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5272: LD_ADDR_OWVAR 37
5276: PUSH
5277: LD_INT 24
5279: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5280: LD_ADDR_OWVAR 40
5284: PUSH
5285: LD_INT 44
5287: PUSH
5288: LD_INT 47
5290: PUSH
5291: LD_INT 45
5293: PUSH
5294: LD_INT 46
5296: PUSH
5297: LD_INT 49
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_INT 4
5312: PPUSH
5313: CALL_OW 12
5317: ARRAY
5318: ST_TO_ADDR
// veh = CreateVehicle ;
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: CALL_OW 45
5328: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5329: LD_VAR 0 3
5333: PPUSH
5334: LD_INT 14
5336: PPUSH
5337: LD_INT 0
5339: PPUSH
5340: CALL_OW 49
// end ;
5344: GO 5253
5346: POP
5347: POP
// repeat wait ( 0 0$1 ) ;
5348: LD_INT 35
5350: PPUSH
5351: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: LD_INT 22
5362: PUSH
5363: LD_INT 6
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 21
5372: PUSH
5373: LD_INT 2
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: LD_INT 50
5382: PUSH
5383: EMPTY
5384: LIST
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: PPUSH
5391: CALL_OW 69
5395: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5396: LD_EXP 1
5400: PPUSH
5401: CALL_OW 310
5405: NOT
5406: IFFALSE 5439
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5408: LD_VAR 0 4
5412: PPUSH
5413: LD_EXP 1
5417: PPUSH
5418: CALL_OW 250
5422: PPUSH
5423: LD_EXP 1
5427: PPUSH
5428: CALL_OW 251
5432: PPUSH
5433: CALL_OW 114
5437: GO 5478
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5439: LD_VAR 0 4
5443: PPUSH
5444: LD_EXP 1
5448: PPUSH
5449: CALL_OW 310
5453: PPUSH
5454: CALL_OW 250
5458: PPUSH
5459: LD_EXP 1
5463: PPUSH
5464: CALL_OW 310
5468: PPUSH
5469: CALL_OW 251
5473: PPUSH
5474: CALL_OW 114
// until vehList = 0 ;
5478: LD_VAR 0 4
5482: PUSH
5483: LD_INT 0
5485: EQUAL
5486: IFFALSE 5348
// end ;
5488: LD_VAR 0 1
5492: RET
// export function PreapreMehBehs ; var i , un ; begin
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
5497: PPUSH
// uc_side = 6 ;
5498: LD_ADDR_OWVAR 20
5502: PUSH
5503: LD_INT 6
5505: ST_TO_ADDR
// uc_nation = 3 ;
5506: LD_ADDR_OWVAR 21
5510: PUSH
5511: LD_INT 3
5513: ST_TO_ADDR
// for i := 1 to 3 do
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: DOUBLE
5520: LD_INT 1
5522: DEC
5523: ST_TO_ADDR
5524: LD_INT 3
5526: PUSH
5527: FOR_TO
5528: IFFALSE 5599
// begin hc_name =  ;
5530: LD_ADDR_OWVAR 26
5534: PUSH
5535: LD_STRING 
5537: ST_TO_ADDR
// hc_gallery =  ;
5538: LD_ADDR_OWVAR 33
5542: PUSH
5543: LD_STRING 
5545: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 10
5551: PPUSH
5552: CALL_OW 383
// un = CreateHuman ;
5556: LD_ADDR_VAR 0 3
5560: PUSH
5561: CALL_OW 44
5565: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5566: LD_ADDR_EXP 52
5570: PUSH
5571: LD_EXP 52
5575: PUSH
5576: LD_VAR 0 3
5580: ADD
5581: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5582: LD_VAR 0 3
5586: PPUSH
5587: LD_INT 17
5589: PPUSH
5590: LD_INT 0
5592: PPUSH
5593: CALL_OW 49
// end ;
5597: GO 5527
5599: POP
5600: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5601: LD_EXP 36
5605: PPUSH
5606: LD_INT 17
5608: PPUSH
5609: LD_INT 0
5611: PPUSH
5612: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5616: LD_EXP 36
5620: PPUSH
5621: LD_INT 6
5623: PPUSH
5624: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5628: LD_INT 145
5630: PPUSH
5631: LD_INT 6
5633: PPUSH
5634: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5638: LD_EXP 52
5642: PUSH
5643: LD_INT 1
5645: ARRAY
5646: PPUSH
5647: LD_INT 37
5649: PPUSH
5650: LD_INT 193
5652: PPUSH
5653: LD_INT 118
5655: PPUSH
5656: LD_INT 0
5658: PPUSH
5659: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5663: LD_EXP 52
5667: PUSH
5668: LD_INT 2
5670: ARRAY
5671: PPUSH
5672: LD_INT 37
5674: PPUSH
5675: LD_INT 204
5677: PPUSH
5678: LD_INT 119
5680: PPUSH
5681: LD_INT 0
5683: PPUSH
5684: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5688: LD_EXP 52
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PPUSH
5697: LD_INT 37
5699: PPUSH
5700: LD_INT 195
5702: PPUSH
5703: LD_INT 126
5705: PPUSH
5706: LD_INT 0
5708: PPUSH
5709: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5713: LD_EXP 52
5717: PUSH
5718: LD_INT 4
5720: ARRAY
5721: PPUSH
5722: LD_INT 37
5724: PPUSH
5725: LD_INT 207
5727: PPUSH
5728: LD_INT 126
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: CALL_OW 170
// end ; end_of_file
5738: LD_VAR 0 1
5742: RET
// export function PrepareAlliance ; var i ; begin
5743: LD_INT 0
5745: PPUSH
5746: PPUSH
// uc_side = 7 ;
5747: LD_ADDR_OWVAR 20
5751: PUSH
5752: LD_INT 7
5754: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
5755: LD_ADDR_EXP 28
5759: PUSH
5760: LD_STRING Roth
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL 6144 0 2
5770: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
5771: LD_EXP 28
5775: PPUSH
5776: LD_INT 249
5778: PPUSH
5779: LD_INT 187
5781: PPUSH
5782: LD_INT 0
5784: PPUSH
5785: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
5789: LD_EXP 28
5793: PPUSH
5794: LD_INT 248
5796: PPUSH
5797: LD_INT 187
5799: PPUSH
5800: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
5804: LD_INT 7
5806: PPUSH
5807: LD_INT 1
5809: PPUSH
5810: LD_INT 45
5812: PPUSH
5813: LD_INT 10
5815: PPUSH
5816: LD_INT 2
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: CALL 7250 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
5826: LD_INT 7
5828: PPUSH
5829: LD_INT 3
5831: PPUSH
5832: LD_INT 45
5834: PPUSH
5835: LD_INT 10
5837: PPUSH
5838: LD_INT 2
5840: PPUSH
5841: LD_INT 2
5843: PPUSH
5844: CALL 7250 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
5848: LD_INT 7
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: LD_INT 194
5856: PPUSH
5857: LD_INT 10
5859: PPUSH
5860: LD_INT 5
5862: PPUSH
5863: LD_INT 4
5865: PPUSH
5866: CALL 7250 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
5870: LD_INT 7
5872: PPUSH
5873: LD_INT 3
5875: PPUSH
5876: LD_INT 194
5878: PPUSH
5879: LD_INT 10
5881: PPUSH
5882: LD_INT 8
5884: PPUSH
5885: LD_INT 6
5887: PPUSH
5888: CALL 7250 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
5892: LD_INT 7
5894: PPUSH
5895: LD_INT 1
5897: PPUSH
5898: LD_INT 156
5900: PPUSH
5901: LD_INT 10
5903: PPUSH
5904: LD_INT 3
5906: PPUSH
5907: LD_INT 6
5909: PPUSH
5910: CALL 7250 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
5914: LD_INT 7
5916: PPUSH
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 162
5922: PPUSH
5923: LD_INT 10
5925: PPUSH
5926: LD_INT 3
5928: PPUSH
5929: LD_INT 6
5931: PPUSH
5932: CALL 7250 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
5936: LD_INT 7
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: LD_INT 39
5944: PPUSH
5945: LD_INT 10
5947: PPUSH
5948: LD_INT 4
5950: PPUSH
5951: LD_INT 4
5953: PPUSH
5954: CALL 7250 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
5958: LD_INT 7
5960: PPUSH
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 133
5966: PPUSH
5967: LD_INT 10
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 4
5975: PPUSH
5976: CALL 7250 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
5980: LD_INT 7
5982: PPUSH
5983: LD_INT 1
5985: PPUSH
5986: LD_INT 46
5988: PPUSH
5989: LD_INT 10
5991: PPUSH
5992: LD_INT 4
5994: PPUSH
5995: LD_INT 2
5997: PPUSH
5998: CALL 7250 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6002: LD_ADDR_VAR 0 2
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_INT 7
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 3
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 30
6029: PUSH
6030: LD_INT 32
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 58
6039: PUSH
6040: EMPTY
6041: LIST
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL_OW 69
6053: PUSH
6054: FOR_IN
6055: IFFALSE 6102
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6057: LD_INT 7
6059: PPUSH
6060: LD_INT 1
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 1
6072: PPUSH
6073: LD_INT 2
6075: PPUSH
6076: CALL_OW 12
6080: ARRAY
6081: PPUSH
6082: LD_VAR 0 2
6086: PPUSH
6087: LD_INT 10
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: LD_INT 1
6095: PPUSH
6096: CALL 7250 0 6
6100: GO 6054
6102: POP
6103: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6104: LD_INT 7
6106: PPUSH
6107: LD_INT 1
6109: PPUSH
6110: LD_INT 226
6112: PPUSH
6113: LD_INT 10
6115: PPUSH
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL 7250 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6126: LD_ADDR_EXP 57
6130: PUSH
6131: LD_INT 226
6133: PPUSH
6134: CALL_OW 313
6138: ST_TO_ADDR
// end ; end_of_file
6139: LD_VAR 0 1
6143: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6144: LD_INT 0
6146: PPUSH
6147: PPUSH
// if exist_mode then
6148: LD_VAR 0 2
6152: IFFALSE 6171
// unit := CreateCharacter ( ident ) else
6154: LD_ADDR_VAR 0 4
6158: PUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 34
6168: ST_TO_ADDR
6169: GO 6186
// unit := NewCharacter ( ident ) ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_VAR 0 1
6180: PPUSH
6181: CALL_OW 25
6185: ST_TO_ADDR
// result := unit ;
6186: LD_ADDR_VAR 0 3
6190: PUSH
6191: LD_VAR 0 4
6195: ST_TO_ADDR
// end ;
6196: LD_VAR 0 3
6200: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6205: LD_STRING 13s_
6207: PUSH
6208: LD_VAR 0 1
6212: STR
6213: PPUSH
6214: CALL_OW 28
6218: PUSH
6219: LD_INT 1
6221: EQUAL
6222: IFFALSE 6243
// unit = CreateCharacter ( 13s_ & ident ) ;
6224: LD_ADDR_VAR 0 3
6228: PUSH
6229: LD_STRING 13s_
6231: PUSH
6232: LD_VAR 0 1
6236: STR
6237: PPUSH
6238: CALL_OW 34
6242: ST_TO_ADDR
// result := unit ;
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: LD_VAR 0 3
6252: ST_TO_ADDR
// end ;
6253: LD_VAR 0 2
6257: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6258: LD_INT 0
6260: PPUSH
6261: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
6262: LD_STRING 13f_
6264: PUSH
6265: LD_VAR 0 1
6269: STR
6270: PPUSH
6271: CALL_OW 28
6275: PUSH
6276: LD_INT 1
6278: EQUAL
6279: IFFALSE 6316
// begin unit = CreateCharacter ( 13f_ & ident ) ;
6281: LD_ADDR_VAR 0 3
6285: PUSH
6286: LD_STRING 13f_
6288: PUSH
6289: LD_VAR 0 1
6293: STR
6294: PPUSH
6295: CALL_OW 34
6299: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6300: LD_ADDR_EXP 20
6304: PUSH
6305: LD_EXP 20
6309: PUSH
6310: LD_VAR 0 3
6314: ADD
6315: ST_TO_ADDR
// end ; result := unit ;
6316: LD_ADDR_VAR 0 2
6320: PUSH
6321: LD_VAR 0 3
6325: ST_TO_ADDR
// end ;
6326: LD_VAR 0 2
6330: RET
// export function TabLenght ( tab ) ; var i ; begin
6331: LD_INT 0
6333: PPUSH
6334: PPUSH
// for i = 1 to tab do
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: DOUBLE
6341: LD_INT 1
6343: DEC
6344: ST_TO_ADDR
6345: LD_VAR 0 1
6349: PUSH
6350: FOR_TO
6351: IFFALSE 6365
// result = i ;
6353: LD_ADDR_VAR 0 2
6357: PUSH
6358: LD_VAR 0 3
6362: ST_TO_ADDR
6363: GO 6350
6365: POP
6366: POP
// end ;
6367: LD_VAR 0 2
6371: RET
// export function Video ( mode ) ; begin
6372: LD_INT 0
6374: PPUSH
// if mode = true then
6375: LD_VAR 0 1
6379: PUSH
6380: LD_INT 1
6382: EQUAL
6383: IFFALSE 6403
// begin ingame_video = true ;
6385: LD_ADDR_OWVAR 52
6389: PUSH
6390: LD_INT 1
6392: ST_TO_ADDR
// interface_hidden = true ;
6393: LD_ADDR_OWVAR 54
6397: PUSH
6398: LD_INT 1
6400: ST_TO_ADDR
// end else
6401: GO 6419
// begin ingame_video = false ;
6403: LD_ADDR_OWVAR 52
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// interface_hidden = false ;
6411: LD_ADDR_OWVAR 54
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// end ; end ;
6419: LD_VAR 0 2
6423: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
6428: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6429: LD_ADDR_VAR 0 1
6433: PUSH
6434: LD_VAR 0 1
6438: PUSH
6439: LD_EXP 1
6443: PUSH
6444: LD_EXP 3
6448: PUSH
6449: LD_EXP 21
6453: PUSH
6454: LD_EXP 4
6458: PUSH
6459: LD_EXP 5
6463: PUSH
6464: LD_EXP 6
6468: PUSH
6469: LD_EXP 7
6473: PUSH
6474: LD_EXP 8
6478: PUSH
6479: LD_EXP 9
6483: PUSH
6484: LD_EXP 10
6488: PUSH
6489: LD_EXP 11
6493: PUSH
6494: LD_EXP 12
6498: PUSH
6499: LD_EXP 13
6503: PUSH
6504: LD_EXP 14
6508: PUSH
6509: LD_EXP 15
6513: PUSH
6514: LD_EXP 17
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: DIFF
6537: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6538: LD_ADDR_VAR 0 6
6542: PUSH
6543: LD_INT 1
6545: PPUSH
6546: LD_VAR 0 1
6550: PPUSH
6551: CALL_OW 12
6555: ST_TO_ADDR
// for i = 1 to characters do
6556: LD_ADDR_VAR 0 5
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_VAR 0 1
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6682
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6574: LD_VAR 0 5
6578: PUSH
6579: LD_VAR 0 6
6583: EQUAL
6584: PUSH
6585: LD_VAR 0 1
6589: PUSH
6590: LD_VAR 0 5
6594: ARRAY
6595: PPUSH
6596: CALL_OW 258
6600: PUSH
6601: LD_INT 1
6603: EQUAL
6604: AND
6605: IFFALSE 6627
// Say ( characters [ i ] , dialogMID ) ;
6607: LD_VAR 0 1
6611: PUSH
6612: LD_VAR 0 5
6616: ARRAY
6617: PPUSH
6618: LD_VAR 0 2
6622: PPUSH
6623: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6627: LD_VAR 0 5
6631: PUSH
6632: LD_VAR 0 6
6636: EQUAL
6637: PUSH
6638: LD_VAR 0 1
6642: PUSH
6643: LD_VAR 0 5
6647: ARRAY
6648: PPUSH
6649: CALL_OW 258
6653: PUSH
6654: LD_INT 2
6656: EQUAL
6657: AND
6658: IFFALSE 6680
// Say ( characters [ i ] , dialogFID ) ;
6660: LD_VAR 0 1
6664: PUSH
6665: LD_VAR 0 5
6669: ARRAY
6670: PPUSH
6671: LD_VAR 0 3
6675: PPUSH
6676: CALL_OW 88
// end ;
6680: GO 6571
6682: POP
6683: POP
// end ;
6684: LD_VAR 0 4
6688: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
6689: LD_INT 0
6691: PPUSH
6692: PPUSH
6693: PPUSH
6694: PPUSH
// if not list then
6695: LD_VAR 0 1
6699: NOT
6700: IFFALSE 6704
// exit ;
6702: GO 7051
// result := [ ] ;
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: EMPTY
6710: ST_TO_ADDR
// for i in list do
6711: LD_ADDR_VAR 0 4
6715: PUSH
6716: LD_VAR 0 1
6720: PUSH
6721: FOR_IN
6722: IFFALSE 6963
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
6724: LD_ADDR_VAR 0 6
6728: PUSH
6729: LD_VAR 0 4
6733: PPUSH
6734: LD_INT 1
6736: PPUSH
6737: CALL_OW 259
6741: PUSH
6742: LD_VAR 0 4
6746: PPUSH
6747: LD_INT 2
6749: PPUSH
6750: CALL_OW 259
6754: PLUS
6755: PUSH
6756: LD_VAR 0 4
6760: PPUSH
6761: LD_INT 3
6763: PPUSH
6764: CALL_OW 259
6768: PLUS
6769: PUSH
6770: LD_VAR 0 4
6774: PPUSH
6775: LD_INT 4
6777: PPUSH
6778: CALL_OW 259
6782: PLUS
6783: PUSH
6784: LD_INT 4
6786: DIV
6787: ST_TO_ADDR
// if not result then
6788: LD_VAR 0 3
6792: NOT
6793: IFFALSE 6819
// result := [ [ i , tmp ] ] else
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_VAR 0 4
6804: PUSH
6805: LD_VAR 0 6
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: ST_TO_ADDR
6817: GO 6961
// begin if result [ result ] [ 2 ] <= tmp then
6819: LD_VAR 0 3
6823: PUSH
6824: LD_VAR 0 3
6828: ARRAY
6829: PUSH
6830: LD_INT 2
6832: ARRAY
6833: PUSH
6834: LD_VAR 0 6
6838: LESSEQUAL
6839: IFFALSE 6881
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6841: LD_ADDR_VAR 0 3
6845: PUSH
6846: LD_VAR 0 3
6850: PPUSH
6851: LD_VAR 0 3
6855: PUSH
6856: LD_INT 1
6858: PLUS
6859: PPUSH
6860: LD_VAR 0 4
6864: PUSH
6865: LD_VAR 0 6
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PPUSH
6874: CALL_OW 2
6878: ST_TO_ADDR
6879: GO 6961
// for j = 1 to result do
6881: LD_ADDR_VAR 0 5
6885: PUSH
6886: DOUBLE
6887: LD_INT 1
6889: DEC
6890: ST_TO_ADDR
6891: LD_VAR 0 3
6895: PUSH
6896: FOR_TO
6897: IFFALSE 6959
// begin if tmp < result [ j ] [ 2 ] then
6899: LD_VAR 0 6
6903: PUSH
6904: LD_VAR 0 3
6908: PUSH
6909: LD_VAR 0 5
6913: ARRAY
6914: PUSH
6915: LD_INT 2
6917: ARRAY
6918: LESS
6919: IFFALSE 6957
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6921: LD_ADDR_VAR 0 3
6925: PUSH
6926: LD_VAR 0 3
6930: PPUSH
6931: LD_VAR 0 5
6935: PPUSH
6936: LD_VAR 0 4
6940: PUSH
6941: LD_VAR 0 6
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 2
6954: ST_TO_ADDR
// break ;
6955: GO 6959
// end ; end ;
6957: GO 6896
6959: POP
6960: POP
// end ; end ;
6961: GO 6721
6963: POP
6964: POP
// if result and not asc then
6965: LD_VAR 0 3
6969: PUSH
6970: LD_VAR 0 2
6974: NOT
6975: AND
6976: IFFALSE 7051
// begin tmp := result ;
6978: LD_ADDR_VAR 0 6
6982: PUSH
6983: LD_VAR 0 3
6987: ST_TO_ADDR
// for i = tmp downto 1 do
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: DOUBLE
6994: LD_VAR 0 6
6998: INC
6999: ST_TO_ADDR
7000: LD_INT 1
7002: PUSH
7003: FOR_DOWNTO
7004: IFFALSE 7049
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7006: LD_ADDR_VAR 0 3
7010: PUSH
7011: LD_VAR 0 3
7015: PPUSH
7016: LD_VAR 0 6
7020: PUSH
7021: LD_VAR 0 4
7025: MINUS
7026: PUSH
7027: LD_INT 1
7029: PLUS
7030: PPUSH
7031: LD_VAR 0 6
7035: PUSH
7036: LD_VAR 0 4
7040: ARRAY
7041: PPUSH
7042: CALL_OW 1
7046: ST_TO_ADDR
7047: GO 7003
7049: POP
7050: POP
// end ; end ;
7051: LD_VAR 0 3
7055: RET
// export function PrepareDifficulty ; begin
7056: LD_INT 0
7058: PPUSH
// if difficulty = 1 then
7059: LD_OWVAR 67
7063: PUSH
7064: LD_INT 1
7066: EQUAL
7067: IFFALSE 7095
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7069: LD_INT 51
7071: PPUSH
7072: LD_INT 6
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7082: LD_INT 57
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: LD_INT 2
7090: PPUSH
7091: CALL_OW 322
// end ; if difficulty = 2 then
7095: LD_OWVAR 67
7099: PUSH
7100: LD_INT 2
7102: EQUAL
7103: IFFALSE 7157
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7105: LD_INT 51
7107: PPUSH
7108: LD_INT 6
7110: PPUSH
7111: LD_INT 2
7113: PPUSH
7114: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7118: LD_INT 57
7120: PPUSH
7121: LD_INT 6
7123: PPUSH
7124: LD_INT 2
7126: PPUSH
7127: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7131: LD_INT 52
7133: PPUSH
7134: LD_INT 6
7136: PPUSH
7137: LD_INT 2
7139: PPUSH
7140: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7144: LD_INT 58
7146: PPUSH
7147: LD_INT 6
7149: PPUSH
7150: LD_INT 2
7152: PPUSH
7153: CALL_OW 322
// end ; if difficulty = 3 then
7157: LD_OWVAR 67
7161: PUSH
7162: LD_INT 3
7164: EQUAL
7165: IFFALSE 7245
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7167: LD_INT 51
7169: PPUSH
7170: LD_INT 6
7172: PPUSH
7173: LD_INT 2
7175: PPUSH
7176: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7180: LD_INT 57
7182: PPUSH
7183: LD_INT 6
7185: PPUSH
7186: LD_INT 2
7188: PPUSH
7189: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7193: LD_INT 52
7195: PPUSH
7196: LD_INT 6
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7206: LD_INT 58
7208: PPUSH
7209: LD_INT 6
7211: PPUSH
7212: LD_INT 2
7214: PPUSH
7215: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7219: LD_INT 53
7221: PPUSH
7222: LD_INT 6
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7232: LD_INT 59
7234: PPUSH
7235: LD_INT 6
7237: PPUSH
7238: LD_INT 2
7240: PPUSH
7241: CALL_OW 322
// end ; end ;
7245: LD_VAR 0 1
7249: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
// for i = 1 to count do
7257: LD_ADDR_VAR 0 8
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_VAR 0 6
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7354
// begin uc_side = side ;
7275: LD_ADDR_OWVAR 20
7279: PUSH
7280: LD_VAR 0 1
7284: ST_TO_ADDR
// uc_nation = nation ;
7285: LD_ADDR_OWVAR 21
7289: PUSH
7290: LD_VAR 0 2
7294: ST_TO_ADDR
// hc_gallery =  ;
7295: LD_ADDR_OWVAR 33
7299: PUSH
7300: LD_STRING 
7302: ST_TO_ADDR
// hc_name =  ;
7303: LD_ADDR_OWVAR 26
7307: PUSH
7308: LD_STRING 
7310: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7311: LD_INT 0
7313: PPUSH
7314: LD_VAR 0 5
7318: PPUSH
7319: LD_VAR 0 4
7323: PPUSH
7324: CALL_OW 380
// un = CreateHuman ;
7328: LD_ADDR_VAR 0 10
7332: PUSH
7333: CALL_OW 44
7337: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7338: LD_VAR 0 10
7342: PPUSH
7343: LD_VAR 0 3
7347: PPUSH
7348: CALL_OW 52
// end ;
7352: GO 7272
7354: POP
7355: POP
// end ;
7356: LD_VAR 0 7
7360: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7374: LD_INT 2100
7376: PUSH
7377: LD_INT 3150
7379: PUSH
7380: LD_INT 4200
7382: PUSH
7383: LD_INT 5250
7385: PUSH
7386: LD_INT 6300
7388: PUSH
7389: LD_INT 7350
7391: PUSH
7392: LD_INT 8400
7394: PUSH
7395: LD_INT 9450
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 1
7410: PPUSH
7411: LD_INT 8
7413: PPUSH
7414: CALL_OW 12
7418: ARRAY
7419: PPUSH
7420: CALL_OW 67
// amChassisTab = [ ] ;
7424: LD_ADDR_VAR 0 19
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// arChassisTab = [ ] ;
7431: LD_ADDR_VAR 0 18
7435: PUSH
7436: EMPTY
7437: ST_TO_ADDR
// ruChassisTab = [ ] ;
7438: LD_ADDR_VAR 0 17
7442: PUSH
7443: EMPTY
7444: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7445: LD_INT 35
7447: PPUSH
7448: CALL_OW 67
// if nation = 1 then
7452: LD_VAR 0 5
7456: PUSH
7457: LD_INT 1
7459: EQUAL
7460: IFFALSE 7951
// begin uc_side = side ;
7462: LD_ADDR_OWVAR 20
7466: PUSH
7467: LD_VAR 0 2
7471: ST_TO_ADDR
// uc_nation = nation ;
7472: LD_ADDR_OWVAR 21
7476: PUSH
7477: LD_VAR 0 5
7481: ST_TO_ADDR
// vc_engine = vehengine ;
7482: LD_ADDR_OWVAR 39
7486: PUSH
7487: LD_VAR 0 6
7491: ST_TO_ADDR
// vc_control = vehcontrol ;
7492: LD_ADDR_OWVAR 38
7496: PUSH
7497: LD_VAR 0 7
7501: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7502: LD_ADDR_OWVAR 40
7506: PUSH
7507: LD_VAR 0 10
7511: PUSH
7512: LD_INT 1
7514: PPUSH
7515: LD_VAR 0 10
7519: PPUSH
7520: CALL_OW 12
7524: ARRAY
7525: ST_TO_ADDR
// for j = 1 to AMWeapon do
7526: LD_ADDR_VAR 0 14
7530: PUSH
7531: DOUBLE
7532: LD_INT 1
7534: DEC
7535: ST_TO_ADDR
7536: LD_VAR 0 10
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7843
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
7544: LD_VAR 0 10
7548: PUSH
7549: LD_VAR 0 14
7553: ARRAY
7554: PUSH
7555: LD_INT 2
7557: EQUAL
7558: PUSH
7559: LD_VAR 0 10
7563: PUSH
7564: LD_VAR 0 14
7568: ARRAY
7569: PUSH
7570: LD_INT 3
7572: EQUAL
7573: OR
7574: IFFALSE 7627
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7576: LD_ADDR_VAR 0 19
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: LD_INT 3
7589: PUSH
7590: LD_INT 4
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7603: LD_ADDR_OWVAR 37
7607: PUSH
7608: LD_VAR 0 19
7612: PUSH
7613: LD_INT 1
7615: PPUSH
7616: LD_VAR 0 19
7620: PPUSH
7621: CALL_OW 12
7625: ARRAY
7626: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
7627: LD_VAR 0 10
7631: PUSH
7632: LD_VAR 0 14
7636: ARRAY
7637: PUSH
7638: LD_INT 4
7640: EQUAL
7641: PUSH
7642: LD_VAR 0 10
7646: PUSH
7647: LD_VAR 0 14
7651: ARRAY
7652: PUSH
7653: LD_INT 5
7655: EQUAL
7656: OR
7657: PUSH
7658: LD_VAR 0 10
7662: PUSH
7663: LD_VAR 0 14
7667: ARRAY
7668: PUSH
7669: LD_INT 9
7671: EQUAL
7672: OR
7673: PUSH
7674: LD_VAR 0 10
7678: PUSH
7679: LD_VAR 0 14
7683: ARRAY
7684: PUSH
7685: LD_INT 11
7687: EQUAL
7688: OR
7689: PUSH
7690: LD_VAR 0 10
7694: PUSH
7695: LD_VAR 0 14
7699: ARRAY
7700: PUSH
7701: LD_INT 7
7703: EQUAL
7704: OR
7705: IFFALSE 7754
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7707: LD_ADDR_VAR 0 19
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 3
7717: PUSH
7718: LD_INT 4
7720: PUSH
7721: LD_INT 5
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7730: LD_ADDR_OWVAR 37
7734: PUSH
7735: LD_VAR 0 19
7739: PUSH
7740: LD_INT 1
7742: PPUSH
7743: LD_VAR 0 19
7747: PPUSH
7748: CALL_OW 12
7752: ARRAY
7753: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
7754: LD_VAR 0 10
7758: PUSH
7759: LD_VAR 0 14
7763: ARRAY
7764: PUSH
7765: LD_INT 8
7767: EQUAL
7768: PUSH
7769: LD_VAR 0 10
7773: PUSH
7774: LD_VAR 0 14
7778: ARRAY
7779: PUSH
7780: LD_INT 6
7782: EQUAL
7783: OR
7784: PUSH
7785: LD_VAR 0 10
7789: PUSH
7790: LD_VAR 0 14
7794: ARRAY
7795: PUSH
7796: LD_INT 10
7798: EQUAL
7799: OR
7800: IFFALSE 7841
// begin amChassisTab = [ 4 , 5 ] ;
7802: LD_ADDR_VAR 0 19
7806: PUSH
7807: LD_INT 4
7809: PUSH
7810: LD_INT 5
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7817: LD_ADDR_OWVAR 37
7821: PUSH
7822: LD_VAR 0 19
7826: PUSH
7827: LD_INT 1
7829: PPUSH
7830: LD_VAR 0 19
7834: PPUSH
7835: CALL_OW 12
7839: ARRAY
7840: ST_TO_ADDR
// end ; end ;
7841: GO 7541
7843: POP
7844: POP
// veh = CreateVehicle ;
7845: LD_ADDR_VAR 0 16
7849: PUSH
7850: CALL_OW 45
7854: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7855: LD_VAR 0 16
7859: PPUSH
7860: LD_VAR 0 1
7864: PPUSH
7865: LD_INT 0
7867: PPUSH
7868: CALL_OW 49
// if vc_control = 1 then
7872: LD_OWVAR 38
7876: PUSH
7877: LD_INT 1
7879: EQUAL
7880: IFFALSE 7937
// begin hc_gallery =  ;
7882: LD_ADDR_OWVAR 33
7886: PUSH
7887: LD_STRING 
7889: ST_TO_ADDR
// hc_name =  ;
7890: LD_ADDR_OWVAR 26
7894: PUSH
7895: LD_STRING 
7897: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7898: LD_INT 0
7900: PPUSH
7901: LD_INT 3
7903: PPUSH
7904: LD_VAR 0 4
7908: PPUSH
7909: CALL_OW 380
// un = CreateHuman ;
7913: LD_ADDR_VAR 0 15
7917: PUSH
7918: CALL_OW 44
7922: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7923: LD_VAR 0 15
7927: PPUSH
7928: LD_VAR 0 16
7932: PPUSH
7933: CALL_OW 52
// end ; i = i + 1 ;
7937: LD_ADDR_VAR 0 13
7941: PUSH
7942: LD_VAR 0 13
7946: PUSH
7947: LD_INT 1
7949: PLUS
7950: ST_TO_ADDR
// end ; if nation = 2 then
7951: LD_VAR 0 5
7955: PUSH
7956: LD_INT 2
7958: EQUAL
7959: IFFALSE 8383
// begin uc_side = side ;
7961: LD_ADDR_OWVAR 20
7965: PUSH
7966: LD_VAR 0 2
7970: ST_TO_ADDR
// uc_nation = nation ;
7971: LD_ADDR_OWVAR 21
7975: PUSH
7976: LD_VAR 0 5
7980: ST_TO_ADDR
// vc_engine = vehengine ;
7981: LD_ADDR_OWVAR 39
7985: PUSH
7986: LD_VAR 0 6
7990: ST_TO_ADDR
// vc_control = vehcontrol ;
7991: LD_ADDR_OWVAR 38
7995: PUSH
7996: LD_VAR 0 7
8000: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8001: LD_ADDR_OWVAR 40
8005: PUSH
8006: LD_VAR 0 9
8010: PUSH
8011: LD_INT 1
8013: PPUSH
8014: LD_VAR 0 9
8018: PPUSH
8019: CALL_OW 12
8023: ARRAY
8024: ST_TO_ADDR
// for j = 1 to ARWeapons do
8025: LD_ADDR_VAR 0 14
8029: PUSH
8030: DOUBLE
8031: LD_INT 1
8033: DEC
8034: ST_TO_ADDR
8035: LD_VAR 0 9
8039: PUSH
8040: FOR_TO
8041: IFFALSE 8275
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8043: LD_VAR 0 9
8047: PUSH
8048: LD_VAR 0 14
8052: ARRAY
8053: PUSH
8054: LD_INT 24
8056: EQUAL
8057: PUSH
8058: LD_VAR 0 9
8062: PUSH
8063: LD_VAR 0 14
8067: ARRAY
8068: PUSH
8069: LD_INT 22
8071: EQUAL
8072: OR
8073: PUSH
8074: LD_VAR 0 9
8078: PUSH
8079: LD_VAR 0 14
8083: ARRAY
8084: PUSH
8085: LD_INT 23
8087: EQUAL
8088: OR
8089: PUSH
8090: LD_VAR 0 9
8094: PUSH
8095: LD_VAR 0 14
8099: ARRAY
8100: PUSH
8101: LD_INT 30
8103: EQUAL
8104: OR
8105: IFFALSE 8154
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8107: LD_ADDR_VAR 0 18
8111: PUSH
8112: LD_INT 11
8114: PUSH
8115: LD_INT 12
8117: PUSH
8118: LD_INT 13
8120: PUSH
8121: LD_INT 14
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8130: LD_ADDR_OWVAR 37
8134: PUSH
8135: LD_VAR 0 18
8139: PUSH
8140: LD_INT 1
8142: PPUSH
8143: LD_VAR 0 18
8147: PPUSH
8148: CALL_OW 12
8152: ARRAY
8153: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8154: LD_VAR 0 9
8158: PUSH
8159: LD_VAR 0 14
8163: ARRAY
8164: PUSH
8165: LD_INT 29
8167: EQUAL
8168: PUSH
8169: LD_VAR 0 9
8173: PUSH
8174: LD_VAR 0 14
8178: ARRAY
8179: PUSH
8180: LD_INT 28
8182: EQUAL
8183: OR
8184: PUSH
8185: LD_VAR 0 9
8189: PUSH
8190: LD_VAR 0 14
8194: ARRAY
8195: PUSH
8196: LD_INT 27
8198: EQUAL
8199: OR
8200: PUSH
8201: LD_VAR 0 9
8205: PUSH
8206: LD_VAR 0 14
8210: ARRAY
8211: PUSH
8212: LD_INT 26
8214: EQUAL
8215: OR
8216: PUSH
8217: LD_VAR 0 9
8221: PUSH
8222: LD_VAR 0 14
8226: ARRAY
8227: PUSH
8228: LD_INT 25
8230: EQUAL
8231: OR
8232: IFFALSE 8273
// begin arChassisTab = [ 13 , 14 ] ;
8234: LD_ADDR_VAR 0 18
8238: PUSH
8239: LD_INT 13
8241: PUSH
8242: LD_INT 14
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8249: LD_ADDR_OWVAR 37
8253: PUSH
8254: LD_VAR 0 18
8258: PUSH
8259: LD_INT 1
8261: PPUSH
8262: LD_VAR 0 18
8266: PPUSH
8267: CALL_OW 12
8271: ARRAY
8272: ST_TO_ADDR
// end ; end ;
8273: GO 8040
8275: POP
8276: POP
// veh = CreateVehicle ;
8277: LD_ADDR_VAR 0 16
8281: PUSH
8282: CALL_OW 45
8286: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8287: LD_VAR 0 16
8291: PPUSH
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_INT 0
8299: PPUSH
8300: CALL_OW 49
// if vc_control = 1 then
8304: LD_OWVAR 38
8308: PUSH
8309: LD_INT 1
8311: EQUAL
8312: IFFALSE 8369
// begin hc_gallery =  ;
8314: LD_ADDR_OWVAR 33
8318: PUSH
8319: LD_STRING 
8321: ST_TO_ADDR
// hc_name =  ;
8322: LD_ADDR_OWVAR 26
8326: PUSH
8327: LD_STRING 
8329: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8330: LD_INT 0
8332: PPUSH
8333: LD_INT 3
8335: PPUSH
8336: LD_VAR 0 4
8340: PPUSH
8341: CALL_OW 380
// un = CreateHuman ;
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: CALL_OW 44
8354: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8355: LD_VAR 0 15
8359: PPUSH
8360: LD_VAR 0 16
8364: PPUSH
8365: CALL_OW 52
// end ; i = i + 1 ;
8369: LD_ADDR_VAR 0 13
8373: PUSH
8374: LD_VAR 0 13
8378: PUSH
8379: LD_INT 1
8381: PLUS
8382: ST_TO_ADDR
// end ; if nation = 3 then
8383: LD_VAR 0 5
8387: PUSH
8388: LD_INT 3
8390: EQUAL
8391: IFFALSE 8767
// begin uc_side = side ;
8393: LD_ADDR_OWVAR 20
8397: PUSH
8398: LD_VAR 0 2
8402: ST_TO_ADDR
// uc_nation = nation ;
8403: LD_ADDR_OWVAR 21
8407: PUSH
8408: LD_VAR 0 5
8412: ST_TO_ADDR
// vc_engine = vehengine ;
8413: LD_ADDR_OWVAR 39
8417: PUSH
8418: LD_VAR 0 6
8422: ST_TO_ADDR
// vc_control = vehcontrol ;
8423: LD_ADDR_OWVAR 38
8427: PUSH
8428: LD_VAR 0 7
8432: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8433: LD_ADDR_OWVAR 40
8437: PUSH
8438: LD_VAR 0 8
8442: PUSH
8443: LD_INT 1
8445: PPUSH
8446: LD_VAR 0 8
8450: PPUSH
8451: CALL_OW 12
8455: ARRAY
8456: ST_TO_ADDR
// for j = 1 to RuWeapons do
8457: LD_ADDR_VAR 0 14
8461: PUSH
8462: DOUBLE
8463: LD_INT 1
8465: DEC
8466: ST_TO_ADDR
8467: LD_VAR 0 8
8471: PUSH
8472: FOR_TO
8473: IFFALSE 8659
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8475: LD_VAR 0 8
8479: PUSH
8480: LD_VAR 0 14
8484: ARRAY
8485: PUSH
8486: LD_INT 42
8488: EQUAL
8489: PUSH
8490: LD_VAR 0 8
8494: PUSH
8495: LD_VAR 0 14
8499: ARRAY
8500: PUSH
8501: LD_INT 43
8503: EQUAL
8504: OR
8505: PUSH
8506: LD_VAR 0 8
8510: PUSH
8511: LD_VAR 0 14
8515: ARRAY
8516: PUSH
8517: LD_INT 44
8519: EQUAL
8520: OR
8521: PUSH
8522: LD_VAR 0 8
8526: PUSH
8527: LD_VAR 0 14
8531: ARRAY
8532: PUSH
8533: LD_INT 45
8535: EQUAL
8536: OR
8537: PUSH
8538: LD_VAR 0 8
8542: PUSH
8543: LD_VAR 0 14
8547: ARRAY
8548: PUSH
8549: LD_INT 49
8551: EQUAL
8552: OR
8553: IFFALSE 8590
// begin ruChassisTab = [ 24 ] ;
8555: LD_ADDR_VAR 0 17
8559: PUSH
8560: LD_INT 24
8562: PUSH
8563: EMPTY
8564: LIST
8565: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8566: LD_ADDR_OWVAR 37
8570: PUSH
8571: LD_VAR 0 17
8575: PUSH
8576: LD_INT 1
8578: PPUSH
8579: LD_VAR 0 17
8583: PPUSH
8584: CALL_OW 12
8588: ARRAY
8589: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
8590: LD_VAR 0 8
8594: PUSH
8595: LD_VAR 0 14
8599: ARRAY
8600: PUSH
8601: LD_INT 46
8603: EQUAL
8604: PUSH
8605: LD_VAR 0 8
8609: PUSH
8610: LD_VAR 0 14
8614: ARRAY
8615: PUSH
8616: LD_INT 47
8618: EQUAL
8619: OR
8620: IFFALSE 8657
// begin ruChassisTab = [ 24 ] ;
8622: LD_ADDR_VAR 0 17
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: EMPTY
8631: LIST
8632: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8633: LD_ADDR_OWVAR 37
8637: PUSH
8638: LD_VAR 0 17
8642: PUSH
8643: LD_INT 1
8645: PPUSH
8646: LD_VAR 0 17
8650: PPUSH
8651: CALL_OW 12
8655: ARRAY
8656: ST_TO_ADDR
// end ; end ;
8657: GO 8472
8659: POP
8660: POP
// veh = CreateVehicle ;
8661: LD_ADDR_VAR 0 16
8665: PUSH
8666: CALL_OW 45
8670: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8671: LD_VAR 0 16
8675: PPUSH
8676: LD_VAR 0 1
8680: PPUSH
8681: LD_INT 0
8683: PPUSH
8684: CALL_OW 49
// if vc_control = 1 then
8688: LD_OWVAR 38
8692: PUSH
8693: LD_INT 1
8695: EQUAL
8696: IFFALSE 8753
// begin hc_gallery =  ;
8698: LD_ADDR_OWVAR 33
8702: PUSH
8703: LD_STRING 
8705: ST_TO_ADDR
// hc_name =  ;
8706: LD_ADDR_OWVAR 26
8710: PUSH
8711: LD_STRING 
8713: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8714: LD_INT 0
8716: PPUSH
8717: LD_INT 3
8719: PPUSH
8720: LD_VAR 0 4
8724: PPUSH
8725: CALL_OW 380
// un = CreateHuman ;
8729: LD_ADDR_VAR 0 15
8733: PUSH
8734: CALL_OW 44
8738: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8739: LD_VAR 0 15
8743: PPUSH
8744: LD_VAR 0 16
8748: PPUSH
8749: CALL_OW 52
// end ; i = i + 1 ;
8753: LD_ADDR_VAR 0 13
8757: PUSH
8758: LD_VAR 0 13
8762: PUSH
8763: LD_INT 1
8765: PLUS
8766: ST_TO_ADDR
// end ; until i = vehCount ;
8767: LD_VAR 0 13
8771: PUSH
8772: LD_VAR 0 3
8776: EQUAL
8777: IFFALSE 7445
// repeat wait ( 0 0$1 ) ;
8779: LD_INT 35
8781: PPUSH
8782: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
8786: LD_ADDR_VAR 0 20
8790: PUSH
8791: LD_INT 22
8793: PUSH
8794: LD_VAR 0 2
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 21
8805: PUSH
8806: LD_INT 2
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 24
8815: PUSH
8816: LD_INT 250
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: ST_TO_ADDR
// if vehicleOK_list > 0 then
8833: LD_VAR 0 20
8837: PUSH
8838: LD_INT 0
8840: GREATER
8841: IFFALSE 9032
// begin for i in vehicleOK_list do
8843: LD_ADDR_VAR 0 13
8847: PUSH
8848: LD_VAR 0 20
8852: PUSH
8853: FOR_IN
8854: IFFALSE 9030
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8856: LD_ADDR_VAR 0 21
8860: PUSH
8861: LD_INT 22
8863: PUSH
8864: LD_VAR 0 11
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 69
8877: PPUSH
8878: LD_VAR 0 13
8882: PPUSH
8883: CALL_OW 74
8887: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8888: LD_ADDR_VAR 0 22
8892: PUSH
8893: LD_INT 22
8895: PUSH
8896: LD_VAR 0 11
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 59
8910: PUSH
8911: EMPTY
8912: LIST
8913: PUSH
8914: LD_INT 21
8916: PUSH
8917: LD_INT 1
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 21
8926: PUSH
8927: LD_INT 2
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: EMPTY
8945: LIST
8946: PPUSH
8947: CALL_OW 69
8951: PPUSH
8952: LD_VAR 0 13
8956: PPUSH
8957: CALL_OW 74
8961: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8962: LD_VAR 0 13
8966: PPUSH
8967: LD_VAR 0 21
8971: PPUSH
8972: CALL_OW 296
8976: PUSH
8977: LD_INT 8
8979: PLUS
8980: PUSH
8981: LD_VAR 0 13
8985: PPUSH
8986: LD_VAR 0 22
8990: PPUSH
8991: CALL_OW 296
8995: LESS
8996: IFFALSE 9014
// begin ComAttackUnit ( i , target1 ) ;
8998: LD_VAR 0 13
9002: PPUSH
9003: LD_VAR 0 21
9007: PPUSH
9008: CALL_OW 115
// end else
9012: GO 9028
// begin ComAttackUnit ( i , target2 ) ;
9014: LD_VAR 0 13
9018: PPUSH
9019: LD_VAR 0 22
9023: PPUSH
9024: CALL_OW 115
// end ; end ;
9028: GO 8853
9030: POP
9031: POP
// end ; until vehicleOK_list = [ ] ;
9032: LD_VAR 0 20
9036: PUSH
9037: EMPTY
9038: EQUAL
9039: IFFALSE 8779
// end ;
9041: LD_VAR 0 12
9045: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9046: LD_INT 0
9048: PPUSH
9049: PPUSH
9050: PPUSH
9051: PPUSH
// for i = 1 to 72 do
9052: LD_ADDR_VAR 0 5
9056: PUSH
9057: DOUBLE
9058: LD_INT 1
9060: DEC
9061: ST_TO_ADDR
9062: LD_INT 72
9064: PUSH
9065: FOR_TO
9066: IFFALSE 9124
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9068: LD_VAR 0 5
9072: PPUSH
9073: LD_VAR 0 1
9077: PPUSH
9078: CALL_OW 321
9082: PUSH
9083: LD_INT 1
9085: EQUAL
9086: PUSH
9087: LD_VAR 0 5
9091: PPUSH
9092: LD_VAR 0 3
9096: PPUSH
9097: CALL_OW 482
9101: PUSH
9102: LD_INT 1
9104: EQUAL
9105: AND
9106: IFFALSE 9122
// AddComResearch ( lab , i ) ;
9108: LD_VAR 0 2
9112: PPUSH
9113: LD_VAR 0 5
9117: PPUSH
9118: CALL_OW 184
9122: GO 9065
9124: POP
9125: POP
// end ;
9126: LD_VAR 0 4
9130: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9131: LD_INT 0
9133: PPUSH
9134: PPUSH
9135: PPUSH
9136: PPUSH
9137: PPUSH
9138: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9139: LD_ADDR_VAR 0 8
9143: PUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 313
9153: PUSH
9154: LD_EXP 35
9158: PUSH
9159: EMPTY
9160: LIST
9161: DIFF
9162: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9163: LD_ADDR_VAR 0 9
9167: PUSH
9168: LD_VAR 0 3
9172: PPUSH
9173: LD_INT 22
9175: PUSH
9176: LD_VAR 0 1
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 25
9187: PUSH
9188: LD_INT 2
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 24
9197: PUSH
9198: LD_INT 750
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: LD_INT 54
9210: PUSH
9211: EMPTY
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 70
9228: PUSH
9229: LD_EXP 35
9233: PUSH
9234: EMPTY
9235: LIST
9236: DIFF
9237: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9238: LD_ADDR_VAR 0 6
9242: PUSH
9243: LD_VAR 0 3
9247: PPUSH
9248: LD_INT 22
9250: PUSH
9251: LD_VAR 0 1
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 21
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: LD_INT 24
9275: PUSH
9276: LD_INT 1000
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: PPUSH
9295: CALL_OW 70
9299: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9300: LD_VAR 0 6
9304: NOT
9305: PUSH
9306: LD_INT 22
9308: PUSH
9309: LD_VAR 0 1
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 25
9320: PUSH
9321: LD_INT 2
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 24
9330: PUSH
9331: LD_INT 250
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 69
9347: NOT
9348: AND
9349: IFFALSE 9353
// exit ;
9351: GO 9535
// if buildings_list > 0 and engineerOkInside then
9353: LD_VAR 0 6
9357: PUSH
9358: LD_INT 0
9360: GREATER
9361: PUSH
9362: LD_VAR 0 8
9366: AND
9367: IFFALSE 9378
// ComExitBuilding ( engineerOkInside ) ;
9369: LD_VAR 0 8
9373: PPUSH
9374: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9378: LD_VAR 0 6
9382: PUSH
9383: LD_INT 0
9385: GREATER
9386: PUSH
9387: LD_VAR 0 9
9391: PUSH
9392: LD_INT 0
9394: GREATER
9395: AND
9396: IFFALSE 9416
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9398: LD_VAR 0 9
9402: PPUSH
9403: LD_VAR 0 6
9407: PUSH
9408: LD_INT 1
9410: ARRAY
9411: PPUSH
9412: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9416: LD_VAR 0 6
9420: PUSH
9421: LD_INT 0
9423: EQUAL
9424: PUSH
9425: LD_VAR 0 4
9429: PUSH
9430: LD_INT 0
9432: EQUAL
9433: AND
9434: PUSH
9435: LD_VAR 0 9
9439: PUSH
9440: LD_INT 0
9442: GREATER
9443: AND
9444: IFFALSE 9460
// ComEnterUnit ( engineerOkOutside , building ) ;
9446: LD_VAR 0 9
9450: PPUSH
9451: LD_VAR 0 2
9455: PPUSH
9456: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9460: LD_VAR 0 9
9464: PUSH
9465: LD_INT 0
9467: GREATER
9468: PUSH
9469: LD_VAR 0 6
9473: PUSH
9474: LD_INT 0
9476: EQUAL
9477: AND
9478: PUSH
9479: LD_VAR 0 4
9483: PUSH
9484: LD_INT 0
9486: GREATER
9487: AND
9488: IFFALSE 9535
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9490: LD_VAR 0 9
9494: PPUSH
9495: LD_VAR 0 4
9499: PUSH
9500: LD_INT 1
9502: ARRAY
9503: PPUSH
9504: LD_VAR 0 4
9508: PUSH
9509: LD_INT 2
9511: ARRAY
9512: PPUSH
9513: LD_VAR 0 4
9517: PUSH
9518: LD_INT 3
9520: ARRAY
9521: PPUSH
9522: LD_VAR 0 4
9526: PUSH
9527: LD_INT 4
9529: ARRAY
9530: PPUSH
9531: CALL_OW 145
// end ;
9535: LD_VAR 0 5
9539: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
9540: LD_INT 0
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
9551: LD_ADDR_VAR 0 6
9555: PUSH
9556: LD_INT 22
9558: PUSH
9559: LD_VAR 0 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 25
9570: PUSH
9571: LD_INT 4
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 23
9580: PUSH
9581: LD_INT 2
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 24
9590: PUSH
9591: LD_INT 251
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 69
9608: PUSH
9609: LD_EXP 35
9613: PUSH
9614: EMPTY
9615: LIST
9616: DIFF
9617: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
9618: LD_ADDR_VAR 0 7
9622: PUSH
9623: LD_VAR 0 3
9627: PPUSH
9628: LD_INT 22
9630: PUSH
9631: LD_VAR 0 1
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 23
9642: PUSH
9643: LD_INT 2
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 25
9652: PUSH
9653: LD_INT 4
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 50
9662: PUSH
9663: EMPTY
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PPUSH
9672: CALL_OW 70
9676: PUSH
9677: LD_EXP 35
9681: PUSH
9682: EMPTY
9683: LIST
9684: DIFF
9685: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9686: LD_ADDR_VAR 0 10
9690: PUSH
9691: LD_VAR 0 3
9695: PPUSH
9696: LD_INT 22
9698: PUSH
9699: LD_VAR 0 1
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 21
9710: PUSH
9711: LD_INT 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 3
9720: PUSH
9721: LD_INT 25
9723: PUSH
9724: LD_INT 3
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 3
9737: PUSH
9738: LD_INT 24
9740: PUSH
9741: LD_INT 750
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 70
9762: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9763: LD_ADDR_VAR 0 11
9767: PUSH
9768: LD_VAR 0 2
9772: PPUSH
9773: LD_INT 22
9775: PUSH
9776: LD_VAR 0 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 3
9797: PUSH
9798: LD_INT 25
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: LD_INT 1000
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 70
9839: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9840: LD_VAR 0 10
9844: NOT
9845: PUSH
9846: LD_VAR 0 11
9850: NOT
9851: AND
9852: PUSH
9853: LD_VAR 0 6
9857: NOT
9858: AND
9859: IFFALSE 9863
// exit ;
9861: GO 10097
// if damageUnits > 0 and sci_list > 0 then
9863: LD_VAR 0 10
9867: PUSH
9868: LD_INT 0
9870: GREATER
9871: PUSH
9872: LD_VAR 0 6
9876: PUSH
9877: LD_INT 0
9879: GREATER
9880: AND
9881: IFFALSE 9897
// ComMoveToArea ( damageUnits , healArea ) ;
9883: LD_VAR 0 10
9887: PPUSH
9888: LD_VAR 0 2
9892: PPUSH
9893: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9897: LD_VAR 0 11
9901: PUSH
9902: LD_INT 0
9904: GREATER
9905: PUSH
9906: LD_VAR 0 6
9910: PUSH
9911: LD_INT 0
9913: GREATER
9914: AND
9915: IFFALSE 9926
// ComExitBuilding ( sci_list ) ;
9917: LD_VAR 0 6
9921: PPUSH
9922: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9926: LD_VAR 0 11
9930: PUSH
9931: LD_INT 0
9933: GREATER
9934: PUSH
9935: LD_VAR 0 7
9939: PUSH
9940: LD_INT 0
9942: GREATER
9943: AND
9944: IFFALSE 9964
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9946: LD_VAR 0 7
9950: PPUSH
9951: LD_VAR 0 11
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PPUSH
9960: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9964: LD_VAR 0 10
9968: PUSH
9969: LD_INT 0
9971: EQUAL
9972: PUSH
9973: LD_VAR 0 11
9977: PUSH
9978: LD_INT 0
9980: EQUAL
9981: AND
9982: PUSH
9983: LD_VAR 0 7
9987: PUSH
9988: LD_INT 0
9990: GREATER
9991: AND
9992: IFFALSE 10097
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9994: LD_ADDR_VAR 0 12
9998: PUSH
9999: LD_INT 22
10001: PUSH
10002: LD_VAR 0 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 21
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 30
10023: PUSH
10024: LD_INT 8
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 69
10040: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10041: LD_ADDR_VAR 0 13
10045: PUSH
10046: LD_INT 1
10048: PPUSH
10049: LD_VAR 0 12
10053: PPUSH
10054: CALL_OW 12
10058: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10059: LD_VAR 0 7
10063: PPUSH
10064: LD_INT 3
10066: PUSH
10067: LD_INT 60
10069: PUSH
10070: EMPTY
10071: LIST
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 72
10081: PPUSH
10082: LD_VAR 0 12
10086: PUSH
10087: LD_VAR 0 13
10091: ARRAY
10092: PPUSH
10093: CALL_OW 120
// end ; end ;
10097: LD_VAR 0 5
10101: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10102: LD_INT 0
10104: PPUSH
10105: PPUSH
10106: PPUSH
10107: PPUSH
// tmpTab = [ ] ;
10108: LD_ADDR_VAR 0 6
10112: PUSH
10113: EMPTY
10114: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10115: LD_INT 22
10117: PUSH
10118: LD_VAR 0 1
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 30
10129: PUSH
10130: LD_INT 32
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PPUSH
10141: CALL_OW 69
10145: PUSH
10146: LD_INT 0
10148: GREATER
10149: IFFALSE 10232
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10151: LD_ADDR_VAR 0 4
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 30
10170: PUSH
10171: LD_INT 32
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: PUSH
10187: FOR_IN
10188: IFFALSE 10230
// begin for j in UnitsInside ( i ) do
10190: LD_ADDR_VAR 0 5
10194: PUSH
10195: LD_VAR 0 4
10199: PPUSH
10200: CALL_OW 313
10204: PUSH
10205: FOR_IN
10206: IFFALSE 10226
// tmpTab = tmpTab ^ j ;
10208: LD_ADDR_VAR 0 6
10212: PUSH
10213: LD_VAR 0 6
10217: PUSH
10218: LD_VAR 0 5
10222: ADD
10223: ST_TO_ADDR
10224: GO 10205
10226: POP
10227: POP
// end ;
10228: GO 10187
10230: POP
10231: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10232: LD_VAR 0 6
10236: PPUSH
10237: LD_VAR 0 2
10241: PPUSH
10242: CALL_OW 250
10246: PPUSH
10247: LD_VAR 0 2
10251: PPUSH
10252: CALL_OW 251
10256: PPUSH
10257: CALL_OW 114
// end ;
10261: LD_VAR 0 3
10265: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
10266: LD_INT 0
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
10274: PPUSH
10275: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10276: LD_ADDR_VAR 0 6
10280: PUSH
10281: LD_VAR 0 2
10285: PPUSH
10286: LD_INT 22
10288: PUSH
10289: LD_VAR 0 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 56
10300: PUSH
10301: EMPTY
10302: LIST
10303: PUSH
10304: LD_INT 24
10306: PUSH
10307: LD_INT 700
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 60
10319: PUSH
10320: EMPTY
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 2
10329: PUSH
10330: LD_INT 25
10332: PUSH
10333: LD_INT 1
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 25
10342: PUSH
10343: LD_INT 5
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: LD_INT 25
10352: PUSH
10353: LD_INT 8
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 25
10362: PUSH
10363: LD_INT 9
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: PPUSH
10384: CALL_OW 70
10388: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: LD_VAR 0 2
10398: PPUSH
10399: LD_INT 22
10401: PUSH
10402: LD_VAR 0 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 30
10413: PUSH
10414: LD_INT 32
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 58
10423: PUSH
10424: EMPTY
10425: LIST
10426: PUSH
10427: LD_INT 24
10429: PUSH
10430: LD_INT 251
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 70
10447: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
10448: LD_ADDR_VAR 0 9
10452: PUSH
10453: LD_VAR 0 2
10457: PPUSH
10458: LD_INT 22
10460: PUSH
10461: LD_VAR 0 1
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: LD_INT 2
10472: PUSH
10473: LD_INT 30
10475: PUSH
10476: LD_INT 4
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 30
10485: PUSH
10486: LD_INT 5
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 24
10500: PUSH
10501: LD_INT 251
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 70
10517: ST_TO_ADDR
// if barrackList > 0 then
10518: LD_VAR 0 9
10522: PUSH
10523: LD_INT 0
10525: GREATER
10526: IFFALSE 10674
// begin if turretList = 0 then
10528: LD_VAR 0 7
10532: PUSH
10533: LD_INT 0
10535: EQUAL
10536: IFFALSE 10578
// begin if soldiers_list > 0 then
10538: LD_VAR 0 6
10542: PUSH
10543: LD_INT 0
10545: GREATER
10546: IFFALSE 10576
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
10548: LD_VAR 0 6
10552: PPUSH
10553: LD_VAR 0 9
10557: PUSH
10558: LD_INT 1
10560: PPUSH
10561: LD_VAR 0 9
10565: PPUSH
10566: CALL_OW 12
10570: ARRAY
10571: PPUSH
10572: CALL_OW 120
// end else
10576: GO 10674
// begin for i in barrackList do
10578: LD_ADDR_VAR 0 4
10582: PUSH
10583: LD_VAR 0 9
10587: PUSH
10588: FOR_IN
10589: IFFALSE 10672
// begin insideUnits = UnitsInside ( i ) ;
10591: LD_ADDR_VAR 0 10
10595: PUSH
10596: LD_VAR 0 4
10600: PPUSH
10601: CALL_OW 313
10605: ST_TO_ADDR
// if insideUnits > 0 then
10606: LD_VAR 0 10
10610: PUSH
10611: LD_INT 0
10613: GREATER
10614: IFFALSE 10638
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
10616: LD_VAR 0 10
10620: PUSH
10621: LD_INT 1
10623: ARRAY
10624: PPUSH
10625: LD_VAR 0 7
10629: PUSH
10630: LD_INT 1
10632: ARRAY
10633: PPUSH
10634: CALL_OW 120
// if soldiers_list > 0 then
10638: LD_VAR 0 6
10642: PUSH
10643: LD_INT 0
10645: GREATER
10646: IFFALSE 10670
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
10648: LD_VAR 0 6
10652: PUSH
10653: LD_INT 1
10655: ARRAY
10656: PPUSH
10657: LD_VAR 0 7
10661: PUSH
10662: LD_INT 1
10664: ARRAY
10665: PPUSH
10666: CALL_OW 120
// end ;
10670: GO 10588
10672: POP
10673: POP
// end ; end ; end ;
10674: LD_VAR 0 3
10678: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10679: LD_INT 0
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
10685: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10686: LD_ADDR_VAR 0 6
10690: PUSH
10691: LD_INT 22
10693: PUSH
10694: LD_VAR 0 1
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 30
10708: PUSH
10709: LD_INT 31
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 30
10718: PUSH
10719: LD_INT 32
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 30
10728: PUSH
10729: LD_INT 33
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 30
10738: PUSH
10739: LD_INT 4
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 30
10748: PUSH
10749: LD_INT 5
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PPUSH
10768: CALL_OW 69
10772: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10773: LD_ADDR_VAR 0 7
10777: PUSH
10778: LD_INT 22
10780: PUSH
10781: LD_VAR 0 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 21
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 58
10802: PUSH
10803: EMPTY
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 69
10815: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10816: LD_VAR 0 6
10820: PUSH
10821: LD_INT 0
10823: GREATER
10824: PUSH
10825: LD_VAR 0 7
10829: PUSH
10830: LD_INT 0
10832: GREATER
10833: AND
10834: IFFALSE 10904
// begin for i in turretsList do
10836: LD_ADDR_VAR 0 4
10840: PUSH
10841: LD_VAR 0 6
10845: PUSH
10846: FOR_IN
10847: IFFALSE 10902
// begin for j in enemyBuildings do
10849: LD_ADDR_VAR 0 5
10853: PUSH
10854: LD_VAR 0 7
10858: PUSH
10859: FOR_IN
10860: IFFALSE 10898
// begin if GetDistUnits ( i , j ) < 20 then
10862: LD_VAR 0 4
10866: PPUSH
10867: LD_VAR 0 5
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 20
10879: LESS
10880: IFFALSE 10896
// begin ComAttackUnit ( i , j ) ;
10882: LD_VAR 0 4
10886: PPUSH
10887: LD_VAR 0 5
10891: PPUSH
10892: CALL_OW 115
// end ; end ;
10896: GO 10859
10898: POP
10899: POP
// end ;
10900: GO 10846
10902: POP
10903: POP
// end ; end ;
10904: LD_VAR 0 3
10908: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
10909: LD_INT 0
10911: PPUSH
10912: PPUSH
// for i = 1 to vehCount do
10913: LD_ADDR_VAR 0 9
10917: PUSH
10918: DOUBLE
10919: LD_INT 1
10921: DEC
10922: ST_TO_ADDR
10923: LD_VAR 0 3
10927: PUSH
10928: FOR_TO
10929: IFFALSE 10976
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
10931: LD_VAR 0 2
10935: PPUSH
10936: LD_VAR 0 7
10940: PPUSH
10941: LD_VAR 0 5
10945: PPUSH
10946: LD_VAR 0 6
10950: PPUSH
10951: LD_VAR 0 4
10955: PUSH
10956: LD_INT 1
10958: PPUSH
10959: LD_VAR 0 4
10963: PPUSH
10964: CALL_OW 12
10968: ARRAY
10969: PPUSH
10970: CALL_OW 185
10974: GO 10928
10976: POP
10977: POP
// end ;
10978: LD_VAR 0 8
10982: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
10983: LD_INT 0
10985: PPUSH
10986: PPUSH
10987: PPUSH
10988: PPUSH
10989: PPUSH
10990: PPUSH
// if oponent = 1 then
10991: LD_VAR 0 2
10995: PUSH
10996: LD_INT 1
10998: EQUAL
10999: IFFALSE 11188
// begin repeat wait ( 0 0$1 ) ;
11001: LD_INT 35
11003: PPUSH
11004: CALL_OW 67
// for j in legionVehicles do
11008: LD_ADDR_VAR 0 5
11012: PUSH
11013: LD_EXP 49
11017: PUSH
11018: FOR_IN
11019: IFFALSE 11177
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11021: LD_ADDR_VAR 0 7
11025: PUSH
11026: LD_INT 22
11028: PUSH
11029: LD_VAR 0 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 69
11042: PPUSH
11043: LD_VAR 0 5
11047: PPUSH
11048: CALL_OW 74
11052: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11053: LD_ADDR_VAR 0 8
11057: PUSH
11058: LD_INT 22
11060: PUSH
11061: LD_VAR 0 1
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 30
11072: PUSH
11073: LD_INT 32
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 59
11082: PUSH
11083: EMPTY
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: PPUSH
11094: CALL_OW 69
11098: PPUSH
11099: LD_VAR 0 5
11103: PPUSH
11104: CALL_OW 74
11108: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11109: LD_VAR 0 5
11113: PPUSH
11114: LD_VAR 0 7
11118: PPUSH
11119: CALL_OW 296
11123: PUSH
11124: LD_INT 8
11126: PLUS
11127: PUSH
11128: LD_VAR 0 5
11132: PPUSH
11133: LD_VAR 0 8
11137: PPUSH
11138: CALL_OW 296
11142: LESS
11143: IFFALSE 11161
// ComAttackUnit ( j , target1 ) else
11145: LD_VAR 0 5
11149: PPUSH
11150: LD_VAR 0 7
11154: PPUSH
11155: CALL_OW 115
11159: GO 11175
// ComAttackUnit ( j , target2 ) ;
11161: LD_VAR 0 5
11165: PPUSH
11166: LD_VAR 0 8
11170: PPUSH
11171: CALL_OW 115
// end ;
11175: GO 11018
11177: POP
11178: POP
// until legionVehicles = [ ] ;
11179: LD_EXP 49
11183: PUSH
11184: EMPTY
11185: EQUAL
11186: IFFALSE 11001
// end ; if oponent = 2 then
11188: LD_VAR 0 2
11192: PUSH
11193: LD_INT 2
11195: EQUAL
11196: IFFALSE 11385
// begin repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// for j in russianVehicles do
11205: LD_ADDR_VAR 0 5
11209: PUSH
11210: LD_EXP 55
11214: PUSH
11215: FOR_IN
11216: IFFALSE 11374
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11218: LD_ADDR_VAR 0 7
11222: PUSH
11223: LD_INT 22
11225: PUSH
11226: LD_VAR 0 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 69
11239: PPUSH
11240: LD_VAR 0 5
11244: PPUSH
11245: CALL_OW 74
11249: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11250: LD_ADDR_VAR 0 8
11254: PUSH
11255: LD_INT 22
11257: PUSH
11258: LD_VAR 0 1
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 30
11269: PUSH
11270: LD_INT 32
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 59
11279: PUSH
11280: EMPTY
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: PPUSH
11291: CALL_OW 69
11295: PPUSH
11296: LD_VAR 0 5
11300: PPUSH
11301: CALL_OW 74
11305: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11306: LD_VAR 0 5
11310: PPUSH
11311: LD_VAR 0 7
11315: PPUSH
11316: CALL_OW 296
11320: PUSH
11321: LD_INT 8
11323: PLUS
11324: PUSH
11325: LD_VAR 0 5
11329: PPUSH
11330: LD_VAR 0 8
11334: PPUSH
11335: CALL_OW 296
11339: LESS
11340: IFFALSE 11358
// ComAttackUnit ( j , target1 ) else
11342: LD_VAR 0 5
11346: PPUSH
11347: LD_VAR 0 7
11351: PPUSH
11352: CALL_OW 115
11356: GO 11372
// ComAttackUnit ( j , target2 ) ;
11358: LD_VAR 0 5
11362: PPUSH
11363: LD_VAR 0 8
11367: PPUSH
11368: CALL_OW 115
// end ;
11372: GO 11215
11374: POP
11375: POP
// until russianVehicles = [ ] ;
11376: LD_EXP 55
11380: PUSH
11381: EMPTY
11382: EQUAL
11383: IFFALSE 11198
// end ; if oponent = 3 then
11385: LD_VAR 0 2
11389: PUSH
11390: LD_INT 3
11392: EQUAL
11393: IFFALSE 11582
// begin repeat wait ( 0 0$1 ) ;
11395: LD_INT 35
11397: PPUSH
11398: CALL_OW 67
// for j in allianceVehicles do
11402: LD_ADDR_VAR 0 5
11406: PUSH
11407: LD_EXP 56
11411: PUSH
11412: FOR_IN
11413: IFFALSE 11571
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11415: LD_ADDR_VAR 0 7
11419: PUSH
11420: LD_INT 22
11422: PUSH
11423: LD_VAR 0 1
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PPUSH
11432: CALL_OW 69
11436: PPUSH
11437: LD_VAR 0 5
11441: PPUSH
11442: CALL_OW 74
11446: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11447: LD_ADDR_VAR 0 8
11451: PUSH
11452: LD_INT 22
11454: PUSH
11455: LD_VAR 0 1
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 30
11466: PUSH
11467: LD_INT 32
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 59
11476: PUSH
11477: EMPTY
11478: LIST
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: PPUSH
11488: CALL_OW 69
11492: PPUSH
11493: LD_VAR 0 5
11497: PPUSH
11498: CALL_OW 74
11502: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11503: LD_VAR 0 5
11507: PPUSH
11508: LD_VAR 0 7
11512: PPUSH
11513: CALL_OW 296
11517: PUSH
11518: LD_INT 8
11520: PLUS
11521: PUSH
11522: LD_VAR 0 5
11526: PPUSH
11527: LD_VAR 0 8
11531: PPUSH
11532: CALL_OW 296
11536: LESS
11537: IFFALSE 11555
// ComAttackUnit ( j , target1 ) else
11539: LD_VAR 0 5
11543: PPUSH
11544: LD_VAR 0 7
11548: PPUSH
11549: CALL_OW 115
11553: GO 11569
// ComAttackUnit ( j , target2 ) ;
11555: LD_VAR 0 5
11559: PPUSH
11560: LD_VAR 0 8
11564: PPUSH
11565: CALL_OW 115
// end ;
11569: GO 11412
11571: POP
11572: POP
// until allianceVehicles = [ ] ;
11573: LD_EXP 56
11577: PUSH
11578: EMPTY
11579: EQUAL
11580: IFFALSE 11395
// end ; end ;
11582: LD_VAR 0 3
11586: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
11587: LD_INT 0
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
11594: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
11595: LD_ADDR_VAR 0 6
11599: PUSH
11600: LD_INT 22
11602: PUSH
11603: LD_VAR 0 1
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 25
11614: PUSH
11615: LD_INT 9
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 69
11630: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11631: LD_ADDR_VAR 0 7
11635: PUSH
11636: LD_INT 81
11638: PUSH
11639: LD_VAR 0 1
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 3
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PPUSH
11669: CALL_OW 69
11673: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
11674: LD_ADDR_VAR 0 4
11678: PUSH
11679: LD_INT 1
11681: PPUSH
11682: LD_INT 3
11684: PPUSH
11685: CALL_OW 12
11689: ST_TO_ADDR
// for i = 1 to list do
11690: LD_ADDR_VAR 0 5
11694: PUSH
11695: DOUBLE
11696: LD_INT 1
11698: DEC
11699: ST_TO_ADDR
11700: LD_VAR 0 6
11704: PUSH
11705: FOR_TO
11706: IFFALSE 11908
// for ta in filter do
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: LD_VAR 0 7
11717: PUSH
11718: FOR_IN
11719: IFFALSE 11904
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
11721: LD_VAR 0 6
11725: PUSH
11726: LD_VAR 0 5
11730: ARRAY
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: CALL_OW 296
11741: PUSH
11742: LD_INT 15
11744: LESSEQUAL
11745: IFFALSE 11902
// begin case c of 1 :
11747: LD_VAR 0 4
11751: PUSH
11752: LD_INT 1
11754: DOUBLE
11755: EQUAL
11756: IFTRUE 11760
11758: GO 11798
11760: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
11761: LD_VAR 0 6
11765: PUSH
11766: LD_VAR 0 5
11770: ARRAY
11771: PPUSH
11772: LD_VAR 0 3
11776: PPUSH
11777: CALL_OW 250
11781: PPUSH
11782: LD_VAR 0 3
11786: PPUSH
11787: CALL_OW 251
11791: PPUSH
11792: CALL_OW 154
11796: GO 11902
11798: LD_INT 2
11800: DOUBLE
11801: EQUAL
11802: IFTRUE 11806
11804: GO 11870
11806: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
11807: LD_VAR 0 6
11811: PUSH
11812: LD_VAR 0 5
11816: ARRAY
11817: PPUSH
11818: LD_VAR 0 3
11822: PPUSH
11823: CALL_OW 250
11827: PUSH
11828: LD_INT 1
11830: NEG
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: CALL_OW 12
11839: PLUS
11840: PPUSH
11841: LD_VAR 0 3
11845: PPUSH
11846: CALL_OW 251
11850: PUSH
11851: LD_INT 1
11853: NEG
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 12
11862: PLUS
11863: PPUSH
11864: CALL_OW 153
11868: GO 11902
11870: LD_INT 3
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11901
11878: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
11879: LD_VAR 0 6
11883: PUSH
11884: LD_VAR 0 5
11888: ARRAY
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: CALL_OW 115
11899: GO 11902
11901: POP
// end ; end ;
11902: GO 11718
11904: POP
11905: POP
11906: GO 11705
11908: POP
11909: POP
// end ;
11910: LD_VAR 0 2
11914: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
11915: LD_INT 0
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
11921: LD_INT 22
11923: PUSH
11924: LD_VAR 0 1
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: LD_INT 21
11935: PUSH
11936: LD_INT 2
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 34
11945: PUSH
11946: LD_INT 49
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_INT 0
11965: EQUAL
11966: IFFALSE 11970
// exit ;
11968: GO 12225
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
11970: LD_INT 22
11972: PUSH
11973: LD_VAR 0 1
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 21
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 34
11994: PUSH
11995: LD_INT 49
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: PUSH
12012: LD_INT 0
12014: GREATER
12015: IFFALSE 12225
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12017: LD_ADDR_VAR 0 6
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_VAR 0 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 21
12036: PUSH
12037: LD_INT 2
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 34
12046: PUSH
12047: LD_INT 49
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 69
12063: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12064: LD_INT 105
12066: PPUSH
12067: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12071: LD_ADDR_VAR 0 4
12075: PUSH
12076: LD_VAR 0 6
12080: PPUSH
12081: LD_INT 3
12083: PUSH
12084: LD_INT 60
12086: PUSH
12087: EMPTY
12088: LIST
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PPUSH
12094: CALL_OW 72
12098: PUSH
12099: FOR_IN
12100: IFFALSE 12213
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12102: LD_ADDR_VAR 0 5
12106: PUSH
12107: LD_INT 81
12109: PUSH
12110: LD_VAR 0 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 101
12121: PUSH
12122: LD_VAR 0 2
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: LD_INT 21
12136: PUSH
12137: LD_INT 1
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 3
12146: PUSH
12147: LD_INT 58
12149: PUSH
12150: EMPTY
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: PPUSH
12167: CALL_OW 69
12171: PPUSH
12172: LD_VAR 0 4
12176: PPUSH
12177: CALL_OW 74
12181: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12182: LD_VAR 0 4
12186: PPUSH
12187: LD_VAR 0 5
12191: PPUSH
12192: CALL_OW 250
12196: PPUSH
12197: LD_VAR 0 5
12201: PPUSH
12202: CALL_OW 251
12206: PPUSH
12207: CALL_OW 111
// end ;
12211: GO 12099
12213: POP
12214: POP
// until vehs = 0 ;
12215: LD_VAR 0 6
12219: PUSH
12220: LD_INT 0
12222: EQUAL
12223: IFFALSE 12017
// end ; end_of_file
12225: LD_VAR 0 3
12229: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
12230: LD_VAR 0 1
12234: PUSH
12235: LD_INT 235
12237: EQUAL
12238: PUSH
12239: LD_VAR 0 2
12243: PPUSH
12244: CALL_OW 255
12248: PUSH
12249: LD_INT 4
12251: EQUAL
12252: AND
12253: IFFALSE 12329
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
12255: LD_INT 235
12257: PPUSH
12258: LD_INT 84
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
12268: LD_INT 235
12270: PPUSH
12271: LD_INT 68
12273: PPUSH
12274: LD_INT 100
12276: PPUSH
12277: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
12281: LD_INT 235
12283: PPUSH
12284: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
12288: LD_INT 235
12290: PPUSH
12291: LD_INT 48
12293: PPUSH
12294: LD_INT 69
12296: PPUSH
12297: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
12301: LD_INT 235
12303: PPUSH
12304: LD_INT 39
12306: PPUSH
12307: LD_INT 61
12309: PPUSH
12310: CALL_OW 171
// wait ( 0 0$10 ) ;
12314: LD_INT 350
12316: PPUSH
12317: CALL_OW 67
// powellUnloadCargo = 1 ;
12321: LD_ADDR_EXP 63
12325: PUSH
12326: LD_INT 1
12328: ST_TO_ADDR
// end ; end ;
12329: PPOPN 2
12331: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
12332: LD_INT 0
12334: PPUSH
12335: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12336: LD_ADDR_VAR 0 3
12340: PUSH
12341: LD_INT 22
12343: PUSH
12344: LD_INT 4
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 21
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 56
12363: PUSH
12364: EMPTY
12365: LIST
12366: PUSH
12367: LD_INT 3
12369: PUSH
12370: LD_INT 60
12372: PUSH
12373: EMPTY
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 69
12390: PUSH
12391: LD_EXP 17
12395: PUSH
12396: EMPTY
12397: LIST
12398: DIFF
12399: ST_TO_ADDR
// if GetSide ( building ) = 4 then
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 255
12409: PUSH
12410: LD_INT 4
12412: EQUAL
12413: IFFALSE 12544
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
12415: LD_INT 22
12417: PUSH
12418: LD_INT 4
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 30
12427: PUSH
12428: LD_INT 8
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PPUSH
12439: CALL_OW 69
12443: PUSH
12444: LD_INT 1
12446: EQUAL
12447: IFFALSE 12544
// begin for i = 1 to 3 do
12449: LD_ADDR_VAR 0 2
12453: PUSH
12454: DOUBLE
12455: LD_INT 1
12457: DEC
12458: ST_TO_ADDR
12459: LD_INT 3
12461: PUSH
12462: FOR_TO
12463: IFFALSE 12527
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
12465: LD_VAR 0 3
12469: PUSH
12470: LD_VAR 0 2
12474: ARRAY
12475: PPUSH
12476: LD_INT 3
12478: PUSH
12479: LD_INT 25
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PPUSH
12493: CALL_OW 72
12497: PPUSH
12498: LD_VAR 0 1
12502: PPUSH
12503: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
12507: LD_VAR 0 3
12511: PUSH
12512: LD_VAR 0 2
12516: ARRAY
12517: PPUSH
12518: LD_INT 4
12520: PPUSH
12521: CALL_OW 183
// end ;
12525: GO 12462
12527: POP
12528: POP
// ResAllTechs ( 4 , building , 1 ) ;
12529: LD_INT 4
12531: PPUSH
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL 9046 0 3
// end ; if GetSide ( building ) = 8 then
12544: LD_VAR 0 1
12548: PPUSH
12549: CALL_OW 255
12553: PUSH
12554: LD_INT 8
12556: EQUAL
12557: IFFALSE 12742
// begin if GetNation ( building ) = 3 then
12559: LD_VAR 0 1
12563: PPUSH
12564: CALL_OW 248
12568: PUSH
12569: LD_INT 3
12571: EQUAL
12572: IFFALSE 12742
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
12574: LD_EXP 35
12578: PPUSH
12579: LD_INT 73
12581: PPUSH
12582: LD_INT 16
12584: PPUSH
12585: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
12589: LD_EXP 35
12593: PPUSH
12594: LD_INT 21
12596: PPUSH
12597: LD_INT 74
12599: PPUSH
12600: LD_INT 12
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL_OW 205
// wait ( 0 0$2 ) ;
12610: LD_INT 70
12612: PPUSH
12613: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
12617: LD_EXP 35
12621: PPUSH
12622: LD_INT 22
12624: PUSH
12625: LD_INT 8
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: LD_INT 3
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 23
12644: PUSH
12645: LD_INT 3
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_INT 1
12664: ARRAY
12665: PPUSH
12666: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
12670: LD_EXP 35
12674: PPUSH
12675: LD_INT 3
12677: PPUSH
12678: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
12682: LD_INT 22
12684: PUSH
12685: LD_INT 8
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 23
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 69
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PPUSH
12726: LD_INT 24
12728: PPUSH
12729: LD_INT 3
12731: PPUSH
12732: LD_INT 3
12734: PPUSH
12735: LD_INT 48
12737: PPUSH
12738: CALL_OW 185
// end ; end ; end ;
12742: PPOPN 3
12744: END
// on BuildingComplete ( building ) do var powellPeople ;
12745: LD_INT 0
12747: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
12748: LD_VAR 0 1
12752: PPUSH
12753: CALL_OW 255
12757: PUSH
12758: LD_INT 4
12760: EQUAL
12761: PUSH
12762: LD_VAR 0 1
12766: PPUSH
12767: CALL_OW 266
12771: PUSH
12772: LD_INT 17
12774: EQUAL
12775: AND
12776: IFFALSE 13058
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12778: LD_ADDR_VAR 0 2
12782: PUSH
12783: LD_INT 22
12785: PUSH
12786: LD_INT 4
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 21
12795: PUSH
12796: LD_INT 1
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 56
12805: PUSH
12806: EMPTY
12807: LIST
12808: PUSH
12809: LD_INT 3
12811: PUSH
12812: LD_INT 60
12814: PUSH
12815: EMPTY
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: PPUSH
12828: CALL_OW 69
12832: PUSH
12833: LD_EXP 17
12837: PUSH
12838: EMPTY
12839: LIST
12840: DIFF
12841: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
12842: LD_INT 22
12844: PUSH
12845: LD_INT 4
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 21
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: LD_INT 32
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: PPUSH
12877: CALL_OW 69
12881: PUSH
12882: LD_INT 1
12884: ARRAY
12885: PPUSH
12886: LD_INT 6
12888: PPUSH
12889: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
12893: LD_INT 22
12895: PUSH
12896: LD_INT 4
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 21
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 32
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: LD_INT 2
12935: ARRAY
12936: PPUSH
12937: LD_INT 5
12939: PPUSH
12940: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
12944: LD_VAR 0 2
12948: PUSH
12949: LD_INT 1
12951: ARRAY
12952: PPUSH
12953: LD_INT 22
12955: PUSH
12956: LD_INT 4
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 30
12975: PUSH
12976: LD_INT 32
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 69
12992: PUSH
12993: LD_INT 1
12995: ARRAY
12996: PPUSH
12997: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13001: LD_VAR 0 2
13005: PUSH
13006: LD_INT 2
13008: ARRAY
13009: PPUSH
13010: LD_INT 22
13012: PUSH
13013: LD_INT 4
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 21
13022: PUSH
13023: LD_INT 3
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 30
13032: PUSH
13033: LD_INT 32
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: PPUSH
13045: CALL_OW 69
13049: PUSH
13050: LD_INT 2
13052: ARRAY
13053: PPUSH
13054: CALL_OW 120
// end ; if GetSide ( building ) = 8 then
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 255
13067: PUSH
13068: LD_INT 8
13070: EQUAL
13071: IFFALSE 13097
// begin if GetBType ( building ) = b_workshop then
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 266
13082: PUSH
13083: LD_INT 2
13085: EQUAL
13086: IFFALSE 13097
// ComUpgrade ( building ) ;
13088: LD_VAR 0 1
13092: PPUSH
13093: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
13097: LD_VAR 0 1
13101: PPUSH
13102: CALL_OW 255
13106: PUSH
13107: LD_INT 3
13109: EQUAL
13110: IFFALSE 13184
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13112: LD_ADDR_EXP 86
13116: PUSH
13117: LD_EXP 86
13121: PPUSH
13122: LD_INT 1
13124: PPUSH
13125: CALL_OW 3
13129: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13130: LD_ADDR_EXP 86
13134: PUSH
13135: LD_EXP 86
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 3
13147: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13148: LD_ADDR_EXP 86
13152: PUSH
13153: LD_EXP 86
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 3
13165: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13166: LD_ADDR_EXP 86
13170: PUSH
13171: LD_EXP 86
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 3
13183: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
13184: LD_VAR 0 1
13188: PPUSH
13189: CALL_OW 255
13193: PUSH
13194: LD_INT 8
13196: EQUAL
13197: IFFALSE 13271
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13199: LD_ADDR_EXP 85
13203: PUSH
13204: LD_EXP 85
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 3
13216: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13217: LD_ADDR_EXP 85
13221: PUSH
13222: LD_EXP 85
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 3
13234: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13235: LD_ADDR_EXP 85
13239: PUSH
13240: LD_EXP 85
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 3
13252: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13253: LD_ADDR_EXP 85
13257: PUSH
13258: LD_EXP 85
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 3
13270: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
13271: LD_VAR 0 1
13275: PPUSH
13276: CALL_OW 255
13280: PUSH
13281: LD_INT 7
13283: EQUAL
13284: IFFALSE 13358
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13286: LD_ADDR_EXP 87
13290: PUSH
13291: LD_EXP 87
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 3
13303: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13304: LD_ADDR_EXP 87
13308: PUSH
13309: LD_EXP 87
13313: PPUSH
13314: LD_INT 1
13316: PPUSH
13317: CALL_OW 3
13321: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13322: LD_ADDR_EXP 87
13326: PUSH
13327: LD_EXP 87
13331: PPUSH
13332: LD_INT 1
13334: PPUSH
13335: CALL_OW 3
13339: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13340: LD_ADDR_EXP 87
13344: PUSH
13345: LD_EXP 87
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 3
13357: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
13358: LD_VAR 0 1
13362: PPUSH
13363: CALL_OW 255
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: IFFALSE 13438
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 266
13382: PUSH
13383: LD_INT 32
13385: EQUAL
13386: PUSH
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL_OW 266
13396: PUSH
13397: LD_INT 33
13399: EQUAL
13400: OR
13401: IFFALSE 13438
// AddComPlaceWeapon ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
13403: LD_VAR 0 1
13407: PPUSH
13408: LD_INT 46
13410: PUSH
13411: LD_INT 47
13413: PUSH
13414: LD_INT 45
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 1
13424: PPUSH
13425: LD_INT 3
13427: PPUSH
13428: CALL_OW 12
13432: ARRAY
13433: PPUSH
13434: CALL_OW 208
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
13438: LD_VAR 0 1
13442: PPUSH
13443: CALL_OW 255
13447: PUSH
13448: LD_INT 8
13450: EQUAL
13451: PUSH
13452: LD_VAR 0 1
13456: PPUSH
13457: CALL_OW 266
13461: PUSH
13462: LD_INT 32
13464: EQUAL
13465: AND
13466: IFFALSE 13499
// begin AddComPlaceWeapon ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
13468: LD_VAR 0 1
13472: PPUSH
13473: LD_INT 28
13475: PUSH
13476: LD_INT 27
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 1
13485: PPUSH
13486: LD_INT 2
13488: PPUSH
13489: CALL_OW 12
13493: ARRAY
13494: PPUSH
13495: CALL_OW 208
// end ; end ;
13499: PPOPN 2
13501: END
// on EnterBuilding ( building , human ) do begin end ;
13502: PPOPN 2
13504: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
13505: LD_VAR 0 1
13509: PPUSH
13510: CALL_OW 255
13514: PUSH
13515: LD_INT 6
13517: EQUAL
13518: IFFALSE 13536
// ruBehs = ruBehs ^ vehicle ;
13520: LD_ADDR_EXP 53
13524: PUSH
13525: LD_EXP 53
13529: PUSH
13530: LD_VAR 0 1
13534: ADD
13535: ST_TO_ADDR
// end ;
13536: PPOPN 1
13538: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb ;
13539: LD_INT 0
13541: PPUSH
// begin if vehicle = powellVeh then
13542: LD_VAR 0 1
13546: PUSH
13547: LD_EXP 66
13551: EQUAL
13552: IFFALSE 13568
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
13554: LD_VAR 0 1
13558: PPUSH
13559: CALL_OW 313
13563: PPUSH
13564: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
13568: LD_VAR 0 1
13572: PPUSH
13573: CALL_OW 255
13577: PUSH
13578: LD_INT 4
13580: EQUAL
13581: IFFALSE 13598
// AddComMoveXY ( vehicle , 58 , 63 ) ;
13583: LD_VAR 0 1
13587: PPUSH
13588: LD_INT 58
13590: PPUSH
13591: LD_INT 63
13593: PPUSH
13594: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
13598: LD_VAR 0 1
13602: PPUSH
13603: CALL_OW 255
13607: PUSH
13608: LD_INT 4
13610: EQUAL
13611: PUSH
13612: LD_EXP 62
13616: PUSH
13617: LD_INT 2
13619: EQUAL
13620: AND
13621: PUSH
13622: LD_VAR 0 1
13626: PPUSH
13627: CALL_OW 264
13631: PUSH
13632: LD_INT 6
13634: EQUAL
13635: AND
13636: IFFALSE 13690
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
13638: LD_EXP 59
13642: PUSH
13643: LD_INT 5
13645: ARRAY
13646: PPUSH
13647: CALL_OW 122
// wait ( 0 0$1 ) ;
13651: LD_INT 35
13653: PPUSH
13654: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
13658: LD_EXP 59
13662: PUSH
13663: LD_INT 5
13665: ARRAY
13666: PPUSH
13667: LD_INT 85
13669: PPUSH
13670: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
13674: LD_EXP 59
13678: PUSH
13679: LD_INT 5
13681: ARRAY
13682: PPUSH
13683: LD_INT 3
13685: PPUSH
13686: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 255
13699: PUSH
13700: LD_INT 4
13702: EQUAL
13703: PUSH
13704: LD_EXP 62
13708: PUSH
13709: LD_INT 2
13711: EQUAL
13712: AND
13713: PUSH
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 264
13723: PUSH
13724: LD_INT 3
13726: EQUAL
13727: AND
13728: IFFALSE 13755
// begin powellVeh = vehicle ;
13730: LD_ADDR_EXP 66
13734: PUSH
13735: LD_VAR 0 1
13739: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
13740: LD_VAR 0 1
13744: PPUSH
13745: LD_INT 49
13747: PPUSH
13748: LD_INT 74
13750: PPUSH
13751: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL_OW 255
13764: PUSH
13765: LD_INT 8
13767: EQUAL
13768: PUSH
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 248
13778: PUSH
13779: LD_INT 2
13781: EQUAL
13782: AND
13783: PUSH
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 247
13793: PUSH
13794: LD_INT 2
13796: EQUAL
13797: AND
13798: IFFALSE 13834
// begin legionVehicles = legionVehicles ^ vehicle ;
13800: LD_ADDR_EXP 49
13804: PUSH
13805: LD_EXP 49
13809: PUSH
13810: LD_VAR 0 1
13814: ADD
13815: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_EXP 50
13825: PUSH
13826: LD_INT 1
13828: ARRAY
13829: PPUSH
13830: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
13834: LD_VAR 0 1
13838: PPUSH
13839: CALL_OW 255
13843: PUSH
13844: LD_INT 8
13846: EQUAL
13847: PUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 248
13857: PUSH
13858: LD_INT 3
13860: EQUAL
13861: AND
13862: IFFALSE 14153
// begin ChangeMissionObjectives ( MlegionDel ) ;
13864: LD_STRING MlegionDel
13866: PPUSH
13867: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
13871: LD_ADDR_VAR 0 3
13875: PUSH
13876: LD_INT 1
13878: PPUSH
13879: LD_INT 2
13881: PPUSH
13882: CALL_OW 12
13886: ST_TO_ADDR
// legionRocket = vehicle ;
13887: LD_ADDR_EXP 91
13891: PUSH
13892: LD_VAR 0 1
13896: ST_TO_ADDR
// DialogueOn ;
13897: CALL_OW 6
// if legionBomb = 1 then
13901: LD_VAR 0 3
13905: PUSH
13906: LD_INT 1
13908: EQUAL
13909: IFFALSE 14033
// begin if Kurt then
13911: LD_EXP 30
13915: IFFALSE 13931
// Say ( Kurt , D12-Kurt-1 ) else
13917: LD_EXP 30
13921: PPUSH
13922: LD_STRING D12-Kurt-1
13924: PPUSH
13925: CALL_OW 88
13929: GO 13993
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
13931: LD_INT 22
13933: PUSH
13934: LD_INT 8
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 1
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 26
13963: PUSH
13964: LD_INT 1
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 69
13981: PUSH
13982: LD_INT 2
13984: ARRAY
13985: PPUSH
13986: LD_STRING D12-Kurt-1
13988: PPUSH
13989: CALL_OW 88
// DialogueOff ;
13993: CALL_OW 7
// wait ( 0 0$3 ) ;
13997: LD_INT 105
13999: PPUSH
14000: CALL_OW 67
// AddComAttackPlace ( legionRocket , GetX ( JMM ) , GetY ( JMM ) ) ;
14004: LD_EXP 91
14008: PPUSH
14009: LD_EXP 1
14013: PPUSH
14014: CALL_OW 250
14018: PPUSH
14019: LD_EXP 1
14023: PPUSH
14024: CALL_OW 251
14028: PPUSH
14029: CALL_OW 176
// end ; if legionBomb = 2 then
14033: LD_VAR 0 3
14037: PUSH
14038: LD_INT 2
14040: EQUAL
14041: IFFALSE 14153
// begin if Kurt then
14043: LD_EXP 30
14047: IFFALSE 14063
// Say ( Kurt , D12a-Kurt-1 ) else
14049: LD_EXP 30
14053: PPUSH
14054: LD_STRING D12a-Kurt-1
14056: PPUSH
14057: CALL_OW 88
14061: GO 14125
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
14063: LD_INT 22
14065: PUSH
14066: LD_INT 8
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 25
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 26
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: PPUSH
14109: CALL_OW 69
14113: PUSH
14114: LD_INT 2
14116: ARRAY
14117: PPUSH
14118: LD_STRING D12a-Kurt-11
14120: PPUSH
14121: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
14125: LD_EXP 28
14129: PPUSH
14130: LD_STRING D12a-Roth-1
14132: PPUSH
14133: CALL_OW 94
// DialogueOff ;
14137: CALL_OW 7
// ComAttackUnit ( legionRocket , RuDep2 ) ;
14141: LD_EXP 91
14145: PPUSH
14146: LD_INT 23
14148: PPUSH
14149: CALL_OW 115
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 255
14162: PUSH
14163: LD_INT 3
14165: EQUAL
14166: PUSH
14167: LD_VAR 0 1
14171: PPUSH
14172: CALL_OW 248
14176: PUSH
14177: LD_INT 3
14179: EQUAL
14180: AND
14181: PUSH
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 247
14191: PUSH
14192: LD_INT 2
14194: EQUAL
14195: AND
14196: IFFALSE 14214
// RussianVehicles = RussianVehicles ^ vehicle ;
14198: LD_ADDR_EXP 55
14202: PUSH
14203: LD_EXP 55
14207: PUSH
14208: LD_VAR 0 1
14212: ADD
14213: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 255
14223: PUSH
14224: LD_INT 7
14226: EQUAL
14227: PUSH
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 247
14237: PUSH
14238: LD_INT 2
14240: EQUAL
14241: AND
14242: IFFALSE 14301
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
14244: LD_ADDR_EXP 56
14248: PUSH
14249: LD_EXP 56
14253: PUSH
14254: LD_VAR 0 1
14258: ADD
14259: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 263
14269: PUSH
14270: LD_INT 2
14272: EQUAL
14273: IFFALSE 14301
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
14275: LD_VAR 0 1
14279: PPUSH
14280: LD_EXP 57
14284: PUSH
14285: LD_INT 1
14287: PPUSH
14288: LD_INT 3
14290: PPUSH
14291: CALL_OW 12
14295: ARRAY
14296: PPUSH
14297: CALL_OW 135
// end ; end ;
14301: PPOPN 3
14303: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL_OW 255
14313: PUSH
14314: LD_INT 4
14316: EQUAL
14317: PUSH
14318: LD_EXP 62
14322: PUSH
14323: LD_INT 1
14325: EQUAL
14326: AND
14327: IFFALSE 14430
// begin ComEnterUnit ( human , AmFact ) ;
14329: LD_VAR 0 2
14333: PPUSH
14334: LD_INT 85
14336: PPUSH
14337: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
14341: LD_VAR 0 2
14345: PPUSH
14346: CALL_OW 258
14350: PUSH
14351: LD_INT 1
14353: EQUAL
14354: PUSH
14355: LD_EXP 93
14359: PUSH
14360: LD_INT 0
14362: EQUAL
14363: AND
14364: IFFALSE 14430
// begin blockEvent1 = 1 ;
14366: LD_ADDR_EXP 93
14370: PUSH
14371: LD_INT 1
14373: ST_TO_ADDR
// startAttacks = 1 ;
14374: LD_ADDR_EXP 65
14378: PUSH
14379: LD_INT 1
14381: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
14382: LD_VAR 0 2
14386: PPUSH
14387: LD_STRING D4a-Sol1-1
14389: PPUSH
14390: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
14394: LD_EXP 17
14398: PPUSH
14399: LD_STRING D4a-Pow-1
14401: PPUSH
14402: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
14406: LD_VAR 0 2
14410: PPUSH
14411: LD_STRING D4a-Sol1-2
14413: PPUSH
14414: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
14418: LD_EXP 17
14422: PPUSH
14423: LD_STRING D4a-Pow-2
14425: PPUSH
14426: CALL_OW 88
// end ; end ; end ;
14430: PPOPN 2
14432: END
// on UnitDestroyed ( unit ) do var i ;
14433: LD_INT 0
14435: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14436: LD_VAR 0 1
14440: PPUSH
14441: CALL_OW 255
14445: PUSH
14446: LD_INT 1
14448: EQUAL
14449: PUSH
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 247
14459: PUSH
14460: LD_INT 1
14462: EQUAL
14463: AND
14464: IFFALSE 14480
// unitLost = unitLost + 1 ;
14466: LD_ADDR_EXP 90
14470: PUSH
14471: LD_EXP 90
14475: PUSH
14476: LD_INT 1
14478: PLUS
14479: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
14480: LD_VAR 0 1
14484: PPUSH
14485: CALL_OW 255
14489: PUSH
14490: LD_INT 4
14492: EQUAL
14493: PUSH
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 247
14503: PUSH
14504: LD_INT 1
14506: EQUAL
14507: AND
14508: IFFALSE 14558
// begin for i in amUnitsAttack do
14510: LD_ADDR_VAR 0 2
14514: PUSH
14515: LD_EXP 59
14519: PUSH
14520: FOR_IN
14521: IFFALSE 14556
// if i = unit then
14523: LD_VAR 0 2
14527: PUSH
14528: LD_VAR 0 1
14532: EQUAL
14533: IFFALSE 14554
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
14535: LD_ADDR_EXP 59
14539: PUSH
14540: LD_EXP 59
14544: PUSH
14545: LD_VAR 0 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: DIFF
14553: ST_TO_ADDR
14554: GO 14520
14556: POP
14557: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 255
14567: PUSH
14568: LD_INT 8
14570: EQUAL
14571: PUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: CALL_OW 247
14581: PUSH
14582: LD_INT 2
14584: EQUAL
14585: AND
14586: PUSH
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL_OW 248
14596: PUSH
14597: LD_INT 2
14599: EQUAL
14600: AND
14601: IFFALSE 14651
// begin for i in legionVehicles do
14603: LD_ADDR_VAR 0 2
14607: PUSH
14608: LD_EXP 49
14612: PUSH
14613: FOR_IN
14614: IFFALSE 14649
// if i = unit then
14616: LD_VAR 0 2
14620: PUSH
14621: LD_VAR 0 1
14625: EQUAL
14626: IFFALSE 14647
// legionVehicles = legionVehicles diff [ unit ] ;
14628: LD_ADDR_EXP 49
14632: PUSH
14633: LD_EXP 49
14637: PUSH
14638: LD_VAR 0 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: DIFF
14646: ST_TO_ADDR
14647: GO 14613
14649: POP
14650: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 255
14660: PUSH
14661: LD_INT 3
14663: EQUAL
14664: PUSH
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 247
14674: PUSH
14675: LD_INT 2
14677: EQUAL
14678: AND
14679: IFFALSE 14729
// begin for i in RussianVehicles do
14681: LD_ADDR_VAR 0 2
14685: PUSH
14686: LD_EXP 55
14690: PUSH
14691: FOR_IN
14692: IFFALSE 14727
// if i = unit then
14694: LD_VAR 0 2
14698: PUSH
14699: LD_VAR 0 1
14703: EQUAL
14704: IFFALSE 14725
// RussianVehicles = RussianVehicles diff [ unit ] ;
14706: LD_ADDR_EXP 55
14710: PUSH
14711: LD_EXP 55
14715: PUSH
14716: LD_VAR 0 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: DIFF
14724: ST_TO_ADDR
14725: GO 14691
14727: POP
14728: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 255
14738: PUSH
14739: LD_INT 7
14741: EQUAL
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 247
14752: PUSH
14753: LD_INT 2
14755: EQUAL
14756: AND
14757: IFFALSE 14807
// begin for i in AllianceVehicles do
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_EXP 56
14768: PUSH
14769: FOR_IN
14770: IFFALSE 14805
// if i = unit then
14772: LD_VAR 0 2
14776: PUSH
14777: LD_VAR 0 1
14781: EQUAL
14782: IFFALSE 14803
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
14784: LD_ADDR_EXP 56
14788: PUSH
14789: LD_EXP 56
14793: PUSH
14794: LD_VAR 0 1
14798: PUSH
14799: EMPTY
14800: LIST
14801: DIFF
14802: ST_TO_ADDR
14803: GO 14769
14805: POP
14806: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 255
14816: PUSH
14817: LD_INT 3
14819: EQUAL
14820: PUSH
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL_OW 247
14830: PUSH
14831: LD_INT 3
14833: EQUAL
14834: AND
14835: IFFALSE 15527
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 266
14846: PUSH
14847: LD_INT 31
14849: EQUAL
14850: PUSH
14851: LD_VAR 0 1
14855: PPUSH
14856: CALL_OW 266
14860: PUSH
14861: LD_INT 32
14863: EQUAL
14864: OR
14865: PUSH
14866: LD_VAR 0 1
14870: PPUSH
14871: CALL_OW 266
14875: PUSH
14876: LD_INT 36
14878: EQUAL
14879: OR
14880: PUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 266
14890: PUSH
14891: LD_INT 0
14893: EQUAL
14894: OR
14895: PUSH
14896: LD_VAR 0 1
14900: PPUSH
14901: CALL_OW 266
14905: PUSH
14906: LD_INT 24
14908: EQUAL
14909: OR
14910: PUSH
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 266
14920: PUSH
14921: LD_INT 17
14923: EQUAL
14924: OR
14925: PUSH
14926: LD_VAR 0 1
14930: PPUSH
14931: CALL_OW 266
14935: PUSH
14936: LD_INT 25
14938: EQUAL
14939: OR
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 266
14950: PUSH
14951: LD_INT 19
14953: EQUAL
14954: OR
14955: PUSH
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 266
14965: PUSH
14966: LD_INT 20
14968: EQUAL
14969: OR
14970: PUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL_OW 266
14980: PUSH
14981: LD_INT 18
14983: EQUAL
14984: OR
14985: PUSH
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 266
14995: PUSH
14996: LD_INT 21
14998: EQUAL
14999: OR
15000: PUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 266
15010: PUSH
15011: LD_INT 23
15013: EQUAL
15014: OR
15015: PUSH
15016: LD_VAR 0 1
15020: PPUSH
15021: CALL_OW 266
15025: PUSH
15026: LD_INT 16
15028: EQUAL
15029: OR
15030: PUSH
15031: LD_VAR 0 1
15035: PPUSH
15036: CALL_OW 266
15040: PUSH
15041: LD_INT 6
15043: EQUAL
15044: OR
15045: PUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: CALL_OW 266
15055: PUSH
15056: LD_INT 29
15058: EQUAL
15059: OR
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 266
15070: PUSH
15071: LD_INT 26
15073: EQUAL
15074: OR
15075: PUSH
15076: LD_VAR 0 1
15080: PPUSH
15081: CALL_OW 266
15085: PUSH
15086: LD_INT 30
15088: EQUAL
15089: OR
15090: PUSH
15091: LD_VAR 0 1
15095: PPUSH
15096: CALL_OW 266
15100: PUSH
15101: LD_INT 28
15103: EQUAL
15104: OR
15105: PUSH
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 266
15115: PUSH
15116: LD_INT 27
15118: EQUAL
15119: OR
15120: PUSH
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 266
15130: PUSH
15131: LD_INT 33
15133: EQUAL
15134: OR
15135: PUSH
15136: LD_VAR 0 1
15140: PPUSH
15141: CALL_OW 266
15145: PUSH
15146: LD_INT 2
15148: EQUAL
15149: OR
15150: PUSH
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 266
15160: PUSH
15161: LD_INT 4
15163: EQUAL
15164: OR
15165: IFFALSE 15251
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
15167: LD_ADDR_EXP 86
15171: PUSH
15172: LD_EXP 86
15176: PUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: CALL_OW 266
15186: ADD
15187: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15188: LD_ADDR_EXP 86
15192: PUSH
15193: LD_EXP 86
15197: PUSH
15198: LD_VAR 0 1
15202: PPUSH
15203: CALL_OW 250
15207: ADD
15208: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15209: LD_ADDR_EXP 86
15213: PUSH
15214: LD_EXP 86
15218: PUSH
15219: LD_VAR 0 1
15223: PPUSH
15224: CALL_OW 251
15228: ADD
15229: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15230: LD_ADDR_EXP 86
15234: PUSH
15235: LD_EXP 86
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 254
15249: ADD
15250: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 266
15260: PUSH
15261: LD_INT 1
15263: EQUAL
15264: IFFALSE 15343
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
15266: LD_ADDR_EXP 86
15270: PUSH
15271: LD_EXP 86
15275: PUSH
15276: LD_INT 0
15278: ADD
15279: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15280: LD_ADDR_EXP 86
15284: PUSH
15285: LD_EXP 86
15289: PUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 250
15299: ADD
15300: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15301: LD_ADDR_EXP 86
15305: PUSH
15306: LD_EXP 86
15310: PUSH
15311: LD_VAR 0 1
15315: PPUSH
15316: CALL_OW 251
15320: ADD
15321: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15322: LD_ADDR_EXP 86
15326: PUSH
15327: LD_EXP 86
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 254
15341: ADD
15342: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15343: LD_VAR 0 1
15347: PPUSH
15348: CALL_OW 266
15352: PUSH
15353: LD_INT 3
15355: EQUAL
15356: IFFALSE 15435
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
15358: LD_ADDR_EXP 86
15362: PUSH
15363: LD_EXP 86
15367: PUSH
15368: LD_INT 2
15370: ADD
15371: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15372: LD_ADDR_EXP 86
15376: PUSH
15377: LD_EXP 86
15381: PUSH
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 250
15391: ADD
15392: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15393: LD_ADDR_EXP 86
15397: PUSH
15398: LD_EXP 86
15402: PUSH
15403: LD_VAR 0 1
15407: PPUSH
15408: CALL_OW 251
15412: ADD
15413: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15414: LD_ADDR_EXP 86
15418: PUSH
15419: LD_EXP 86
15423: PUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: CALL_OW 254
15433: ADD
15434: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 266
15444: PUSH
15445: LD_INT 5
15447: EQUAL
15448: IFFALSE 15527
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
15450: LD_ADDR_EXP 86
15454: PUSH
15455: LD_EXP 86
15459: PUSH
15460: LD_INT 4
15462: ADD
15463: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15464: LD_ADDR_EXP 86
15468: PUSH
15469: LD_EXP 86
15473: PUSH
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 250
15483: ADD
15484: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15485: LD_ADDR_EXP 86
15489: PUSH
15490: LD_EXP 86
15494: PUSH
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 251
15504: ADD
15505: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15506: LD_ADDR_EXP 86
15510: PUSH
15511: LD_EXP 86
15515: PUSH
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL_OW 254
15525: ADD
15526: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 255
15536: PUSH
15537: LD_INT 8
15539: EQUAL
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 247
15550: PUSH
15551: LD_INT 3
15553: EQUAL
15554: AND
15555: PUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 248
15565: PUSH
15566: LD_INT 2
15568: EQUAL
15569: AND
15570: IFFALSE 16262
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15572: LD_VAR 0 1
15576: PPUSH
15577: CALL_OW 266
15581: PUSH
15582: LD_INT 31
15584: EQUAL
15585: PUSH
15586: LD_VAR 0 1
15590: PPUSH
15591: CALL_OW 266
15595: PUSH
15596: LD_INT 32
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 1
15605: PPUSH
15606: CALL_OW 266
15610: PUSH
15611: LD_INT 36
15613: EQUAL
15614: OR
15615: PUSH
15616: LD_VAR 0 1
15620: PPUSH
15621: CALL_OW 266
15625: PUSH
15626: LD_INT 0
15628: EQUAL
15629: OR
15630: PUSH
15631: LD_VAR 0 1
15635: PPUSH
15636: CALL_OW 266
15640: PUSH
15641: LD_INT 24
15643: EQUAL
15644: OR
15645: PUSH
15646: LD_VAR 0 1
15650: PPUSH
15651: CALL_OW 266
15655: PUSH
15656: LD_INT 17
15658: EQUAL
15659: OR
15660: PUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 266
15670: PUSH
15671: LD_INT 25
15673: EQUAL
15674: OR
15675: PUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 266
15685: PUSH
15686: LD_INT 19
15688: EQUAL
15689: OR
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 266
15700: PUSH
15701: LD_INT 20
15703: EQUAL
15704: OR
15705: PUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 266
15715: PUSH
15716: LD_INT 18
15718: EQUAL
15719: OR
15720: PUSH
15721: LD_VAR 0 1
15725: PPUSH
15726: CALL_OW 266
15730: PUSH
15731: LD_INT 21
15733: EQUAL
15734: OR
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 266
15745: PUSH
15746: LD_INT 23
15748: EQUAL
15749: OR
15750: PUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 266
15760: PUSH
15761: LD_INT 16
15763: EQUAL
15764: OR
15765: PUSH
15766: LD_VAR 0 1
15770: PPUSH
15771: CALL_OW 266
15775: PUSH
15776: LD_INT 6
15778: EQUAL
15779: OR
15780: PUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 266
15790: PUSH
15791: LD_INT 29
15793: EQUAL
15794: OR
15795: PUSH
15796: LD_VAR 0 1
15800: PPUSH
15801: CALL_OW 266
15805: PUSH
15806: LD_INT 26
15808: EQUAL
15809: OR
15810: PUSH
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 266
15820: PUSH
15821: LD_INT 30
15823: EQUAL
15824: OR
15825: PUSH
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL_OW 266
15835: PUSH
15836: LD_INT 28
15838: EQUAL
15839: OR
15840: PUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 266
15850: PUSH
15851: LD_INT 27
15853: EQUAL
15854: OR
15855: PUSH
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 266
15865: PUSH
15866: LD_INT 33
15868: EQUAL
15869: OR
15870: PUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL_OW 266
15880: PUSH
15881: LD_INT 2
15883: EQUAL
15884: OR
15885: PUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 266
15895: PUSH
15896: LD_INT 4
15898: EQUAL
15899: OR
15900: IFFALSE 15986
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
15902: LD_ADDR_EXP 85
15906: PUSH
15907: LD_EXP 85
15911: PUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 266
15921: ADD
15922: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
15923: LD_ADDR_EXP 85
15927: PUSH
15928: LD_EXP 85
15932: PUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 250
15942: ADD
15943: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
15944: LD_ADDR_EXP 85
15948: PUSH
15949: LD_EXP 85
15953: PUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 251
15963: ADD
15964: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
15965: LD_ADDR_EXP 85
15969: PUSH
15970: LD_EXP 85
15974: PUSH
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL_OW 254
15984: ADD
15985: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 266
15995: PUSH
15996: LD_INT 1
15998: EQUAL
15999: IFFALSE 16078
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
16001: LD_ADDR_EXP 85
16005: PUSH
16006: LD_EXP 85
16010: PUSH
16011: LD_INT 0
16013: ADD
16014: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16015: LD_ADDR_EXP 85
16019: PUSH
16020: LD_EXP 85
16024: PUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 250
16034: ADD
16035: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16036: LD_ADDR_EXP 85
16040: PUSH
16041: LD_EXP 85
16045: PUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 251
16055: ADD
16056: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16057: LD_ADDR_EXP 85
16061: PUSH
16062: LD_EXP 85
16066: PUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 254
16076: ADD
16077: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 266
16087: PUSH
16088: LD_INT 3
16090: EQUAL
16091: IFFALSE 16170
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
16093: LD_ADDR_EXP 85
16097: PUSH
16098: LD_EXP 85
16102: PUSH
16103: LD_INT 2
16105: ADD
16106: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16107: LD_ADDR_EXP 85
16111: PUSH
16112: LD_EXP 85
16116: PUSH
16117: LD_VAR 0 1
16121: PPUSH
16122: CALL_OW 250
16126: ADD
16127: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16128: LD_ADDR_EXP 85
16132: PUSH
16133: LD_EXP 85
16137: PUSH
16138: LD_VAR 0 1
16142: PPUSH
16143: CALL_OW 251
16147: ADD
16148: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16149: LD_ADDR_EXP 85
16153: PUSH
16154: LD_EXP 85
16158: PUSH
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 254
16168: ADD
16169: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 266
16179: PUSH
16180: LD_INT 5
16182: EQUAL
16183: IFFALSE 16262
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
16185: LD_ADDR_EXP 85
16189: PUSH
16190: LD_EXP 85
16194: PUSH
16195: LD_INT 4
16197: ADD
16198: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16199: LD_ADDR_EXP 85
16203: PUSH
16204: LD_EXP 85
16208: PUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 250
16218: ADD
16219: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16220: LD_ADDR_EXP 85
16224: PUSH
16225: LD_EXP 85
16229: PUSH
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL_OW 251
16239: ADD
16240: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16241: LD_ADDR_EXP 85
16245: PUSH
16246: LD_EXP 85
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 254
16260: ADD
16261: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 255
16271: PUSH
16272: LD_INT 7
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL_OW 247
16285: PUSH
16286: LD_INT 3
16288: EQUAL
16289: AND
16290: IFFALSE 16982
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 266
16301: PUSH
16302: LD_INT 31
16304: EQUAL
16305: PUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 266
16315: PUSH
16316: LD_INT 32
16318: EQUAL
16319: OR
16320: PUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 266
16330: PUSH
16331: LD_INT 36
16333: EQUAL
16334: OR
16335: PUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 266
16345: PUSH
16346: LD_INT 0
16348: EQUAL
16349: OR
16350: PUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 266
16360: PUSH
16361: LD_INT 24
16363: EQUAL
16364: OR
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 266
16375: PUSH
16376: LD_INT 17
16378: EQUAL
16379: OR
16380: PUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 266
16390: PUSH
16391: LD_INT 25
16393: EQUAL
16394: OR
16395: PUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 266
16405: PUSH
16406: LD_INT 19
16408: EQUAL
16409: OR
16410: PUSH
16411: LD_VAR 0 1
16415: PPUSH
16416: CALL_OW 266
16420: PUSH
16421: LD_INT 20
16423: EQUAL
16424: OR
16425: PUSH
16426: LD_VAR 0 1
16430: PPUSH
16431: CALL_OW 266
16435: PUSH
16436: LD_INT 18
16438: EQUAL
16439: OR
16440: PUSH
16441: LD_VAR 0 1
16445: PPUSH
16446: CALL_OW 266
16450: PUSH
16451: LD_INT 21
16453: EQUAL
16454: OR
16455: PUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 266
16465: PUSH
16466: LD_INT 23
16468: EQUAL
16469: OR
16470: PUSH
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 266
16480: PUSH
16481: LD_INT 16
16483: EQUAL
16484: OR
16485: PUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 266
16495: PUSH
16496: LD_INT 6
16498: EQUAL
16499: OR
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 266
16510: PUSH
16511: LD_INT 29
16513: EQUAL
16514: OR
16515: PUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 266
16525: PUSH
16526: LD_INT 26
16528: EQUAL
16529: OR
16530: PUSH
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL_OW 266
16540: PUSH
16541: LD_INT 30
16543: EQUAL
16544: OR
16545: PUSH
16546: LD_VAR 0 1
16550: PPUSH
16551: CALL_OW 266
16555: PUSH
16556: LD_INT 28
16558: EQUAL
16559: OR
16560: PUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 266
16570: PUSH
16571: LD_INT 27
16573: EQUAL
16574: OR
16575: PUSH
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 266
16585: PUSH
16586: LD_INT 33
16588: EQUAL
16589: OR
16590: PUSH
16591: LD_VAR 0 1
16595: PPUSH
16596: CALL_OW 266
16600: PUSH
16601: LD_INT 2
16603: EQUAL
16604: OR
16605: PUSH
16606: LD_VAR 0 1
16610: PPUSH
16611: CALL_OW 266
16615: PUSH
16616: LD_INT 4
16618: EQUAL
16619: OR
16620: IFFALSE 16706
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
16622: LD_ADDR_EXP 87
16626: PUSH
16627: LD_EXP 87
16631: PUSH
16632: LD_VAR 0 1
16636: PPUSH
16637: CALL_OW 266
16641: ADD
16642: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16643: LD_ADDR_EXP 87
16647: PUSH
16648: LD_EXP 87
16652: PUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 250
16662: ADD
16663: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
16664: LD_ADDR_EXP 87
16668: PUSH
16669: LD_EXP 87
16673: PUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 251
16683: ADD
16684: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
16685: LD_ADDR_EXP 87
16689: PUSH
16690: LD_EXP 87
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 254
16704: ADD
16705: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 266
16715: PUSH
16716: LD_INT 1
16718: EQUAL
16719: IFFALSE 16798
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
16721: LD_ADDR_EXP 87
16725: PUSH
16726: LD_EXP 87
16730: PUSH
16731: LD_INT 0
16733: ADD
16734: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16735: LD_ADDR_EXP 87
16739: PUSH
16740: LD_EXP 87
16744: PUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 250
16754: ADD
16755: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
16756: LD_ADDR_EXP 87
16760: PUSH
16761: LD_EXP 87
16765: PUSH
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL_OW 251
16775: ADD
16776: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
16777: LD_ADDR_EXP 87
16781: PUSH
16782: LD_EXP 87
16786: PUSH
16787: LD_VAR 0 1
16791: PPUSH
16792: CALL_OW 254
16796: ADD
16797: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 266
16807: PUSH
16808: LD_INT 3
16810: EQUAL
16811: IFFALSE 16890
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
16813: LD_ADDR_EXP 87
16817: PUSH
16818: LD_EXP 87
16822: PUSH
16823: LD_INT 2
16825: ADD
16826: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16827: LD_ADDR_EXP 87
16831: PUSH
16832: LD_EXP 87
16836: PUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 250
16846: ADD
16847: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
16848: LD_ADDR_EXP 87
16852: PUSH
16853: LD_EXP 87
16857: PUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 251
16867: ADD
16868: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
16869: LD_ADDR_EXP 87
16873: PUSH
16874: LD_EXP 87
16878: PUSH
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 254
16888: ADD
16889: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 266
16899: PUSH
16900: LD_INT 5
16902: EQUAL
16903: IFFALSE 16982
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
16905: LD_ADDR_EXP 87
16909: PUSH
16910: LD_EXP 87
16914: PUSH
16915: LD_INT 4
16917: ADD
16918: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16919: LD_ADDR_EXP 87
16923: PUSH
16924: LD_EXP 87
16928: PUSH
16929: LD_VAR 0 1
16933: PPUSH
16934: CALL_OW 250
16938: ADD
16939: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
16940: LD_ADDR_EXP 87
16944: PUSH
16945: LD_EXP 87
16949: PUSH
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 251
16959: ADD
16960: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
16961: LD_ADDR_EXP 87
16965: PUSH
16966: LD_EXP 87
16970: PUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 254
16980: ADD
16981: ST_TO_ADDR
// end ; end ; end ;
16982: PPOPN 2
16984: END
// on UnitKamikazed ( unit ) do var i ;
16985: LD_INT 0
16987: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
16988: LD_VAR 0 1
16992: PPUSH
16993: CALL_OW 255
16997: PUSH
16998: LD_INT 8
17000: EQUAL
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 247
17011: PUSH
17012: LD_INT 2
17014: EQUAL
17015: AND
17016: PUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: CALL_OW 248
17026: PUSH
17027: LD_INT 2
17029: EQUAL
17030: AND
17031: IFFALSE 17081
// begin for i in legionVehicles do
17033: LD_ADDR_VAR 0 2
17037: PUSH
17038: LD_EXP 49
17042: PUSH
17043: FOR_IN
17044: IFFALSE 17079
// if i = unit then
17046: LD_VAR 0 2
17050: PUSH
17051: LD_VAR 0 1
17055: EQUAL
17056: IFFALSE 17077
// legionVehicles = legionVehicles diff [ unit ] ;
17058: LD_ADDR_EXP 49
17062: PUSH
17063: LD_EXP 49
17067: PUSH
17068: LD_VAR 0 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: DIFF
17076: ST_TO_ADDR
17077: GO 17043
17079: POP
17080: POP
// end ; end ;
17081: PPOPN 2
17083: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
17084: LD_VAR 0 2
17088: PPUSH
17089: LD_VAR 0 3
17093: PPUSH
17094: LD_INT 29
17096: PPUSH
17097: CALL_OW 309
17101: IFFALSE 17161
// begin if GetSide ( unit ) = 1 then
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 255
17112: PUSH
17113: LD_INT 1
17115: EQUAL
17116: IFFALSE 17132
// begin wait ( 0 0$6 ) ;
17118: LD_INT 210
17120: PPUSH
17121: CALL_OW 67
// YouLost ( Motherlode2 ) ;
17125: LD_STRING Motherlode2
17127: PPUSH
17128: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 255
17141: PUSH
17142: LD_INT 8
17144: EQUAL
17145: IFFALSE 17161
// begin wait ( 0 0$6 ) ;
17147: LD_INT 210
17149: PPUSH
17150: CALL_OW 67
// YouLost ( Motherlode1 ) ;
17154: LD_STRING Motherlode1
17156: PPUSH
17157: CALL_OW 104
// end ; end ; end ;
17161: PPOPN 3
17163: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 255
17173: PUSH
17174: LD_INT 2
17176: EQUAL
17177: IFFALSE 17186
// YouLost ( Motherlode3 ) ;
17179: LD_STRING Motherlode3
17181: PPUSH
17182: CALL_OW 104
// end ; end_of_file
17186: PPOPN 3
17188: END
// every 3 3$0 do
17189: GO 17191
17191: DISABLE
// begin enable ;
17192: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17193: LD_ADDR_EXP 80
17197: PUSH
17198: LD_INT 1
17200: PUSH
17201: LD_INT 3
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 1
17210: PPUSH
17211: LD_INT 2
17213: PPUSH
17214: CALL_OW 12
17218: ARRAY
17219: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17220: LD_INT 22
17222: PUSH
17223: LD_INT 8
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: PUSH
17249: LD_INT 1
17251: GREATER
17252: IFFALSE 17283
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
17254: LD_ADDR_EXP 82
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: LD_INT 8
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 1
17271: PPUSH
17272: LD_INT 2
17274: PPUSH
17275: CALL_OW 12
17279: ARRAY
17280: ST_TO_ADDR
17281: GO 17291
// RussianTarget = 1 ;
17283: LD_ADDR_EXP 82
17287: PUSH
17288: LD_INT 1
17290: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17291: LD_INT 22
17293: PUSH
17294: LD_INT 8
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 21
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: PUSH
17320: LD_INT 1
17322: GREATER
17323: IFFALSE 17358
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
17325: LD_ADDR_EXP 81
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: LD_INT 3
17335: PUSH
17336: LD_INT 8
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: PPUSH
17347: LD_INT 3
17349: PPUSH
17350: CALL_OW 12
17354: ARRAY
17355: ST_TO_ADDR
17356: GO 17385
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17358: LD_ADDR_EXP 81
17362: PUSH
17363: LD_INT 1
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 1
17375: PPUSH
17376: LD_INT 2
17378: PPUSH
17379: CALL_OW 12
17383: ARRAY
17384: ST_TO_ADDR
// end ;
17385: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
17386: LD_EXP 61
17390: PUSH
17391: LD_INT 1
17393: EQUAL
17394: IFFALSE 17971
17396: GO 17398
17398: DISABLE
17399: LD_INT 0
17401: PPUSH
17402: PPUSH
// begin for i = 1 to 4 do
17403: LD_ADDR_VAR 0 1
17407: PUSH
17408: DOUBLE
17409: LD_INT 1
17411: DEC
17412: ST_TO_ADDR
17413: LD_INT 4
17415: PUSH
17416: FOR_TO
17417: IFFALSE 17457
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
17419: LD_EXP 59
17423: PUSH
17424: LD_VAR 0 1
17428: ARRAY
17429: PPUSH
17430: LD_INT 85
17432: PPUSH
17433: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
17437: LD_EXP 59
17441: PUSH
17442: LD_VAR 0 1
17446: ARRAY
17447: PPUSH
17448: LD_INT 3
17450: PPUSH
17451: CALL_OW 183
// end ;
17455: GO 17416
17457: POP
17458: POP
// wait ( 0 0$1 ) ;
17459: LD_INT 35
17461: PPUSH
17462: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_INT 22
17473: PUSH
17474: LD_INT 4
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 21
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 56
17493: PUSH
17494: EMPTY
17495: LIST
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 60
17502: PUSH
17503: EMPTY
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: PPUSH
17516: CALL_OW 69
17520: PUSH
17521: LD_EXP 17
17525: PUSH
17526: EMPTY
17527: LIST
17528: DIFF
17529: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
17530: LD_VAR 0 2
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: PPUSH
17539: LD_INT 235
17541: PPUSH
17542: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
17546: LD_VAR 0 2
17550: PUSH
17551: LD_INT 2
17553: ARRAY
17554: PPUSH
17555: LD_INT 2
17557: PPUSH
17558: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
17562: LD_VAR 0 2
17566: PUSH
17567: LD_INT 3
17569: ARRAY
17570: PPUSH
17571: LD_INT 2
17573: PPUSH
17574: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
17578: LD_INT 30
17580: PPUSH
17581: LD_INT 49
17583: PPUSH
17584: LD_INT 4
17586: PPUSH
17587: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
17591: LD_INT 91
17593: PPUSH
17594: LD_INT 10
17596: PPUSH
17597: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
17601: LD_INT 91
17603: PPUSH
17604: LD_INT 11
17606: PPUSH
17607: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
17611: LD_INT 22
17613: PUSH
17614: LD_INT 4
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 25
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: PPUSH
17640: LD_INT 30
17642: PPUSH
17643: LD_INT 30
17645: PPUSH
17646: LD_INT 49
17648: PPUSH
17649: LD_INT 1
17651: PPUSH
17652: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
17656: LD_INT 22
17658: PUSH
17659: LD_INT 4
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 25
17668: PUSH
17669: LD_INT 2
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 69
17684: PPUSH
17685: LD_INT 32
17687: PPUSH
17688: LD_INT 55
17690: PPUSH
17691: LD_INT 56
17693: PPUSH
17694: LD_INT 4
17696: PPUSH
17697: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
17701: LD_INT 22
17703: PUSH
17704: LD_INT 4
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 25
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PPUSH
17725: CALL_OW 69
17729: PPUSH
17730: LD_INT 32
17732: PPUSH
17733: LD_INT 63
17735: PPUSH
17736: LD_INT 71
17738: PPUSH
17739: LD_INT 4
17741: PPUSH
17742: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
17746: LD_INT 22
17748: PUSH
17749: LD_INT 4
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 25
17758: PUSH
17759: LD_INT 2
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PPUSH
17770: CALL_OW 69
17774: PPUSH
17775: LD_INT 28
17777: PPUSH
17778: LD_INT 40
17780: PPUSH
17781: LD_INT 72
17783: PPUSH
17784: LD_INT 4
17786: PPUSH
17787: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
17791: LD_INT 22
17793: PUSH
17794: LD_INT 4
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 25
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: PPUSH
17820: LD_INT 27
17822: PPUSH
17823: LD_INT 45
17825: PPUSH
17826: LD_INT 73
17828: PPUSH
17829: LD_INT 4
17831: PPUSH
17832: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
17836: LD_INT 22
17838: PUSH
17839: LD_INT 4
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 25
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PPUSH
17860: CALL_OW 69
17864: PPUSH
17865: LD_INT 18
17867: PPUSH
17868: LD_INT 37
17870: PPUSH
17871: LD_INT 50
17873: PPUSH
17874: LD_INT 2
17876: PPUSH
17877: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
17881: LD_INT 22
17883: PUSH
17884: LD_INT 4
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 25
17893: PUSH
17894: LD_INT 2
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 69
17909: PPUSH
17910: LD_INT 17
17912: PPUSH
17913: LD_INT 41
17915: PPUSH
17916: LD_INT 51
17918: PPUSH
17919: LD_INT 3
17921: PPUSH
17922: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
17926: LD_INT 22
17928: PUSH
17929: LD_INT 4
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: PPUSH
17955: LD_INT 21
17957: PPUSH
17958: LD_INT 38
17960: PPUSH
17961: LD_INT 54
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL_OW 205
// end ;
17971: PPOPN 2
17973: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
17974: LD_INT 22
17976: PUSH
17977: LD_INT 4
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 30
17986: PUSH
17987: LD_INT 8
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PPUSH
17998: CALL_OW 69
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: IFFALSE 18156
18008: GO 18010
18010: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18011: LD_INT 85
18013: PPUSH
18014: LD_INT 3
18016: PPUSH
18017: LD_INT 3
18019: PPUSH
18020: LD_INT 1
18022: PPUSH
18023: LD_INT 3
18025: PUSH
18026: LD_INT 5
18028: PUSH
18029: LD_INT 7
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: PPUSH
18040: LD_INT 3
18042: PPUSH
18043: CALL_OW 12
18047: ARRAY
18048: PPUSH
18049: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18053: LD_INT 85
18055: PPUSH
18056: LD_INT 3
18058: PPUSH
18059: LD_INT 3
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: LD_INT 3
18067: PUSH
18068: LD_INT 5
18070: PUSH
18071: LD_INT 7
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 1
18081: PPUSH
18082: LD_INT 3
18084: PPUSH
18085: CALL_OW 12
18089: ARRAY
18090: PPUSH
18091: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18095: LD_INT 85
18097: PPUSH
18098: LD_INT 3
18100: PPUSH
18101: LD_INT 3
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: LD_INT 3
18109: PUSH
18110: LD_INT 5
18112: PUSH
18113: LD_INT 7
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_INT 3
18126: PPUSH
18127: CALL_OW 12
18131: ARRAY
18132: PPUSH
18133: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
18137: LD_INT 85
18139: PPUSH
18140: LD_INT 5
18142: PPUSH
18143: LD_INT 3
18145: PPUSH
18146: LD_INT 1
18148: PPUSH
18149: LD_INT 6
18151: PPUSH
18152: CALL_OW 185
// end ;
18156: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
18157: LD_INT 235
18159: PPUSH
18160: LD_INT 10
18162: PPUSH
18163: CALL_OW 308
18167: PUSH
18168: LD_EXP 63
18172: PUSH
18173: LD_INT 1
18175: EQUAL
18176: AND
18177: IFFALSE 18201
18179: GO 18181
18181: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
18182: LD_INT 235
18184: PPUSH
18185: CALL_OW 313
18189: PPUSH
18190: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
18194: LD_INT 84
18196: PPUSH
18197: CALL_OW 146
// end ;
18201: END
// every 0 0$1 trigger legionAI = 1 do
18202: LD_EXP 77
18206: PUSH
18207: LD_INT 1
18209: EQUAL
18210: IFFALSE 18273
18212: GO 18214
18214: DISABLE
// begin enable ;
18215: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
18216: LD_INT 8
18218: PPUSH
18219: LD_INT 99
18221: PPUSH
18222: LD_INT 11
18224: PPUSH
18225: LD_EXP 85
18229: PPUSH
18230: CALL 9131 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
18234: LD_INT 8
18236: PPUSH
18237: LD_INT 20
18239: PPUSH
18240: LD_INT 11
18242: PPUSH
18243: LD_INT 252
18245: PUSH
18246: EMPTY
18247: LIST
18248: PPUSH
18249: CALL 9540 0 4
// AttackNearBuildings ( 8 , 1 ) ;
18253: LD_INT 8
18255: PPUSH
18256: LD_INT 1
18258: PPUSH
18259: CALL 10679 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
18263: LD_INT 8
18265: PPUSH
18266: LD_INT 11
18268: PPUSH
18269: CALL 10266 0 2
// end ;
18273: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
18274: LD_EXP 77
18278: PUSH
18279: LD_INT 1
18281: EQUAL
18282: PUSH
18283: LD_EXP 92
18287: PUSH
18288: LD_INT 1
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 49
18297: PUSH
18298: EMPTY
18299: EQUAL
18300: AND
18301: PUSH
18302: LD_INT 117
18304: PPUSH
18305: CALL_OW 302
18309: AND
18310: PUSH
18311: LD_INT 117
18313: PPUSH
18314: CALL_OW 255
18318: PUSH
18319: LD_INT 8
18321: EQUAL
18322: AND
18323: IFFALSE 18386
18325: GO 18327
18327: DISABLE
// begin enable ;
18328: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
18329: LD_INT 8
18331: PPUSH
18332: LD_INT 117
18334: PPUSH
18335: LD_INT 5
18337: PUSH
18338: LD_INT 6
18340: PUSH
18341: LD_INT 7
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: PUSH
18349: LD_OWVAR 67
18353: ARRAY
18354: PPUSH
18355: LD_INT 27
18357: PUSH
18358: LD_INT 28
18360: PUSH
18361: LD_INT 25
18363: PUSH
18364: LD_INT 29
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PPUSH
18373: LD_INT 3
18375: PPUSH
18376: LD_INT 2
18378: PPUSH
18379: LD_INT 14
18381: PPUSH
18382: CALL 10909 0 7
// end ;
18386: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
18387: LD_EXP 77
18391: PUSH
18392: LD_INT 1
18394: EQUAL
18395: PUSH
18396: LD_EXP 92
18400: PUSH
18401: LD_INT 1
18403: GREATEREQUAL
18404: AND
18405: PUSH
18406: LD_EXP 49
18410: PUSH
18411: LD_INT 5
18413: PUSH
18414: LD_INT 6
18416: PUSH
18417: LD_INT 7
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_OWVAR 67
18429: ARRAY
18430: EQUAL
18431: AND
18432: IFFALSE 18450
18434: GO 18436
18436: DISABLE
// begin enable ;
18437: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
18438: LD_EXP 80
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: CALL 10983 0 2
// end ;
18450: END
// every 0 0$1 do
18451: GO 18453
18453: DISABLE
// begin enable ;
18454: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
18455: LD_INT 6
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL 11915 0 2
// end ;
18465: END
// every 0 0$1 trigger RussianAI = 1 do
18466: LD_EXP 79
18470: PUSH
18471: LD_INT 1
18473: EQUAL
18474: IFFALSE 18553
18476: GO 18478
18478: DISABLE
// begin enable ;
18479: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
18480: LD_INT 3
18482: PPUSH
18483: LD_INT 26
18485: PPUSH
18486: LD_INT 21
18488: PPUSH
18489: LD_EXP 86
18493: PPUSH
18494: CALL 9131 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
18498: LD_INT 3
18500: PPUSH
18501: LD_INT 22
18503: PPUSH
18504: LD_INT 21
18506: PPUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL 9540 0 4
// AttackNearBuildings ( 3 , 1 ) ;
18521: LD_INT 3
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL 10679 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
18531: LD_INT 3
18533: PPUSH
18534: LD_EXP 82
18538: PPUSH
18539: CALL 11915 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
18543: LD_INT 3
18545: PPUSH
18546: LD_INT 21
18548: PPUSH
18549: CALL 10266 0 2
// end ;
18553: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
18554: LD_EXP 79
18558: PUSH
18559: LD_INT 1
18561: EQUAL
18562: PUSH
18563: LD_EXP 92
18567: PUSH
18568: LD_INT 3
18570: GREATEREQUAL
18571: AND
18572: PUSH
18573: LD_EXP 55
18577: PUSH
18578: EMPTY
18579: EQUAL
18580: AND
18581: PUSH
18582: LD_INT 10
18584: PPUSH
18585: CALL_OW 302
18589: AND
18590: PUSH
18591: LD_INT 10
18593: PPUSH
18594: CALL_OW 255
18598: PUSH
18599: LD_INT 3
18601: EQUAL
18602: AND
18603: PUSH
18604: LD_INT 4
18606: PPUSH
18607: CALL_OW 302
18611: AND
18612: PUSH
18613: LD_INT 4
18615: PPUSH
18616: CALL_OW 255
18620: PUSH
18621: LD_INT 3
18623: EQUAL
18624: AND
18625: IFFALSE 18745
18627: GO 18629
18629: DISABLE
// begin enable ;
18630: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
18631: LD_INT 3
18633: PPUSH
18634: LD_INT 4
18636: PPUSH
18637: LD_INT 4
18639: PUSH
18640: LD_INT 5
18642: PUSH
18643: LD_INT 6
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: LIST
18650: PUSH
18651: LD_OWVAR 67
18655: ARRAY
18656: PPUSH
18657: LD_INT 45
18659: PUSH
18660: LD_INT 46
18662: PUSH
18663: LD_INT 47
18665: PUSH
18666: LD_INT 49
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: PPUSH
18675: LD_INT 3
18677: PPUSH
18678: LD_INT 3
18680: PPUSH
18681: LD_INT 24
18683: PPUSH
18684: CALL 10909 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
18688: LD_INT 3
18690: PPUSH
18691: LD_INT 10
18693: PPUSH
18694: LD_INT 4
18696: PUSH
18697: LD_INT 5
18699: PUSH
18700: LD_INT 6
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: LD_OWVAR 67
18712: ARRAY
18713: PPUSH
18714: LD_INT 45
18716: PUSH
18717: LD_INT 46
18719: PUSH
18720: LD_INT 47
18722: PUSH
18723: LD_INT 49
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: PPUSH
18732: LD_INT 3
18734: PPUSH
18735: LD_INT 3
18737: PPUSH
18738: LD_INT 24
18740: PPUSH
18741: CALL 10909 0 7
// end ;
18745: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
18746: LD_EXP 79
18750: PUSH
18751: LD_INT 1
18753: EQUAL
18754: PUSH
18755: LD_EXP 92
18759: PUSH
18760: LD_INT 3
18762: GREATEREQUAL
18763: AND
18764: PUSH
18765: LD_EXP 55
18769: PUSH
18770: LD_INT 8
18772: PUSH
18773: LD_INT 10
18775: PUSH
18776: LD_INT 12
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_OWVAR 67
18788: ARRAY
18789: EQUAL
18790: AND
18791: IFFALSE 18903
18793: GO 18795
18795: DISABLE
// begin enable ;
18796: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
18797: LD_INT 22
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 21
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: LD_INT 34
18822: PUSH
18823: LD_INT 48
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 3
18836: PUSH
18837: LD_INT 60
18839: PUSH
18840: EMPTY
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 69
18857: PPUSH
18858: LD_INT 24
18860: PUSH
18861: LD_INT 25
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PPUSH
18871: LD_INT 2
18873: PPUSH
18874: CALL_OW 12
18878: ARRAY
18879: PPUSH
18880: CALL_OW 120
// wait ( 0 0$20 ) ;
18884: LD_INT 700
18886: PPUSH
18887: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
18891: LD_EXP 82
18895: PPUSH
18896: LD_INT 2
18898: PPUSH
18899: CALL 10983 0 2
// end ;
18903: END
// every 0 0$1 trigger AllianceAI = 1 do
18904: LD_EXP 78
18908: PUSH
18909: LD_INT 1
18911: EQUAL
18912: IFFALSE 18995
18914: GO 18916
18916: DISABLE
// begin enable ;
18917: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
18918: LD_INT 7
18920: PPUSH
18921: LD_INT 45
18923: PPUSH
18924: LD_INT 23
18926: PPUSH
18927: LD_EXP 87
18931: PPUSH
18932: CALL 9131 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
18936: LD_INT 7
18938: PPUSH
18939: LD_INT 24
18941: PPUSH
18942: LD_INT 23
18944: PPUSH
18945: LD_INT 46
18947: PUSH
18948: LD_INT 39
18950: PUSH
18951: LD_INT 133
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL 9540 0 4
// AttackNearBuildings ( 7 , 1 ) ;
18963: LD_INT 7
18965: PPUSH
18966: LD_INT 1
18968: PPUSH
18969: CALL 10679 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
18973: LD_INT 7
18975: PPUSH
18976: LD_EXP 81
18980: PPUSH
18981: CALL 11915 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
18985: LD_INT 7
18987: PPUSH
18988: LD_INT 23
18990: PPUSH
18991: CALL 10266 0 2
// end ;
18995: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
18996: LD_EXP 78
19000: PUSH
19001: LD_INT 1
19003: EQUAL
19004: PUSH
19005: LD_EXP 92
19009: PUSH
19010: LD_INT 4
19012: GREATEREQUAL
19013: AND
19014: PUSH
19015: LD_EXP 56
19019: PUSH
19020: EMPTY
19021: EQUAL
19022: AND
19023: PUSH
19024: LD_INT 156
19026: PPUSH
19027: CALL_OW 302
19031: AND
19032: PUSH
19033: LD_INT 156
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 7
19043: EQUAL
19044: AND
19045: PUSH
19046: LD_INT 162
19048: PPUSH
19049: CALL_OW 302
19053: AND
19054: PUSH
19055: LD_INT 162
19057: PPUSH
19058: CALL_OW 255
19062: PUSH
19063: LD_INT 7
19065: EQUAL
19066: AND
19067: IFFALSE 19183
19069: GO 19071
19071: DISABLE
// begin enable ;
19072: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
19073: LD_INT 3
19075: PPUSH
19076: LD_INT 156
19078: PPUSH
19079: LD_INT 3
19081: PUSH
19082: LD_INT 3
19084: PUSH
19085: LD_INT 4
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: PUSH
19093: LD_OWVAR 67
19097: ARRAY
19098: PPUSH
19099: LD_INT 9
19101: PUSH
19102: LD_INT 10
19104: PUSH
19105: LD_INT 7
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: PPUSH
19113: LD_INT 3
19115: PPUSH
19116: LD_INT 2
19118: PPUSH
19119: LD_INT 5
19121: PPUSH
19122: CALL 10909 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19126: LD_INT 3
19128: PPUSH
19129: LD_INT 162
19131: PPUSH
19132: LD_INT 2
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 3
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: LD_OWVAR 67
19150: ARRAY
19151: PPUSH
19152: LD_INT 45
19154: PUSH
19155: LD_INT 46
19157: PUSH
19158: LD_INT 47
19160: PUSH
19161: LD_INT 49
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: PPUSH
19170: LD_INT 3
19172: PPUSH
19173: LD_INT 3
19175: PPUSH
19176: LD_INT 24
19178: PPUSH
19179: CALL 10909 0 7
// end ;
19183: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
19184: LD_EXP 78
19188: PUSH
19189: LD_INT 1
19191: EQUAL
19192: PUSH
19193: LD_EXP 92
19197: PUSH
19198: LD_INT 4
19200: GREATEREQUAL
19201: AND
19202: PUSH
19203: LD_EXP 56
19207: PUSH
19208: LD_INT 5
19210: PUSH
19211: LD_INT 5
19213: PUSH
19214: LD_INT 7
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: PUSH
19222: LD_OWVAR 67
19226: ARRAY
19227: EQUAL
19228: AND
19229: IFFALSE 19288
19231: GO 19233
19233: DISABLE
19234: LD_INT 0
19236: PPUSH
// begin for i in AllianceVehicles do
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: LD_EXP 56
19246: PUSH
19247: FOR_IN
19248: IFFALSE 19273
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
19250: LD_VAR 0 1
19254: PPUSH
19255: LD_INT 117
19257: PPUSH
19258: LD_INT 112
19260: PPUSH
19261: LD_INT 10
19263: PPUSH
19264: LD_INT 1
19266: PPUSH
19267: CALL_OW 483
19271: GO 19247
19273: POP
19274: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
19275: LD_EXP 81
19279: PPUSH
19280: LD_INT 3
19282: PPUSH
19283: CALL 10983 0 2
// enable ;
19287: ENABLE
// end ;
19288: PPOPN 1
19290: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
19291: LD_EXP 78
19295: PUSH
19296: LD_INT 1
19298: EQUAL
19299: PUSH
19300: LD_EXP 92
19304: PUSH
19305: LD_INT 4
19307: GREATEREQUAL
19308: AND
19309: IFFALSE 19490
19311: GO 19313
19313: DISABLE
19314: LD_INT 0
19316: PPUSH
// begin enable ;
19317: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
19318: LD_ADDR_VAR 0 1
19322: PUSH
19323: LD_INT 22
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 21
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 30
19348: PUSH
19349: LD_INT 30
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 30
19358: PUSH
19359: LD_INT 28
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 30
19368: PUSH
19369: LD_INT 21
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
19392: LD_ADDR_VAR 0 1
19396: PUSH
19397: LD_VAR 0 1
19401: PUSH
19402: LD_INT 22
19404: PUSH
19405: LD_INT 1
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 21
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 32
19424: PUSH
19425: LD_INT 3
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL_OW 69
19441: ADD
19442: ST_TO_ADDR
// if tmp = [ ] then
19443: LD_VAR 0 1
19447: PUSH
19448: EMPTY
19449: EQUAL
19450: IFFALSE 19454
// exit ;
19452: GO 19490
// if tmp > 0 then
19454: LD_VAR 0 1
19458: PUSH
19459: LD_INT 0
19461: GREATER
19462: IFFALSE 19490
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
19464: LD_VAR 0 1
19468: PUSH
19469: LD_INT 1
19471: PPUSH
19472: LD_VAR 0 1
19476: PPUSH
19477: CALL_OW 12
19481: ARRAY
19482: PPUSH
19483: LD_INT 0
19485: PPUSH
19486: CALL_OW 234
// end ;
19490: PPOPN 1
19492: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
19493: LD_EXP 77
19497: PUSH
19498: LD_INT 1
19500: EQUAL
19501: PUSH
19502: LD_INT 22
19504: PUSH
19505: LD_INT 8
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: LD_INT 61
19527: PUSH
19528: EMPTY
19529: LIST
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: PPUSH
19540: CALL_OW 69
19544: PUSH
19545: LD_INT 0
19547: GREATER
19548: AND
19549: IFFALSE 19631
19551: GO 19553
19553: DISABLE
19554: LD_INT 0
19556: PPUSH
// begin enable ;
19557: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
19558: LD_ADDR_VAR 0 1
19562: PUSH
19563: LD_INT 22
19565: PUSH
19566: LD_INT 8
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 21
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 3
19585: PUSH
19586: LD_INT 61
19588: PUSH
19589: EMPTY
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 69
19605: PUSH
19606: FOR_IN
19607: IFFALSE 19629
// ComLinkTo ( i , arControler [ 1 ] ) ;
19609: LD_VAR 0 1
19613: PPUSH
19614: LD_EXP 50
19618: PUSH
19619: LD_INT 1
19621: ARRAY
19622: PPUSH
19623: CALL_OW 135
19627: GO 19606
19629: POP
19630: POP
// end ;
19631: PPOPN 1
19633: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
19634: LD_EXP 78
19638: PUSH
19639: LD_INT 1
19641: EQUAL
19642: PUSH
19643: LD_INT 22
19645: PUSH
19646: LD_INT 7
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 21
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 3
19665: PUSH
19666: LD_INT 61
19668: PUSH
19669: EMPTY
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: PPUSH
19681: CALL_OW 69
19685: PUSH
19686: LD_INT 0
19688: GREATER
19689: AND
19690: IFFALSE 19780
19692: GO 19694
19694: DISABLE
19695: LD_INT 0
19697: PPUSH
// begin enable ;
19698: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
19699: LD_ADDR_VAR 0 1
19703: PUSH
19704: LD_INT 22
19706: PUSH
19707: LD_INT 7
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 21
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 3
19726: PUSH
19727: LD_INT 61
19729: PUSH
19730: EMPTY
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: PPUSH
19742: CALL_OW 69
19746: PUSH
19747: FOR_IN
19748: IFFALSE 19778
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
19750: LD_VAR 0 1
19754: PPUSH
19755: LD_EXP 57
19759: PUSH
19760: LD_INT 1
19762: PPUSH
19763: LD_INT 3
19765: PPUSH
19766: CALL_OW 12
19770: ARRAY
19771: PPUSH
19772: CALL_OW 135
19776: GO 19747
19778: POP
19779: POP
// end ; end_of_file
19780: PPOPN 1
19782: END
// every 0 0$1 trigger timerStatus = 1 do
19783: LD_EXP 88
19787: PUSH
19788: LD_INT 1
19790: EQUAL
19791: IFFALSE 19828
19793: GO 19795
19795: DISABLE
// begin enable ;
19796: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
19797: LD_ADDR_OWVAR 47
19801: PUSH
19802: LD_STRING #Am15-1
19804: PUSH
19805: LD_EXP 89
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
19814: LD_ADDR_EXP 89
19818: PUSH
19819: LD_EXP 89
19823: PUSH
19824: LD_INT 35
19826: PLUS
19827: ST_TO_ADDR
// end ; end_of_file
19828: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 do
19829: LD_EXP 65
19833: PUSH
19834: LD_INT 1
19836: EQUAL
19837: PUSH
19838: LD_EXP 92
19842: PUSH
19843: LD_INT 0
19845: EQUAL
19846: AND
19847: IFFALSE 19907
19849: GO 19851
19851: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
19852: LD_INT 2
19854: PPUSH
19855: LD_INT 6
19857: PPUSH
19858: LD_INT 2
19860: PPUSH
19861: LD_INT 4
19863: PPUSH
19864: CALL_OW 12
19868: PPUSH
19869: LD_INT 10
19871: PPUSH
19872: LD_INT 3
19874: PPUSH
19875: LD_INT 3
19877: PPUSH
19878: LD_INT 3
19880: PPUSH
19881: LD_INT 42
19883: PUSH
19884: LD_INT 43
19886: PUSH
19887: LD_INT 44
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: PPUSH
19895: EMPTY
19896: PPUSH
19897: EMPTY
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: CALL 7361 0 11
// enable ;
19906: ENABLE
// end ;
19907: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 do
19908: LD_EXP 65
19912: PUSH
19913: LD_INT 1
19915: EQUAL
19916: PUSH
19917: LD_EXP 92
19921: PUSH
19922: LD_INT 1
19924: EQUAL
19925: AND
19926: IFFALSE 19986
19928: GO 19930
19930: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
19931: LD_INT 2
19933: PPUSH
19934: LD_INT 6
19936: PPUSH
19937: LD_INT 4
19939: PPUSH
19940: LD_INT 6
19942: PPUSH
19943: CALL_OW 12
19947: PPUSH
19948: LD_INT 10
19950: PPUSH
19951: LD_INT 3
19953: PPUSH
19954: LD_INT 3
19956: PPUSH
19957: LD_INT 3
19959: PPUSH
19960: LD_INT 44
19962: PUSH
19963: LD_INT 45
19965: PUSH
19966: LD_INT 46
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: PPUSH
19974: EMPTY
19975: PPUSH
19976: EMPTY
19977: PPUSH
19978: LD_INT 1
19980: PPUSH
19981: CALL 7361 0 11
// enable ;
19985: ENABLE
// end ;
19986: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 do
19987: LD_EXP 65
19991: PUSH
19992: LD_INT 1
19994: EQUAL
19995: PUSH
19996: LD_EXP 92
20000: PUSH
20001: LD_INT 3
20003: EQUAL
20004: AND
20005: IFFALSE 20069
20007: GO 20009
20009: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
20010: LD_INT 2
20012: PPUSH
20013: LD_INT 6
20015: PPUSH
20016: LD_INT 4
20018: PPUSH
20019: LD_INT 8
20021: PPUSH
20022: CALL_OW 12
20026: PPUSH
20027: LD_INT 10
20029: PPUSH
20030: LD_INT 3
20032: PPUSH
20033: LD_INT 3
20035: PPUSH
20036: LD_INT 3
20038: PPUSH
20039: LD_INT 44
20041: PUSH
20042: LD_INT 45
20044: PUSH
20045: LD_INT 46
20047: PUSH
20048: LD_INT 47
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: PPUSH
20057: EMPTY
20058: PPUSH
20059: EMPTY
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL 7361 0 11
// enable ;
20068: ENABLE
// end ;
20069: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 do
20070: LD_EXP 65
20074: PUSH
20075: LD_INT 1
20077: EQUAL
20078: PUSH
20079: LD_EXP 92
20083: PUSH
20084: LD_INT 4
20086: GREATEREQUAL
20087: AND
20088: IFFALSE 20148
20090: GO 20092
20092: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
20093: LD_INT 2
20095: PPUSH
20096: LD_INT 6
20098: PPUSH
20099: LD_INT 4
20101: PPUSH
20102: LD_INT 8
20104: PPUSH
20105: CALL_OW 12
20109: PPUSH
20110: LD_INT 10
20112: PPUSH
20113: LD_INT 3
20115: PPUSH
20116: LD_INT 3
20118: PPUSH
20119: LD_INT 3
20121: PPUSH
20122: LD_INT 46
20124: PUSH
20125: LD_INT 47
20127: PUSH
20128: LD_INT 49
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: EMPTY
20137: PPUSH
20138: EMPTY
20139: PPUSH
20140: LD_INT 1
20142: PPUSH
20143: CALL 7361 0 11
// enable ;
20147: ENABLE
// end ; end_of_file
20148: END
// every 1 do var i , dec1 , options , people ;
20149: GO 20151
20151: DISABLE
20152: LD_INT 0
20154: PPUSH
20155: PPUSH
20156: PPUSH
20157: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
20158: LD_INT 24
20160: PPUSH
20161: LD_INT 92
20163: PPUSH
20164: LD_INT 172
20166: PPUSH
20167: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
20171: LD_INT 25
20173: PPUSH
20174: LD_INT 103
20176: PPUSH
20177: LD_INT 74
20179: PPUSH
20180: CALL_OW 243
// InGameOn ;
20184: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20188: LD_EXP 24
20192: PUSH
20193: LD_EXP 25
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PPUSH
20202: LD_INT 60
20204: PPUSH
20205: LD_INT 75
20207: PPUSH
20208: CALL_OW 111
// if KappaStatus = 0 then
20212: LD_EXP 74
20216: PUSH
20217: LD_INT 0
20219: EQUAL
20220: IFFALSE 20509
// begin CenterNowOnUnits ( NewJMMVeh ) ;
20222: LD_EXP 24
20226: PPUSH
20227: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
20231: LD_EXP 1
20235: PPUSH
20236: LD_STRING D1T-JMM-1
20238: PPUSH
20239: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20243: LD_EXP 24
20247: PPUSH
20248: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
20252: LD_EXP 17
20256: PPUSH
20257: LD_STRING D1T-Pow-1
20259: PPUSH
20260: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20264: LD_EXP 24
20268: PPUSH
20269: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
20273: LD_EXP 1
20277: PPUSH
20278: LD_STRING D1T-JMM-2
20280: PPUSH
20281: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20285: LD_EXP 24
20289: PPUSH
20290: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
20294: LD_EXP 17
20298: PPUSH
20299: LD_STRING D1T-Pow-2
20301: PPUSH
20302: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20306: LD_EXP 24
20310: PPUSH
20311: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
20315: LD_EXP 1
20319: PPUSH
20320: LD_STRING D1T-JMM-3
20322: PPUSH
20323: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20327: LD_EXP 24
20331: PPUSH
20332: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
20336: LD_EXP 17
20340: PPUSH
20341: LD_STRING D1T-Pow-3
20343: PPUSH
20344: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20348: LD_EXP 24
20352: PPUSH
20353: CALL_OW 87
// if not JMMGirlVeh = [ ] then
20357: LD_EXP 72
20361: PUSH
20362: EMPTY
20363: EQUAL
20364: NOT
20365: IFFALSE 20465
// begin if JMMGirl = 1 then
20367: LD_EXP 73
20371: PUSH
20372: LD_INT 1
20374: EQUAL
20375: IFFALSE 20389
// Say ( Joan , D1T-Joan-3 ) ;
20377: LD_EXP 2
20381: PPUSH
20382: LD_STRING D1T-Joan-3
20384: PPUSH
20385: CALL_OW 88
// if JMMGirl = 2 then
20389: LD_EXP 73
20393: PUSH
20394: LD_INT 2
20396: EQUAL
20397: IFFALSE 20411
// Say ( Lisa , D1T-Lisa-3 ) ;
20399: LD_EXP 4
20403: PPUSH
20404: LD_STRING D1T-Lisa-3
20406: PPUSH
20407: CALL_OW 88
// if JMMGirl = 3 then
20411: LD_EXP 73
20415: PUSH
20416: LD_INT 3
20418: EQUAL
20419: IFFALSE 20433
// Say ( Connie , D1T-Con-3 ) ;
20421: LD_EXP 16
20425: PPUSH
20426: LD_STRING D1T-Con-3
20428: PPUSH
20429: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20433: LD_EXP 24
20437: PPUSH
20438: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
20442: LD_EXP 17
20446: PPUSH
20447: LD_STRING D1T-Pow-4
20449: PPUSH
20450: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20454: LD_EXP 24
20458: PPUSH
20459: CALL_OW 87
// end else
20463: GO 20507
// begin Say ( JMM , D1T-JMM-4 ) ;
20465: LD_EXP 1
20469: PPUSH
20470: LD_STRING D1T-JMM-4
20472: PPUSH
20473: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20477: LD_EXP 24
20481: PPUSH
20482: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
20486: LD_EXP 17
20490: PPUSH
20491: LD_STRING D1T-Pow-5
20493: PPUSH
20494: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20498: LD_EXP 24
20502: PPUSH
20503: CALL_OW 87
// end ; end else
20507: GO 20593
// begin CenterNowOnUnits ( NewJMMVeh ) ;
20509: LD_EXP 24
20513: PPUSH
20514: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
20518: LD_EXP 1
20522: PPUSH
20523: LD_STRING D1T-JMM-1
20525: PPUSH
20526: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20530: LD_EXP 24
20534: PPUSH
20535: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
20539: LD_EXP 17
20543: PPUSH
20544: LD_STRING D1T-Pow-1
20546: PPUSH
20547: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20551: LD_EXP 24
20555: PPUSH
20556: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
20560: LD_EXP 1
20564: PPUSH
20565: LD_STRING D1T-JMM-2
20567: PPUSH
20568: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20572: LD_EXP 24
20576: PPUSH
20577: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
20581: LD_EXP 17
20585: PPUSH
20586: LD_STRING D1T-Pow-2
20588: PPUSH
20589: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
20593: LD_INT 35
20595: PPUSH
20596: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20600: LD_EXP 24
20604: PUSH
20605: LD_EXP 25
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PPUSH
20614: LD_INT 60
20616: PPUSH
20617: LD_INT 75
20619: PPUSH
20620: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
20624: LD_EXP 24
20628: PPUSH
20629: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 ;
20633: LD_EXP 24
20637: PPUSH
20638: LD_EXP 17
20642: PPUSH
20643: CALL_OW 296
20647: PUSH
20648: LD_INT 20
20650: LESS
20651: IFFALSE 20593
// ComExitVehicle ( JMM ) ;
20653: LD_EXP 1
20657: PPUSH
20658: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
20662: LD_INT 35
20664: PPUSH
20665: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
20669: LD_EXP 1
20673: PPUSH
20674: LD_EXP 17
20678: PPUSH
20679: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
20683: LD_EXP 1
20687: PPUSH
20688: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
20692: LD_EXP 1
20696: PPUSH
20697: LD_EXP 17
20701: PPUSH
20702: CALL_OW 296
20706: PUSH
20707: LD_INT 6
20709: LESS
20710: IFFALSE 20662
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
20712: LD_EXP 1
20716: PUSH
20717: LD_EXP 17
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PPUSH
20726: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
20730: LD_EXP 1
20734: PPUSH
20735: LD_EXP 17
20739: PPUSH
20740: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
20744: LD_EXP 17
20748: PPUSH
20749: LD_EXP 1
20753: PPUSH
20754: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
20758: LD_EXP 1
20762: PPUSH
20763: LD_STRING D1-JMM-1
20765: PPUSH
20766: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
20770: LD_EXP 17
20774: PPUSH
20775: LD_STRING D1-Pow-1
20777: PPUSH
20778: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
20782: LD_INT 1
20784: PPUSH
20785: LD_INT 3
20787: PPUSH
20788: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
20792: LD_INT 1
20794: PPUSH
20795: LD_INT 4
20797: PPUSH
20798: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
20802: LD_INT 1
20804: PPUSH
20805: LD_INT 5
20807: PPUSH
20808: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
20812: LD_INT 171
20814: PPUSH
20815: LD_INT 81
20817: PPUSH
20818: CALL_OW 84
// wait ( 0 0$4 ) ;
20822: LD_INT 140
20824: PPUSH
20825: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
20829: LD_INT 162
20831: PPUSH
20832: LD_INT 36
20834: PPUSH
20835: CALL_OW 84
// wait ( 0 0$4 ) ;
20839: LD_INT 140
20841: PPUSH
20842: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
20846: LD_INT 75
20848: PPUSH
20849: LD_INT 16
20851: PPUSH
20852: CALL_OW 84
// wait ( 0 0$4 ) ;
20856: LD_INT 140
20858: PPUSH
20859: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
20863: LD_EXP 17
20867: PUSH
20868: LD_EXP 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PPUSH
20877: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
20881: LD_EXP 1
20885: PPUSH
20886: LD_STRING D1-JMM-2
20888: PPUSH
20889: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
20893: LD_EXP 17
20897: PPUSH
20898: LD_STRING D1-Pow-2
20900: PPUSH
20901: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
20905: LD_EXP 1
20909: PPUSH
20910: LD_STRING D1-JMM-3
20912: PPUSH
20913: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
20917: LD_EXP 17
20921: PPUSH
20922: LD_STRING D1-Pow-3
20924: PPUSH
20925: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
20929: LD_EXP 1
20933: PPUSH
20934: LD_STRING D1-JMM-4
20936: PPUSH
20937: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
20941: LD_EXP 17
20945: PPUSH
20946: LD_STRING D1-Pow-4
20948: PPUSH
20949: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
20953: LD_EXP 1
20957: PPUSH
20958: LD_STRING D1-JMM-5
20960: PPUSH
20961: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
20965: LD_EXP 17
20969: PPUSH
20970: LD_STRING D1-Pow-5
20972: PPUSH
20973: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
20977: LD_ADDR_VAR 0 3
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: LD_INT 3
20990: PUSH
20991: LD_INT 4
20993: PUSH
20994: LD_INT 5
20996: PUSH
20997: LD_INT 6
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
21008: LD_ADDR_VAR 0 2
21012: PUSH
21013: LD_STRING Q1
21015: PPUSH
21016: LD_VAR 0 3
21020: PPUSH
21021: CALL_OW 98
21025: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
21026: LD_ADDR_VAR 0 2
21030: PUSH
21031: LD_STRING Q1
21033: PPUSH
21034: LD_VAR 0 3
21038: PPUSH
21039: CALL_OW 98
21043: ST_TO_ADDR
// options = options diff dec1 ;
21044: LD_ADDR_VAR 0 3
21048: PUSH
21049: LD_VAR 0 3
21053: PUSH
21054: LD_VAR 0 2
21058: DIFF
21059: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
21060: LD_VAR 0 2
21064: PPUSH
21065: LD_VAR 0 3
21069: PPUSH
21070: CALL 22604 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
21074: LD_VAR 0 2
21078: PUSH
21079: LD_INT 5
21081: PUSH
21082: LD_INT 6
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: IN
21089: PUSH
21090: LD_VAR 0 3
21094: PUSH
21095: LD_INT 2
21097: EQUAL
21098: OR
21099: IFFALSE 21026
// if not ( dec1 in [ 5 , 6 ] ) then
21101: LD_VAR 0 2
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 6
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: IN
21116: NOT
21117: IFFALSE 21160
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
21119: LD_ADDR_VAR 0 2
21123: PUSH
21124: LD_STRING Q1a
21126: PPUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PPUSH
21137: CALL_OW 98
21141: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
21142: LD_VAR 0 2
21146: PUSH
21147: LD_INT 4
21149: PLUS
21150: PPUSH
21151: LD_VAR 0 3
21155: PPUSH
21156: CALL 22604 0 2
// end ; if not JMMGirlVeh = [ ] then
21160: LD_EXP 72
21164: PUSH
21165: EMPTY
21166: EQUAL
21167: NOT
21168: IFFALSE 21330
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
21170: LD_EXP 25
21174: PPUSH
21175: CALL_OW 313
21179: PPUSH
21180: CALL_OW 121
// wait ( 0 0$1 ) ;
21184: LD_INT 35
21186: PPUSH
21187: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21191: LD_INT 35
21193: PPUSH
21194: CALL_OW 67
// if JMMGirl = 1 then
21198: LD_EXP 73
21202: PUSH
21203: LD_INT 1
21205: EQUAL
21206: IFFALSE 21222
// ComMoveUnit ( JMM , Joan ) ;
21208: LD_EXP 1
21212: PPUSH
21213: LD_EXP 2
21217: PPUSH
21218: CALL_OW 112
// if JMMGirl = 2 then
21222: LD_EXP 73
21226: PUSH
21227: LD_INT 2
21229: EQUAL
21230: IFFALSE 21246
// ComMoveUnit ( JMM , Lisa ) ;
21232: LD_EXP 1
21236: PPUSH
21237: LD_EXP 4
21241: PPUSH
21242: CALL_OW 112
// if JMMGirl = 3 then
21246: LD_EXP 73
21250: PUSH
21251: LD_INT 3
21253: EQUAL
21254: IFFALSE 21270
// ComMoveUnit ( JMM , Connie ) ;
21256: LD_EXP 1
21260: PPUSH
21261: LD_EXP 16
21265: PPUSH
21266: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
21270: LD_EXP 1
21274: PPUSH
21275: LD_EXP 2
21279: PPUSH
21280: CALL_OW 296
21284: PUSH
21285: LD_INT 6
21287: LESS
21288: PUSH
21289: LD_EXP 1
21293: PPUSH
21294: LD_EXP 4
21298: PPUSH
21299: CALL_OW 296
21303: PUSH
21304: LD_INT 6
21306: LESS
21307: OR
21308: PUSH
21309: LD_EXP 1
21313: PPUSH
21314: LD_EXP 16
21318: PPUSH
21319: CALL_OW 296
21323: PUSH
21324: LD_INT 6
21326: LESS
21327: OR
21328: IFFALSE 21191
// end ; CenterNowOnUnits ( JMM ) ;
21330: LD_EXP 1
21334: PPUSH
21335: CALL_OW 87
// case JMMGirl of 1 :
21339: LD_EXP 73
21343: PUSH
21344: LD_INT 1
21346: DOUBLE
21347: EQUAL
21348: IFTRUE 21352
21350: GO 21407
21352: POP
// begin ComTurnUnit ( JMM , Joan ) ;
21353: LD_EXP 1
21357: PPUSH
21358: LD_EXP 2
21362: PPUSH
21363: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
21367: LD_EXP 2
21371: PPUSH
21372: LD_EXP 1
21376: PPUSH
21377: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
21381: LD_EXP 2
21385: PPUSH
21386: LD_STRING D3W-Joan-1
21388: PPUSH
21389: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21393: LD_EXP 1
21397: PPUSH
21398: LD_STRING D3W-JMM-1
21400: PPUSH
21401: CALL_OW 88
// end ; 2 :
21405: GO 21534
21407: LD_INT 2
21409: DOUBLE
21410: EQUAL
21411: IFTRUE 21415
21413: GO 21470
21415: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
21416: LD_EXP 1
21420: PPUSH
21421: LD_EXP 4
21425: PPUSH
21426: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
21430: LD_EXP 4
21434: PPUSH
21435: LD_EXP 1
21439: PPUSH
21440: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
21444: LD_EXP 4
21448: PPUSH
21449: LD_STRING D3W-Lisa-1
21451: PPUSH
21452: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21456: LD_EXP 1
21460: PPUSH
21461: LD_STRING D3W-JMM-1
21463: PPUSH
21464: CALL_OW 88
// end ; 3 :
21468: GO 21534
21470: LD_INT 3
21472: DOUBLE
21473: EQUAL
21474: IFTRUE 21478
21476: GO 21533
21478: POP
// begin ComTurnUnit ( JMM , Connie ) ;
21479: LD_EXP 1
21483: PPUSH
21484: LD_EXP 16
21488: PPUSH
21489: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
21493: LD_EXP 16
21497: PPUSH
21498: LD_EXP 1
21502: PPUSH
21503: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
21507: LD_EXP 16
21511: PPUSH
21512: LD_STRING D3W-Con-1
21514: PPUSH
21515: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21519: LD_EXP 1
21523: PPUSH
21524: LD_STRING D3W-JMM-1
21526: PPUSH
21527: CALL_OW 88
// end ; end ;
21531: GO 21534
21533: POP
// people = 0 ;
21534: LD_ADDR_VAR 0 4
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// if Lisa and people < 5 then
21542: LD_EXP 4
21546: PUSH
21547: LD_VAR 0 4
21551: PUSH
21552: LD_INT 5
21554: LESS
21555: AND
21556: IFFALSE 21588
// begin people = people + 1 ;
21558: LD_ADDR_VAR 0 4
21562: PUSH
21563: LD_VAR 0 4
21567: PUSH
21568: LD_INT 1
21570: PLUS
21571: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
21572: LD_ADDR_EXP 60
21576: PUSH
21577: LD_EXP 60
21581: PUSH
21582: LD_EXP 4
21586: ADD
21587: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
21588: LD_EXP 5
21592: PUSH
21593: LD_VAR 0 4
21597: PUSH
21598: LD_INT 5
21600: LESS
21601: AND
21602: IFFALSE 21634
// begin people = people + 1 ;
21604: LD_ADDR_VAR 0 4
21608: PUSH
21609: LD_VAR 0 4
21613: PUSH
21614: LD_INT 1
21616: PLUS
21617: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
21618: LD_ADDR_EXP 60
21622: PUSH
21623: LD_EXP 60
21627: PUSH
21628: LD_EXP 5
21632: ADD
21633: ST_TO_ADDR
// end ; if Bobby and people < 5 then
21634: LD_EXP 6
21638: PUSH
21639: LD_VAR 0 4
21643: PUSH
21644: LD_INT 5
21646: LESS
21647: AND
21648: IFFALSE 21680
// begin people = people + 1 ;
21650: LD_ADDR_VAR 0 4
21654: PUSH
21655: LD_VAR 0 4
21659: PUSH
21660: LD_INT 1
21662: PLUS
21663: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
21664: LD_ADDR_EXP 60
21668: PUSH
21669: LD_EXP 60
21673: PUSH
21674: LD_EXP 6
21678: ADD
21679: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
21680: LD_EXP 7
21684: PUSH
21685: LD_VAR 0 4
21689: PUSH
21690: LD_INT 5
21692: LESS
21693: AND
21694: IFFALSE 21726
// begin people = people + 1 ;
21696: LD_ADDR_VAR 0 4
21700: PUSH
21701: LD_VAR 0 4
21705: PUSH
21706: LD_INT 1
21708: PLUS
21709: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
21710: LD_ADDR_EXP 60
21714: PUSH
21715: LD_EXP 60
21719: PUSH
21720: LD_EXP 7
21724: ADD
21725: ST_TO_ADDR
// end ; if Denis and people < 5 then
21726: LD_EXP 8
21730: PUSH
21731: LD_VAR 0 4
21735: PUSH
21736: LD_INT 5
21738: LESS
21739: AND
21740: IFFALSE 21772
// begin people = people + 1 ;
21742: LD_ADDR_VAR 0 4
21746: PUSH
21747: LD_VAR 0 4
21751: PUSH
21752: LD_INT 1
21754: PLUS
21755: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
21756: LD_ADDR_EXP 60
21760: PUSH
21761: LD_EXP 60
21765: PUSH
21766: LD_EXP 8
21770: ADD
21771: ST_TO_ADDR
// end ; if Brown and people < 5 then
21772: LD_EXP 9
21776: PUSH
21777: LD_VAR 0 4
21781: PUSH
21782: LD_INT 5
21784: LESS
21785: AND
21786: IFFALSE 21818
// begin people = people + 1 ;
21788: LD_ADDR_VAR 0 4
21792: PUSH
21793: LD_VAR 0 4
21797: PUSH
21798: LD_INT 1
21800: PLUS
21801: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
21802: LD_ADDR_EXP 60
21806: PUSH
21807: LD_EXP 60
21811: PUSH
21812: LD_EXP 9
21816: ADD
21817: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
21818: LD_EXP 10
21822: PUSH
21823: LD_VAR 0 4
21827: PUSH
21828: LD_INT 5
21830: LESS
21831: AND
21832: IFFALSE 21864
// begin people = people + 1 ;
21834: LD_ADDR_VAR 0 4
21838: PUSH
21839: LD_VAR 0 4
21843: PUSH
21844: LD_INT 1
21846: PLUS
21847: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
21848: LD_ADDR_EXP 60
21852: PUSH
21853: LD_EXP 60
21857: PUSH
21858: LD_EXP 10
21862: ADD
21863: ST_TO_ADDR
// end ; if Houten and people < 5 then
21864: LD_EXP 11
21868: PUSH
21869: LD_VAR 0 4
21873: PUSH
21874: LD_INT 5
21876: LESS
21877: AND
21878: IFFALSE 21910
// begin people = people + 1 ;
21880: LD_ADDR_VAR 0 4
21884: PUSH
21885: LD_VAR 0 4
21889: PUSH
21890: LD_INT 1
21892: PLUS
21893: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
21894: LD_ADDR_EXP 60
21898: PUSH
21899: LD_EXP 60
21903: PUSH
21904: LD_EXP 11
21908: ADD
21909: ST_TO_ADDR
// end ; if Cornel and people < 5 then
21910: LD_EXP 12
21914: PUSH
21915: LD_VAR 0 4
21919: PUSH
21920: LD_INT 5
21922: LESS
21923: AND
21924: IFFALSE 21956
// begin people = people + 1 ;
21926: LD_ADDR_VAR 0 4
21930: PUSH
21931: LD_VAR 0 4
21935: PUSH
21936: LD_INT 1
21938: PLUS
21939: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
21940: LD_ADDR_EXP 60
21944: PUSH
21945: LD_EXP 60
21949: PUSH
21950: LD_EXP 12
21954: ADD
21955: ST_TO_ADDR
// end ; if Gary and people < 5 then
21956: LD_EXP 13
21960: PUSH
21961: LD_VAR 0 4
21965: PUSH
21966: LD_INT 5
21968: LESS
21969: AND
21970: IFFALSE 22002
// begin people = people + 1 ;
21972: LD_ADDR_VAR 0 4
21976: PUSH
21977: LD_VAR 0 4
21981: PUSH
21982: LD_INT 1
21984: PLUS
21985: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
21986: LD_ADDR_EXP 60
21990: PUSH
21991: LD_EXP 60
21995: PUSH
21996: LD_EXP 13
22000: ADD
22001: ST_TO_ADDR
// end ; if Frank and people < 5 then
22002: LD_EXP 14
22006: PUSH
22007: LD_VAR 0 4
22011: PUSH
22012: LD_INT 5
22014: LESS
22015: AND
22016: IFFALSE 22048
// begin people = people + 1 ;
22018: LD_ADDR_VAR 0 4
22022: PUSH
22023: LD_VAR 0 4
22027: PUSH
22028: LD_INT 1
22030: PLUS
22031: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
22032: LD_ADDR_EXP 60
22036: PUSH
22037: LD_EXP 60
22041: PUSH
22042: LD_EXP 14
22046: ADD
22047: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
22048: LD_EXP 15
22052: PUSH
22053: LD_VAR 0 4
22057: PUSH
22058: LD_INT 5
22060: LESS
22061: AND
22062: IFFALSE 22094
// begin people = people + 1 ;
22064: LD_ADDR_VAR 0 4
22068: PUSH
22069: LD_VAR 0 4
22073: PUSH
22074: LD_INT 1
22076: PLUS
22077: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
22078: LD_ADDR_EXP 60
22082: PUSH
22083: LD_EXP 60
22087: PUSH
22088: LD_EXP 15
22092: ADD
22093: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
22094: LD_EXP 60
22098: PPUSH
22099: LD_INT 25
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 72
22113: PUSH
22114: LD_INT 0
22116: EQUAL
22117: IFFALSE 22135
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
22119: LD_EXP 60
22123: PUSH
22124: LD_INT 1
22126: ARRAY
22127: PPUSH
22128: LD_INT 2
22130: PPUSH
22131: CALL_OW 336
// for i = 1 to 5 do
22135: LD_ADDR_VAR 0 1
22139: PUSH
22140: DOUBLE
22141: LD_INT 1
22143: DEC
22144: ST_TO_ADDR
22145: LD_INT 5
22147: PUSH
22148: FOR_TO
22149: IFFALSE 22200
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
22151: LD_EXP 60
22155: PUSH
22156: LD_VAR 0 1
22160: ARRAY
22161: PPUSH
22162: LD_INT 62
22164: PUSH
22165: LD_VAR 0 1
22169: PLUS
22170: PPUSH
22171: LD_INT 95
22173: PPUSH
22174: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
22178: LD_EXP 60
22182: PUSH
22183: LD_VAR 0 1
22187: ARRAY
22188: PPUSH
22189: LD_EXP 1
22193: PPUSH
22194: CALL_OW 179
// end ;
22198: GO 22148
22200: POP
22201: POP
// repeat wait ( 0 0$1 ) ;
22202: LD_INT 35
22204: PPUSH
22205: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
22209: LD_EXP 1
22213: PPUSH
22214: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
22218: LD_EXP 1
22222: PPUSH
22223: LD_INT 66
22225: PPUSH
22226: LD_INT 98
22228: PPUSH
22229: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
22233: LD_EXP 2
22237: PUSH
22238: LD_EXP 4
22242: PUSH
22243: LD_EXP 16
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: PPUSH
22253: LD_INT 67
22255: PPUSH
22256: LD_INT 98
22258: PPUSH
22259: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
22263: LD_EXP 1
22267: PUSH
22268: LD_EXP 2
22272: PUSH
22273: LD_EXP 4
22277: PUSH
22278: LD_EXP 16
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: PPUSH
22289: LD_INT 63
22291: PPUSH
22292: LD_INT 95
22294: PPUSH
22295: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
22299: LD_EXP 1
22303: PPUSH
22304: LD_INT 9
22306: PPUSH
22307: CALL_OW 308
22311: PUSH
22312: LD_INT 9
22314: PPUSH
22315: LD_INT 22
22317: PUSH
22318: LD_INT 4
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 21
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 70
22343: PUSH
22344: LD_INT 5
22346: EQUAL
22347: AND
22348: IFFALSE 22202
// wait ( 0 0$2 ) ;
22350: LD_INT 70
22352: PPUSH
22353: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
22357: LD_EXP 4
22361: PPUSH
22362: LD_INT 9
22364: PPUSH
22365: CALL_OW 308
22369: IFFALSE 22383
// Say ( Lisa , D3nW-Lisa-1 ) ;
22371: LD_EXP 4
22375: PPUSH
22376: LD_STRING D3nW-Lisa-1
22378: PPUSH
22379: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
22383: LD_EXP 7
22387: PPUSH
22388: LD_INT 9
22390: PPUSH
22391: CALL_OW 308
22395: IFFALSE 22409
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
22397: LD_EXP 7
22401: PPUSH
22402: LD_STRING D3nW-Cyrus-1
22404: PPUSH
22405: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
22409: LD_EXP 6
22413: PPUSH
22414: LD_INT 9
22416: PPUSH
22417: CALL_OW 308
22421: IFFALSE 22435
// Say ( Bobby , D3nW-Bobby-1 ) ;
22423: LD_EXP 6
22427: PPUSH
22428: LD_STRING D3nW-Bobby-1
22430: PPUSH
22431: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
22435: LD_EXP 13
22439: PPUSH
22440: LD_INT 9
22442: PPUSH
22443: CALL_OW 308
22447: IFFALSE 22461
// Say ( Gary , D3nW-Gary-1 ) ;
22449: LD_EXP 13
22453: PPUSH
22454: LD_STRING D3nW-Gary-1
22456: PPUSH
22457: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
22461: LD_EXP 5
22465: PPUSH
22466: LD_INT 9
22468: PPUSH
22469: CALL_OW 308
22473: IFFALSE 22487
// Say ( Donaldson , D3nW-Don-1 ) ;
22475: LD_EXP 5
22479: PPUSH
22480: LD_STRING D3nW-Don-1
22482: PPUSH
22483: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
22487: LD_EXP 12
22491: PPUSH
22492: LD_INT 9
22494: PPUSH
22495: CALL_OW 308
22499: IFFALSE 22513
// Say ( Cornel , D3nW-Corn-1 ) ;
22501: LD_EXP 12
22505: PPUSH
22506: LD_STRING D3nW-Corn-1
22508: PPUSH
22509: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
22513: LD_EXP 14
22517: PPUSH
22518: LD_INT 9
22520: PPUSH
22521: CALL_OW 308
22525: IFFALSE 22539
// Say ( Frank , D3nW-Frank-1 ) ;
22527: LD_EXP 14
22531: PPUSH
22532: LD_STRING D3nW-Frank-1
22534: PPUSH
22535: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
22539: LD_EXP 1
22543: PPUSH
22544: LD_STRING D3nW-JMM-1
22546: PPUSH
22547: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
22551: LD_EXP 1
22555: PPUSH
22556: LD_STRING D3nW-JMM-1a
22558: PPUSH
22559: CALL_OW 88
// InGameOff ;
22563: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22567: LD_STRING M1
22569: PPUSH
22570: CALL_OW 337
// SaveForQuickRestart ;
22574: CALL_OW 22
// startAttacks = 1 ;
22578: LD_ADDR_EXP 65
22582: PUSH
22583: LD_INT 1
22585: ST_TO_ADDR
// wait ( 0 0$5 ) ;
22586: LD_INT 175
22588: PPUSH
22589: CALL_OW 67
// powellBuildBase = 1 ;
22593: LD_ADDR_EXP 61
22597: PUSH
22598: LD_INT 1
22600: ST_TO_ADDR
// end ;
22601: PPOPN 4
22603: END
// function ResolveQuery ( question , list_of_q ) ; begin
22604: LD_INT 0
22606: PPUSH
// case question of 1 :
22607: LD_VAR 0 1
22611: PUSH
22612: LD_INT 1
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22671
22620: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
22621: LD_EXP 1
22625: PPUSH
22626: LD_STRING D2Mot-JMM-1
22628: PPUSH
22629: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
22633: LD_EXP 17
22637: PPUSH
22638: LD_STRING D2Mot-Pow-1
22640: PPUSH
22641: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
22645: LD_EXP 1
22649: PPUSH
22650: LD_STRING D2Mot-JMM-2
22652: PPUSH
22653: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
22657: LD_EXP 17
22661: PPUSH
22662: LD_STRING D2Mot-Pow-2
22664: PPUSH
22665: CALL_OW 88
// end ; 2 :
22669: GO 23014
22671: LD_INT 2
22673: DOUBLE
22674: EQUAL
22675: IFTRUE 22679
22677: GO 22755
22679: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
22680: LD_EXP 1
22684: PPUSH
22685: LD_STRING D2Rus-JMM-1
22687: PPUSH
22688: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
22692: LD_EXP 17
22696: PPUSH
22697: LD_STRING D2Rus-Pow-1
22699: PPUSH
22700: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
22704: LD_EXP 1
22708: PPUSH
22709: LD_STRING D2Rus-JMM-2
22711: PPUSH
22712: CALL_OW 88
// if not ( 3 in list_of_q ) then
22716: LD_INT 3
22718: PUSH
22719: LD_VAR 0 2
22723: IN
22724: NOT
22725: IFFALSE 22741
// Say ( Powell , D2Rus-Pow-2 ) else
22727: LD_EXP 17
22731: PPUSH
22732: LD_STRING D2Rus-Pow-2
22734: PPUSH
22735: CALL_OW 88
22739: GO 22753
// Say ( Powell , D2Rus-Pow-2a ) ;
22741: LD_EXP 17
22745: PPUSH
22746: LD_STRING D2Rus-Pow-2a
22748: PPUSH
22749: CALL_OW 88
// end ; 3 :
22753: GO 23014
22755: LD_INT 3
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22848
22763: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
22764: LD_EXP 1
22768: PPUSH
22769: LD_STRING D2Leg-JMM-1
22771: PPUSH
22772: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
22776: LD_EXP 17
22780: PPUSH
22781: LD_STRING D2Leg-Pow-1
22783: PPUSH
22784: CALL_OW 88
// if ( 2 in list_of_q ) then
22788: LD_INT 2
22790: PUSH
22791: LD_VAR 0 2
22795: IN
22796: IFFALSE 22822
// begin Say ( JMM , D2Leg-JMM-2 ) ;
22798: LD_EXP 1
22802: PPUSH
22803: LD_STRING D2Leg-JMM-2
22805: PPUSH
22806: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
22810: LD_EXP 17
22814: PPUSH
22815: LD_STRING D2Leg-Pow-2
22817: PPUSH
22818: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
22822: LD_EXP 1
22826: PPUSH
22827: LD_STRING D2Leg-JMM-3
22829: PPUSH
22830: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
22834: LD_EXP 17
22838: PPUSH
22839: LD_STRING D2Leg-Pow-3
22841: PPUSH
22842: CALL_OW 88
// end ; 4 :
22846: GO 23014
22848: LD_INT 4
22850: DOUBLE
22851: EQUAL
22852: IFTRUE 22856
22854: GO 22931
22856: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
22857: LD_EXP 1
22861: PPUSH
22862: LD_STRING D2Ar-JMM-1
22864: PPUSH
22865: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
22869: LD_EXP 17
22873: PPUSH
22874: LD_STRING D2Ar-Pow-1
22876: PPUSH
22877: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
22881: LD_EXP 1
22885: PPUSH
22886: LD_STRING D2Ar-JMM-2
22888: PPUSH
22889: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
22893: LD_EXP 17
22897: PPUSH
22898: LD_STRING D2Ar-Pow-2
22900: PPUSH
22901: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
22905: LD_EXP 1
22909: PPUSH
22910: LD_STRING D2Ar-JMM-3
22912: PPUSH
22913: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
22917: LD_EXP 17
22921: PPUSH
22922: LD_STRING D2Ar-Pow-3
22924: PPUSH
22925: CALL_OW 88
// end ; 5 :
22929: GO 23014
22931: LD_INT 5
22933: DOUBLE
22934: EQUAL
22935: IFTRUE 22939
22937: GO 22954
22939: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
22940: LD_EXP 1
22944: PPUSH
22945: LD_STRING D2Conf-JMM-1
22947: PPUSH
22948: CALL_OW 88
// end ; 6 :
22952: GO 23014
22954: LD_INT 6
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 23013
22962: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
22963: LD_EXP 1
22967: PPUSH
22968: LD_STRING D2Com-JMM-1
22970: PPUSH
22971: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
22975: LD_EXP 17
22979: PPUSH
22980: LD_STRING D2Com-Pow-1
22982: PPUSH
22983: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
22987: LD_EXP 1
22991: PPUSH
22992: LD_STRING D2Com-JMM-2
22994: PPUSH
22995: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
22999: LD_EXP 17
23003: PPUSH
23004: LD_STRING D2Com-Pow-2
23006: PPUSH
23007: CALL_OW 88
// end ; end ;
23011: GO 23014
23013: POP
// end ;
23014: LD_VAR 0 3
23018: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
23019: LD_INT 9
23021: PPUSH
23022: LD_INT 22
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 21
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PPUSH
23046: CALL_OW 70
23050: IFFALSE 23095
23052: GO 23054
23054: DISABLE
// begin enable ;
23055: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
23056: LD_INT 9
23058: PPUSH
23059: LD_INT 22
23061: PUSH
23062: LD_INT 4
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 21
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PPUSH
23083: CALL_OW 70
23087: PPUSH
23088: LD_INT 1
23090: PPUSH
23091: CALL_OW 235
// end ;
23095: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
23096: LD_INT 22
23098: PUSH
23099: LD_INT 4
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 21
23108: PUSH
23109: LD_INT 2
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: LD_INT 58
23121: PUSH
23122: EMPTY
23123: LIST
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: PPUSH
23134: CALL_OW 69
23138: PUSH
23139: LD_INT 4
23141: EQUAL
23142: PUSH
23143: LD_EXP 65
23147: PUSH
23148: LD_INT 1
23150: EQUAL
23151: AND
23152: IFFALSE 23165
23154: GO 23156
23156: DISABLE
// startAttacks = 0 ;
23157: LD_ADDR_EXP 65
23161: PUSH
23162: LD_INT 0
23164: ST_TO_ADDR
23165: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
23166: LD_INT 22
23168: PUSH
23169: LD_INT 4
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 21
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 3
23188: PUSH
23189: LD_INT 58
23191: PUSH
23192: EMPTY
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: PPUSH
23204: CALL_OW 69
23208: PUSH
23209: LD_INT 4
23211: EQUAL
23212: PUSH
23213: LD_INT 22
23215: PUSH
23216: LD_INT 6
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 21
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 24
23235: PUSH
23236: LD_INT 250
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: PPUSH
23248: CALL_OW 69
23252: PUSH
23253: LD_INT 0
23255: EQUAL
23256: AND
23257: PUSH
23258: LD_EXP 65
23262: PUSH
23263: LD_INT 0
23265: EQUAL
23266: AND
23267: PUSH
23268: LD_EXP 62
23272: PUSH
23273: LD_INT 0
23275: EQUAL
23276: AND
23277: IFFALSE 23465
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
// begin powellAttacks = 1 ;
23285: LD_ADDR_EXP 62
23289: PUSH
23290: LD_INT 1
23292: ST_TO_ADDR
// InGameOn ;
23293: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
23297: LD_EXP 17
23301: PPUSH
23302: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
23306: LD_EXP 17
23310: PPUSH
23311: LD_INT 47
23313: PPUSH
23314: LD_INT 60
23316: PPUSH
23317: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
23321: LD_EXP 17
23325: PPUSH
23326: LD_STRING D4-Pow-1
23328: PPUSH
23329: CALL_OW 88
// for i = 1 to amUnitsAttack do
23333: LD_ADDR_VAR 0 1
23337: PUSH
23338: DOUBLE
23339: LD_INT 1
23341: DEC
23342: ST_TO_ADDR
23343: LD_EXP 59
23347: PUSH
23348: FOR_TO
23349: IFFALSE 23394
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
23351: LD_EXP 59
23355: PUSH
23356: LD_VAR 0 1
23360: ARRAY
23361: PPUSH
23362: CALL_OW 258
23366: PUSH
23367: LD_INT 1
23369: EQUAL
23370: IFFALSE 23392
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
23372: LD_EXP 59
23376: PUSH
23377: LD_VAR 0 1
23381: ARRAY
23382: PPUSH
23383: LD_STRING D4-Sol1-1
23385: PPUSH
23386: CALL_OW 88
// break ;
23390: GO 23394
// end ;
23392: GO 23348
23394: POP
23395: POP
// Say ( Powell , D4-Pow-2 ) ;
23396: LD_EXP 17
23400: PPUSH
23401: LD_STRING D4-Pow-2
23403: PPUSH
23404: CALL_OW 88
// InGameOff ;
23408: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
23412: LD_INT 22
23414: PUSH
23415: LD_INT 4
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: LD_INT 58
23437: PUSH
23438: EMPTY
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: PPUSH
23450: CALL_OW 69
23454: PPUSH
23455: LD_INT 59
23457: PPUSH
23458: LD_INT 21
23460: PPUSH
23461: CALL_OW 114
// end ;
23465: PPOPN 1
23467: END
// every 0 0$01 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) do
23468: LD_INT 7
23470: PPUSH
23471: LD_INT 22
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 21
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 70
23499: PUSH
23500: LD_INT 0
23502: GREATER
23503: PUSH
23504: LD_EXP 17
23508: PPUSH
23509: CALL_OW 302
23513: AND
23514: IFFALSE 23711
23516: GO 23518
23518: DISABLE
// begin enable ;
23519: ENABLE
// InGameOn ;
23520: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
23524: LD_INT 22
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 69
23552: PPUSH
23553: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
23557: LD_INT 7
23559: PPUSH
23560: LD_INT 22
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 21
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PPUSH
23584: CALL_OW 70
23588: PPUSH
23589: LD_INT 70
23591: PPUSH
23592: LD_INT 104
23594: PPUSH
23595: CALL_OW 111
// if powellWarm = 0 then
23599: LD_EXP 64
23603: PUSH
23604: LD_INT 0
23606: EQUAL
23607: IFFALSE 23635
// begin Say ( Powell , DBack1-Pow-1 ) ;
23609: LD_EXP 17
23613: PPUSH
23614: LD_STRING DBack1-Pow-1
23616: PPUSH
23617: CALL_OW 88
// powellWarm = powellWarm + 1 ;
23621: LD_ADDR_EXP 64
23625: PUSH
23626: LD_EXP 64
23630: PUSH
23631: LD_INT 1
23633: PLUS
23634: ST_TO_ADDR
// end ; if powellWarm = 1 then
23635: LD_EXP 64
23639: PUSH
23640: LD_INT 1
23642: EQUAL
23643: IFFALSE 23671
// begin Say ( Powell , DBack2-Pow-1 ) ;
23645: LD_EXP 17
23649: PPUSH
23650: LD_STRING DBack2-Pow-1
23652: PPUSH
23653: CALL_OW 88
// powellWarm = powellWarm + 1 ;
23657: LD_ADDR_EXP 64
23661: PUSH
23662: LD_EXP 64
23666: PUSH
23667: LD_INT 1
23669: PLUS
23670: ST_TO_ADDR
// end ; if powellWarm = 2 then
23671: LD_EXP 64
23675: PUSH
23676: LD_INT 2
23678: EQUAL
23679: IFFALSE 23700
// begin Say ( Powell , DBack3-Pow-1 ) ;
23681: LD_EXP 17
23685: PPUSH
23686: LD_STRING DBack3-Pow-1
23688: PPUSH
23689: CALL_OW 88
// YouLost ( Dismissed ) ;
23693: LD_STRING Dismissed
23695: PPUSH
23696: CALL_OW 104
// end ; InGameOff ;
23700: CALL_OW 9
// wait ( 0 0$6 ) ;
23704: LD_INT 210
23706: PPUSH
23707: CALL_OW 67
// end ;
23711: END
// every 0 0$01 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) do
23712: LD_INT 8
23714: PPUSH
23715: LD_INT 22
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 21
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PPUSH
23739: CALL_OW 70
23743: PUSH
23744: LD_INT 0
23746: GREATER
23747: PUSH
23748: LD_EXP 17
23752: PPUSH
23753: CALL_OW 302
23757: AND
23758: IFFALSE 23955
23760: GO 23762
23762: DISABLE
// begin enable ;
23763: ENABLE
// InGameOn ;
23764: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
23768: LD_INT 22
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 21
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PPUSH
23792: CALL_OW 69
23796: PPUSH
23797: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
23801: LD_INT 8
23803: PPUSH
23804: LD_INT 22
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 21
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PPUSH
23828: CALL_OW 70
23832: PPUSH
23833: LD_INT 71
23835: PPUSH
23836: LD_INT 63
23838: PPUSH
23839: CALL_OW 111
// if powellWarm = 0 then
23843: LD_EXP 64
23847: PUSH
23848: LD_INT 0
23850: EQUAL
23851: IFFALSE 23879
// begin Say ( Powell , DBack1-Pow-1 ) ;
23853: LD_EXP 17
23857: PPUSH
23858: LD_STRING DBack1-Pow-1
23860: PPUSH
23861: CALL_OW 88
// powellWarm = powellWarm + 1 ;
23865: LD_ADDR_EXP 64
23869: PUSH
23870: LD_EXP 64
23874: PUSH
23875: LD_INT 1
23877: PLUS
23878: ST_TO_ADDR
// end ; if powellWarm = 1 then
23879: LD_EXP 64
23883: PUSH
23884: LD_INT 1
23886: EQUAL
23887: IFFALSE 23915
// begin Say ( Powell , DBack2-Pow-1 ) ;
23889: LD_EXP 17
23893: PPUSH
23894: LD_STRING DBack2-Pow-1
23896: PPUSH
23897: CALL_OW 88
// powellWarm = powellWarm + 1 ;
23901: LD_ADDR_EXP 64
23905: PUSH
23906: LD_EXP 64
23910: PUSH
23911: LD_INT 1
23913: PLUS
23914: ST_TO_ADDR
// end ; if powellWarm = 2 then
23915: LD_EXP 64
23919: PUSH
23920: LD_INT 2
23922: EQUAL
23923: IFFALSE 23944
// begin Say ( Powell , DBack3-Pow-1 ) ;
23925: LD_EXP 17
23929: PPUSH
23930: LD_STRING DBack3-Pow-1
23932: PPUSH
23933: CALL_OW 88
// YouLost ( Dismissed ) ;
23937: LD_STRING Dismissed
23939: PPUSH
23940: CALL_OW 104
// end ; InGameOff ;
23944: CALL_OW 9
// wait ( 0 0$6 ) ;
23948: LD_INT 210
23950: PPUSH
23951: CALL_OW 67
// end ;
23955: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
23956: LD_EXP 62
23960: PUSH
23961: LD_INT 1
23963: EQUAL
23964: IFFALSE 24013
23966: GO 23968
23968: DISABLE
23969: LD_INT 0
23971: PPUSH
// begin enable ;
23972: ENABLE
// for i = 1 to amUnitsAttack do
23973: LD_ADDR_VAR 0 1
23977: PUSH
23978: DOUBLE
23979: LD_INT 1
23981: DEC
23982: ST_TO_ADDR
23983: LD_EXP 59
23987: PUSH
23988: FOR_TO
23989: IFFALSE 24011
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
23991: LD_INT 8
23993: PPUSH
23994: LD_EXP 59
23998: PUSH
23999: LD_VAR 0 1
24003: ARRAY
24004: PPUSH
24005: CALL_OW 471
24009: GO 23988
24011: POP
24012: POP
// end ;
24013: PPOPN 1
24015: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
24016: LD_INT 22
24018: PUSH
24019: LD_INT 4
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 3
24038: PUSH
24039: LD_INT 58
24041: PUSH
24042: EMPTY
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: PPUSH
24054: CALL_OW 69
24058: PUSH
24059: LD_INT 0
24061: EQUAL
24062: PUSH
24063: LD_EXP 62
24067: PUSH
24068: LD_INT 1
24070: EQUAL
24071: AND
24072: IFFALSE 24243
24074: GO 24076
24076: DISABLE
// begin powellAttacks = 2 ;
24077: LD_ADDR_EXP 62
24081: PUSH
24082: LD_INT 2
24084: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
24085: LD_INT 85
24087: PPUSH
24088: LD_INT 3
24090: PPUSH
24091: LD_INT 3
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: LD_INT 5
24099: PUSH
24100: LD_INT 7
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PPUSH
24110: LD_INT 2
24112: PPUSH
24113: CALL_OW 12
24117: ARRAY
24118: PPUSH
24119: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
24123: LD_INT 85
24125: PPUSH
24126: LD_INT 3
24128: PPUSH
24129: LD_INT 3
24131: PPUSH
24132: LD_INT 1
24134: PPUSH
24135: LD_INT 5
24137: PUSH
24138: LD_INT 7
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: PPUSH
24148: LD_INT 2
24150: PPUSH
24151: CALL_OW 12
24155: ARRAY
24156: PPUSH
24157: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
24161: LD_INT 85
24163: PPUSH
24164: LD_INT 3
24166: PPUSH
24167: LD_INT 3
24169: PPUSH
24170: LD_INT 1
24172: PPUSH
24173: LD_INT 5
24175: PUSH
24176: LD_INT 7
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: PPUSH
24186: LD_INT 2
24188: PPUSH
24189: CALL_OW 12
24193: ARRAY
24194: PPUSH
24195: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
24199: LD_INT 85
24201: PPUSH
24202: LD_INT 5
24204: PPUSH
24205: LD_INT 3
24207: PPUSH
24208: LD_INT 1
24210: PPUSH
24211: LD_INT 6
24213: PPUSH
24214: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
24218: LD_ADDR_EXP 66
24222: PUSH
24223: LD_INT 85
24225: PPUSH
24226: LD_INT 3
24228: PPUSH
24229: LD_INT 3
24231: PPUSH
24232: LD_INT 1
24234: PPUSH
24235: LD_INT 3
24237: PPUSH
24238: CALL_OW 185
24242: ST_TO_ADDR
// end ;
24243: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
24244: LD_INT 22
24246: PUSH
24247: LD_INT 4
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 21
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 3
24266: PUSH
24267: LD_INT 58
24269: PUSH
24270: EMPTY
24271: LIST
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: PUSH
24287: LD_INT 5
24289: GREATEREQUAL
24290: PUSH
24291: LD_EXP 65
24295: PUSH
24296: LD_INT 1
24298: EQUAL
24299: AND
24300: IFFALSE 24313
24302: GO 24304
24304: DISABLE
// startAttacks = 0 ;
24305: LD_ADDR_EXP 65
24309: PUSH
24310: LD_INT 0
24312: ST_TO_ADDR
24313: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
24314: LD_INT 22
24316: PUSH
24317: LD_INT 4
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 21
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: LD_INT 58
24339: PUSH
24340: EMPTY
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: PPUSH
24352: CALL_OW 69
24356: PUSH
24357: LD_INT 5
24359: GREATEREQUAL
24360: PUSH
24361: LD_INT 22
24363: PUSH
24364: LD_INT 6
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 21
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 24
24383: PUSH
24384: LD_INT 250
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: PPUSH
24396: CALL_OW 69
24400: PUSH
24401: LD_INT 0
24403: EQUAL
24404: AND
24405: PUSH
24406: LD_EXP 65
24410: PUSH
24411: LD_INT 0
24413: EQUAL
24414: AND
24415: PUSH
24416: LD_EXP 62
24420: PUSH
24421: LD_INT 2
24423: EQUAL
24424: AND
24425: IFFALSE 25334
24427: GO 24429
24429: DISABLE
24430: LD_INT 0
24432: PPUSH
24433: PPUSH
24434: PPUSH
24435: PPUSH
// begin powellAttacks = 3 ;
24436: LD_ADDR_EXP 62
24440: PUSH
24441: LD_INT 3
24443: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
24444: LD_ADDR_VAR 0 1
24448: PUSH
24449: DOUBLE
24450: LD_INT 1
24452: DEC
24453: ST_TO_ADDR
24454: LD_EXP 59
24458: PUSH
24459: FOR_TO
24460: IFFALSE 24482
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
24462: LD_INT 8
24464: PPUSH
24465: LD_EXP 59
24469: PUSH
24470: LD_VAR 0 1
24474: ARRAY
24475: PPUSH
24476: CALL_OW 472
24480: GO 24459
24482: POP
24483: POP
// wait ( 0 0$5 ) ;
24484: LD_INT 175
24486: PPUSH
24487: CALL_OW 67
// Video ( true ) ;
24491: LD_INT 1
24493: PPUSH
24494: CALL 6372 0 1
// CenterNowOnUnits ( Powell ) ;
24498: LD_EXP 17
24502: PPUSH
24503: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
24507: LD_EXP 17
24511: PPUSH
24512: LD_INT 45
24514: PPUSH
24515: LD_INT 64
24517: PPUSH
24518: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
24522: LD_EXP 17
24526: PPUSH
24527: LD_INT 46
24529: PPUSH
24530: LD_INT 66
24532: PPUSH
24533: CALL_OW 178
// for i = 5 to 8 do
24537: LD_ADDR_VAR 0 1
24541: PUSH
24542: DOUBLE
24543: LD_INT 5
24545: DEC
24546: ST_TO_ADDR
24547: LD_INT 8
24549: PUSH
24550: FOR_TO
24551: IFFALSE 24697
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
24553: LD_EXP 59
24557: PUSH
24558: LD_VAR 0 1
24562: ARRAY
24563: PPUSH
24564: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
24568: LD_EXP 59
24572: PUSH
24573: LD_VAR 0 1
24577: ARRAY
24578: PPUSH
24579: CALL_OW 121
// wait ( 0 0$1 ) ;
24583: LD_INT 35
24585: PPUSH
24586: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
24590: LD_EXP 59
24594: PUSH
24595: LD_VAR 0 1
24599: ARRAY
24600: PPUSH
24601: LD_INT 92
24603: PPUSH
24604: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
24608: LD_EXP 59
24612: PUSH
24613: LD_VAR 0 1
24617: ARRAY
24618: PPUSH
24619: LD_INT 1
24621: PPUSH
24622: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
24626: LD_EXP 59
24630: PUSH
24631: LD_VAR 0 1
24635: ARRAY
24636: PPUSH
24637: CALL_OW 182
// wait ( 0 0$1 ) ;
24641: LD_INT 35
24643: PPUSH
24644: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
24648: LD_EXP 59
24652: PUSH
24653: LD_VAR 0 1
24657: ARRAY
24658: PPUSH
24659: LD_INT 43
24661: PUSH
24662: LD_VAR 0 1
24666: PLUS
24667: PPUSH
24668: LD_INT 66
24670: PPUSH
24671: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
24675: LD_EXP 59
24679: PUSH
24680: LD_VAR 0 1
24684: ARRAY
24685: PPUSH
24686: LD_EXP 17
24690: PPUSH
24691: CALL_OW 179
// end ;
24695: GO 24550
24697: POP
24698: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
24699: LD_ADDR_VAR 0 3
24703: PUSH
24704: LD_INT 22
24706: PUSH
24707: LD_INT 4
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 21
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 56
24726: PUSH
24727: EMPTY
24728: LIST
24729: PUSH
24730: LD_INT 3
24732: PUSH
24733: LD_INT 60
24735: PUSH
24736: EMPTY
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: PPUSH
24749: CALL_OW 69
24753: PUSH
24754: LD_EXP 17
24758: PUSH
24759: EMPTY
24760: LIST
24761: DIFF
24762: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
24763: LD_VAR 0 3
24767: PPUSH
24768: LD_INT 92
24770: PPUSH
24771: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
24775: LD_VAR 0 3
24779: PPUSH
24780: LD_INT 1
24782: PPUSH
24783: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
24787: LD_EXP 17
24791: PPUSH
24792: LD_STRING D5-Pow-1
24794: PPUSH
24795: CALL_OW 88
// for i = 1 to amUnitsAttack do
24799: LD_ADDR_VAR 0 1
24803: PUSH
24804: DOUBLE
24805: LD_INT 1
24807: DEC
24808: ST_TO_ADDR
24809: LD_EXP 59
24813: PUSH
24814: FOR_TO
24815: IFFALSE 24860
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24817: LD_EXP 59
24821: PUSH
24822: LD_VAR 0 1
24826: ARRAY
24827: PPUSH
24828: CALL_OW 258
24832: PUSH
24833: LD_INT 1
24835: EQUAL
24836: IFFALSE 24858
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
24838: LD_EXP 59
24842: PUSH
24843: LD_VAR 0 1
24847: ARRAY
24848: PPUSH
24849: LD_STRING D5-Sol2-1
24851: PPUSH
24852: CALL_OW 88
// break ;
24856: GO 24860
// end ;
24858: GO 24814
24860: POP
24861: POP
// Say ( Powell , D5-Pow-2 ) ;
24862: LD_EXP 17
24866: PPUSH
24867: LD_STRING D5-Pow-2
24869: PPUSH
24870: CALL_OW 88
// for i = 1 to amUnitsAttack do
24874: LD_ADDR_VAR 0 1
24878: PUSH
24879: DOUBLE
24880: LD_INT 1
24882: DEC
24883: ST_TO_ADDR
24884: LD_EXP 59
24888: PUSH
24889: FOR_TO
24890: IFFALSE 24935
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24892: LD_EXP 59
24896: PUSH
24897: LD_VAR 0 1
24901: ARRAY
24902: PPUSH
24903: CALL_OW 258
24907: PUSH
24908: LD_INT 1
24910: EQUAL
24911: IFFALSE 24933
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
24913: LD_EXP 59
24917: PUSH
24918: LD_VAR 0 1
24922: ARRAY
24923: PPUSH
24924: LD_STRING D5-Sol2-2
24926: PPUSH
24927: CALL_OW 88
// break ;
24931: GO 24935
// end ;
24933: GO 24889
24935: POP
24936: POP
// Say ( Powell , D5-Pow-3 ) ;
24937: LD_EXP 17
24941: PPUSH
24942: LD_STRING D5-Pow-3
24944: PPUSH
24945: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24949: LD_INT 22
24951: PUSH
24952: LD_INT 4
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 21
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 58
24974: PUSH
24975: EMPTY
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 69
24991: PPUSH
24992: LD_INT 59
24994: PPUSH
24995: LD_INT 21
24997: PPUSH
24998: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
25002: LD_EXP 59
25006: PPUSH
25007: LD_INT 59
25009: PPUSH
25010: LD_INT 21
25012: PPUSH
25013: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
25017: LD_INT 61
25019: PPUSH
25020: LD_INT 35
25022: PPUSH
25023: CALL_OW 84
// wait ( 0 0$15 ) ;
25027: LD_INT 525
25029: PPUSH
25030: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
25034: LD_EXP 17
25038: PPUSH
25039: LD_STRING D5a-Pow-1
25041: PPUSH
25042: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
25046: LD_EXP 17
25050: PPUSH
25051: LD_STRING D5a-Pow-1a
25053: PPUSH
25054: CALL_OW 88
// wait ( 0 0$2 ) ;
25058: LD_INT 70
25060: PPUSH
25061: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
25065: LD_EXP 17
25069: PPUSH
25070: LD_STRING D5a-Pow-1b
25072: PPUSH
25073: CALL_OW 88
// wait ( 0 0$3 ) ;
25077: LD_INT 105
25079: PPUSH
25080: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
25084: LD_EXP 17
25088: PPUSH
25089: LD_STRING D5a-Pow-1c
25091: PPUSH
25092: CALL_OW 88
// wait ( 0 0$1 ) ;
25096: LD_INT 35
25098: PPUSH
25099: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
25103: LD_EXP 17
25107: PPUSH
25108: LD_STRING D5a-Pow-1d
25110: PPUSH
25111: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25115: LD_INT 35
25117: PPUSH
25118: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
25122: LD_INT 22
25124: PUSH
25125: LD_INT 4
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 21
25134: PUSH
25135: LD_INT 2
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: LD_INT 58
25147: PUSH
25148: EMPTY
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PPUSH
25165: LD_INT 59
25167: PPUSH
25168: LD_INT 21
25170: PPUSH
25171: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
25175: LD_EXP 59
25179: PPUSH
25180: LD_INT 59
25182: PPUSH
25183: LD_INT 21
25185: PPUSH
25186: CALL_OW 114
// until amUnitsAttack = [ ] ;
25190: LD_EXP 59
25194: PUSH
25195: EMPTY
25196: EQUAL
25197: IFFALSE 25115
// CenterNowOnUnits ( Powell ) ;
25199: LD_EXP 17
25203: PPUSH
25204: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: LD_INT 22
25215: PUSH
25216: LD_INT 4
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 21
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PPUSH
25237: CALL_OW 69
25241: PUSH
25242: LD_EXP 17
25246: PUSH
25247: EMPTY
25248: LIST
25249: DIFF
25250: ST_TO_ADDR
// for i in powellPeople do
25251: LD_ADDR_VAR 0 1
25255: PUSH
25256: LD_VAR 0 3
25260: PUSH
25261: FOR_IN
25262: IFFALSE 25291
// if GetSex ( i ) = sex_male then
25264: LD_VAR 0 1
25268: PPUSH
25269: CALL_OW 258
25273: PUSH
25274: LD_INT 1
25276: EQUAL
25277: IFFALSE 25289
// sold = i ;
25279: LD_ADDR_VAR 0 2
25283: PUSH
25284: LD_VAR 0 1
25288: ST_TO_ADDR
25289: GO 25261
25291: POP
25292: POP
// Say ( sold , D6-Sol3-1 ) ;
25293: LD_VAR 0 2
25297: PPUSH
25298: LD_STRING D6-Sol3-1
25300: PPUSH
25301: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
25305: LD_EXP 17
25309: PPUSH
25310: LD_STRING D6-Pow-1
25312: PPUSH
25313: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
25317: LD_INT 139
25319: PUSH
25320: LD_INT 138
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PPUSH
25327: LD_INT 12
25329: PPUSH
25330: CALL_OW 113
// end ;
25334: PPOPN 4
25336: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
25337: LD_EXP 62
25341: PUSH
25342: LD_INT 3
25344: EQUAL
25345: PUSH
25346: LD_INT 12
25348: PPUSH
25349: LD_INT 22
25351: PUSH
25352: LD_INT 8
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 21
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PPUSH
25373: CALL_OW 70
25377: PUSH
25378: LD_INT 2
25380: EQUAL
25381: AND
25382: IFFALSE 25543
25384: GO 25386
25386: DISABLE
25387: LD_INT 0
25389: PPUSH
25390: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
25391: LD_INT 8
25393: PPUSH
25394: LD_INT 1
25396: PPUSH
25397: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
25401: LD_INT 4
25403: PPUSH
25404: LD_INT 8
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
25417: LD_ADDR_VAR 0 1
25421: PUSH
25422: LD_INT 92
25424: PPUSH
25425: CALL_OW 313
25429: PUSH
25430: FOR_IN
25431: IFFALSE 25462
// if GetSex ( i ) = sex_male then
25433: LD_VAR 0 1
25437: PPUSH
25438: CALL_OW 258
25442: PUSH
25443: LD_INT 1
25445: EQUAL
25446: IFFALSE 25460
// begin tmp = i ;
25448: LD_ADDR_VAR 0 2
25452: PUSH
25453: LD_VAR 0 1
25457: ST_TO_ADDR
// break ;
25458: GO 25462
// end ;
25460: GO 25430
25462: POP
25463: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
25464: LD_INT 92
25466: PPUSH
25467: CALL_OW 313
25471: PPUSH
25472: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
25476: LD_VAR 0 2
25480: PPUSH
25481: LD_STRING D6-Sol3-2
25483: PPUSH
25484: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
25488: LD_INT 139
25490: PUSH
25491: LD_INT 138
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PPUSH
25498: LD_INT 85
25500: PPUSH
25501: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
25505: LD_INT 4
25507: PPUSH
25508: LD_INT 8
25510: PPUSH
25511: LD_INT 2
25513: PPUSH
25514: LD_INT 1
25516: PPUSH
25517: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
25521: LD_INT 8
25523: PPUSH
25524: LD_INT 8
25526: PPUSH
25527: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
25531: LD_EXP 17
25535: PPUSH
25536: LD_STRING D6-Pow-2
25538: PPUSH
25539: CALL_OW 88
// end ;
25543: PPOPN 2
25545: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
25546: LD_INT 85
25548: PPUSH
25549: CALL_OW 301
25553: IFFALSE 25845
25555: GO 25557
25557: DISABLE
25558: LD_INT 0
25560: PPUSH
25561: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: LD_INT 22
25569: PUSH
25570: LD_INT 4
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 21
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 56
25589: PUSH
25590: EMPTY
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 69
25602: PUSH
25603: LD_EXP 17
25607: PUSH
25608: EMPTY
25609: LIST
25610: DIFF
25611: PUSH
25612: FOR_IN
25613: IFFALSE 25644
// if GetSex ( i ) = sex_male then
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 258
25624: PUSH
25625: LD_INT 1
25627: EQUAL
25628: IFFALSE 25642
// begin tmp = i ;
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_VAR 0 1
25639: ST_TO_ADDR
// break ;
25640: GO 25644
// end ;
25642: GO 25612
25644: POP
25645: POP
// Say ( Powell , D6a-Pow-1 ) ;
25646: LD_EXP 17
25650: PPUSH
25651: LD_STRING D6a-Pow-1
25653: PPUSH
25654: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
25658: LD_VAR 0 2
25662: PPUSH
25663: LD_STRING D6a-Sol3-1
25665: PPUSH
25666: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
25670: LD_EXP 17
25674: PPUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
25684: LD_EXP 17
25688: PPUSH
25689: LD_STRING D6a-Pow-2
25691: PPUSH
25692: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
25696: LD_VAR 0 2
25700: PPUSH
25701: LD_STRING D6a-Sol3-2
25703: PPUSH
25704: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
25708: LD_EXP 17
25712: PPUSH
25713: LD_STRING D6a-Pow-3
25715: PPUSH
25716: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
25720: LD_EXP 17
25724: PPUSH
25725: LD_EXP 66
25729: PPUSH
25730: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25734: LD_INT 35
25736: PPUSH
25737: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
25741: LD_EXP 17
25745: PPUSH
25746: LD_EXP 66
25750: PPUSH
25751: CALL_OW 120
// until IsInUnit ( Powell ) ;
25755: LD_EXP 17
25759: PPUSH
25760: CALL_OW 310
25764: IFFALSE 25734
// wait ( 0 0$1 ) ;
25766: LD_INT 35
25768: PPUSH
25769: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
25773: LD_EXP 66
25777: PPUSH
25778: LD_INT 77
25780: PPUSH
25781: LD_INT 64
25783: PPUSH
25784: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
25788: LD_EXP 66
25792: PPUSH
25793: LD_INT 91
25795: PPUSH
25796: LD_INT 61
25798: PPUSH
25799: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
25803: LD_EXP 66
25807: PPUSH
25808: LD_INT 74
25810: PPUSH
25811: LD_INT 25
25813: PPUSH
25814: CALL_OW 171
// centerPowell = 1 ;
25818: LD_ADDR_EXP 67
25822: PUSH
25823: LD_INT 1
25825: ST_TO_ADDR
// wait ( 0 0$15 ) ;
25826: LD_INT 525
25828: PPUSH
25829: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
25833: LD_EXP 17
25837: PPUSH
25838: LD_STRING D6b-Pow-1
25840: PPUSH
25841: CALL_OW 88
// end ;
25845: PPOPN 2
25847: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
25848: LD_EXP 66
25852: PPUSH
25853: LD_INT 13
25855: PPUSH
25856: CALL_OW 308
25860: PUSH
25861: LD_EXP 62
25865: PUSH
25866: LD_INT 3
25868: EQUAL
25869: AND
25870: IFFALSE 26012
25872: GO 25874
25874: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
25875: LD_EXP 66
25879: PPUSH
25880: LD_INT 250
25882: PPUSH
25883: CALL_OW 234
// DialogueOn ;
25887: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
25891: LD_EXP 17
25895: PPUSH
25896: LD_STRING D6b-Pow-1a
25898: PPUSH
25899: CALL_OW 88
// DialogueOff ;
25903: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
25907: LD_EXP 17
25911: PPUSH
25912: LD_INT 22
25914: PUSH
25915: LD_INT 8
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 34
25924: PUSH
25925: LD_INT 29
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 50
25934: PUSH
25935: EMPTY
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: PPUSH
25943: CALL_OW 69
25947: PUSH
25948: LD_INT 1
25950: ARRAY
25951: PPUSH
25952: CALL_OW 120
// wait ( 0 0$1 ) ;
25956: LD_INT 35
25958: PPUSH
25959: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
25963: LD_EXP 17
25967: PPUSH
25968: LD_INT 22
25970: PUSH
25971: LD_INT 8
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 34
25980: PUSH
25981: LD_INT 29
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 50
25990: PUSH
25991: EMPTY
25992: LIST
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: PPUSH
25999: CALL_OW 69
26003: PUSH
26004: LD_INT 1
26006: ARRAY
26007: PPUSH
26008: CALL_OW 120
// end ;
26012: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
26013: LD_INT 22
26015: PUSH
26016: LD_INT 4
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 34
26025: PUSH
26026: LD_INT 29
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PPUSH
26037: CALL_OW 69
26041: IFFALSE 26413
26043: GO 26045
26045: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
26046: LD_ADDR_EXP 68
26050: PUSH
26051: LD_INT 22
26053: PUSH
26054: LD_INT 4
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 34
26063: PUSH
26064: LD_INT 29
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: PUSH
26080: LD_INT 1
26082: ARRAY
26083: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
26084: LD_INT 8
26086: PPUSH
26087: LD_INT 4
26089: PPUSH
26090: LD_INT 1
26092: PPUSH
26093: LD_INT 1
26095: PPUSH
26096: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
26100: LD_EXP 68
26104: PPUSH
26105: LD_INT 80
26107: PPUSH
26108: LD_INT 19
26110: PPUSH
26111: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
26115: LD_EXP 68
26119: PPUSH
26120: LD_INT 74
26122: PPUSH
26123: LD_INT 15
26125: PPUSH
26126: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
26130: LD_EXP 68
26134: PPUSH
26135: LD_INT 72
26137: PPUSH
26138: LD_INT 19
26140: PPUSH
26141: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
26145: LD_EXP 68
26149: PPUSH
26150: LD_INT 78
26152: PPUSH
26153: LD_INT 24
26155: PPUSH
26156: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
26160: LD_EXP 68
26164: PPUSH
26165: LD_INT 77
26167: PPUSH
26168: LD_INT 20
26170: PPUSH
26171: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
26175: LD_EXP 68
26179: PPUSH
26180: LD_INT 78
26182: PPUSH
26183: LD_INT 15
26185: PPUSH
26186: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
26190: LD_EXP 17
26194: PPUSH
26195: LD_STRING D6b-Pow-1b
26197: PPUSH
26198: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
26202: LD_INT 22
26204: PUSH
26205: LD_INT 8
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 21
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 25
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 26
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: PPUSH
26248: CALL_OW 69
26252: PUSH
26253: LD_INT 1
26255: ARRAY
26256: PPUSH
26257: LD_STRING D6b-ArSol1-1
26259: PPUSH
26260: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
26264: LD_INT 22
26266: PUSH
26267: LD_INT 8
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 21
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 25
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 26
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: PPUSH
26310: CALL_OW 69
26314: PUSH
26315: LD_INT 2
26317: ARRAY
26318: PPUSH
26319: LD_STRING D6b-ArSol2-1
26321: PPUSH
26322: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
26326: LD_EXP 17
26330: PPUSH
26331: LD_STRING D6b-Pow-2
26333: PPUSH
26334: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26338: LD_INT 35
26340: PPUSH
26341: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
26345: LD_EXP 68
26349: PPUSH
26350: LD_INT 78
26352: PPUSH
26353: LD_INT 15
26355: PPUSH
26356: CALL_OW 297
26360: PUSH
26361: LD_INT 2
26363: LESS
26364: IFFALSE 26338
// wait ( 0 0$1 ) ;
26366: LD_INT 35
26368: PPUSH
26369: CALL_OW 67
// DialogueOn ;
26373: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
26377: LD_EXP 17
26381: PPUSH
26382: LD_STRING D6b-Pow-2a
26384: PPUSH
26385: CALL_OW 88
// DialogueOff ;
26389: CALL_OW 7
// centerPowell = 0 ;
26393: LD_ADDR_EXP 67
26397: PUSH
26398: LD_INT 0
26400: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
26401: LD_EXP 68
26405: PPUSH
26406: LD_INT 105
26408: PPUSH
26409: CALL_OW 115
// end ;
26413: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
26414: LD_INT 105
26416: PPUSH
26417: CALL_OW 301
26421: PUSH
26422: LD_EXP 62
26426: PUSH
26427: LD_INT 3
26429: EQUAL
26430: AND
26431: IFFALSE 27144
26433: GO 26435
26435: DISABLE
26436: LD_INT 0
26438: PPUSH
26439: PPUSH
26440: PPUSH
26441: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ;
26442: LD_ADDR_VAR 0 2
26446: PUSH
26447: LD_INT 22
26449: PUSH
26450: LD_INT 4
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 21
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 26
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: PPUSH
26482: CALL_OW 69
26486: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
26487: LD_INT 49
26489: PPUSH
26490: LD_INT 66
26492: PPUSH
26493: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
26497: LD_VAR 0 2
26501: PUSH
26502: LD_INT 1
26504: ARRAY
26505: PPUSH
26506: LD_STRING D6c-Sol3-1
26508: PPUSH
26509: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
26513: LD_EXP 1
26517: PPUSH
26518: LD_STRING D6c-JMM-1
26520: PPUSH
26521: CALL_OW 88
// if IsOk ( Cyrus ) then
26525: LD_EXP 7
26529: PPUSH
26530: CALL_OW 302
26534: IFFALSE 26548
// Say ( Cyrus , D6c-Cyrus-1 ) ;
26536: LD_EXP 7
26540: PPUSH
26541: LD_STRING D6c-Cyrus-1
26543: PPUSH
26544: CALL_OW 88
// if IsOk ( Bobby ) then
26548: LD_EXP 6
26552: PPUSH
26553: CALL_OW 302
26557: IFFALSE 26571
// Say ( Bobby , D6c-Bobby-1 ) ;
26559: LD_EXP 6
26563: PPUSH
26564: LD_STRING D6c-Bobby-1
26566: PPUSH
26567: CALL_OW 88
// if IsOk ( Cornel ) then
26571: LD_EXP 12
26575: PPUSH
26576: CALL_OW 302
26580: IFFALSE 26594
// Say ( Cornel , D6c-Corn-1 ) ;
26582: LD_EXP 12
26586: PPUSH
26587: LD_STRING D6c-Corn-1
26589: PPUSH
26590: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
26594: LD_VAR 0 2
26598: PUSH
26599: LD_INT 2
26601: ARRAY
26602: PPUSH
26603: LD_STRING D6c-Sol1-1
26605: PPUSH
26606: CALL_OW 88
// if IsOk ( Lisa ) then
26610: LD_EXP 4
26614: PPUSH
26615: CALL_OW 302
26619: IFFALSE 26633
// Say ( Lisa , D6c-Lisa-1 ) ;
26621: LD_EXP 4
26625: PPUSH
26626: LD_STRING D6c-Lisa-1
26628: PPUSH
26629: CALL_OW 88
// if IsOk ( Gary ) then
26633: LD_EXP 13
26637: PPUSH
26638: CALL_OW 302
26642: IFFALSE 26656
// Say ( Gary , D6c-Gary-1 ) ;
26644: LD_EXP 13
26648: PPUSH
26649: LD_STRING D6c-Gary-1
26651: PPUSH
26652: CALL_OW 88
// if IsOK ( Donaldson ) then
26656: LD_EXP 5
26660: PPUSH
26661: CALL_OW 302
26665: IFFALSE 26679
// Say ( Donaldson , D6c-Don-1 ) ;
26667: LD_EXP 5
26671: PPUSH
26672: LD_STRING D6c-Don-1
26674: PPUSH
26675: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
26679: LD_VAR 0 2
26683: PUSH
26684: LD_INT 3
26686: ARRAY
26687: PPUSH
26688: LD_STRING D6c-Sol2-1
26690: PPUSH
26691: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
26695: LD_INT 22
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 21
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PPUSH
26719: CALL_OW 69
26723: PPUSH
26724: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
26728: LD_INT 22
26730: PUSH
26731: LD_INT 4
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 69
26756: PPUSH
26757: CALL_OW 122
// wait ( 0 0$1 ) ;
26761: LD_INT 35
26763: PPUSH
26764: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
26768: LD_ADDR_VAR 0 3
26772: PUSH
26773: LD_INT 22
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 21
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PPUSH
26797: CALL_OW 69
26801: PUSH
26802: LD_EXP 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: DIFF
26810: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
26811: LD_ADDR_VAR 0 4
26815: PUSH
26816: LD_INT 22
26818: PUSH
26819: LD_INT 4
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 21
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PPUSH
26840: CALL_OW 69
26844: ST_TO_ADDR
// for i := 1 to tmp2 do
26845: LD_ADDR_VAR 0 1
26849: PUSH
26850: DOUBLE
26851: LD_INT 1
26853: DEC
26854: ST_TO_ADDR
26855: LD_VAR 0 4
26859: PUSH
26860: FOR_TO
26861: IFFALSE 26912
// begin ComMoveXY ( tmp2 [ i ] , 41 + i , 63 ) ;
26863: LD_VAR 0 4
26867: PUSH
26868: LD_VAR 0 1
26872: ARRAY
26873: PPUSH
26874: LD_INT 41
26876: PUSH
26877: LD_VAR 0 1
26881: PLUS
26882: PPUSH
26883: LD_INT 63
26885: PPUSH
26886: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
26890: LD_VAR 0 4
26894: PUSH
26895: LD_VAR 0 1
26899: ARRAY
26900: PPUSH
26901: LD_EXP 1
26905: PPUSH
26906: CALL_OW 179
// end ;
26910: GO 26860
26912: POP
26913: POP
// for i := 1 to tmp1 do
26914: LD_ADDR_VAR 0 1
26918: PUSH
26919: DOUBLE
26920: LD_INT 1
26922: DEC
26923: ST_TO_ADDR
26924: LD_VAR 0 3
26928: PUSH
26929: FOR_TO
26930: IFFALSE 26981
// begin ComMoveXY ( tmp1 [ i ] , 41 + i , 64 ) ;
26932: LD_VAR 0 3
26936: PUSH
26937: LD_VAR 0 1
26941: ARRAY
26942: PPUSH
26943: LD_INT 41
26945: PUSH
26946: LD_VAR 0 1
26950: PLUS
26951: PPUSH
26952: LD_INT 64
26954: PPUSH
26955: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
26959: LD_VAR 0 3
26963: PUSH
26964: LD_VAR 0 1
26968: ARRAY
26969: PPUSH
26970: LD_EXP 1
26974: PPUSH
26975: CALL_OW 179
// end ;
26979: GO 26929
26981: POP
26982: POP
// ComMoveXY ( JMM , 48 , 68 ) ;
26983: LD_EXP 1
26987: PPUSH
26988: LD_INT 48
26990: PPUSH
26991: LD_INT 68
26993: PPUSH
26994: CALL_OW 111
// AddComTurnXY ( JMM , 47 , 65 ) ;
26998: LD_EXP 1
27002: PPUSH
27003: LD_INT 47
27005: PPUSH
27006: LD_INT 65
27008: PPUSH
27009: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
27013: LD_INT 35
27015: PPUSH
27016: CALL_OW 67
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
27020: LD_EXP 1
27024: PPUSH
27025: LD_INT 48
27027: PPUSH
27028: LD_INT 68
27030: PPUSH
27031: CALL_OW 297
27035: PUSH
27036: LD_INT 2
27038: LESS
27039: IFFALSE 27013
// wait ( 0 0$2 ) ;
27041: LD_INT 70
27043: PPUSH
27044: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
27048: LD_VAR 0 2
27052: PUSH
27053: LD_INT 1
27055: ARRAY
27056: PPUSH
27057: LD_STRING D6c-Sol3-2
27059: PPUSH
27060: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
27064: LD_EXP 1
27068: PPUSH
27069: LD_STRING D6c-JMM-2
27071: PPUSH
27072: CALL_OW 88
// Video ( false ) ;
27076: LD_INT 0
27078: PPUSH
27079: CALL 6372 0 1
// centerPowell = 0 ;
27083: LD_ADDR_EXP 67
27087: PUSH
27088: LD_INT 0
27090: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
27091: LD_INT 22
27093: PUSH
27094: LD_INT 4
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PPUSH
27101: CALL_OW 69
27105: PPUSH
27106: LD_INT 1
27108: PPUSH
27109: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
27113: LD_STRING M2
27115: PPUSH
27116: CALL_OW 337
// timerStatus = 1 ;
27120: LD_ADDR_EXP 88
27124: PUSH
27125: LD_INT 1
27127: ST_TO_ADDR
// missionStage = 1 ;
27128: LD_ADDR_EXP 92
27132: PUSH
27133: LD_INT 1
27135: ST_TO_ADDR
// startAttacks = 1 ;
27136: LD_ADDR_EXP 65
27140: PUSH
27141: LD_INT 1
27143: ST_TO_ADDR
// end ;
27144: PPOPN 4
27146: END
// every 0 0$1 trigger centerPowell = 1 do
27147: LD_EXP 67
27151: PUSH
27152: LD_INT 1
27154: EQUAL
27155: IFFALSE 27246
27157: GO 27159
27159: DISABLE
// begin enable ;
27160: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
27161: LD_EXP 17
27165: PUSH
27166: LD_EXP 68
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PPUSH
27175: LD_INT 1000
27177: PPUSH
27178: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
27182: LD_EXP 66
27186: PPUSH
27187: LD_INT 13
27189: PPUSH
27190: CALL_OW 308
27194: NOT
27195: IFFALSE 27209
// SetLives ( powellVeh , 1000 ) ;
27197: LD_EXP 66
27201: PPUSH
27202: LD_INT 1000
27204: PPUSH
27205: CALL_OW 234
// if not IsInUnit ( Powell ) then
27209: LD_EXP 17
27213: PPUSH
27214: CALL_OW 310
27218: NOT
27219: IFFALSE 27232
// CenterNowOnUnits ( Powell ) else
27221: LD_EXP 17
27225: PPUSH
27226: CALL_OW 87
27230: GO 27246
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
27232: LD_EXP 17
27236: PPUSH
27237: CALL_OW 310
27241: PPUSH
27242: CALL_OW 87
// end ;
27246: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
27247: LD_EXP 89
27251: PUSH
27252: LD_INT 560
27254: GREATEREQUAL
27255: IFFALSE 27467
27257: GO 27259
27259: DISABLE
// begin DialogueOn ;
27260: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
27264: LD_EXP 47
27268: PPUSH
27269: LD_STRING D7-Friend-1
27271: PPUSH
27272: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
27276: LD_EXP 1
27280: PPUSH
27281: LD_STRING D7-JMM-1
27283: PPUSH
27284: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
27288: LD_EXP 47
27292: PPUSH
27293: LD_STRING D7-Friend-2
27295: PPUSH
27296: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
27300: LD_EXP 1
27304: PPUSH
27305: LD_STRING D7-JMM-2
27307: PPUSH
27308: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
27312: LD_EXP 47
27316: PPUSH
27317: LD_STRING D7-Friend-3
27319: PPUSH
27320: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
27324: LD_EXP 1
27328: PPUSH
27329: LD_STRING D7-JMM-3
27331: PPUSH
27332: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
27336: LD_EXP 47
27340: PPUSH
27341: LD_STRING D7-Friend-4
27343: PPUSH
27344: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
27348: LD_EXP 1
27352: PPUSH
27353: LD_STRING D7-JMM-4
27355: PPUSH
27356: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
27360: LD_EXP 47
27364: PPUSH
27365: LD_STRING D7-Friend-5
27367: PPUSH
27368: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
27372: LD_EXP 1
27376: PPUSH
27377: LD_STRING D7-JMM-5
27379: PPUSH
27380: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
27384: LD_EXP 47
27388: PPUSH
27389: LD_STRING D7-Friend-6
27391: PPUSH
27392: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
27396: LD_EXP 1
27400: PPUSH
27401: LD_STRING D7-JMM-6
27403: PPUSH
27404: CALL_OW 88
// DialogueOff ;
27408: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
27412: LD_EXP 35
27416: PPUSH
27417: LD_INT 15
27419: PPUSH
27420: LD_INT 0
27422: PPUSH
27423: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
27427: LD_EXP 35
27431: PPUSH
27432: LD_INT 2
27434: PPUSH
27435: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
27439: LD_EXP 35
27443: PPUSH
27444: LD_INT 2
27446: PPUSH
27447: LD_INT 78
27449: PPUSH
27450: LD_INT 12
27452: PPUSH
27453: LD_INT 3
27455: PPUSH
27456: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
27460: LD_STRING Mlegion
27462: PPUSH
27463: CALL_OW 337
// end ;
27467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
27468: LD_INT 22
27470: PUSH
27471: LD_INT 8
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 21
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 23
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: PPUSH
27503: CALL_OW 69
27507: PUSH
27508: LD_INT 6
27510: PUSH
27511: LD_INT 5
27513: PUSH
27514: LD_INT 4
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: PUSH
27522: LD_OWVAR 67
27526: ARRAY
27527: LESSEQUAL
27528: IFFALSE 27842
27530: GO 27532
27532: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
27533: LD_EXP 30
27537: PPUSH
27538: LD_INT 19
27540: PPUSH
27541: LD_INT 0
27543: PPUSH
27544: CALL_OW 49
// KillUnit ( Kozlov ) ;
27548: LD_EXP 35
27552: PPUSH
27553: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
27557: LD_INT 22
27559: PUSH
27560: LD_INT 8
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 21
27569: PUSH
27570: LD_INT 3
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 23
27579: PUSH
27580: LD_INT 3
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 30
27589: PUSH
27590: LD_INT 3
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: PPUSH
27603: CALL_OW 69
27607: PUSH
27608: LD_INT 1
27610: ARRAY
27611: PPUSH
27612: CALL_OW 66
// DialogueOn ;
27616: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
27620: LD_EXP 1
27624: PPUSH
27625: LD_STRING D13-JMM-1
27627: PPUSH
27628: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
27632: LD_EXP 30
27636: PPUSH
27637: LD_STRING D13-Kurt-1
27639: PPUSH
27640: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
27644: LD_EXP 1
27648: PPUSH
27649: LD_STRING D13-JMM-2
27651: PPUSH
27652: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
27656: LD_EXP 30
27660: PPUSH
27661: LD_STRING D13-Kurt-2a
27663: PPUSH
27664: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
27668: LD_EXP 1
27672: PPUSH
27673: LD_STRING D13-JMM-3
27675: PPUSH
27676: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
27680: LD_EXP 30
27684: PPUSH
27685: LD_STRING D13-Kurt-3
27687: PPUSH
27688: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
27692: LD_EXP 1
27696: PPUSH
27697: LD_STRING D13-JMM-4
27699: PPUSH
27700: CALL_OW 88
// DialogueOff ;
27704: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
27708: LD_INT 22
27710: PUSH
27711: LD_INT 8
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 50
27720: PUSH
27721: EMPTY
27722: LIST
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PPUSH
27728: CALL_OW 69
27732: PPUSH
27733: LD_INT 1
27735: PPUSH
27736: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
27740: LD_INT 22
27742: PUSH
27743: LD_INT 8
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 3
27752: PUSH
27753: LD_INT 24
27755: PUSH
27756: LD_INT 250
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PPUSH
27771: CALL_OW 69
27775: PPUSH
27776: LD_INT 0
27778: PPUSH
27779: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
27783: LD_STRING MlegionOut
27785: PPUSH
27786: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
27790: LD_INT 8
27792: PPUSH
27793: LD_INT 1
27795: PPUSH
27796: LD_INT 1
27798: PPUSH
27799: LD_INT 1
27801: PPUSH
27802: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
27806: LD_EXP 47
27810: PPUSH
27811: LD_INT 30
27813: PPUSH
27814: LD_INT 0
27816: PPUSH
27817: CALL_OW 49
// wait ( 0 0$1 ) ;
27821: LD_INT 35
27823: PPUSH
27824: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
27828: LD_EXP 47
27832: PPUSH
27833: LD_EXP 1
27837: PPUSH
27838: CALL_OW 112
// end ;
27842: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
27843: LD_INT 1
27845: PPUSH
27846: LD_EXP 47
27850: PPUSH
27851: CALL_OW 292
27855: IFFALSE 28131
27857: GO 27859
27859: DISABLE
27860: LD_INT 0
27862: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
27863: LD_EXP 47
27867: PPUSH
27868: CALL_OW 87
// DialogueOn ;
27872: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
27876: LD_EXP 1
27880: PPUSH
27881: LD_STRING D14-JMM-1
27883: PPUSH
27884: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
27888: LD_EXP 47
27892: PPUSH
27893: LD_STRING D14-Friend-1
27895: PPUSH
27896: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
27900: LD_EXP 1
27904: PPUSH
27905: LD_STRING D14-JMM-2
27907: PPUSH
27908: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
27912: LD_EXP 47
27916: PPUSH
27917: LD_STRING D14-Friend-2
27919: PPUSH
27920: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
27924: LD_EXP 1
27928: PPUSH
27929: LD_STRING D14-JMM-3
27931: PPUSH
27932: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
27936: LD_EXP 47
27940: PPUSH
27941: LD_STRING D14-Friend-3
27943: PPUSH
27944: CALL_OW 88
// DialogueOff ;
27948: CALL_OW 7
// dec = Query ( Q14 ) ;
27952: LD_ADDR_VAR 0 1
27956: PUSH
27957: LD_STRING Q14
27959: PPUSH
27960: CALL_OW 97
27964: ST_TO_ADDR
// if dec = 1 then
27965: LD_VAR 0 1
27969: PUSH
27970: LD_INT 1
27972: EQUAL
27973: IFFALSE 28007
// begin DialogueOn ;
27975: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
27979: LD_EXP 1
27983: PPUSH
27984: LD_STRING D14a-JMM-1
27986: PPUSH
27987: CALL_OW 88
// DialogueOff ;
27991: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
27995: LD_EXP 47
27999: PPUSH
28000: LD_INT 1
28002: PPUSH
28003: CALL_OW 235
// end ; if dec = 2 then
28007: LD_VAR 0 1
28011: PUSH
28012: LD_INT 2
28014: EQUAL
28015: IFFALSE 28049
// begin DialogueOn ;
28017: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
28021: LD_EXP 1
28025: PPUSH
28026: LD_STRING D14b-JMM-1
28028: PPUSH
28029: CALL_OW 88
// DialogueOff ;
28033: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
28037: LD_EXP 47
28041: PPUSH
28042: LD_INT 18
28044: PPUSH
28045: CALL_OW 113
// end ; if dec = 3 then
28049: LD_VAR 0 1
28053: PUSH
28054: LD_INT 3
28056: EQUAL
28057: IFFALSE 28131
// begin DialogueOn ;
28059: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
28063: LD_EXP 1
28067: PPUSH
28068: LD_STRING D14c-JMM-1
28070: PPUSH
28071: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
28075: LD_EXP 47
28079: PPUSH
28080: LD_STRING D14c-Friend-1
28082: PPUSH
28083: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
28087: LD_EXP 1
28091: PPUSH
28092: LD_STRING D14c-JMM-2
28094: PPUSH
28095: CALL_OW 88
// DialogueOff ;
28099: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
28103: LD_INT 8
28105: PPUSH
28106: LD_INT 1
28108: PPUSH
28109: LD_INT 2
28111: PPUSH
28112: LD_INT 1
28114: PPUSH
28115: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
28119: LD_EXP 47
28123: PPUSH
28124: LD_INT 18
28126: PPUSH
28127: CALL_OW 113
// end ; end ;
28131: PPOPN 1
28133: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
28134: LD_EXP 47
28138: PPUSH
28139: LD_INT 18
28141: PPUSH
28142: CALL_OW 308
28146: PUSH
28147: LD_EXP 47
28151: PPUSH
28152: CALL_OW 255
28156: PUSH
28157: LD_INT 8
28159: EQUAL
28160: AND
28161: IFFALSE 28175
28163: GO 28165
28165: DISABLE
// RemoveUnit ( LegionFriend ) ;
28166: LD_EXP 47
28170: PPUSH
28171: CALL_OW 64
28175: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
28176: LD_EXP 89
28180: PUSH
28181: LD_INT 31570
28183: GREATEREQUAL
28184: IFFALSE 28260
28186: GO 28188
28188: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
28189: LD_EXP 74
28193: PUSH
28194: LD_INT 1
28196: EQUAL
28197: PUSH
28198: LD_EXP 72
28202: PUSH
28203: EMPTY
28204: EQUAL
28205: AND
28206: IFFALSE 28212
// PrepareSupportFromKappa ;
28208: CALL 2383 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
28212: LD_EXP 74
28216: PUSH
28217: LD_INT 0
28219: EQUAL
28220: PUSH
28221: LD_EXP 75
28225: PUSH
28226: LD_INT 1
28228: EQUAL
28229: AND
28230: IFFALSE 28236
// PrepareAttackFromKappa ;
28232: CALL 5000 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
28236: LD_EXP 74
28240: PUSH
28241: LD_INT 0
28243: EQUAL
28244: PUSH
28245: LD_EXP 75
28249: PUSH
28250: LD_INT 0
28252: EQUAL
28253: AND
28254: IFFALSE 28260
// PrepareAttackFromKappa ;
28256: CALL 5000 0 0
// end ;
28260: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
28261: LD_INT 1
28263: PPUSH
28264: LD_EXP 34
28268: PPUSH
28269: CALL_OW 292
28273: IFFALSE 28541
28275: GO 28277
28277: DISABLE
// begin missionStage = 2 ;
28278: LD_ADDR_EXP 92
28282: PUSH
28283: LD_INT 2
28285: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
28286: LD_EXP 34
28290: PPUSH
28291: CALL_OW 87
// DialogueOn ;
28295: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
28299: LD_EXP 1
28303: PPUSH
28304: LD_STRING D10nB-JMM-1
28306: PPUSH
28307: CALL_OW 88
// if BurlakStatus = 1 then
28311: LD_EXP 69
28315: PUSH
28316: LD_INT 1
28318: EQUAL
28319: IFFALSE 28333
// Say ( Vsevolod , D10nB-Vse-1a ) ;
28321: LD_EXP 33
28325: PPUSH
28326: LD_STRING D10nB-Vse-1a
28328: PPUSH
28329: CALL_OW 88
// if BurlakStatus = 0 then
28333: LD_EXP 69
28337: PUSH
28338: LD_INT 0
28340: EQUAL
28341: IFFALSE 28355
// Say ( Vsevolod , D10nB-Vse-1 ) ;
28343: LD_EXP 33
28347: PPUSH
28348: LD_STRING D10nB-Vse-1
28350: PPUSH
28351: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
28355: LD_EXP 1
28359: PPUSH
28360: LD_STRING D10nB-JMM-2
28362: PPUSH
28363: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
28367: LD_EXP 74
28371: PUSH
28372: LD_EXP 75
28376: PUSH
28377: LD_INT 1
28379: EQUAL
28380: AND
28381: IFFALSE 28395
// Say ( Vsevolod , D10nB-Vse-5 ) ;
28383: LD_EXP 33
28387: PPUSH
28388: LD_STRING D10nB-Vse-5
28390: PPUSH
28391: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
28395: LD_EXP 74
28399: PUSH
28400: LD_EXP 75
28404: PUSH
28405: LD_INT 0
28407: EQUAL
28408: AND
28409: IFFALSE 28537
// begin if JMMGirl = 1 then
28411: LD_EXP 73
28415: PUSH
28416: LD_INT 1
28418: EQUAL
28419: IFFALSE 28469
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
28421: LD_EXP 33
28425: PPUSH
28426: LD_STRING D10nB-Vse-2
28428: PPUSH
28429: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
28433: LD_EXP 1
28437: PPUSH
28438: LD_STRING D10nB-JMM-3
28440: PPUSH
28441: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
28445: LD_EXP 33
28449: PPUSH
28450: LD_STRING D10nB-Vse-3
28452: PPUSH
28453: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
28457: LD_EXP 1
28461: PPUSH
28462: LD_STRING D10nB-JMM-4
28464: PPUSH
28465: CALL_OW 88
// end ; if JMMGirl = 2 then
28469: LD_EXP 73
28473: PUSH
28474: LD_INT 2
28476: EQUAL
28477: IFFALSE 28503
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
28479: LD_EXP 33
28483: PPUSH
28484: LD_STRING D10nB-Vse-4
28486: PPUSH
28487: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
28491: LD_EXP 1
28495: PPUSH
28496: LD_STRING D10nB-JMM-5
28498: PPUSH
28499: CALL_OW 88
// end ; if JMMGirl = 3 then
28503: LD_EXP 73
28507: PUSH
28508: LD_INT 3
28510: EQUAL
28511: IFFALSE 28537
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
28513: LD_EXP 33
28517: PPUSH
28518: LD_STRING D10nB-Vse-5
28520: PPUSH
28521: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
28525: LD_EXP 1
28529: PPUSH
28530: LD_STRING D10nB-JMM-6
28532: PPUSH
28533: CALL_OW 88
// end ; end ; DialogueOff ;
28537: CALL_OW 7
// end ;
28541: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
28542: LD_EXP 89
28546: PUSH
28547: LD_INT 63070
28549: GREATEREQUAL
28550: IFFALSE 28828
28552: GO 28554
28554: DISABLE
// begin PrepareOmegaTeam ;
28555: CALL 2772 0 0
// missionStage = 3 ;
28559: LD_ADDR_EXP 92
28563: PUSH
28564: LD_INT 3
28566: ST_TO_ADDR
// DialogueOn ;
28567: CALL_OW 6
// if StevensStatus = 1 then
28571: LD_EXP 70
28575: PUSH
28576: LD_INT 1
28578: EQUAL
28579: IFFALSE 28691
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
28581: LD_EXP 3
28585: PPUSH
28586: CALL_OW 310
28590: PPUSH
28591: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
28595: LD_EXP 3
28599: PPUSH
28600: LD_STRING D8-Huck-1
28602: PPUSH
28603: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
28607: LD_EXP 1
28611: PPUSH
28612: LD_STRING D8-JMM-1
28614: PPUSH
28615: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
28619: LD_EXP 3
28623: PPUSH
28624: LD_STRING D8-Huck-2
28626: PPUSH
28627: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
28631: LD_EXP 1
28635: PPUSH
28636: LD_STRING D8-JMM-2
28638: PPUSH
28639: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
28643: LD_EXP 3
28647: PPUSH
28648: LD_STRING D8-Huck-3
28650: PPUSH
28651: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
28655: LD_EXP 1
28659: PPUSH
28660: LD_STRING D8-JMM-3
28662: PPUSH
28663: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
28667: LD_EXP 3
28671: PPUSH
28672: LD_STRING D8-Huck-4
28674: PPUSH
28675: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
28679: LD_EXP 1
28683: PPUSH
28684: LD_STRING D8-JMM-4
28686: PPUSH
28687: CALL_OW 88
// end ; if StevensStatus = 0 then
28691: LD_EXP 70
28695: PUSH
28696: LD_INT 0
28698: EQUAL
28699: IFFALSE 28811
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
28701: LD_EXP 21
28705: PPUSH
28706: CALL_OW 310
28710: PPUSH
28711: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
28715: LD_EXP 21
28719: PPUSH
28720: LD_STRING D8-Huck-1
28722: PPUSH
28723: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
28727: LD_EXP 1
28731: PPUSH
28732: LD_STRING D8-JMM-1a
28734: PPUSH
28735: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
28739: LD_EXP 21
28743: PPUSH
28744: LD_STRING D8-Huck-2
28746: PPUSH
28747: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
28751: LD_EXP 1
28755: PPUSH
28756: LD_STRING D8-JMM-2
28758: PPUSH
28759: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
28763: LD_EXP 21
28767: PPUSH
28768: LD_STRING D8-Huck-3
28770: PPUSH
28771: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
28775: LD_EXP 1
28779: PPUSH
28780: LD_STRING D8-JMM-3
28782: PPUSH
28783: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
28787: LD_EXP 21
28791: PPUSH
28792: LD_STRING D8-Huck-4
28794: PPUSH
28795: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
28799: LD_EXP 1
28803: PPUSH
28804: LD_STRING D8-JMM-4
28806: PPUSH
28807: CALL_OW 88
// end ; DialogueOff ;
28811: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
28815: LD_INT 25
28817: PPUSH
28818: LD_INT 1
28820: PPUSH
28821: LD_INT 1
28823: PPUSH
28824: CALL_OW 322
// end ;
28828: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
28829: LD_EXP 89
28833: PUSH
28834: LD_INT 73570
28836: GREATEREQUAL
28837: IFFALSE 29187
28839: GO 28841
28841: DISABLE
28842: LD_INT 0
28844: PPUSH
// begin missionStage = 4 ;
28845: LD_ADDR_EXP 92
28849: PUSH
28850: LD_INT 4
28852: ST_TO_ADDR
// DialogueOn ;
28853: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
28857: LD_EXP 28
28861: PPUSH
28862: LD_STRING D9-Roth-1
28864: PPUSH
28865: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
28869: LD_EXP 1
28873: PPUSH
28874: LD_STRING D9-JMM-1
28876: PPUSH
28877: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
28881: LD_EXP 28
28885: PPUSH
28886: LD_STRING D9-Roth-2
28888: PPUSH
28889: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
28893: LD_EXP 28
28897: PPUSH
28898: LD_STRING D9-Roth-2a
28900: PPUSH
28901: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
28905: LD_EXP 26
28909: PPUSH
28910: LD_STRING D9-Pla-2
28912: PPUSH
28913: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
28917: LD_EXP 28
28921: PPUSH
28922: LD_STRING D9-Roth-3
28924: PPUSH
28925: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
28929: LD_EXP 26
28933: PPUSH
28934: LD_STRING D9-Pla-3
28936: PPUSH
28937: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
28941: LD_EXP 28
28945: PPUSH
28946: LD_STRING D9-Roth-4
28948: PPUSH
28949: CALL_OW 94
// dec = Query ( Q9 ) ;
28953: LD_ADDR_VAR 0 1
28957: PUSH
28958: LD_STRING Q9
28960: PPUSH
28961: CALL_OW 97
28965: ST_TO_ADDR
// if dec = 1 then
28966: LD_VAR 0 1
28970: PUSH
28971: LD_INT 1
28973: EQUAL
28974: IFFALSE 28988
// SayRadio ( Roth , D9a-Roth-1 ) ;
28976: LD_EXP 28
28980: PPUSH
28981: LD_STRING D9a-Roth-1
28983: PPUSH
28984: CALL_OW 94
// if dec = 2 then
28988: LD_VAR 0 1
28992: PUSH
28993: LD_INT 2
28995: EQUAL
28996: IFFALSE 29022
// begin Say ( JMM , D9b-JMM-1 ) ;
28998: LD_EXP 1
29002: PPUSH
29003: LD_STRING D9b-JMM-1
29005: PPUSH
29006: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
29010: LD_EXP 28
29014: PPUSH
29015: LD_STRING D9b-Roth-1
29017: PPUSH
29018: CALL_OW 94
// end ; if dec = 3 then
29022: LD_VAR 0 1
29026: PUSH
29027: LD_INT 3
29029: EQUAL
29030: IFFALSE 29092
// begin Say ( JMM , D9c-JMM-1 ) ;
29032: LD_EXP 1
29036: PPUSH
29037: LD_STRING D9c-JMM-1
29039: PPUSH
29040: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
29044: LD_EXP 28
29048: PPUSH
29049: LD_STRING D9c-Roth-1
29051: PPUSH
29052: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
29056: LD_EXP 1
29060: PPUSH
29061: LD_STRING D9c-JMM-2
29063: PPUSH
29064: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
29068: LD_EXP 28
29072: PPUSH
29073: LD_STRING D9c-Roth-2
29075: PPUSH
29076: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
29080: LD_EXP 1
29084: PPUSH
29085: LD_STRING D9c-JMM-3
29087: PPUSH
29088: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
29092: LD_EXP 28
29096: PPUSH
29097: LD_STRING D9c-Roth-3
29099: PPUSH
29100: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
29104: LD_EXP 28
29108: PPUSH
29109: LD_STRING D9cont-Roth-1
29111: PPUSH
29112: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
29116: LD_EXP 1
29120: PPUSH
29121: LD_STRING D9cont-JMM-1
29123: PPUSH
29124: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
29128: LD_EXP 28
29132: PPUSH
29133: LD_STRING D9cont-Roth-2
29135: PPUSH
29136: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
29140: LD_EXP 1
29144: PPUSH
29145: LD_STRING D9cont-JMM-2
29147: PPUSH
29148: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
29152: LD_EXP 28
29156: PPUSH
29157: LD_STRING D9cont-Roth-3
29159: PPUSH
29160: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
29164: LD_EXP 1
29168: PPUSH
29169: LD_STRING D9cont-JMM-3
29171: PPUSH
29172: CALL_OW 88
// DialogueOff ;
29176: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
29180: LD_STRING M3
29182: PPUSH
29183: CALL_OW 337
// end ;
29187: PPOPN 1
29189: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do
29190: LD_INT 22
29192: PUSH
29193: LD_INT 7
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 21
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 69
29218: PUSH
29219: LD_INT 20
29221: PUSH
29222: LD_INT 18
29224: PUSH
29225: LD_INT 15
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: PUSH
29233: LD_OWVAR 67
29237: ARRAY
29238: LESSEQUAL
29239: IFFALSE 29372
29241: GO 29243
29243: DISABLE
// begin AllianceAI = 0 ;
29244: LD_ADDR_EXP 78
29248: PUSH
29249: LD_INT 0
29251: ST_TO_ADDR
// AllianceEscape = 1 ;
29252: LD_ADDR_EXP 84
29256: PUSH
29257: LD_INT 1
29259: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
29260: LD_INT 7
29262: PPUSH
29263: LD_INT 1
29265: PPUSH
29266: LD_INT 1
29268: PPUSH
29269: LD_INT 1
29271: PPUSH
29272: CALL_OW 80
// DialogueOn ;
29276: CALL_OW 6
// Say ( JMM , DAb-JMM-1 ) ;
29280: LD_EXP 1
29284: PPUSH
29285: LD_STRING DAb-JMM-1
29287: PPUSH
29288: CALL_OW 88
// DialogueOff ;
29292: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
29296: LD_INT 22
29298: PUSH
29299: LD_INT 7
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 21
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: PPUSH
29325: CALL_OW 122
// wait ( 0 0$1 ) ;
29329: LD_INT 35
29331: PPUSH
29332: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
29336: LD_INT 22
29338: PUSH
29339: LD_INT 7
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 21
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PPUSH
29360: CALL_OW 69
29364: PPUSH
29365: LD_INT 28
29367: PPUSH
29368: CALL_OW 113
// end ;
29372: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
29373: LD_EXP 84
29377: PUSH
29378: LD_INT 1
29380: EQUAL
29381: PUSH
29382: LD_INT 28
29384: PPUSH
29385: LD_INT 22
29387: PUSH
29388: LD_INT 7
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 21
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 70
29413: AND
29414: IFFALSE 29476
29416: GO 29418
29418: DISABLE
29419: LD_INT 0
29421: PPUSH
// begin enable ;
29422: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_INT 28
29430: PPUSH
29431: LD_INT 22
29433: PUSH
29434: LD_INT 7
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 21
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 70
29459: PUSH
29460: FOR_IN
29461: IFFALSE 29474
// RemoveUnit ( i ) ;
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 64
29472: GO 29460
29474: POP
29475: POP
// end ;
29476: PPOPN 1
29478: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
29479: LD_EXP 89
29483: PUSH
29484: LD_INT 94570
29486: GREATEREQUAL
29487: IFFALSE 29806
29489: GO 29491
29491: DISABLE
// begin DialogueOn ;
29492: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
29496: LD_INT 22
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 23
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 26
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 2
29528: PUSH
29529: LD_INT 25
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 25
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 25
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 25
29561: PUSH
29562: LD_INT 4
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 25
29571: PUSH
29572: LD_INT 5
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 25
29581: PUSH
29582: LD_INT 8
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: PPUSH
29604: CALL_OW 69
29608: PPUSH
29609: LD_STRING D11-Sol1-1
29611: PPUSH
29612: LD_STRING D5-FSol1-1
29614: PPUSH
29615: CALL 6424 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
29619: LD_EXP 26
29623: PPUSH
29624: LD_STRING D11-Pla-1
29626: PPUSH
29627: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
29631: LD_EXP 36
29635: PPUSH
29636: LD_STRING D11-Kov-1
29638: PPUSH
29639: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
29643: LD_EXP 26
29647: PPUSH
29648: LD_STRING D11-Pla-2
29650: PPUSH
29651: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
29655: LD_INT 22
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 23
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 26
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: LD_INT 25
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 25
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 25
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 25
29720: PUSH
29721: LD_INT 4
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 25
29730: PUSH
29731: LD_INT 5
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 25
29740: PUSH
29741: LD_INT 8
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: PPUSH
29763: CALL_OW 69
29767: PPUSH
29768: LD_STRING D11-Sol1-2
29770: PPUSH
29771: LD_STRING D5-FSol1-1
29773: PPUSH
29774: CALL 6424 0 3
// Say ( JMM , D11-JMM-2 ) ;
29778: LD_EXP 1
29782: PPUSH
29783: LD_STRING D11-JMM-2
29785: PPUSH
29786: CALL_OW 88
// DialogueOff ;
29790: CALL_OW 7
// PreapreMehBehs ;
29794: CALL 5493 0 0
// missionStage = 5 ;
29798: LD_ADDR_EXP 92
29802: PUSH
29803: LD_INT 5
29805: ST_TO_ADDR
// end ;
29806: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
29807: LD_EXP 89
29811: PUSH
29812: LD_INT 105070
29814: GREATEREQUAL
29815: IFFALSE 30209
29817: GO 29819
29819: DISABLE
29820: LD_INT 0
29822: PPUSH
29823: PPUSH
// begin time = 0 0$00 ;
29824: LD_ADDR_VAR 0 2
29828: PUSH
29829: LD_INT 0
29831: ST_TO_ADDR
// DialogueOn ;
29832: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
29836: LD_EXP 26
29840: PPUSH
29841: LD_STRING D15-Pla-1
29843: PPUSH
29844: CALL_OW 94
// dec = Query ( Q15a ) ;
29848: LD_ADDR_VAR 0 1
29852: PUSH
29853: LD_STRING Q15a
29855: PPUSH
29856: CALL_OW 97
29860: ST_TO_ADDR
// if dec = 1 then
29861: LD_VAR 0 1
29865: PUSH
29866: LD_INT 1
29868: EQUAL
29869: IFFALSE 29890
// begin Say ( JMM , D15a-JMM-1 ) ;
29871: LD_EXP 1
29875: PPUSH
29876: LD_STRING D15a-JMM-1
29878: PPUSH
29879: CALL_OW 88
// YouLost ( Surrender ) ;
29883: LD_STRING Surrender
29885: PPUSH
29886: CALL_OW 104
// end ; if dec = 2 then
29890: LD_VAR 0 1
29894: PUSH
29895: LD_INT 2
29897: EQUAL
29898: IFFALSE 29928
// begin Say ( JMM , D15b-JMM-1 ) ;
29900: LD_EXP 1
29904: PPUSH
29905: LD_STRING D15b-JMM-1
29907: PPUSH
29908: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
29912: LD_EXP 26
29916: PPUSH
29917: LD_STRING D15b-Pla-1
29919: PPUSH
29920: CALL_OW 94
// DialogueOff ;
29924: CALL_OW 7
// end ; if dec = 3 then
29928: LD_VAR 0 1
29932: PUSH
29933: LD_INT 3
29935: EQUAL
29936: IFFALSE 30012
// begin Say ( JMM , D15c-JMM-1 ) ;
29938: LD_EXP 1
29942: PPUSH
29943: LD_STRING D15c-JMM-1
29945: PPUSH
29946: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
29950: LD_EXP 26
29954: PPUSH
29955: LD_STRING D15c-Pla-1
29957: PPUSH
29958: CALL_OW 94
// DialogueOff ;
29962: CALL_OW 7
// wait ( 0 0$15 ) ;
29966: LD_INT 525
29968: PPUSH
29969: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
29973: LD_EXP 26
29977: PPUSH
29978: LD_STRING D18-Pla-1
29980: PPUSH
29981: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
29985: LD_INT 273
29987: PPUSH
29988: LD_EXP 1
29992: PPUSH
29993: CALL_OW 250
29997: PPUSH
29998: LD_EXP 1
30002: PPUSH
30003: CALL_OW 251
30007: PPUSH
30008: CALL_OW 116
// end ; if dec = 4 then
30012: LD_VAR 0 1
30016: PUSH
30017: LD_INT 4
30019: EQUAL
30020: IFFALSE 30058
// begin Say ( JMM , D15d-JMM-1 ) ;
30022: LD_EXP 1
30026: PPUSH
30027: LD_STRING D15d-JMM-1
30029: PPUSH
30030: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
30034: LD_EXP 26
30038: PPUSH
30039: LD_STRING D15d-Pla-1
30041: PPUSH
30042: CALL_OW 94
// DialogueOff ;
30046: CALL_OW 7
// missionStage = 6 ;
30050: LD_ADDR_EXP 92
30054: PUSH
30055: LD_INT 6
30057: ST_TO_ADDR
// end ; if dec = 2 then
30058: LD_VAR 0 1
30062: PUSH
30063: LD_INT 2
30065: EQUAL
30066: IFFALSE 30139
// begin repeat wait ( 0 0$01 ) ;
30068: LD_INT 35
30070: PPUSH
30071: CALL_OW 67
// time = time + 0 0$01 ;
30075: LD_ADDR_VAR 0 2
30079: PUSH
30080: LD_VAR 0 2
30084: PUSH
30085: LD_INT 35
30087: PLUS
30088: ST_TO_ADDR
// until time >= 3 3$00 ;
30089: LD_VAR 0 2
30093: PUSH
30094: LD_INT 6300
30096: GREATEREQUAL
30097: IFFALSE 30068
// DialogueOn ;
30099: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
30103: LD_EXP 1
30107: PPUSH
30108: LD_STRING D15d-JMM-1a
30110: PPUSH
30111: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
30115: LD_EXP 26
30119: PPUSH
30120: LD_STRING D15d-Pla-1
30122: PPUSH
30123: CALL_OW 94
// DialogueOff ;
30127: CALL_OW 7
// missionStage = 6 ;
30131: LD_ADDR_EXP 92
30135: PUSH
30136: LD_INT 6
30138: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
30139: LD_EXP 47
30143: PPUSH
30144: CALL_OW 302
30148: PUSH
30149: LD_EXP 47
30153: PPUSH
30154: CALL_OW 255
30158: PUSH
30159: LD_INT 1
30161: EQUAL
30162: AND
30163: IFFALSE 30209
// begin DialogueOn ;
30165: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
30169: LD_EXP 1
30173: PPUSH
30174: LD_STRING D16-JMM-1
30176: PPUSH
30177: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
30181: LD_EXP 47
30185: PPUSH
30186: LD_STRING D16-Friend-1
30188: PPUSH
30189: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
30193: LD_EXP 1
30197: PPUSH
30198: LD_STRING D16-JMM-2
30200: PPUSH
30201: CALL_OW 88
// DialogueOff ;
30205: CALL_OW 7
// end ; end ;
30209: PPOPN 2
30211: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do
30212: LD_EXP 92
30216: PUSH
30217: LD_INT 6
30219: EQUAL
30220: PUSH
30221: LD_EXP 47
30225: PPUSH
30226: CALL_OW 302
30230: AND
30231: PUSH
30232: LD_EXP 47
30236: PPUSH
30237: CALL_OW 255
30241: PUSH
30242: LD_INT 1
30244: EQUAL
30245: AND
30246: IFFALSE 30644
30248: GO 30250
30250: DISABLE
// begin DialogueOn ;
30251: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
30255: LD_INT 22
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 34
30270: PUSH
30271: LD_INT 8
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 35
30280: PUSH
30281: LD_INT 8
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PPUSH
30297: CALL_OW 69
30301: PUSH
30302: LD_INT 0
30304: GREATER
30305: IFFALSE 30321
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
30307: LD_EXP 26
30311: PPUSH
30312: LD_STRING D16c-Pla-1
30314: PPUSH
30315: CALL_OW 94
// end else
30319: GO 30506
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
30321: LD_EXP 26
30325: PPUSH
30326: LD_STRING D16a-Pla-1
30328: PPUSH
30329: CALL_OW 94
// if IsOK ( Stevens ) then
30333: LD_EXP 3
30337: PPUSH
30338: CALL_OW 302
30342: IFFALSE 30358
// begin Say ( Stevens , D16a-Huck-1 ) ;
30344: LD_EXP 3
30348: PPUSH
30349: LD_STRING D16a-Huck-1
30351: PPUSH
30352: CALL_OW 88
// end else
30356: GO 30506
// begin if IsOk ( Baker ) then
30358: LD_EXP 21
30362: PPUSH
30363: CALL_OW 302
30367: IFFALSE 30383
// begin Say ( Baker , D16a-Huck-1 ) ;
30369: LD_EXP 21
30373: PPUSH
30374: LD_STRING D16a-Huck-1
30376: PPUSH
30377: CALL_OW 88
// end else
30381: GO 30506
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
30383: LD_INT 22
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 23
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 26
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 2
30415: PUSH
30416: LD_INT 25
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 25
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 25
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 25
30448: PUSH
30449: LD_INT 4
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 25
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 25
30468: PUSH
30469: LD_INT 8
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: PPUSH
30491: CALL_OW 69
30495: PPUSH
30496: LD_STRING D16a-Sol1-1
30498: PPUSH
30499: LD_STRING D5-FSol1-1
30501: PPUSH
30502: CALL 6424 0 3
// end ; end ; end ; Say ( JMM , D16a-JMM-1a ) ;
30506: LD_EXP 1
30510: PPUSH
30511: LD_STRING D16a-JMM-1a
30513: PPUSH
30514: CALL_OW 88
// DialogueOff ;
30518: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
30522: LD_EXP 47
30526: PPUSH
30527: LD_INT 3
30529: PPUSH
30530: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
30534: LD_EXP 47
30538: PPUSH
30539: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
30543: LD_EXP 47
30547: PPUSH
30548: CALL_OW 121
// wait ( 0 0$1 ) ;
30552: LD_INT 35
30554: PPUSH
30555: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30559: LD_EXP 47
30563: PPUSH
30564: LD_INT 18
30566: PPUSH
30567: CALL_OW 113
// wait ( 0 0$3 ) ;
30571: LD_INT 105
30573: PPUSH
30574: CALL_OW 67
// DialogueOn ;
30578: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
30582: LD_EXP 1
30586: PPUSH
30587: LD_STRING D16a-JMM-1
30589: PPUSH
30590: CALL_OW 88
// DialogueOff ;
30594: CALL_OW 7
// wait ( 0 0$30 ) ;
30598: LD_INT 1050
30600: PPUSH
30601: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
30605: LD_EXP 26
30609: PPUSH
30610: LD_STRING D18-Pla-1
30612: PPUSH
30613: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
30617: LD_INT 273
30619: PPUSH
30620: LD_EXP 1
30624: PPUSH
30625: CALL_OW 250
30629: PPUSH
30630: LD_EXP 1
30634: PPUSH
30635: CALL_OW 251
30639: PPUSH
30640: CALL_OW 116
// end ;
30644: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
30645: LD_EXP 47
30649: PPUSH
30650: CALL_OW 255
30654: PUSH
30655: LD_INT 3
30657: EQUAL
30658: IFFALSE 30765
30660: GO 30662
30662: DISABLE
30663: LD_INT 0
30665: PPUSH
// begin enable ;
30666: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
30667: LD_ADDR_VAR 0 1
30671: PUSH
30672: LD_INT 22
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 21
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 56
30694: PUSH
30695: EMPTY
30696: LIST
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: PPUSH
30703: CALL_OW 69
30707: PUSH
30708: FOR_IN
30709: IFFALSE 30763
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
30711: LD_VAR 0 1
30715: PPUSH
30716: LD_EXP 47
30720: PPUSH
30721: CALL_OW 296
30725: PUSH
30726: LD_INT 8
30728: LESS
30729: IFFALSE 30761
// begin disable ;
30731: DISABLE
// DialogueOn ;
30732: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
30736: LD_EXP 47
30740: PPUSH
30741: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
30745: LD_EXP 47
30749: PPUSH
30750: LD_STRING D16a-Friend-1
30752: PPUSH
30753: CALL_OW 88
// DialogueOff ;
30757: CALL_OW 7
// end ; end ;
30761: GO 30708
30763: POP
30764: POP
// end ;
30765: PPOPN 1
30767: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) do
30768: LD_EXP 92
30772: PUSH
30773: LD_INT 6
30775: EQUAL
30776: PUSH
30777: LD_EXP 47
30781: PPUSH
30782: CALL_OW 255
30786: NOT
30787: AND
30788: IFFALSE 30929
30790: GO 30792
30792: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
30793: LD_INT 22
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: LD_INT 34
30808: PUSH
30809: LD_INT 8
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 35
30818: PUSH
30819: LD_INT 8
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PPUSH
30835: CALL_OW 69
30839: PUSH
30840: LD_INT 0
30842: GREATER
30843: IFFALSE 30859
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
30845: LD_EXP 26
30849: PPUSH
30850: LD_STRING D16c-Pla-1
30852: PPUSH
30853: CALL_OW 94
// end else
30857: GO 30929
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
30859: LD_EXP 26
30863: PPUSH
30864: LD_STRING D16b-Pla-1
30866: PPUSH
30867: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
30871: LD_EXP 1
30875: PPUSH
30876: LD_STRING D16b-JMM-1
30878: PPUSH
30879: CALL_OW 88
// wait ( 0 0$15 ) ;
30883: LD_INT 525
30885: PPUSH
30886: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
30890: LD_EXP 26
30894: PPUSH
30895: LD_STRING D18-Pla-1
30897: PPUSH
30898: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
30902: LD_INT 273
30904: PPUSH
30905: LD_EXP 1
30909: PPUSH
30910: CALL_OW 250
30914: PPUSH
30915: LD_EXP 1
30919: PPUSH
30920: CALL_OW 251
30924: PPUSH
30925: CALL_OW 116
// end ; end ;
30929: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
30930: LD_EXP 92
30934: PUSH
30935: LD_INT 5
30937: GREATEREQUAL
30938: IFFALSE 31131
30940: GO 30942
30942: DISABLE
30943: LD_INT 0
30945: PPUSH
// begin enable ;
30946: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: LD_INT 22
30954: PUSH
30955: LD_INT 6
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 30
30964: PUSH
30965: LD_INT 37
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 57
30974: PUSH
30975: EMPTY
30976: LIST
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: PPUSH
30983: CALL_OW 69
30987: PUSH
30988: FOR_IN
30989: IFFALSE 31043
// begin if See ( 1 , i ) then
30991: LD_INT 1
30993: PPUSH
30994: LD_VAR 0 1
30998: PPUSH
30999: CALL_OW 292
31003: IFFALSE 31041
// begin disable ;
31005: DISABLE
// DialogueOn ;
31006: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
31010: LD_EXP 1
31014: PPUSH
31015: LD_STRING D17a-JMM-1
31017: PPUSH
31018: CALL_OW 88
// DialogueOff ;
31022: CALL_OW 7
// behemothStatus = 1 ;
31026: LD_ADDR_EXP 54
31030: PUSH
31031: LD_INT 1
31033: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
31034: LD_STRING M4a
31036: PPUSH
31037: CALL_OW 337
// end ; end ;
31041: GO 30988
31043: POP
31044: POP
// for i in ruBehs do
31045: LD_ADDR_VAR 0 1
31049: PUSH
31050: LD_EXP 53
31054: PUSH
31055: FOR_IN
31056: IFFALSE 31129
// begin if See ( 1 , i ) then
31058: LD_INT 1
31060: PPUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 292
31070: IFFALSE 31127
// begin disable ;
31072: DISABLE
// DialogueOn ;
31073: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
31077: LD_EXP 1
31081: PPUSH
31082: LD_STRING D17b-JMM-1
31084: PPUSH
31085: CALL_OW 88
// DialogueOff ;
31089: CALL_OW 7
// behemothStatus = 0 ;
31093: LD_ADDR_EXP 54
31097: PUSH
31098: LD_INT 0
31100: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
31101: LD_STRING M4b
31103: PPUSH
31104: CALL_OW 337
// wait ( 0 0$2 ) ;
31108: LD_INT 70
31110: PPUSH
31111: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
31115: LD_EXP 26
31119: PPUSH
31120: LD_STRING D18-Pla-1
31122: PPUSH
31123: CALL_OW 88
// end ; end ;
31127: GO 31055
31129: POP
31130: POP
// end ;
31131: PPOPN 1
31133: END
// every 0 0$1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) do var i , tmp , arabianArmy ;
31134: LD_EXP 26
31138: PPUSH
31139: CALL_OW 301
31143: PUSH
31144: LD_EXP 27
31148: PPUSH
31149: CALL_OW 301
31153: AND
31154: IFFALSE 31730
31156: GO 31158
31158: DISABLE
31159: LD_INT 0
31161: PPUSH
31162: PPUSH
31163: PPUSH
// begin russianAI = 0 ;
31164: LD_ADDR_EXP 79
31168: PUSH
31169: LD_INT 0
31171: ST_TO_ADDR
// russianEscape = 1 ;
31172: LD_ADDR_EXP 83
31176: PUSH
31177: LD_INT 1
31179: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
31180: LD_INT 1
31182: PPUSH
31183: LD_INT 3
31185: PPUSH
31186: LD_INT 1
31188: PPUSH
31189: LD_INT 1
31191: PPUSH
31192: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
31196: LD_ADDR_VAR 0 1
31200: PUSH
31201: LD_INT 22
31203: PUSH
31204: LD_INT 3
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 21
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PPUSH
31225: CALL_OW 69
31229: PUSH
31230: FOR_IN
31231: IFFALSE 31262
// if GetSex ( i ) = sex_male then
31233: LD_VAR 0 1
31237: PPUSH
31238: CALL_OW 258
31242: PUSH
31243: LD_INT 1
31245: EQUAL
31246: IFFALSE 31260
// begin tmp = i ;
31248: LD_ADDR_VAR 0 2
31252: PUSH
31253: LD_VAR 0 1
31257: ST_TO_ADDR
// break ;
31258: GO 31262
// end ;
31260: GO 31230
31262: POP
31263: POP
// DialogueOn ;
31264: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
31268: LD_VAR 0 2
31272: PPUSH
31273: LD_STRING DSurrenderRussians-RSol1-1a
31275: PPUSH
31276: CALL_OW 88
// DialogueOff ;
31280: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
31284: LD_INT 22
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 21
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PPUSH
31308: CALL_OW 69
31312: PPUSH
31313: CALL_OW 122
// wait ( 0 0$1 ) ;
31317: LD_INT 35
31319: PPUSH
31320: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
31324: LD_INT 22
31326: PUSH
31327: LD_INT 3
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 21
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PPUSH
31348: CALL_OW 69
31352: PPUSH
31353: LD_INT 25
31355: PPUSH
31356: CALL_OW 113
// wait ( 0 0$10 ) ;
31360: LD_INT 350
31362: PPUSH
31363: CALL_OW 67
// PrepareOmarArmy ;
31367: CALL 32350 0 0
// missionStage = 7 ;
31371: LD_ADDR_EXP 92
31375: PUSH
31376: LD_INT 7
31378: ST_TO_ADDR
// DialogueOn ;
31379: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
31383: LD_EXP 32
31387: PPUSH
31388: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
31392: LD_EXP 1
31396: PPUSH
31397: LD_STRING D19-JMM-1
31399: PPUSH
31400: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
31404: LD_INT 22
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 26
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: LD_INT 25
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 25
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 25
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 25
31459: PUSH
31460: LD_INT 4
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 25
31469: PUSH
31470: LD_INT 5
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 25
31479: PUSH
31480: LD_INT 8
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: PPUSH
31501: CALL_OW 69
31505: PPUSH
31506: LD_STRING D19-Sol1-1
31508: PPUSH
31509: LD_STRING D5-FSol1-1
31511: PPUSH
31512: CALL 6424 0 3
// Say ( JMM , D19-JMM-2 ) ;
31516: LD_EXP 1
31520: PPUSH
31521: LD_STRING D19-JMM-2
31523: PPUSH
31524: CALL_OW 88
// DialogueOff ;
31528: CALL_OW 7
// LaunchMines ;
31532: CALL 31839 0 0
// wait ( 0 0$3 ) ;
31536: LD_INT 105
31538: PPUSH
31539: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
31543: LD_ADDR_VAR 0 3
31547: PUSH
31548: LD_INT 22
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 21
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PPUSH
31572: CALL_OW 69
31576: PUSH
31577: LD_INT 22
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 21
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 25
31599: PUSH
31600: LD_INT 4
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: PPUSH
31612: CALL_OW 69
31616: DIFF
31617: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
31618: LD_ADDR_VAR 0 3
31622: PUSH
31623: LD_VAR 0 3
31627: PUSH
31628: LD_INT 22
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 21
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PPUSH
31652: CALL_OW 69
31656: ADD
31657: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
31658: LD_VAR 0 3
31662: PPUSH
31663: LD_INT 178
31665: PPUSH
31666: LD_INT 66
31668: PPUSH
31669: CALL_OW 114
// wait ( 0 0$4 ) ;
31673: LD_INT 140
31675: PPUSH
31676: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
31680: LD_INT 22
31682: PUSH
31683: LD_INT 2
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 21
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 25
31702: PUSH
31703: LD_INT 4
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: PPUSH
31715: CALL_OW 69
31719: PPUSH
31720: LD_INT 177
31722: PPUSH
31723: LD_INT 69
31725: PPUSH
31726: CALL_OW 158
// end ;
31730: PPOPN 3
31732: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
31733: LD_EXP 83
31737: PUSH
31738: LD_INT 1
31740: EQUAL
31741: PUSH
31742: LD_INT 25
31744: PPUSH
31745: LD_INT 22
31747: PUSH
31748: LD_INT 3
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 21
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PPUSH
31769: CALL_OW 70
31773: AND
31774: IFFALSE 31836
31776: GO 31778
31778: DISABLE
31779: LD_INT 0
31781: PPUSH
// begin enable ;
31782: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
31783: LD_ADDR_VAR 0 1
31787: PUSH
31788: LD_INT 25
31790: PPUSH
31791: LD_INT 22
31793: PUSH
31794: LD_INT 3
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PPUSH
31815: CALL_OW 70
31819: PUSH
31820: FOR_IN
31821: IFFALSE 31834
// RemoveUnit ( i ) ;
31823: LD_VAR 0 1
31827: PPUSH
31828: CALL_OW 64
31832: GO 31820
31834: POP
31835: POP
// end ;
31836: PPOPN 1
31838: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
31839: LD_INT 0
31841: PPUSH
31842: PPUSH
31843: PPUSH
31844: PPUSH
31845: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
31846: LD_ADDR_VAR 0 2
31850: PUSH
31851: LD_INT 168
31853: PUSH
31854: LD_INT 18
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 169
31863: PUSH
31864: LD_INT 20
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 167
31873: PUSH
31874: LD_INT 20
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 164
31883: PUSH
31884: LD_INT 18
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 164
31893: PUSH
31894: LD_INT 19
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 163
31903: PUSH
31904: LD_INT 19
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 164
31913: PUSH
31914: LD_INT 21
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 165
31923: PUSH
31924: LD_INT 21
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 163
31933: PUSH
31934: LD_INT 20
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 164
31943: PUSH
31944: LD_INT 22
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 162
31953: PUSH
31954: LD_INT 20
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
31974: LD_ADDR_VAR 0 3
31978: PUSH
31979: LD_INT 169
31981: PUSH
31982: LD_INT 34
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 169
31991: PUSH
31992: LD_INT 35
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 167
32001: PUSH
32002: LD_INT 32
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 170
32011: PUSH
32012: LD_INT 31
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 173
32021: PUSH
32022: LD_INT 35
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 174
32031: PUSH
32032: LD_INT 39
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// for i = 1 to mines_pos do
32047: LD_ADDR_VAR 0 4
32051: PUSH
32052: DOUBLE
32053: LD_INT 1
32055: DEC
32056: ST_TO_ADDR
32057: LD_VAR 0 2
32061: PUSH
32062: FOR_TO
32063: IFFALSE 32275
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
32065: LD_VAR 0 2
32069: PUSH
32070: LD_VAR 0 4
32074: ARRAY
32075: PUSH
32076: LD_INT 1
32078: ARRAY
32079: PPUSH
32080: LD_VAR 0 2
32084: PUSH
32085: LD_VAR 0 4
32089: ARRAY
32090: PUSH
32091: LD_INT 2
32093: ARRAY
32094: PPUSH
32095: LD_INT 1
32097: PPUSH
32098: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
32102: LD_INT 1
32104: PPUSH
32105: LD_INT 3
32107: PPUSH
32108: CALL_OW 12
32112: PPUSH
32113: CALL_OW 67
// if i < mines_pos then
32117: LD_VAR 0 4
32121: PUSH
32122: LD_VAR 0 2
32126: LESS
32127: IFFALSE 32165
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
32129: LD_VAR 0 2
32133: PUSH
32134: LD_VAR 0 4
32138: ARRAY
32139: PUSH
32140: LD_INT 1
32142: ARRAY
32143: PPUSH
32144: LD_VAR 0 2
32148: PUSH
32149: LD_VAR 0 4
32153: ARRAY
32154: PUSH
32155: LD_INT 2
32157: ARRAY
32158: PPUSH
32159: CALL_OW 348
32163: GO 32273
// begin for j = 1 to mines_pos1 do
32165: LD_ADDR_VAR 0 5
32169: PUSH
32170: DOUBLE
32171: LD_INT 1
32173: DEC
32174: ST_TO_ADDR
32175: LD_VAR 0 3
32179: PUSH
32180: FOR_TO
32181: IFFALSE 32237
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
32183: LD_VAR 0 3
32187: PUSH
32188: LD_VAR 0 5
32192: ARRAY
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: PPUSH
32198: LD_VAR 0 3
32202: PUSH
32203: LD_VAR 0 5
32207: ARRAY
32208: PUSH
32209: LD_INT 2
32211: ARRAY
32212: PPUSH
32213: LD_INT 1
32215: PPUSH
32216: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
32220: LD_INT 1
32222: PPUSH
32223: LD_INT 3
32225: PPUSH
32226: CALL_OW 12
32230: PPUSH
32231: CALL_OW 67
// end ;
32235: GO 32180
32237: POP
32238: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
32239: LD_VAR 0 2
32243: PUSH
32244: LD_VAR 0 4
32248: ARRAY
32249: PUSH
32250: LD_INT 1
32252: ARRAY
32253: PPUSH
32254: LD_VAR 0 2
32258: PUSH
32259: LD_VAR 0 4
32263: ARRAY
32264: PUSH
32265: LD_INT 2
32267: ARRAY
32268: PPUSH
32269: CALL_OW 347
// end ; end ;
32273: GO 32062
32275: POP
32276: POP
// end ;
32277: LD_VAR 0 1
32281: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
32282: LD_EXP 92
32286: PUSH
32287: LD_INT 7
32289: EQUAL
32290: PUSH
32291: LD_EXP 31
32295: PPUSH
32296: CALL_OW 301
32300: AND
32301: PUSH
32302: LD_EXP 32
32306: PPUSH
32307: CALL_OW 302
32311: AND
32312: IFFALSE 32349
32314: GO 32316
32316: DISABLE
// begin DialogueOn ;
32317: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
32321: LD_EXP 1
32325: PPUSH
32326: LD_STRING D19a-JMM-1
32328: PPUSH
32329: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
32333: LD_EXP 32
32337: PPUSH
32338: LD_STRING D19a-Hke-1
32340: PPUSH
32341: CALL_OW 88
// DialogueOff ;
32345: CALL_OW 7
// end ; end_of_file
32349: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
32350: LD_INT 0
32352: PPUSH
32353: PPUSH
32354: PPUSH
32355: PPUSH
32356: PPUSH
// uc_side = 2 ;
32357: LD_ADDR_OWVAR 20
32361: PUSH
32362: LD_INT 2
32364: ST_TO_ADDR
// uc_nation = 2 ;
32365: LD_ADDR_OWVAR 21
32369: PUSH
32370: LD_INT 2
32372: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
32373: LD_ADDR_EXP 31
32377: PUSH
32378: LD_STRING Omar
32380: PPUSH
32381: LD_INT 0
32383: PPUSH
32384: CALL 6144 0 2
32388: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
32389: LD_ADDR_EXP 32
32393: PUSH
32394: LD_STRING Heike
32396: PPUSH
32397: LD_INT 0
32399: PPUSH
32400: CALL 6144 0 2
32404: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
32405: LD_EXP 32
32409: PPUSH
32410: LD_INT 26
32412: PPUSH
32413: LD_INT 0
32415: PPUSH
32416: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
32420: LD_ADDR_VAR 0 2
32424: PUSH
32425: DOUBLE
32426: LD_INT 1
32428: DEC
32429: ST_TO_ADDR
32430: LD_INT 5
32432: PUSH
32433: LD_INT 6
32435: PUSH
32436: LD_INT 7
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: PUSH
32444: LD_OWVAR 67
32448: ARRAY
32449: PUSH
32450: FOR_TO
32451: IFFALSE 32506
// begin hc_name =  ;
32453: LD_ADDR_OWVAR 26
32457: PUSH
32458: LD_STRING 
32460: ST_TO_ADDR
// hc_gallery =  ;
32461: LD_ADDR_OWVAR 33
32465: PUSH
32466: LD_STRING 
32468: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
32469: LD_INT 0
32471: PPUSH
32472: LD_INT 8
32474: PPUSH
32475: CALL_OW 381
// un = CreateHuman ;
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: CALL_OW 44
32488: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
32489: LD_VAR 0 3
32493: PPUSH
32494: LD_INT 26
32496: PPUSH
32497: LD_INT 0
32499: PPUSH
32500: CALL_OW 49
// end ;
32504: GO 32450
32506: POP
32507: POP
// for i := 1 to 4 do
32508: LD_ADDR_VAR 0 2
32512: PUSH
32513: DOUBLE
32514: LD_INT 1
32516: DEC
32517: ST_TO_ADDR
32518: LD_INT 4
32520: PUSH
32521: FOR_TO
32522: IFFALSE 32577
// begin hc_name =  ;
32524: LD_ADDR_OWVAR 26
32528: PUSH
32529: LD_STRING 
32531: ST_TO_ADDR
// hc_gallery =  ;
32532: LD_ADDR_OWVAR 33
32536: PUSH
32537: LD_STRING 
32539: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
32540: LD_INT 0
32542: PPUSH
32543: LD_INT 8
32545: PPUSH
32546: CALL_OW 384
// un = CreateHuman ;
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: CALL_OW 44
32559: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
32560: LD_VAR 0 3
32564: PPUSH
32565: LD_INT 26
32567: PPUSH
32568: LD_INT 0
32570: PPUSH
32571: CALL_OW 49
// end ;
32575: GO 32521
32577: POP
32578: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
32579: LD_ADDR_VAR 0 2
32583: PUSH
32584: DOUBLE
32585: LD_INT 1
32587: DEC
32588: ST_TO_ADDR
32589: LD_INT 8
32591: PUSH
32592: LD_INT 9
32594: PUSH
32595: LD_INT 10
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: PUSH
32603: LD_OWVAR 67
32607: ARRAY
32608: PUSH
32609: FOR_TO
32610: IFFALSE 32698
// begin vc_engine = 3 ;
32612: LD_ADDR_OWVAR 39
32616: PUSH
32617: LD_INT 3
32619: ST_TO_ADDR
// vc_control = 5 ;
32620: LD_ADDR_OWVAR 38
32624: PUSH
32625: LD_INT 5
32627: ST_TO_ADDR
// vc_chassis = 14 ;
32628: LD_ADDR_OWVAR 37
32632: PUSH
32633: LD_INT 14
32635: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
32636: LD_ADDR_OWVAR 40
32640: PUSH
32641: LD_INT 27
32643: PUSH
32644: LD_INT 26
32646: PUSH
32647: LD_INT 28
32649: PUSH
32650: LD_INT 25
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: PPUSH
32662: LD_INT 3
32664: PPUSH
32665: CALL_OW 12
32669: ARRAY
32670: ST_TO_ADDR
// veh = CreateVehicle ;
32671: LD_ADDR_VAR 0 4
32675: PUSH
32676: CALL_OW 45
32680: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
32681: LD_VAR 0 4
32685: PPUSH
32686: LD_INT 26
32688: PPUSH
32689: LD_INT 0
32691: PPUSH
32692: CALL_OW 49
// end ;
32696: GO 32609
32698: POP
32699: POP
// vc_chassis := 31 ;
32700: LD_ADDR_OWVAR 37
32704: PUSH
32705: LD_INT 31
32707: ST_TO_ADDR
// vc_control := control_rider ;
32708: LD_ADDR_OWVAR 38
32712: PUSH
32713: LD_INT 4
32715: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
32716: LD_ADDR_VAR 0 5
32720: PUSH
32721: CALL_OW 45
32725: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
32726: LD_VAR 0 5
32730: PPUSH
32731: LD_INT 26
32733: PPUSH
32734: LD_INT 0
32736: PPUSH
32737: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
32741: LD_EXP 31
32745: PPUSH
32746: LD_VAR 0 5
32750: PPUSH
32751: CALL_OW 52
// end ; end_of_file
32755: LD_VAR 0 1
32759: RET
// every 1 1$30 trigger missionStage > 0 do
32760: LD_EXP 92
32764: PUSH
32765: LD_INT 0
32767: GREATER
32768: IFFALSE 32795
32770: GO 32772
32772: DISABLE
// begin enable ;
32773: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
32774: LD_INT 3
32776: PPUSH
32777: LD_INT 5
32779: PPUSH
32780: CALL_OW 12
32784: PPUSH
32785: LD_INT 27
32787: PPUSH
32788: LD_INT 1
32790: PPUSH
32791: CALL_OW 55
// end ; end_of_file
32795: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
32796: LD_EXP 92
32800: PUSH
32801: LD_INT 7
32803: EQUAL
32804: PUSH
32805: LD_INT 22
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 21
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PPUSH
32829: CALL_OW 69
32833: PUSH
32834: LD_INT 0
32836: EQUAL
32837: AND
32838: PUSH
32839: LD_INT 22
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 21
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 50
32861: PUSH
32862: EMPTY
32863: LIST
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: PPUSH
32870: CALL_OW 69
32874: PUSH
32875: LD_INT 0
32877: EQUAL
32878: AND
32879: IFFALSE 33368
32881: GO 32883
32883: DISABLE
// begin DialogueOn ;
32884: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
32888: LD_EXP 1
32892: PPUSH
32893: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
32897: LD_EXP 1
32901: PPUSH
32902: LD_STRING D20-JMM-1
32904: PPUSH
32905: CALL_OW 88
// if IsOK ( Joan ) then
32909: LD_EXP 2
32913: PPUSH
32914: CALL_OW 302
32918: IFFALSE 32932
// Say ( Joan , D20-Joan-1 ) ;
32920: LD_EXP 2
32924: PPUSH
32925: LD_STRING D20-Joan-1
32927: PPUSH
32928: CALL_OW 88
// if IsOk ( Lisa ) then
32932: LD_EXP 4
32936: PPUSH
32937: CALL_OW 302
32941: IFFALSE 32955
// Say ( Lisa , D20-Lisa-1 ) ;
32943: LD_EXP 4
32947: PPUSH
32948: LD_STRING D20-Lisa-1
32950: PPUSH
32951: CALL_OW 88
// if IsOk ( Donaldson ) then
32955: LD_EXP 5
32959: PPUSH
32960: CALL_OW 302
32964: IFFALSE 32978
// Say ( Donaldson , D20-Don-1 ) ;
32966: LD_EXP 5
32970: PPUSH
32971: LD_STRING D20-Don-1
32973: PPUSH
32974: CALL_OW 88
// if IsOK ( Cornel ) then
32978: LD_EXP 12
32982: PPUSH
32983: CALL_OW 302
32987: IFFALSE 33001
// Say ( Cornel , D20-Corn-1 ) ;
32989: LD_EXP 12
32993: PPUSH
32994: LD_STRING D20-Corn-1
32996: PPUSH
32997: CALL_OW 88
// if IsOk ( Denis ) then
33001: LD_EXP 8
33005: PPUSH
33006: CALL_OW 302
33010: IFFALSE 33024
// Say ( Denis , D20-Den-1 ) ;
33012: LD_EXP 8
33016: PPUSH
33017: LD_STRING D20-Den-1
33019: PPUSH
33020: CALL_OW 88
// if IsOk ( Bobby ) then
33024: LD_EXP 6
33028: PPUSH
33029: CALL_OW 302
33033: IFFALSE 33047
// Say ( Bobby , D20-Bobby-1 ) ;
33035: LD_EXP 6
33039: PPUSH
33040: LD_STRING D20-Bobby-1
33042: PPUSH
33043: CALL_OW 88
// if IsOk ( Gladstone ) then
33047: LD_EXP 10
33051: PPUSH
33052: CALL_OW 302
33056: IFFALSE 33070
// Say ( Gladstone , D20-Glad-1 ) ;
33058: LD_EXP 10
33062: PPUSH
33063: LD_STRING D20-Glad-1
33065: PPUSH
33066: CALL_OW 88
// if IsOk ( Cyrus ) then
33070: LD_EXP 7
33074: PPUSH
33075: CALL_OW 302
33079: IFFALSE 33093
// Say ( Cyrus , D20-Cyrus-1 ) ;
33081: LD_EXP 7
33085: PPUSH
33086: LD_STRING D20-Cyrus-1
33088: PPUSH
33089: CALL_OW 88
// if IsOk ( Stevens ) then
33093: LD_EXP 3
33097: PPUSH
33098: CALL_OW 302
33102: IFFALSE 33116
// Say ( Stevens , D20-Huck-1 ) ;
33104: LD_EXP 3
33108: PPUSH
33109: LD_STRING D20-Huck-1
33111: PPUSH
33112: CALL_OW 88
// if IsOk ( Brown ) then
33116: LD_EXP 9
33120: PPUSH
33121: CALL_OW 302
33125: IFFALSE 33139
// Say ( Brown , D20-Brown-1 ) ;
33127: LD_EXP 9
33131: PPUSH
33132: LD_STRING D20-Brown-1
33134: PPUSH
33135: CALL_OW 88
// if IsOk ( Gary ) then
33139: LD_EXP 13
33143: PPUSH
33144: CALL_OW 302
33148: IFFALSE 33162
// Say ( Gary , D20-Gary-1 ) ;
33150: LD_EXP 13
33154: PPUSH
33155: LD_STRING D20-Gary-1
33157: PPUSH
33158: CALL_OW 88
// if IsOk ( Connie ) then
33162: LD_EXP 16
33166: PPUSH
33167: CALL_OW 302
33171: IFFALSE 33185
// Say ( Connie , D20-Con-1 ) ;
33173: LD_EXP 16
33177: PPUSH
33178: LD_STRING D20-Con-1
33180: PPUSH
33181: CALL_OW 88
// if IsOk ( Kurt ) then
33185: LD_EXP 30
33189: PPUSH
33190: CALL_OW 302
33194: IFFALSE 33208
// Say ( Kurt , D20-Kurt-1 ) ;
33196: LD_EXP 30
33200: PPUSH
33201: LD_STRING D20-Kurt-1
33203: PPUSH
33204: CALL_OW 88
// if IsOk ( Kikuchi ) then
33208: LD_EXP 15
33212: PPUSH
33213: CALL_OW 302
33217: IFFALSE 33231
// Say ( Kikuchi , D20-Yam-1 ) ;
33219: LD_EXP 15
33223: PPUSH
33224: LD_STRING D20-Yam-1
33226: PPUSH
33227: CALL_OW 88
// if IsOk ( Frank ) then
33231: LD_EXP 14
33235: PPUSH
33236: CALL_OW 302
33240: IFFALSE 33254
// Say ( Frank , D20-Frank-1 ) ;
33242: LD_EXP 14
33246: PPUSH
33247: LD_STRING D20-Frank-1
33249: PPUSH
33250: CALL_OW 88
// DialogueOff ;
33254: CALL_OW 7
// if AllianceEscape = 1 then
33258: LD_EXP 84
33262: PUSH
33263: LD_INT 1
33265: EQUAL
33266: IFFALSE 33280
// AddMedal ( Roth , 1 ) else
33268: LD_STRING Roth
33270: PPUSH
33271: LD_INT 1
33273: PPUSH
33274: CALL_OW 101
33278: GO 33291
// AddMedal ( Roth , - 1 ) ;
33280: LD_STRING Roth
33282: PPUSH
33283: LD_INT 1
33285: NEG
33286: PPUSH
33287: CALL_OW 101
// if behemothStatus = 1 then
33291: LD_EXP 54
33295: PUSH
33296: LD_INT 1
33298: EQUAL
33299: IFFALSE 33313
// AddMedal ( Project , 1 ) else
33301: LD_STRING Project
33303: PPUSH
33304: LD_INT 1
33306: PPUSH
33307: CALL_OW 101
33311: GO 33324
// AddMedal ( Project , - 1 ) ;
33313: LD_STRING Project
33315: PPUSH
33316: LD_INT 1
33318: NEG
33319: PPUSH
33320: CALL_OW 101
// if unitLost = 0 then
33324: LD_EXP 90
33328: PUSH
33329: LD_INT 0
33331: EQUAL
33332: IFFALSE 33346
// AddMedal ( NoLosses , 1 ) else
33334: LD_STRING NoLosses
33336: PPUSH
33337: LD_INT 1
33339: PPUSH
33340: CALL_OW 101
33344: GO 33357
// AddMedal ( NoLosses , - 1 ) ;
33346: LD_STRING NoLosses
33348: PPUSH
33349: LD_INT 1
33351: NEG
33352: PPUSH
33353: CALL_OW 101
// GiveMedals ( MAIN ) ;
33357: LD_STRING MAIN
33359: PPUSH
33360: CALL_OW 102
// YouWin ;
33364: CALL_OW 103
// end ; end_of_file
33368: END
// every 0 0$1 trigger IsDead ( JMM ) do
33369: LD_EXP 1
33373: PPUSH
33374: CALL_OW 301
33378: IFFALSE 33390
33380: GO 33382
33382: DISABLE
// YouLost ( JMM ) ;
33383: LD_STRING JMM
33385: PPUSH
33386: CALL_OW 104
33390: END
