// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 77
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 78
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 79
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 81
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 80
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 82
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 75
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 76
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 64
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 65
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 66
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 71
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 67
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 69
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 68
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 73
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 70
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 53
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 91
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 63
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 54
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 60
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 61
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 92
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 93
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 94
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 56
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 57
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 58
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 100
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 59
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 97
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 83
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 84
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 85
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 95
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 96
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 99
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 101
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 102
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3818 0 0
// PrepareRussians ;
 394: CALL 4215 0 0
// PrepareAlliance ;
 398: CALL 5962 0 0
// PrepareDifficulty ;
 402: CALL 7531 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 102
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 77
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 77
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 77
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 77
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 77
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 78
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 78
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 78
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 78
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 78
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 78
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6607 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 78
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 79
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6607 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 79
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6607 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 79
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6607 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6607 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6664 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6664 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6664 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6664 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6664 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6664 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6664 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6664 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6664 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6664 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6664 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6664 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6794 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6794 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6794 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 64
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7164 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 65
2357: PUSH
2358: LD_EXP 65
2362: PUSH
2363: LD_EXP 64
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 65
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 79
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6607 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 79
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6607 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 79
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6607 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6721 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6721 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6721 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6721 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6721 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6721 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6721 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6721 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6721 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6721 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6721 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6721 0 1
3134: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3135: LD_ADDR_EXP 22
3139: PUSH
3140: LD_STRING Gordon
3142: PPUSH
3143: CALL 6721 0 1
3147: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3148: LD_ADDR_EXP 23
3152: PUSH
3153: LD_STRING Peter
3155: PPUSH
3156: CALL 6721 0 1
3160: ST_TO_ADDR
// if StevensStatus = 1 then
3161: LD_EXP 76
3165: PUSH
3166: LD_INT 1
3168: EQUAL
3169: IFFALSE 3186
// Stevens = PrepareUnitOmega ( Stevens ) else
3171: LD_ADDR_EXP 3
3175: PUSH
3176: LD_STRING Stevens
3178: PPUSH
3179: CALL 6721 0 1
3183: ST_TO_ADDR
3184: GO 3199
// Baker = PrepareUnitOmega ( Baker ) ;
3186: LD_ADDR_EXP 21
3190: PUSH
3191: LD_STRING Baker
3193: PPUSH
3194: CALL 6721 0 1
3198: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3199: LD_ADDR_EXP 19
3203: PUSH
3204: LD_STRING 15_other_survivors
3206: PPUSH
3207: CALL_OW 31
3211: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3212: LD_ADDR_VAR 0 7
3216: PUSH
3217: LD_STRING 15_Vehicles_1
3219: PPUSH
3220: EMPTY
3221: PPUSH
3222: CALL_OW 30
3226: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3227: LD_ADDR_VAR 0 8
3231: PUSH
3232: LD_STRING 15_ResourcesInCargo_1
3234: PPUSH
3235: EMPTY
3236: PPUSH
3237: CALL_OW 30
3241: ST_TO_ADDR
// for i := 1 to vehicles do
3242: LD_ADDR_VAR 0 2
3246: PUSH
3247: DOUBLE
3248: LD_INT 1
3250: DEC
3251: ST_TO_ADDR
3252: LD_VAR 0 7
3256: PUSH
3257: FOR_TO
3258: IFFALSE 3483
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3260: LD_ADDR_OWVAR 21
3264: PUSH
3265: LD_VAR 0 7
3269: PUSH
3270: LD_VAR 0 2
3274: ARRAY
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3280: LD_ADDR_OWVAR 37
3284: PUSH
3285: LD_VAR 0 7
3289: PUSH
3290: LD_VAR 0 2
3294: ARRAY
3295: PUSH
3296: LD_INT 2
3298: ARRAY
3299: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3300: LD_ADDR_OWVAR 39
3304: PUSH
3305: LD_VAR 0 7
3309: PUSH
3310: LD_VAR 0 2
3314: ARRAY
3315: PUSH
3316: LD_INT 3
3318: ARRAY
3319: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3320: LD_ADDR_OWVAR 38
3324: PUSH
3325: LD_VAR 0 7
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PUSH
3336: LD_INT 4
3338: ARRAY
3339: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3340: LD_ADDR_OWVAR 40
3344: PUSH
3345: LD_VAR 0 7
3349: PUSH
3350: LD_VAR 0 2
3354: ARRAY
3355: PUSH
3356: LD_INT 5
3358: ARRAY
3359: ST_TO_ADDR
// if vc_weapon = 8 then
3360: LD_OWVAR 40
3364: PUSH
3365: LD_INT 8
3367: EQUAL
3368: IFFALSE 3380
// vc_weapon = 9 else
3370: LD_ADDR_OWVAR 40
3374: PUSH
3375: LD_INT 9
3377: ST_TO_ADDR
3378: GO 3400
// vc_weapon = vehicles [ i ] [ 5 ] ;
3380: LD_ADDR_OWVAR 40
3384: PUSH
3385: LD_VAR 0 7
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PUSH
3396: LD_INT 5
3398: ARRAY
3399: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3400: LD_ADDR_OWVAR 41
3404: PUSH
3405: LD_INT 40
3407: ST_TO_ADDR
// veh = CreateVehicle ;
3408: LD_ADDR_VAR 0 5
3412: PUSH
3413: CALL_OW 45
3417: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_INT 5
3425: PPUSH
3426: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3430: LD_VAR 0 5
3434: PPUSH
3435: LD_INT 300
3437: PPUSH
3438: LD_INT 800
3440: PPUSH
3441: CALL_OW 12
3445: PPUSH
3446: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: LD_VAR 0 3
3459: PUSH
3460: LD_VAR 0 5
3464: ADD
3465: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3466: LD_VAR 0 5
3470: PPUSH
3471: LD_INT 16
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: CALL_OW 49
// end ;
3481: GO 3257
3483: POP
3484: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3485: LD_ADDR_VAR 0 9
3489: PUSH
3490: LD_INT 16
3492: PPUSH
3493: LD_INT 22
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 21
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 34
3515: PUSH
3516: LD_INT 12
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: LD_INT 33
3525: PUSH
3526: LD_INT 1
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 32
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PPUSH
3550: CALL_OW 70
3554: ST_TO_ADDR
// if cargoList > 0 then
3555: LD_VAR 0 9
3559: PUSH
3560: LD_INT 0
3562: GREATER
3563: IFFALSE 3696
// for i = 1 to cargoList do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_VAR 0 9
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3694
// begin if resources > 0 then
3583: LD_VAR 0 8
3587: PUSH
3588: LD_INT 0
3590: GREATER
3591: IFFALSE 3692
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3593: LD_VAR 0 9
3597: PUSH
3598: LD_VAR 0 2
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_VAR 0 8
3611: PUSH
3612: LD_VAR 0 2
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3626: LD_VAR 0 9
3630: PUSH
3631: LD_VAR 0 2
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_VAR 0 8
3644: PUSH
3645: LD_VAR 0 2
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3659: LD_VAR 0 9
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_VAR 0 8
3677: PUSH
3678: LD_VAR 0 2
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3580
3694: POP
3695: POP
// for i := 1 to heroesFromOmega do
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: DOUBLE
3702: LD_INT 1
3704: DEC
3705: ST_TO_ADDR
3706: LD_EXP 20
3710: PUSH
3711: FOR_TO
3712: IFFALSE 3742
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3714: LD_EXP 20
3718: PUSH
3719: LD_VAR 0 2
3723: ARRAY
3724: PPUSH
3725: LD_VAR 0 3
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PPUSH
3736: CALL_OW 52
// end ;
3740: GO 3711
3742: POP
3743: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3744: LD_ADDR_VAR 0 6
3748: PUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_INT 58
3756: PUSH
3757: EMPTY
3758: LIST
3759: PPUSH
3760: CALL_OW 72
3764: ST_TO_ADDR
// for i := 1 to others13Omega do
3765: LD_ADDR_VAR 0 2
3769: PUSH
3770: DOUBLE
3771: LD_INT 1
3773: DEC
3774: ST_TO_ADDR
3775: LD_EXP 19
3779: PUSH
3780: FOR_TO
3781: IFFALSE 3811
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3783: LD_EXP 19
3787: PUSH
3788: LD_VAR 0 2
3792: ARRAY
3793: PPUSH
3794: LD_VAR 0 6
3798: PUSH
3799: LD_VAR 0 2
3803: ARRAY
3804: PPUSH
3805: CALL_OW 52
// end ;
3809: GO 3780
3811: POP
3812: POP
// end ; end_of_file
3813: LD_VAR 0 1
3817: RET
// export function PrepareLegion ; var i ; begin
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// uc_side = 8 ;
3822: LD_ADDR_OWVAR 20
3826: PUSH
3827: LD_INT 8
3829: ST_TO_ADDR
// uc_nation = 2 ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_INT 2
3837: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3838: LD_ADDR_EXP 30
3842: PUSH
3843: LD_STRING Kurt
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL 6607 0 2
3853: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3854: LD_ADDR_EXP 35
3858: PUSH
3859: LD_STRING Kozlov
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL 6607 0 2
3869: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3870: LD_INT 8
3872: PPUSH
3873: LD_INT 2
3875: PPUSH
3876: LD_INT 122
3878: PPUSH
3879: LD_INT 10
3881: PPUSH
3882: LD_INT 2
3884: PPUSH
3885: LD_INT 4
3887: PPUSH
3888: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3892: LD_INT 8
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: LD_INT 99
3900: PPUSH
3901: LD_INT 10
3903: PPUSH
3904: LD_INT 2
3906: PPUSH
3907: LD_INT 2
3909: PPUSH
3910: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3914: LD_INT 8
3916: PPUSH
3917: LD_INT 2
3919: PPUSH
3920: LD_INT 104
3922: PPUSH
3923: LD_INT 10
3925: PPUSH
3926: LD_INT 1
3928: PPUSH
3929: LD_INT 2
3931: PPUSH
3932: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3936: LD_INT 8
3938: PPUSH
3939: LD_INT 2
3941: PPUSH
3942: LD_INT 104
3944: PPUSH
3945: LD_INT 10
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3958: LD_INT 8
3960: PPUSH
3961: LD_INT 2
3963: PPUSH
3964: LD_INT 118
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: LD_INT 1
3975: PPUSH
3976: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: LD_INT 117
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: LD_INT 3
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 252
4010: PPUSH
4011: LD_INT 10
4013: PPUSH
4014: LD_INT 4
4016: PPUSH
4017: LD_INT 2
4019: PPUSH
4020: CALL 7725 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4024: LD_ADDR_VAR 0 2
4028: PUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 8
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 3
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 30
4051: PUSH
4052: LD_INT 32
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 58
4061: PUSH
4062: EMPTY
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PUSH
4076: FOR_IN
4077: IFFALSE 4105
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4079: LD_INT 8
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: LD_VAR 0 2
4089: PPUSH
4090: LD_INT 10
4092: PPUSH
4093: LD_INT 1
4095: PPUSH
4096: LD_INT 1
4098: PPUSH
4099: CALL 7725 0 6
4103: GO 4076
4105: POP
4106: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4107: LD_INT 8
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: LD_INT 140
4115: PPUSH
4116: LD_INT 10
4118: PPUSH
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL 7725 0 6
// arControler = UnitsInside ( ArControl ) ;
4129: LD_ADDR_EXP 55
4133: PUSH
4134: LD_INT 140
4136: PPUSH
4137: CALL_OW 313
4141: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4142: LD_INT 139
4144: PPUSH
4145: LD_EXP 55
4149: PUSH
4150: LD_INT 1
4152: ARRAY
4153: PPUSH
4154: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4158: LD_INT 138
4160: PPUSH
4161: LD_EXP 55
4165: PUSH
4166: LD_INT 1
4168: ARRAY
4169: PPUSH
4170: CALL_OW 195
// hc_name = Ali Hadarach ;
4174: LD_ADDR_OWVAR 26
4178: PUSH
4179: LD_STRING Ali Hadarach
4181: ST_TO_ADDR
// hc_gallery =  ;
4182: LD_ADDR_OWVAR 33
4186: PUSH
4187: LD_STRING 
4189: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4190: LD_INT 1
4192: PPUSH
4193: LD_INT 8
4195: PPUSH
4196: CALL_OW 383
// LegionFriend = CreateHuman ;
4200: LD_ADDR_EXP 52
4204: PUSH
4205: CALL_OW 44
4209: ST_TO_ADDR
// end ; end_of_file
4210: LD_VAR 0 1
4214: RET
// export function PrepareRussians ; var i ; begin
4215: LD_INT 0
4217: PPUSH
4218: PPUSH
// uc_side = 3 ;
4219: LD_ADDR_OWVAR 20
4223: PUSH
4224: LD_INT 3
4226: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4227: LD_ADDR_EXP 26
4231: PUSH
4232: LD_STRING Platonov
4234: PPUSH
4235: LD_INT 0
4237: PPUSH
4238: CALL 6607 0 2
4242: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4243: LD_EXP 26
4247: PPUSH
4248: LD_INT 23
4250: PPUSH
4251: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4255: LD_ADDR_EXP 27
4259: PUSH
4260: LD_STRING Yakotich
4262: PPUSH
4263: LD_INT 0
4265: PPUSH
4266: CALL 6607 0 2
4270: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4271: LD_EXP 27
4275: PPUSH
4276: LD_INT 26
4278: PPUSH
4279: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4283: LD_ADDR_EXP 36
4287: PUSH
4288: LD_STRING Kovalyuk
4290: PPUSH
4291: LD_INT 0
4293: PPUSH
4294: CALL 6607 0 2
4298: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4299: LD_EXP 36
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4311: LD_ADDR_EXP 57
4315: PUSH
4316: LD_EXP 57
4320: PUSH
4321: LD_EXP 36
4325: ADD
4326: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4327: LD_ADDR_EXP 37
4331: PUSH
4332: LD_STRING Oblukov
4334: PPUSH
4335: LD_INT 0
4337: PPUSH
4338: CALL 6607 0 2
4342: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4343: LD_ADDR_EXP 38
4347: PUSH
4348: LD_STRING Bystrov
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL 6607 0 2
4358: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4359: LD_ADDR_EXP 39
4363: PUSH
4364: LD_STRING Fadeev
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL 6607 0 2
4374: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4375: LD_ADDR_EXP 40
4379: PUSH
4380: LD_STRING Gleb
4382: PPUSH
4383: LD_INT 0
4385: PPUSH
4386: CALL 6607 0 2
4390: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4391: LD_ADDR_EXP 41
4395: PUSH
4396: LD_STRING Petrosyan
4398: PPUSH
4399: LD_INT 0
4401: PPUSH
4402: CALL 6607 0 2
4406: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4407: LD_ADDR_EXP 42
4411: PUSH
4412: LD_STRING Petrovova
4414: PPUSH
4415: LD_INT 0
4417: PPUSH
4418: CALL 6607 0 2
4422: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4423: LD_ADDR_EXP 43
4427: PUSH
4428: LD_STRING Kuzmov
4430: PPUSH
4431: LD_INT 0
4433: PPUSH
4434: CALL 6607 0 2
4438: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4439: LD_ADDR_EXP 44
4443: PUSH
4444: LD_STRING Mikhail
4446: PPUSH
4447: LD_INT 0
4449: PPUSH
4450: CALL 6607 0 2
4454: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4455: LD_ADDR_EXP 45
4459: PUSH
4460: LD_STRING Furmanov
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL 6607 0 2
4470: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4471: LD_ADDR_EXP 46
4475: PUSH
4476: LD_STRING Belkov
4478: PPUSH
4479: LD_INT 0
4481: PPUSH
4482: CALL 6607 0 2
4486: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4487: LD_EXP 37
4491: PPUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 3
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 21
4504: PUSH
4505: LD_INT 3
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 30
4514: PUSH
4515: LD_INT 32
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 58
4524: PUSH
4525: EMPTY
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4547: LD_EXP 39
4551: PPUSH
4552: LD_INT 22
4554: PUSH
4555: LD_INT 3
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PUSH
4562: LD_INT 21
4564: PUSH
4565: LD_INT 3
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 32
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 58
4584: PUSH
4585: EMPTY
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 69
4598: PUSH
4599: LD_INT 1
4601: ARRAY
4602: PPUSH
4603: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4607: LD_EXP 40
4611: PPUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 30
4634: PUSH
4635: LD_INT 32
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 58
4644: PUSH
4645: EMPTY
4646: LIST
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PPUSH
4654: CALL_OW 69
4658: PUSH
4659: LD_INT 1
4661: ARRAY
4662: PPUSH
4663: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4667: LD_EXP 42
4671: PPUSH
4672: LD_INT 22
4674: PUSH
4675: LD_INT 3
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 30
4694: PUSH
4695: LD_INT 32
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 58
4704: PUSH
4705: EMPTY
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4727: LD_EXP 43
4731: PPUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 3
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 21
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 30
4754: PUSH
4755: LD_INT 32
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 58
4764: PUSH
4765: EMPTY
4766: LIST
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 69
4778: PUSH
4779: LD_INT 1
4781: ARRAY
4782: PPUSH
4783: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4787: LD_EXP 45
4791: PPUSH
4792: LD_INT 22
4794: PUSH
4795: LD_INT 3
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 32
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 58
4824: PUSH
4825: EMPTY
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 69
4838: PUSH
4839: LD_INT 1
4841: ARRAY
4842: PPUSH
4843: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4847: LD_EXP 46
4851: PPUSH
4852: LD_INT 22
4854: PUSH
4855: LD_INT 3
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 21
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 30
4874: PUSH
4875: LD_INT 32
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 58
4884: PUSH
4885: EMPTY
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: PPUSH
4894: CALL_OW 69
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PPUSH
4903: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4907: LD_EXP 38
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4919: LD_EXP 41
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4931: LD_EXP 44
4935: PPUSH
4936: LD_INT 26
4938: PPUSH
4939: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4943: LD_EXP 44
4947: PPUSH
4948: LD_INT 2
4950: PPUSH
4951: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4955: LD_INT 3
4957: PPUSH
4958: LD_INT 3
4960: PPUSH
4961: LD_INT 26
4963: PPUSH
4964: LD_INT 10
4966: PPUSH
4967: LD_INT 2
4969: PPUSH
4970: LD_INT 5
4972: PPUSH
4973: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
4977: LD_INT 3
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 23
4985: PPUSH
4986: LD_INT 10
4988: PPUSH
4989: LD_INT 2
4991: PPUSH
4992: LD_INT 4
4994: PPUSH
4995: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
4999: LD_INT 3
5001: PPUSH
5002: LD_INT 3
5004: PPUSH
5005: LD_INT 27
5007: PPUSH
5008: LD_INT 10
5010: PPUSH
5011: LD_INT 9
5013: PPUSH
5014: LD_INT 6
5016: PPUSH
5017: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5021: LD_INT 3
5023: PPUSH
5024: LD_INT 3
5026: PPUSH
5027: LD_INT 27
5029: PPUSH
5030: LD_INT 10
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 3
5038: PPUSH
5039: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5043: LD_INT 3
5045: PPUSH
5046: LD_INT 3
5048: PPUSH
5049: LD_INT 4
5051: PPUSH
5052: LD_INT 10
5054: PPUSH
5055: LD_INT 3
5057: PPUSH
5058: LD_INT 6
5060: PPUSH
5061: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5065: LD_INT 3
5067: PPUSH
5068: LD_INT 3
5070: PPUSH
5071: LD_INT 10
5073: PPUSH
5074: LD_INT 10
5076: PPUSH
5077: LD_INT 3
5079: PPUSH
5080: LD_INT 6
5082: PPUSH
5083: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5087: LD_INT 3
5089: PPUSH
5090: LD_INT 3
5092: PPUSH
5093: LD_INT 2
5095: PPUSH
5096: LD_INT 10
5098: PPUSH
5099: LD_INT 4
5101: PPUSH
5102: LD_INT 3
5104: PPUSH
5105: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 3
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: LD_INT 10
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: LD_INT 3
5126: PPUSH
5127: CALL 7725 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: LD_INT 22
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 21
5148: PUSH
5149: LD_INT 3
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 30
5158: PUSH
5159: LD_INT 32
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 58
5168: PUSH
5169: EMPTY
5170: LIST
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: PPUSH
5178: CALL_OW 69
5182: PUSH
5183: FOR_IN
5184: IFFALSE 5212
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5186: LD_INT 3
5188: PPUSH
5189: LD_INT 3
5191: PPUSH
5192: LD_VAR 0 2
5196: PPUSH
5197: LD_INT 10
5199: PPUSH
5200: LD_INT 1
5202: PPUSH
5203: LD_INT 1
5205: PPUSH
5206: CALL 7725 0 6
5210: GO 5183
5212: POP
5213: POP
// end ;
5214: LD_VAR 0 1
5218: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
// uc_side = 6 ;
5225: LD_ADDR_OWVAR 20
5229: PUSH
5230: LD_INT 6
5232: ST_TO_ADDR
// uc_nation = 1 ;
5233: LD_ADDR_OWVAR 21
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// vc_engine = 3 ;
5241: LD_ADDR_OWVAR 39
5245: PUSH
5246: LD_INT 3
5248: ST_TO_ADDR
// vc_control = 1 ;
5249: LD_ADDR_OWVAR 38
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// vc_chassis = 5 ;
5257: LD_ADDR_OWVAR 37
5261: PUSH
5262: LD_INT 5
5264: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5265: LD_ADDR_OWVAR 40
5269: PUSH
5270: LD_INT 5
5272: PUSH
5273: LD_INT 9
5275: PUSH
5276: LD_INT 7
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 1
5286: PPUSH
5287: LD_INT 3
5289: PPUSH
5290: CALL_OW 12
5294: ARRAY
5295: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5296: LD_ADDR_EXP 34
5300: PUSH
5301: CALL_OW 45
5305: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5306: LD_EXP 34
5310: PPUSH
5311: LD_INT 14
5313: PPUSH
5314: LD_INT 0
5316: PPUSH
5317: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5321: LD_ADDR_EXP 33
5325: PUSH
5326: LD_STRING Vsevolod
5328: PPUSH
5329: LD_INT 0
5331: PPUSH
5332: CALL 6607 0 2
5336: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5337: LD_EXP 33
5341: PPUSH
5342: LD_EXP 34
5346: PPUSH
5347: CALL_OW 52
// for i := 1 to 5 do
5351: LD_ADDR_VAR 0 2
5355: PUSH
5356: DOUBLE
5357: LD_INT 1
5359: DEC
5360: ST_TO_ADDR
5361: LD_INT 5
5363: PUSH
5364: FOR_TO
5365: IFFALSE 5449
// begin vc_engine = 3 ;
5367: LD_ADDR_OWVAR 39
5371: PUSH
5372: LD_INT 3
5374: ST_TO_ADDR
// vc_control = 3 ;
5375: LD_ADDR_OWVAR 38
5379: PUSH
5380: LD_INT 3
5382: ST_TO_ADDR
// vc_chassis = 3 ;
5383: LD_ADDR_OWVAR 37
5387: PUSH
5388: LD_INT 3
5390: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5391: LD_ADDR_OWVAR 40
5395: PUSH
5396: LD_INT 5
5398: PUSH
5399: LD_INT 9
5401: PUSH
5402: LD_INT 7
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 1
5412: PPUSH
5413: LD_INT 3
5415: PPUSH
5416: CALL_OW 12
5420: ARRAY
5421: ST_TO_ADDR
// veh = CreateVehicle ;
5422: LD_ADDR_VAR 0 3
5426: PUSH
5427: CALL_OW 45
5431: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5432: LD_VAR 0 3
5436: PPUSH
5437: LD_INT 14
5439: PPUSH
5440: LD_INT 0
5442: PPUSH
5443: CALL_OW 49
// end ;
5447: GO 5364
5449: POP
5450: POP
// uc_nation = 3 ;
5451: LD_ADDR_OWVAR 21
5455: PUSH
5456: LD_INT 3
5458: ST_TO_ADDR
// for i := 1 to 7 do
5459: LD_ADDR_VAR 0 2
5463: PUSH
5464: DOUBLE
5465: LD_INT 1
5467: DEC
5468: ST_TO_ADDR
5469: LD_INT 7
5471: PUSH
5472: FOR_TO
5473: IFFALSE 5565
// begin vc_engine = 3 ;
5475: LD_ADDR_OWVAR 39
5479: PUSH
5480: LD_INT 3
5482: ST_TO_ADDR
// vc_control = 3 ;
5483: LD_ADDR_OWVAR 38
5487: PUSH
5488: LD_INT 3
5490: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5491: LD_ADDR_OWVAR 37
5495: PUSH
5496: LD_INT 24
5498: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5499: LD_ADDR_OWVAR 40
5503: PUSH
5504: LD_INT 44
5506: PUSH
5507: LD_INT 47
5509: PUSH
5510: LD_INT 45
5512: PUSH
5513: LD_INT 46
5515: PUSH
5516: LD_INT 49
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 4
5531: PPUSH
5532: CALL_OW 12
5536: ARRAY
5537: ST_TO_ADDR
// veh = CreateVehicle ;
5538: LD_ADDR_VAR 0 3
5542: PUSH
5543: CALL_OW 45
5547: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5548: LD_VAR 0 3
5552: PPUSH
5553: LD_INT 14
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 49
// end ;
5563: GO 5472
5565: POP
5566: POP
// repeat wait ( 0 0$1 ) ;
5567: LD_INT 35
5569: PPUSH
5570: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5574: LD_ADDR_VAR 0 4
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 6
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 21
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 50
5601: PUSH
5602: EMPTY
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PPUSH
5610: CALL_OW 69
5614: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5615: LD_EXP 1
5619: PPUSH
5620: CALL_OW 310
5624: NOT
5625: IFFALSE 5658
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5627: LD_VAR 0 4
5631: PPUSH
5632: LD_EXP 1
5636: PPUSH
5637: CALL_OW 250
5641: PPUSH
5642: LD_EXP 1
5646: PPUSH
5647: CALL_OW 251
5651: PPUSH
5652: CALL_OW 114
5656: GO 5697
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5658: LD_VAR 0 4
5662: PPUSH
5663: LD_EXP 1
5667: PPUSH
5668: CALL_OW 310
5672: PPUSH
5673: CALL_OW 250
5677: PPUSH
5678: LD_EXP 1
5682: PPUSH
5683: CALL_OW 310
5687: PPUSH
5688: CALL_OW 251
5692: PPUSH
5693: CALL_OW 114
// until vehList = 0 ;
5697: LD_VAR 0 4
5701: PUSH
5702: LD_INT 0
5704: EQUAL
5705: IFFALSE 5567
// end ;
5707: LD_VAR 0 1
5711: RET
// export function PreapreMehBehs ; var i , un ; begin
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
// uc_side = 6 ;
5717: LD_ADDR_OWVAR 20
5721: PUSH
5722: LD_INT 6
5724: ST_TO_ADDR
// uc_nation = 3 ;
5725: LD_ADDR_OWVAR 21
5729: PUSH
5730: LD_INT 3
5732: ST_TO_ADDR
// for i := 1 to 3 do
5733: LD_ADDR_VAR 0 2
5737: PUSH
5738: DOUBLE
5739: LD_INT 1
5741: DEC
5742: ST_TO_ADDR
5743: LD_INT 3
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5818
// begin hc_name =  ;
5749: LD_ADDR_OWVAR 26
5753: PUSH
5754: LD_STRING 
5756: ST_TO_ADDR
// hc_gallery =  ;
5757: LD_ADDR_OWVAR 33
5761: PUSH
5762: LD_STRING 
5764: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5765: LD_INT 0
5767: PPUSH
5768: LD_INT 10
5770: PPUSH
5771: CALL_OW 383
// un = CreateHuman ;
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: CALL_OW 44
5784: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5785: LD_ADDR_EXP 57
5789: PUSH
5790: LD_EXP 57
5794: PUSH
5795: LD_VAR 0 3
5799: ADD
5800: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5801: LD_VAR 0 3
5805: PPUSH
5806: LD_INT 17
5808: PPUSH
5809: LD_INT 0
5811: PPUSH
5812: CALL_OW 49
// end ;
5816: GO 5746
5818: POP
5819: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5820: LD_EXP 36
5824: PPUSH
5825: LD_INT 17
5827: PPUSH
5828: LD_INT 0
5830: PPUSH
5831: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5835: LD_EXP 36
5839: PPUSH
5840: LD_INT 6
5842: PPUSH
5843: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5847: LD_INT 145
5849: PPUSH
5850: LD_INT 6
5852: PPUSH
5853: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5857: LD_EXP 57
5861: PUSH
5862: LD_INT 1
5864: ARRAY
5865: PPUSH
5866: LD_INT 37
5868: PPUSH
5869: LD_INT 193
5871: PPUSH
5872: LD_INT 118
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5882: LD_EXP 57
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: PPUSH
5891: LD_INT 37
5893: PPUSH
5894: LD_INT 204
5896: PPUSH
5897: LD_INT 119
5899: PPUSH
5900: LD_INT 0
5902: PPUSH
5903: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5907: LD_EXP 57
5911: PUSH
5912: LD_INT 3
5914: ARRAY
5915: PPUSH
5916: LD_INT 37
5918: PPUSH
5919: LD_INT 195
5921: PPUSH
5922: LD_INT 126
5924: PPUSH
5925: LD_INT 0
5927: PPUSH
5928: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5932: LD_EXP 57
5936: PUSH
5937: LD_INT 4
5939: ARRAY
5940: PPUSH
5941: LD_INT 37
5943: PPUSH
5944: LD_INT 207
5946: PPUSH
5947: LD_INT 126
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 170
// end ; end_of_file
5957: LD_VAR 0 1
5961: RET
// export function PrepareAlliance ; var i ; begin
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
// uc_side = 7 ;
5966: LD_ADDR_OWVAR 20
5970: PUSH
5971: LD_INT 7
5973: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
5974: LD_ADDR_EXP 28
5978: PUSH
5979: LD_STRING Roth
5981: PPUSH
5982: LD_INT 0
5984: PPUSH
5985: CALL 6607 0 2
5989: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
5990: LD_EXP 28
5994: PPUSH
5995: LD_INT 31
5997: PPUSH
5998: LD_INT 0
6000: PPUSH
6001: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6005: LD_EXP 28
6009: PPUSH
6010: LD_INT 248
6012: PPUSH
6013: LD_INT 187
6015: PPUSH
6016: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6020: LD_STRING 10c_Simms
6022: PPUSH
6023: CALL_OW 28
6027: PUSH
6028: LD_INT 1
6030: EQUAL
6031: IFFALSE 6081
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6033: LD_ADDR_EXP 47
6037: PUSH
6038: LD_STRING 10c_Simms
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: CALL 6607 0 2
6048: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6049: LD_EXP 47
6053: PPUSH
6054: LD_INT 32
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6064: LD_EXP 47
6068: PPUSH
6069: LD_INT 248
6071: PPUSH
6072: LD_INT 187
6074: PPUSH
6075: CALL_OW 118
// end else
6079: GO 6155
// begin uc_nation = 1 ;
6081: LD_ADDR_OWVAR 21
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// hc_name =  ;
6089: LD_ADDR_OWVAR 26
6093: PUSH
6094: LD_STRING 
6096: ST_TO_ADDR
// hc_gallery =  ;
6097: LD_ADDR_OWVAR 33
6101: PUSH
6102: LD_STRING 
6104: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6105: LD_INT 2
6107: PPUSH
6108: LD_INT 10
6110: PPUSH
6111: CALL_OW 384
// Simms = CreateHuman ;
6115: LD_ADDR_EXP 47
6119: PUSH
6120: CALL_OW 44
6124: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6125: LD_EXP 47
6129: PPUSH
6130: LD_INT 32
6132: PPUSH
6133: LD_INT 0
6135: PPUSH
6136: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6140: LD_EXP 47
6144: PPUSH
6145: LD_INT 248
6147: PPUSH
6148: LD_INT 187
6150: PPUSH
6151: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6155: LD_ADDR_EXP 48
6159: PUSH
6160: LD_STRING Scholtze
6162: PPUSH
6163: LD_INT 0
6165: PPUSH
6166: CALL 6607 0 2
6170: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6171: LD_ADDR_EXP 49
6175: PUSH
6176: LD_STRING Kirilenkova
6178: PPUSH
6179: LD_INT 0
6181: PPUSH
6182: CALL 6607 0 2
6186: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6187: LD_ADDR_EXP 50
6191: PUSH
6192: LD_STRING Kapitsova
6194: PPUSH
6195: LD_INT 0
6197: PPUSH
6198: CALL 6607 0 2
6202: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6203: LD_ADDR_EXP 51
6207: PUSH
6208: LD_STRING Karamazov
6210: PPUSH
6211: LD_INT 0
6213: PPUSH
6214: CALL 6607 0 2
6218: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6219: LD_EXP 48
6223: PPUSH
6224: LD_INT 39
6226: PPUSH
6227: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 133
6238: PPUSH
6239: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6243: LD_EXP 50
6247: PPUSH
6248: LD_INT 133
6250: PPUSH
6251: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6255: LD_EXP 51
6259: PPUSH
6260: LD_INT 45
6262: PPUSH
6263: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6267: LD_INT 7
6269: PPUSH
6270: LD_INT 1
6272: PPUSH
6273: LD_INT 45
6275: PPUSH
6276: LD_INT 10
6278: PPUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_INT 2
6284: PPUSH
6285: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6289: LD_INT 7
6291: PPUSH
6292: LD_INT 3
6294: PPUSH
6295: LD_INT 45
6297: PPUSH
6298: LD_INT 10
6300: PPUSH
6301: LD_INT 2
6303: PPUSH
6304: LD_INT 2
6306: PPUSH
6307: CALL 7725 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6311: LD_INT 7
6313: PPUSH
6314: LD_INT 1
6316: PPUSH
6317: LD_INT 194
6319: PPUSH
6320: LD_INT 10
6322: PPUSH
6323: LD_INT 5
6325: PPUSH
6326: LD_INT 4
6328: PPUSH
6329: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6333: LD_INT 7
6335: PPUSH
6336: LD_INT 3
6338: PPUSH
6339: LD_INT 194
6341: PPUSH
6342: LD_INT 10
6344: PPUSH
6345: LD_INT 8
6347: PPUSH
6348: LD_INT 6
6350: PPUSH
6351: CALL 7725 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6355: LD_INT 7
6357: PPUSH
6358: LD_INT 1
6360: PPUSH
6361: LD_INT 156
6363: PPUSH
6364: LD_INT 10
6366: PPUSH
6367: LD_INT 3
6369: PPUSH
6370: LD_INT 6
6372: PPUSH
6373: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6377: LD_INT 7
6379: PPUSH
6380: LD_INT 3
6382: PPUSH
6383: LD_INT 162
6385: PPUSH
6386: LD_INT 10
6388: PPUSH
6389: LD_INT 3
6391: PPUSH
6392: LD_INT 6
6394: PPUSH
6395: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6399: LD_INT 7
6401: PPUSH
6402: LD_INT 3
6404: PPUSH
6405: LD_INT 39
6407: PPUSH
6408: LD_INT 10
6410: PPUSH
6411: LD_INT 4
6413: PPUSH
6414: LD_INT 3
6416: PPUSH
6417: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6421: LD_INT 7
6423: PPUSH
6424: LD_INT 3
6426: PPUSH
6427: LD_INT 133
6429: PPUSH
6430: LD_INT 10
6432: PPUSH
6433: LD_INT 4
6435: PPUSH
6436: LD_INT 2
6438: PPUSH
6439: CALL 7725 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6443: LD_INT 7
6445: PPUSH
6446: LD_INT 1
6448: PPUSH
6449: LD_INT 46
6451: PPUSH
6452: LD_INT 10
6454: PPUSH
6455: LD_INT 4
6457: PPUSH
6458: LD_INT 2
6460: PPUSH
6461: CALL 7725 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: LD_INT 22
6472: PUSH
6473: LD_INT 7
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 21
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 30
6492: PUSH
6493: LD_INT 32
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 58
6502: PUSH
6503: EMPTY
6504: LIST
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PUSH
6517: FOR_IN
6518: IFFALSE 6565
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6520: LD_INT 7
6522: PPUSH
6523: LD_INT 1
6525: PUSH
6526: LD_INT 3
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 1
6535: PPUSH
6536: LD_INT 2
6538: PPUSH
6539: CALL_OW 12
6543: ARRAY
6544: PPUSH
6545: LD_VAR 0 2
6549: PPUSH
6550: LD_INT 10
6552: PPUSH
6553: LD_INT 1
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: CALL 7725 0 6
6563: GO 6517
6565: POP
6566: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6567: LD_INT 7
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 226
6575: PPUSH
6576: LD_INT 10
6578: PPUSH
6579: LD_INT 3
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL 7725 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6589: LD_ADDR_EXP 62
6593: PUSH
6594: LD_INT 226
6596: PPUSH
6597: CALL_OW 313
6601: ST_TO_ADDR
// end ; end_of_file
6602: LD_VAR 0 1
6606: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6607: LD_INT 0
6609: PPUSH
6610: PPUSH
// if exist_mode then
6611: LD_VAR 0 2
6615: IFFALSE 6634
// unit := CreateCharacter ( ident ) else
6617: LD_ADDR_VAR 0 4
6621: PUSH
6622: LD_VAR 0 1
6626: PPUSH
6627: CALL_OW 34
6631: ST_TO_ADDR
6632: GO 6649
// unit := NewCharacter ( ident ) ;
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 25
6648: ST_TO_ADDR
// result := unit ;
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_VAR 0 4
6658: ST_TO_ADDR
// end ;
6659: LD_VAR 0 3
6663: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6668: LD_STRING 13s_
6670: PUSH
6671: LD_VAR 0 1
6675: STR
6676: PPUSH
6677: CALL_OW 28
6681: PUSH
6682: LD_INT 1
6684: EQUAL
6685: IFFALSE 6706
// unit = CreateCharacter ( 13s_ & ident ) ;
6687: LD_ADDR_VAR 0 3
6691: PUSH
6692: LD_STRING 13s_
6694: PUSH
6695: LD_VAR 0 1
6699: STR
6700: PPUSH
6701: CALL_OW 34
6705: ST_TO_ADDR
// result := unit ;
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_VAR 0 3
6715: ST_TO_ADDR
// end ;
6716: LD_VAR 0 2
6720: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6721: LD_INT 0
6723: PPUSH
6724: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6725: LD_STRING 15_
6727: PUSH
6728: LD_VAR 0 1
6732: STR
6733: PPUSH
6734: CALL_OW 28
6738: PUSH
6739: LD_INT 1
6741: EQUAL
6742: IFFALSE 6779
// begin unit = CreateCharacter ( 15_ & ident ) ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_STRING 15_
6751: PUSH
6752: LD_VAR 0 1
6756: STR
6757: PPUSH
6758: CALL_OW 34
6762: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6763: LD_ADDR_EXP 20
6767: PUSH
6768: LD_EXP 20
6772: PUSH
6773: LD_VAR 0 3
6777: ADD
6778: ST_TO_ADDR
// end ; result := unit ;
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_VAR 0 3
6788: ST_TO_ADDR
// end ;
6789: LD_VAR 0 2
6793: RET
// export function TabLenght ( tab ) ; var i ; begin
6794: LD_INT 0
6796: PPUSH
6797: PPUSH
// for i = 1 to tab do
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: DOUBLE
6804: LD_INT 1
6806: DEC
6807: ST_TO_ADDR
6808: LD_VAR 0 1
6812: PUSH
6813: FOR_TO
6814: IFFALSE 6828
// result = i ;
6816: LD_ADDR_VAR 0 2
6820: PUSH
6821: LD_VAR 0 3
6825: ST_TO_ADDR
6826: GO 6813
6828: POP
6829: POP
// end ;
6830: LD_VAR 0 2
6834: RET
// export function Video ( mode ) ; begin
6835: LD_INT 0
6837: PPUSH
// if mode = true then
6838: LD_VAR 0 1
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: IFFALSE 6866
// begin ingame_video = true ;
6848: LD_ADDR_OWVAR 52
6852: PUSH
6853: LD_INT 1
6855: ST_TO_ADDR
// interface_hidden = true ;
6856: LD_ADDR_OWVAR 54
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// end else
6864: GO 6882
// begin ingame_video = false ;
6866: LD_ADDR_OWVAR 52
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// interface_hidden = false ;
6874: LD_ADDR_OWVAR 54
6878: PUSH
6879: LD_INT 0
6881: ST_TO_ADDR
// end ; end ;
6882: LD_VAR 0 2
6886: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6887: LD_INT 0
6889: PPUSH
6890: PPUSH
6891: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6892: LD_ADDR_VAR 0 1
6896: PUSH
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 1
6906: PUSH
6907: LD_EXP 3
6911: PUSH
6912: LD_EXP 21
6916: PUSH
6917: LD_EXP 22
6921: PUSH
6922: LD_EXP 23
6926: PUSH
6927: LD_EXP 4
6931: PUSH
6932: LD_EXP 5
6936: PUSH
6937: LD_EXP 6
6941: PUSH
6942: LD_EXP 7
6946: PUSH
6947: LD_EXP 8
6951: PUSH
6952: LD_EXP 9
6956: PUSH
6957: LD_EXP 10
6961: PUSH
6962: LD_EXP 11
6966: PUSH
6967: LD_EXP 12
6971: PUSH
6972: LD_EXP 13
6976: PUSH
6977: LD_EXP 14
6981: PUSH
6982: LD_EXP 15
6986: PUSH
6987: LD_EXP 17
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: DIFF
7012: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7013: LD_ADDR_VAR 0 6
7017: PUSH
7018: LD_INT 1
7020: PPUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 12
7030: ST_TO_ADDR
// for i = 1 to characters do
7031: LD_ADDR_VAR 0 5
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_VAR 0 1
7045: PUSH
7046: FOR_TO
7047: IFFALSE 7157
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7049: LD_VAR 0 5
7053: PUSH
7054: LD_VAR 0 6
7058: EQUAL
7059: PUSH
7060: LD_VAR 0 1
7064: PUSH
7065: LD_VAR 0 5
7069: ARRAY
7070: PPUSH
7071: CALL_OW 258
7075: PUSH
7076: LD_INT 1
7078: EQUAL
7079: AND
7080: IFFALSE 7102
// Say ( characters [ i ] , dialogMID ) ;
7082: LD_VAR 0 1
7086: PUSH
7087: LD_VAR 0 5
7091: ARRAY
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7102: LD_VAR 0 5
7106: PUSH
7107: LD_VAR 0 6
7111: EQUAL
7112: PUSH
7113: LD_VAR 0 1
7117: PUSH
7118: LD_VAR 0 5
7122: ARRAY
7123: PPUSH
7124: CALL_OW 258
7128: PUSH
7129: LD_INT 2
7131: EQUAL
7132: AND
7133: IFFALSE 7155
// Say ( characters [ i ] , dialogFID ) ;
7135: LD_VAR 0 1
7139: PUSH
7140: LD_VAR 0 5
7144: ARRAY
7145: PPUSH
7146: LD_VAR 0 3
7150: PPUSH
7151: CALL_OW 88
// end ;
7155: GO 7046
7157: POP
7158: POP
// end ;
7159: LD_VAR 0 4
7163: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7164: LD_INT 0
7166: PPUSH
7167: PPUSH
7168: PPUSH
7169: PPUSH
// if not list then
7170: LD_VAR 0 1
7174: NOT
7175: IFFALSE 7179
// exit ;
7177: GO 7526
// result := [ ] ;
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: EMPTY
7185: ST_TO_ADDR
// for i in list do
7186: LD_ADDR_VAR 0 4
7190: PUSH
7191: LD_VAR 0 1
7195: PUSH
7196: FOR_IN
7197: IFFALSE 7438
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7199: LD_ADDR_VAR 0 6
7203: PUSH
7204: LD_VAR 0 4
7208: PPUSH
7209: LD_INT 1
7211: PPUSH
7212: CALL_OW 259
7216: PUSH
7217: LD_VAR 0 4
7221: PPUSH
7222: LD_INT 2
7224: PPUSH
7225: CALL_OW 259
7229: PLUS
7230: PUSH
7231: LD_VAR 0 4
7235: PPUSH
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 259
7243: PLUS
7244: PUSH
7245: LD_VAR 0 4
7249: PPUSH
7250: LD_INT 4
7252: PPUSH
7253: CALL_OW 259
7257: PLUS
7258: PUSH
7259: LD_INT 4
7261: DIV
7262: ST_TO_ADDR
// if not result then
7263: LD_VAR 0 3
7267: NOT
7268: IFFALSE 7294
// result := [ [ i , tmp ] ] else
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_VAR 0 4
7279: PUSH
7280: LD_VAR 0 6
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: ST_TO_ADDR
7292: GO 7436
// begin if result [ result ] [ 2 ] <= tmp then
7294: LD_VAR 0 3
7298: PUSH
7299: LD_VAR 0 3
7303: ARRAY
7304: PUSH
7305: LD_INT 2
7307: ARRAY
7308: PUSH
7309: LD_VAR 0 6
7313: LESSEQUAL
7314: IFFALSE 7356
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7316: LD_ADDR_VAR 0 3
7320: PUSH
7321: LD_VAR 0 3
7325: PPUSH
7326: LD_VAR 0 3
7330: PUSH
7331: LD_INT 1
7333: PLUS
7334: PPUSH
7335: LD_VAR 0 4
7339: PUSH
7340: LD_VAR 0 6
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PPUSH
7349: CALL_OW 2
7353: ST_TO_ADDR
7354: GO 7436
// for j = 1 to result do
7356: LD_ADDR_VAR 0 5
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_VAR 0 3
7370: PUSH
7371: FOR_TO
7372: IFFALSE 7434
// begin if tmp < result [ j ] [ 2 ] then
7374: LD_VAR 0 6
7378: PUSH
7379: LD_VAR 0 3
7383: PUSH
7384: LD_VAR 0 5
7388: ARRAY
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: LESS
7394: IFFALSE 7432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7396: LD_ADDR_VAR 0 3
7400: PUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: LD_VAR 0 5
7410: PPUSH
7411: LD_VAR 0 4
7415: PUSH
7416: LD_VAR 0 6
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 2
7429: ST_TO_ADDR
// break ;
7430: GO 7434
// end ; end ;
7432: GO 7371
7434: POP
7435: POP
// end ; end ;
7436: GO 7196
7438: POP
7439: POP
// if result and not asc then
7440: LD_VAR 0 3
7444: PUSH
7445: LD_VAR 0 2
7449: NOT
7450: AND
7451: IFFALSE 7526
// begin tmp := result ;
7453: LD_ADDR_VAR 0 6
7457: PUSH
7458: LD_VAR 0 3
7462: ST_TO_ADDR
// for i = tmp downto 1 do
7463: LD_ADDR_VAR 0 4
7467: PUSH
7468: DOUBLE
7469: LD_VAR 0 6
7473: INC
7474: ST_TO_ADDR
7475: LD_INT 1
7477: PUSH
7478: FOR_DOWNTO
7479: IFFALSE 7524
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7481: LD_ADDR_VAR 0 3
7485: PUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 6
7495: PUSH
7496: LD_VAR 0 4
7500: MINUS
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: PPUSH
7506: LD_VAR 0 6
7510: PUSH
7511: LD_VAR 0 4
7515: ARRAY
7516: PPUSH
7517: CALL_OW 1
7521: ST_TO_ADDR
7522: GO 7478
7524: POP
7525: POP
// end ; end ;
7526: LD_VAR 0 3
7530: RET
// export function PrepareDifficulty ; begin
7531: LD_INT 0
7533: PPUSH
// if difficulty = 1 then
7534: LD_OWVAR 67
7538: PUSH
7539: LD_INT 1
7541: EQUAL
7542: IFFALSE 7570
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7544: LD_INT 51
7546: PPUSH
7547: LD_INT 6
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7557: LD_INT 57
7559: PPUSH
7560: LD_INT 6
7562: PPUSH
7563: LD_INT 2
7565: PPUSH
7566: CALL_OW 322
// end ; if difficulty = 2 then
7570: LD_OWVAR 67
7574: PUSH
7575: LD_INT 2
7577: EQUAL
7578: IFFALSE 7632
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7580: LD_INT 51
7582: PPUSH
7583: LD_INT 6
7585: PPUSH
7586: LD_INT 2
7588: PPUSH
7589: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7593: LD_INT 57
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: LD_INT 2
7601: PPUSH
7602: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7606: LD_INT 52
7608: PPUSH
7609: LD_INT 6
7611: PPUSH
7612: LD_INT 2
7614: PPUSH
7615: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7619: LD_INT 58
7621: PPUSH
7622: LD_INT 6
7624: PPUSH
7625: LD_INT 2
7627: PPUSH
7628: CALL_OW 322
// end ; if difficulty = 3 then
7632: LD_OWVAR 67
7636: PUSH
7637: LD_INT 3
7639: EQUAL
7640: IFFALSE 7720
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7642: LD_INT 51
7644: PPUSH
7645: LD_INT 6
7647: PPUSH
7648: LD_INT 2
7650: PPUSH
7651: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7655: LD_INT 57
7657: PPUSH
7658: LD_INT 6
7660: PPUSH
7661: LD_INT 2
7663: PPUSH
7664: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7668: LD_INT 52
7670: PPUSH
7671: LD_INT 6
7673: PPUSH
7674: LD_INT 2
7676: PPUSH
7677: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7681: LD_INT 58
7683: PPUSH
7684: LD_INT 6
7686: PPUSH
7687: LD_INT 2
7689: PPUSH
7690: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7694: LD_INT 53
7696: PPUSH
7697: LD_INT 6
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7707: LD_INT 59
7709: PPUSH
7710: LD_INT 6
7712: PPUSH
7713: LD_INT 2
7715: PPUSH
7716: CALL_OW 322
// end ; end ;
7720: LD_VAR 0 1
7724: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7725: LD_INT 0
7727: PPUSH
7728: PPUSH
7729: PPUSH
7730: PPUSH
7731: PPUSH
// for i = 1 to count do
7732: LD_ADDR_VAR 0 8
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 6
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7829
// begin uc_side = side ;
7750: LD_ADDR_OWVAR 20
7754: PUSH
7755: LD_VAR 0 1
7759: ST_TO_ADDR
// uc_nation = nation ;
7760: LD_ADDR_OWVAR 21
7764: PUSH
7765: LD_VAR 0 2
7769: ST_TO_ADDR
// hc_gallery =  ;
7770: LD_ADDR_OWVAR 33
7774: PUSH
7775: LD_STRING 
7777: ST_TO_ADDR
// hc_name =  ;
7778: LD_ADDR_OWVAR 26
7782: PUSH
7783: LD_STRING 
7785: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7786: LD_INT 0
7788: PPUSH
7789: LD_VAR 0 5
7793: PPUSH
7794: LD_VAR 0 4
7798: PPUSH
7799: CALL_OW 380
// un = CreateHuman ;
7803: LD_ADDR_VAR 0 10
7807: PUSH
7808: CALL_OW 44
7812: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7813: LD_VAR 0 10
7817: PPUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 52
// end ;
7827: GO 7747
7829: POP
7830: POP
// end ;
7831: LD_VAR 0 7
7835: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7836: LD_INT 0
7838: PPUSH
7839: PPUSH
7840: PPUSH
7841: PPUSH
7842: PPUSH
7843: PPUSH
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7849: LD_INT 2100
7851: PUSH
7852: LD_INT 3150
7854: PUSH
7855: LD_INT 4200
7857: PUSH
7858: LD_INT 5250
7860: PUSH
7861: LD_INT 6300
7863: PUSH
7864: LD_INT 7350
7866: PUSH
7867: LD_INT 8400
7869: PUSH
7870: LD_INT 9450
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 1
7885: PPUSH
7886: LD_INT 8
7888: PPUSH
7889: CALL_OW 12
7893: ARRAY
7894: PPUSH
7895: CALL_OW 67
// amChassisTab = [ ] ;
7899: LD_ADDR_VAR 0 19
7903: PUSH
7904: EMPTY
7905: ST_TO_ADDR
// arChassisTab = [ ] ;
7906: LD_ADDR_VAR 0 18
7910: PUSH
7911: EMPTY
7912: ST_TO_ADDR
// ruChassisTab = [ ] ;
7913: LD_ADDR_VAR 0 17
7917: PUSH
7918: EMPTY
7919: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7920: LD_INT 35
7922: PPUSH
7923: CALL_OW 67
// if nation = 1 then
7927: LD_VAR 0 5
7931: PUSH
7932: LD_INT 1
7934: EQUAL
7935: IFFALSE 8426
// begin uc_side = side ;
7937: LD_ADDR_OWVAR 20
7941: PUSH
7942: LD_VAR 0 2
7946: ST_TO_ADDR
// uc_nation = nation ;
7947: LD_ADDR_OWVAR 21
7951: PUSH
7952: LD_VAR 0 5
7956: ST_TO_ADDR
// vc_engine = vehengine ;
7957: LD_ADDR_OWVAR 39
7961: PUSH
7962: LD_VAR 0 6
7966: ST_TO_ADDR
// vc_control = vehcontrol ;
7967: LD_ADDR_OWVAR 38
7971: PUSH
7972: LD_VAR 0 7
7976: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7977: LD_ADDR_OWVAR 40
7981: PUSH
7982: LD_VAR 0 10
7986: PUSH
7987: LD_INT 1
7989: PPUSH
7990: LD_VAR 0 10
7994: PPUSH
7995: CALL_OW 12
7999: ARRAY
8000: ST_TO_ADDR
// for j = 1 to AMWeapon do
8001: LD_ADDR_VAR 0 14
8005: PUSH
8006: DOUBLE
8007: LD_INT 1
8009: DEC
8010: ST_TO_ADDR
8011: LD_VAR 0 10
8015: PUSH
8016: FOR_TO
8017: IFFALSE 8318
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8019: LD_VAR 0 10
8023: PUSH
8024: LD_VAR 0 14
8028: ARRAY
8029: PUSH
8030: LD_INT 2
8032: EQUAL
8033: PUSH
8034: LD_VAR 0 10
8038: PUSH
8039: LD_VAR 0 14
8043: ARRAY
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: OR
8049: IFFALSE 8102
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8051: LD_ADDR_VAR 0 19
8055: PUSH
8056: LD_INT 1
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 3
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: LD_INT 5
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8078: LD_ADDR_OWVAR 37
8082: PUSH
8083: LD_VAR 0 19
8087: PUSH
8088: LD_INT 1
8090: PPUSH
8091: LD_VAR 0 19
8095: PPUSH
8096: CALL_OW 12
8100: ARRAY
8101: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8102: LD_VAR 0 10
8106: PUSH
8107: LD_VAR 0 14
8111: ARRAY
8112: PUSH
8113: LD_INT 4
8115: EQUAL
8116: PUSH
8117: LD_VAR 0 10
8121: PUSH
8122: LD_VAR 0 14
8126: ARRAY
8127: PUSH
8128: LD_INT 5
8130: EQUAL
8131: OR
8132: PUSH
8133: LD_VAR 0 10
8137: PUSH
8138: LD_VAR 0 14
8142: ARRAY
8143: PUSH
8144: LD_INT 9
8146: EQUAL
8147: OR
8148: PUSH
8149: LD_VAR 0 10
8153: PUSH
8154: LD_VAR 0 14
8158: ARRAY
8159: PUSH
8160: LD_INT 11
8162: EQUAL
8163: OR
8164: PUSH
8165: LD_VAR 0 10
8169: PUSH
8170: LD_VAR 0 14
8174: ARRAY
8175: PUSH
8176: LD_INT 7
8178: EQUAL
8179: OR
8180: IFFALSE 8229
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8182: LD_ADDR_VAR 0 19
8186: PUSH
8187: LD_INT 2
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 4
8195: PUSH
8196: LD_INT 5
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8205: LD_ADDR_OWVAR 37
8209: PUSH
8210: LD_VAR 0 19
8214: PUSH
8215: LD_INT 1
8217: PPUSH
8218: LD_VAR 0 19
8222: PPUSH
8223: CALL_OW 12
8227: ARRAY
8228: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8229: LD_VAR 0 10
8233: PUSH
8234: LD_VAR 0 14
8238: ARRAY
8239: PUSH
8240: LD_INT 8
8242: EQUAL
8243: PUSH
8244: LD_VAR 0 10
8248: PUSH
8249: LD_VAR 0 14
8253: ARRAY
8254: PUSH
8255: LD_INT 6
8257: EQUAL
8258: OR
8259: PUSH
8260: LD_VAR 0 10
8264: PUSH
8265: LD_VAR 0 14
8269: ARRAY
8270: PUSH
8271: LD_INT 10
8273: EQUAL
8274: OR
8275: IFFALSE 8316
// begin amChassisTab = [ 4 , 5 ] ;
8277: LD_ADDR_VAR 0 19
8281: PUSH
8282: LD_INT 4
8284: PUSH
8285: LD_INT 5
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8292: LD_ADDR_OWVAR 37
8296: PUSH
8297: LD_VAR 0 19
8301: PUSH
8302: LD_INT 1
8304: PPUSH
8305: LD_VAR 0 19
8309: PPUSH
8310: CALL_OW 12
8314: ARRAY
8315: ST_TO_ADDR
// end ; end ;
8316: GO 8016
8318: POP
8319: POP
// veh = CreateVehicle ;
8320: LD_ADDR_VAR 0 16
8324: PUSH
8325: CALL_OW 45
8329: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8330: LD_VAR 0 16
8334: PPUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: LD_INT 0
8342: PPUSH
8343: CALL_OW 49
// if vc_control = 1 then
8347: LD_OWVAR 38
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8412
// begin hc_gallery =  ;
8357: LD_ADDR_OWVAR 33
8361: PUSH
8362: LD_STRING 
8364: ST_TO_ADDR
// hc_name =  ;
8365: LD_ADDR_OWVAR 26
8369: PUSH
8370: LD_STRING 
8372: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8373: LD_INT 0
8375: PPUSH
8376: LD_INT 3
8378: PPUSH
8379: LD_VAR 0 4
8383: PPUSH
8384: CALL_OW 380
// un = CreateHuman ;
8388: LD_ADDR_VAR 0 15
8392: PUSH
8393: CALL_OW 44
8397: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8398: LD_VAR 0 15
8402: PPUSH
8403: LD_VAR 0 16
8407: PPUSH
8408: CALL_OW 52
// end ; i = i + 1 ;
8412: LD_ADDR_VAR 0 13
8416: PUSH
8417: LD_VAR 0 13
8421: PUSH
8422: LD_INT 1
8424: PLUS
8425: ST_TO_ADDR
// end ; if nation = 2 then
8426: LD_VAR 0 5
8430: PUSH
8431: LD_INT 2
8433: EQUAL
8434: IFFALSE 8858
// begin uc_side = side ;
8436: LD_ADDR_OWVAR 20
8440: PUSH
8441: LD_VAR 0 2
8445: ST_TO_ADDR
// uc_nation = nation ;
8446: LD_ADDR_OWVAR 21
8450: PUSH
8451: LD_VAR 0 5
8455: ST_TO_ADDR
// vc_engine = vehengine ;
8456: LD_ADDR_OWVAR 39
8460: PUSH
8461: LD_VAR 0 6
8465: ST_TO_ADDR
// vc_control = vehcontrol ;
8466: LD_ADDR_OWVAR 38
8470: PUSH
8471: LD_VAR 0 7
8475: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8476: LD_ADDR_OWVAR 40
8480: PUSH
8481: LD_VAR 0 9
8485: PUSH
8486: LD_INT 1
8488: PPUSH
8489: LD_VAR 0 9
8493: PPUSH
8494: CALL_OW 12
8498: ARRAY
8499: ST_TO_ADDR
// for j = 1 to ARWeapons do
8500: LD_ADDR_VAR 0 14
8504: PUSH
8505: DOUBLE
8506: LD_INT 1
8508: DEC
8509: ST_TO_ADDR
8510: LD_VAR 0 9
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8750
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8518: LD_VAR 0 9
8522: PUSH
8523: LD_VAR 0 14
8527: ARRAY
8528: PUSH
8529: LD_INT 24
8531: EQUAL
8532: PUSH
8533: LD_VAR 0 9
8537: PUSH
8538: LD_VAR 0 14
8542: ARRAY
8543: PUSH
8544: LD_INT 22
8546: EQUAL
8547: OR
8548: PUSH
8549: LD_VAR 0 9
8553: PUSH
8554: LD_VAR 0 14
8558: ARRAY
8559: PUSH
8560: LD_INT 23
8562: EQUAL
8563: OR
8564: PUSH
8565: LD_VAR 0 9
8569: PUSH
8570: LD_VAR 0 14
8574: ARRAY
8575: PUSH
8576: LD_INT 30
8578: EQUAL
8579: OR
8580: IFFALSE 8629
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8582: LD_ADDR_VAR 0 18
8586: PUSH
8587: LD_INT 11
8589: PUSH
8590: LD_INT 12
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8605: LD_ADDR_OWVAR 37
8609: PUSH
8610: LD_VAR 0 18
8614: PUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_VAR 0 18
8622: PPUSH
8623: CALL_OW 12
8627: ARRAY
8628: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8629: LD_VAR 0 9
8633: PUSH
8634: LD_VAR 0 14
8638: ARRAY
8639: PUSH
8640: LD_INT 29
8642: EQUAL
8643: PUSH
8644: LD_VAR 0 9
8648: PUSH
8649: LD_VAR 0 14
8653: ARRAY
8654: PUSH
8655: LD_INT 28
8657: EQUAL
8658: OR
8659: PUSH
8660: LD_VAR 0 9
8664: PUSH
8665: LD_VAR 0 14
8669: ARRAY
8670: PUSH
8671: LD_INT 27
8673: EQUAL
8674: OR
8675: PUSH
8676: LD_VAR 0 9
8680: PUSH
8681: LD_VAR 0 14
8685: ARRAY
8686: PUSH
8687: LD_INT 26
8689: EQUAL
8690: OR
8691: PUSH
8692: LD_VAR 0 9
8696: PUSH
8697: LD_VAR 0 14
8701: ARRAY
8702: PUSH
8703: LD_INT 25
8705: EQUAL
8706: OR
8707: IFFALSE 8748
// begin arChassisTab = [ 13 , 14 ] ;
8709: LD_ADDR_VAR 0 18
8713: PUSH
8714: LD_INT 13
8716: PUSH
8717: LD_INT 14
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8724: LD_ADDR_OWVAR 37
8728: PUSH
8729: LD_VAR 0 18
8733: PUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_VAR 0 18
8741: PPUSH
8742: CALL_OW 12
8746: ARRAY
8747: ST_TO_ADDR
// end ; end ;
8748: GO 8515
8750: POP
8751: POP
// veh = CreateVehicle ;
8752: LD_ADDR_VAR 0 16
8756: PUSH
8757: CALL_OW 45
8761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8762: LD_VAR 0 16
8766: PPUSH
8767: LD_VAR 0 1
8771: PPUSH
8772: LD_INT 0
8774: PPUSH
8775: CALL_OW 49
// if vc_control = 1 then
8779: LD_OWVAR 38
8783: PUSH
8784: LD_INT 1
8786: EQUAL
8787: IFFALSE 8844
// begin hc_gallery =  ;
8789: LD_ADDR_OWVAR 33
8793: PUSH
8794: LD_STRING 
8796: ST_TO_ADDR
// hc_name =  ;
8797: LD_ADDR_OWVAR 26
8801: PUSH
8802: LD_STRING 
8804: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8805: LD_INT 0
8807: PPUSH
8808: LD_INT 3
8810: PPUSH
8811: LD_VAR 0 4
8815: PPUSH
8816: CALL_OW 380
// un = CreateHuman ;
8820: LD_ADDR_VAR 0 15
8824: PUSH
8825: CALL_OW 44
8829: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8830: LD_VAR 0 15
8834: PPUSH
8835: LD_VAR 0 16
8839: PPUSH
8840: CALL_OW 52
// end ; i = i + 1 ;
8844: LD_ADDR_VAR 0 13
8848: PUSH
8849: LD_VAR 0 13
8853: PUSH
8854: LD_INT 1
8856: PLUS
8857: ST_TO_ADDR
// end ; if nation = 3 then
8858: LD_VAR 0 5
8862: PUSH
8863: LD_INT 3
8865: EQUAL
8866: IFFALSE 9242
// begin uc_side = side ;
8868: LD_ADDR_OWVAR 20
8872: PUSH
8873: LD_VAR 0 2
8877: ST_TO_ADDR
// uc_nation = nation ;
8878: LD_ADDR_OWVAR 21
8882: PUSH
8883: LD_VAR 0 5
8887: ST_TO_ADDR
// vc_engine = vehengine ;
8888: LD_ADDR_OWVAR 39
8892: PUSH
8893: LD_VAR 0 6
8897: ST_TO_ADDR
// vc_control = vehcontrol ;
8898: LD_ADDR_OWVAR 38
8902: PUSH
8903: LD_VAR 0 7
8907: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8908: LD_ADDR_OWVAR 40
8912: PUSH
8913: LD_VAR 0 8
8917: PUSH
8918: LD_INT 1
8920: PPUSH
8921: LD_VAR 0 8
8925: PPUSH
8926: CALL_OW 12
8930: ARRAY
8931: ST_TO_ADDR
// for j = 1 to RuWeapons do
8932: LD_ADDR_VAR 0 14
8936: PUSH
8937: DOUBLE
8938: LD_INT 1
8940: DEC
8941: ST_TO_ADDR
8942: LD_VAR 0 8
8946: PUSH
8947: FOR_TO
8948: IFFALSE 9134
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8950: LD_VAR 0 8
8954: PUSH
8955: LD_VAR 0 14
8959: ARRAY
8960: PUSH
8961: LD_INT 42
8963: EQUAL
8964: PUSH
8965: LD_VAR 0 8
8969: PUSH
8970: LD_VAR 0 14
8974: ARRAY
8975: PUSH
8976: LD_INT 43
8978: EQUAL
8979: OR
8980: PUSH
8981: LD_VAR 0 8
8985: PUSH
8986: LD_VAR 0 14
8990: ARRAY
8991: PUSH
8992: LD_INT 44
8994: EQUAL
8995: OR
8996: PUSH
8997: LD_VAR 0 8
9001: PUSH
9002: LD_VAR 0 14
9006: ARRAY
9007: PUSH
9008: LD_INT 45
9010: EQUAL
9011: OR
9012: PUSH
9013: LD_VAR 0 8
9017: PUSH
9018: LD_VAR 0 14
9022: ARRAY
9023: PUSH
9024: LD_INT 49
9026: EQUAL
9027: OR
9028: IFFALSE 9065
// begin ruChassisTab = [ 24 ] ;
9030: LD_ADDR_VAR 0 17
9034: PUSH
9035: LD_INT 24
9037: PUSH
9038: EMPTY
9039: LIST
9040: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9041: LD_ADDR_OWVAR 37
9045: PUSH
9046: LD_VAR 0 17
9050: PUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 17
9058: PPUSH
9059: CALL_OW 12
9063: ARRAY
9064: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9065: LD_VAR 0 8
9069: PUSH
9070: LD_VAR 0 14
9074: ARRAY
9075: PUSH
9076: LD_INT 46
9078: EQUAL
9079: PUSH
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 14
9089: ARRAY
9090: PUSH
9091: LD_INT 47
9093: EQUAL
9094: OR
9095: IFFALSE 9132
// begin ruChassisTab = [ 24 ] ;
9097: LD_ADDR_VAR 0 17
9101: PUSH
9102: LD_INT 24
9104: PUSH
9105: EMPTY
9106: LIST
9107: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9108: LD_ADDR_OWVAR 37
9112: PUSH
9113: LD_VAR 0 17
9117: PUSH
9118: LD_INT 1
9120: PPUSH
9121: LD_VAR 0 17
9125: PPUSH
9126: CALL_OW 12
9130: ARRAY
9131: ST_TO_ADDR
// end ; end ;
9132: GO 8947
9134: POP
9135: POP
// veh = CreateVehicle ;
9136: LD_ADDR_VAR 0 16
9140: PUSH
9141: CALL_OW 45
9145: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9146: LD_VAR 0 16
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: LD_INT 0
9158: PPUSH
9159: CALL_OW 49
// if vc_control = 1 then
9163: LD_OWVAR 38
9167: PUSH
9168: LD_INT 1
9170: EQUAL
9171: IFFALSE 9228
// begin hc_gallery =  ;
9173: LD_ADDR_OWVAR 33
9177: PUSH
9178: LD_STRING 
9180: ST_TO_ADDR
// hc_name =  ;
9181: LD_ADDR_OWVAR 26
9185: PUSH
9186: LD_STRING 
9188: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9189: LD_INT 0
9191: PPUSH
9192: LD_INT 3
9194: PPUSH
9195: LD_VAR 0 4
9199: PPUSH
9200: CALL_OW 380
// un = CreateHuman ;
9204: LD_ADDR_VAR 0 15
9208: PUSH
9209: CALL_OW 44
9213: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9214: LD_VAR 0 15
9218: PPUSH
9219: LD_VAR 0 16
9223: PPUSH
9224: CALL_OW 52
// end ; i = i + 1 ;
9228: LD_ADDR_VAR 0 13
9232: PUSH
9233: LD_VAR 0 13
9237: PUSH
9238: LD_INT 1
9240: PLUS
9241: ST_TO_ADDR
// end ; until i = vehCount ;
9242: LD_VAR 0 13
9246: PUSH
9247: LD_VAR 0 3
9251: EQUAL
9252: IFFALSE 7920
// repeat wait ( 0 0$1 ) ;
9254: LD_INT 35
9256: PPUSH
9257: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9261: LD_ADDR_VAR 0 20
9265: PUSH
9266: LD_INT 22
9268: PUSH
9269: LD_VAR 0 2
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 21
9280: PUSH
9281: LD_INT 2
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 24
9290: PUSH
9291: LD_INT 250
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 69
9307: ST_TO_ADDR
// if vehicleOK_list > 0 then
9308: LD_VAR 0 20
9312: PUSH
9313: LD_INT 0
9315: GREATER
9316: IFFALSE 9507
// begin for i in vehicleOK_list do
9318: LD_ADDR_VAR 0 13
9322: PUSH
9323: LD_VAR 0 20
9327: PUSH
9328: FOR_IN
9329: IFFALSE 9505
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9331: LD_ADDR_VAR 0 21
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_VAR 0 11
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 69
9352: PPUSH
9353: LD_VAR 0 13
9357: PPUSH
9358: CALL_OW 74
9362: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9363: LD_ADDR_VAR 0 22
9367: PUSH
9368: LD_INT 22
9370: PUSH
9371: LD_VAR 0 11
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: LD_INT 59
9385: PUSH
9386: EMPTY
9387: LIST
9388: PUSH
9389: LD_INT 21
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 21
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: PPUSH
9422: CALL_OW 69
9426: PPUSH
9427: LD_VAR 0 13
9431: PPUSH
9432: CALL_OW 74
9436: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9437: LD_VAR 0 13
9441: PPUSH
9442: LD_VAR 0 21
9446: PPUSH
9447: CALL_OW 296
9451: PUSH
9452: LD_INT 8
9454: PLUS
9455: PUSH
9456: LD_VAR 0 13
9460: PPUSH
9461: LD_VAR 0 22
9465: PPUSH
9466: CALL_OW 296
9470: LESS
9471: IFFALSE 9489
// begin ComAttackUnit ( i , target1 ) ;
9473: LD_VAR 0 13
9477: PPUSH
9478: LD_VAR 0 21
9482: PPUSH
9483: CALL_OW 115
// end else
9487: GO 9503
// begin ComAttackUnit ( i , target2 ) ;
9489: LD_VAR 0 13
9493: PPUSH
9494: LD_VAR 0 22
9498: PPUSH
9499: CALL_OW 115
// end ; end ;
9503: GO 9328
9505: POP
9506: POP
// end ; until vehicleOK_list = [ ] ;
9507: LD_VAR 0 20
9511: PUSH
9512: EMPTY
9513: EQUAL
9514: IFFALSE 9254
// end ;
9516: LD_VAR 0 12
9520: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9521: LD_INT 0
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
// for i = 1 to 72 do
9527: LD_ADDR_VAR 0 5
9531: PUSH
9532: DOUBLE
9533: LD_INT 1
9535: DEC
9536: ST_TO_ADDR
9537: LD_INT 72
9539: PUSH
9540: FOR_TO
9541: IFFALSE 9599
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9543: LD_VAR 0 5
9547: PPUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: CALL_OW 321
9557: PUSH
9558: LD_INT 1
9560: EQUAL
9561: PUSH
9562: LD_VAR 0 5
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: CALL_OW 482
9576: PUSH
9577: LD_INT 1
9579: EQUAL
9580: AND
9581: IFFALSE 9597
// AddComResearch ( lab , i ) ;
9583: LD_VAR 0 2
9587: PPUSH
9588: LD_VAR 0 5
9592: PPUSH
9593: CALL_OW 184
9597: GO 9540
9599: POP
9600: POP
// end ;
9601: LD_VAR 0 4
9605: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9606: LD_INT 0
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
9612: PPUSH
9613: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9614: LD_ADDR_VAR 0 8
9618: PUSH
9619: LD_VAR 0 2
9623: PPUSH
9624: CALL_OW 313
9628: PUSH
9629: LD_EXP 35
9633: PUSH
9634: EMPTY
9635: LIST
9636: DIFF
9637: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9638: LD_ADDR_VAR 0 9
9642: PUSH
9643: LD_VAR 0 3
9647: PPUSH
9648: LD_INT 22
9650: PUSH
9651: LD_VAR 0 1
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 2
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 24
9672: PUSH
9673: LD_INT 750
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 3
9682: PUSH
9683: LD_INT 54
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 70
9703: PUSH
9704: LD_EXP 35
9708: PUSH
9709: EMPTY
9710: LIST
9711: DIFF
9712: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9713: LD_ADDR_VAR 0 6
9717: PUSH
9718: LD_VAR 0 3
9722: PPUSH
9723: LD_INT 22
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 21
9737: PUSH
9738: LD_INT 3
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 24
9750: PUSH
9751: LD_INT 1000
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: PPUSH
9770: CALL_OW 70
9774: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9775: LD_VAR 0 6
9779: NOT
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_VAR 0 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 24
9805: PUSH
9806: LD_INT 250
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: PPUSH
9818: CALL_OW 69
9822: NOT
9823: AND
9824: IFFALSE 9828
// exit ;
9826: GO 10010
// if buildings_list > 0 and engineerOkInside then
9828: LD_VAR 0 6
9832: PUSH
9833: LD_INT 0
9835: GREATER
9836: PUSH
9837: LD_VAR 0 8
9841: AND
9842: IFFALSE 9853
// ComExitBuilding ( engineerOkInside ) ;
9844: LD_VAR 0 8
9848: PPUSH
9849: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9853: LD_VAR 0 6
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: PUSH
9862: LD_VAR 0 9
9866: PUSH
9867: LD_INT 0
9869: GREATER
9870: AND
9871: IFFALSE 9891
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9873: LD_VAR 0 9
9877: PPUSH
9878: LD_VAR 0 6
9882: PUSH
9883: LD_INT 1
9885: ARRAY
9886: PPUSH
9887: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9891: LD_VAR 0 6
9895: PUSH
9896: LD_INT 0
9898: EQUAL
9899: PUSH
9900: LD_VAR 0 4
9904: PUSH
9905: LD_INT 0
9907: EQUAL
9908: AND
9909: PUSH
9910: LD_VAR 0 9
9914: PUSH
9915: LD_INT 0
9917: GREATER
9918: AND
9919: IFFALSE 9935
// ComEnterUnit ( engineerOkOutside , building ) ;
9921: LD_VAR 0 9
9925: PPUSH
9926: LD_VAR 0 2
9930: PPUSH
9931: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9935: LD_VAR 0 9
9939: PUSH
9940: LD_INT 0
9942: GREATER
9943: PUSH
9944: LD_VAR 0 6
9948: PUSH
9949: LD_INT 0
9951: EQUAL
9952: AND
9953: PUSH
9954: LD_VAR 0 4
9958: PUSH
9959: LD_INT 0
9961: GREATER
9962: AND
9963: IFFALSE 10010
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9965: LD_VAR 0 9
9969: PPUSH
9970: LD_VAR 0 4
9974: PUSH
9975: LD_INT 1
9977: ARRAY
9978: PPUSH
9979: LD_VAR 0 4
9983: PUSH
9984: LD_INT 2
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 4
9992: PUSH
9993: LD_INT 3
9995: ARRAY
9996: PPUSH
9997: LD_VAR 0 4
10001: PUSH
10002: LD_INT 4
10004: ARRAY
10005: PPUSH
10006: CALL_OW 145
// end ;
10010: LD_VAR 0 5
10014: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
10023: PPUSH
10024: PPUSH
10025: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10026: LD_ADDR_VAR 0 6
10030: PUSH
10031: LD_INT 22
10033: PUSH
10034: LD_VAR 0 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 4
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 23
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 24
10065: PUSH
10066: LD_INT 251
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: PPUSH
10079: CALL_OW 69
10083: PUSH
10084: LD_EXP 35
10088: PUSH
10089: EMPTY
10090: LIST
10091: DIFF
10092: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10093: LD_ADDR_VAR 0 7
10097: PUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 22
10105: PUSH
10106: LD_VAR 0 1
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 23
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 4
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 50
10137: PUSH
10138: EMPTY
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 70
10151: PUSH
10152: LD_EXP 35
10156: PUSH
10157: EMPTY
10158: LIST
10159: DIFF
10160: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10161: LD_ADDR_VAR 0 10
10165: PUSH
10166: LD_VAR 0 3
10170: PPUSH
10171: LD_INT 22
10173: PUSH
10174: LD_VAR 0 1
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 21
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 3
10195: PUSH
10196: LD_INT 25
10198: PUSH
10199: LD_INT 3
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 3
10212: PUSH
10213: LD_INT 24
10215: PUSH
10216: LD_INT 750
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: PPUSH
10233: CALL_OW 70
10237: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10238: LD_ADDR_VAR 0 11
10242: PUSH
10243: LD_VAR 0 2
10247: PPUSH
10248: LD_INT 22
10250: PUSH
10251: LD_VAR 0 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 3
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: LD_INT 1000
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: PPUSH
10310: CALL_OW 70
10314: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10315: LD_VAR 0 10
10319: NOT
10320: PUSH
10321: LD_VAR 0 11
10325: NOT
10326: AND
10327: PUSH
10328: LD_VAR 0 6
10332: NOT
10333: AND
10334: IFFALSE 10338
// exit ;
10336: GO 10572
// if damageUnits > 0 and sci_list > 0 then
10338: LD_VAR 0 10
10342: PUSH
10343: LD_INT 0
10345: GREATER
10346: PUSH
10347: LD_VAR 0 6
10351: PUSH
10352: LD_INT 0
10354: GREATER
10355: AND
10356: IFFALSE 10372
// ComMoveToArea ( damageUnits , healArea ) ;
10358: LD_VAR 0 10
10362: PPUSH
10363: LD_VAR 0 2
10367: PPUSH
10368: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10372: LD_VAR 0 11
10376: PUSH
10377: LD_INT 0
10379: GREATER
10380: PUSH
10381: LD_VAR 0 6
10385: PUSH
10386: LD_INT 0
10388: GREATER
10389: AND
10390: IFFALSE 10401
// ComExitBuilding ( sci_list ) ;
10392: LD_VAR 0 6
10396: PPUSH
10397: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10401: LD_VAR 0 11
10405: PUSH
10406: LD_INT 0
10408: GREATER
10409: PUSH
10410: LD_VAR 0 7
10414: PUSH
10415: LD_INT 0
10417: GREATER
10418: AND
10419: IFFALSE 10439
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10421: LD_VAR 0 7
10425: PPUSH
10426: LD_VAR 0 11
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PPUSH
10435: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10439: LD_VAR 0 10
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_VAR 0 11
10452: PUSH
10453: LD_INT 0
10455: EQUAL
10456: AND
10457: PUSH
10458: LD_VAR 0 7
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: AND
10467: IFFALSE 10572
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10469: LD_ADDR_VAR 0 12
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_VAR 0 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 21
10488: PUSH
10489: LD_INT 3
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 30
10498: PUSH
10499: LD_INT 8
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10516: LD_ADDR_VAR 0 13
10520: PUSH
10521: LD_INT 1
10523: PPUSH
10524: LD_VAR 0 12
10528: PPUSH
10529: CALL_OW 12
10533: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10534: LD_VAR 0 7
10538: PPUSH
10539: LD_INT 3
10541: PUSH
10542: LD_INT 60
10544: PUSH
10545: EMPTY
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PPUSH
10552: CALL_OW 72
10556: PPUSH
10557: LD_VAR 0 12
10561: PUSH
10562: LD_VAR 0 13
10566: ARRAY
10567: PPUSH
10568: CALL_OW 120
// end ; end ;
10572: LD_VAR 0 5
10576: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10577: LD_INT 0
10579: PPUSH
10580: PPUSH
10581: PPUSH
10582: PPUSH
// tmpTab = [ ] ;
10583: LD_ADDR_VAR 0 6
10587: PUSH
10588: EMPTY
10589: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10590: LD_INT 22
10592: PUSH
10593: LD_VAR 0 1
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 30
10604: PUSH
10605: LD_INT 32
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PPUSH
10616: CALL_OW 69
10620: PUSH
10621: LD_INT 0
10623: GREATER
10624: IFFALSE 10707
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10626: LD_ADDR_VAR 0 4
10630: PUSH
10631: LD_INT 22
10633: PUSH
10634: LD_VAR 0 1
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 30
10645: PUSH
10646: LD_INT 32
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 69
10661: PUSH
10662: FOR_IN
10663: IFFALSE 10705
// begin for j in UnitsInside ( i ) do
10665: LD_ADDR_VAR 0 5
10669: PUSH
10670: LD_VAR 0 4
10674: PPUSH
10675: CALL_OW 313
10679: PUSH
10680: FOR_IN
10681: IFFALSE 10701
// tmpTab = tmpTab ^ j ;
10683: LD_ADDR_VAR 0 6
10687: PUSH
10688: LD_VAR 0 6
10692: PUSH
10693: LD_VAR 0 5
10697: ADD
10698: ST_TO_ADDR
10699: GO 10680
10701: POP
10702: POP
// end ;
10703: GO 10662
10705: POP
10706: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10707: LD_VAR 0 6
10711: PPUSH
10712: LD_VAR 0 2
10716: PPUSH
10717: CALL_OW 250
10721: PPUSH
10722: LD_VAR 0 2
10726: PPUSH
10727: CALL_OW 251
10731: PPUSH
10732: CALL_OW 114
// end ;
10736: LD_VAR 0 3
10740: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10741: LD_INT 0
10743: PPUSH
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
10748: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10749: LD_ADDR_VAR 0 7
10753: PUSH
10754: LD_VAR 0 2
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_VAR 0 1
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 34
10783: PUSH
10784: LD_INT 52
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 70
10800: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10801: LD_ADDR_VAR 0 8
10805: PUSH
10806: LD_VAR 0 2
10810: PPUSH
10811: LD_INT 22
10813: PUSH
10814: LD_VAR 0 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 21
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 3
10835: PUSH
10836: LD_INT 24
10838: PUSH
10839: LD_INT 1000
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: PPUSH
10858: CALL_OW 70
10862: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10863: LD_VAR 0 8
10867: PUSH
10868: LD_INT 0
10870: GREATER
10871: PUSH
10872: LD_VAR 0 7
10876: PPUSH
10877: LD_INT 24
10879: PUSH
10880: LD_INT 750
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 72
10891: PUSH
10892: LD_INT 0
10894: GREATER
10895: AND
10896: IFFALSE 10916
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10898: LD_VAR 0 7
10902: PPUSH
10903: LD_VAR 0 8
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: CALL_OW 130
// end ;
10916: LD_VAR 0 3
10920: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
10921: LD_INT 0
10923: PPUSH
10924: PPUSH
10925: PPUSH
10926: PPUSH
10927: PPUSH
10928: PPUSH
10929: PPUSH
10930: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
10931: LD_ADDR_VAR 0 6
10935: PUSH
10936: LD_VAR 0 2
10940: PPUSH
10941: LD_INT 22
10943: PUSH
10944: LD_VAR 0 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 56
10955: PUSH
10956: EMPTY
10957: LIST
10958: PUSH
10959: LD_INT 24
10961: PUSH
10962: LD_INT 700
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 3
10971: PUSH
10972: LD_INT 60
10974: PUSH
10975: EMPTY
10976: LIST
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 1
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 25
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 25
11017: PUSH
11018: LD_INT 9
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PPUSH
11039: CALL_OW 70
11043: PUSH
11044: LD_EXP 26
11048: PUSH
11049: LD_EXP 27
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: DIFF
11058: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11059: LD_ADDR_VAR 0 7
11063: PUSH
11064: LD_VAR 0 2
11068: PPUSH
11069: LD_INT 22
11071: PUSH
11072: LD_VAR 0 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 30
11083: PUSH
11084: LD_INT 32
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 58
11093: PUSH
11094: EMPTY
11095: LIST
11096: PUSH
11097: LD_INT 24
11099: PUSH
11100: LD_INT 251
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: PPUSH
11113: CALL_OW 70
11117: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11118: LD_ADDR_VAR 0 9
11122: PUSH
11123: LD_VAR 0 2
11127: PPUSH
11128: LD_INT 22
11130: PUSH
11131: LD_VAR 0 1
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: LD_INT 30
11145: PUSH
11146: LD_INT 4
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 30
11155: PUSH
11156: LD_INT 5
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: LD_INT 251
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 70
11187: ST_TO_ADDR
// if barrackList > 0 then
11188: LD_VAR 0 9
11192: PUSH
11193: LD_INT 0
11195: GREATER
11196: IFFALSE 11344
// begin if turretList = 0 then
11198: LD_VAR 0 7
11202: PUSH
11203: LD_INT 0
11205: EQUAL
11206: IFFALSE 11248
// begin if soldiers_list > 0 then
11208: LD_VAR 0 6
11212: PUSH
11213: LD_INT 0
11215: GREATER
11216: IFFALSE 11246
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11218: LD_VAR 0 6
11222: PPUSH
11223: LD_VAR 0 9
11227: PUSH
11228: LD_INT 1
11230: PPUSH
11231: LD_VAR 0 9
11235: PPUSH
11236: CALL_OW 12
11240: ARRAY
11241: PPUSH
11242: CALL_OW 120
// end else
11246: GO 11344
// begin for i in barrackList do
11248: LD_ADDR_VAR 0 4
11252: PUSH
11253: LD_VAR 0 9
11257: PUSH
11258: FOR_IN
11259: IFFALSE 11342
// begin insideUnits = UnitsInside ( i ) ;
11261: LD_ADDR_VAR 0 10
11265: PUSH
11266: LD_VAR 0 4
11270: PPUSH
11271: CALL_OW 313
11275: ST_TO_ADDR
// if insideUnits > 0 then
11276: LD_VAR 0 10
11280: PUSH
11281: LD_INT 0
11283: GREATER
11284: IFFALSE 11308
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11286: LD_VAR 0 10
11290: PUSH
11291: LD_INT 1
11293: ARRAY
11294: PPUSH
11295: LD_VAR 0 7
11299: PUSH
11300: LD_INT 1
11302: ARRAY
11303: PPUSH
11304: CALL_OW 120
// if soldiers_list > 0 then
11308: LD_VAR 0 6
11312: PUSH
11313: LD_INT 0
11315: GREATER
11316: IFFALSE 11340
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11318: LD_VAR 0 6
11322: PUSH
11323: LD_INT 1
11325: ARRAY
11326: PPUSH
11327: LD_VAR 0 7
11331: PUSH
11332: LD_INT 1
11334: ARRAY
11335: PPUSH
11336: CALL_OW 120
// end ;
11340: GO 11258
11342: POP
11343: POP
// end ; end ; end ;
11344: LD_VAR 0 3
11348: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11349: LD_INT 0
11351: PPUSH
11352: PPUSH
11353: PPUSH
11354: PPUSH
11355: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11356: LD_ADDR_VAR 0 6
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_VAR 0 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 30
11378: PUSH
11379: LD_INT 31
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 30
11388: PUSH
11389: LD_INT 32
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 30
11398: PUSH
11399: LD_INT 33
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 30
11408: PUSH
11409: LD_INT 4
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 30
11418: PUSH
11419: LD_INT 5
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_INT 22
11450: PUSH
11451: LD_VAR 0 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 21
11462: PUSH
11463: LD_INT 3
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 58
11472: PUSH
11473: EMPTY
11474: LIST
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11486: LD_VAR 0 6
11490: PUSH
11491: LD_INT 0
11493: GREATER
11494: PUSH
11495: LD_VAR 0 7
11499: PUSH
11500: LD_INT 0
11502: GREATER
11503: AND
11504: IFFALSE 11574
// begin for i in turretsList do
11506: LD_ADDR_VAR 0 4
11510: PUSH
11511: LD_VAR 0 6
11515: PUSH
11516: FOR_IN
11517: IFFALSE 11572
// begin for j in enemyBuildings do
11519: LD_ADDR_VAR 0 5
11523: PUSH
11524: LD_VAR 0 7
11528: PUSH
11529: FOR_IN
11530: IFFALSE 11568
// begin if GetDistUnits ( i , j ) < 20 then
11532: LD_VAR 0 4
11536: PPUSH
11537: LD_VAR 0 5
11541: PPUSH
11542: CALL_OW 296
11546: PUSH
11547: LD_INT 20
11549: LESS
11550: IFFALSE 11566
// begin ComAttackUnit ( i , j ) ;
11552: LD_VAR 0 4
11556: PPUSH
11557: LD_VAR 0 5
11561: PPUSH
11562: CALL_OW 115
// end ; end ;
11566: GO 11529
11568: POP
11569: POP
// end ;
11570: GO 11516
11572: POP
11573: POP
// end ; end ;
11574: LD_VAR 0 3
11578: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11579: LD_INT 0
11581: PPUSH
11582: PPUSH
// for i = 1 to vehCount do
11583: LD_ADDR_VAR 0 9
11587: PUSH
11588: DOUBLE
11589: LD_INT 1
11591: DEC
11592: ST_TO_ADDR
11593: LD_VAR 0 3
11597: PUSH
11598: FOR_TO
11599: IFFALSE 11646
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11601: LD_VAR 0 2
11605: PPUSH
11606: LD_VAR 0 7
11610: PPUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: LD_VAR 0 6
11620: PPUSH
11621: LD_VAR 0 4
11625: PUSH
11626: LD_INT 1
11628: PPUSH
11629: LD_VAR 0 4
11633: PPUSH
11634: CALL_OW 12
11638: ARRAY
11639: PPUSH
11640: CALL_OW 185
11644: GO 11598
11646: POP
11647: POP
// end ;
11648: LD_VAR 0 8
11652: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
11657: PPUSH
11658: PPUSH
11659: PPUSH
11660: PPUSH
// if oponent = 1 then
11661: LD_VAR 0 2
11665: PUSH
11666: LD_INT 1
11668: EQUAL
11669: IFFALSE 11859
// begin repeat wait ( 0 0$1 ) ;
11671: LD_INT 35
11673: PPUSH
11674: CALL_OW 67
// for j in legionVehicles do
11678: LD_ADDR_VAR 0 5
11682: PUSH
11683: LD_EXP 54
11687: PUSH
11688: FOR_IN
11689: IFFALSE 11847
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11691: LD_ADDR_VAR 0 7
11695: PUSH
11696: LD_INT 22
11698: PUSH
11699: LD_VAR 0 1
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: PPUSH
11713: LD_VAR 0 5
11717: PPUSH
11718: CALL_OW 74
11722: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11723: LD_ADDR_VAR 0 8
11727: PUSH
11728: LD_INT 22
11730: PUSH
11731: LD_VAR 0 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 32
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 59
11752: PUSH
11753: EMPTY
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: PPUSH
11764: CALL_OW 69
11768: PPUSH
11769: LD_VAR 0 5
11773: PPUSH
11774: CALL_OW 74
11778: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11779: LD_VAR 0 5
11783: PPUSH
11784: LD_VAR 0 7
11788: PPUSH
11789: CALL_OW 296
11793: PUSH
11794: LD_INT 8
11796: PLUS
11797: PUSH
11798: LD_VAR 0 5
11802: PPUSH
11803: LD_VAR 0 8
11807: PPUSH
11808: CALL_OW 296
11812: LESS
11813: IFFALSE 11831
// ComAttackUnit ( j , target1 ) else
11815: LD_VAR 0 5
11819: PPUSH
11820: LD_VAR 0 7
11824: PPUSH
11825: CALL_OW 115
11829: GO 11845
// ComAttackUnit ( j , target2 ) ;
11831: LD_VAR 0 5
11835: PPUSH
11836: LD_VAR 0 8
11840: PPUSH
11841: CALL_OW 115
// end ;
11845: GO 11688
11847: POP
11848: POP
// until legionVehicles = 0 ;
11849: LD_EXP 54
11853: PUSH
11854: LD_INT 0
11856: EQUAL
11857: IFFALSE 11671
// end ; if oponent = 2 then
11859: LD_VAR 0 2
11863: PUSH
11864: LD_INT 2
11866: EQUAL
11867: IFFALSE 12057
// begin repeat wait ( 0 0$1 ) ;
11869: LD_INT 35
11871: PPUSH
11872: CALL_OW 67
// for j in russianVehicles do
11876: LD_ADDR_VAR 0 5
11880: PUSH
11881: LD_EXP 60
11885: PUSH
11886: FOR_IN
11887: IFFALSE 12045
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11889: LD_ADDR_VAR 0 7
11893: PUSH
11894: LD_INT 22
11896: PUSH
11897: LD_VAR 0 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: PPUSH
11911: LD_VAR 0 5
11915: PPUSH
11916: CALL_OW 74
11920: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11921: LD_ADDR_VAR 0 8
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_VAR 0 1
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 30
11940: PUSH
11941: LD_INT 32
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 59
11950: PUSH
11951: EMPTY
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: PPUSH
11962: CALL_OW 69
11966: PPUSH
11967: LD_VAR 0 5
11971: PPUSH
11972: CALL_OW 74
11976: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11977: LD_VAR 0 5
11981: PPUSH
11982: LD_VAR 0 7
11986: PPUSH
11987: CALL_OW 296
11991: PUSH
11992: LD_INT 8
11994: PLUS
11995: PUSH
11996: LD_VAR 0 5
12000: PPUSH
12001: LD_VAR 0 8
12005: PPUSH
12006: CALL_OW 296
12010: LESS
12011: IFFALSE 12029
// ComAttackUnit ( j , target1 ) else
12013: LD_VAR 0 5
12017: PPUSH
12018: LD_VAR 0 7
12022: PPUSH
12023: CALL_OW 115
12027: GO 12043
// ComAttackUnit ( j , target2 ) ;
12029: LD_VAR 0 5
12033: PPUSH
12034: LD_VAR 0 8
12038: PPUSH
12039: CALL_OW 115
// end ;
12043: GO 11886
12045: POP
12046: POP
// until russianVehicles = 0 ;
12047: LD_EXP 60
12051: PUSH
12052: LD_INT 0
12054: EQUAL
12055: IFFALSE 11869
// end ; if oponent = 3 then
12057: LD_VAR 0 2
12061: PUSH
12062: LD_INT 3
12064: EQUAL
12065: IFFALSE 12255
// begin repeat wait ( 0 0$1 ) ;
12067: LD_INT 35
12069: PPUSH
12070: CALL_OW 67
// for j in allianceVehicles do
12074: LD_ADDR_VAR 0 5
12078: PUSH
12079: LD_EXP 61
12083: PUSH
12084: FOR_IN
12085: IFFALSE 12243
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_VAR 0 1
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PPUSH
12104: CALL_OW 69
12108: PPUSH
12109: LD_VAR 0 5
12113: PPUSH
12114: CALL_OW 74
12118: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12119: LD_ADDR_VAR 0 8
12123: PUSH
12124: LD_INT 22
12126: PUSH
12127: LD_VAR 0 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 32
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 59
12148: PUSH
12149: EMPTY
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: PPUSH
12160: CALL_OW 69
12164: PPUSH
12165: LD_VAR 0 5
12169: PPUSH
12170: CALL_OW 74
12174: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12175: LD_VAR 0 5
12179: PPUSH
12180: LD_VAR 0 7
12184: PPUSH
12185: CALL_OW 296
12189: PUSH
12190: LD_INT 8
12192: PLUS
12193: PUSH
12194: LD_VAR 0 5
12198: PPUSH
12199: LD_VAR 0 8
12203: PPUSH
12204: CALL_OW 296
12208: LESS
12209: IFFALSE 12227
// ComAttackUnit ( j , target1 ) else
12211: LD_VAR 0 5
12215: PPUSH
12216: LD_VAR 0 7
12220: PPUSH
12221: CALL_OW 115
12225: GO 12241
// ComAttackUnit ( j , target2 ) ;
12227: LD_VAR 0 5
12231: PPUSH
12232: LD_VAR 0 8
12236: PPUSH
12237: CALL_OW 115
// end ;
12241: GO 12084
12243: POP
12244: POP
// until allianceVehicles = 0 ;
12245: LD_EXP 61
12249: PUSH
12250: LD_INT 0
12252: EQUAL
12253: IFFALSE 12067
// end ; end ;
12255: LD_VAR 0 3
12259: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12260: LD_INT 0
12262: PPUSH
12263: PPUSH
12264: PPUSH
12265: PPUSH
12266: PPUSH
12267: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12268: LD_ADDR_VAR 0 6
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_VAR 0 1
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 25
12287: PUSH
12288: LD_INT 9
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 69
12303: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12304: LD_ADDR_VAR 0 7
12308: PUSH
12309: LD_INT 81
12311: PUSH
12312: LD_VAR 0 1
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 3
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 69
12346: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12347: LD_ADDR_VAR 0 4
12351: PUSH
12352: LD_INT 1
12354: PPUSH
12355: LD_INT 3
12357: PPUSH
12358: CALL_OW 12
12362: ST_TO_ADDR
// for i = 1 to list do
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: DOUBLE
12369: LD_INT 1
12371: DEC
12372: ST_TO_ADDR
12373: LD_VAR 0 6
12377: PUSH
12378: FOR_TO
12379: IFFALSE 12581
// for ta in filter do
12381: LD_ADDR_VAR 0 3
12385: PUSH
12386: LD_VAR 0 7
12390: PUSH
12391: FOR_IN
12392: IFFALSE 12577
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12394: LD_VAR 0 6
12398: PUSH
12399: LD_VAR 0 5
12403: ARRAY
12404: PPUSH
12405: LD_VAR 0 3
12409: PPUSH
12410: CALL_OW 296
12414: PUSH
12415: LD_INT 15
12417: LESSEQUAL
12418: IFFALSE 12575
// begin case c of 1 :
12420: LD_VAR 0 4
12424: PUSH
12425: LD_INT 1
12427: DOUBLE
12428: EQUAL
12429: IFTRUE 12433
12431: GO 12471
12433: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12434: LD_VAR 0 6
12438: PUSH
12439: LD_VAR 0 5
12443: ARRAY
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: CALL_OW 250
12454: PPUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: CALL_OW 251
12464: PPUSH
12465: CALL_OW 154
12469: GO 12575
12471: LD_INT 2
12473: DOUBLE
12474: EQUAL
12475: IFTRUE 12479
12477: GO 12543
12479: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12480: LD_VAR 0 6
12484: PUSH
12485: LD_VAR 0 5
12489: ARRAY
12490: PPUSH
12491: LD_VAR 0 3
12495: PPUSH
12496: CALL_OW 250
12500: PUSH
12501: LD_INT 1
12503: NEG
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 12
12512: PLUS
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: CALL_OW 251
12523: PUSH
12524: LD_INT 1
12526: NEG
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 12
12535: PLUS
12536: PPUSH
12537: CALL_OW 153
12541: GO 12575
12543: LD_INT 3
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12574
12551: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12552: LD_VAR 0 6
12556: PUSH
12557: LD_VAR 0 5
12561: ARRAY
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: CALL_OW 115
12572: GO 12575
12574: POP
// end ; end ;
12575: GO 12391
12577: POP
12578: POP
12579: GO 12378
12581: POP
12582: POP
// end ;
12583: LD_VAR 0 2
12587: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12588: LD_INT 0
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12594: LD_INT 22
12596: PUSH
12597: LD_VAR 0 1
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 34
12618: PUSH
12619: LD_INT 49
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: PPUSH
12631: CALL_OW 69
12635: PUSH
12636: LD_INT 0
12638: EQUAL
12639: IFFALSE 12643
// exit ;
12641: GO 12898
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12643: LD_INT 22
12645: PUSH
12646: LD_VAR 0 1
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 34
12667: PUSH
12668: LD_INT 49
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 69
12684: PUSH
12685: LD_INT 0
12687: GREATER
12688: IFFALSE 12898
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12690: LD_ADDR_VAR 0 6
12694: PUSH
12695: LD_INT 22
12697: PUSH
12698: LD_VAR 0 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 2
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 34
12719: PUSH
12720: LD_INT 49
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12737: LD_INT 105
12739: PPUSH
12740: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12744: LD_ADDR_VAR 0 4
12748: PUSH
12749: LD_VAR 0 6
12753: PPUSH
12754: LD_INT 3
12756: PUSH
12757: LD_INT 60
12759: PUSH
12760: EMPTY
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 72
12771: PUSH
12772: FOR_IN
12773: IFFALSE 12886
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12775: LD_ADDR_VAR 0 5
12779: PUSH
12780: LD_INT 81
12782: PUSH
12783: LD_VAR 0 1
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 101
12794: PUSH
12795: LD_VAR 0 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 3
12819: PUSH
12820: LD_INT 58
12822: PUSH
12823: EMPTY
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: PPUSH
12845: LD_VAR 0 4
12849: PPUSH
12850: CALL_OW 74
12854: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12855: LD_VAR 0 4
12859: PPUSH
12860: LD_VAR 0 5
12864: PPUSH
12865: CALL_OW 250
12869: PPUSH
12870: LD_VAR 0 5
12874: PPUSH
12875: CALL_OW 251
12879: PPUSH
12880: CALL_OW 111
// end ;
12884: GO 12772
12886: POP
12887: POP
// until vehs = 0 ;
12888: LD_VAR 0 6
12892: PUSH
12893: LD_INT 0
12895: EQUAL
12896: IFFALSE 12690
// end ; end_of_file
12898: LD_VAR 0 3
12902: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: EQUAL
12911: PUSH
12912: LD_VAR 0 2
12916: PUSH
12917: LD_INT 4
12919: EQUAL
12920: AND
12921: IFFALSE 12930
// YouLost ( text ) ;
12923: LD_STRING text
12925: PPUSH
12926: CALL_OW 104
// end ;
12930: PPOPN 2
12932: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
12933: LD_VAR 0 1
12937: PUSH
12938: LD_INT 235
12940: EQUAL
12941: PUSH
12942: LD_VAR 0 2
12946: PPUSH
12947: CALL_OW 255
12951: PUSH
12952: LD_INT 4
12954: EQUAL
12955: AND
12956: IFFALSE 13032
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
12958: LD_INT 235
12960: PPUSH
12961: LD_INT 84
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
12971: LD_INT 235
12973: PPUSH
12974: LD_INT 68
12976: PPUSH
12977: LD_INT 100
12979: PPUSH
12980: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
12984: LD_INT 235
12986: PPUSH
12987: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
12991: LD_INT 235
12993: PPUSH
12994: LD_INT 48
12996: PPUSH
12997: LD_INT 69
12999: PPUSH
13000: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13004: LD_INT 235
13006: PPUSH
13007: LD_INT 39
13009: PPUSH
13010: LD_INT 61
13012: PPUSH
13013: CALL_OW 171
// wait ( 0 0$10 ) ;
13017: LD_INT 350
13019: PPUSH
13020: CALL_OW 67
// powellUnloadCargo = 1 ;
13024: LD_ADDR_EXP 69
13028: PUSH
13029: LD_INT 1
13031: ST_TO_ADDR
// end ; end ;
13032: PPOPN 2
13034: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13035: LD_INT 0
13037: PPUSH
13038: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13039: LD_ADDR_VAR 0 3
13043: PUSH
13044: LD_INT 22
13046: PUSH
13047: LD_INT 4
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 1
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 56
13066: PUSH
13067: EMPTY
13068: LIST
13069: PUSH
13070: LD_INT 3
13072: PUSH
13073: LD_INT 60
13075: PUSH
13076: EMPTY
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: PUSH
13094: LD_EXP 17
13098: PUSH
13099: EMPTY
13100: LIST
13101: DIFF
13102: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13103: LD_VAR 0 1
13107: PPUSH
13108: CALL_OW 255
13112: PUSH
13113: LD_INT 4
13115: EQUAL
13116: IFFALSE 13247
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13118: LD_INT 22
13120: PUSH
13121: LD_INT 4
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 30
13130: PUSH
13131: LD_INT 8
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 69
13146: PUSH
13147: LD_INT 1
13149: EQUAL
13150: IFFALSE 13247
// begin for i = 1 to 3 do
13152: LD_ADDR_VAR 0 2
13156: PUSH
13157: DOUBLE
13158: LD_INT 1
13160: DEC
13161: ST_TO_ADDR
13162: LD_INT 3
13164: PUSH
13165: FOR_TO
13166: IFFALSE 13230
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13168: LD_VAR 0 3
13172: PUSH
13173: LD_VAR 0 2
13177: ARRAY
13178: PPUSH
13179: LD_INT 3
13181: PUSH
13182: LD_INT 25
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 72
13200: PPUSH
13201: LD_VAR 0 1
13205: PPUSH
13206: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13210: LD_VAR 0 3
13214: PUSH
13215: LD_VAR 0 2
13219: ARRAY
13220: PPUSH
13221: LD_INT 4
13223: PPUSH
13224: CALL_OW 183
// end ;
13228: GO 13165
13230: POP
13231: POP
// ResAllTechs ( 4 , building , 1 ) ;
13232: LD_INT 4
13234: PPUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL 9521 0 3
// end ; if GetSide ( building ) = 8 then
13247: LD_VAR 0 1
13251: PPUSH
13252: CALL_OW 255
13256: PUSH
13257: LD_INT 8
13259: EQUAL
13260: IFFALSE 13445
// begin if GetNation ( building ) = 3 then
13262: LD_VAR 0 1
13266: PPUSH
13267: CALL_OW 248
13271: PUSH
13272: LD_INT 3
13274: EQUAL
13275: IFFALSE 13445
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13277: LD_EXP 35
13281: PPUSH
13282: LD_INT 73
13284: PPUSH
13285: LD_INT 16
13287: PPUSH
13288: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13292: LD_EXP 35
13296: PPUSH
13297: LD_INT 21
13299: PPUSH
13300: LD_INT 74
13302: PPUSH
13303: LD_INT 12
13305: PPUSH
13306: LD_INT 1
13308: PPUSH
13309: CALL_OW 205
// wait ( 0 0$2 ) ;
13313: LD_INT 70
13315: PPUSH
13316: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13320: LD_EXP 35
13324: PPUSH
13325: LD_INT 22
13327: PUSH
13328: LD_INT 8
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 30
13337: PUSH
13338: LD_INT 3
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 23
13347: PUSH
13348: LD_INT 3
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: PPUSH
13360: CALL_OW 69
13364: PUSH
13365: LD_INT 1
13367: ARRAY
13368: PPUSH
13369: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13373: LD_EXP 35
13377: PPUSH
13378: LD_INT 3
13380: PPUSH
13381: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13385: LD_INT 22
13387: PUSH
13388: LD_INT 8
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 3
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 23
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: LD_INT 24
13431: PPUSH
13432: LD_INT 3
13434: PPUSH
13435: LD_INT 3
13437: PPUSH
13438: LD_INT 48
13440: PPUSH
13441: CALL_OW 185
// end ; end ; end ;
13445: PPOPN 3
13447: END
// on BuildingComplete ( building ) do var powellPeople ;
13448: LD_INT 0
13450: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13451: LD_VAR 0 1
13455: PPUSH
13456: CALL_OW 255
13460: PUSH
13461: LD_INT 4
13463: EQUAL
13464: PUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 266
13474: PUSH
13475: LD_INT 17
13477: EQUAL
13478: AND
13479: IFFALSE 13761
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 4
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 21
13498: PUSH
13499: LD_INT 1
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 56
13508: PUSH
13509: EMPTY
13510: LIST
13511: PUSH
13512: LD_INT 3
13514: PUSH
13515: LD_INT 60
13517: PUSH
13518: EMPTY
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 69
13535: PUSH
13536: LD_EXP 17
13540: PUSH
13541: EMPTY
13542: LIST
13543: DIFF
13544: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13545: LD_INT 22
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 21
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 30
13567: PUSH
13568: LD_INT 32
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: PUSH
13585: LD_INT 1
13587: ARRAY
13588: PPUSH
13589: LD_INT 6
13591: PPUSH
13592: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13596: LD_INT 22
13598: PUSH
13599: LD_INT 4
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 3
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 30
13618: PUSH
13619: LD_INT 32
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 69
13635: PUSH
13636: LD_INT 2
13638: ARRAY
13639: PPUSH
13640: LD_INT 5
13642: PPUSH
13643: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13647: LD_VAR 0 2
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: LD_INT 22
13658: PUSH
13659: LD_INT 4
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 21
13668: PUSH
13669: LD_INT 3
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 30
13678: PUSH
13679: LD_INT 32
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: PPUSH
13691: CALL_OW 69
13695: PUSH
13696: LD_INT 1
13698: ARRAY
13699: PPUSH
13700: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13704: LD_VAR 0 2
13708: PUSH
13709: LD_INT 2
13711: ARRAY
13712: PPUSH
13713: LD_INT 22
13715: PUSH
13716: LD_INT 4
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 3
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 30
13735: PUSH
13736: LD_INT 32
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: PUSH
13753: LD_INT 2
13755: ARRAY
13756: PPUSH
13757: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
13761: LD_VAR 0 1
13765: PPUSH
13766: CALL_OW 255
13770: PUSH
13771: LD_INT 4
13773: EQUAL
13774: PUSH
13775: LD_VAR 0 1
13779: PPUSH
13780: CALL_OW 266
13784: PUSH
13785: LD_INT 21
13787: EQUAL
13788: AND
13789: IFFALSE 13936
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13791: LD_INT 85
13793: PPUSH
13794: LD_INT 3
13796: PPUSH
13797: LD_INT 3
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: LD_INT 3
13805: PUSH
13806: LD_INT 5
13808: PUSH
13809: LD_INT 7
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 1
13819: PPUSH
13820: LD_INT 3
13822: PPUSH
13823: CALL_OW 12
13827: ARRAY
13828: PPUSH
13829: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13833: LD_INT 85
13835: PPUSH
13836: LD_INT 3
13838: PPUSH
13839: LD_INT 3
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: LD_INT 3
13847: PUSH
13848: LD_INT 5
13850: PUSH
13851: LD_INT 7
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 3
13864: PPUSH
13865: CALL_OW 12
13869: ARRAY
13870: PPUSH
13871: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13875: LD_INT 85
13877: PPUSH
13878: LD_INT 3
13880: PPUSH
13881: LD_INT 3
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: LD_INT 3
13889: PUSH
13890: LD_INT 5
13892: PUSH
13893: LD_INT 7
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 1
13903: PPUSH
13904: LD_INT 3
13906: PPUSH
13907: CALL_OW 12
13911: ARRAY
13912: PPUSH
13913: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
13917: LD_INT 85
13919: PPUSH
13920: LD_INT 5
13922: PPUSH
13923: LD_INT 3
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: LD_INT 6
13931: PPUSH
13932: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
13936: LD_VAR 0 1
13940: PPUSH
13941: CALL_OW 255
13945: PUSH
13946: LD_INT 8
13948: EQUAL
13949: IFFALSE 13975
// begin if GetBType ( building ) = b_workshop then
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 266
13960: PUSH
13961: LD_INT 2
13963: EQUAL
13964: IFFALSE 13975
// ComUpgrade ( building ) ;
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
13975: LD_VAR 0 1
13979: PPUSH
13980: CALL_OW 255
13984: PUSH
13985: LD_INT 3
13987: EQUAL
13988: IFFALSE 14062
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13990: LD_ADDR_EXP 93
13994: PUSH
13995: LD_EXP 93
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 3
14007: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14008: LD_ADDR_EXP 93
14012: PUSH
14013: LD_EXP 93
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 3
14025: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14026: LD_ADDR_EXP 93
14030: PUSH
14031: LD_EXP 93
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 3
14043: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14044: LD_ADDR_EXP 93
14048: PUSH
14049: LD_EXP 93
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 3
14061: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14062: LD_VAR 0 1
14066: PPUSH
14067: CALL_OW 255
14071: PUSH
14072: LD_INT 8
14074: EQUAL
14075: IFFALSE 14149
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14077: LD_ADDR_EXP 92
14081: PUSH
14082: LD_EXP 92
14086: PPUSH
14087: LD_INT 1
14089: PPUSH
14090: CALL_OW 3
14094: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14095: LD_ADDR_EXP 92
14099: PUSH
14100: LD_EXP 92
14104: PPUSH
14105: LD_INT 1
14107: PPUSH
14108: CALL_OW 3
14112: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14113: LD_ADDR_EXP 92
14117: PUSH
14118: LD_EXP 92
14122: PPUSH
14123: LD_INT 1
14125: PPUSH
14126: CALL_OW 3
14130: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14131: LD_ADDR_EXP 92
14135: PUSH
14136: LD_EXP 92
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: CALL_OW 3
14148: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14149: LD_VAR 0 1
14153: PPUSH
14154: CALL_OW 255
14158: PUSH
14159: LD_INT 7
14161: EQUAL
14162: IFFALSE 14236
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14164: LD_ADDR_EXP 94
14168: PUSH
14169: LD_EXP 94
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 3
14181: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14182: LD_ADDR_EXP 94
14186: PUSH
14187: LD_EXP 94
14191: PPUSH
14192: LD_INT 1
14194: PPUSH
14195: CALL_OW 3
14199: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14200: LD_ADDR_EXP 94
14204: PUSH
14205: LD_EXP 94
14209: PPUSH
14210: LD_INT 1
14212: PPUSH
14213: CALL_OW 3
14217: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14218: LD_ADDR_EXP 94
14222: PUSH
14223: LD_EXP 94
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 3
14235: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 255
14245: PUSH
14246: LD_INT 3
14248: EQUAL
14249: IFFALSE 14316
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 266
14260: PUSH
14261: LD_INT 32
14263: EQUAL
14264: PUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 266
14274: PUSH
14275: LD_INT 33
14277: EQUAL
14278: OR
14279: IFFALSE 14316
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: LD_INT 46
14288: PUSH
14289: LD_INT 47
14291: PUSH
14292: LD_INT 45
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 1
14302: PPUSH
14303: LD_INT 3
14305: PPUSH
14306: CALL_OW 12
14310: ARRAY
14311: PPUSH
14312: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14316: LD_VAR 0 1
14320: PPUSH
14321: CALL_OW 255
14325: PUSH
14326: LD_INT 8
14328: EQUAL
14329: PUSH
14330: LD_VAR 0 1
14334: PPUSH
14335: CALL_OW 266
14339: PUSH
14340: LD_INT 32
14342: EQUAL
14343: AND
14344: IFFALSE 14377
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14346: LD_VAR 0 1
14350: PPUSH
14351: LD_INT 28
14353: PUSH
14354: LD_INT 27
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 1
14363: PPUSH
14364: LD_INT 2
14366: PPUSH
14367: CALL_OW 12
14371: ARRAY
14372: PPUSH
14373: CALL_OW 431
// end ; end ;
14377: PPOPN 2
14379: END
// on EnterBuilding ( building , human ) do begin end ;
14380: PPOPN 2
14382: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 255
14392: PUSH
14393: LD_INT 6
14395: EQUAL
14396: IFFALSE 14414
// ruBehs = ruBehs ^ vehicle ;
14398: LD_ADDR_EXP 58
14402: PUSH
14403: LD_EXP 58
14407: PUSH
14408: LD_VAR 0 1
14412: ADD
14413: ST_TO_ADDR
// end ;
14414: PPOPN 1
14416: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14417: LD_INT 0
14419: PPUSH
14420: PPUSH
// begin if vehicle = powellVeh then
14421: LD_VAR 0 1
14425: PUSH
14426: LD_EXP 72
14430: EQUAL
14431: IFFALSE 14447
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 313
14442: PPUSH
14443: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 4
14459: EQUAL
14460: IFFALSE 14477
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14462: LD_VAR 0 1
14466: PPUSH
14467: LD_INT 58
14469: PPUSH
14470: LD_INT 63
14472: PPUSH
14473: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14477: LD_VAR 0 1
14481: PPUSH
14482: CALL_OW 255
14486: PUSH
14487: LD_INT 4
14489: EQUAL
14490: PUSH
14491: LD_EXP 68
14495: PUSH
14496: LD_INT 2
14498: EQUAL
14499: AND
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 264
14510: PUSH
14511: LD_INT 6
14513: EQUAL
14514: AND
14515: IFFALSE 14569
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14517: LD_EXP 65
14521: PUSH
14522: LD_INT 5
14524: ARRAY
14525: PPUSH
14526: CALL_OW 122
// wait ( 0 0$1 ) ;
14530: LD_INT 35
14532: PPUSH
14533: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
14537: LD_EXP 65
14541: PUSH
14542: LD_INT 5
14544: ARRAY
14545: PPUSH
14546: LD_INT 85
14548: PPUSH
14549: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
14553: LD_EXP 65
14557: PUSH
14558: LD_INT 5
14560: ARRAY
14561: PPUSH
14562: LD_INT 3
14564: PPUSH
14565: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 255
14578: PUSH
14579: LD_INT 4
14581: EQUAL
14582: PUSH
14583: LD_EXP 68
14587: PUSH
14588: LD_INT 2
14590: EQUAL
14591: AND
14592: PUSH
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 264
14602: PUSH
14603: LD_INT 3
14605: EQUAL
14606: AND
14607: IFFALSE 14634
// begin powellVeh = vehicle ;
14609: LD_ADDR_EXP 72
14613: PUSH
14614: LD_VAR 0 1
14618: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 49
14626: PPUSH
14627: LD_INT 74
14629: PPUSH
14630: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 255
14643: PUSH
14644: LD_INT 8
14646: EQUAL
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 248
14657: PUSH
14658: LD_INT 2
14660: EQUAL
14661: AND
14662: PUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: CALL_OW 247
14672: PUSH
14673: LD_INT 2
14675: EQUAL
14676: AND
14677: IFFALSE 14713
// begin legionVehicles = legionVehicles ^ vehicle ;
14679: LD_ADDR_EXP 54
14683: PUSH
14684: LD_EXP 54
14688: PUSH
14689: LD_VAR 0 1
14693: ADD
14694: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14695: LD_VAR 0 1
14699: PPUSH
14700: LD_EXP 55
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 255
14722: PUSH
14723: LD_INT 8
14725: EQUAL
14726: PUSH
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 248
14736: PUSH
14737: LD_INT 3
14739: EQUAL
14740: AND
14741: IFFALSE 15280
// begin ChangeMissionObjectives ( MlegionDel ) ;
14743: LD_STRING MlegionDel
14745: PPUSH
14746: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: LD_INT 1
14757: PPUSH
14758: LD_INT 2
14760: PPUSH
14761: CALL_OW 12
14765: ST_TO_ADDR
// legionRocket = vehicle ;
14766: LD_ADDR_EXP 98
14770: PUSH
14771: LD_VAR 0 1
14775: ST_TO_ADDR
// DialogueOn ;
14776: CALL_OW 6
// if legionBomb = 1 then
14780: LD_VAR 0 3
14784: PUSH
14785: LD_INT 1
14787: EQUAL
14788: IFFALSE 15140
// begin if Kurt then
14790: LD_EXP 30
14794: IFFALSE 14810
// Say ( Kurt , D12-Kurt-1 ) else
14796: LD_EXP 30
14800: PPUSH
14801: LD_STRING D12-Kurt-1
14803: PPUSH
14804: CALL_OW 88
14808: GO 14872
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14810: LD_INT 22
14812: PUSH
14813: LD_INT 8
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 21
14822: PUSH
14823: LD_INT 1
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 25
14832: PUSH
14833: LD_INT 1
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 26
14842: PUSH
14843: LD_INT 1
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PPUSH
14856: CALL_OW 69
14860: PUSH
14861: LD_INT 2
14863: ARRAY
14864: PPUSH
14865: LD_STRING D12-Kurt-1
14867: PPUSH
14868: CALL_OW 88
// DialogueOff ;
14872: CALL_OW 7
// wait ( 0 0$15 ) ;
14876: LD_INT 525
14878: PPUSH
14879: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: LD_INT 22
14890: PUSH
14891: LD_INT 1
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 21
14900: PUSH
14901: LD_INT 3
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 23
14910: PUSH
14911: LD_INT 1
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 2
14920: PUSH
14921: LD_INT 30
14923: PUSH
14924: LD_INT 0
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 30
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: PPUSH
14952: CALL_OW 69
14956: ST_TO_ADDR
// if rocketTarget = 0 then
14957: LD_VAR 0 4
14961: PUSH
14962: LD_INT 0
14964: EQUAL
14965: IFFALSE 15041
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
14967: LD_ADDR_VAR 0 4
14971: PUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 3
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 23
14994: PUSH
14995: LD_INT 2
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: LD_INT 30
15007: PUSH
15008: LD_INT 0
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 30
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PPUSH
15036: CALL_OW 69
15040: ST_TO_ADDR
// if rocketTarget = 0 then
15041: LD_VAR 0 4
15045: PUSH
15046: LD_INT 0
15048: EQUAL
15049: IFFALSE 15103
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15051: LD_ADDR_VAR 0 4
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 23
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 50
15088: PUSH
15089: EMPTY
15090: LIST
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: PPUSH
15098: CALL_OW 69
15102: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15103: LD_EXP 98
15107: PPUSH
15108: LD_VAR 0 4
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: CALL_OW 250
15121: PPUSH
15122: LD_VAR 0 4
15126: PUSH
15127: LD_INT 1
15129: ARRAY
15130: PPUSH
15131: CALL_OW 251
15135: PPUSH
15136: CALL_OW 116
// end ; if legionBomb = 2 then
15140: LD_VAR 0 3
15144: PUSH
15145: LD_INT 2
15147: EQUAL
15148: IFFALSE 15280
// begin if Kurt then
15150: LD_EXP 30
15154: IFFALSE 15170
// Say ( Kurt , D12a-Kurt-1 ) else
15156: LD_EXP 30
15160: PPUSH
15161: LD_STRING D12a-Kurt-1
15163: PPUSH
15164: CALL_OW 88
15168: GO 15232
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15170: LD_INT 22
15172: PUSH
15173: LD_INT 8
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 1
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 25
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 26
15202: PUSH
15203: LD_INT 1
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 69
15220: PUSH
15221: LD_INT 2
15223: ARRAY
15224: PPUSH
15225: LD_STRING D12a-Kurt-11
15227: PPUSH
15228: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15232: LD_EXP 28
15236: PPUSH
15237: LD_STRING D12a-Roth-1
15239: PPUSH
15240: CALL_OW 94
// DialogueOff ;
15244: CALL_OW 7
// wait ( 0 0$15 ) ;
15248: LD_INT 525
15250: PPUSH
15251: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15255: LD_EXP 98
15259: PPUSH
15260: LD_INT 23
15262: PPUSH
15263: CALL_OW 250
15267: PPUSH
15268: LD_INT 23
15270: PPUSH
15271: CALL_OW 251
15275: PPUSH
15276: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 255
15289: PUSH
15290: LD_INT 3
15292: EQUAL
15293: PUSH
15294: LD_VAR 0 1
15298: PPUSH
15299: CALL_OW 248
15303: PUSH
15304: LD_INT 3
15306: EQUAL
15307: AND
15308: PUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 247
15318: PUSH
15319: LD_INT 2
15321: EQUAL
15322: AND
15323: IFFALSE 15341
// RussianVehicles = RussianVehicles ^ vehicle ;
15325: LD_ADDR_EXP 60
15329: PUSH
15330: LD_EXP 60
15334: PUSH
15335: LD_VAR 0 1
15339: ADD
15340: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 255
15350: PUSH
15351: LD_INT 7
15353: EQUAL
15354: PUSH
15355: LD_VAR 0 1
15359: PPUSH
15360: CALL_OW 247
15364: PUSH
15365: LD_INT 2
15367: EQUAL
15368: AND
15369: IFFALSE 15428
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15371: LD_ADDR_EXP 61
15375: PUSH
15376: LD_EXP 61
15380: PUSH
15381: LD_VAR 0 1
15385: ADD
15386: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 263
15396: PUSH
15397: LD_INT 2
15399: EQUAL
15400: IFFALSE 15428
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15402: LD_VAR 0 1
15406: PPUSH
15407: LD_EXP 62
15411: PUSH
15412: LD_INT 1
15414: PPUSH
15415: LD_INT 3
15417: PPUSH
15418: CALL_OW 12
15422: ARRAY
15423: PPUSH
15424: CALL_OW 135
// end ; end ;
15428: PPOPN 4
15430: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15431: LD_VAR 0 1
15435: PPUSH
15436: CALL_OW 255
15440: PUSH
15441: LD_INT 4
15443: EQUAL
15444: PUSH
15445: LD_EXP 68
15449: PUSH
15450: LD_INT 1
15452: EQUAL
15453: AND
15454: IFFALSE 15557
// begin ComEnterUnit ( human , AmFact ) ;
15456: LD_VAR 0 2
15460: PPUSH
15461: LD_INT 85
15463: PPUSH
15464: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15468: LD_VAR 0 2
15472: PPUSH
15473: CALL_OW 258
15477: PUSH
15478: LD_INT 1
15480: EQUAL
15481: PUSH
15482: LD_EXP 101
15486: PUSH
15487: LD_INT 0
15489: EQUAL
15490: AND
15491: IFFALSE 15557
// begin blockEvent1 = 1 ;
15493: LD_ADDR_EXP 101
15497: PUSH
15498: LD_INT 1
15500: ST_TO_ADDR
// startAttacks = 1 ;
15501: LD_ADDR_EXP 71
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15509: LD_VAR 0 2
15513: PPUSH
15514: LD_STRING D4a-Sol1-1
15516: PPUSH
15517: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
15521: LD_EXP 17
15525: PPUSH
15526: LD_STRING D4a-Pow-1
15528: PPUSH
15529: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_STRING D4a-Sol1-2
15540: PPUSH
15541: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
15545: LD_EXP 17
15549: PPUSH
15550: LD_STRING D4a-Pow-2
15552: PPUSH
15553: CALL_OW 88
// end ; end ; end ;
15557: PPOPN 2
15559: END
// on UnitDestroyed ( unit ) do var i ;
15560: LD_INT 0
15562: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15563: LD_VAR 0 1
15567: PPUSH
15568: CALL_OW 255
15572: PUSH
15573: LD_INT 1
15575: EQUAL
15576: PUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 247
15586: PUSH
15587: LD_INT 1
15589: EQUAL
15590: AND
15591: IFFALSE 15607
// unitLost = unitLost + 1 ;
15593: LD_ADDR_EXP 97
15597: PUSH
15598: LD_EXP 97
15602: PUSH
15603: LD_INT 1
15605: PLUS
15606: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 255
15616: PUSH
15617: LD_INT 4
15619: EQUAL
15620: PUSH
15621: LD_VAR 0 1
15625: PPUSH
15626: CALL_OW 247
15630: PUSH
15631: LD_INT 1
15633: EQUAL
15634: AND
15635: IFFALSE 15685
// begin for i in amUnitsAttack do
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_EXP 65
15646: PUSH
15647: FOR_IN
15648: IFFALSE 15683
// if i = unit then
15650: LD_VAR 0 2
15654: PUSH
15655: LD_VAR 0 1
15659: EQUAL
15660: IFFALSE 15681
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
15662: LD_ADDR_EXP 65
15666: PUSH
15667: LD_EXP 65
15671: PUSH
15672: LD_VAR 0 1
15676: PUSH
15677: EMPTY
15678: LIST
15679: DIFF
15680: ST_TO_ADDR
15681: GO 15647
15683: POP
15684: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 255
15694: PUSH
15695: LD_INT 8
15697: EQUAL
15698: PUSH
15699: LD_VAR 0 1
15703: PPUSH
15704: CALL_OW 247
15708: PUSH
15709: LD_INT 2
15711: EQUAL
15712: AND
15713: PUSH
15714: LD_VAR 0 1
15718: PPUSH
15719: CALL_OW 248
15723: PUSH
15724: LD_INT 2
15726: EQUAL
15727: AND
15728: IFFALSE 15778
// begin for i in legionVehicles do
15730: LD_ADDR_VAR 0 2
15734: PUSH
15735: LD_EXP 54
15739: PUSH
15740: FOR_IN
15741: IFFALSE 15776
// if i = unit then
15743: LD_VAR 0 2
15747: PUSH
15748: LD_VAR 0 1
15752: EQUAL
15753: IFFALSE 15774
// legionVehicles = legionVehicles diff [ unit ] ;
15755: LD_ADDR_EXP 54
15759: PUSH
15760: LD_EXP 54
15764: PUSH
15765: LD_VAR 0 1
15769: PUSH
15770: EMPTY
15771: LIST
15772: DIFF
15773: ST_TO_ADDR
15774: GO 15740
15776: POP
15777: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 255
15787: PUSH
15788: LD_INT 3
15790: EQUAL
15791: PUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 247
15801: PUSH
15802: LD_INT 2
15804: EQUAL
15805: AND
15806: IFFALSE 15856
// begin for i in RussianVehicles do
15808: LD_ADDR_VAR 0 2
15812: PUSH
15813: LD_EXP 60
15817: PUSH
15818: FOR_IN
15819: IFFALSE 15854
// if i = unit then
15821: LD_VAR 0 2
15825: PUSH
15826: LD_VAR 0 1
15830: EQUAL
15831: IFFALSE 15852
// RussianVehicles = RussianVehicles diff [ unit ] ;
15833: LD_ADDR_EXP 60
15837: PUSH
15838: LD_EXP 60
15842: PUSH
15843: LD_VAR 0 1
15847: PUSH
15848: EMPTY
15849: LIST
15850: DIFF
15851: ST_TO_ADDR
15852: GO 15818
15854: POP
15855: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 255
15865: PUSH
15866: LD_INT 7
15868: EQUAL
15869: PUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 247
15879: PUSH
15880: LD_INT 2
15882: EQUAL
15883: AND
15884: IFFALSE 15934
// begin for i in AllianceVehicles do
15886: LD_ADDR_VAR 0 2
15890: PUSH
15891: LD_EXP 61
15895: PUSH
15896: FOR_IN
15897: IFFALSE 15932
// if i = unit then
15899: LD_VAR 0 2
15903: PUSH
15904: LD_VAR 0 1
15908: EQUAL
15909: IFFALSE 15930
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
15911: LD_ADDR_EXP 61
15915: PUSH
15916: LD_EXP 61
15920: PUSH
15921: LD_VAR 0 1
15925: PUSH
15926: EMPTY
15927: LIST
15928: DIFF
15929: ST_TO_ADDR
15930: GO 15896
15932: POP
15933: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15934: LD_VAR 0 1
15938: PPUSH
15939: CALL_OW 255
15943: PUSH
15944: LD_INT 3
15946: EQUAL
15947: PUSH
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL_OW 247
15957: PUSH
15958: LD_INT 3
15960: EQUAL
15961: AND
15962: IFFALSE 16654
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15964: LD_VAR 0 1
15968: PPUSH
15969: CALL_OW 266
15973: PUSH
15974: LD_INT 31
15976: EQUAL
15977: PUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 266
15987: PUSH
15988: LD_INT 32
15990: EQUAL
15991: OR
15992: PUSH
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 266
16002: PUSH
16003: LD_INT 36
16005: EQUAL
16006: OR
16007: PUSH
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL_OW 266
16017: PUSH
16018: LD_INT 0
16020: EQUAL
16021: OR
16022: PUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 266
16032: PUSH
16033: LD_INT 24
16035: EQUAL
16036: OR
16037: PUSH
16038: LD_VAR 0 1
16042: PPUSH
16043: CALL_OW 266
16047: PUSH
16048: LD_INT 17
16050: EQUAL
16051: OR
16052: PUSH
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL_OW 266
16062: PUSH
16063: LD_INT 25
16065: EQUAL
16066: OR
16067: PUSH
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 266
16077: PUSH
16078: LD_INT 19
16080: EQUAL
16081: OR
16082: PUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 266
16092: PUSH
16093: LD_INT 20
16095: EQUAL
16096: OR
16097: PUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 266
16107: PUSH
16108: LD_INT 18
16110: EQUAL
16111: OR
16112: PUSH
16113: LD_VAR 0 1
16117: PPUSH
16118: CALL_OW 266
16122: PUSH
16123: LD_INT 21
16125: EQUAL
16126: OR
16127: PUSH
16128: LD_VAR 0 1
16132: PPUSH
16133: CALL_OW 266
16137: PUSH
16138: LD_INT 23
16140: EQUAL
16141: OR
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 266
16152: PUSH
16153: LD_INT 16
16155: EQUAL
16156: OR
16157: PUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 266
16167: PUSH
16168: LD_INT 6
16170: EQUAL
16171: OR
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 266
16182: PUSH
16183: LD_INT 29
16185: EQUAL
16186: OR
16187: PUSH
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL_OW 266
16197: PUSH
16198: LD_INT 26
16200: EQUAL
16201: OR
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 266
16212: PUSH
16213: LD_INT 30
16215: EQUAL
16216: OR
16217: PUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 266
16227: PUSH
16228: LD_INT 28
16230: EQUAL
16231: OR
16232: PUSH
16233: LD_VAR 0 1
16237: PPUSH
16238: CALL_OW 266
16242: PUSH
16243: LD_INT 27
16245: EQUAL
16246: OR
16247: PUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 266
16257: PUSH
16258: LD_INT 33
16260: EQUAL
16261: OR
16262: PUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 266
16272: PUSH
16273: LD_INT 2
16275: EQUAL
16276: OR
16277: PUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 266
16287: PUSH
16288: LD_INT 4
16290: EQUAL
16291: OR
16292: IFFALSE 16378
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16294: LD_ADDR_EXP 93
16298: PUSH
16299: LD_EXP 93
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 266
16313: ADD
16314: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16315: LD_ADDR_EXP 93
16319: PUSH
16320: LD_EXP 93
16324: PUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 250
16334: ADD
16335: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16336: LD_ADDR_EXP 93
16340: PUSH
16341: LD_EXP 93
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 251
16355: ADD
16356: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16357: LD_ADDR_EXP 93
16361: PUSH
16362: LD_EXP 93
16366: PUSH
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 254
16376: ADD
16377: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 266
16387: PUSH
16388: LD_INT 1
16390: EQUAL
16391: IFFALSE 16470
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16393: LD_ADDR_EXP 93
16397: PUSH
16398: LD_EXP 93
16402: PUSH
16403: LD_INT 0
16405: ADD
16406: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16407: LD_ADDR_EXP 93
16411: PUSH
16412: LD_EXP 93
16416: PUSH
16417: LD_VAR 0 1
16421: PPUSH
16422: CALL_OW 250
16426: ADD
16427: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16428: LD_ADDR_EXP 93
16432: PUSH
16433: LD_EXP 93
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 251
16447: ADD
16448: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16449: LD_ADDR_EXP 93
16453: PUSH
16454: LD_EXP 93
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 254
16468: ADD
16469: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16470: LD_VAR 0 1
16474: PPUSH
16475: CALL_OW 266
16479: PUSH
16480: LD_INT 3
16482: EQUAL
16483: IFFALSE 16562
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16485: LD_ADDR_EXP 93
16489: PUSH
16490: LD_EXP 93
16494: PUSH
16495: LD_INT 2
16497: ADD
16498: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16499: LD_ADDR_EXP 93
16503: PUSH
16504: LD_EXP 93
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 250
16518: ADD
16519: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16520: LD_ADDR_EXP 93
16524: PUSH
16525: LD_EXP 93
16529: PUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 251
16539: ADD
16540: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16541: LD_ADDR_EXP 93
16545: PUSH
16546: LD_EXP 93
16550: PUSH
16551: LD_VAR 0 1
16555: PPUSH
16556: CALL_OW 254
16560: ADD
16561: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 266
16571: PUSH
16572: LD_INT 5
16574: EQUAL
16575: IFFALSE 16654
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
16577: LD_ADDR_EXP 93
16581: PUSH
16582: LD_EXP 93
16586: PUSH
16587: LD_INT 4
16589: ADD
16590: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16591: LD_ADDR_EXP 93
16595: PUSH
16596: LD_EXP 93
16600: PUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 250
16610: ADD
16611: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16612: LD_ADDR_EXP 93
16616: PUSH
16617: LD_EXP 93
16621: PUSH
16622: LD_VAR 0 1
16626: PPUSH
16627: CALL_OW 251
16631: ADD
16632: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16633: LD_ADDR_EXP 93
16637: PUSH
16638: LD_EXP 93
16642: PUSH
16643: LD_VAR 0 1
16647: PPUSH
16648: CALL_OW 254
16652: ADD
16653: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 255
16663: PUSH
16664: LD_INT 8
16666: EQUAL
16667: PUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL_OW 247
16677: PUSH
16678: LD_INT 3
16680: EQUAL
16681: AND
16682: PUSH
16683: LD_VAR 0 1
16687: PPUSH
16688: CALL_OW 248
16692: PUSH
16693: LD_INT 2
16695: EQUAL
16696: AND
16697: IFFALSE 17389
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 31
16711: EQUAL
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 266
16722: PUSH
16723: LD_INT 32
16725: EQUAL
16726: OR
16727: PUSH
16728: LD_VAR 0 1
16732: PPUSH
16733: CALL_OW 266
16737: PUSH
16738: LD_INT 36
16740: EQUAL
16741: OR
16742: PUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 266
16752: PUSH
16753: LD_INT 0
16755: EQUAL
16756: OR
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 266
16767: PUSH
16768: LD_INT 24
16770: EQUAL
16771: OR
16772: PUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 266
16782: PUSH
16783: LD_INT 17
16785: EQUAL
16786: OR
16787: PUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 266
16797: PUSH
16798: LD_INT 25
16800: EQUAL
16801: OR
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 266
16812: PUSH
16813: LD_INT 19
16815: EQUAL
16816: OR
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 266
16827: PUSH
16828: LD_INT 20
16830: EQUAL
16831: OR
16832: PUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 266
16842: PUSH
16843: LD_INT 18
16845: EQUAL
16846: OR
16847: PUSH
16848: LD_VAR 0 1
16852: PPUSH
16853: CALL_OW 266
16857: PUSH
16858: LD_INT 21
16860: EQUAL
16861: OR
16862: PUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL_OW 266
16872: PUSH
16873: LD_INT 23
16875: EQUAL
16876: OR
16877: PUSH
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 266
16887: PUSH
16888: LD_INT 16
16890: EQUAL
16891: OR
16892: PUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 266
16902: PUSH
16903: LD_INT 6
16905: EQUAL
16906: OR
16907: PUSH
16908: LD_VAR 0 1
16912: PPUSH
16913: CALL_OW 266
16917: PUSH
16918: LD_INT 29
16920: EQUAL
16921: OR
16922: PUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 266
16932: PUSH
16933: LD_INT 26
16935: EQUAL
16936: OR
16937: PUSH
16938: LD_VAR 0 1
16942: PPUSH
16943: CALL_OW 266
16947: PUSH
16948: LD_INT 30
16950: EQUAL
16951: OR
16952: PUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 266
16962: PUSH
16963: LD_INT 28
16965: EQUAL
16966: OR
16967: PUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 266
16977: PUSH
16978: LD_INT 27
16980: EQUAL
16981: OR
16982: PUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 266
16992: PUSH
16993: LD_INT 33
16995: EQUAL
16996: OR
16997: PUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 266
17007: PUSH
17008: LD_INT 2
17010: EQUAL
17011: OR
17012: PUSH
17013: LD_VAR 0 1
17017: PPUSH
17018: CALL_OW 266
17022: PUSH
17023: LD_INT 4
17025: EQUAL
17026: OR
17027: IFFALSE 17113
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17029: LD_ADDR_EXP 92
17033: PUSH
17034: LD_EXP 92
17038: PUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: CALL_OW 266
17048: ADD
17049: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17050: LD_ADDR_EXP 92
17054: PUSH
17055: LD_EXP 92
17059: PUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 250
17069: ADD
17070: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17071: LD_ADDR_EXP 92
17075: PUSH
17076: LD_EXP 92
17080: PUSH
17081: LD_VAR 0 1
17085: PPUSH
17086: CALL_OW 251
17090: ADD
17091: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17092: LD_ADDR_EXP 92
17096: PUSH
17097: LD_EXP 92
17101: PUSH
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 254
17111: ADD
17112: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17113: LD_VAR 0 1
17117: PPUSH
17118: CALL_OW 266
17122: PUSH
17123: LD_INT 1
17125: EQUAL
17126: IFFALSE 17205
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17128: LD_ADDR_EXP 92
17132: PUSH
17133: LD_EXP 92
17137: PUSH
17138: LD_INT 0
17140: ADD
17141: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17142: LD_ADDR_EXP 92
17146: PUSH
17147: LD_EXP 92
17151: PUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 250
17161: ADD
17162: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17163: LD_ADDR_EXP 92
17167: PUSH
17168: LD_EXP 92
17172: PUSH
17173: LD_VAR 0 1
17177: PPUSH
17178: CALL_OW 251
17182: ADD
17183: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17184: LD_ADDR_EXP 92
17188: PUSH
17189: LD_EXP 92
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 254
17203: ADD
17204: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17205: LD_VAR 0 1
17209: PPUSH
17210: CALL_OW 266
17214: PUSH
17215: LD_INT 3
17217: EQUAL
17218: IFFALSE 17297
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17220: LD_ADDR_EXP 92
17224: PUSH
17225: LD_EXP 92
17229: PUSH
17230: LD_INT 2
17232: ADD
17233: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17234: LD_ADDR_EXP 92
17238: PUSH
17239: LD_EXP 92
17243: PUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 250
17253: ADD
17254: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17255: LD_ADDR_EXP 92
17259: PUSH
17260: LD_EXP 92
17264: PUSH
17265: LD_VAR 0 1
17269: PPUSH
17270: CALL_OW 251
17274: ADD
17275: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17276: LD_ADDR_EXP 92
17280: PUSH
17281: LD_EXP 92
17285: PUSH
17286: LD_VAR 0 1
17290: PPUSH
17291: CALL_OW 254
17295: ADD
17296: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 266
17306: PUSH
17307: LD_INT 5
17309: EQUAL
17310: IFFALSE 17389
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17312: LD_ADDR_EXP 92
17316: PUSH
17317: LD_EXP 92
17321: PUSH
17322: LD_INT 4
17324: ADD
17325: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17326: LD_ADDR_EXP 92
17330: PUSH
17331: LD_EXP 92
17335: PUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 250
17345: ADD
17346: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17347: LD_ADDR_EXP 92
17351: PUSH
17352: LD_EXP 92
17356: PUSH
17357: LD_VAR 0 1
17361: PPUSH
17362: CALL_OW 251
17366: ADD
17367: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17368: LD_ADDR_EXP 92
17372: PUSH
17373: LD_EXP 92
17377: PUSH
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 254
17387: ADD
17388: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 255
17398: PUSH
17399: LD_INT 7
17401: EQUAL
17402: PUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 247
17412: PUSH
17413: LD_INT 3
17415: EQUAL
17416: AND
17417: IFFALSE 18109
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17419: LD_VAR 0 1
17423: PPUSH
17424: CALL_OW 266
17428: PUSH
17429: LD_INT 31
17431: EQUAL
17432: PUSH
17433: LD_VAR 0 1
17437: PPUSH
17438: CALL_OW 266
17442: PUSH
17443: LD_INT 32
17445: EQUAL
17446: OR
17447: PUSH
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 266
17457: PUSH
17458: LD_INT 36
17460: EQUAL
17461: OR
17462: PUSH
17463: LD_VAR 0 1
17467: PPUSH
17468: CALL_OW 266
17472: PUSH
17473: LD_INT 0
17475: EQUAL
17476: OR
17477: PUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 266
17487: PUSH
17488: LD_INT 24
17490: EQUAL
17491: OR
17492: PUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 266
17502: PUSH
17503: LD_INT 17
17505: EQUAL
17506: OR
17507: PUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 266
17517: PUSH
17518: LD_INT 25
17520: EQUAL
17521: OR
17522: PUSH
17523: LD_VAR 0 1
17527: PPUSH
17528: CALL_OW 266
17532: PUSH
17533: LD_INT 19
17535: EQUAL
17536: OR
17537: PUSH
17538: LD_VAR 0 1
17542: PPUSH
17543: CALL_OW 266
17547: PUSH
17548: LD_INT 20
17550: EQUAL
17551: OR
17552: PUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 266
17562: PUSH
17563: LD_INT 18
17565: EQUAL
17566: OR
17567: PUSH
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 266
17577: PUSH
17578: LD_INT 21
17580: EQUAL
17581: OR
17582: PUSH
17583: LD_VAR 0 1
17587: PPUSH
17588: CALL_OW 266
17592: PUSH
17593: LD_INT 23
17595: EQUAL
17596: OR
17597: PUSH
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 266
17607: PUSH
17608: LD_INT 16
17610: EQUAL
17611: OR
17612: PUSH
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 266
17622: PUSH
17623: LD_INT 6
17625: EQUAL
17626: OR
17627: PUSH
17628: LD_VAR 0 1
17632: PPUSH
17633: CALL_OW 266
17637: PUSH
17638: LD_INT 29
17640: EQUAL
17641: OR
17642: PUSH
17643: LD_VAR 0 1
17647: PPUSH
17648: CALL_OW 266
17652: PUSH
17653: LD_INT 26
17655: EQUAL
17656: OR
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 266
17667: PUSH
17668: LD_INT 30
17670: EQUAL
17671: OR
17672: PUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 266
17682: PUSH
17683: LD_INT 28
17685: EQUAL
17686: OR
17687: PUSH
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 266
17697: PUSH
17698: LD_INT 27
17700: EQUAL
17701: OR
17702: PUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 266
17712: PUSH
17713: LD_INT 33
17715: EQUAL
17716: OR
17717: PUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: CALL_OW 266
17727: PUSH
17728: LD_INT 2
17730: EQUAL
17731: OR
17732: PUSH
17733: LD_VAR 0 1
17737: PPUSH
17738: CALL_OW 266
17742: PUSH
17743: LD_INT 4
17745: EQUAL
17746: OR
17747: IFFALSE 17833
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
17749: LD_ADDR_EXP 94
17753: PUSH
17754: LD_EXP 94
17758: PUSH
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 266
17768: ADD
17769: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17770: LD_ADDR_EXP 94
17774: PUSH
17775: LD_EXP 94
17779: PUSH
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 250
17789: ADD
17790: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17791: LD_ADDR_EXP 94
17795: PUSH
17796: LD_EXP 94
17800: PUSH
17801: LD_VAR 0 1
17805: PPUSH
17806: CALL_OW 251
17810: ADD
17811: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17812: LD_ADDR_EXP 94
17816: PUSH
17817: LD_EXP 94
17821: PUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 254
17831: ADD
17832: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 266
17842: PUSH
17843: LD_INT 1
17845: EQUAL
17846: IFFALSE 17925
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
17848: LD_ADDR_EXP 94
17852: PUSH
17853: LD_EXP 94
17857: PUSH
17858: LD_INT 0
17860: ADD
17861: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17862: LD_ADDR_EXP 94
17866: PUSH
17867: LD_EXP 94
17871: PUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 250
17881: ADD
17882: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17883: LD_ADDR_EXP 94
17887: PUSH
17888: LD_EXP 94
17892: PUSH
17893: LD_VAR 0 1
17897: PPUSH
17898: CALL_OW 251
17902: ADD
17903: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17904: LD_ADDR_EXP 94
17908: PUSH
17909: LD_EXP 94
17913: PUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 254
17923: ADD
17924: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17925: LD_VAR 0 1
17929: PPUSH
17930: CALL_OW 266
17934: PUSH
17935: LD_INT 3
17937: EQUAL
17938: IFFALSE 18017
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
17940: LD_ADDR_EXP 94
17944: PUSH
17945: LD_EXP 94
17949: PUSH
17950: LD_INT 2
17952: ADD
17953: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17954: LD_ADDR_EXP 94
17958: PUSH
17959: LD_EXP 94
17963: PUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 250
17973: ADD
17974: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17975: LD_ADDR_EXP 94
17979: PUSH
17980: LD_EXP 94
17984: PUSH
17985: LD_VAR 0 1
17989: PPUSH
17990: CALL_OW 251
17994: ADD
17995: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17996: LD_ADDR_EXP 94
18000: PUSH
18001: LD_EXP 94
18005: PUSH
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 254
18015: ADD
18016: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 266
18026: PUSH
18027: LD_INT 5
18029: EQUAL
18030: IFFALSE 18109
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18032: LD_ADDR_EXP 94
18036: PUSH
18037: LD_EXP 94
18041: PUSH
18042: LD_INT 4
18044: ADD
18045: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18046: LD_ADDR_EXP 94
18050: PUSH
18051: LD_EXP 94
18055: PUSH
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 250
18065: ADD
18066: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18067: LD_ADDR_EXP 94
18071: PUSH
18072: LD_EXP 94
18076: PUSH
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 251
18086: ADD
18087: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18088: LD_ADDR_EXP 94
18092: PUSH
18093: LD_EXP 94
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 254
18107: ADD
18108: ST_TO_ADDR
// end ; end ; end ;
18109: PPOPN 2
18111: END
// on UnitKamikazed ( unit ) do var i ;
18112: LD_INT 0
18114: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 255
18124: PUSH
18125: LD_INT 8
18127: EQUAL
18128: PUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 247
18138: PUSH
18139: LD_INT 2
18141: EQUAL
18142: AND
18143: PUSH
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 248
18153: PUSH
18154: LD_INT 2
18156: EQUAL
18157: AND
18158: IFFALSE 18208
// begin for i in legionVehicles do
18160: LD_ADDR_VAR 0 2
18164: PUSH
18165: LD_EXP 54
18169: PUSH
18170: FOR_IN
18171: IFFALSE 18206
// if i = unit then
18173: LD_VAR 0 2
18177: PUSH
18178: LD_VAR 0 1
18182: EQUAL
18183: IFFALSE 18204
// legionVehicles = legionVehicles diff [ unit ] ;
18185: LD_ADDR_EXP 54
18189: PUSH
18190: LD_EXP 54
18194: PUSH
18195: LD_VAR 0 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: DIFF
18203: ST_TO_ADDR
18204: GO 18170
18206: POP
18207: POP
// end ; end ;
18208: PPOPN 2
18210: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18211: LD_VAR 0 2
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: LD_INT 29
18223: PPUSH
18224: CALL_OW 309
18228: IFFALSE 18288
// begin if GetSide ( unit ) = 1 then
18230: LD_VAR 0 1
18234: PPUSH
18235: CALL_OW 255
18239: PUSH
18240: LD_INT 1
18242: EQUAL
18243: IFFALSE 18259
// begin wait ( 0 0$6 ) ;
18245: LD_INT 210
18247: PPUSH
18248: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18252: LD_STRING Motherlode2
18254: PPUSH
18255: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18259: LD_VAR 0 1
18263: PPUSH
18264: CALL_OW 255
18268: PUSH
18269: LD_INT 8
18271: EQUAL
18272: IFFALSE 18288
// begin wait ( 0 0$6 ) ;
18274: LD_INT 210
18276: PPUSH
18277: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18281: LD_STRING Motherlode1
18283: PPUSH
18284: CALL_OW 104
// end ; end ; end ;
18288: PPOPN 3
18290: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18291: LD_VAR 0 1
18295: PPUSH
18296: CALL_OW 255
18300: PUSH
18301: LD_INT 2
18303: EQUAL
18304: IFFALSE 18313
// YouLost ( Motherlode3 ) ;
18306: LD_STRING Motherlode3
18308: PPUSH
18309: CALL_OW 104
// end ; end_of_file
18313: PPOPN 3
18315: END
// every 3 3$0 do
18316: GO 18318
18318: DISABLE
// begin enable ;
18319: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18320: LD_ADDR_EXP 86
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: PPUSH
18338: LD_INT 2
18340: PPUSH
18341: CALL_OW 12
18345: ARRAY
18346: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18347: LD_INT 22
18349: PUSH
18350: LD_INT 8
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 21
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL_OW 69
18375: PUSH
18376: LD_INT 1
18378: GREATER
18379: IFFALSE 18410
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
18381: LD_ADDR_EXP 88
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: LD_INT 8
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_INT 2
18401: PPUSH
18402: CALL_OW 12
18406: ARRAY
18407: ST_TO_ADDR
18408: GO 18418
// RussianTarget = 1 ;
18410: LD_ADDR_EXP 88
18414: PUSH
18415: LD_INT 1
18417: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18418: LD_INT 22
18420: PUSH
18421: LD_INT 8
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 21
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PPUSH
18442: CALL_OW 69
18446: PUSH
18447: LD_INT 1
18449: GREATER
18450: IFFALSE 18485
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
18452: LD_ADDR_EXP 87
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 3
18462: PUSH
18463: LD_INT 8
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: PPUSH
18474: LD_INT 3
18476: PPUSH
18477: CALL_OW 12
18481: ARRAY
18482: ST_TO_ADDR
18483: GO 18512
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18485: LD_ADDR_EXP 87
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: LD_INT 3
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: PPUSH
18503: LD_INT 2
18505: PPUSH
18506: CALL_OW 12
18510: ARRAY
18511: ST_TO_ADDR
// end ;
18512: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
18513: LD_EXP 67
18517: PUSH
18518: LD_INT 1
18520: EQUAL
18521: IFFALSE 19098
18523: GO 18525
18525: DISABLE
18526: LD_INT 0
18528: PPUSH
18529: PPUSH
// begin for i = 1 to 4 do
18530: LD_ADDR_VAR 0 1
18534: PUSH
18535: DOUBLE
18536: LD_INT 1
18538: DEC
18539: ST_TO_ADDR
18540: LD_INT 4
18542: PUSH
18543: FOR_TO
18544: IFFALSE 18584
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
18546: LD_EXP 65
18550: PUSH
18551: LD_VAR 0 1
18555: ARRAY
18556: PPUSH
18557: LD_INT 85
18559: PPUSH
18560: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
18564: LD_EXP 65
18568: PUSH
18569: LD_VAR 0 1
18573: ARRAY
18574: PPUSH
18575: LD_INT 3
18577: PPUSH
18578: CALL_OW 183
// end ;
18582: GO 18543
18584: POP
18585: POP
// wait ( 0 0$1 ) ;
18586: LD_INT 35
18588: PPUSH
18589: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18593: LD_ADDR_VAR 0 2
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_INT 4
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 21
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 56
18620: PUSH
18621: EMPTY
18622: LIST
18623: PUSH
18624: LD_INT 3
18626: PUSH
18627: LD_INT 60
18629: PUSH
18630: EMPTY
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 17
18652: PUSH
18653: EMPTY
18654: LIST
18655: DIFF
18656: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
18657: LD_VAR 0 2
18661: PUSH
18662: LD_INT 1
18664: ARRAY
18665: PPUSH
18666: LD_INT 235
18668: PPUSH
18669: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
18673: LD_VAR 0 2
18677: PUSH
18678: LD_INT 2
18680: ARRAY
18681: PPUSH
18682: LD_INT 2
18684: PPUSH
18685: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
18689: LD_VAR 0 2
18693: PUSH
18694: LD_INT 3
18696: ARRAY
18697: PPUSH
18698: LD_INT 2
18700: PPUSH
18701: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
18705: LD_INT 30
18707: PPUSH
18708: LD_INT 49
18710: PPUSH
18711: LD_INT 4
18713: PPUSH
18714: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
18718: LD_INT 91
18720: PPUSH
18721: LD_INT 10
18723: PPUSH
18724: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
18728: LD_INT 91
18730: PPUSH
18731: LD_INT 11
18733: PPUSH
18734: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
18738: LD_INT 22
18740: PUSH
18741: LD_INT 4
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 25
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: PPUSH
18767: LD_INT 30
18769: PPUSH
18770: LD_INT 30
18772: PPUSH
18773: LD_INT 49
18775: PPUSH
18776: LD_INT 1
18778: PPUSH
18779: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
18783: LD_INT 22
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 25
18795: PUSH
18796: LD_INT 2
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 69
18811: PPUSH
18812: LD_INT 32
18814: PPUSH
18815: LD_INT 55
18817: PPUSH
18818: LD_INT 56
18820: PPUSH
18821: LD_INT 4
18823: PPUSH
18824: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
18828: LD_INT 22
18830: PUSH
18831: LD_INT 4
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 25
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: PPUSH
18857: LD_INT 32
18859: PPUSH
18860: LD_INT 63
18862: PPUSH
18863: LD_INT 71
18865: PPUSH
18866: LD_INT 4
18868: PPUSH
18869: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
18873: LD_INT 22
18875: PUSH
18876: LD_INT 4
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 25
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PPUSH
18897: CALL_OW 69
18901: PPUSH
18902: LD_INT 28
18904: PPUSH
18905: LD_INT 40
18907: PPUSH
18908: LD_INT 72
18910: PPUSH
18911: LD_INT 4
18913: PPUSH
18914: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
18918: LD_INT 22
18920: PUSH
18921: LD_INT 4
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 25
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PPUSH
18942: CALL_OW 69
18946: PPUSH
18947: LD_INT 27
18949: PPUSH
18950: LD_INT 45
18952: PPUSH
18953: LD_INT 73
18955: PPUSH
18956: LD_INT 4
18958: PPUSH
18959: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
18963: LD_INT 22
18965: PUSH
18966: LD_INT 4
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 25
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: PPUSH
18992: LD_INT 18
18994: PPUSH
18995: LD_INT 37
18997: PPUSH
18998: LD_INT 50
19000: PPUSH
19001: LD_INT 2
19003: PPUSH
19004: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
19008: LD_INT 22
19010: PUSH
19011: LD_INT 4
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PPUSH
19032: CALL_OW 69
19036: PPUSH
19037: LD_INT 17
19039: PPUSH
19040: LD_INT 41
19042: PPUSH
19043: LD_INT 51
19045: PPUSH
19046: LD_INT 3
19048: PPUSH
19049: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
19053: LD_INT 22
19055: PUSH
19056: LD_INT 4
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 25
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PPUSH
19077: CALL_OW 69
19081: PPUSH
19082: LD_INT 21
19084: PPUSH
19085: LD_INT 38
19087: PPUSH
19088: LD_INT 54
19090: PPUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL_OW 205
// end ;
19098: PPOPN 2
19100: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19101: LD_INT 235
19103: PPUSH
19104: LD_INT 10
19106: PPUSH
19107: CALL_OW 308
19111: PUSH
19112: LD_EXP 69
19116: PUSH
19117: LD_INT 1
19119: EQUAL
19120: AND
19121: IFFALSE 19145
19123: GO 19125
19125: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19126: LD_INT 235
19128: PPUSH
19129: CALL_OW 313
19133: PPUSH
19134: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19138: LD_INT 84
19140: PPUSH
19141: CALL_OW 146
// end ;
19145: END
// every 0 0$1 trigger legionAI = 1 do
19146: LD_EXP 83
19150: PUSH
19151: LD_INT 1
19153: EQUAL
19154: IFFALSE 19217
19156: GO 19158
19158: DISABLE
// begin enable ;
19159: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19160: LD_INT 8
19162: PPUSH
19163: LD_INT 99
19165: PPUSH
19166: LD_INT 11
19168: PPUSH
19169: LD_EXP 92
19173: PPUSH
19174: CALL 9606 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19178: LD_INT 8
19180: PPUSH
19181: LD_INT 20
19183: PPUSH
19184: LD_INT 11
19186: PPUSH
19187: LD_INT 252
19189: PUSH
19190: EMPTY
19191: LIST
19192: PPUSH
19193: CALL 10015 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19197: LD_INT 8
19199: PPUSH
19200: LD_INT 1
19202: PPUSH
19203: CALL 11349 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19207: LD_INT 8
19209: PPUSH
19210: LD_INT 11
19212: PPUSH
19213: CALL 10921 0 2
// end ;
19217: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19218: LD_EXP 83
19222: PUSH
19223: LD_INT 1
19225: EQUAL
19226: PUSH
19227: LD_EXP 100
19231: PUSH
19232: LD_INT 1
19234: GREATEREQUAL
19235: AND
19236: PUSH
19237: LD_EXP 54
19241: PUSH
19242: EMPTY
19243: EQUAL
19244: AND
19245: PUSH
19246: LD_INT 117
19248: PPUSH
19249: CALL_OW 302
19253: AND
19254: PUSH
19255: LD_INT 117
19257: PPUSH
19258: CALL_OW 255
19262: PUSH
19263: LD_INT 8
19265: EQUAL
19266: AND
19267: IFFALSE 19330
19269: GO 19271
19271: DISABLE
// begin enable ;
19272: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19273: LD_INT 8
19275: PPUSH
19276: LD_INT 117
19278: PPUSH
19279: LD_INT 5
19281: PUSH
19282: LD_INT 6
19284: PUSH
19285: LD_INT 7
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: LIST
19292: PUSH
19293: LD_OWVAR 67
19297: ARRAY
19298: PPUSH
19299: LD_INT 27
19301: PUSH
19302: LD_INT 28
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 29
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: PPUSH
19317: LD_INT 3
19319: PPUSH
19320: LD_INT 2
19322: PPUSH
19323: LD_INT 14
19325: PPUSH
19326: CALL 11579 0 7
// end ;
19330: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19331: LD_EXP 83
19335: PUSH
19336: LD_INT 1
19338: EQUAL
19339: PUSH
19340: LD_EXP 100
19344: PUSH
19345: LD_INT 1
19347: GREATEREQUAL
19348: AND
19349: PUSH
19350: LD_EXP 54
19354: PUSH
19355: LD_INT 5
19357: PUSH
19358: LD_INT 6
19360: PUSH
19361: LD_INT 7
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: LD_OWVAR 67
19373: ARRAY
19374: EQUAL
19375: AND
19376: IFFALSE 19394
19378: GO 19380
19380: DISABLE
// begin enable ;
19381: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
19382: LD_EXP 86
19386: PPUSH
19387: LD_INT 1
19389: PPUSH
19390: CALL 11653 0 2
// end ;
19394: END
// every 0 0$1 do
19395: GO 19397
19397: DISABLE
// begin enable ;
19398: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19399: LD_INT 6
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: CALL 12588 0 2
// end ;
19409: END
// every 0 0$1 trigger RussianAI = 1 do
19410: LD_EXP 85
19414: PUSH
19415: LD_INT 1
19417: EQUAL
19418: IFFALSE 19507
19420: GO 19422
19422: DISABLE
// begin enable ;
19423: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19424: LD_INT 3
19426: PPUSH
19427: LD_INT 26
19429: PPUSH
19430: LD_INT 21
19432: PPUSH
19433: LD_EXP 93
19437: PPUSH
19438: CALL 9606 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19442: LD_INT 3
19444: PPUSH
19445: LD_INT 22
19447: PPUSH
19448: LD_INT 21
19450: PPUSH
19451: LD_INT 2
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL 10015 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19465: LD_INT 3
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: CALL 11349 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19475: LD_INT 3
19477: PPUSH
19478: LD_EXP 88
19482: PPUSH
19483: CALL 12588 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19487: LD_INT 3
19489: PPUSH
19490: LD_INT 21
19492: PPUSH
19493: CALL 10921 0 2
// CraneRepairBuild ( 3 , RussianBaseArea ) ;
19497: LD_INT 3
19499: PPUSH
19500: LD_INT 21
19502: PPUSH
19503: CALL 10741 0 2
// end ;
19507: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19508: LD_EXP 85
19512: PUSH
19513: LD_INT 1
19515: EQUAL
19516: PUSH
19517: LD_EXP 100
19521: PUSH
19522: LD_INT 3
19524: GREATEREQUAL
19525: AND
19526: PUSH
19527: LD_EXP 60
19531: PUSH
19532: EMPTY
19533: EQUAL
19534: AND
19535: PUSH
19536: LD_INT 10
19538: PPUSH
19539: CALL_OW 302
19543: AND
19544: PUSH
19545: LD_INT 10
19547: PPUSH
19548: CALL_OW 255
19552: PUSH
19553: LD_INT 3
19555: EQUAL
19556: AND
19557: PUSH
19558: LD_INT 4
19560: PPUSH
19561: CALL_OW 302
19565: AND
19566: PUSH
19567: LD_INT 4
19569: PPUSH
19570: CALL_OW 255
19574: PUSH
19575: LD_INT 3
19577: EQUAL
19578: AND
19579: IFFALSE 19699
19581: GO 19583
19583: DISABLE
// begin enable ;
19584: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19585: LD_INT 3
19587: PPUSH
19588: LD_INT 4
19590: PPUSH
19591: LD_INT 4
19593: PUSH
19594: LD_INT 5
19596: PUSH
19597: LD_INT 6
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: LD_OWVAR 67
19609: ARRAY
19610: PPUSH
19611: LD_INT 45
19613: PUSH
19614: LD_INT 46
19616: PUSH
19617: LD_INT 47
19619: PUSH
19620: LD_INT 49
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: PPUSH
19629: LD_INT 3
19631: PPUSH
19632: LD_INT 3
19634: PPUSH
19635: LD_INT 24
19637: PPUSH
19638: CALL 11579 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19642: LD_INT 3
19644: PPUSH
19645: LD_INT 10
19647: PPUSH
19648: LD_INT 4
19650: PUSH
19651: LD_INT 5
19653: PUSH
19654: LD_INT 6
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: PUSH
19662: LD_OWVAR 67
19666: ARRAY
19667: PPUSH
19668: LD_INT 45
19670: PUSH
19671: LD_INT 46
19673: PUSH
19674: LD_INT 47
19676: PUSH
19677: LD_INT 49
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: PPUSH
19686: LD_INT 3
19688: PPUSH
19689: LD_INT 3
19691: PPUSH
19692: LD_INT 24
19694: PPUSH
19695: CALL 11579 0 7
// end ;
19699: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19700: LD_EXP 85
19704: PUSH
19705: LD_INT 1
19707: EQUAL
19708: PUSH
19709: LD_EXP 100
19713: PUSH
19714: LD_INT 3
19716: GREATEREQUAL
19717: AND
19718: PUSH
19719: LD_EXP 60
19723: PUSH
19724: LD_INT 8
19726: PUSH
19727: LD_INT 10
19729: PUSH
19730: LD_INT 12
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: PUSH
19738: LD_OWVAR 67
19742: ARRAY
19743: EQUAL
19744: AND
19745: IFFALSE 19857
19747: GO 19749
19749: DISABLE
// begin enable ;
19750: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19751: LD_INT 22
19753: PUSH
19754: LD_INT 3
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 21
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 3
19773: PUSH
19774: LD_INT 34
19776: PUSH
19777: LD_INT 48
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 3
19790: PUSH
19791: LD_INT 60
19793: PUSH
19794: EMPTY
19795: LIST
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 69
19811: PPUSH
19812: LD_INT 24
19814: PUSH
19815: LD_INT 25
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: PPUSH
19825: LD_INT 2
19827: PPUSH
19828: CALL_OW 12
19832: ARRAY
19833: PPUSH
19834: CALL_OW 120
// wait ( 0 0$20 ) ;
19838: LD_INT 700
19840: PPUSH
19841: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19845: LD_EXP 88
19849: PPUSH
19850: LD_INT 2
19852: PPUSH
19853: CALL 11653 0 2
// end ;
19857: END
// every 0 0$1 trigger AllianceAI = 1 do
19858: LD_EXP 84
19862: PUSH
19863: LD_INT 1
19865: EQUAL
19866: IFFALSE 19949
19868: GO 19870
19870: DISABLE
// begin enable ;
19871: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19872: LD_INT 7
19874: PPUSH
19875: LD_INT 45
19877: PPUSH
19878: LD_INT 23
19880: PPUSH
19881: LD_EXP 94
19885: PPUSH
19886: CALL 9606 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
19890: LD_INT 7
19892: PPUSH
19893: LD_INT 24
19895: PPUSH
19896: LD_INT 23
19898: PPUSH
19899: LD_INT 46
19901: PUSH
19902: LD_INT 39
19904: PUSH
19905: LD_INT 133
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: PPUSH
19913: CALL 10015 0 4
// AttackNearBuildings ( 7 , 1 ) ;
19917: LD_INT 7
19919: PPUSH
19920: LD_INT 1
19922: PPUSH
19923: CALL 11349 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
19927: LD_INT 7
19929: PPUSH
19930: LD_EXP 87
19934: PPUSH
19935: CALL 12588 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
19939: LD_INT 7
19941: PPUSH
19942: LD_INT 23
19944: PPUSH
19945: CALL 10921 0 2
// end ;
19949: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
19950: LD_EXP 84
19954: PUSH
19955: LD_INT 1
19957: EQUAL
19958: PUSH
19959: LD_EXP 100
19963: PUSH
19964: LD_INT 4
19966: GREATEREQUAL
19967: AND
19968: PUSH
19969: LD_EXP 61
19973: PUSH
19974: EMPTY
19975: EQUAL
19976: AND
19977: PUSH
19978: LD_INT 156
19980: PPUSH
19981: CALL_OW 302
19985: AND
19986: PUSH
19987: LD_INT 156
19989: PPUSH
19990: CALL_OW 255
19994: PUSH
19995: LD_INT 7
19997: EQUAL
19998: AND
19999: PUSH
20000: LD_INT 162
20002: PPUSH
20003: CALL_OW 302
20007: AND
20008: PUSH
20009: LD_INT 162
20011: PPUSH
20012: CALL_OW 255
20016: PUSH
20017: LD_INT 7
20019: EQUAL
20020: AND
20021: IFFALSE 20137
20023: GO 20025
20025: DISABLE
// begin enable ;
20026: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20027: LD_INT 3
20029: PPUSH
20030: LD_INT 156
20032: PPUSH
20033: LD_INT 3
20035: PUSH
20036: LD_INT 3
20038: PUSH
20039: LD_INT 4
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: PUSH
20047: LD_OWVAR 67
20051: ARRAY
20052: PPUSH
20053: LD_INT 9
20055: PUSH
20056: LD_INT 10
20058: PUSH
20059: LD_INT 7
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: PPUSH
20067: LD_INT 3
20069: PPUSH
20070: LD_INT 2
20072: PPUSH
20073: LD_INT 5
20075: PPUSH
20076: CALL 11579 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20080: LD_INT 3
20082: PPUSH
20083: LD_INT 162
20085: PPUSH
20086: LD_INT 2
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 3
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_OWVAR 67
20104: ARRAY
20105: PPUSH
20106: LD_INT 45
20108: PUSH
20109: LD_INT 46
20111: PUSH
20112: LD_INT 47
20114: PUSH
20115: LD_INT 49
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: PPUSH
20124: LD_INT 3
20126: PPUSH
20127: LD_INT 3
20129: PPUSH
20130: LD_INT 24
20132: PPUSH
20133: CALL 11579 0 7
// end ;
20137: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20138: LD_EXP 84
20142: PUSH
20143: LD_INT 1
20145: EQUAL
20146: PUSH
20147: LD_EXP 100
20151: PUSH
20152: LD_INT 4
20154: GREATEREQUAL
20155: AND
20156: PUSH
20157: LD_EXP 61
20161: PUSH
20162: LD_INT 5
20164: PUSH
20165: LD_INT 5
20167: PUSH
20168: LD_INT 7
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: PUSH
20176: LD_OWVAR 67
20180: ARRAY
20181: EQUAL
20182: AND
20183: IFFALSE 20242
20185: GO 20187
20187: DISABLE
20188: LD_INT 0
20190: PPUSH
// begin for i in AllianceVehicles do
20191: LD_ADDR_VAR 0 1
20195: PUSH
20196: LD_EXP 61
20200: PUSH
20201: FOR_IN
20202: IFFALSE 20227
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20204: LD_VAR 0 1
20208: PPUSH
20209: LD_INT 117
20211: PPUSH
20212: LD_INT 112
20214: PPUSH
20215: LD_INT 10
20217: PPUSH
20218: LD_INT 1
20220: PPUSH
20221: CALL_OW 483
20225: GO 20201
20227: POP
20228: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20229: LD_EXP 87
20233: PPUSH
20234: LD_INT 3
20236: PPUSH
20237: CALL 11653 0 2
// enable ;
20241: ENABLE
// end ;
20242: PPOPN 1
20244: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20245: LD_EXP 84
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: PUSH
20254: LD_EXP 100
20258: PUSH
20259: LD_INT 4
20261: GREATEREQUAL
20262: AND
20263: IFFALSE 20444
20265: GO 20267
20267: DISABLE
20268: LD_INT 0
20270: PPUSH
// begin enable ;
20271: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20272: LD_ADDR_VAR 0 1
20276: PUSH
20277: LD_INT 22
20279: PUSH
20280: LD_INT 1
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 21
20289: PUSH
20290: LD_INT 3
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: LD_INT 30
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 30
20312: PUSH
20313: LD_INT 28
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 30
20322: PUSH
20323: LD_INT 21
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: LIST
20340: PPUSH
20341: CALL_OW 69
20345: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
20346: LD_ADDR_VAR 0 1
20350: PUSH
20351: LD_VAR 0 1
20355: PUSH
20356: LD_INT 22
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 21
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 32
20378: PUSH
20379: LD_INT 3
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: PPUSH
20391: CALL_OW 69
20395: ADD
20396: ST_TO_ADDR
// if tmp = [ ] then
20397: LD_VAR 0 1
20401: PUSH
20402: EMPTY
20403: EQUAL
20404: IFFALSE 20408
// exit ;
20406: GO 20444
// if tmp > 0 then
20408: LD_VAR 0 1
20412: PUSH
20413: LD_INT 0
20415: GREATER
20416: IFFALSE 20444
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20418: LD_VAR 0 1
20422: PUSH
20423: LD_INT 1
20425: PPUSH
20426: LD_VAR 0 1
20430: PPUSH
20431: CALL_OW 12
20435: ARRAY
20436: PPUSH
20437: LD_INT 0
20439: PPUSH
20440: CALL_OW 234
// end ;
20444: PPOPN 1
20446: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20447: LD_EXP 83
20451: PUSH
20452: LD_INT 1
20454: EQUAL
20455: PUSH
20456: LD_INT 22
20458: PUSH
20459: LD_INT 8
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 3
20478: PUSH
20479: LD_INT 61
20481: PUSH
20482: EMPTY
20483: LIST
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: PPUSH
20494: CALL_OW 69
20498: PUSH
20499: LD_INT 0
20501: GREATER
20502: AND
20503: IFFALSE 20585
20505: GO 20507
20507: DISABLE
20508: LD_INT 0
20510: PPUSH
// begin enable ;
20511: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_INT 22
20519: PUSH
20520: LD_INT 8
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 21
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 3
20539: PUSH
20540: LD_INT 61
20542: PUSH
20543: EMPTY
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: PUSH
20560: FOR_IN
20561: IFFALSE 20583
// ComLinkTo ( i , arControler [ 1 ] ) ;
20563: LD_VAR 0 1
20567: PPUSH
20568: LD_EXP 55
20572: PUSH
20573: LD_INT 1
20575: ARRAY
20576: PPUSH
20577: CALL_OW 135
20581: GO 20560
20583: POP
20584: POP
// end ;
20585: PPOPN 1
20587: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20588: LD_EXP 84
20592: PUSH
20593: LD_INT 1
20595: EQUAL
20596: PUSH
20597: LD_INT 22
20599: PUSH
20600: LD_INT 7
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 21
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 3
20619: PUSH
20620: LD_INT 61
20622: PUSH
20623: EMPTY
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: PPUSH
20635: CALL_OW 69
20639: PUSH
20640: LD_INT 0
20642: GREATER
20643: AND
20644: IFFALSE 20734
20646: GO 20648
20648: DISABLE
20649: LD_INT 0
20651: PPUSH
// begin enable ;
20652: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20653: LD_ADDR_VAR 0 1
20657: PUSH
20658: LD_INT 22
20660: PUSH
20661: LD_INT 7
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 21
20670: PUSH
20671: LD_INT 2
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 3
20680: PUSH
20681: LD_INT 61
20683: PUSH
20684: EMPTY
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: PPUSH
20696: CALL_OW 69
20700: PUSH
20701: FOR_IN
20702: IFFALSE 20732
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20704: LD_VAR 0 1
20708: PPUSH
20709: LD_EXP 62
20713: PUSH
20714: LD_INT 1
20716: PPUSH
20717: LD_INT 3
20719: PPUSH
20720: CALL_OW 12
20724: ARRAY
20725: PPUSH
20726: CALL_OW 135
20730: GO 20701
20732: POP
20733: POP
// end ; end_of_file
20734: PPOPN 1
20736: END
// every 0 0$1 trigger timerStatus = 1 do
20737: LD_EXP 95
20741: PUSH
20742: LD_INT 1
20744: EQUAL
20745: IFFALSE 20782
20747: GO 20749
20749: DISABLE
// begin enable ;
20750: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20751: LD_ADDR_OWVAR 47
20755: PUSH
20756: LD_STRING #Am15-1
20758: PUSH
20759: LD_EXP 96
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20768: LD_ADDR_EXP 96
20772: PUSH
20773: LD_EXP 96
20777: PUSH
20778: LD_INT 35
20780: PLUS
20781: ST_TO_ADDR
// end ; end_of_file
20782: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20783: LD_EXP 71
20787: PUSH
20788: LD_INT 1
20790: EQUAL
20791: PUSH
20792: LD_EXP 100
20796: PUSH
20797: LD_INT 0
20799: EQUAL
20800: AND
20801: PUSH
20802: LD_EXP 89
20806: PUSH
20807: LD_INT 0
20809: EQUAL
20810: AND
20811: IFFALSE 20871
20813: GO 20815
20815: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20816: LD_INT 2
20818: PPUSH
20819: LD_INT 6
20821: PPUSH
20822: LD_INT 2
20824: PPUSH
20825: LD_INT 4
20827: PPUSH
20828: CALL_OW 12
20832: PPUSH
20833: LD_INT 10
20835: PPUSH
20836: LD_INT 3
20838: PPUSH
20839: LD_INT 3
20841: PPUSH
20842: LD_INT 3
20844: PPUSH
20845: LD_INT 42
20847: PUSH
20848: LD_INT 43
20850: PUSH
20851: LD_INT 44
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PPUSH
20859: EMPTY
20860: PPUSH
20861: EMPTY
20862: PPUSH
20863: LD_INT 1
20865: PPUSH
20866: CALL 7836 0 11
// enable ;
20870: ENABLE
// end ;
20871: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20872: LD_EXP 71
20876: PUSH
20877: LD_INT 1
20879: EQUAL
20880: PUSH
20881: LD_EXP 100
20885: PUSH
20886: LD_INT 1
20888: EQUAL
20889: AND
20890: PUSH
20891: LD_EXP 89
20895: PUSH
20896: LD_INT 0
20898: EQUAL
20899: AND
20900: IFFALSE 20960
20902: GO 20904
20904: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20905: LD_INT 2
20907: PPUSH
20908: LD_INT 6
20910: PPUSH
20911: LD_INT 4
20913: PPUSH
20914: LD_INT 6
20916: PPUSH
20917: CALL_OW 12
20921: PPUSH
20922: LD_INT 10
20924: PPUSH
20925: LD_INT 3
20927: PPUSH
20928: LD_INT 3
20930: PPUSH
20931: LD_INT 3
20933: PPUSH
20934: LD_INT 44
20936: PUSH
20937: LD_INT 45
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PPUSH
20948: EMPTY
20949: PPUSH
20950: EMPTY
20951: PPUSH
20952: LD_INT 1
20954: PPUSH
20955: CALL 7836 0 11
// enable ;
20959: ENABLE
// end ;
20960: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
20961: LD_EXP 71
20965: PUSH
20966: LD_INT 1
20968: EQUAL
20969: PUSH
20970: LD_EXP 100
20974: PUSH
20975: LD_INT 3
20977: EQUAL
20978: AND
20979: PUSH
20980: LD_EXP 89
20984: PUSH
20985: LD_INT 0
20987: EQUAL
20988: AND
20989: IFFALSE 21053
20991: GO 20993
20993: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
20994: LD_INT 2
20996: PPUSH
20997: LD_INT 6
20999: PPUSH
21000: LD_INT 4
21002: PPUSH
21003: LD_INT 8
21005: PPUSH
21006: CALL_OW 12
21010: PPUSH
21011: LD_INT 10
21013: PPUSH
21014: LD_INT 3
21016: PPUSH
21017: LD_INT 3
21019: PPUSH
21020: LD_INT 3
21022: PPUSH
21023: LD_INT 44
21025: PUSH
21026: LD_INT 45
21028: PUSH
21029: LD_INT 46
21031: PUSH
21032: LD_INT 47
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: PPUSH
21041: EMPTY
21042: PPUSH
21043: EMPTY
21044: PPUSH
21045: LD_INT 1
21047: PPUSH
21048: CALL 7836 0 11
// enable ;
21052: ENABLE
// end ;
21053: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21054: LD_EXP 71
21058: PUSH
21059: LD_INT 1
21061: EQUAL
21062: PUSH
21063: LD_EXP 100
21067: PUSH
21068: LD_INT 4
21070: GREATEREQUAL
21071: AND
21072: PUSH
21073: LD_EXP 89
21077: PUSH
21078: LD_INT 0
21080: EQUAL
21081: AND
21082: IFFALSE 21142
21084: GO 21086
21086: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21087: LD_INT 2
21089: PPUSH
21090: LD_INT 6
21092: PPUSH
21093: LD_INT 4
21095: PPUSH
21096: LD_INT 8
21098: PPUSH
21099: CALL_OW 12
21103: PPUSH
21104: LD_INT 10
21106: PPUSH
21107: LD_INT 3
21109: PPUSH
21110: LD_INT 3
21112: PPUSH
21113: LD_INT 3
21115: PPUSH
21116: LD_INT 46
21118: PUSH
21119: LD_INT 47
21121: PUSH
21122: LD_INT 49
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: PPUSH
21130: EMPTY
21131: PPUSH
21132: EMPTY
21133: PPUSH
21134: LD_INT 1
21136: PPUSH
21137: CALL 7836 0 11
// enable ;
21141: ENABLE
// end ; end_of_file
21142: END
// every 1 do var i , dec1 , options , people ;
21143: GO 21145
21145: DISABLE
21146: LD_INT 0
21148: PPUSH
21149: PPUSH
21150: PPUSH
21151: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21152: LD_INT 24
21154: PPUSH
21155: LD_INT 92
21157: PPUSH
21158: LD_INT 172
21160: PPUSH
21161: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21165: LD_INT 25
21167: PPUSH
21168: LD_INT 103
21170: PPUSH
21171: LD_INT 74
21173: PPUSH
21174: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21178: LD_EXP 47
21182: PPUSH
21183: LD_INT 4
21185: PPUSH
21186: CALL_OW 336
// InGameOn ;
21190: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21194: LD_EXP 24
21198: PUSH
21199: LD_EXP 25
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PPUSH
21208: LD_INT 60
21210: PPUSH
21211: LD_INT 75
21213: PPUSH
21214: CALL_OW 111
// if KappaStatus = 0 then
21218: LD_EXP 80
21222: PUSH
21223: LD_INT 0
21225: EQUAL
21226: IFFALSE 21515
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21228: LD_EXP 24
21232: PPUSH
21233: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21237: LD_EXP 1
21241: PPUSH
21242: LD_STRING D1T-JMM-1
21244: PPUSH
21245: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21249: LD_EXP 24
21253: PPUSH
21254: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21258: LD_EXP 17
21262: PPUSH
21263: LD_STRING D1T-Pow-1
21265: PPUSH
21266: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21270: LD_EXP 24
21274: PPUSH
21275: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21279: LD_EXP 1
21283: PPUSH
21284: LD_STRING D1T-JMM-2
21286: PPUSH
21287: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21291: LD_EXP 24
21295: PPUSH
21296: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21300: LD_EXP 17
21304: PPUSH
21305: LD_STRING D1T-Pow-2
21307: PPUSH
21308: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21312: LD_EXP 24
21316: PPUSH
21317: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21321: LD_EXP 1
21325: PPUSH
21326: LD_STRING D1T-JMM-3
21328: PPUSH
21329: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21333: LD_EXP 24
21337: PPUSH
21338: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
21342: LD_EXP 17
21346: PPUSH
21347: LD_STRING D1T-Pow-3
21349: PPUSH
21350: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21354: LD_EXP 24
21358: PPUSH
21359: CALL_OW 87
// if not JMMGirlVeh = [ ] then
21363: LD_EXP 78
21367: PUSH
21368: EMPTY
21369: EQUAL
21370: NOT
21371: IFFALSE 21471
// begin if JMMGirl = 1 then
21373: LD_EXP 79
21377: PUSH
21378: LD_INT 1
21380: EQUAL
21381: IFFALSE 21395
// Say ( Joan , D1T-Joan-3 ) ;
21383: LD_EXP 2
21387: PPUSH
21388: LD_STRING D1T-Joan-3
21390: PPUSH
21391: CALL_OW 88
// if JMMGirl = 2 then
21395: LD_EXP 79
21399: PUSH
21400: LD_INT 2
21402: EQUAL
21403: IFFALSE 21417
// Say ( Lisa , D1T-Lisa-3 ) ;
21405: LD_EXP 4
21409: PPUSH
21410: LD_STRING D1T-Lisa-3
21412: PPUSH
21413: CALL_OW 88
// if JMMGirl = 3 then
21417: LD_EXP 79
21421: PUSH
21422: LD_INT 3
21424: EQUAL
21425: IFFALSE 21439
// Say ( Connie , D1T-Con-3 ) ;
21427: LD_EXP 16
21431: PPUSH
21432: LD_STRING D1T-Con-3
21434: PPUSH
21435: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21439: LD_EXP 24
21443: PPUSH
21444: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21448: LD_EXP 17
21452: PPUSH
21453: LD_STRING D1T-Pow-4
21455: PPUSH
21456: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21460: LD_EXP 24
21464: PPUSH
21465: CALL_OW 87
// end else
21469: GO 21513
// begin Say ( JMM , D1T-JMM-4 ) ;
21471: LD_EXP 1
21475: PPUSH
21476: LD_STRING D1T-JMM-4
21478: PPUSH
21479: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21483: LD_EXP 24
21487: PPUSH
21488: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21492: LD_EXP 17
21496: PPUSH
21497: LD_STRING D1T-Pow-5
21499: PPUSH
21500: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21504: LD_EXP 24
21508: PPUSH
21509: CALL_OW 87
// end ; end else
21513: GO 21599
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21515: LD_EXP 24
21519: PPUSH
21520: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21524: LD_EXP 1
21528: PPUSH
21529: LD_STRING D1T-JMM-1
21531: PPUSH
21532: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21536: LD_EXP 24
21540: PPUSH
21541: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21545: LD_EXP 17
21549: PPUSH
21550: LD_STRING D1T-Pow-1
21552: PPUSH
21553: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21557: LD_EXP 24
21561: PPUSH
21562: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21566: LD_EXP 1
21570: PPUSH
21571: LD_STRING D1T-JMM-2
21573: PPUSH
21574: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21578: LD_EXP 24
21582: PPUSH
21583: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21587: LD_EXP 17
21591: PPUSH
21592: LD_STRING D1T-Pow-2
21594: PPUSH
21595: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21599: LD_INT 35
21601: PPUSH
21602: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21606: LD_EXP 24
21610: PUSH
21611: LD_EXP 25
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PPUSH
21620: LD_INT 60
21622: PPUSH
21623: LD_INT 75
21625: PPUSH
21626: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
21630: LD_EXP 24
21634: PPUSH
21635: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
21639: LD_EXP 24
21643: PPUSH
21644: LD_EXP 17
21648: PPUSH
21649: CALL_OW 296
21653: PUSH
21654: LD_INT 20
21656: LESS
21657: PUSH
21658: LD_EXP 24
21662: PPUSH
21663: CALL_OW 314
21667: NOT
21668: OR
21669: IFFALSE 21599
// ComExitVehicle ( JMM ) ;
21671: LD_EXP 1
21675: PPUSH
21676: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
21680: LD_INT 35
21682: PPUSH
21683: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
21687: LD_EXP 1
21691: PPUSH
21692: LD_EXP 17
21696: PPUSH
21697: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
21701: LD_EXP 1
21705: PPUSH
21706: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21710: LD_EXP 1
21714: PPUSH
21715: LD_EXP 17
21719: PPUSH
21720: CALL_OW 296
21724: PUSH
21725: LD_INT 6
21727: LESS
21728: IFFALSE 21680
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21730: LD_EXP 1
21734: PUSH
21735: LD_EXP 17
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PPUSH
21744: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21748: LD_EXP 1
21752: PPUSH
21753: LD_EXP 17
21757: PPUSH
21758: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21762: LD_EXP 17
21766: PPUSH
21767: LD_EXP 1
21771: PPUSH
21772: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21776: LD_EXP 1
21780: PPUSH
21781: LD_STRING D1-JMM-1
21783: PPUSH
21784: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21788: LD_EXP 17
21792: PPUSH
21793: LD_STRING D1-Pow-1
21795: PPUSH
21796: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21800: LD_INT 1
21802: PPUSH
21803: LD_INT 3
21805: PPUSH
21806: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21810: LD_INT 1
21812: PPUSH
21813: LD_INT 4
21815: PPUSH
21816: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21820: LD_INT 1
21822: PPUSH
21823: LD_INT 5
21825: PPUSH
21826: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21830: LD_INT 171
21832: PPUSH
21833: LD_INT 81
21835: PPUSH
21836: CALL_OW 84
// wait ( 0 0$4 ) ;
21840: LD_INT 140
21842: PPUSH
21843: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21847: LD_INT 162
21849: PPUSH
21850: LD_INT 36
21852: PPUSH
21853: CALL_OW 84
// wait ( 0 0$4 ) ;
21857: LD_INT 140
21859: PPUSH
21860: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21864: LD_INT 75
21866: PPUSH
21867: LD_INT 16
21869: PPUSH
21870: CALL_OW 84
// wait ( 0 0$4 ) ;
21874: LD_INT 140
21876: PPUSH
21877: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21881: LD_EXP 17
21885: PUSH
21886: LD_EXP 1
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PPUSH
21895: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
21899: LD_EXP 1
21903: PPUSH
21904: LD_STRING D1-JMM-2
21906: PPUSH
21907: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
21911: LD_EXP 17
21915: PPUSH
21916: LD_STRING D1-Pow-2
21918: PPUSH
21919: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
21923: LD_EXP 1
21927: PPUSH
21928: LD_STRING D1-JMM-3
21930: PPUSH
21931: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
21935: LD_EXP 17
21939: PPUSH
21940: LD_STRING D1-Pow-3
21942: PPUSH
21943: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
21947: LD_EXP 1
21951: PPUSH
21952: LD_STRING D1-JMM-4
21954: PPUSH
21955: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
21959: LD_EXP 17
21963: PPUSH
21964: LD_STRING D1-Pow-4
21966: PPUSH
21967: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
21971: LD_EXP 1
21975: PPUSH
21976: LD_STRING D1-JMM-5
21978: PPUSH
21979: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
21983: LD_EXP 17
21987: PPUSH
21988: LD_STRING D1-Pow-5
21990: PPUSH
21991: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
21995: LD_ADDR_VAR 0 3
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 4
22011: PUSH
22012: LD_INT 5
22014: PUSH
22015: LD_INT 6
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_STRING Q1
22033: PPUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: CALL_OW 98
22043: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22044: LD_ADDR_VAR 0 2
22048: PUSH
22049: LD_STRING Q1
22051: PPUSH
22052: LD_VAR 0 3
22056: PPUSH
22057: CALL_OW 98
22061: ST_TO_ADDR
// options = options diff dec1 ;
22062: LD_ADDR_VAR 0 3
22066: PUSH
22067: LD_VAR 0 3
22071: PUSH
22072: LD_VAR 0 2
22076: DIFF
22077: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22078: LD_VAR 0 2
22082: PPUSH
22083: LD_VAR 0 3
22087: PPUSH
22088: CALL 23622 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22092: LD_VAR 0 2
22096: PUSH
22097: LD_INT 5
22099: PUSH
22100: LD_INT 6
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: IN
22107: PUSH
22108: LD_VAR 0 3
22112: PUSH
22113: LD_INT 2
22115: EQUAL
22116: OR
22117: IFFALSE 22044
// if not ( dec1 in [ 5 , 6 ] ) then
22119: LD_VAR 0 2
22123: PUSH
22124: LD_INT 5
22126: PUSH
22127: LD_INT 6
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: IN
22134: NOT
22135: IFFALSE 22178
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22137: LD_ADDR_VAR 0 2
22141: PUSH
22142: LD_STRING Q1a
22144: PPUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PPUSH
22155: CALL_OW 98
22159: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22160: LD_VAR 0 2
22164: PUSH
22165: LD_INT 4
22167: PLUS
22168: PPUSH
22169: LD_VAR 0 3
22173: PPUSH
22174: CALL 23622 0 2
// end ; if not JMMGirlVeh = [ ] then
22178: LD_EXP 78
22182: PUSH
22183: EMPTY
22184: EQUAL
22185: NOT
22186: IFFALSE 22552
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22188: LD_EXP 25
22192: PPUSH
22193: CALL_OW 313
22197: PPUSH
22198: CALL_OW 121
// wait ( 0 0$1 ) ;
22202: LD_INT 35
22204: PPUSH
22205: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22209: LD_INT 35
22211: PPUSH
22212: CALL_OW 67
// if JMMGirl = 1 then
22216: LD_EXP 79
22220: PUSH
22221: LD_INT 1
22223: EQUAL
22224: IFFALSE 22240
// ComMoveUnit ( JMM , Joan ) ;
22226: LD_EXP 1
22230: PPUSH
22231: LD_EXP 2
22235: PPUSH
22236: CALL_OW 112
// if JMMGirl = 2 then
22240: LD_EXP 79
22244: PUSH
22245: LD_INT 2
22247: EQUAL
22248: IFFALSE 22264
// ComMoveUnit ( JMM , Lisa ) ;
22250: LD_EXP 1
22254: PPUSH
22255: LD_EXP 4
22259: PPUSH
22260: CALL_OW 112
// if JMMGirl = 3 then
22264: LD_EXP 79
22268: PUSH
22269: LD_INT 3
22271: EQUAL
22272: IFFALSE 22288
// ComMoveUnit ( JMM , Connie ) ;
22274: LD_EXP 1
22278: PPUSH
22279: LD_EXP 16
22283: PPUSH
22284: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22288: LD_EXP 1
22292: PPUSH
22293: LD_EXP 2
22297: PPUSH
22298: CALL_OW 296
22302: PUSH
22303: LD_INT 6
22305: LESS
22306: PUSH
22307: LD_EXP 1
22311: PPUSH
22312: LD_EXP 4
22316: PPUSH
22317: CALL_OW 296
22321: PUSH
22322: LD_INT 6
22324: LESS
22325: OR
22326: PUSH
22327: LD_EXP 1
22331: PPUSH
22332: LD_EXP 16
22336: PPUSH
22337: CALL_OW 296
22341: PUSH
22342: LD_INT 6
22344: LESS
22345: OR
22346: IFFALSE 22209
// CenterNowOnUnits ( JMM ) ;
22348: LD_EXP 1
22352: PPUSH
22353: CALL_OW 87
// case JMMGirl of 1 :
22357: LD_EXP 79
22361: PUSH
22362: LD_INT 1
22364: DOUBLE
22365: EQUAL
22366: IFTRUE 22370
22368: GO 22425
22370: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22371: LD_EXP 1
22375: PPUSH
22376: LD_EXP 2
22380: PPUSH
22381: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22385: LD_EXP 2
22389: PPUSH
22390: LD_EXP 1
22394: PPUSH
22395: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22399: LD_EXP 2
22403: PPUSH
22404: LD_STRING D3W-Joan-1
22406: PPUSH
22407: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22411: LD_EXP 1
22415: PPUSH
22416: LD_STRING D3W-JMM-1
22418: PPUSH
22419: CALL_OW 88
// end ; 2 :
22423: GO 22552
22425: LD_INT 2
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22488
22433: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22434: LD_EXP 1
22438: PPUSH
22439: LD_EXP 4
22443: PPUSH
22444: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22448: LD_EXP 4
22452: PPUSH
22453: LD_EXP 1
22457: PPUSH
22458: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22462: LD_EXP 4
22466: PPUSH
22467: LD_STRING D3W-Lisa-1
22469: PPUSH
22470: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22474: LD_EXP 1
22478: PPUSH
22479: LD_STRING D3W-JMM-1
22481: PPUSH
22482: CALL_OW 88
// end ; 3 :
22486: GO 22552
22488: LD_INT 3
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22551
22496: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22497: LD_EXP 1
22501: PPUSH
22502: LD_EXP 16
22506: PPUSH
22507: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22511: LD_EXP 16
22515: PPUSH
22516: LD_EXP 1
22520: PPUSH
22521: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22525: LD_EXP 16
22529: PPUSH
22530: LD_STRING D3W-Con-1
22532: PPUSH
22533: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22537: LD_EXP 1
22541: PPUSH
22542: LD_STRING D3W-JMM-1
22544: PPUSH
22545: CALL_OW 88
// end ; end ;
22549: GO 22552
22551: POP
// end ; people = 0 ;
22552: LD_ADDR_VAR 0 4
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// if Lisa and people < 5 then
22560: LD_EXP 4
22564: PUSH
22565: LD_VAR 0 4
22569: PUSH
22570: LD_INT 5
22572: LESS
22573: AND
22574: IFFALSE 22606
// begin people = people + 1 ;
22576: LD_ADDR_VAR 0 4
22580: PUSH
22581: LD_VAR 0 4
22585: PUSH
22586: LD_INT 1
22588: PLUS
22589: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22590: LD_ADDR_EXP 66
22594: PUSH
22595: LD_EXP 66
22599: PUSH
22600: LD_EXP 4
22604: ADD
22605: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22606: LD_EXP 5
22610: PUSH
22611: LD_VAR 0 4
22615: PUSH
22616: LD_INT 5
22618: LESS
22619: AND
22620: IFFALSE 22652
// begin people = people + 1 ;
22622: LD_ADDR_VAR 0 4
22626: PUSH
22627: LD_VAR 0 4
22631: PUSH
22632: LD_INT 1
22634: PLUS
22635: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
22636: LD_ADDR_EXP 66
22640: PUSH
22641: LD_EXP 66
22645: PUSH
22646: LD_EXP 5
22650: ADD
22651: ST_TO_ADDR
// end ; if Bobby and people < 5 then
22652: LD_EXP 6
22656: PUSH
22657: LD_VAR 0 4
22661: PUSH
22662: LD_INT 5
22664: LESS
22665: AND
22666: IFFALSE 22698
// begin people = people + 1 ;
22668: LD_ADDR_VAR 0 4
22672: PUSH
22673: LD_VAR 0 4
22677: PUSH
22678: LD_INT 1
22680: PLUS
22681: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
22682: LD_ADDR_EXP 66
22686: PUSH
22687: LD_EXP 66
22691: PUSH
22692: LD_EXP 6
22696: ADD
22697: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
22698: LD_EXP 7
22702: PUSH
22703: LD_VAR 0 4
22707: PUSH
22708: LD_INT 5
22710: LESS
22711: AND
22712: IFFALSE 22744
// begin people = people + 1 ;
22714: LD_ADDR_VAR 0 4
22718: PUSH
22719: LD_VAR 0 4
22723: PUSH
22724: LD_INT 1
22726: PLUS
22727: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22728: LD_ADDR_EXP 66
22732: PUSH
22733: LD_EXP 66
22737: PUSH
22738: LD_EXP 7
22742: ADD
22743: ST_TO_ADDR
// end ; if Denis and people < 5 then
22744: LD_EXP 8
22748: PUSH
22749: LD_VAR 0 4
22753: PUSH
22754: LD_INT 5
22756: LESS
22757: AND
22758: IFFALSE 22790
// begin people = people + 1 ;
22760: LD_ADDR_VAR 0 4
22764: PUSH
22765: LD_VAR 0 4
22769: PUSH
22770: LD_INT 1
22772: PLUS
22773: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22774: LD_ADDR_EXP 66
22778: PUSH
22779: LD_EXP 66
22783: PUSH
22784: LD_EXP 8
22788: ADD
22789: ST_TO_ADDR
// end ; if Brown and people < 5 then
22790: LD_EXP 9
22794: PUSH
22795: LD_VAR 0 4
22799: PUSH
22800: LD_INT 5
22802: LESS
22803: AND
22804: IFFALSE 22836
// begin people = people + 1 ;
22806: LD_ADDR_VAR 0 4
22810: PUSH
22811: LD_VAR 0 4
22815: PUSH
22816: LD_INT 1
22818: PLUS
22819: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22820: LD_ADDR_EXP 66
22824: PUSH
22825: LD_EXP 66
22829: PUSH
22830: LD_EXP 9
22834: ADD
22835: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22836: LD_EXP 10
22840: PUSH
22841: LD_VAR 0 4
22845: PUSH
22846: LD_INT 5
22848: LESS
22849: AND
22850: IFFALSE 22882
// begin people = people + 1 ;
22852: LD_ADDR_VAR 0 4
22856: PUSH
22857: LD_VAR 0 4
22861: PUSH
22862: LD_INT 1
22864: PLUS
22865: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22866: LD_ADDR_EXP 66
22870: PUSH
22871: LD_EXP 66
22875: PUSH
22876: LD_EXP 10
22880: ADD
22881: ST_TO_ADDR
// end ; if Houten and people < 5 then
22882: LD_EXP 11
22886: PUSH
22887: LD_VAR 0 4
22891: PUSH
22892: LD_INT 5
22894: LESS
22895: AND
22896: IFFALSE 22928
// begin people = people + 1 ;
22898: LD_ADDR_VAR 0 4
22902: PUSH
22903: LD_VAR 0 4
22907: PUSH
22908: LD_INT 1
22910: PLUS
22911: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
22912: LD_ADDR_EXP 66
22916: PUSH
22917: LD_EXP 66
22921: PUSH
22922: LD_EXP 11
22926: ADD
22927: ST_TO_ADDR
// end ; if Cornel and people < 5 then
22928: LD_EXP 12
22932: PUSH
22933: LD_VAR 0 4
22937: PUSH
22938: LD_INT 5
22940: LESS
22941: AND
22942: IFFALSE 22974
// begin people = people + 1 ;
22944: LD_ADDR_VAR 0 4
22948: PUSH
22949: LD_VAR 0 4
22953: PUSH
22954: LD_INT 1
22956: PLUS
22957: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
22958: LD_ADDR_EXP 66
22962: PUSH
22963: LD_EXP 66
22967: PUSH
22968: LD_EXP 12
22972: ADD
22973: ST_TO_ADDR
// end ; if Gary and people < 5 then
22974: LD_EXP 13
22978: PUSH
22979: LD_VAR 0 4
22983: PUSH
22984: LD_INT 5
22986: LESS
22987: AND
22988: IFFALSE 23020
// begin people = people + 1 ;
22990: LD_ADDR_VAR 0 4
22994: PUSH
22995: LD_VAR 0 4
22999: PUSH
23000: LD_INT 1
23002: PLUS
23003: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23004: LD_ADDR_EXP 66
23008: PUSH
23009: LD_EXP 66
23013: PUSH
23014: LD_EXP 13
23018: ADD
23019: ST_TO_ADDR
// end ; if Frank and people < 5 then
23020: LD_EXP 14
23024: PUSH
23025: LD_VAR 0 4
23029: PUSH
23030: LD_INT 5
23032: LESS
23033: AND
23034: IFFALSE 23066
// begin people = people + 1 ;
23036: LD_ADDR_VAR 0 4
23040: PUSH
23041: LD_VAR 0 4
23045: PUSH
23046: LD_INT 1
23048: PLUS
23049: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23050: LD_ADDR_EXP 66
23054: PUSH
23055: LD_EXP 66
23059: PUSH
23060: LD_EXP 14
23064: ADD
23065: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23066: LD_EXP 15
23070: PUSH
23071: LD_VAR 0 4
23075: PUSH
23076: LD_INT 5
23078: LESS
23079: AND
23080: IFFALSE 23112
// begin people = people + 1 ;
23082: LD_ADDR_VAR 0 4
23086: PUSH
23087: LD_VAR 0 4
23091: PUSH
23092: LD_INT 1
23094: PLUS
23095: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23096: LD_ADDR_EXP 66
23100: PUSH
23101: LD_EXP 66
23105: PUSH
23106: LD_EXP 15
23110: ADD
23111: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23112: LD_EXP 66
23116: PPUSH
23117: LD_INT 25
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PPUSH
23127: CALL_OW 72
23131: PUSH
23132: LD_INT 0
23134: EQUAL
23135: IFFALSE 23153
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23137: LD_EXP 66
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: PPUSH
23146: LD_INT 2
23148: PPUSH
23149: CALL_OW 336
// for i = 1 to 5 do
23153: LD_ADDR_VAR 0 1
23157: PUSH
23158: DOUBLE
23159: LD_INT 1
23161: DEC
23162: ST_TO_ADDR
23163: LD_INT 5
23165: PUSH
23166: FOR_TO
23167: IFFALSE 23218
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23169: LD_EXP 66
23173: PUSH
23174: LD_VAR 0 1
23178: ARRAY
23179: PPUSH
23180: LD_INT 62
23182: PUSH
23183: LD_VAR 0 1
23187: PLUS
23188: PPUSH
23189: LD_INT 95
23191: PPUSH
23192: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23196: LD_EXP 66
23200: PUSH
23201: LD_VAR 0 1
23205: ARRAY
23206: PPUSH
23207: LD_EXP 1
23211: PPUSH
23212: CALL_OW 179
// end ;
23216: GO 23166
23218: POP
23219: POP
// repeat wait ( 0 0$1 ) ;
23220: LD_INT 35
23222: PPUSH
23223: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23227: LD_EXP 1
23231: PPUSH
23232: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23236: LD_EXP 1
23240: PPUSH
23241: LD_INT 66
23243: PPUSH
23244: LD_INT 98
23246: PPUSH
23247: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23251: LD_EXP 2
23255: PUSH
23256: LD_EXP 4
23260: PUSH
23261: LD_EXP 16
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: PPUSH
23271: LD_INT 67
23273: PPUSH
23274: LD_INT 98
23276: PPUSH
23277: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23281: LD_EXP 1
23285: PUSH
23286: LD_EXP 2
23290: PUSH
23291: LD_EXP 4
23295: PUSH
23296: LD_EXP 16
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: PPUSH
23307: LD_INT 63
23309: PPUSH
23310: LD_INT 95
23312: PPUSH
23313: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23317: LD_EXP 1
23321: PPUSH
23322: LD_INT 9
23324: PPUSH
23325: CALL_OW 308
23329: PUSH
23330: LD_INT 9
23332: PPUSH
23333: LD_INT 22
23335: PUSH
23336: LD_INT 4
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 21
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PPUSH
23357: CALL_OW 70
23361: PUSH
23362: LD_INT 5
23364: EQUAL
23365: AND
23366: IFFALSE 23220
// wait ( 0 0$2 ) ;
23368: LD_INT 70
23370: PPUSH
23371: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
23375: LD_EXP 4
23379: PPUSH
23380: LD_INT 9
23382: PPUSH
23383: CALL_OW 308
23387: IFFALSE 23401
// Say ( Lisa , D3nW-Lisa-1 ) ;
23389: LD_EXP 4
23393: PPUSH
23394: LD_STRING D3nW-Lisa-1
23396: PPUSH
23397: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
23401: LD_EXP 7
23405: PPUSH
23406: LD_INT 9
23408: PPUSH
23409: CALL_OW 308
23413: IFFALSE 23427
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23415: LD_EXP 7
23419: PPUSH
23420: LD_STRING D3nW-Cyrus-1
23422: PPUSH
23423: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23427: LD_EXP 6
23431: PPUSH
23432: LD_INT 9
23434: PPUSH
23435: CALL_OW 308
23439: IFFALSE 23453
// Say ( Bobby , D3nW-Bobby-1 ) ;
23441: LD_EXP 6
23445: PPUSH
23446: LD_STRING D3nW-Bobby-1
23448: PPUSH
23449: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23453: LD_EXP 13
23457: PPUSH
23458: LD_INT 9
23460: PPUSH
23461: CALL_OW 308
23465: IFFALSE 23479
// Say ( Gary , D3nW-Gary-1 ) ;
23467: LD_EXP 13
23471: PPUSH
23472: LD_STRING D3nW-Gary-1
23474: PPUSH
23475: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23479: LD_EXP 5
23483: PPUSH
23484: LD_INT 9
23486: PPUSH
23487: CALL_OW 308
23491: IFFALSE 23505
// Say ( Donaldson , D3nW-Don-1 ) ;
23493: LD_EXP 5
23497: PPUSH
23498: LD_STRING D3nW-Don-1
23500: PPUSH
23501: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23505: LD_EXP 12
23509: PPUSH
23510: LD_INT 9
23512: PPUSH
23513: CALL_OW 308
23517: IFFALSE 23531
// Say ( Cornel , D3nW-Corn-1 ) ;
23519: LD_EXP 12
23523: PPUSH
23524: LD_STRING D3nW-Corn-1
23526: PPUSH
23527: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23531: LD_EXP 14
23535: PPUSH
23536: LD_INT 9
23538: PPUSH
23539: CALL_OW 308
23543: IFFALSE 23557
// Say ( Frank , D3nW-Frank-1 ) ;
23545: LD_EXP 14
23549: PPUSH
23550: LD_STRING D3nW-Frank-1
23552: PPUSH
23553: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23557: LD_EXP 1
23561: PPUSH
23562: LD_STRING D3nW-JMM-1
23564: PPUSH
23565: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23569: LD_EXP 1
23573: PPUSH
23574: LD_STRING D3nW-JMM-1a
23576: PPUSH
23577: CALL_OW 88
// InGameOff ;
23581: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23585: LD_STRING M1
23587: PPUSH
23588: CALL_OW 337
// SaveForQuickRestart ;
23592: CALL_OW 22
// startAttacks = 1 ;
23596: LD_ADDR_EXP 71
23600: PUSH
23601: LD_INT 1
23603: ST_TO_ADDR
// wait ( 0 0$5 ) ;
23604: LD_INT 175
23606: PPUSH
23607: CALL_OW 67
// powellBuildBase = 1 ;
23611: LD_ADDR_EXP 67
23615: PUSH
23616: LD_INT 1
23618: ST_TO_ADDR
// end ;
23619: PPOPN 4
23621: END
// function ResolveQuery ( question , list_of_q ) ; begin
23622: LD_INT 0
23624: PPUSH
// case question of 1 :
23625: LD_VAR 0 1
23629: PUSH
23630: LD_INT 1
23632: DOUBLE
23633: EQUAL
23634: IFTRUE 23638
23636: GO 23689
23638: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
23639: LD_EXP 1
23643: PPUSH
23644: LD_STRING D2Mot-JMM-1
23646: PPUSH
23647: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
23651: LD_EXP 17
23655: PPUSH
23656: LD_STRING D2Mot-Pow-1
23658: PPUSH
23659: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
23663: LD_EXP 1
23667: PPUSH
23668: LD_STRING D2Mot-JMM-2
23670: PPUSH
23671: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
23675: LD_EXP 17
23679: PPUSH
23680: LD_STRING D2Mot-Pow-2
23682: PPUSH
23683: CALL_OW 88
// end ; 2 :
23687: GO 24032
23689: LD_INT 2
23691: DOUBLE
23692: EQUAL
23693: IFTRUE 23697
23695: GO 23773
23697: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
23698: LD_EXP 1
23702: PPUSH
23703: LD_STRING D2Rus-JMM-1
23705: PPUSH
23706: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23710: LD_EXP 17
23714: PPUSH
23715: LD_STRING D2Rus-Pow-1
23717: PPUSH
23718: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23722: LD_EXP 1
23726: PPUSH
23727: LD_STRING D2Rus-JMM-2
23729: PPUSH
23730: CALL_OW 88
// if not ( 3 in list_of_q ) then
23734: LD_INT 3
23736: PUSH
23737: LD_VAR 0 2
23741: IN
23742: NOT
23743: IFFALSE 23759
// Say ( Powell , D2Rus-Pow-2 ) else
23745: LD_EXP 17
23749: PPUSH
23750: LD_STRING D2Rus-Pow-2
23752: PPUSH
23753: CALL_OW 88
23757: GO 23771
// Say ( Powell , D2Rus-Pow-2a ) ;
23759: LD_EXP 17
23763: PPUSH
23764: LD_STRING D2Rus-Pow-2a
23766: PPUSH
23767: CALL_OW 88
// end ; 3 :
23771: GO 24032
23773: LD_INT 3
23775: DOUBLE
23776: EQUAL
23777: IFTRUE 23781
23779: GO 23866
23781: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23782: LD_EXP 1
23786: PPUSH
23787: LD_STRING D2Leg-JMM-1
23789: PPUSH
23790: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23794: LD_EXP 17
23798: PPUSH
23799: LD_STRING D2Leg-Pow-1
23801: PPUSH
23802: CALL_OW 88
// if ( 2 in list_of_q ) then
23806: LD_INT 2
23808: PUSH
23809: LD_VAR 0 2
23813: IN
23814: IFFALSE 23840
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23816: LD_EXP 1
23820: PPUSH
23821: LD_STRING D2Leg-JMM-2
23823: PPUSH
23824: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23828: LD_EXP 17
23832: PPUSH
23833: LD_STRING D2Leg-Pow-2
23835: PPUSH
23836: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23840: LD_EXP 1
23844: PPUSH
23845: LD_STRING D2Leg-JMM-3
23847: PPUSH
23848: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23852: LD_EXP 17
23856: PPUSH
23857: LD_STRING D2Leg-Pow-3
23859: PPUSH
23860: CALL_OW 88
// end ; 4 :
23864: GO 24032
23866: LD_INT 4
23868: DOUBLE
23869: EQUAL
23870: IFTRUE 23874
23872: GO 23949
23874: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23875: LD_EXP 1
23879: PPUSH
23880: LD_STRING D2Ar-JMM-1
23882: PPUSH
23883: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
23887: LD_EXP 17
23891: PPUSH
23892: LD_STRING D2Ar-Pow-1
23894: PPUSH
23895: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
23899: LD_EXP 1
23903: PPUSH
23904: LD_STRING D2Ar-JMM-2
23906: PPUSH
23907: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
23911: LD_EXP 17
23915: PPUSH
23916: LD_STRING D2Ar-Pow-2
23918: PPUSH
23919: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
23923: LD_EXP 1
23927: PPUSH
23928: LD_STRING D2Ar-JMM-3
23930: PPUSH
23931: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
23935: LD_EXP 17
23939: PPUSH
23940: LD_STRING D2Ar-Pow-3
23942: PPUSH
23943: CALL_OW 88
// end ; 5 :
23947: GO 24032
23949: LD_INT 5
23951: DOUBLE
23952: EQUAL
23953: IFTRUE 23957
23955: GO 23972
23957: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
23958: LD_EXP 1
23962: PPUSH
23963: LD_STRING D2Conf-JMM-1
23965: PPUSH
23966: CALL_OW 88
// end ; 6 :
23970: GO 24032
23972: LD_INT 6
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 24031
23980: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
23981: LD_EXP 1
23985: PPUSH
23986: LD_STRING D2Com-JMM-1
23988: PPUSH
23989: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
23993: LD_EXP 17
23997: PPUSH
23998: LD_STRING D2Com-Pow-1
24000: PPUSH
24001: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24005: LD_EXP 1
24009: PPUSH
24010: LD_STRING D2Com-JMM-2
24012: PPUSH
24013: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24017: LD_EXP 17
24021: PPUSH
24022: LD_STRING D2Com-Pow-2
24024: PPUSH
24025: CALL_OW 88
// end ; end ;
24029: GO 24032
24031: POP
// end ;
24032: LD_VAR 0 3
24036: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
24037: LD_INT 9
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 4
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PPUSH
24064: CALL_OW 70
24068: IFFALSE 24113
24070: GO 24072
24072: DISABLE
// begin enable ;
24073: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
24074: LD_INT 9
24076: PPUSH
24077: LD_INT 22
24079: PUSH
24080: LD_INT 4
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 21
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PPUSH
24101: CALL_OW 70
24105: PPUSH
24106: LD_INT 1
24108: PPUSH
24109: CALL_OW 235
// end ;
24113: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24114: LD_INT 22
24116: PUSH
24117: LD_INT 4
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 21
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: LD_INT 58
24139: PUSH
24140: EMPTY
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: PUSH
24157: LD_INT 4
24159: EQUAL
24160: PUSH
24161: LD_EXP 71
24165: PUSH
24166: LD_INT 1
24168: EQUAL
24169: AND
24170: IFFALSE 24183
24172: GO 24174
24174: DISABLE
// startAttacks = 0 ;
24175: LD_ADDR_EXP 71
24179: PUSH
24180: LD_INT 0
24182: ST_TO_ADDR
24183: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24184: LD_INT 22
24186: PUSH
24187: LD_INT 4
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 21
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 3
24206: PUSH
24207: LD_INT 58
24209: PUSH
24210: EMPTY
24211: LIST
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: PPUSH
24222: CALL_OW 69
24226: PUSH
24227: LD_INT 4
24229: EQUAL
24230: PUSH
24231: LD_INT 22
24233: PUSH
24234: LD_INT 6
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 21
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 24
24253: PUSH
24254: LD_INT 250
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: PUSH
24271: LD_INT 0
24273: EQUAL
24274: AND
24275: PUSH
24276: LD_EXP 71
24280: PUSH
24281: LD_INT 0
24283: EQUAL
24284: AND
24285: PUSH
24286: LD_EXP 68
24290: PUSH
24291: LD_INT 0
24293: EQUAL
24294: AND
24295: IFFALSE 24483
24297: GO 24299
24299: DISABLE
24300: LD_INT 0
24302: PPUSH
// begin powellAttacks = 1 ;
24303: LD_ADDR_EXP 68
24307: PUSH
24308: LD_INT 1
24310: ST_TO_ADDR
// InGameOn ;
24311: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24315: LD_EXP 17
24319: PPUSH
24320: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24324: LD_EXP 17
24328: PPUSH
24329: LD_INT 47
24331: PPUSH
24332: LD_INT 60
24334: PPUSH
24335: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24339: LD_EXP 17
24343: PPUSH
24344: LD_STRING D4-Pow-1
24346: PPUSH
24347: CALL_OW 88
// for i = 1 to amUnitsAttack do
24351: LD_ADDR_VAR 0 1
24355: PUSH
24356: DOUBLE
24357: LD_INT 1
24359: DEC
24360: ST_TO_ADDR
24361: LD_EXP 65
24365: PUSH
24366: FOR_TO
24367: IFFALSE 24412
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24369: LD_EXP 65
24373: PUSH
24374: LD_VAR 0 1
24378: ARRAY
24379: PPUSH
24380: CALL_OW 258
24384: PUSH
24385: LD_INT 1
24387: EQUAL
24388: IFFALSE 24410
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24390: LD_EXP 65
24394: PUSH
24395: LD_VAR 0 1
24399: ARRAY
24400: PPUSH
24401: LD_STRING D4-Sol1-1
24403: PPUSH
24404: CALL_OW 88
// break ;
24408: GO 24412
// end ;
24410: GO 24366
24412: POP
24413: POP
// Say ( Powell , D4-Pow-2 ) ;
24414: LD_EXP 17
24418: PPUSH
24419: LD_STRING D4-Pow-2
24421: PPUSH
24422: CALL_OW 88
// InGameOff ;
24426: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24430: LD_INT 22
24432: PUSH
24433: LD_INT 4
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 21
24442: PUSH
24443: LD_INT 2
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 3
24452: PUSH
24453: LD_INT 58
24455: PUSH
24456: EMPTY
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: PPUSH
24473: LD_INT 59
24475: PPUSH
24476: LD_INT 21
24478: PPUSH
24479: CALL_OW 114
// end ;
24483: PPOPN 1
24485: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24486: LD_INT 7
24488: PPUSH
24489: LD_INT 22
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 21
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PPUSH
24513: CALL_OW 70
24517: PUSH
24518: LD_INT 0
24520: GREATER
24521: PUSH
24522: LD_EXP 17
24526: PPUSH
24527: CALL_OW 302
24531: AND
24532: PUSH
24533: LD_EXP 70
24537: PUSH
24538: LD_INT 0
24540: EQUAL
24541: AND
24542: IFFALSE 24666
24544: GO 24546
24546: DISABLE
// begin InGameOn ;
24547: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24551: LD_INT 22
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 21
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PPUSH
24575: CALL_OW 69
24579: PPUSH
24580: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24584: LD_INT 7
24586: PPUSH
24587: LD_INT 22
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 21
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PPUSH
24611: CALL_OW 70
24615: PPUSH
24616: LD_INT 70
24618: PPUSH
24619: LD_INT 104
24621: PPUSH
24622: CALL_OW 111
// if powellWarm = 0 then
24626: LD_EXP 70
24630: PUSH
24631: LD_INT 0
24633: EQUAL
24634: IFFALSE 24662
// begin Say ( Powell , DBack1-Pow-1 ) ;
24636: LD_EXP 17
24640: PPUSH
24641: LD_STRING DBack1-Pow-1
24643: PPUSH
24644: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24648: LD_ADDR_EXP 70
24652: PUSH
24653: LD_EXP 70
24657: PUSH
24658: LD_INT 1
24660: PLUS
24661: ST_TO_ADDR
// end ; InGameOff ;
24662: CALL_OW 9
// end ;
24666: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24667: LD_INT 7
24669: PPUSH
24670: LD_INT 22
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 21
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PPUSH
24694: CALL_OW 70
24698: PUSH
24699: LD_INT 0
24701: GREATER
24702: PUSH
24703: LD_EXP 17
24707: PPUSH
24708: CALL_OW 302
24712: AND
24713: PUSH
24714: LD_EXP 70
24718: PUSH
24719: LD_INT 1
24721: EQUAL
24722: AND
24723: IFFALSE 24847
24725: GO 24727
24727: DISABLE
// begin InGameOn ;
24728: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24732: LD_INT 22
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 21
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PPUSH
24756: CALL_OW 69
24760: PPUSH
24761: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24765: LD_INT 7
24767: PPUSH
24768: LD_INT 22
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PPUSH
24792: CALL_OW 70
24796: PPUSH
24797: LD_INT 70
24799: PPUSH
24800: LD_INT 104
24802: PPUSH
24803: CALL_OW 111
// if powellWarm = 1 then
24807: LD_EXP 70
24811: PUSH
24812: LD_INT 1
24814: EQUAL
24815: IFFALSE 24843
// begin Say ( Powell , DBack2-Pow-1 ) ;
24817: LD_EXP 17
24821: PPUSH
24822: LD_STRING DBack2-Pow-1
24824: PPUSH
24825: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24829: LD_ADDR_EXP 70
24833: PUSH
24834: LD_EXP 70
24838: PUSH
24839: LD_INT 1
24841: PLUS
24842: ST_TO_ADDR
// end ; InGameOff ;
24843: CALL_OW 9
// end ;
24847: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24848: LD_INT 7
24850: PPUSH
24851: LD_INT 22
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 21
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PPUSH
24875: CALL_OW 70
24879: PUSH
24880: LD_INT 0
24882: GREATER
24883: PUSH
24884: LD_EXP 17
24888: PPUSH
24889: CALL_OW 302
24893: AND
24894: PUSH
24895: LD_EXP 70
24899: PUSH
24900: LD_INT 2
24902: EQUAL
24903: AND
24904: IFFALSE 25021
24906: GO 24908
24908: DISABLE
// begin InGameOn ;
24909: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24913: LD_INT 22
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 21
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PPUSH
24937: CALL_OW 69
24941: PPUSH
24942: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24946: LD_INT 7
24948: PPUSH
24949: LD_INT 22
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 21
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PPUSH
24973: CALL_OW 70
24977: PPUSH
24978: LD_INT 70
24980: PPUSH
24981: LD_INT 104
24983: PPUSH
24984: CALL_OW 111
// if powellWarm = 2 then
24988: LD_EXP 70
24992: PUSH
24993: LD_INT 2
24995: EQUAL
24996: IFFALSE 25017
// begin Say ( Powell , DBack3-Pow-1 ) ;
24998: LD_EXP 17
25002: PPUSH
25003: LD_STRING DBack3-Pow-1
25005: PPUSH
25006: CALL_OW 88
// YouLost ( Dismissed ) ;
25010: LD_STRING Dismissed
25012: PPUSH
25013: CALL_OW 104
// end ; InGameOff ;
25017: CALL_OW 9
// end ;
25021: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25022: LD_INT 8
25024: PPUSH
25025: LD_INT 22
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 21
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PPUSH
25049: CALL_OW 70
25053: PUSH
25054: LD_INT 0
25056: GREATER
25057: PUSH
25058: LD_EXP 17
25062: PPUSH
25063: CALL_OW 302
25067: AND
25068: PUSH
25069: LD_EXP 70
25073: PUSH
25074: LD_INT 0
25076: EQUAL
25077: AND
25078: IFFALSE 25202
25080: GO 25082
25082: DISABLE
// begin InGameOn ;
25083: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25087: LD_INT 22
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 21
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 69
25115: PPUSH
25116: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25120: LD_INT 8
25122: PPUSH
25123: LD_INT 22
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 21
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 70
25151: PPUSH
25152: LD_INT 71
25154: PPUSH
25155: LD_INT 63
25157: PPUSH
25158: CALL_OW 111
// if powellWarm = 0 then
25162: LD_EXP 70
25166: PUSH
25167: LD_INT 0
25169: EQUAL
25170: IFFALSE 25198
// begin Say ( Powell , DBack1-Pow-1 ) ;
25172: LD_EXP 17
25176: PPUSH
25177: LD_STRING DBack1-Pow-1
25179: PPUSH
25180: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25184: LD_ADDR_EXP 70
25188: PUSH
25189: LD_EXP 70
25193: PUSH
25194: LD_INT 1
25196: PLUS
25197: ST_TO_ADDR
// end ; InGameOff ;
25198: CALL_OW 9
// end ;
25202: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25203: LD_INT 8
25205: PPUSH
25206: LD_INT 22
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PPUSH
25230: CALL_OW 70
25234: PUSH
25235: LD_INT 0
25237: GREATER
25238: PUSH
25239: LD_EXP 17
25243: PPUSH
25244: CALL_OW 302
25248: AND
25249: PUSH
25250: LD_EXP 70
25254: PUSH
25255: LD_INT 1
25257: EQUAL
25258: AND
25259: IFFALSE 25383
25261: GO 25263
25263: DISABLE
// begin InGameOn ;
25264: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25268: LD_INT 22
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 21
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 69
25296: PPUSH
25297: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25301: LD_INT 8
25303: PPUSH
25304: LD_INT 22
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 21
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PPUSH
25328: CALL_OW 70
25332: PPUSH
25333: LD_INT 71
25335: PPUSH
25336: LD_INT 63
25338: PPUSH
25339: CALL_OW 111
// if powellWarm = 1 then
25343: LD_EXP 70
25347: PUSH
25348: LD_INT 1
25350: EQUAL
25351: IFFALSE 25379
// begin Say ( Powell , DBack2-Pow-1 ) ;
25353: LD_EXP 17
25357: PPUSH
25358: LD_STRING DBack2-Pow-1
25360: PPUSH
25361: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25365: LD_ADDR_EXP 70
25369: PUSH
25370: LD_EXP 70
25374: PUSH
25375: LD_INT 1
25377: PLUS
25378: ST_TO_ADDR
// end ; InGameOff ;
25379: CALL_OW 9
// end ;
25383: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25384: LD_INT 8
25386: PPUSH
25387: LD_INT 22
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 21
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PPUSH
25411: CALL_OW 70
25415: PUSH
25416: LD_INT 0
25418: GREATER
25419: PUSH
25420: LD_EXP 17
25424: PPUSH
25425: CALL_OW 302
25429: AND
25430: PUSH
25431: LD_EXP 70
25435: PUSH
25436: LD_INT 2
25438: EQUAL
25439: AND
25440: IFFALSE 25557
25442: GO 25444
25444: DISABLE
// begin InGameOn ;
25445: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25449: LD_INT 22
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 21
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 69
25477: PPUSH
25478: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25482: LD_INT 8
25484: PPUSH
25485: LD_INT 22
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 21
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PPUSH
25509: CALL_OW 70
25513: PPUSH
25514: LD_INT 71
25516: PPUSH
25517: LD_INT 63
25519: PPUSH
25520: CALL_OW 111
// if powellWarm = 2 then
25524: LD_EXP 70
25528: PUSH
25529: LD_INT 2
25531: EQUAL
25532: IFFALSE 25553
// begin Say ( Powell , DBack3-Pow-1 ) ;
25534: LD_EXP 17
25538: PPUSH
25539: LD_STRING DBack3-Pow-1
25541: PPUSH
25542: CALL_OW 88
// YouLost ( Dismissed ) ;
25546: LD_STRING Dismissed
25548: PPUSH
25549: CALL_OW 104
// end ; InGameOff ;
25553: CALL_OW 9
// end ;
25557: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25558: LD_EXP 68
25562: PUSH
25563: LD_INT 1
25565: EQUAL
25566: IFFALSE 25615
25568: GO 25570
25570: DISABLE
25571: LD_INT 0
25573: PPUSH
// begin enable ;
25574: ENABLE
// for i = 1 to amUnitsAttack do
25575: LD_ADDR_VAR 0 1
25579: PUSH
25580: DOUBLE
25581: LD_INT 1
25583: DEC
25584: ST_TO_ADDR
25585: LD_EXP 65
25589: PUSH
25590: FOR_TO
25591: IFFALSE 25613
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25593: LD_INT 8
25595: PPUSH
25596: LD_EXP 65
25600: PUSH
25601: LD_VAR 0 1
25605: ARRAY
25606: PPUSH
25607: CALL_OW 471
25611: GO 25590
25613: POP
25614: POP
// end ;
25615: PPOPN 1
25617: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25618: LD_INT 22
25620: PUSH
25621: LD_INT 4
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 21
25630: PUSH
25631: LD_INT 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 3
25640: PUSH
25641: LD_INT 58
25643: PUSH
25644: EMPTY
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: LIST
25655: PPUSH
25656: CALL_OW 69
25660: PUSH
25661: LD_INT 0
25663: EQUAL
25664: PUSH
25665: LD_EXP 68
25669: PUSH
25670: LD_INT 1
25672: EQUAL
25673: AND
25674: IFFALSE 25845
25676: GO 25678
25678: DISABLE
// begin powellAttacks = 2 ;
25679: LD_ADDR_EXP 68
25683: PUSH
25684: LD_INT 2
25686: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25687: LD_INT 85
25689: PPUSH
25690: LD_INT 3
25692: PPUSH
25693: LD_INT 3
25695: PPUSH
25696: LD_INT 1
25698: PPUSH
25699: LD_INT 5
25701: PUSH
25702: LD_INT 7
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PPUSH
25712: LD_INT 2
25714: PPUSH
25715: CALL_OW 12
25719: ARRAY
25720: PPUSH
25721: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25725: LD_INT 85
25727: PPUSH
25728: LD_INT 3
25730: PPUSH
25731: LD_INT 3
25733: PPUSH
25734: LD_INT 1
25736: PPUSH
25737: LD_INT 5
25739: PUSH
25740: LD_INT 7
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: PPUSH
25750: LD_INT 2
25752: PPUSH
25753: CALL_OW 12
25757: ARRAY
25758: PPUSH
25759: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25763: LD_INT 85
25765: PPUSH
25766: LD_INT 3
25768: PPUSH
25769: LD_INT 3
25771: PPUSH
25772: LD_INT 1
25774: PPUSH
25775: LD_INT 5
25777: PUSH
25778: LD_INT 7
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PPUSH
25788: LD_INT 2
25790: PPUSH
25791: CALL_OW 12
25795: ARRAY
25796: PPUSH
25797: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
25801: LD_INT 85
25803: PPUSH
25804: LD_INT 5
25806: PPUSH
25807: LD_INT 3
25809: PPUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_INT 6
25815: PPUSH
25816: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
25820: LD_ADDR_EXP 72
25824: PUSH
25825: LD_INT 85
25827: PPUSH
25828: LD_INT 3
25830: PPUSH
25831: LD_INT 3
25833: PPUSH
25834: LD_INT 1
25836: PPUSH
25837: LD_INT 3
25839: PPUSH
25840: CALL_OW 185
25844: ST_TO_ADDR
// end ;
25845: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
25846: LD_INT 22
25848: PUSH
25849: LD_INT 4
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 21
25858: PUSH
25859: LD_INT 2
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 3
25868: PUSH
25869: LD_INT 58
25871: PUSH
25872: EMPTY
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL_OW 69
25888: PUSH
25889: LD_INT 5
25891: GREATEREQUAL
25892: PUSH
25893: LD_EXP 71
25897: PUSH
25898: LD_INT 1
25900: EQUAL
25901: AND
25902: IFFALSE 25915
25904: GO 25906
25906: DISABLE
// startAttacks = 0 ;
25907: LD_ADDR_EXP 71
25911: PUSH
25912: LD_INT 0
25914: ST_TO_ADDR
25915: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
25916: LD_INT 22
25918: PUSH
25919: LD_INT 4
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 21
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 3
25938: PUSH
25939: LD_INT 58
25941: PUSH
25942: EMPTY
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL_OW 69
25958: PUSH
25959: LD_INT 5
25961: GREATEREQUAL
25962: PUSH
25963: LD_INT 22
25965: PUSH
25966: LD_INT 6
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 21
25975: PUSH
25976: LD_INT 2
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PPUSH
25987: CALL_OW 69
25991: PUSH
25992: LD_INT 0
25994: EQUAL
25995: AND
25996: PUSH
25997: LD_EXP 71
26001: PUSH
26002: LD_INT 0
26004: EQUAL
26005: AND
26006: PUSH
26007: LD_EXP 68
26011: PUSH
26012: LD_INT 2
26014: EQUAL
26015: AND
26016: IFFALSE 26951
26018: GO 26020
26020: DISABLE
26021: LD_INT 0
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
// begin powellAttacks = 3 ;
26027: LD_ADDR_EXP 68
26031: PUSH
26032: LD_INT 3
26034: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26035: LD_ADDR_VAR 0 1
26039: PUSH
26040: DOUBLE
26041: LD_INT 1
26043: DEC
26044: ST_TO_ADDR
26045: LD_EXP 65
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26073
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26053: LD_INT 8
26055: PPUSH
26056: LD_EXP 65
26060: PUSH
26061: LD_VAR 0 1
26065: ARRAY
26066: PPUSH
26067: CALL_OW 472
26071: GO 26050
26073: POP
26074: POP
// wait ( 0 0$5 ) ;
26075: LD_INT 175
26077: PPUSH
26078: CALL_OW 67
// Video ( true ) ;
26082: LD_INT 1
26084: PPUSH
26085: CALL 6835 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26089: LD_INT 22
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PPUSH
26099: CALL_OW 69
26103: PPUSH
26104: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26108: LD_EXP 17
26112: PPUSH
26113: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26117: LD_EXP 17
26121: PPUSH
26122: LD_INT 45
26124: PPUSH
26125: LD_INT 64
26127: PPUSH
26128: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26132: LD_EXP 17
26136: PPUSH
26137: LD_INT 46
26139: PPUSH
26140: LD_INT 66
26142: PPUSH
26143: CALL_OW 178
// for i = 5 to 8 do
26147: LD_ADDR_VAR 0 1
26151: PUSH
26152: DOUBLE
26153: LD_INT 5
26155: DEC
26156: ST_TO_ADDR
26157: LD_INT 8
26159: PUSH
26160: FOR_TO
26161: IFFALSE 26307
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26163: LD_EXP 65
26167: PUSH
26168: LD_VAR 0 1
26172: ARRAY
26173: PPUSH
26174: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26178: LD_EXP 65
26182: PUSH
26183: LD_VAR 0 1
26187: ARRAY
26188: PPUSH
26189: CALL_OW 121
// wait ( 0 0$1 ) ;
26193: LD_INT 35
26195: PPUSH
26196: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26200: LD_EXP 65
26204: PUSH
26205: LD_VAR 0 1
26209: ARRAY
26210: PPUSH
26211: LD_INT 92
26213: PPUSH
26214: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26218: LD_EXP 65
26222: PUSH
26223: LD_VAR 0 1
26227: ARRAY
26228: PPUSH
26229: LD_INT 1
26231: PPUSH
26232: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26236: LD_EXP 65
26240: PUSH
26241: LD_VAR 0 1
26245: ARRAY
26246: PPUSH
26247: CALL_OW 182
// wait ( 0 0$1 ) ;
26251: LD_INT 35
26253: PPUSH
26254: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26258: LD_EXP 65
26262: PUSH
26263: LD_VAR 0 1
26267: ARRAY
26268: PPUSH
26269: LD_INT 43
26271: PUSH
26272: LD_VAR 0 1
26276: PLUS
26277: PPUSH
26278: LD_INT 66
26280: PPUSH
26281: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26285: LD_EXP 65
26289: PUSH
26290: LD_VAR 0 1
26294: ARRAY
26295: PPUSH
26296: LD_EXP 17
26300: PPUSH
26301: CALL_OW 179
// end ;
26305: GO 26160
26307: POP
26308: POP
// wait ( 0 0$10 ) ;
26309: LD_INT 350
26311: PPUSH
26312: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26316: LD_ADDR_VAR 0 3
26320: PUSH
26321: LD_INT 22
26323: PUSH
26324: LD_INT 4
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 21
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 56
26343: PUSH
26344: EMPTY
26345: LIST
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: LD_INT 60
26352: PUSH
26353: EMPTY
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: PPUSH
26366: CALL_OW 69
26370: PUSH
26371: LD_EXP 17
26375: PUSH
26376: EMPTY
26377: LIST
26378: DIFF
26379: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26380: LD_VAR 0 3
26384: PPUSH
26385: LD_INT 92
26387: PPUSH
26388: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
26392: LD_VAR 0 3
26396: PPUSH
26397: LD_INT 1
26399: PPUSH
26400: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
26404: LD_EXP 17
26408: PPUSH
26409: LD_STRING D5-Pow-1
26411: PPUSH
26412: CALL_OW 88
// for i = 1 to amUnitsAttack do
26416: LD_ADDR_VAR 0 1
26420: PUSH
26421: DOUBLE
26422: LD_INT 1
26424: DEC
26425: ST_TO_ADDR
26426: LD_EXP 65
26430: PUSH
26431: FOR_TO
26432: IFFALSE 26477
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26434: LD_EXP 65
26438: PUSH
26439: LD_VAR 0 1
26443: ARRAY
26444: PPUSH
26445: CALL_OW 258
26449: PUSH
26450: LD_INT 1
26452: EQUAL
26453: IFFALSE 26475
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26455: LD_EXP 65
26459: PUSH
26460: LD_VAR 0 1
26464: ARRAY
26465: PPUSH
26466: LD_STRING D5-Sol2-1
26468: PPUSH
26469: CALL_OW 88
// break ;
26473: GO 26477
// end ;
26475: GO 26431
26477: POP
26478: POP
// Say ( Powell , D5-Pow-2 ) ;
26479: LD_EXP 17
26483: PPUSH
26484: LD_STRING D5-Pow-2
26486: PPUSH
26487: CALL_OW 88
// for i = 1 to amUnitsAttack do
26491: LD_ADDR_VAR 0 1
26495: PUSH
26496: DOUBLE
26497: LD_INT 1
26499: DEC
26500: ST_TO_ADDR
26501: LD_EXP 65
26505: PUSH
26506: FOR_TO
26507: IFFALSE 26552
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26509: LD_EXP 65
26513: PUSH
26514: LD_VAR 0 1
26518: ARRAY
26519: PPUSH
26520: CALL_OW 258
26524: PUSH
26525: LD_INT 1
26527: EQUAL
26528: IFFALSE 26550
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26530: LD_EXP 65
26534: PUSH
26535: LD_VAR 0 1
26539: ARRAY
26540: PPUSH
26541: LD_STRING D5-Sol2-2
26543: PPUSH
26544: CALL_OW 88
// break ;
26548: GO 26552
// end ;
26550: GO 26506
26552: POP
26553: POP
// Say ( Powell , D5-Pow-3 ) ;
26554: LD_EXP 17
26558: PPUSH
26559: LD_STRING D5-Pow-3
26561: PPUSH
26562: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26566: LD_INT 22
26568: PUSH
26569: LD_INT 4
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 21
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 3
26588: PUSH
26589: LD_INT 58
26591: PUSH
26592: EMPTY
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: PPUSH
26604: CALL_OW 69
26608: PPUSH
26609: LD_INT 59
26611: PPUSH
26612: LD_INT 21
26614: PPUSH
26615: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26619: LD_EXP 65
26623: PPUSH
26624: LD_INT 59
26626: PPUSH
26627: LD_INT 21
26629: PPUSH
26630: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
26634: LD_INT 61
26636: PPUSH
26637: LD_INT 35
26639: PPUSH
26640: CALL_OW 84
// wait ( 0 0$15 ) ;
26644: LD_INT 525
26646: PPUSH
26647: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
26651: LD_EXP 17
26655: PPUSH
26656: LD_STRING D5a-Pow-1
26658: PPUSH
26659: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
26663: LD_EXP 17
26667: PPUSH
26668: LD_STRING D5a-Pow-1a
26670: PPUSH
26671: CALL_OW 88
// wait ( 0 0$2 ) ;
26675: LD_INT 70
26677: PPUSH
26678: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
26682: LD_EXP 17
26686: PPUSH
26687: LD_STRING D5a-Pow-1b
26689: PPUSH
26690: CALL_OW 88
// wait ( 0 0$3 ) ;
26694: LD_INT 105
26696: PPUSH
26697: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
26701: LD_EXP 17
26705: PPUSH
26706: LD_STRING D5a-Pow-1c
26708: PPUSH
26709: CALL_OW 88
// wait ( 0 0$1 ) ;
26713: LD_INT 35
26715: PPUSH
26716: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
26720: LD_EXP 17
26724: PPUSH
26725: LD_STRING D5a-Pow-1d
26727: PPUSH
26728: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26732: LD_INT 35
26734: PPUSH
26735: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26739: LD_INT 22
26741: PUSH
26742: LD_INT 4
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 21
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 3
26761: PUSH
26762: LD_INT 58
26764: PUSH
26765: EMPTY
26766: LIST
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: PPUSH
26777: CALL_OW 69
26781: PPUSH
26782: LD_INT 59
26784: PPUSH
26785: LD_INT 21
26787: PPUSH
26788: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26792: LD_EXP 65
26796: PPUSH
26797: LD_INT 59
26799: PPUSH
26800: LD_INT 21
26802: PPUSH
26803: CALL_OW 114
// until amUnitsAttack = [ ] ;
26807: LD_EXP 65
26811: PUSH
26812: EMPTY
26813: EQUAL
26814: IFFALSE 26732
// CenterNowOnUnits ( Powell ) ;
26816: LD_EXP 17
26820: PPUSH
26821: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
26825: LD_ADDR_VAR 0 3
26829: PUSH
26830: LD_INT 22
26832: PUSH
26833: LD_INT 4
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: PUSH
26859: LD_EXP 17
26863: PUSH
26864: EMPTY
26865: LIST
26866: DIFF
26867: ST_TO_ADDR
// for i in powellPeople do
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_VAR 0 3
26877: PUSH
26878: FOR_IN
26879: IFFALSE 26908
// if GetSex ( i ) = sex_male then
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 258
26890: PUSH
26891: LD_INT 1
26893: EQUAL
26894: IFFALSE 26906
// sold = i ;
26896: LD_ADDR_VAR 0 2
26900: PUSH
26901: LD_VAR 0 1
26905: ST_TO_ADDR
26906: GO 26878
26908: POP
26909: POP
// Say ( sold , D6-Sol3-1 ) ;
26910: LD_VAR 0 2
26914: PPUSH
26915: LD_STRING D6-Sol3-1
26917: PPUSH
26918: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
26922: LD_EXP 17
26926: PPUSH
26927: LD_STRING D6-Pow-1
26929: PPUSH
26930: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
26934: LD_INT 139
26936: PUSH
26937: LD_INT 138
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: LD_INT 12
26946: PPUSH
26947: CALL_OW 113
// end ;
26951: PPOPN 4
26953: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
26954: LD_EXP 68
26958: PUSH
26959: LD_INT 3
26961: EQUAL
26962: PUSH
26963: LD_INT 12
26965: PPUSH
26966: LD_INT 22
26968: PUSH
26969: LD_INT 8
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 21
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PPUSH
26990: CALL_OW 70
26994: PUSH
26995: LD_INT 2
26997: EQUAL
26998: AND
26999: IFFALSE 27160
27001: GO 27003
27003: DISABLE
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27008: LD_INT 8
27010: PPUSH
27011: LD_INT 1
27013: PPUSH
27014: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27018: LD_INT 4
27020: PPUSH
27021: LD_INT 8
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: LD_INT 1
27029: PPUSH
27030: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27034: LD_ADDR_VAR 0 1
27038: PUSH
27039: LD_INT 92
27041: PPUSH
27042: CALL_OW 313
27046: PUSH
27047: FOR_IN
27048: IFFALSE 27079
// if GetSex ( i ) = sex_male then
27050: LD_VAR 0 1
27054: PPUSH
27055: CALL_OW 258
27059: PUSH
27060: LD_INT 1
27062: EQUAL
27063: IFFALSE 27077
// begin tmp = i ;
27065: LD_ADDR_VAR 0 2
27069: PUSH
27070: LD_VAR 0 1
27074: ST_TO_ADDR
// break ;
27075: GO 27079
// end ;
27077: GO 27047
27079: POP
27080: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27081: LD_INT 92
27083: PPUSH
27084: CALL_OW 313
27088: PPUSH
27089: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27093: LD_VAR 0 2
27097: PPUSH
27098: LD_STRING D6-Sol3-2
27100: PPUSH
27101: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27105: LD_INT 139
27107: PUSH
27108: LD_INT 138
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PPUSH
27115: LD_INT 85
27117: PPUSH
27118: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27122: LD_INT 4
27124: PPUSH
27125: LD_INT 8
27127: PPUSH
27128: LD_INT 2
27130: PPUSH
27131: LD_INT 1
27133: PPUSH
27134: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27138: LD_INT 8
27140: PPUSH
27141: LD_INT 8
27143: PPUSH
27144: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27148: LD_EXP 17
27152: PPUSH
27153: LD_STRING D6-Pow-2
27155: PPUSH
27156: CALL_OW 88
// end ;
27160: PPOPN 2
27162: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27163: LD_INT 85
27165: PPUSH
27166: CALL_OW 301
27170: IFFALSE 27634
27172: GO 27174
27174: DISABLE
27175: LD_INT 0
27177: PPUSH
27178: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27179: LD_INT 22
27181: PUSH
27182: LD_INT 8
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 21
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 33
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 34
27211: PUSH
27212: LD_INT 29
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 50
27221: PUSH
27222: EMPTY
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: PPUSH
27232: CALL_OW 69
27236: PUSH
27237: LD_INT 1
27239: EQUAL
27240: IFFALSE 27351
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27242: LD_INT 22
27244: PUSH
27245: LD_INT 8
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 21
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 33
27264: PUSH
27265: LD_INT 2
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 34
27274: PUSH
27275: LD_INT 29
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 50
27284: PUSH
27285: EMPTY
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: PPUSH
27295: CALL_OW 69
27299: PPUSH
27300: LD_INT 34
27302: PPUSH
27303: LD_INT 22
27305: PUSH
27306: LD_INT 4
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 21
27315: PUSH
27316: LD_INT 3
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 30
27325: PUSH
27326: LD_INT 32
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 70
27342: PUSH
27343: LD_INT 1
27345: ARRAY
27346: PPUSH
27347: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27351: LD_ADDR_VAR 0 1
27355: PUSH
27356: LD_INT 22
27358: PUSH
27359: LD_INT 4
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 21
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 56
27378: PUSH
27379: EMPTY
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 69
27391: PUSH
27392: LD_EXP 17
27396: PUSH
27397: EMPTY
27398: LIST
27399: DIFF
27400: PUSH
27401: FOR_IN
27402: IFFALSE 27433
// if GetSex ( i ) = sex_male then
27404: LD_VAR 0 1
27408: PPUSH
27409: CALL_OW 258
27413: PUSH
27414: LD_INT 1
27416: EQUAL
27417: IFFALSE 27431
// begin tmp = i ;
27419: LD_ADDR_VAR 0 2
27423: PUSH
27424: LD_VAR 0 1
27428: ST_TO_ADDR
// break ;
27429: GO 27433
// end ;
27431: GO 27401
27433: POP
27434: POP
// Say ( Powell , D6a-Pow-1 ) ;
27435: LD_EXP 17
27439: PPUSH
27440: LD_STRING D6a-Pow-1
27442: PPUSH
27443: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
27447: LD_VAR 0 2
27451: PPUSH
27452: LD_STRING D6a-Sol3-1
27454: PPUSH
27455: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
27459: LD_EXP 17
27463: PPUSH
27464: LD_VAR 0 2
27468: PPUSH
27469: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
27473: LD_EXP 17
27477: PPUSH
27478: LD_STRING D6a-Pow-2
27480: PPUSH
27481: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
27485: LD_VAR 0 2
27489: PPUSH
27490: LD_STRING D6a-Sol3-2
27492: PPUSH
27493: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
27497: LD_EXP 17
27501: PPUSH
27502: LD_STRING D6a-Pow-3
27504: PPUSH
27505: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
27509: LD_EXP 17
27513: PPUSH
27514: LD_EXP 72
27518: PPUSH
27519: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
27523: LD_INT 35
27525: PPUSH
27526: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
27530: LD_EXP 17
27534: PPUSH
27535: LD_EXP 72
27539: PPUSH
27540: CALL_OW 120
// until IsInUnit ( Powell ) ;
27544: LD_EXP 17
27548: PPUSH
27549: CALL_OW 310
27553: IFFALSE 27523
// wait ( 0 0$1 ) ;
27555: LD_INT 35
27557: PPUSH
27558: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
27562: LD_EXP 72
27566: PPUSH
27567: LD_INT 77
27569: PPUSH
27570: LD_INT 64
27572: PPUSH
27573: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
27577: LD_EXP 72
27581: PPUSH
27582: LD_INT 91
27584: PPUSH
27585: LD_INT 61
27587: PPUSH
27588: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
27592: LD_EXP 72
27596: PPUSH
27597: LD_INT 74
27599: PPUSH
27600: LD_INT 25
27602: PPUSH
27603: CALL_OW 171
// centerPowell = 1 ;
27607: LD_ADDR_EXP 73
27611: PUSH
27612: LD_INT 1
27614: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27615: LD_INT 525
27617: PPUSH
27618: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
27622: LD_EXP 17
27626: PPUSH
27627: LD_STRING D6b-Pow-1
27629: PPUSH
27630: CALL_OW 88
// end ;
27634: PPOPN 2
27636: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
27637: LD_EXP 72
27641: PPUSH
27642: LD_INT 13
27644: PPUSH
27645: CALL_OW 308
27649: PUSH
27650: LD_EXP 68
27654: PUSH
27655: LD_INT 3
27657: EQUAL
27658: AND
27659: IFFALSE 27801
27661: GO 27663
27663: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
27664: LD_EXP 72
27668: PPUSH
27669: LD_INT 250
27671: PPUSH
27672: CALL_OW 234
// DialogueOn ;
27676: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
27680: LD_EXP 17
27684: PPUSH
27685: LD_STRING D6b-Pow-1a
27687: PPUSH
27688: CALL_OW 88
// DialogueOff ;
27692: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27696: LD_EXP 17
27700: PPUSH
27701: LD_INT 22
27703: PUSH
27704: LD_INT 8
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 34
27713: PUSH
27714: LD_INT 29
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 50
27723: PUSH
27724: EMPTY
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 69
27736: PUSH
27737: LD_INT 1
27739: ARRAY
27740: PPUSH
27741: CALL_OW 120
// wait ( 0 0$1 ) ;
27745: LD_INT 35
27747: PPUSH
27748: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27752: LD_EXP 17
27756: PPUSH
27757: LD_INT 22
27759: PUSH
27760: LD_INT 8
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 34
27769: PUSH
27770: LD_INT 29
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 50
27779: PUSH
27780: EMPTY
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: PUSH
27793: LD_INT 1
27795: ARRAY
27796: PPUSH
27797: CALL_OW 120
// end ;
27801: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
27802: LD_INT 22
27804: PUSH
27805: LD_INT 4
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 34
27814: PUSH
27815: LD_INT 29
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: IFFALSE 28262
27832: GO 27834
27834: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
27835: LD_ADDR_EXP 74
27839: PUSH
27840: LD_INT 22
27842: PUSH
27843: LD_INT 4
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 34
27852: PUSH
27853: LD_INT 29
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PPUSH
27864: CALL_OW 69
27868: PUSH
27869: LD_INT 1
27871: ARRAY
27872: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
27873: LD_INT 8
27875: PPUSH
27876: LD_INT 4
27878: PPUSH
27879: LD_INT 1
27881: PPUSH
27882: LD_INT 1
27884: PPUSH
27885: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
27889: LD_EXP 74
27893: PPUSH
27894: LD_INT 80
27896: PPUSH
27897: LD_INT 19
27899: PPUSH
27900: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27904: LD_EXP 74
27908: PPUSH
27909: LD_INT 74
27911: PPUSH
27912: LD_INT 15
27914: PPUSH
27915: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27919: LD_EXP 74
27923: PPUSH
27924: LD_INT 72
27926: PPUSH
27927: LD_INT 19
27929: PPUSH
27930: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27934: LD_EXP 74
27938: PPUSH
27939: LD_INT 78
27941: PPUSH
27942: LD_INT 24
27944: PPUSH
27945: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
27949: LD_EXP 74
27953: PPUSH
27954: LD_INT 77
27956: PPUSH
27957: LD_INT 20
27959: PPUSH
27960: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27964: LD_EXP 74
27968: PPUSH
27969: LD_INT 74
27971: PPUSH
27972: LD_INT 15
27974: PPUSH
27975: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27979: LD_EXP 74
27983: PPUSH
27984: LD_INT 72
27986: PPUSH
27987: LD_INT 19
27989: PPUSH
27990: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27994: LD_EXP 74
27998: PPUSH
27999: LD_INT 78
28001: PPUSH
28002: LD_INT 24
28004: PPUSH
28005: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28009: LD_EXP 74
28013: PPUSH
28014: LD_INT 77
28016: PPUSH
28017: LD_INT 20
28019: PPUSH
28020: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28024: LD_EXP 74
28028: PPUSH
28029: LD_INT 78
28031: PPUSH
28032: LD_INT 15
28034: PPUSH
28035: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28039: LD_EXP 17
28043: PPUSH
28044: LD_STRING D6b-Pow-1b
28046: PPUSH
28047: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28051: LD_INT 22
28053: PUSH
28054: LD_INT 8
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 21
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 25
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 26
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: PPUSH
28097: CALL_OW 69
28101: PUSH
28102: LD_INT 1
28104: ARRAY
28105: PPUSH
28106: LD_STRING D6b-ArSol1-1
28108: PPUSH
28109: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28113: LD_INT 22
28115: PUSH
28116: LD_INT 8
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 21
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 25
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 26
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: PPUSH
28159: CALL_OW 69
28163: PUSH
28164: LD_INT 2
28166: ARRAY
28167: PPUSH
28168: LD_STRING D6b-ArSol2-1
28170: PPUSH
28171: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28175: LD_EXP 17
28179: PPUSH
28180: LD_STRING D6b-Pow-2
28182: PPUSH
28183: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28187: LD_INT 35
28189: PPUSH
28190: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28194: LD_EXP 74
28198: PPUSH
28199: LD_INT 78
28201: PPUSH
28202: LD_INT 15
28204: PPUSH
28205: CALL_OW 297
28209: PUSH
28210: LD_INT 2
28212: LESS
28213: IFFALSE 28187
// wait ( 0 0$1 ) ;
28215: LD_INT 35
28217: PPUSH
28218: CALL_OW 67
// DialogueOn ;
28222: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28226: LD_EXP 17
28230: PPUSH
28231: LD_STRING D6b-Pow-2a
28233: PPUSH
28234: CALL_OW 88
// DialogueOff ;
28238: CALL_OW 7
// centerPowell = 0 ;
28242: LD_ADDR_EXP 73
28246: PUSH
28247: LD_INT 0
28249: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28250: LD_EXP 74
28254: PPUSH
28255: LD_INT 105
28257: PPUSH
28258: CALL_OW 115
// end ;
28262: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28263: LD_INT 105
28265: PPUSH
28266: CALL_OW 301
28270: PUSH
28271: LD_EXP 68
28275: PUSH
28276: LD_INT 3
28278: EQUAL
28279: AND
28280: IFFALSE 29114
28282: GO 28284
28284: DISABLE
28285: LD_INT 0
28287: PPUSH
28288: PPUSH
28289: PPUSH
28290: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28291: LD_ADDR_VAR 0 2
28295: PUSH
28296: LD_INT 22
28298: PUSH
28299: LD_INT 4
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 21
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 26
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: PUSH
28336: LD_EXP 1
28340: PUSH
28341: LD_EXP 3
28345: PUSH
28346: LD_EXP 21
28350: PUSH
28351: LD_EXP 22
28355: PUSH
28356: LD_EXP 23
28360: PUSH
28361: LD_EXP 4
28365: PUSH
28366: LD_EXP 5
28370: PUSH
28371: LD_EXP 6
28375: PUSH
28376: LD_EXP 7
28380: PUSH
28381: LD_EXP 8
28385: PUSH
28386: LD_EXP 9
28390: PUSH
28391: LD_EXP 10
28395: PUSH
28396: LD_EXP 11
28400: PUSH
28401: LD_EXP 12
28405: PUSH
28406: LD_EXP 13
28410: PUSH
28411: LD_EXP 14
28415: PUSH
28416: LD_EXP 15
28420: PUSH
28421: LD_EXP 17
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: DIFF
28446: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
28447: LD_INT 49
28449: PPUSH
28450: LD_INT 66
28452: PPUSH
28453: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_STRING D6c-Sol3-1
28468: PPUSH
28469: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
28473: LD_EXP 1
28477: PPUSH
28478: LD_STRING D6c-JMM-1
28480: PPUSH
28481: CALL_OW 88
// if IsOk ( Cyrus ) then
28485: LD_EXP 7
28489: PPUSH
28490: CALL_OW 302
28494: IFFALSE 28508
// Say ( Cyrus , D6c-Cyrus-1 ) ;
28496: LD_EXP 7
28500: PPUSH
28501: LD_STRING D6c-Cyrus-1
28503: PPUSH
28504: CALL_OW 88
// if IsOk ( Bobby ) then
28508: LD_EXP 6
28512: PPUSH
28513: CALL_OW 302
28517: IFFALSE 28531
// Say ( Bobby , D6c-Bobby-1 ) ;
28519: LD_EXP 6
28523: PPUSH
28524: LD_STRING D6c-Bobby-1
28526: PPUSH
28527: CALL_OW 88
// if IsOk ( Cornel ) then
28531: LD_EXP 12
28535: PPUSH
28536: CALL_OW 302
28540: IFFALSE 28554
// Say ( Cornel , D6c-Corn-1 ) ;
28542: LD_EXP 12
28546: PPUSH
28547: LD_STRING D6c-Corn-1
28549: PPUSH
28550: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
28554: LD_VAR 0 2
28558: PUSH
28559: LD_INT 2
28561: ARRAY
28562: PPUSH
28563: LD_STRING D6c-Sol1-1
28565: PPUSH
28566: CALL_OW 88
// if IsOk ( Lisa ) then
28570: LD_EXP 4
28574: PPUSH
28575: CALL_OW 302
28579: IFFALSE 28593
// Say ( Lisa , D6c-Lisa-1 ) ;
28581: LD_EXP 4
28585: PPUSH
28586: LD_STRING D6c-Lisa-1
28588: PPUSH
28589: CALL_OW 88
// if IsOk ( Gary ) then
28593: LD_EXP 13
28597: PPUSH
28598: CALL_OW 302
28602: IFFALSE 28616
// Say ( Gary , D6c-Gary-1 ) ;
28604: LD_EXP 13
28608: PPUSH
28609: LD_STRING D6c-Gary-1
28611: PPUSH
28612: CALL_OW 88
// if IsOK ( Donaldson ) then
28616: LD_EXP 5
28620: PPUSH
28621: CALL_OW 302
28625: IFFALSE 28639
// Say ( Donaldson , D6c-Don-1 ) ;
28627: LD_EXP 5
28631: PPUSH
28632: LD_STRING D6c-Don-1
28634: PPUSH
28635: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
28639: LD_VAR 0 2
28643: PUSH
28644: LD_INT 3
28646: ARRAY
28647: PPUSH
28648: LD_STRING D6c-Sol2-1
28650: PPUSH
28651: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
28655: LD_INT 22
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 21
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 69
28683: PPUSH
28684: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
28688: LD_INT 22
28690: PUSH
28691: LD_INT 4
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 21
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PPUSH
28712: CALL_OW 69
28716: PPUSH
28717: CALL_OW 122
// wait ( 0 0$1 ) ;
28721: LD_INT 35
28723: PPUSH
28724: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 22
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 21
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PPUSH
28757: CALL_OW 69
28761: PUSH
28762: LD_EXP 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: DIFF
28770: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
28771: LD_ADDR_VAR 0 4
28775: PUSH
28776: LD_INT 22
28778: PUSH
28779: LD_INT 4
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 21
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PPUSH
28800: CALL_OW 69
28804: ST_TO_ADDR
// for i := 1 to tmp2 do
28805: LD_ADDR_VAR 0 1
28809: PUSH
28810: DOUBLE
28811: LD_INT 1
28813: DEC
28814: ST_TO_ADDR
28815: LD_VAR 0 4
28819: PUSH
28820: FOR_TO
28821: IFFALSE 28872
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
28823: LD_VAR 0 4
28827: PUSH
28828: LD_VAR 0 1
28832: ARRAY
28833: PPUSH
28834: LD_INT 43
28836: PUSH
28837: LD_VAR 0 1
28841: PLUS
28842: PPUSH
28843: LD_INT 64
28845: PPUSH
28846: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
28850: LD_VAR 0 4
28854: PUSH
28855: LD_VAR 0 1
28859: ARRAY
28860: PPUSH
28861: LD_EXP 1
28865: PPUSH
28866: CALL_OW 179
// end ;
28870: GO 28820
28872: POP
28873: POP
// for i := 1 to tmp1 do
28874: LD_ADDR_VAR 0 1
28878: PUSH
28879: DOUBLE
28880: LD_INT 1
28882: DEC
28883: ST_TO_ADDR
28884: LD_VAR 0 3
28888: PUSH
28889: FOR_TO
28890: IFFALSE 28941
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
28892: LD_VAR 0 3
28896: PUSH
28897: LD_VAR 0 1
28901: ARRAY
28902: PPUSH
28903: LD_INT 43
28905: PUSH
28906: LD_VAR 0 1
28910: PLUS
28911: PPUSH
28912: LD_INT 65
28914: PPUSH
28915: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
28919: LD_VAR 0 3
28923: PUSH
28924: LD_VAR 0 1
28928: ARRAY
28929: PPUSH
28930: LD_EXP 1
28934: PPUSH
28935: CALL_OW 179
// end ;
28939: GO 28889
28941: POP
28942: POP
// repeat wait ( 0 0$1 ) ;
28943: LD_INT 35
28945: PPUSH
28946: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
28950: LD_EXP 1
28954: PPUSH
28955: LD_INT 48
28957: PPUSH
28958: LD_INT 68
28960: PPUSH
28961: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
28965: LD_EXP 1
28969: PPUSH
28970: LD_INT 48
28972: PPUSH
28973: LD_INT 68
28975: PPUSH
28976: CALL_OW 297
28980: PUSH
28981: LD_INT 2
28983: LESS
28984: IFFALSE 28943
// AddComTurnXY ( JMM , 47 , 65 ) ;
28986: LD_EXP 1
28990: PPUSH
28991: LD_INT 47
28993: PPUSH
28994: LD_INT 65
28996: PPUSH
28997: CALL_OW 178
// wait ( 0 0$2 ) ;
29001: LD_INT 70
29003: PPUSH
29004: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29008: LD_VAR 0 2
29012: PUSH
29013: LD_INT 1
29015: ARRAY
29016: PPUSH
29017: LD_STRING D6c-Sol3-2
29019: PPUSH
29020: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29024: LD_EXP 1
29028: PPUSH
29029: LD_STRING D6c-JMM-2
29031: PPUSH
29032: CALL_OW 88
// Video ( false ) ;
29036: LD_INT 0
29038: PPUSH
29039: CALL 6835 0 1
// centerPowell = 0 ;
29043: LD_ADDR_EXP 73
29047: PUSH
29048: LD_INT 0
29050: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29051: LD_INT 22
29053: PUSH
29054: LD_INT 4
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PPUSH
29061: CALL_OW 69
29065: PPUSH
29066: LD_INT 1
29068: PPUSH
29069: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29073: LD_STRING M2
29075: PPUSH
29076: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29080: LD_INT 4
29082: PPUSH
29083: LD_INT 4
29085: PPUSH
29086: CALL_OW 343
// timerStatus = 1 ;
29090: LD_ADDR_EXP 95
29094: PUSH
29095: LD_INT 1
29097: ST_TO_ADDR
// missionStage = 1 ;
29098: LD_ADDR_EXP 100
29102: PUSH
29103: LD_INT 1
29105: ST_TO_ADDR
// startAttacks = 1 ;
29106: LD_ADDR_EXP 71
29110: PUSH
29111: LD_INT 1
29113: ST_TO_ADDR
// end ;
29114: PPOPN 4
29116: END
// every 0 0$1 trigger centerPowell = 1 do
29117: LD_EXP 73
29121: PUSH
29122: LD_INT 1
29124: EQUAL
29125: IFFALSE 29408
29127: GO 29129
29129: DISABLE
// begin enable ;
29130: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29131: LD_EXP 17
29135: PUSH
29136: LD_EXP 74
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: LD_INT 1000
29147: PPUSH
29148: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29152: LD_INT 22
29154: PUSH
29155: LD_INT 4
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 34
29164: PUSH
29165: LD_INT 29
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 33
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: PPUSH
29187: CALL_OW 69
29191: PUSH
29192: LD_INT 0
29194: GREATER
29195: IFFALSE 29248
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29197: LD_INT 22
29199: PUSH
29200: LD_INT 4
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 34
29209: PUSH
29210: LD_INT 29
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 33
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: LIST
29231: PPUSH
29232: CALL_OW 69
29236: PUSH
29237: LD_INT 1
29239: ARRAY
29240: PPUSH
29241: LD_INT 1000
29243: PPUSH
29244: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29248: LD_INT 22
29250: PUSH
29251: LD_INT 8
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 34
29260: PUSH
29261: LD_INT 29
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 33
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: PPUSH
29283: CALL_OW 69
29287: PUSH
29288: LD_INT 0
29290: GREATER
29291: IFFALSE 29344
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29293: LD_INT 22
29295: PUSH
29296: LD_INT 8
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 34
29305: PUSH
29306: LD_INT 29
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 33
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 69
29332: PUSH
29333: LD_INT 1
29335: ARRAY
29336: PPUSH
29337: LD_INT 1000
29339: PPUSH
29340: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29344: LD_EXP 72
29348: PPUSH
29349: LD_INT 13
29351: PPUSH
29352: CALL_OW 308
29356: NOT
29357: IFFALSE 29371
// SetLives ( powellVeh , 1000 ) ;
29359: LD_EXP 72
29363: PPUSH
29364: LD_INT 1000
29366: PPUSH
29367: CALL_OW 234
// if not IsInUnit ( Powell ) then
29371: LD_EXP 17
29375: PPUSH
29376: CALL_OW 310
29380: NOT
29381: IFFALSE 29394
// CenterNowOnUnits ( Powell ) else
29383: LD_EXP 17
29387: PPUSH
29388: CALL_OW 87
29392: GO 29408
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
29394: LD_EXP 17
29398: PPUSH
29399: CALL_OW 310
29403: PPUSH
29404: CALL_OW 87
// end ;
29408: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
29409: LD_EXP 96
29413: PUSH
29414: LD_INT 560
29416: GREATEREQUAL
29417: IFFALSE 29629
29419: GO 29421
29421: DISABLE
// begin DialogueOn ;
29422: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
29426: LD_EXP 52
29430: PPUSH
29431: LD_STRING D7-Friend-1
29433: PPUSH
29434: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
29438: LD_EXP 1
29442: PPUSH
29443: LD_STRING D7-JMM-1
29445: PPUSH
29446: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
29450: LD_EXP 52
29454: PPUSH
29455: LD_STRING D7-Friend-2
29457: PPUSH
29458: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
29462: LD_EXP 1
29466: PPUSH
29467: LD_STRING D7-JMM-2
29469: PPUSH
29470: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
29474: LD_EXP 52
29478: PPUSH
29479: LD_STRING D7-Friend-3
29481: PPUSH
29482: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
29486: LD_EXP 1
29490: PPUSH
29491: LD_STRING D7-JMM-3
29493: PPUSH
29494: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
29498: LD_EXP 52
29502: PPUSH
29503: LD_STRING D7-Friend-4
29505: PPUSH
29506: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
29510: LD_EXP 1
29514: PPUSH
29515: LD_STRING D7-JMM-4
29517: PPUSH
29518: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
29522: LD_EXP 52
29526: PPUSH
29527: LD_STRING D7-Friend-5
29529: PPUSH
29530: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
29534: LD_EXP 1
29538: PPUSH
29539: LD_STRING D7-JMM-5
29541: PPUSH
29542: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
29546: LD_EXP 52
29550: PPUSH
29551: LD_STRING D7-Friend-6
29553: PPUSH
29554: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
29558: LD_EXP 1
29562: PPUSH
29563: LD_STRING D7-JMM-6
29565: PPUSH
29566: CALL_OW 88
// DialogueOff ;
29570: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
29574: LD_EXP 35
29578: PPUSH
29579: LD_INT 15
29581: PPUSH
29582: LD_INT 0
29584: PPUSH
29585: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
29589: LD_EXP 35
29593: PPUSH
29594: LD_INT 2
29596: PPUSH
29597: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29601: LD_EXP 35
29605: PPUSH
29606: LD_INT 2
29608: PPUSH
29609: LD_INT 78
29611: PPUSH
29612: LD_INT 12
29614: PPUSH
29615: LD_INT 3
29617: PPUSH
29618: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
29622: LD_STRING Mlegion
29624: PPUSH
29625: CALL_OW 337
// end ;
29629: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
29630: LD_INT 22
29632: PUSH
29633: LD_INT 8
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 21
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 23
29652: PUSH
29653: LD_INT 2
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: PPUSH
29665: CALL_OW 69
29669: PUSH
29670: LD_INT 6
29672: PUSH
29673: LD_INT 5
29675: PUSH
29676: LD_INT 4
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: PUSH
29684: LD_OWVAR 67
29688: ARRAY
29689: LESSEQUAL
29690: IFFALSE 30004
29692: GO 29694
29694: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
29695: LD_EXP 30
29699: PPUSH
29700: LD_INT 19
29702: PPUSH
29703: LD_INT 0
29705: PPUSH
29706: CALL_OW 49
// KillUnit ( Kozlov ) ;
29710: LD_EXP 35
29714: PPUSH
29715: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
29719: LD_INT 22
29721: PUSH
29722: LD_INT 8
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 21
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 23
29741: PUSH
29742: LD_INT 3
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 30
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: PPUSH
29765: CALL_OW 69
29769: PUSH
29770: LD_INT 1
29772: ARRAY
29773: PPUSH
29774: CALL_OW 66
// DialogueOn ;
29778: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
29782: LD_EXP 1
29786: PPUSH
29787: LD_STRING D13-JMM-1
29789: PPUSH
29790: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
29794: LD_EXP 30
29798: PPUSH
29799: LD_STRING D13-Kurt-1
29801: PPUSH
29802: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
29806: LD_EXP 1
29810: PPUSH
29811: LD_STRING D13-JMM-2
29813: PPUSH
29814: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
29818: LD_EXP 30
29822: PPUSH
29823: LD_STRING D13-Kurt-2a
29825: PPUSH
29826: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
29830: LD_EXP 1
29834: PPUSH
29835: LD_STRING D13-JMM-3
29837: PPUSH
29838: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
29842: LD_EXP 30
29846: PPUSH
29847: LD_STRING D13-Kurt-3
29849: PPUSH
29850: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
29854: LD_EXP 1
29858: PPUSH
29859: LD_STRING D13-JMM-4
29861: PPUSH
29862: CALL_OW 88
// DialogueOff ;
29866: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
29870: LD_INT 22
29872: PUSH
29873: LD_INT 8
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 50
29882: PUSH
29883: EMPTY
29884: LIST
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PPUSH
29890: CALL_OW 69
29894: PPUSH
29895: LD_INT 1
29897: PPUSH
29898: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
29902: LD_INT 22
29904: PUSH
29905: LD_INT 8
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: LD_INT 24
29917: PUSH
29918: LD_INT 250
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PPUSH
29933: CALL_OW 69
29937: PPUSH
29938: LD_INT 0
29940: PPUSH
29941: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
29945: LD_STRING MlegionOut
29947: PPUSH
29948: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
29952: LD_INT 8
29954: PPUSH
29955: LD_INT 1
29957: PPUSH
29958: LD_INT 1
29960: PPUSH
29961: LD_INT 1
29963: PPUSH
29964: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
29968: LD_EXP 52
29972: PPUSH
29973: LD_INT 30
29975: PPUSH
29976: LD_INT 0
29978: PPUSH
29979: CALL_OW 49
// wait ( 0 0$1 ) ;
29983: LD_INT 35
29985: PPUSH
29986: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
29990: LD_EXP 52
29994: PPUSH
29995: LD_EXP 1
29999: PPUSH
30000: CALL_OW 112
// end ;
30004: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30005: LD_INT 1
30007: PPUSH
30008: LD_EXP 52
30012: PPUSH
30013: CALL_OW 292
30017: IFFALSE 30293
30019: GO 30021
30021: DISABLE
30022: LD_INT 0
30024: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30025: LD_EXP 52
30029: PPUSH
30030: CALL_OW 87
// DialogueOn ;
30034: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30038: LD_EXP 1
30042: PPUSH
30043: LD_STRING D14-JMM-1
30045: PPUSH
30046: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30050: LD_EXP 52
30054: PPUSH
30055: LD_STRING D14-Friend-1
30057: PPUSH
30058: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30062: LD_EXP 1
30066: PPUSH
30067: LD_STRING D14-JMM-2
30069: PPUSH
30070: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30074: LD_EXP 52
30078: PPUSH
30079: LD_STRING D14-Friend-2
30081: PPUSH
30082: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30086: LD_EXP 1
30090: PPUSH
30091: LD_STRING D14-JMM-3
30093: PPUSH
30094: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30098: LD_EXP 52
30102: PPUSH
30103: LD_STRING D14-Friend-3
30105: PPUSH
30106: CALL_OW 88
// DialogueOff ;
30110: CALL_OW 7
// dec = Query ( Q14 ) ;
30114: LD_ADDR_VAR 0 1
30118: PUSH
30119: LD_STRING Q14
30121: PPUSH
30122: CALL_OW 97
30126: ST_TO_ADDR
// if dec = 1 then
30127: LD_VAR 0 1
30131: PUSH
30132: LD_INT 1
30134: EQUAL
30135: IFFALSE 30169
// begin DialogueOn ;
30137: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30141: LD_EXP 1
30145: PPUSH
30146: LD_STRING D14a-JMM-1
30148: PPUSH
30149: CALL_OW 88
// DialogueOff ;
30153: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30157: LD_EXP 52
30161: PPUSH
30162: LD_INT 1
30164: PPUSH
30165: CALL_OW 235
// end ; if dec = 2 then
30169: LD_VAR 0 1
30173: PUSH
30174: LD_INT 2
30176: EQUAL
30177: IFFALSE 30211
// begin DialogueOn ;
30179: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30183: LD_EXP 1
30187: PPUSH
30188: LD_STRING D14b-JMM-1
30190: PPUSH
30191: CALL_OW 88
// DialogueOff ;
30195: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30199: LD_EXP 52
30203: PPUSH
30204: LD_INT 18
30206: PPUSH
30207: CALL_OW 113
// end ; if dec = 3 then
30211: LD_VAR 0 1
30215: PUSH
30216: LD_INT 3
30218: EQUAL
30219: IFFALSE 30293
// begin DialogueOn ;
30221: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30225: LD_EXP 1
30229: PPUSH
30230: LD_STRING D14c-JMM-1
30232: PPUSH
30233: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30237: LD_EXP 52
30241: PPUSH
30242: LD_STRING D14c-Friend-1
30244: PPUSH
30245: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30249: LD_EXP 1
30253: PPUSH
30254: LD_STRING D14c-JMM-2
30256: PPUSH
30257: CALL_OW 88
// DialogueOff ;
30261: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30265: LD_INT 8
30267: PPUSH
30268: LD_INT 1
30270: PPUSH
30271: LD_INT 2
30273: PPUSH
30274: LD_INT 1
30276: PPUSH
30277: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30281: LD_EXP 52
30285: PPUSH
30286: LD_INT 18
30288: PPUSH
30289: CALL_OW 113
// end ; end ;
30293: PPOPN 1
30295: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30296: LD_EXP 52
30300: PPUSH
30301: LD_INT 18
30303: PPUSH
30304: CALL_OW 308
30308: PUSH
30309: LD_EXP 52
30313: PPUSH
30314: CALL_OW 255
30318: PUSH
30319: LD_INT 8
30321: EQUAL
30322: AND
30323: IFFALSE 30337
30325: GO 30327
30327: DISABLE
// RemoveUnit ( LegionFriend ) ;
30328: LD_EXP 52
30332: PPUSH
30333: CALL_OW 64
30337: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30338: LD_EXP 96
30342: PUSH
30343: LD_INT 31570
30345: GREATEREQUAL
30346: IFFALSE 30422
30348: GO 30350
30350: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30351: LD_EXP 80
30355: PUSH
30356: LD_INT 1
30358: EQUAL
30359: PUSH
30360: LD_EXP 78
30364: PUSH
30365: EMPTY
30366: EQUAL
30367: AND
30368: IFFALSE 30374
// PrepareSupportFromKappa ;
30370: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
30374: LD_EXP 80
30378: PUSH
30379: LD_INT 0
30381: EQUAL
30382: PUSH
30383: LD_EXP 81
30387: PUSH
30388: LD_INT 1
30390: EQUAL
30391: AND
30392: IFFALSE 30398
// PrepareAttackFromKappa ;
30394: CALL 5219 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
30398: LD_EXP 80
30402: PUSH
30403: LD_INT 0
30405: EQUAL
30406: PUSH
30407: LD_EXP 81
30411: PUSH
30412: LD_INT 0
30414: EQUAL
30415: AND
30416: IFFALSE 30422
// PrepareAttackFromKappa ;
30418: CALL 5219 0 0
// end ;
30422: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
30423: LD_INT 1
30425: PPUSH
30426: LD_EXP 34
30430: PPUSH
30431: CALL_OW 292
30435: IFFALSE 30703
30437: GO 30439
30439: DISABLE
// begin missionStage = 2 ;
30440: LD_ADDR_EXP 100
30444: PUSH
30445: LD_INT 2
30447: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
30448: LD_EXP 34
30452: PPUSH
30453: CALL_OW 87
// DialogueOn ;
30457: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30461: LD_EXP 1
30465: PPUSH
30466: LD_STRING D10nB-JMM-1
30468: PPUSH
30469: CALL_OW 88
// if BurlakStatus = 1 then
30473: LD_EXP 75
30477: PUSH
30478: LD_INT 1
30480: EQUAL
30481: IFFALSE 30495
// Say ( Vsevolod , D10nB-Vse-1a ) ;
30483: LD_EXP 33
30487: PPUSH
30488: LD_STRING D10nB-Vse-1a
30490: PPUSH
30491: CALL_OW 88
// if BurlakStatus = 0 then
30495: LD_EXP 75
30499: PUSH
30500: LD_INT 0
30502: EQUAL
30503: IFFALSE 30517
// Say ( Vsevolod , D10nB-Vse-1 ) ;
30505: LD_EXP 33
30509: PPUSH
30510: LD_STRING D10nB-Vse-1
30512: PPUSH
30513: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
30517: LD_EXP 1
30521: PPUSH
30522: LD_STRING D10nB-JMM-2
30524: PPUSH
30525: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
30529: LD_EXP 80
30533: PUSH
30534: LD_EXP 81
30538: PUSH
30539: LD_INT 1
30541: EQUAL
30542: AND
30543: IFFALSE 30557
// Say ( Vsevolod , D10nB-Vse-5 ) ;
30545: LD_EXP 33
30549: PPUSH
30550: LD_STRING D10nB-Vse-5
30552: PPUSH
30553: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
30557: LD_EXP 80
30561: PUSH
30562: LD_EXP 81
30566: PUSH
30567: LD_INT 0
30569: EQUAL
30570: AND
30571: IFFALSE 30699
// begin if JMMGirl = 1 then
30573: LD_EXP 79
30577: PUSH
30578: LD_INT 1
30580: EQUAL
30581: IFFALSE 30631
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
30583: LD_EXP 33
30587: PPUSH
30588: LD_STRING D10nB-Vse-2
30590: PPUSH
30591: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30595: LD_EXP 1
30599: PPUSH
30600: LD_STRING D10nB-JMM-3
30602: PPUSH
30603: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30607: LD_EXP 33
30611: PPUSH
30612: LD_STRING D10nB-Vse-3
30614: PPUSH
30615: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
30619: LD_EXP 1
30623: PPUSH
30624: LD_STRING D10nB-JMM-4
30626: PPUSH
30627: CALL_OW 88
// end ; if JMMGirl = 2 then
30631: LD_EXP 79
30635: PUSH
30636: LD_INT 2
30638: EQUAL
30639: IFFALSE 30665
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
30641: LD_EXP 33
30645: PPUSH
30646: LD_STRING D10nB-Vse-4
30648: PPUSH
30649: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
30653: LD_EXP 1
30657: PPUSH
30658: LD_STRING D10nB-JMM-5
30660: PPUSH
30661: CALL_OW 88
// end ; if JMMGirl = 3 then
30665: LD_EXP 79
30669: PUSH
30670: LD_INT 3
30672: EQUAL
30673: IFFALSE 30699
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
30675: LD_EXP 33
30679: PPUSH
30680: LD_STRING D10nB-Vse-5
30682: PPUSH
30683: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
30687: LD_EXP 1
30691: PPUSH
30692: LD_STRING D10nB-JMM-6
30694: PPUSH
30695: CALL_OW 88
// end ; end ; DialogueOff ;
30699: CALL_OW 7
// end ;
30703: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
30704: LD_EXP 96
30708: PUSH
30709: LD_INT 63070
30711: GREATEREQUAL
30712: IFFALSE 30990
30714: GO 30716
30716: DISABLE
// begin PrepareOmegaTeam ;
30717: CALL 2789 0 0
// missionStage = 3 ;
30721: LD_ADDR_EXP 100
30725: PUSH
30726: LD_INT 3
30728: ST_TO_ADDR
// DialogueOn ;
30729: CALL_OW 6
// if StevensStatus = 1 then
30733: LD_EXP 76
30737: PUSH
30738: LD_INT 1
30740: EQUAL
30741: IFFALSE 30853
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
30743: LD_EXP 3
30747: PPUSH
30748: CALL_OW 310
30752: PPUSH
30753: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
30757: LD_EXP 3
30761: PPUSH
30762: LD_STRING D8-Huck-1
30764: PPUSH
30765: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
30769: LD_EXP 1
30773: PPUSH
30774: LD_STRING D8-JMM-1
30776: PPUSH
30777: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
30781: LD_EXP 3
30785: PPUSH
30786: LD_STRING D8-Huck-2
30788: PPUSH
30789: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30793: LD_EXP 1
30797: PPUSH
30798: LD_STRING D8-JMM-2
30800: PPUSH
30801: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
30805: LD_EXP 3
30809: PPUSH
30810: LD_STRING D8-Huck-3
30812: PPUSH
30813: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30817: LD_EXP 1
30821: PPUSH
30822: LD_STRING D8-JMM-3
30824: PPUSH
30825: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
30829: LD_EXP 3
30833: PPUSH
30834: LD_STRING D8-Huck-4
30836: PPUSH
30837: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30841: LD_EXP 1
30845: PPUSH
30846: LD_STRING D8-JMM-4
30848: PPUSH
30849: CALL_OW 88
// end ; if StevensStatus = 0 then
30853: LD_EXP 76
30857: PUSH
30858: LD_INT 0
30860: EQUAL
30861: IFFALSE 30973
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
30863: LD_EXP 21
30867: PPUSH
30868: CALL_OW 310
30872: PPUSH
30873: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
30877: LD_EXP 21
30881: PPUSH
30882: LD_STRING D8-Huck-1
30884: PPUSH
30885: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
30889: LD_EXP 1
30893: PPUSH
30894: LD_STRING D8-JMM-1a
30896: PPUSH
30897: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
30901: LD_EXP 21
30905: PPUSH
30906: LD_STRING D8-Huck-2
30908: PPUSH
30909: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30913: LD_EXP 1
30917: PPUSH
30918: LD_STRING D8-JMM-2
30920: PPUSH
30921: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
30925: LD_EXP 21
30929: PPUSH
30930: LD_STRING D8-Huck-3
30932: PPUSH
30933: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30937: LD_EXP 1
30941: PPUSH
30942: LD_STRING D8-JMM-3
30944: PPUSH
30945: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
30949: LD_EXP 21
30953: PPUSH
30954: LD_STRING D8-Huck-4
30956: PPUSH
30957: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30961: LD_EXP 1
30965: PPUSH
30966: LD_STRING D8-JMM-4
30968: PPUSH
30969: CALL_OW 88
// end ; DialogueOff ;
30973: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
30977: LD_INT 25
30979: PPUSH
30980: LD_INT 1
30982: PPUSH
30983: LD_INT 1
30985: PPUSH
30986: CALL_OW 322
// end ;
30990: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
30991: LD_EXP 96
30995: PUSH
30996: LD_INT 73570
30998: GREATEREQUAL
30999: IFFALSE 31349
31001: GO 31003
31003: DISABLE
31004: LD_INT 0
31006: PPUSH
// begin missionStage = 4 ;
31007: LD_ADDR_EXP 100
31011: PUSH
31012: LD_INT 4
31014: ST_TO_ADDR
// DialogueOn ;
31015: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31019: LD_EXP 28
31023: PPUSH
31024: LD_STRING D9-Roth-1
31026: PPUSH
31027: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31031: LD_EXP 1
31035: PPUSH
31036: LD_STRING D9-JMM-1
31038: PPUSH
31039: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31043: LD_EXP 28
31047: PPUSH
31048: LD_STRING D9-Roth-2
31050: PPUSH
31051: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31055: LD_EXP 28
31059: PPUSH
31060: LD_STRING D9-Roth-2a
31062: PPUSH
31063: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31067: LD_EXP 26
31071: PPUSH
31072: LD_STRING D9-Pla-2
31074: PPUSH
31075: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31079: LD_EXP 28
31083: PPUSH
31084: LD_STRING D9-Roth-3
31086: PPUSH
31087: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31091: LD_EXP 26
31095: PPUSH
31096: LD_STRING D9-Pla-3
31098: PPUSH
31099: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31103: LD_EXP 28
31107: PPUSH
31108: LD_STRING D9-Roth-4
31110: PPUSH
31111: CALL_OW 94
// dec = Query ( Q9 ) ;
31115: LD_ADDR_VAR 0 1
31119: PUSH
31120: LD_STRING Q9
31122: PPUSH
31123: CALL_OW 97
31127: ST_TO_ADDR
// if dec = 1 then
31128: LD_VAR 0 1
31132: PUSH
31133: LD_INT 1
31135: EQUAL
31136: IFFALSE 31150
// SayRadio ( Roth , D9a-Roth-1 ) ;
31138: LD_EXP 28
31142: PPUSH
31143: LD_STRING D9a-Roth-1
31145: PPUSH
31146: CALL_OW 94
// if dec = 2 then
31150: LD_VAR 0 1
31154: PUSH
31155: LD_INT 2
31157: EQUAL
31158: IFFALSE 31184
// begin Say ( JMM , D9b-JMM-1 ) ;
31160: LD_EXP 1
31164: PPUSH
31165: LD_STRING D9b-JMM-1
31167: PPUSH
31168: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31172: LD_EXP 28
31176: PPUSH
31177: LD_STRING D9b-Roth-1
31179: PPUSH
31180: CALL_OW 94
// end ; if dec = 3 then
31184: LD_VAR 0 1
31188: PUSH
31189: LD_INT 3
31191: EQUAL
31192: IFFALSE 31254
// begin Say ( JMM , D9c-JMM-1 ) ;
31194: LD_EXP 1
31198: PPUSH
31199: LD_STRING D9c-JMM-1
31201: PPUSH
31202: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31206: LD_EXP 28
31210: PPUSH
31211: LD_STRING D9c-Roth-1
31213: PPUSH
31214: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31218: LD_EXP 1
31222: PPUSH
31223: LD_STRING D9c-JMM-2
31225: PPUSH
31226: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31230: LD_EXP 28
31234: PPUSH
31235: LD_STRING D9c-Roth-2
31237: PPUSH
31238: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31242: LD_EXP 1
31246: PPUSH
31247: LD_STRING D9c-JMM-3
31249: PPUSH
31250: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31254: LD_EXP 28
31258: PPUSH
31259: LD_STRING D9c-Roth-3
31261: PPUSH
31262: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31266: LD_EXP 28
31270: PPUSH
31271: LD_STRING D9cont-Roth-1
31273: PPUSH
31274: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31278: LD_EXP 1
31282: PPUSH
31283: LD_STRING D9cont-JMM-1
31285: PPUSH
31286: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31290: LD_EXP 28
31294: PPUSH
31295: LD_STRING D9cont-Roth-2
31297: PPUSH
31298: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31302: LD_EXP 1
31306: PPUSH
31307: LD_STRING D9cont-JMM-2
31309: PPUSH
31310: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31314: LD_EXP 28
31318: PPUSH
31319: LD_STRING D9cont-Roth-3
31321: PPUSH
31322: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31326: LD_EXP 1
31330: PPUSH
31331: LD_STRING D9cont-JMM-3
31333: PPUSH
31334: CALL_OW 88
// DialogueOff ;
31338: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31342: LD_STRING M3
31344: PPUSH
31345: CALL_OW 337
// end ;
31349: PPOPN 1
31351: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
31352: LD_INT 22
31354: PUSH
31355: LD_INT 7
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 21
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PPUSH
31376: CALL_OW 69
31380: PUSH
31381: LD_INT 20
31383: PUSH
31384: LD_INT 18
31386: PUSH
31387: LD_INT 15
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: LIST
31394: PUSH
31395: LD_OWVAR 67
31399: ARRAY
31400: LESSEQUAL
31401: IFFALSE 31887
31403: GO 31405
31405: DISABLE
31406: LD_INT 0
31408: PPUSH
31409: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
31410: LD_ADDR_VAR 0 1
31414: PUSH
31415: LD_INT 22
31417: PUSH
31418: LD_INT 7
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 21
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 23
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 24
31447: PUSH
31448: LD_INT 900
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: PPUSH
31461: CALL_OW 69
31465: PUSH
31466: FOR_IN
31467: IFFALSE 31498
// if GetSex ( i ) = sex_male then
31469: LD_VAR 0 1
31473: PPUSH
31474: CALL_OW 258
31478: PUSH
31479: LD_INT 1
31481: EQUAL
31482: IFFALSE 31496
// begin tmp = i ;
31484: LD_ADDR_VAR 0 2
31488: PUSH
31489: LD_VAR 0 1
31493: ST_TO_ADDR
// break ;
31494: GO 31498
// end ;
31496: GO 31466
31498: POP
31499: POP
// if tmp = 0 then
31500: LD_VAR 0 2
31504: PUSH
31505: LD_INT 0
31507: EQUAL
31508: IFFALSE 31562
// begin uc_side = 7 ;
31510: LD_ADDR_OWVAR 20
31514: PUSH
31515: LD_INT 7
31517: ST_TO_ADDR
// uc_nation = 3 ;
31518: LD_ADDR_OWVAR 21
31522: PUSH
31523: LD_INT 3
31525: ST_TO_ADDR
// hc_name =  ;
31526: LD_ADDR_OWVAR 26
31530: PUSH
31531: LD_STRING 
31533: ST_TO_ADDR
// hc_gallery =  ;
31534: LD_ADDR_OWVAR 33
31538: PUSH
31539: LD_STRING 
31541: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
31542: LD_INT 1
31544: PPUSH
31545: LD_INT 10
31547: PPUSH
31548: CALL_OW 381
// tmp = CreateHuman ;
31552: LD_ADDR_VAR 0 2
31556: PUSH
31557: CALL_OW 44
31561: ST_TO_ADDR
// end ; AllianceAI = 0 ;
31562: LD_ADDR_EXP 84
31566: PUSH
31567: LD_INT 0
31569: ST_TO_ADDR
// AllianceEscape = 1 ;
31570: LD_ADDR_EXP 90
31574: PUSH
31575: LD_INT 1
31577: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
31578: LD_INT 7
31580: PPUSH
31581: LD_INT 1
31583: PPUSH
31584: LD_INT 1
31586: PPUSH
31587: LD_INT 1
31589: PPUSH
31590: CALL_OW 80
// DialogueOn ;
31594: CALL_OW 6
// if IsOK ( Roth ) then
31598: LD_EXP 28
31602: PPUSH
31603: CALL_OW 302
31607: IFFALSE 31621
// Say ( JMM , DAb-JMM-1 ) ;
31609: LD_EXP 1
31613: PPUSH
31614: LD_STRING DAb-JMM-1
31616: PPUSH
31617: CALL_OW 88
// if IsOK ( Roth ) then
31621: LD_EXP 28
31625: PPUSH
31626: CALL_OW 302
31630: IFFALSE 31646
// Say ( Roth , D16_SurrenderAlliance-Roth-1 ) else
31632: LD_EXP 28
31636: PPUSH
31637: LD_STRING D16_SurrenderAlliance-Roth-1
31639: PPUSH
31640: CALL_OW 88
31644: GO 31658
// Say ( tmp , D16_SurrenderAlliance-Sci1-1 ) ;
31646: LD_VAR 0 2
31650: PPUSH
31651: LD_STRING D16_SurrenderAlliance-Sci1-1
31653: PPUSH
31654: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
31658: LD_INT 23
31660: PPUSH
31661: LD_INT 22
31663: PUSH
31664: LD_INT 4
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PPUSH
31671: CALL_OW 70
31675: PUSH
31676: LD_INT 1
31678: EQUAL
31679: IFFALSE 31693
// Say ( JMM , DAb-JMM-1a ) ;
31681: LD_EXP 1
31685: PPUSH
31686: LD_STRING DAb-JMM-1a
31688: PPUSH
31689: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
31693: LD_INT 23
31695: PPUSH
31696: LD_INT 22
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PPUSH
31706: CALL_OW 70
31710: PUSH
31711: LD_INT 1
31713: GREATER
31714: IFFALSE 31728
// Say ( JMM , DAb-JMM-1b ) ;
31716: LD_EXP 1
31720: PPUSH
31721: LD_STRING DAb-JMM-1b
31723: PPUSH
31724: CALL_OW 88
// DialogueOff ;
31728: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
31732: LD_INT 23
31734: PPUSH
31735: LD_INT 22
31737: PUSH
31738: LD_INT 4
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PPUSH
31745: CALL_OW 70
31749: PUSH
31750: LD_INT 0
31752: GREATER
31753: IFFALSE 31780
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
31755: LD_INT 23
31757: PPUSH
31758: LD_INT 22
31760: PUSH
31761: LD_INT 4
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PPUSH
31768: CALL_OW 70
31772: PPUSH
31773: LD_INT 1
31775: PPUSH
31776: CALL_OW 235
// if IsDying ( Roth ) then
31780: LD_EXP 28
31784: PPUSH
31785: CALL_OW 303
31789: IFFALSE 31811
// begin RothStatus = 0 ;
31791: LD_ADDR_EXP 91
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
31799: LD_EXP 28
31803: PPUSH
31804: LD_INT 0
31806: PPUSH
31807: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
31811: LD_INT 22
31813: PUSH
31814: LD_INT 7
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 21
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PPUSH
31835: CALL_OW 69
31839: PPUSH
31840: CALL_OW 122
// wait ( 0 0$1 ) ;
31844: LD_INT 35
31846: PPUSH
31847: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
31851: LD_INT 22
31853: PUSH
31854: LD_INT 7
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 21
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PPUSH
31875: CALL_OW 69
31879: PPUSH
31880: LD_INT 28
31882: PPUSH
31883: CALL_OW 113
// end ;
31887: PPOPN 2
31889: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
31890: LD_EXP 90
31894: PUSH
31895: LD_INT 1
31897: EQUAL
31898: PUSH
31899: LD_INT 28
31901: PPUSH
31902: LD_INT 22
31904: PUSH
31905: LD_INT 7
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 21
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PPUSH
31926: CALL_OW 70
31930: AND
31931: IFFALSE 31993
31933: GO 31935
31935: DISABLE
31936: LD_INT 0
31938: PPUSH
// begin enable ;
31939: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
31940: LD_ADDR_VAR 0 1
31944: PUSH
31945: LD_INT 28
31947: PPUSH
31948: LD_INT 22
31950: PUSH
31951: LD_INT 7
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 21
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 70
31976: PUSH
31977: FOR_IN
31978: IFFALSE 31991
// RemoveUnit ( i ) ;
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 64
31989: GO 31977
31991: POP
31992: POP
// end ;
31993: PPOPN 1
31995: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 and IsOK ( Roth ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
31996: LD_INT 33
31998: PPUSH
31999: LD_INT 22
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 21
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PPUSH
32023: CALL_OW 70
32027: PUSH
32028: LD_INT 0
32030: GREATER
32031: PUSH
32032: LD_INT 33
32034: PPUSH
32035: LD_INT 22
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 21
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 58
32060: PUSH
32061: EMPTY
32062: LIST
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: PPUSH
32073: CALL_OW 70
32077: PUSH
32078: LD_INT 0
32080: GREATER
32081: PUSH
32082: LD_EXP 28
32086: PPUSH
32087: CALL_OW 302
32091: AND
32092: PUSH
32093: LD_EXP 84
32097: PUSH
32098: LD_INT 1
32100: EQUAL
32101: AND
32102: OR
32103: IFFALSE 34473
32105: GO 32107
32107: DISABLE
32108: LD_INT 0
32110: PPUSH
32111: PPUSH
32112: PPUSH
// begin tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32113: LD_ADDR_VAR 0 1
32117: PUSH
32118: LD_INT 33
32120: PPUSH
32121: LD_INT 22
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: PUSH
32134: LD_INT 21
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 33
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PPUSH
32163: CALL_OW 70
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32172: LD_ADDR_VAR 0 2
32176: PUSH
32177: LD_EXP 1
32181: PUSH
32182: LD_EXP 2
32186: PUSH
32187: LD_EXP 3
32191: PUSH
32192: LD_EXP 21
32196: PUSH
32197: LD_EXP 4
32201: PUSH
32202: LD_EXP 5
32206: PUSH
32207: LD_EXP 6
32211: PUSH
32212: LD_EXP 7
32216: PUSH
32217: LD_EXP 8
32221: PUSH
32222: LD_EXP 9
32226: PUSH
32227: LD_EXP 10
32231: PUSH
32232: LD_EXP 11
32236: PUSH
32237: LD_EXP 12
32241: PUSH
32242: LD_EXP 13
32246: PUSH
32247: LD_EXP 14
32251: PUSH
32252: LD_EXP 15
32256: PUSH
32257: LD_EXP 16
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
// InGameOn ;
32281: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32285: LD_INT 1
32287: PPUSH
32288: LD_INT 7
32290: PPUSH
32291: LD_INT 1
32293: PPUSH
32294: LD_INT 1
32296: PPUSH
32297: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
32310: LD_VAR 0 1
32314: PPUSH
32315: CALL_OW 247
32319: PUSH
32320: LD_INT 2
32322: EQUAL
32323: IFFALSE 32344
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
32325: LD_ADDR_VAR 0 1
32329: PUSH
32330: LD_VAR 0 1
32334: PPUSH
32335: CALL_OW 313
32339: PUSH
32340: LD_INT 1
32342: ARRAY
32343: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
32344: LD_VAR 0 1
32348: PPUSH
32349: CALL_OW 121
// wait ( 0 0$1 ) ;
32353: LD_INT 35
32355: PPUSH
32356: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
32360: LD_VAR 0 1
32364: PPUSH
32365: LD_INT 248
32367: PPUSH
32368: LD_INT 186
32370: PPUSH
32371: LD_INT 4
32373: PPUSH
32374: LD_INT 1
32376: PPUSH
32377: CALL_OW 483
// wait ( 0 0$2 ) ;
32381: LD_INT 70
32383: PPUSH
32384: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
32388: LD_VAR 0 1
32392: PPUSH
32393: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
32397: LD_VAR 0 1
32401: PPUSH
32402: LD_EXP 28
32406: PPUSH
32407: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
32411: LD_EXP 28
32415: PUSH
32416: LD_EXP 47
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PPUSH
32425: LD_VAR 0 1
32429: PPUSH
32430: CALL_OW 119
// if tpUnit = JMM then
32434: LD_VAR 0 1
32438: PUSH
32439: LD_EXP 1
32443: EQUAL
32444: IFFALSE 32458
// Say ( JMM , DA1-JMM-1 ) ;
32446: LD_EXP 1
32450: PPUSH
32451: LD_STRING DA1-JMM-1
32453: PPUSH
32454: CALL_OW 88
// if tpUnit = Joan then
32458: LD_VAR 0 1
32462: PUSH
32463: LD_EXP 2
32467: EQUAL
32468: IFFALSE 32482
// Say ( Joan , DA1-Joan-1 ) ;
32470: LD_EXP 2
32474: PPUSH
32475: LD_STRING DA1-Joan-1
32477: PPUSH
32478: CALL_OW 88
// if tpUnit = Lisa then
32482: LD_VAR 0 1
32486: PUSH
32487: LD_EXP 4
32491: EQUAL
32492: IFFALSE 32506
// Say ( Lisa , DA1-Lisa-1 ) ;
32494: LD_EXP 4
32498: PPUSH
32499: LD_STRING DA1-Lisa-1
32501: PPUSH
32502: CALL_OW 88
// if tpUnit = Donaldson then
32506: LD_VAR 0 1
32510: PUSH
32511: LD_EXP 5
32515: EQUAL
32516: IFFALSE 32530
// Say ( Donaldson , DA1-Don-1 ) ;
32518: LD_EXP 5
32522: PPUSH
32523: LD_STRING DA1-Don-1
32525: PPUSH
32526: CALL_OW 88
// if tpUnit = Cornel then
32530: LD_VAR 0 1
32534: PUSH
32535: LD_EXP 12
32539: EQUAL
32540: IFFALSE 32554
// Say ( Cornel , DA1-Corn-1 ) ;
32542: LD_EXP 12
32546: PPUSH
32547: LD_STRING DA1-Corn-1
32549: PPUSH
32550: CALL_OW 88
// if tpUnit = Denis then
32554: LD_VAR 0 1
32558: PUSH
32559: LD_EXP 8
32563: EQUAL
32564: IFFALSE 32578
// Say ( Denis , DA1-Den-1 ) ;
32566: LD_EXP 8
32570: PPUSH
32571: LD_STRING DA1-Den-1
32573: PPUSH
32574: CALL_OW 88
// if tpUnit = Bobby then
32578: LD_VAR 0 1
32582: PUSH
32583: LD_EXP 6
32587: EQUAL
32588: IFFALSE 32602
// Say ( Bobby , DA1-Bobby-1 ) ;
32590: LD_EXP 6
32594: PPUSH
32595: LD_STRING DA1-Bobby-1
32597: PPUSH
32598: CALL_OW 88
// if tpUnit = Gladstone then
32602: LD_VAR 0 1
32606: PUSH
32607: LD_EXP 10
32611: EQUAL
32612: IFFALSE 32626
// Say ( Gladstone , DA1-Glad-1 ) ;
32614: LD_EXP 10
32618: PPUSH
32619: LD_STRING DA1-Glad-1
32621: PPUSH
32622: CALL_OW 88
// if tpUnit = Cyrus then
32626: LD_VAR 0 1
32630: PUSH
32631: LD_EXP 7
32635: EQUAL
32636: IFFALSE 32650
// Say ( Cyrus , DA1-Cyrus-1 ) ;
32638: LD_EXP 7
32642: PPUSH
32643: LD_STRING DA1-Cyrus-1
32645: PPUSH
32646: CALL_OW 88
// if tpUnit = Stevens then
32650: LD_VAR 0 1
32654: PUSH
32655: LD_EXP 3
32659: EQUAL
32660: IFFALSE 32674
// Say ( Stevens , DA1-Huck-1 ) ;
32662: LD_EXP 3
32666: PPUSH
32667: LD_STRING DA1-Huck-1
32669: PPUSH
32670: CALL_OW 88
// if tpUnit = Baker then
32674: LD_VAR 0 1
32678: PUSH
32679: LD_EXP 21
32683: EQUAL
32684: IFFALSE 32698
// Say ( Baker , DA1-Huck-1 ) ;
32686: LD_EXP 21
32690: PPUSH
32691: LD_STRING DA1-Huck-1
32693: PPUSH
32694: CALL_OW 88
// if tpUnit = Brown then
32698: LD_VAR 0 1
32702: PUSH
32703: LD_EXP 9
32707: EQUAL
32708: IFFALSE 32722
// Say ( Brown , DA1-Brown-1 ) ;
32710: LD_EXP 9
32714: PPUSH
32715: LD_STRING DA1-Brown-1
32717: PPUSH
32718: CALL_OW 88
// if tpUnit = Gary then
32722: LD_VAR 0 1
32726: PUSH
32727: LD_EXP 13
32731: EQUAL
32732: IFFALSE 32746
// Say ( Gary , DA1-Gary-1 ) ;
32734: LD_EXP 13
32738: PPUSH
32739: LD_STRING DA1-Gary-1
32741: PPUSH
32742: CALL_OW 88
// if tpUnit = Connie then
32746: LD_VAR 0 1
32750: PUSH
32751: LD_EXP 16
32755: EQUAL
32756: IFFALSE 32770
// Say ( Connie , DA1-Con-1 ) ;
32758: LD_EXP 16
32762: PPUSH
32763: LD_STRING DA1-Con-1
32765: PPUSH
32766: CALL_OW 88
// if tpUnit = Kurt then
32770: LD_VAR 0 1
32774: PUSH
32775: LD_EXP 30
32779: EQUAL
32780: IFFALSE 32794
// Say ( Kurt , DA1-Kurt-1 ) ;
32782: LD_EXP 30
32786: PPUSH
32787: LD_STRING DA1-Kurt-1
32789: PPUSH
32790: CALL_OW 88
// if tpUnit = Kikuchi then
32794: LD_VAR 0 1
32798: PUSH
32799: LD_EXP 15
32803: EQUAL
32804: IFFALSE 32818
// Say ( Kikuchi , DA1-Yam-1 ) ;
32806: LD_EXP 15
32810: PPUSH
32811: LD_STRING DA1-Yam-1
32813: PPUSH
32814: CALL_OW 88
// if tpUnit = Frank then
32818: LD_VAR 0 1
32822: PUSH
32823: LD_EXP 14
32827: EQUAL
32828: IFFALSE 32842
// Say ( Frank , DA1-Frank-1 ) ;
32830: LD_EXP 14
32834: PPUSH
32835: LD_STRING DA1-Frank-1
32837: PPUSH
32838: CALL_OW 88
// if not tpUnit in heroes then
32842: LD_VAR 0 1
32846: PUSH
32847: LD_VAR 0 2
32851: IN
32852: NOT
32853: IFFALSE 32909
// begin if GetSex ( tpUnit ) = 1 then
32855: LD_VAR 0 1
32859: PPUSH
32860: CALL_OW 258
32864: PUSH
32865: LD_INT 1
32867: EQUAL
32868: IFFALSE 32882
// Say ( tpUnit , DA1-Sol1-1 ) ;
32870: LD_VAR 0 1
32874: PPUSH
32875: LD_STRING DA1-Sol1-1
32877: PPUSH
32878: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
32882: LD_VAR 0 1
32886: PPUSH
32887: CALL_OW 258
32891: PUSH
32892: LD_INT 2
32894: EQUAL
32895: IFFALSE 32909
// Say ( tpUnit , DA1-FSol1-1 ) ;
32897: LD_VAR 0 1
32901: PPUSH
32902: LD_STRING DA1-FSol1-1
32904: PPUSH
32905: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
32909: LD_EXP 28
32913: PPUSH
32914: LD_STRING DA-Roth-1
32916: PPUSH
32917: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
32921: LD_EXP 47
32925: PPUSH
32926: LD_STRING DA-Sim-1
32928: PPUSH
32929: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
32933: LD_EXP 28
32937: PPUSH
32938: LD_STRING DA-Roth-2
32940: PPUSH
32941: CALL_OW 88
// if tpUnit = JMM then
32945: LD_VAR 0 1
32949: PUSH
32950: LD_EXP 1
32954: EQUAL
32955: IFFALSE 32988
// begin Say ( JMM , DA1-JMM-1a ) ;
32957: LD_EXP 1
32961: PPUSH
32962: LD_STRING DA1-JMM-1a
32964: PPUSH
32965: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
32969: LD_EXP 28
32973: PPUSH
32974: LD_STRING DA-Roth-3a
32976: PPUSH
32977: CALL_OW 88
// YouLost ( JMMCaptured ) ;
32981: LD_STRING JMMCaptured
32983: PPUSH
32984: CALL_OW 104
// end ; if tpUnit = Joan then
32988: LD_VAR 0 1
32992: PUSH
32993: LD_EXP 2
32997: EQUAL
32998: IFFALSE 33060
// begin Say ( Joan , DA1-Joan-1a ) ;
33000: LD_EXP 2
33004: PPUSH
33005: LD_STRING DA1-Joan-1a
33007: PPUSH
33008: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33012: LD_EXP 28
33016: PPUSH
33017: LD_STRING DA-Roth-3a
33019: PPUSH
33020: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33024: LD_EXP 2
33028: PPUSH
33029: LD_INT 4
33031: PPUSH
33032: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33036: LD_EXP 2
33040: PPUSH
33041: LD_INT 257
33043: PPUSH
33044: LD_INT 198
33046: PPUSH
33047: CALL_OW 111
// AddComHold ( Joan ) ;
33051: LD_EXP 2
33055: PPUSH
33056: CALL_OW 200
// end ; if tpUnit = Donaldson then
33060: LD_VAR 0 1
33064: PUSH
33065: LD_EXP 5
33069: EQUAL
33070: IFFALSE 33123
// begin Say ( Donaldson , DA1-Don-1a ) ;
33072: LD_EXP 5
33076: PPUSH
33077: LD_STRING DA1-Don-1a
33079: PPUSH
33080: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33084: LD_EXP 28
33088: PPUSH
33089: LD_STRING DA-Roth-3
33091: PPUSH
33092: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33096: LD_EXP 5
33100: PPUSH
33101: LD_INT 7
33103: PPUSH
33104: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33108: LD_EXP 5
33112: PPUSH
33113: LD_INT 240
33115: PPUSH
33116: LD_INT 188
33118: PPUSH
33119: CALL_OW 111
// end ; if tpUnit = Cornel then
33123: LD_VAR 0 1
33127: PUSH
33128: LD_EXP 12
33132: EQUAL
33133: IFFALSE 33195
// begin Say ( Cornel , DA1-Corn-1a ) ;
33135: LD_EXP 12
33139: PPUSH
33140: LD_STRING DA1-Corn-1a
33142: PPUSH
33143: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33147: LD_EXP 28
33151: PPUSH
33152: LD_STRING DA-Roth-3a
33154: PPUSH
33155: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33159: LD_EXP 12
33163: PPUSH
33164: LD_INT 4
33166: PPUSH
33167: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33171: LD_EXP 12
33175: PPUSH
33176: LD_INT 257
33178: PPUSH
33179: LD_INT 198
33181: PPUSH
33182: CALL_OW 111
// AddComHold ( Cornel ) ;
33186: LD_EXP 12
33190: PPUSH
33191: CALL_OW 200
// end ; if tpUnit = Denis then
33195: LD_VAR 0 1
33199: PUSH
33200: LD_EXP 8
33204: EQUAL
33205: IFFALSE 33258
// begin Say ( Denis , DA1-Den-1a ) ;
33207: LD_EXP 8
33211: PPUSH
33212: LD_STRING DA1-Den-1a
33214: PPUSH
33215: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33219: LD_EXP 28
33223: PPUSH
33224: LD_STRING DA-Roth-3
33226: PPUSH
33227: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33231: LD_EXP 8
33235: PPUSH
33236: LD_INT 7
33238: PPUSH
33239: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33243: LD_EXP 8
33247: PPUSH
33248: LD_INT 240
33250: PPUSH
33251: LD_INT 188
33253: PPUSH
33254: CALL_OW 111
// end ; if tpUnit = Bobby then
33258: LD_VAR 0 1
33262: PUSH
33263: LD_EXP 6
33267: EQUAL
33268: IFFALSE 33321
// begin Say ( Joan , DA1-Bobby-1a ) ;
33270: LD_EXP 2
33274: PPUSH
33275: LD_STRING DA1-Bobby-1a
33277: PPUSH
33278: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33282: LD_EXP 28
33286: PPUSH
33287: LD_STRING DA-Roth-3
33289: PPUSH
33290: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
33294: LD_EXP 6
33298: PPUSH
33299: LD_INT 7
33301: PPUSH
33302: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
33306: LD_EXP 6
33310: PPUSH
33311: LD_INT 240
33313: PPUSH
33314: LD_INT 188
33316: PPUSH
33317: CALL_OW 111
// end ; if tpUnit = Gladstone then
33321: LD_VAR 0 1
33325: PUSH
33326: LD_EXP 10
33330: EQUAL
33331: IFFALSE 33393
// begin Say ( Gladstone , DA1-Glad-1a ) ;
33333: LD_EXP 10
33337: PPUSH
33338: LD_STRING DA1-Glad-1a
33340: PPUSH
33341: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33345: LD_EXP 28
33349: PPUSH
33350: LD_STRING DA-Roth-3a
33352: PPUSH
33353: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
33357: LD_EXP 10
33361: PPUSH
33362: LD_INT 4
33364: PPUSH
33365: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
33369: LD_EXP 10
33373: PPUSH
33374: LD_INT 257
33376: PPUSH
33377: LD_INT 198
33379: PPUSH
33380: CALL_OW 111
// AddComHold ( Gladstone ) ;
33384: LD_EXP 10
33388: PPUSH
33389: CALL_OW 200
// end ; if tpUnit = Cyrus then
33393: LD_VAR 0 1
33397: PUSH
33398: LD_EXP 7
33402: EQUAL
33403: IFFALSE 33465
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33405: LD_EXP 7
33409: PPUSH
33410: LD_STRING DA1-Cyrus-1a
33412: PPUSH
33413: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33417: LD_EXP 28
33421: PPUSH
33422: LD_STRING DA-Roth-3a
33424: PPUSH
33425: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33429: LD_EXP 7
33433: PPUSH
33434: LD_INT 4
33436: PPUSH
33437: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33441: LD_EXP 7
33445: PPUSH
33446: LD_INT 257
33448: PPUSH
33449: LD_INT 198
33451: PPUSH
33452: CALL_OW 111
// AddComHold ( Cyrus ) ;
33456: LD_EXP 7
33460: PPUSH
33461: CALL_OW 200
// end ; if tpUnit = Stevens then
33465: LD_VAR 0 1
33469: PUSH
33470: LD_EXP 3
33474: EQUAL
33475: IFFALSE 33528
// begin Say ( Stevens , DA1-Huck-1a ) ;
33477: LD_EXP 3
33481: PPUSH
33482: LD_STRING DA1-Huck-1a
33484: PPUSH
33485: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33489: LD_EXP 28
33493: PPUSH
33494: LD_STRING DA-Roth-3
33496: PPUSH
33497: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
33501: LD_EXP 3
33505: PPUSH
33506: LD_INT 7
33508: PPUSH
33509: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
33513: LD_EXP 3
33517: PPUSH
33518: LD_INT 240
33520: PPUSH
33521: LD_INT 188
33523: PPUSH
33524: CALL_OW 111
// end ; if tpUnit = Baker then
33528: LD_VAR 0 1
33532: PUSH
33533: LD_EXP 21
33537: EQUAL
33538: IFFALSE 33591
// begin Say ( Baker , DA1-Huck-1a ) ;
33540: LD_EXP 21
33544: PPUSH
33545: LD_STRING DA1-Huck-1a
33547: PPUSH
33548: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33552: LD_EXP 28
33556: PPUSH
33557: LD_STRING DA-Roth-3
33559: PPUSH
33560: CALL_OW 88
// SetSide ( Baker , 7 ) ;
33564: LD_EXP 21
33568: PPUSH
33569: LD_INT 7
33571: PPUSH
33572: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
33576: LD_EXP 21
33580: PPUSH
33581: LD_INT 240
33583: PPUSH
33584: LD_INT 188
33586: PPUSH
33587: CALL_OW 111
// end ; if tpUnit = Brown then
33591: LD_VAR 0 1
33595: PUSH
33596: LD_EXP 9
33600: EQUAL
33601: IFFALSE 33654
// begin Say ( Cyrus , DA1-Brown-1a ) ;
33603: LD_EXP 7
33607: PPUSH
33608: LD_STRING DA1-Brown-1a
33610: PPUSH
33611: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33615: LD_EXP 28
33619: PPUSH
33620: LD_STRING DA-Roth-3
33622: PPUSH
33623: CALL_OW 88
// SetSide ( Brown , 7 ) ;
33627: LD_EXP 9
33631: PPUSH
33632: LD_INT 7
33634: PPUSH
33635: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
33639: LD_EXP 9
33643: PPUSH
33644: LD_INT 240
33646: PPUSH
33647: LD_INT 188
33649: PPUSH
33650: CALL_OW 111
// end ; if tpUnit = Gary then
33654: LD_VAR 0 1
33658: PUSH
33659: LD_EXP 13
33663: EQUAL
33664: IFFALSE 33726
// begin Say ( Gary , DA1-Gary-1a ) ;
33666: LD_EXP 13
33670: PPUSH
33671: LD_STRING DA1-Gary-1a
33673: PPUSH
33674: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33678: LD_EXP 28
33682: PPUSH
33683: LD_STRING DA-Roth-3a
33685: PPUSH
33686: CALL_OW 88
// SetSide ( Gary , 4 ) ;
33690: LD_EXP 13
33694: PPUSH
33695: LD_INT 4
33697: PPUSH
33698: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
33702: LD_EXP 13
33706: PPUSH
33707: LD_INT 257
33709: PPUSH
33710: LD_INT 198
33712: PPUSH
33713: CALL_OW 111
// AddComHold ( Gary ) ;
33717: LD_EXP 13
33721: PPUSH
33722: CALL_OW 200
// end ; if tpUnit = Cyrus then
33726: LD_VAR 0 1
33730: PUSH
33731: LD_EXP 7
33735: EQUAL
33736: IFFALSE 33798
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33738: LD_EXP 7
33742: PPUSH
33743: LD_STRING DA1-Cyrus-1a
33745: PPUSH
33746: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33750: LD_EXP 28
33754: PPUSH
33755: LD_STRING DA-Roth-3a
33757: PPUSH
33758: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33762: LD_EXP 7
33766: PPUSH
33767: LD_INT 4
33769: PPUSH
33770: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33774: LD_EXP 7
33778: PPUSH
33779: LD_INT 257
33781: PPUSH
33782: LD_INT 198
33784: PPUSH
33785: CALL_OW 111
// AddComHold ( Cyrus ) ;
33789: LD_EXP 7
33793: PPUSH
33794: CALL_OW 200
// end ; if tpUnit = Connie then
33798: LD_VAR 0 1
33802: PUSH
33803: LD_EXP 16
33807: EQUAL
33808: IFFALSE 33870
// begin Say ( Connie , DA1-Con-1a ) ;
33810: LD_EXP 16
33814: PPUSH
33815: LD_STRING DA1-Con-1a
33817: PPUSH
33818: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33822: LD_EXP 28
33826: PPUSH
33827: LD_STRING DA-Roth-3a
33829: PPUSH
33830: CALL_OW 88
// SetSide ( Connie , 4 ) ;
33834: LD_EXP 16
33838: PPUSH
33839: LD_INT 4
33841: PPUSH
33842: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
33846: LD_EXP 16
33850: PPUSH
33851: LD_INT 257
33853: PPUSH
33854: LD_INT 198
33856: PPUSH
33857: CALL_OW 111
// AddComHold ( Connie ) ;
33861: LD_EXP 16
33865: PPUSH
33866: CALL_OW 200
// end ; if tpUnit = Kurt then
33870: LD_VAR 0 1
33874: PUSH
33875: LD_EXP 30
33879: EQUAL
33880: IFFALSE 33942
// begin Say ( Kurt , DA1-Kurt-1a ) ;
33882: LD_EXP 30
33886: PPUSH
33887: LD_STRING DA1-Kurt-1a
33889: PPUSH
33890: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33894: LD_EXP 28
33898: PPUSH
33899: LD_STRING DA-Roth-3a
33901: PPUSH
33902: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
33906: LD_EXP 30
33910: PPUSH
33911: LD_INT 4
33913: PPUSH
33914: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
33918: LD_EXP 30
33922: PPUSH
33923: LD_INT 257
33925: PPUSH
33926: LD_INT 198
33928: PPUSH
33929: CALL_OW 111
// AddComHold ( Kurt ) ;
33933: LD_EXP 30
33937: PPUSH
33938: CALL_OW 200
// end ; if tpUnit = Kikuchi then
33942: LD_VAR 0 1
33946: PUSH
33947: LD_EXP 15
33951: EQUAL
33952: IFFALSE 34005
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
33954: LD_EXP 15
33958: PPUSH
33959: LD_STRING DA1-Yam-1a
33961: PPUSH
33962: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33966: LD_EXP 28
33970: PPUSH
33971: LD_STRING DA-Roth-3
33973: PPUSH
33974: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
33978: LD_EXP 15
33982: PPUSH
33983: LD_INT 7
33985: PPUSH
33986: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
33990: LD_EXP 15
33994: PPUSH
33995: LD_INT 240
33997: PPUSH
33998: LD_INT 188
34000: PPUSH
34001: CALL_OW 111
// end ; if tpUnit = Frank then
34005: LD_VAR 0 1
34009: PUSH
34010: LD_EXP 14
34014: EQUAL
34015: IFFALSE 34077
// begin Say ( Frank , DA1-Frank-1a ) ;
34017: LD_EXP 14
34021: PPUSH
34022: LD_STRING DA1-Frank-1a
34024: PPUSH
34025: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34029: LD_EXP 28
34033: PPUSH
34034: LD_STRING DA-Roth-3a
34036: PPUSH
34037: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34041: LD_EXP 14
34045: PPUSH
34046: LD_INT 4
34048: PPUSH
34049: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34053: LD_EXP 14
34057: PPUSH
34058: LD_INT 257
34060: PPUSH
34061: LD_INT 198
34063: PPUSH
34064: CALL_OW 111
// AddComHold ( Frank ) ;
34068: LD_EXP 14
34072: PPUSH
34073: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34077: LD_EXP 63
34081: PUSH
34082: LD_INT 0
34084: EQUAL
34085: IFFALSE 34131
// begin Say ( JMM , DAa-JMM-1 ) ;
34087: LD_EXP 1
34091: PPUSH
34092: LD_STRING DAa-JMM-1
34094: PPUSH
34095: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34099: LD_EXP 1
34103: PPUSH
34104: LD_STRING DAa-JMM-1a
34106: PPUSH
34107: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34111: LD_EXP 1
34115: PPUSH
34116: LD_STRING DAa-JMM-1b
34118: PPUSH
34119: CALL_OW 88
// allianceFirstContact = 1 ;
34123: LD_ADDR_EXP 63
34127: PUSH
34128: LD_INT 1
34130: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34131: LD_VAR 0 1
34135: PUSH
34136: LD_VAR 0 2
34140: IN
34141: NOT
34142: IFFALSE 34452
// begin rnd = Rand ( 1 , 2 ) ;
34144: LD_ADDR_VAR 0 3
34148: PUSH
34149: LD_INT 1
34151: PPUSH
34152: LD_INT 2
34154: PPUSH
34155: CALL_OW 12
34159: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 258
34169: PUSH
34170: LD_INT 1
34172: EQUAL
34173: IFFALSE 34306
// begin if rnd = 1 then
34175: LD_VAR 0 3
34179: PUSH
34180: LD_INT 1
34182: EQUAL
34183: IFFALSE 34245
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34185: LD_VAR 0 1
34189: PPUSH
34190: LD_STRING DA1-Sol1-1a
34192: PPUSH
34193: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34197: LD_EXP 28
34201: PPUSH
34202: LD_STRING DA-Roth-3a
34204: PPUSH
34205: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34209: LD_VAR 0 1
34213: PPUSH
34214: LD_INT 4
34216: PPUSH
34217: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34221: LD_VAR 0 1
34225: PPUSH
34226: LD_INT 257
34228: PPUSH
34229: LD_INT 198
34231: PPUSH
34232: CALL_OW 111
// AddComHold ( tpUnit ) ;
34236: LD_VAR 0 1
34240: PPUSH
34241: CALL_OW 200
// end ; if rnd = 2 then
34245: LD_VAR 0 3
34249: PUSH
34250: LD_INT 2
34252: EQUAL
34253: IFFALSE 34306
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34255: LD_VAR 0 1
34259: PPUSH
34260: LD_STRING DA1-Sol1-1b
34262: PPUSH
34263: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34267: LD_EXP 28
34271: PPUSH
34272: LD_STRING DA-Roth-3
34274: PPUSH
34275: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34279: LD_VAR 0 1
34283: PPUSH
34284: LD_INT 7
34286: PPUSH
34287: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34291: LD_VAR 0 1
34295: PPUSH
34296: LD_INT 240
34298: PPUSH
34299: LD_INT 188
34301: PPUSH
34302: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 258
34315: PUSH
34316: LD_INT 2
34318: EQUAL
34319: IFFALSE 34452
// begin if rnd = 1 then
34321: LD_VAR 0 3
34325: PUSH
34326: LD_INT 1
34328: EQUAL
34329: IFFALSE 34391
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
34331: LD_VAR 0 1
34335: PPUSH
34336: LD_STRING DA1-FSol1-1a
34338: PPUSH
34339: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34343: LD_EXP 28
34347: PPUSH
34348: LD_STRING DA-Roth-3a
34350: PPUSH
34351: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_INT 4
34362: PPUSH
34363: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34367: LD_VAR 0 1
34371: PPUSH
34372: LD_INT 257
34374: PPUSH
34375: LD_INT 198
34377: PPUSH
34378: CALL_OW 111
// AddComHold ( tpUnit ) ;
34382: LD_VAR 0 1
34386: PPUSH
34387: CALL_OW 200
// end ; if rnd = 2 then
34391: LD_VAR 0 3
34395: PUSH
34396: LD_INT 2
34398: EQUAL
34399: IFFALSE 34452
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_STRING DA1-FSol1-1b
34408: PPUSH
34409: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34413: LD_EXP 28
34417: PPUSH
34418: LD_STRING DA-Roth-3
34420: PPUSH
34421: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34425: LD_VAR 0 1
34429: PPUSH
34430: LD_INT 7
34432: PPUSH
34433: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34437: LD_VAR 0 1
34441: PPUSH
34442: LD_INT 240
34444: PPUSH
34445: LD_INT 188
34447: PPUSH
34448: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
34452: LD_INT 1
34454: PPUSH
34455: LD_INT 7
34457: PPUSH
34458: LD_INT 2
34460: PPUSH
34461: LD_INT 1
34463: PPUSH
34464: CALL_OW 80
// InGameOff ;
34468: CALL_OW 9
// enable ;
34472: ENABLE
// end ;
34473: PPOPN 3
34475: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
34476: LD_EXP 96
34480: PUSH
34481: LD_INT 94570
34483: GREATEREQUAL
34484: IFFALSE 34803
34486: GO 34488
34488: DISABLE
// begin DialogueOn ;
34489: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
34493: LD_INT 22
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 23
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 26
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 25
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 25
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 25
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 25
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 25
34568: PUSH
34569: LD_INT 5
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 25
34578: PUSH
34579: LD_INT 8
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: PPUSH
34601: CALL_OW 69
34605: PPUSH
34606: LD_STRING D11-Sol1-1
34608: PPUSH
34609: LD_STRING D5-FSol1-1
34611: PPUSH
34612: CALL 6887 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
34616: LD_EXP 26
34620: PPUSH
34621: LD_STRING D11-Pla-1
34623: PPUSH
34624: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
34628: LD_EXP 36
34632: PPUSH
34633: LD_STRING D11-Kov-1
34635: PPUSH
34636: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
34640: LD_EXP 26
34644: PPUSH
34645: LD_STRING D11-Pla-2
34647: PPUSH
34648: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
34652: LD_INT 22
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 23
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 26
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 25
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 25
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 25
34707: PUSH
34708: LD_INT 3
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 25
34717: PUSH
34718: LD_INT 4
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 25
34727: PUSH
34728: LD_INT 5
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 25
34737: PUSH
34738: LD_INT 8
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: PPUSH
34760: CALL_OW 69
34764: PPUSH
34765: LD_STRING D11-Sol1-2
34767: PPUSH
34768: LD_STRING D5-FSol1-1
34770: PPUSH
34771: CALL 6887 0 3
// Say ( JMM , D11-JMM-2 ) ;
34775: LD_EXP 1
34779: PPUSH
34780: LD_STRING D11-JMM-2
34782: PPUSH
34783: CALL_OW 88
// DialogueOff ;
34787: CALL_OW 7
// PreapreMehBehs ;
34791: CALL 5712 0 0
// missionStage = 5 ;
34795: LD_ADDR_EXP 100
34799: PUSH
34800: LD_INT 5
34802: ST_TO_ADDR
// end ;
34803: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
34804: LD_EXP 96
34808: PUSH
34809: LD_INT 105070
34811: GREATEREQUAL
34812: IFFALSE 35206
34814: GO 34816
34816: DISABLE
34817: LD_INT 0
34819: PPUSH
34820: PPUSH
// begin time = 0 0$00 ;
34821: LD_ADDR_VAR 0 2
34825: PUSH
34826: LD_INT 0
34828: ST_TO_ADDR
// DialogueOn ;
34829: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
34833: LD_EXP 26
34837: PPUSH
34838: LD_STRING D15-Pla-1
34840: PPUSH
34841: CALL_OW 94
// dec = Query ( Q15a ) ;
34845: LD_ADDR_VAR 0 1
34849: PUSH
34850: LD_STRING Q15a
34852: PPUSH
34853: CALL_OW 97
34857: ST_TO_ADDR
// if dec = 1 then
34858: LD_VAR 0 1
34862: PUSH
34863: LD_INT 1
34865: EQUAL
34866: IFFALSE 34887
// begin Say ( JMM , D15a-JMM-1 ) ;
34868: LD_EXP 1
34872: PPUSH
34873: LD_STRING D15a-JMM-1
34875: PPUSH
34876: CALL_OW 88
// YouLost ( Surrender ) ;
34880: LD_STRING Surrender
34882: PPUSH
34883: CALL_OW 104
// end ; if dec = 2 then
34887: LD_VAR 0 1
34891: PUSH
34892: LD_INT 2
34894: EQUAL
34895: IFFALSE 34925
// begin Say ( JMM , D15b-JMM-1 ) ;
34897: LD_EXP 1
34901: PPUSH
34902: LD_STRING D15b-JMM-1
34904: PPUSH
34905: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
34909: LD_EXP 26
34913: PPUSH
34914: LD_STRING D15b-Pla-1
34916: PPUSH
34917: CALL_OW 94
// DialogueOff ;
34921: CALL_OW 7
// end ; if dec = 3 then
34925: LD_VAR 0 1
34929: PUSH
34930: LD_INT 3
34932: EQUAL
34933: IFFALSE 35009
// begin Say ( JMM , D15c-JMM-1 ) ;
34935: LD_EXP 1
34939: PPUSH
34940: LD_STRING D15c-JMM-1
34942: PPUSH
34943: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
34947: LD_EXP 26
34951: PPUSH
34952: LD_STRING D15c-Pla-1
34954: PPUSH
34955: CALL_OW 94
// DialogueOff ;
34959: CALL_OW 7
// wait ( 0 0$15 ) ;
34963: LD_INT 525
34965: PPUSH
34966: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
34970: LD_EXP 26
34974: PPUSH
34975: LD_STRING D18-Pla-1
34977: PPUSH
34978: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
34982: LD_INT 273
34984: PPUSH
34985: LD_EXP 1
34989: PPUSH
34990: CALL_OW 250
34994: PPUSH
34995: LD_EXP 1
34999: PPUSH
35000: CALL_OW 251
35004: PPUSH
35005: CALL_OW 116
// end ; if dec = 4 then
35009: LD_VAR 0 1
35013: PUSH
35014: LD_INT 4
35016: EQUAL
35017: IFFALSE 35055
// begin Say ( JMM , D15d-JMM-1 ) ;
35019: LD_EXP 1
35023: PPUSH
35024: LD_STRING D15d-JMM-1
35026: PPUSH
35027: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35031: LD_EXP 26
35035: PPUSH
35036: LD_STRING D15d-Pla-1
35038: PPUSH
35039: CALL_OW 94
// DialogueOff ;
35043: CALL_OW 7
// missionStage = 6 ;
35047: LD_ADDR_EXP 100
35051: PUSH
35052: LD_INT 6
35054: ST_TO_ADDR
// end ; if dec = 2 then
35055: LD_VAR 0 1
35059: PUSH
35060: LD_INT 2
35062: EQUAL
35063: IFFALSE 35136
// begin repeat wait ( 0 0$01 ) ;
35065: LD_INT 35
35067: PPUSH
35068: CALL_OW 67
// time = time + 0 0$01 ;
35072: LD_ADDR_VAR 0 2
35076: PUSH
35077: LD_VAR 0 2
35081: PUSH
35082: LD_INT 35
35084: PLUS
35085: ST_TO_ADDR
// until time >= 3 3$00 ;
35086: LD_VAR 0 2
35090: PUSH
35091: LD_INT 6300
35093: GREATEREQUAL
35094: IFFALSE 35065
// DialogueOn ;
35096: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35100: LD_EXP 1
35104: PPUSH
35105: LD_STRING D15d-JMM-1a
35107: PPUSH
35108: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35112: LD_EXP 26
35116: PPUSH
35117: LD_STRING D15d-Pla-1
35119: PPUSH
35120: CALL_OW 94
// DialogueOff ;
35124: CALL_OW 7
// missionStage = 6 ;
35128: LD_ADDR_EXP 100
35132: PUSH
35133: LD_INT 6
35135: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35136: LD_EXP 52
35140: PPUSH
35141: CALL_OW 302
35145: PUSH
35146: LD_EXP 52
35150: PPUSH
35151: CALL_OW 255
35155: PUSH
35156: LD_INT 1
35158: EQUAL
35159: AND
35160: IFFALSE 35206
// begin DialogueOn ;
35162: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35166: LD_EXP 1
35170: PPUSH
35171: LD_STRING D16-JMM-1
35173: PPUSH
35174: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35178: LD_EXP 52
35182: PPUSH
35183: LD_STRING D16-Friend-1
35185: PPUSH
35186: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35190: LD_EXP 1
35194: PPUSH
35195: LD_STRING D16-JMM-2
35197: PPUSH
35198: CALL_OW 88
// DialogueOff ;
35202: CALL_OW 7
// end ; end ;
35206: PPOPN 2
35208: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35209: LD_EXP 100
35213: PUSH
35214: LD_INT 6
35216: EQUAL
35217: PUSH
35218: LD_EXP 52
35222: PPUSH
35223: CALL_OW 302
35227: AND
35228: PUSH
35229: LD_EXP 52
35233: PPUSH
35234: CALL_OW 255
35238: PUSH
35239: LD_INT 1
35241: EQUAL
35242: AND
35243: IFFALSE 35880
35245: GO 35247
35247: DISABLE
35248: LD_INT 0
35250: PPUSH
// begin DialogueOn ;
35251: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35255: LD_INT 22
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 34
35270: PUSH
35271: LD_INT 8
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 35
35280: PUSH
35281: LD_INT 8
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PPUSH
35297: CALL_OW 69
35301: PUSH
35302: LD_INT 0
35304: GREATER
35305: IFFALSE 35329
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35307: LD_EXP 26
35311: PPUSH
35312: LD_STRING D16c-Pla-1
35314: PPUSH
35315: CALL_OW 94
// playerHaveRocket = 1 ;
35319: LD_ADDR_EXP 99
35323: PUSH
35324: LD_INT 1
35326: ST_TO_ADDR
// end else
35327: GO 35788
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
35329: LD_EXP 26
35333: PPUSH
35334: LD_STRING D16a-Pla-1
35336: PPUSH
35337: CALL_OW 94
// if IsOK ( Stevens ) then
35341: LD_EXP 3
35345: PPUSH
35346: CALL_OW 302
35350: IFFALSE 35366
// begin Say ( Stevens , D16a-Huck-1 ) ;
35352: LD_EXP 3
35356: PPUSH
35357: LD_STRING D16a-Huck-1
35359: PPUSH
35360: CALL_OW 88
// end else
35364: GO 35514
// begin if IsOk ( Baker ) then
35366: LD_EXP 21
35370: PPUSH
35371: CALL_OW 302
35375: IFFALSE 35391
// begin Say ( Baker , D16a-Huck-1 ) ;
35377: LD_EXP 21
35381: PPUSH
35382: LD_STRING D16a-Huck-1
35384: PPUSH
35385: CALL_OW 88
// end else
35389: GO 35514
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
35391: LD_INT 22
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 23
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 26
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 25
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 25
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 25
35446: PUSH
35447: LD_INT 3
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 25
35456: PUSH
35457: LD_INT 4
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 25
35466: PUSH
35467: LD_INT 5
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 25
35476: PUSH
35477: LD_INT 8
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 69
35503: PPUSH
35504: LD_STRING D16a-Sol1-1
35506: PPUSH
35507: LD_STRING D5-FSol1-1
35509: PPUSH
35510: CALL 6887 0 3
// end ; end ; wait ( 0 0$30 ) ;
35514: LD_INT 1050
35516: PPUSH
35517: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35521: LD_EXP 26
35525: PPUSH
35526: LD_STRING D18-Pla-1
35528: PPUSH
35529: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35533: LD_ADDR_VAR 0 1
35537: PUSH
35538: LD_INT 22
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 21
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 23
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: LD_INT 30
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 30
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: PPUSH
35602: CALL_OW 69
35606: ST_TO_ADDR
// if rocketTarget = 0 then
35607: LD_VAR 0 1
35611: PUSH
35612: LD_INT 0
35614: EQUAL
35615: IFFALSE 35691
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35617: LD_ADDR_VAR 0 1
35621: PUSH
35622: LD_INT 22
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 21
35634: PUSH
35635: LD_INT 3
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 23
35644: PUSH
35645: LD_INT 2
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: LD_INT 30
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 30
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: LIST
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: PPUSH
35686: CALL_OW 69
35690: ST_TO_ADDR
// if rocketTarget = 0 then
35691: LD_VAR 0 1
35695: PUSH
35696: LD_INT 0
35698: EQUAL
35699: IFFALSE 35753
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35701: LD_ADDR_VAR 0 1
35705: PUSH
35706: LD_INT 22
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 21
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 23
35728: PUSH
35729: LD_INT 1
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 50
35738: PUSH
35739: EMPTY
35740: LIST
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: PPUSH
35748: CALL_OW 69
35752: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35753: LD_INT 273
35755: PPUSH
35756: LD_VAR 0 1
35760: PUSH
35761: LD_INT 1
35763: ARRAY
35764: PPUSH
35765: CALL_OW 250
35769: PPUSH
35770: LD_VAR 0 1
35774: PUSH
35775: LD_INT 1
35777: ARRAY
35778: PPUSH
35779: CALL_OW 251
35783: PPUSH
35784: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
35788: LD_EXP 1
35792: PPUSH
35793: LD_STRING D16a-JMM-1a
35795: PPUSH
35796: CALL_OW 88
// DialogueOff ;
35800: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
35804: LD_EXP 52
35808: PPUSH
35809: LD_INT 3
35811: PPUSH
35812: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
35816: LD_EXP 52
35820: PPUSH
35821: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
35825: LD_EXP 52
35829: PPUSH
35830: CALL_OW 121
// wait ( 0 0$1 ) ;
35834: LD_INT 35
35836: PPUSH
35837: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
35841: LD_EXP 52
35845: PPUSH
35846: LD_INT 18
35848: PPUSH
35849: CALL_OW 113
// wait ( 0 0$3 ) ;
35853: LD_INT 105
35855: PPUSH
35856: CALL_OW 67
// DialogueOn ;
35860: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
35864: LD_EXP 1
35868: PPUSH
35869: LD_STRING D16a-JMM-1
35871: PPUSH
35872: CALL_OW 88
// DialogueOff ;
35876: CALL_OW 7
// end ;
35880: PPOPN 1
35882: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
35883: LD_EXP 52
35887: PPUSH
35888: CALL_OW 255
35892: PUSH
35893: LD_INT 3
35895: EQUAL
35896: IFFALSE 36003
35898: GO 35900
35900: DISABLE
35901: LD_INT 0
35903: PPUSH
// begin enable ;
35904: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
35905: LD_ADDR_VAR 0 1
35909: PUSH
35910: LD_INT 22
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 21
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 56
35932: PUSH
35933: EMPTY
35934: LIST
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: PPUSH
35941: CALL_OW 69
35945: PUSH
35946: FOR_IN
35947: IFFALSE 36001
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
35949: LD_VAR 0 1
35953: PPUSH
35954: LD_EXP 52
35958: PPUSH
35959: CALL_OW 296
35963: PUSH
35964: LD_INT 8
35966: LESS
35967: IFFALSE 35999
// begin disable ;
35969: DISABLE
// DialogueOn ;
35970: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
35974: LD_EXP 52
35978: PPUSH
35979: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
35983: LD_EXP 52
35987: PPUSH
35988: LD_STRING D16a-Friend-1
35990: PPUSH
35991: CALL_OW 88
// DialogueOff ;
35995: CALL_OW 7
// end ; end ;
35999: GO 35946
36001: POP
36002: POP
// end ;
36003: PPOPN 1
36005: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36006: LD_EXP 100
36010: PUSH
36011: LD_INT 6
36013: EQUAL
36014: PUSH
36015: LD_EXP 52
36019: PPUSH
36020: CALL_OW 255
36024: PUSH
36025: LD_INT 1
36027: EQUAL
36028: NOT
36029: AND
36030: IFFALSE 36410
36032: GO 36034
36034: DISABLE
36035: LD_INT 0
36037: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36038: LD_INT 22
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 34
36053: PUSH
36054: LD_INT 8
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 35
36063: PUSH
36064: LD_INT 8
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PPUSH
36080: CALL_OW 69
36084: PUSH
36085: LD_INT 0
36087: GREATER
36088: IFFALSE 36112
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36090: LD_EXP 26
36094: PPUSH
36095: LD_STRING D16c-Pla-1
36097: PPUSH
36098: CALL_OW 94
// playerHaveRocket = 1 ;
36102: LD_ADDR_EXP 99
36106: PUSH
36107: LD_INT 1
36109: ST_TO_ADDR
// end else
36110: GO 36410
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36112: LD_EXP 26
36116: PPUSH
36117: LD_STRING D16b-Pla-1
36119: PPUSH
36120: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36124: LD_EXP 1
36128: PPUSH
36129: LD_STRING D16b-JMM-1
36131: PPUSH
36132: CALL_OW 88
// wait ( 0 0$15 ) ;
36136: LD_INT 525
36138: PPUSH
36139: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36143: LD_EXP 26
36147: PPUSH
36148: LD_STRING D18-Pla-1
36150: PPUSH
36151: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36155: LD_ADDR_VAR 0 1
36159: PUSH
36160: LD_INT 22
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 21
36172: PUSH
36173: LD_INT 3
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 23
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 2
36192: PUSH
36193: LD_INT 30
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 30
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: PPUSH
36224: CALL_OW 69
36228: ST_TO_ADDR
// if rocketTarget = 0 then
36229: LD_VAR 0 1
36233: PUSH
36234: LD_INT 0
36236: EQUAL
36237: IFFALSE 36313
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36239: LD_ADDR_VAR 0 1
36243: PUSH
36244: LD_INT 22
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 21
36256: PUSH
36257: LD_INT 3
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 23
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: LD_INT 30
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 30
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: PPUSH
36308: CALL_OW 69
36312: ST_TO_ADDR
// if rocketTarget = 0 then
36313: LD_VAR 0 1
36317: PUSH
36318: LD_INT 0
36320: EQUAL
36321: IFFALSE 36375
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36323: LD_ADDR_VAR 0 1
36327: PUSH
36328: LD_INT 22
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 21
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 23
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 50
36360: PUSH
36361: EMPTY
36362: LIST
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: PPUSH
36370: CALL_OW 69
36374: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36375: LD_INT 273
36377: PPUSH
36378: LD_VAR 0 1
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PPUSH
36387: CALL_OW 250
36391: PPUSH
36392: LD_VAR 0 1
36396: PUSH
36397: LD_INT 1
36399: ARRAY
36400: PPUSH
36401: CALL_OW 251
36405: PPUSH
36406: CALL_OW 116
// end ; end ;
36410: PPOPN 1
36412: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
36413: LD_EXP 96
36417: PUSH
36418: LD_INT 168070
36420: GREATEREQUAL
36421: PUSH
36422: LD_EXP 100
36426: PUSH
36427: LD_INT 6
36429: GREATEREQUAL
36430: AND
36431: PUSH
36432: LD_EXP 84
36436: PUSH
36437: LD_INT 1
36439: EQUAL
36440: AND
36441: IFFALSE 36471
36443: GO 36445
36445: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
36446: LD_EXP 26
36450: PPUSH
36451: LD_STRING D18-Pla-1
36453: PPUSH
36454: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
36458: LD_INT 273
36460: PPUSH
36461: LD_INT 244
36463: PPUSH
36464: LD_INT 187
36466: PPUSH
36467: CALL_OW 116
// end ;
36471: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
36472: LD_EXP 100
36476: PUSH
36477: LD_INT 5
36479: GREATEREQUAL
36480: IFFALSE 36673
36482: GO 36484
36484: DISABLE
36485: LD_INT 0
36487: PPUSH
// begin enable ;
36488: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
36489: LD_ADDR_VAR 0 1
36493: PUSH
36494: LD_INT 22
36496: PUSH
36497: LD_INT 6
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 30
36506: PUSH
36507: LD_INT 37
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 57
36516: PUSH
36517: EMPTY
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: PPUSH
36525: CALL_OW 69
36529: PUSH
36530: FOR_IN
36531: IFFALSE 36585
// begin if See ( 1 , i ) then
36533: LD_INT 1
36535: PPUSH
36536: LD_VAR 0 1
36540: PPUSH
36541: CALL_OW 292
36545: IFFALSE 36583
// begin disable ;
36547: DISABLE
// DialogueOn ;
36548: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
36552: LD_EXP 1
36556: PPUSH
36557: LD_STRING D17a-JMM-1
36559: PPUSH
36560: CALL_OW 88
// DialogueOff ;
36564: CALL_OW 7
// behemothStatus = 1 ;
36568: LD_ADDR_EXP 59
36572: PUSH
36573: LD_INT 1
36575: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
36576: LD_STRING M4a
36578: PPUSH
36579: CALL_OW 337
// end ; end ;
36583: GO 36530
36585: POP
36586: POP
// for i in ruBehs do
36587: LD_ADDR_VAR 0 1
36591: PUSH
36592: LD_EXP 58
36596: PUSH
36597: FOR_IN
36598: IFFALSE 36671
// begin if See ( 1 , i ) then
36600: LD_INT 1
36602: PPUSH
36603: LD_VAR 0 1
36607: PPUSH
36608: CALL_OW 292
36612: IFFALSE 36669
// begin disable ;
36614: DISABLE
// DialogueOn ;
36615: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
36619: LD_EXP 1
36623: PPUSH
36624: LD_STRING D17b-JMM-1
36626: PPUSH
36627: CALL_OW 88
// DialogueOff ;
36631: CALL_OW 7
// behemothStatus = 0 ;
36635: LD_ADDR_EXP 59
36639: PUSH
36640: LD_INT 0
36642: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
36643: LD_STRING M4b
36645: PPUSH
36646: CALL_OW 337
// wait ( 0 0$2 ) ;
36650: LD_INT 70
36652: PPUSH
36653: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36657: LD_EXP 26
36661: PPUSH
36662: LD_STRING D18-Pla-1
36664: PPUSH
36665: CALL_OW 88
// end ; end ;
36669: GO 36597
36671: POP
36672: POP
// end ;
36673: PPOPN 1
36675: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
36676: LD_EXP 26
36680: PPUSH
36681: CALL_OW 301
36685: PUSH
36686: LD_EXP 27
36690: PPUSH
36691: CALL_OW 301
36695: AND
36696: PUSH
36697: LD_INT 22
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 21
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 50
36719: PUSH
36720: EMPTY
36721: LIST
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: PPUSH
36728: CALL_OW 69
36732: PUSH
36733: LD_INT 7
36735: PUSH
36736: LD_INT 8
36738: PUSH
36739: LD_INT 9
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: PUSH
36747: LD_OWVAR 67
36751: ARRAY
36752: LESS
36753: AND
36754: IFFALSE 37430
36756: GO 36758
36758: DISABLE
36759: LD_INT 0
36761: PPUSH
36762: PPUSH
36763: PPUSH
// begin russianAI = 0 ;
36764: LD_ADDR_EXP 85
36768: PUSH
36769: LD_INT 0
36771: ST_TO_ADDR
// russianEscape = 1 ;
36772: LD_ADDR_EXP 89
36776: PUSH
36777: LD_INT 1
36779: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
36780: LD_INT 1
36782: PPUSH
36783: LD_INT 3
36785: PPUSH
36786: LD_INT 1
36788: PPUSH
36789: LD_INT 1
36791: PPUSH
36792: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
36796: LD_ADDR_VAR 0 1
36800: PUSH
36801: LD_INT 22
36803: PUSH
36804: LD_INT 3
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 21
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 24
36823: PUSH
36824: LD_INT 900
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: PPUSH
36836: CALL_OW 69
36840: PUSH
36841: FOR_IN
36842: IFFALSE 36873
// if GetSex ( i ) = sex_male then
36844: LD_VAR 0 1
36848: PPUSH
36849: CALL_OW 258
36853: PUSH
36854: LD_INT 1
36856: EQUAL
36857: IFFALSE 36871
// begin tmp = i ;
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: LD_VAR 0 1
36868: ST_TO_ADDR
// break ;
36869: GO 36873
// end ;
36871: GO 36841
36873: POP
36874: POP
// if tmp = 0 then
36875: LD_VAR 0 2
36879: PUSH
36880: LD_INT 0
36882: EQUAL
36883: IFFALSE 36937
// begin uc_side = 3 ;
36885: LD_ADDR_OWVAR 20
36889: PUSH
36890: LD_INT 3
36892: ST_TO_ADDR
// uc_nation = 3 ;
36893: LD_ADDR_OWVAR 21
36897: PUSH
36898: LD_INT 3
36900: ST_TO_ADDR
// hc_name =  ;
36901: LD_ADDR_OWVAR 26
36905: PUSH
36906: LD_STRING 
36908: ST_TO_ADDR
// hc_gallery =  ;
36909: LD_ADDR_OWVAR 33
36913: PUSH
36914: LD_STRING 
36916: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
36917: LD_INT 1
36919: PPUSH
36920: LD_INT 10
36922: PPUSH
36923: CALL_OW 381
// tmp = CreateHuman ;
36927: LD_ADDR_VAR 0 2
36931: PUSH
36932: CALL_OW 44
36936: ST_TO_ADDR
// end ; DialogueOn ;
36937: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
36941: LD_VAR 0 2
36945: PPUSH
36946: LD_STRING DSurrenderRussians-RSol1-1a
36948: PPUSH
36949: CALL_OW 88
// DialogueOff ;
36953: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
36957: LD_INT 22
36959: PUSH
36960: LD_INT 3
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 21
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PPUSH
36981: CALL_OW 69
36985: PPUSH
36986: CALL_OW 122
// wait ( 0 0$1 ) ;
36990: LD_INT 35
36992: PPUSH
36993: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
36997: LD_INT 22
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 21
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PPUSH
37021: CALL_OW 69
37025: PPUSH
37026: LD_INT 25
37028: PPUSH
37029: CALL_OW 113
// wait ( 0 0$10 ) ;
37033: LD_INT 350
37035: PPUSH
37036: CALL_OW 67
// PrepareOmarArmy ;
37040: CALL 38050 0 0
// missionStage = 7 ;
37044: LD_ADDR_EXP 100
37048: PUSH
37049: LD_INT 7
37051: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37052: LD_INT 157
37054: PPUSH
37055: LD_INT 8
37057: PPUSH
37058: LD_INT 1
37060: PPUSH
37061: LD_INT 8
37063: NEG
37064: PPUSH
37065: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37069: LD_INT 157
37071: PPUSH
37072: LD_INT 8
37074: PPUSH
37075: CALL_OW 84
// DialogueOn ;
37079: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37083: LD_EXP 32
37087: PPUSH
37088: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37092: LD_EXP 1
37096: PPUSH
37097: LD_STRING D19-JMM-1
37099: PPUSH
37100: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37104: LD_INT 22
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 26
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: LD_INT 25
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 25
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 25
37149: PUSH
37150: LD_INT 3
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 25
37159: PUSH
37160: LD_INT 4
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 25
37169: PUSH
37170: LD_INT 5
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 25
37179: PUSH
37180: LD_INT 8
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: PPUSH
37201: CALL_OW 69
37205: PPUSH
37206: LD_STRING D19-Sol1-1
37208: PPUSH
37209: LD_STRING D5-FSol1-1
37211: PPUSH
37212: CALL 6887 0 3
// Say ( JMM , D19-JMM-2 ) ;
37216: LD_EXP 1
37220: PPUSH
37221: LD_STRING D19-JMM-2
37223: PPUSH
37224: CALL_OW 88
// DialogueOff ;
37228: CALL_OW 7
// LaunchMines ;
37232: CALL 37539 0 0
// wait ( 0 0$3 ) ;
37236: LD_INT 105
37238: PPUSH
37239: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37243: LD_ADDR_VAR 0 3
37247: PUSH
37248: LD_INT 22
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 21
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PPUSH
37272: CALL_OW 69
37276: PUSH
37277: LD_INT 22
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 21
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 25
37299: PUSH
37300: LD_INT 4
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: PPUSH
37312: CALL_OW 69
37316: DIFF
37317: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
37318: LD_ADDR_VAR 0 3
37322: PUSH
37323: LD_VAR 0 3
37327: PUSH
37328: LD_INT 22
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 21
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PPUSH
37352: CALL_OW 69
37356: ADD
37357: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
37358: LD_VAR 0 3
37362: PPUSH
37363: LD_INT 178
37365: PPUSH
37366: LD_INT 66
37368: PPUSH
37369: CALL_OW 114
// wait ( 0 0$10 ) ;
37373: LD_INT 350
37375: PPUSH
37376: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
37380: LD_INT 22
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 21
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 25
37402: PUSH
37403: LD_INT 4
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: PPUSH
37415: CALL_OW 69
37419: PPUSH
37420: LD_INT 177
37422: PPUSH
37423: LD_INT 69
37425: PPUSH
37426: CALL_OW 158
// end ;
37430: PPOPN 3
37432: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
37433: LD_EXP 89
37437: PUSH
37438: LD_INT 1
37440: EQUAL
37441: PUSH
37442: LD_INT 25
37444: PPUSH
37445: LD_INT 22
37447: PUSH
37448: LD_INT 3
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 21
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PPUSH
37469: CALL_OW 70
37473: AND
37474: IFFALSE 37536
37476: GO 37478
37478: DISABLE
37479: LD_INT 0
37481: PPUSH
// begin enable ;
37482: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
37483: LD_ADDR_VAR 0 1
37487: PUSH
37488: LD_INT 25
37490: PPUSH
37491: LD_INT 22
37493: PUSH
37494: LD_INT 3
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 21
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PPUSH
37515: CALL_OW 70
37519: PUSH
37520: FOR_IN
37521: IFFALSE 37534
// RemoveUnit ( i ) ;
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 64
37532: GO 37520
37534: POP
37535: POP
// end ;
37536: PPOPN 1
37538: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
37539: LD_INT 0
37541: PPUSH
37542: PPUSH
37543: PPUSH
37544: PPUSH
37545: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
37546: LD_ADDR_VAR 0 2
37550: PUSH
37551: LD_INT 168
37553: PUSH
37554: LD_INT 18
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 169
37563: PUSH
37564: LD_INT 20
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 167
37573: PUSH
37574: LD_INT 20
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 164
37583: PUSH
37584: LD_INT 18
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 164
37593: PUSH
37594: LD_INT 19
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 163
37603: PUSH
37604: LD_INT 19
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 164
37613: PUSH
37614: LD_INT 21
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 165
37623: PUSH
37624: LD_INT 21
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 163
37633: PUSH
37634: LD_INT 20
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 164
37643: PUSH
37644: LD_INT 22
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 162
37653: PUSH
37654: LD_INT 20
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
37674: LD_ADDR_VAR 0 3
37678: PUSH
37679: LD_INT 169
37681: PUSH
37682: LD_INT 34
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 169
37691: PUSH
37692: LD_INT 35
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 167
37701: PUSH
37702: LD_INT 32
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 170
37711: PUSH
37712: LD_INT 31
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 173
37721: PUSH
37722: LD_INT 35
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 174
37731: PUSH
37732: LD_INT 39
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// for i = 1 to mines_pos do
37747: LD_ADDR_VAR 0 4
37751: PUSH
37752: DOUBLE
37753: LD_INT 1
37755: DEC
37756: ST_TO_ADDR
37757: LD_VAR 0 2
37761: PUSH
37762: FOR_TO
37763: IFFALSE 37975
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
37765: LD_VAR 0 2
37769: PUSH
37770: LD_VAR 0 4
37774: ARRAY
37775: PUSH
37776: LD_INT 1
37778: ARRAY
37779: PPUSH
37780: LD_VAR 0 2
37784: PUSH
37785: LD_VAR 0 4
37789: ARRAY
37790: PUSH
37791: LD_INT 2
37793: ARRAY
37794: PPUSH
37795: LD_INT 1
37797: PPUSH
37798: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37802: LD_INT 1
37804: PPUSH
37805: LD_INT 3
37807: PPUSH
37808: CALL_OW 12
37812: PPUSH
37813: CALL_OW 67
// if i < mines_pos then
37817: LD_VAR 0 4
37821: PUSH
37822: LD_VAR 0 2
37826: LESS
37827: IFFALSE 37865
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
37829: LD_VAR 0 2
37833: PUSH
37834: LD_VAR 0 4
37838: ARRAY
37839: PUSH
37840: LD_INT 1
37842: ARRAY
37843: PPUSH
37844: LD_VAR 0 2
37848: PUSH
37849: LD_VAR 0 4
37853: ARRAY
37854: PUSH
37855: LD_INT 2
37857: ARRAY
37858: PPUSH
37859: CALL_OW 348
37863: GO 37973
// begin for j = 1 to mines_pos1 do
37865: LD_ADDR_VAR 0 5
37869: PUSH
37870: DOUBLE
37871: LD_INT 1
37873: DEC
37874: ST_TO_ADDR
37875: LD_VAR 0 3
37879: PUSH
37880: FOR_TO
37881: IFFALSE 37937
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
37883: LD_VAR 0 3
37887: PUSH
37888: LD_VAR 0 5
37892: ARRAY
37893: PUSH
37894: LD_INT 1
37896: ARRAY
37897: PPUSH
37898: LD_VAR 0 3
37902: PUSH
37903: LD_VAR 0 5
37907: ARRAY
37908: PUSH
37909: LD_INT 2
37911: ARRAY
37912: PPUSH
37913: LD_INT 1
37915: PPUSH
37916: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37920: LD_INT 1
37922: PPUSH
37923: LD_INT 3
37925: PPUSH
37926: CALL_OW 12
37930: PPUSH
37931: CALL_OW 67
// end ;
37935: GO 37880
37937: POP
37938: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
37939: LD_VAR 0 2
37943: PUSH
37944: LD_VAR 0 4
37948: ARRAY
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PPUSH
37954: LD_VAR 0 2
37958: PUSH
37959: LD_VAR 0 4
37963: ARRAY
37964: PUSH
37965: LD_INT 2
37967: ARRAY
37968: PPUSH
37969: CALL_OW 347
// end ; end ;
37973: GO 37762
37975: POP
37976: POP
// end ;
37977: LD_VAR 0 1
37981: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
37982: LD_EXP 100
37986: PUSH
37987: LD_INT 7
37989: EQUAL
37990: PUSH
37991: LD_EXP 31
37995: PPUSH
37996: CALL_OW 301
38000: AND
38001: PUSH
38002: LD_EXP 32
38006: PPUSH
38007: CALL_OW 302
38011: AND
38012: IFFALSE 38049
38014: GO 38016
38016: DISABLE
// begin DialogueOn ;
38017: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38021: LD_EXP 1
38025: PPUSH
38026: LD_STRING D19a-JMM-1
38028: PPUSH
38029: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38033: LD_EXP 32
38037: PPUSH
38038: LD_STRING D19a-Hke-1
38040: PPUSH
38041: CALL_OW 88
// DialogueOff ;
38045: CALL_OW 7
// end ; end_of_file
38049: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38050: LD_INT 0
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
// uc_side = 2 ;
38057: LD_ADDR_OWVAR 20
38061: PUSH
38062: LD_INT 2
38064: ST_TO_ADDR
// uc_nation = 2 ;
38065: LD_ADDR_OWVAR 21
38069: PUSH
38070: LD_INT 2
38072: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38073: LD_ADDR_EXP 31
38077: PUSH
38078: LD_STRING Omar
38080: PPUSH
38081: LD_INT 0
38083: PPUSH
38084: CALL 6607 0 2
38088: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38089: LD_ADDR_EXP 32
38093: PUSH
38094: LD_STRING Heike
38096: PPUSH
38097: LD_INT 0
38099: PPUSH
38100: CALL 6607 0 2
38104: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38105: LD_EXP 32
38109: PPUSH
38110: LD_INT 26
38112: PPUSH
38113: LD_INT 0
38115: PPUSH
38116: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38120: LD_ADDR_VAR 0 2
38124: PUSH
38125: DOUBLE
38126: LD_INT 1
38128: DEC
38129: ST_TO_ADDR
38130: LD_INT 5
38132: PUSH
38133: LD_INT 6
38135: PUSH
38136: LD_INT 7
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: PUSH
38144: LD_OWVAR 67
38148: ARRAY
38149: PUSH
38150: FOR_TO
38151: IFFALSE 38206
// begin hc_name =  ;
38153: LD_ADDR_OWVAR 26
38157: PUSH
38158: LD_STRING 
38160: ST_TO_ADDR
// hc_gallery =  ;
38161: LD_ADDR_OWVAR 33
38165: PUSH
38166: LD_STRING 
38168: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38169: LD_INT 0
38171: PPUSH
38172: LD_INT 8
38174: PPUSH
38175: CALL_OW 381
// un = CreateHuman ;
38179: LD_ADDR_VAR 0 3
38183: PUSH
38184: CALL_OW 44
38188: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38189: LD_VAR 0 3
38193: PPUSH
38194: LD_INT 26
38196: PPUSH
38197: LD_INT 0
38199: PPUSH
38200: CALL_OW 49
// end ;
38204: GO 38150
38206: POP
38207: POP
// for i := 1 to 4 do
38208: LD_ADDR_VAR 0 2
38212: PUSH
38213: DOUBLE
38214: LD_INT 1
38216: DEC
38217: ST_TO_ADDR
38218: LD_INT 4
38220: PUSH
38221: FOR_TO
38222: IFFALSE 38277
// begin hc_name =  ;
38224: LD_ADDR_OWVAR 26
38228: PUSH
38229: LD_STRING 
38231: ST_TO_ADDR
// hc_gallery =  ;
38232: LD_ADDR_OWVAR 33
38236: PUSH
38237: LD_STRING 
38239: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38240: LD_INT 0
38242: PPUSH
38243: LD_INT 8
38245: PPUSH
38246: CALL_OW 384
// un = CreateHuman ;
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: CALL_OW 44
38259: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38260: LD_VAR 0 3
38264: PPUSH
38265: LD_INT 26
38267: PPUSH
38268: LD_INT 0
38270: PPUSH
38271: CALL_OW 49
// end ;
38275: GO 38221
38277: POP
38278: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
38279: LD_ADDR_VAR 0 2
38283: PUSH
38284: DOUBLE
38285: LD_INT 1
38287: DEC
38288: ST_TO_ADDR
38289: LD_INT 8
38291: PUSH
38292: LD_INT 9
38294: PUSH
38295: LD_INT 10
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: PUSH
38303: LD_OWVAR 67
38307: ARRAY
38308: PUSH
38309: FOR_TO
38310: IFFALSE 38398
// begin vc_engine = 3 ;
38312: LD_ADDR_OWVAR 39
38316: PUSH
38317: LD_INT 3
38319: ST_TO_ADDR
// vc_control = 5 ;
38320: LD_ADDR_OWVAR 38
38324: PUSH
38325: LD_INT 5
38327: ST_TO_ADDR
// vc_chassis = 14 ;
38328: LD_ADDR_OWVAR 37
38332: PUSH
38333: LD_INT 14
38335: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
38336: LD_ADDR_OWVAR 40
38340: PUSH
38341: LD_INT 27
38343: PUSH
38344: LD_INT 26
38346: PUSH
38347: LD_INT 28
38349: PUSH
38350: LD_INT 25
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: PPUSH
38362: LD_INT 3
38364: PPUSH
38365: CALL_OW 12
38369: ARRAY
38370: ST_TO_ADDR
// veh = CreateVehicle ;
38371: LD_ADDR_VAR 0 4
38375: PUSH
38376: CALL_OW 45
38380: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
38381: LD_VAR 0 4
38385: PPUSH
38386: LD_INT 26
38388: PPUSH
38389: LD_INT 0
38391: PPUSH
38392: CALL_OW 49
// end ;
38396: GO 38309
38398: POP
38399: POP
// vc_chassis := 31 ;
38400: LD_ADDR_OWVAR 37
38404: PUSH
38405: LD_INT 31
38407: ST_TO_ADDR
// vc_control := control_rider ;
38408: LD_ADDR_OWVAR 38
38412: PUSH
38413: LD_INT 4
38415: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
38416: LD_ADDR_VAR 0 5
38420: PUSH
38421: CALL_OW 45
38425: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
38426: LD_VAR 0 5
38430: PPUSH
38431: LD_INT 26
38433: PPUSH
38434: LD_INT 0
38436: PPUSH
38437: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
38441: LD_EXP 31
38445: PPUSH
38446: LD_VAR 0 5
38450: PPUSH
38451: CALL_OW 52
// end ; end_of_file
38455: LD_VAR 0 1
38459: RET
// every 1 1$30 trigger missionStage > 0 do
38460: LD_EXP 100
38464: PUSH
38465: LD_INT 0
38467: GREATER
38468: IFFALSE 38495
38470: GO 38472
38472: DISABLE
// begin enable ;
38473: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
38474: LD_INT 3
38476: PPUSH
38477: LD_INT 5
38479: PPUSH
38480: CALL_OW 12
38484: PPUSH
38485: LD_INT 27
38487: PPUSH
38488: LD_INT 1
38490: PPUSH
38491: CALL_OW 55
// end ; end_of_file
38495: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
38496: LD_EXP 100
38500: PUSH
38501: LD_INT 7
38503: EQUAL
38504: PUSH
38505: LD_INT 22
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 21
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PPUSH
38529: CALL_OW 69
38533: PUSH
38534: LD_INT 0
38536: EQUAL
38537: AND
38538: PUSH
38539: LD_INT 22
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 21
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 50
38561: PUSH
38562: EMPTY
38563: LIST
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: PPUSH
38570: CALL_OW 69
38574: PUSH
38575: LD_INT 0
38577: EQUAL
38578: AND
38579: IFFALSE 39068
38581: GO 38583
38583: DISABLE
// begin DialogueOn ;
38584: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
38588: LD_EXP 1
38592: PPUSH
38593: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
38597: LD_EXP 1
38601: PPUSH
38602: LD_STRING D20-JMM-1
38604: PPUSH
38605: CALL_OW 88
// if IsOK ( Joan ) then
38609: LD_EXP 2
38613: PPUSH
38614: CALL_OW 302
38618: IFFALSE 38632
// Say ( Joan , D20-Joan-1 ) ;
38620: LD_EXP 2
38624: PPUSH
38625: LD_STRING D20-Joan-1
38627: PPUSH
38628: CALL_OW 88
// if IsOk ( Lisa ) then
38632: LD_EXP 4
38636: PPUSH
38637: CALL_OW 302
38641: IFFALSE 38655
// Say ( Lisa , D20-Lisa-1 ) ;
38643: LD_EXP 4
38647: PPUSH
38648: LD_STRING D20-Lisa-1
38650: PPUSH
38651: CALL_OW 88
// if IsOk ( Donaldson ) then
38655: LD_EXP 5
38659: PPUSH
38660: CALL_OW 302
38664: IFFALSE 38678
// Say ( Donaldson , D20-Don-1 ) ;
38666: LD_EXP 5
38670: PPUSH
38671: LD_STRING D20-Don-1
38673: PPUSH
38674: CALL_OW 88
// if IsOK ( Cornel ) then
38678: LD_EXP 12
38682: PPUSH
38683: CALL_OW 302
38687: IFFALSE 38701
// Say ( Cornel , D20-Corn-1 ) ;
38689: LD_EXP 12
38693: PPUSH
38694: LD_STRING D20-Corn-1
38696: PPUSH
38697: CALL_OW 88
// if IsOk ( Denis ) then
38701: LD_EXP 8
38705: PPUSH
38706: CALL_OW 302
38710: IFFALSE 38724
// Say ( Denis , D20-Den-1 ) ;
38712: LD_EXP 8
38716: PPUSH
38717: LD_STRING D20-Den-1
38719: PPUSH
38720: CALL_OW 88
// if IsOk ( Bobby ) then
38724: LD_EXP 6
38728: PPUSH
38729: CALL_OW 302
38733: IFFALSE 38747
// Say ( Bobby , D20-Bobby-1 ) ;
38735: LD_EXP 6
38739: PPUSH
38740: LD_STRING D20-Bobby-1
38742: PPUSH
38743: CALL_OW 88
// if IsOk ( Gladstone ) then
38747: LD_EXP 10
38751: PPUSH
38752: CALL_OW 302
38756: IFFALSE 38770
// Say ( Gladstone , D20-Glad-1 ) ;
38758: LD_EXP 10
38762: PPUSH
38763: LD_STRING D20-Glad-1
38765: PPUSH
38766: CALL_OW 88
// if IsOk ( Cyrus ) then
38770: LD_EXP 7
38774: PPUSH
38775: CALL_OW 302
38779: IFFALSE 38793
// Say ( Cyrus , D20-Cyrus-1 ) ;
38781: LD_EXP 7
38785: PPUSH
38786: LD_STRING D20-Cyrus-1
38788: PPUSH
38789: CALL_OW 88
// if IsOk ( Stevens ) then
38793: LD_EXP 3
38797: PPUSH
38798: CALL_OW 302
38802: IFFALSE 38816
// Say ( Stevens , D20-Huck-1 ) ;
38804: LD_EXP 3
38808: PPUSH
38809: LD_STRING D20-Huck-1
38811: PPUSH
38812: CALL_OW 88
// if IsOk ( Brown ) then
38816: LD_EXP 9
38820: PPUSH
38821: CALL_OW 302
38825: IFFALSE 38839
// Say ( Brown , D20-Brown-1 ) ;
38827: LD_EXP 9
38831: PPUSH
38832: LD_STRING D20-Brown-1
38834: PPUSH
38835: CALL_OW 88
// if IsOk ( Gary ) then
38839: LD_EXP 13
38843: PPUSH
38844: CALL_OW 302
38848: IFFALSE 38862
// Say ( Gary , D20-Gary-1 ) ;
38850: LD_EXP 13
38854: PPUSH
38855: LD_STRING D20-Gary-1
38857: PPUSH
38858: CALL_OW 88
// if IsOk ( Connie ) then
38862: LD_EXP 16
38866: PPUSH
38867: CALL_OW 302
38871: IFFALSE 38885
// Say ( Connie , D20-Con-1 ) ;
38873: LD_EXP 16
38877: PPUSH
38878: LD_STRING D20-Con-1
38880: PPUSH
38881: CALL_OW 88
// if IsOk ( Kurt ) then
38885: LD_EXP 30
38889: PPUSH
38890: CALL_OW 302
38894: IFFALSE 38908
// Say ( Kurt , D20-Kurt-1 ) ;
38896: LD_EXP 30
38900: PPUSH
38901: LD_STRING D20-Kurt-1
38903: PPUSH
38904: CALL_OW 88
// if IsOk ( Kikuchi ) then
38908: LD_EXP 15
38912: PPUSH
38913: CALL_OW 302
38917: IFFALSE 38931
// Say ( Kikuchi , D20-Yam-1 ) ;
38919: LD_EXP 15
38923: PPUSH
38924: LD_STRING D20-Yam-1
38926: PPUSH
38927: CALL_OW 88
// if IsOk ( Frank ) then
38931: LD_EXP 14
38935: PPUSH
38936: CALL_OW 302
38940: IFFALSE 38954
// Say ( Frank , D20-Frank-1 ) ;
38942: LD_EXP 14
38946: PPUSH
38947: LD_STRING D20-Frank-1
38949: PPUSH
38950: CALL_OW 88
// DialogueOff ;
38954: CALL_OW 7
// if AllianceEscape = 1 then
38958: LD_EXP 90
38962: PUSH
38963: LD_INT 1
38965: EQUAL
38966: IFFALSE 38980
// AddMedal ( Roth , 1 ) else
38968: LD_STRING Roth
38970: PPUSH
38971: LD_INT 1
38973: PPUSH
38974: CALL_OW 101
38978: GO 38991
// AddMedal ( Roth , - 1 ) ;
38980: LD_STRING Roth
38982: PPUSH
38983: LD_INT 1
38985: NEG
38986: PPUSH
38987: CALL_OW 101
// if behemothStatus = 1 then
38991: LD_EXP 59
38995: PUSH
38996: LD_INT 1
38998: EQUAL
38999: IFFALSE 39013
// AddMedal ( Project , 1 ) else
39001: LD_STRING Project
39003: PPUSH
39004: LD_INT 1
39006: PPUSH
39007: CALL_OW 101
39011: GO 39024
// AddMedal ( Project , - 1 ) ;
39013: LD_STRING Project
39015: PPUSH
39016: LD_INT 1
39018: NEG
39019: PPUSH
39020: CALL_OW 101
// if unitLost = 0 then
39024: LD_EXP 97
39028: PUSH
39029: LD_INT 0
39031: EQUAL
39032: IFFALSE 39046
// AddMedal ( NoLosses , 1 ) else
39034: LD_STRING NoLosses
39036: PPUSH
39037: LD_INT 1
39039: PPUSH
39040: CALL_OW 101
39044: GO 39057
// AddMedal ( NoLosses , - 1 ) ;
39046: LD_STRING NoLosses
39048: PPUSH
39049: LD_INT 1
39051: NEG
39052: PPUSH
39053: CALL_OW 101
// GiveMedals ( MAIN ) ;
39057: LD_STRING MAIN
39059: PPUSH
39060: CALL_OW 102
// YouWin ;
39064: CALL_OW 103
// end ; end_of_file
39068: END
// every 0 0$1 trigger IsDead ( JMM ) do
39069: LD_EXP 1
39073: PPUSH
39074: CALL_OW 301
39078: IFFALSE 39090
39080: GO 39082
39082: DISABLE
// YouLost ( JMM ) ;
39083: LD_STRING JMM
39085: PPUSH
39086: CALL_OW 104
39090: END
