// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 71
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 72
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 73
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 75
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 74
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 76
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 69
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 70
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 58
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 59
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 60
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 65
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 61
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 63
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 62
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 67
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 64
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 48
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// legionVehicles = [ ] ;
 211: LD_ADDR_EXP 49
 215: PUSH
 216: EMPTY
 217: ST_TO_ADDR
// russianVehicles = [ ] ;
 218: LD_ADDR_EXP 55
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// allianceVehicles = [ ] ;
 225: LD_ADDR_EXP 56
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 232: LD_ADDR_EXP 85
 236: PUSH
 237: EMPTY
 238: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 239: LD_ADDR_EXP 86
 243: PUSH
 244: EMPTY
 245: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 246: LD_ADDR_EXP 87
 250: PUSH
 251: EMPTY
 252: ST_TO_ADDR
// ruVehicles = [ ] ;
 253: LD_ADDR_EXP 51
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruBehMehs = [ ] ;
 260: LD_ADDR_EXP 52
 264: PUSH
 265: EMPTY
 266: ST_TO_ADDR
// ruBehs = [ ] ;
 267: LD_ADDR_EXP 53
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// missionStage = 0 ;
 274: LD_ADDR_EXP 93
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// behemothStatus = 0 ;
 282: LD_ADDR_EXP 54
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// unitLost = 0 ;
 290: LD_ADDR_EXP 90
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// LegionAI = 1 ;
 298: LD_ADDR_EXP 77
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// AllianceAI = 1 ;
 306: LD_ADDR_EXP 78
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// RussianAI = 1 ;
 314: LD_ADDR_EXP 79
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// timerStatus = 0 ;
 322: LD_ADDR_EXP 88
 326: PUSH
 327: LD_INT 0
 329: ST_TO_ADDR
// timeAction = 0 0$00 ;
 330: LD_ADDR_EXP 89
 334: PUSH
 335: LD_INT 0
 337: ST_TO_ADDR
// playerHaveRocket = 0 ;
 338: LD_ADDR_EXP 92
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// blockEvent1 = 0 ;
 346: LD_ADDR_EXP 94
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// debugMode = 0 ;
 354: LD_ADDR_EXP 95
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// PrepareHeroes ;
 362: CALL 711 0 0
// PrepareHeroesFromEpsilon ;
 366: CALL 1248 0 0
// PrepareRandoms ;
 370: CALL 1592 0 0
// PrepareLegion ;
 374: CALL 3828 0 0
// PrepareRussians ;
 378: CALL 4225 0 0
// PrepareAlliance ;
 382: CALL 5972 0 0
// PrepareDifficulty ;
 386: CALL 7297 0 0
// SetBName ( RuDep2 , zhukov ) ;
 390: LD_INT 23
 392: PPUSH
 393: LD_STRING zhukov
 395: PPUSH
 396: CALL_OW 500
// end ;
 400: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 401: LD_EXP 95
 405: PUSH
 406: LD_INT 1
 408: EQUAL
 409: IFFALSE 708
 411: GO 413
 413: DISABLE
 414: LD_INT 0
 416: PPUSH
// begin enable ;
 417: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 418: LD_ADDR_VAR 0 1
 422: PUSH
 423: LD_INT 22
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 21
 435: PUSH
 436: LD_INT 1
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PPUSH
 447: CALL_OW 69
 451: PUSH
 452: FOR_IN
 453: IFFALSE 469
// SetLives ( i , 1000 ) ;
 455: LD_VAR 0 1
 459: PPUSH
 460: LD_INT 1000
 462: PPUSH
 463: CALL_OW 234
 467: GO 452
 469: POP
 470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 471: LD_ADDR_VAR 0 1
 475: PUSH
 476: LD_INT 22
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 1
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: LIST
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PPUSH
 518: CALL_OW 69
 522: PUSH
 523: FOR_IN
 524: IFFALSE 548
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 526: LD_VAR 0 1
 530: PPUSH
 531: CALL_OW 274
 535: PPUSH
 536: LD_INT 1
 538: PPUSH
 539: LD_INT 9999
 541: PPUSH
 542: CALL_OW 277
 546: GO 523
 548: POP
 549: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 550: LD_ADDR_VAR 0 1
 554: PUSH
 555: LD_INT 22
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: LD_INT 2
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 0
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 30
 580: PUSH
 581: LD_INT 1
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: LIST
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PPUSH
 597: CALL_OW 69
 601: PUSH
 602: FOR_IN
 603: IFFALSE 627
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 605: LD_VAR 0 1
 609: PPUSH
 610: CALL_OW 274
 614: PPUSH
 615: LD_INT 2
 617: PPUSH
 618: LD_INT 9999
 620: PPUSH
 621: CALL_OW 277
 625: GO 602
 627: POP
 628: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 629: LD_ADDR_VAR 0 1
 633: PUSH
 634: LD_INT 22
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: LD_INT 2
 646: PUSH
 647: LD_INT 30
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 30
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: EMPTY
 664: LIST
 665: LIST
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: PPUSH
 676: CALL_OW 69
 680: PUSH
 681: FOR_IN
 682: IFFALSE 706
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 684: LD_VAR 0 1
 688: PPUSH
 689: CALL_OW 274
 693: PPUSH
 694: LD_INT 3
 696: PPUSH
 697: LD_INT 9999
 699: PPUSH
 700: CALL_OW 277
 704: GO 681
 706: POP
 707: POP
// end ; end_of_file
 708: PPOPN 1
 710: END
// export function PrepareHeroes ; begin
 711: LD_INT 0
 713: PPUSH
// uc_side = 1 ;
 714: LD_ADDR_OWVAR 20
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// uc_nation = 1 ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// if JMMVeh = [ ] then
 730: LD_EXP 71
 734: PUSH
 735: EMPTY
 736: EQUAL
 737: IFFALSE 783
// begin vc_engine = 3 ;
 739: LD_ADDR_OWVAR 39
 743: PUSH
 744: LD_INT 3
 746: ST_TO_ADDR
// vc_control = 1 ;
 747: LD_ADDR_OWVAR 38
 751: PUSH
 752: LD_INT 1
 754: ST_TO_ADDR
// vc_chassis = 5 ;
 755: LD_ADDR_OWVAR 37
 759: PUSH
 760: LD_INT 5
 762: ST_TO_ADDR
// vc_weapon = 9 ;
 763: LD_ADDR_OWVAR 40
 767: PUSH
 768: LD_INT 9
 770: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 771: LD_ADDR_EXP 24
 775: PUSH
 776: CALL_OW 45
 780: ST_TO_ADDR
// end else
 781: GO 865
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 783: LD_ADDR_OWVAR 37
 787: PUSH
 788: LD_EXP 71
 792: PUSH
 793: LD_INT 1
 795: ARRAY
 796: PUSH
 797: LD_INT 1
 799: ARRAY
 800: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 801: LD_ADDR_OWVAR 39
 805: PUSH
 806: LD_EXP 71
 810: PUSH
 811: LD_INT 2
 813: ARRAY
 814: PUSH
 815: LD_INT 1
 817: ARRAY
 818: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_EXP 71
 828: PUSH
 829: LD_INT 3
 831: ARRAY
 832: PUSH
 833: LD_INT 1
 835: ARRAY
 836: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 837: LD_ADDR_OWVAR 40
 841: PUSH
 842: LD_EXP 71
 846: PUSH
 847: LD_INT 4
 849: ARRAY
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 855: LD_ADDR_EXP 24
 859: PUSH
 860: CALL_OW 45
 864: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 865: LD_EXP 72
 869: PUSH
 870: EMPTY
 871: EQUAL
 872: NOT
 873: IFFALSE 957
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 875: LD_ADDR_OWVAR 37
 879: PUSH
 880: LD_EXP 72
 884: PUSH
 885: LD_INT 1
 887: ARRAY
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 893: LD_ADDR_OWVAR 39
 897: PUSH
 898: LD_EXP 72
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 911: LD_ADDR_OWVAR 38
 915: PUSH
 916: LD_EXP 72
 920: PUSH
 921: LD_INT 3
 923: ARRAY
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 929: LD_ADDR_OWVAR 40
 933: PUSH
 934: LD_EXP 72
 938: PUSH
 939: LD_INT 4
 941: ARRAY
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 947: LD_ADDR_EXP 25
 951: PUSH
 952: CALL_OW 45
 956: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 957: LD_EXP 24
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 969: LD_EXP 25
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 981: LD_EXP 24
 985: PPUSH
 986: LD_INT 99
 988: PPUSH
 989: LD_INT 154
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 48
// if JMMGirlVeh then
 999: LD_EXP 72
1003: IFFALSE 1023
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1005: LD_EXP 25
1009: PPUSH
1010: LD_INT 98
1012: PPUSH
1013: LD_INT 159
1015: PPUSH
1016: LD_INT 0
1018: PPUSH
1019: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1023: LD_ADDR_EXP 1
1027: PUSH
1028: LD_STRING 14_JMM
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 6373 0 2
1038: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1039: LD_EXP 1
1043: PPUSH
1044: LD_EXP 24
1048: PPUSH
1049: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1053: LD_EXP 72
1057: PUSH
1058: EMPTY
1059: EQUAL
1060: NOT
1061: IFFALSE 1183
// begin if JMMGirl = 1 then
1063: LD_EXP 73
1067: PUSH
1068: LD_INT 1
1070: EQUAL
1071: IFFALSE 1103
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1073: LD_ADDR_EXP 2
1077: PUSH
1078: LD_STRING 14_Joan
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL 6373 0 2
1088: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1089: LD_EXP 2
1093: PPUSH
1094: LD_EXP 25
1098: PPUSH
1099: CALL_OW 52
// end ; if JMMGirl = 2 then
1103: LD_EXP 73
1107: PUSH
1108: LD_INT 2
1110: EQUAL
1111: IFFALSE 1143
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1113: LD_ADDR_EXP 4
1117: PUSH
1118: LD_STRING 14_Lisa
1120: PPUSH
1121: LD_INT 1
1123: PPUSH
1124: CALL 6373 0 2
1128: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1129: LD_EXP 4
1133: PPUSH
1134: LD_EXP 25
1138: PPUSH
1139: CALL_OW 52
// end ; if JMMGirl = 3 then
1143: LD_EXP 73
1147: PUSH
1148: LD_INT 3
1150: EQUAL
1151: IFFALSE 1183
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1153: LD_ADDR_EXP 16
1157: PUSH
1158: LD_STRING 14_Connie
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: CALL 6373 0 2
1168: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1169: LD_EXP 16
1173: PPUSH
1174: LD_EXP 25
1178: PPUSH
1179: CALL_OW 52
// end ; end ; uc_side = 4 ;
1183: LD_ADDR_OWVAR 20
1187: PUSH
1188: LD_INT 4
1190: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1191: LD_ADDR_EXP 17
1195: PUSH
1196: LD_STRING Powell
1198: PPUSH
1199: LD_INT 0
1201: PPUSH
1202: CALL 6373 0 2
1206: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1207: LD_EXP 17
1211: PPUSH
1212: LD_INT 42
1214: PPUSH
1215: LD_INT 62
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1228: LD_EXP 17
1232: PPUSH
1233: LD_INT 43
1235: PPUSH
1236: LD_INT 63
1238: PPUSH
1239: CALL_OW 118
// end ;
1243: LD_VAR 0 1
1247: RET
// export function PrepareHeroesFromEpsilon ; begin
1248: LD_INT 0
1250: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1251: LD_ADDR_EXP 4
1255: PUSH
1256: LD_STRING Lisa
1258: PPUSH
1259: CALL 6430 0 1
1263: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1264: LD_ADDR_EXP 5
1268: PUSH
1269: LD_STRING Donaldson
1271: PPUSH
1272: CALL 6430 0 1
1276: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1277: LD_ADDR_EXP 6
1281: PUSH
1282: LD_STRING Bobby
1284: PPUSH
1285: CALL 6430 0 1
1289: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1290: LD_ADDR_EXP 7
1294: PUSH
1295: LD_STRING Cyrus
1297: PPUSH
1298: CALL 6430 0 1
1302: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1303: LD_ADDR_EXP 8
1307: PUSH
1308: LD_STRING Denis
1310: PPUSH
1311: CALL 6430 0 1
1315: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1316: LD_ADDR_EXP 9
1320: PUSH
1321: LD_STRING Brown
1323: PPUSH
1324: CALL 6430 0 1
1328: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1329: LD_ADDR_EXP 10
1333: PUSH
1334: LD_STRING Gladstone
1336: PPUSH
1337: CALL 6430 0 1
1341: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1342: LD_ADDR_EXP 11
1346: PUSH
1347: LD_STRING Houten
1349: PPUSH
1350: CALL 6430 0 1
1354: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1355: LD_ADDR_EXP 12
1359: PUSH
1360: LD_STRING Cornel
1362: PPUSH
1363: CALL 6430 0 1
1367: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1368: LD_ADDR_EXP 13
1372: PUSH
1373: LD_STRING Gary
1375: PPUSH
1376: CALL 6430 0 1
1380: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1381: LD_ADDR_EXP 14
1385: PUSH
1386: LD_STRING Frank
1388: PPUSH
1389: CALL 6430 0 1
1393: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1394: LD_ADDR_EXP 15
1398: PUSH
1399: LD_STRING Kikuchi
1401: PPUSH
1402: CALL 6430 0 1
1406: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1407: LD_EXP 4
1411: PPUSH
1412: LD_INT 6
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 6
1429: PPUSH
1430: LD_INT 0
1432: PPUSH
1433: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1437: LD_EXP 6
1441: PPUSH
1442: LD_INT 6
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1452: LD_EXP 7
1456: PPUSH
1457: LD_INT 6
1459: PPUSH
1460: LD_INT 0
1462: PPUSH
1463: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1467: LD_EXP 8
1471: PPUSH
1472: LD_INT 6
1474: PPUSH
1475: LD_INT 0
1477: PPUSH
1478: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1482: LD_EXP 9
1486: PPUSH
1487: LD_INT 6
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1497: LD_EXP 10
1501: PPUSH
1502: LD_INT 6
1504: PPUSH
1505: LD_INT 0
1507: PPUSH
1508: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1512: LD_EXP 11
1516: PPUSH
1517: LD_INT 6
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1527: LD_EXP 12
1531: PPUSH
1532: LD_INT 6
1534: PPUSH
1535: LD_INT 0
1537: PPUSH
1538: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1542: LD_EXP 13
1546: PPUSH
1547: LD_INT 6
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1557: LD_EXP 14
1561: PPUSH
1562: LD_INT 6
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1572: LD_EXP 15
1576: PPUSH
1577: LD_INT 6
1579: PPUSH
1580: LD_INT 0
1582: PPUSH
1583: CALL_OW 49
// end ;
1587: LD_VAR 0 1
1591: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1592: LD_INT 0
1594: PPUSH
1595: PPUSH
1596: PPUSH
1597: PPUSH
1598: PPUSH
// uc_side = 4 ;
1599: LD_ADDR_OWVAR 20
1603: PUSH
1604: LD_INT 4
1606: ST_TO_ADDR
// uc_nation = 1 ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_INT 1
1614: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1615: LD_ADDR_EXP 18
1619: PUSH
1620: LD_STRING 13s_others
1622: PPUSH
1623: CALL_OW 31
1627: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1628: LD_ADDR_VAR 0 4
1632: PUSH
1633: LD_INT 22
1635: PUSH
1636: LD_INT 4
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 21
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 69
1661: PUSH
1662: LD_EXP 17
1666: PUSH
1667: EMPTY
1668: LIST
1669: DIFF
1670: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1671: LD_ADDR_VAR 0 5
1675: PUSH
1676: LD_VAR 0 4
1680: PPUSH
1681: CALL 6560 0 1
1685: ST_TO_ADDR
// if others13 >= 8 then
1686: LD_EXP 18
1690: PUSH
1691: LD_INT 8
1693: GREATEREQUAL
1694: IFFALSE 1755
// begin for i = 1 to 8 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 8
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1751
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1712: LD_EXP 18
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: LD_INT 6
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1731: LD_ADDR_EXP 18
1735: PUSH
1736: LD_EXP 18
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: CALL_OW 3
1748: ST_TO_ADDR
// end ;
1749: GO 1709
1751: POP
1752: POP
// end else
1753: GO 1814
// begin for i = 1 to others13 do
1755: LD_ADDR_VAR 0 2
1759: PUSH
1760: DOUBLE
1761: LD_INT 1
1763: DEC
1764: ST_TO_ADDR
1765: LD_EXP 18
1769: PUSH
1770: FOR_TO
1771: IFFALSE 1812
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1773: LD_EXP 18
1777: PUSH
1778: LD_INT 1
1780: ARRAY
1781: PPUSH
1782: LD_INT 6
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1792: LD_ADDR_EXP 18
1796: PUSH
1797: LD_EXP 18
1801: PPUSH
1802: LD_INT 1
1804: PPUSH
1805: CALL_OW 3
1809: ST_TO_ADDR
// end ;
1810: GO 1770
1812: POP
1813: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1814: LD_ADDR_VAR 0 4
1818: PUSH
1819: LD_INT 22
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 21
1831: PUSH
1832: LD_INT 1
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PPUSH
1843: CALL_OW 69
1847: PUSH
1848: LD_EXP 17
1852: PUSH
1853: EMPTY
1854: LIST
1855: DIFF
1856: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1857: LD_ADDR_VAR 0 5
1861: PUSH
1862: LD_VAR 0 4
1866: PPUSH
1867: CALL 6560 0 1
1871: ST_TO_ADDR
// if others13 >= 6 then
1872: LD_EXP 18
1876: PUSH
1877: LD_INT 6
1879: GREATEREQUAL
1880: IFFALSE 1941
// begin for i = 1 to 6 do
1882: LD_ADDR_VAR 0 2
1886: PUSH
1887: DOUBLE
1888: LD_INT 1
1890: DEC
1891: ST_TO_ADDR
1892: LD_INT 6
1894: PUSH
1895: FOR_TO
1896: IFFALSE 1937
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1898: LD_EXP 18
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: PPUSH
1907: LD_INT 6
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1917: LD_ADDR_EXP 18
1921: PUSH
1922: LD_EXP 18
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 3
1934: ST_TO_ADDR
// end ;
1935: GO 1895
1937: POP
1938: POP
// end else
1939: GO 2000
// begin for i = 1 to others13 do
1941: LD_ADDR_VAR 0 2
1945: PUSH
1946: DOUBLE
1947: LD_INT 1
1949: DEC
1950: ST_TO_ADDR
1951: LD_EXP 18
1955: PUSH
1956: FOR_TO
1957: IFFALSE 1998
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1959: LD_EXP 18
1963: PUSH
1964: LD_INT 1
1966: ARRAY
1967: PPUSH
1968: LD_INT 6
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1978: LD_ADDR_EXP 18
1982: PUSH
1983: LD_EXP 18
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 3
1995: ST_TO_ADDR
// end ;
1996: GO 1956
1998: POP
1999: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2000: LD_ADDR_VAR 0 4
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 21
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 17
2038: PUSH
2039: EMPTY
2040: LIST
2041: DIFF
2042: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2043: LD_ADDR_VAR 0 5
2047: PUSH
2048: LD_VAR 0 4
2052: PPUSH
2053: CALL 6560 0 1
2057: ST_TO_ADDR
// if heroLenght < 19 then
2058: LD_VAR 0 5
2062: PUSH
2063: LD_INT 19
2065: LESS
2066: IFFALSE 2164
// for i = 1 to 19 - heroLenght do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: DOUBLE
2074: LD_INT 1
2076: DEC
2077: ST_TO_ADDR
2078: LD_INT 19
2080: PUSH
2081: LD_VAR 0 5
2085: MINUS
2086: PUSH
2087: FOR_TO
2088: IFFALSE 2162
// begin hc_gallery =  ;
2090: LD_ADDR_OWVAR 33
2094: PUSH
2095: LD_STRING 
2097: ST_TO_ADDR
// hc_name =  ;
2098: LD_ADDR_OWVAR 26
2102: PUSH
2103: LD_STRING 
2105: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2106: LD_INT 0
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: LD_INT 4
2114: PPUSH
2115: CALL_OW 12
2119: PPUSH
2120: LD_INT 6
2122: PPUSH
2123: LD_INT 8
2125: PPUSH
2126: CALL_OW 12
2130: PPUSH
2131: CALL_OW 380
// un = CreateHuman ;
2135: LD_ADDR_VAR 0 3
2139: PUSH
2140: CALL_OW 44
2144: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 6
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// end ;
2160: GO 2087
2162: POP
2163: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2164: LD_ADDR_VAR 0 4
2168: PUSH
2169: LD_INT 22
2171: PUSH
2172: LD_INT 4
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 21
2181: PUSH
2182: LD_INT 1
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PPUSH
2193: CALL_OW 69
2197: PUSH
2198: LD_EXP 17
2202: PUSH
2203: LD_EXP 1
2207: PUSH
2208: LD_EXP 2
2212: PUSH
2213: LD_EXP 3
2217: PUSH
2218: LD_EXP 4
2222: PUSH
2223: LD_EXP 5
2227: PUSH
2228: LD_EXP 6
2232: PUSH
2233: LD_EXP 7
2237: PUSH
2238: LD_EXP 8
2242: PUSH
2243: LD_EXP 9
2247: PUSH
2248: LD_EXP 10
2252: PUSH
2253: LD_EXP 11
2257: PUSH
2258: LD_EXP 12
2262: PUSH
2263: LD_EXP 13
2267: PUSH
2268: LD_EXP 14
2272: PUSH
2273: LD_EXP 15
2277: PUSH
2278: LD_EXP 16
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: DIFF
2302: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2303: LD_ADDR_EXP 58
2307: PUSH
2308: LD_VAR 0 4
2312: PPUSH
2313: LD_INT 1
2315: PPUSH
2316: CALL 6930 0 2
2320: ST_TO_ADDR
// for i = 1 to 8 do
2321: LD_ADDR_VAR 0 2
2325: PUSH
2326: DOUBLE
2327: LD_INT 1
2329: DEC
2330: ST_TO_ADDR
2331: LD_INT 8
2333: PUSH
2334: FOR_TO
2335: IFFALSE 2365
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2337: LD_ADDR_EXP 59
2341: PUSH
2342: LD_EXP 59
2346: PUSH
2347: LD_EXP 58
2351: PUSH
2352: LD_VAR 0 2
2356: ARRAY
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: ADD
2362: ST_TO_ADDR
2363: GO 2334
2365: POP
2366: POP
// SetClass ( amUnitsAttack , 1 ) ;
2367: LD_EXP 59
2371: PPUSH
2372: LD_INT 1
2374: PPUSH
2375: CALL_OW 336
// end ;
2379: LD_VAR 0 1
2383: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2384: LD_INT 0
2386: PPUSH
2387: PPUSH
2388: PPUSH
// uc_side = 1 ;
2389: LD_ADDR_OWVAR 20
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// uc_nation = 1 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// for i := 1 to 5 do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: DOUBLE
2411: LD_INT 1
2413: DEC
2414: ST_TO_ADDR
2415: LD_INT 5
2417: PUSH
2418: FOR_TO
2419: IFFALSE 2503
// begin vc_engine = 3 ;
2421: LD_ADDR_OWVAR 39
2425: PUSH
2426: LD_INT 3
2428: ST_TO_ADDR
// vc_control = 3 ;
2429: LD_ADDR_OWVAR 38
2433: PUSH
2434: LD_INT 3
2436: ST_TO_ADDR
// vc_chassis = 3 ;
2437: LD_ADDR_OWVAR 37
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2445: LD_ADDR_OWVAR 40
2449: PUSH
2450: LD_INT 5
2452: PUSH
2453: LD_INT 9
2455: PUSH
2456: LD_INT 7
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 3
2469: PPUSH
2470: CALL_OW 12
2474: ARRAY
2475: ST_TO_ADDR
// veh = CreateVehicle ;
2476: LD_ADDR_VAR 0 3
2480: PUSH
2481: CALL_OW 45
2485: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2486: LD_VAR 0 3
2490: PPUSH
2491: LD_INT 14
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: CALL_OW 49
// end ;
2501: GO 2418
2503: POP
2504: POP
// vc_engine = 3 ;
2505: LD_ADDR_OWVAR 39
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// vc_control = 1 ;
2513: LD_ADDR_OWVAR 38
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// vc_chassis = 3 ;
2521: LD_ADDR_OWVAR 37
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2529: LD_ADDR_OWVAR 40
2533: PUSH
2534: LD_INT 5
2536: PUSH
2537: LD_INT 9
2539: PUSH
2540: LD_INT 7
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 1
2550: PPUSH
2551: LD_INT 3
2553: PPUSH
2554: CALL_OW 12
2558: ARRAY
2559: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2560: LD_ADDR_EXP 25
2564: PUSH
2565: CALL_OW 45
2569: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2570: LD_EXP 25
2574: PPUSH
2575: LD_INT 14
2577: PPUSH
2578: LD_INT 0
2580: PPUSH
2581: CALL_OW 49
// if JMMGirl = 1 then
2585: LD_EXP 73
2589: PUSH
2590: LD_INT 1
2592: EQUAL
2593: IFFALSE 2646
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2595: LD_ADDR_EXP 2
2599: PUSH
2600: LD_STRING 14_Joan
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL 6373 0 2
2610: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2611: LD_EXP 2
2615: PPUSH
2616: LD_EXP 25
2620: PPUSH
2621: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2625: LD_EXP 25
2629: PPUSH
2630: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2634: LD_EXP 2
2638: PPUSH
2639: LD_STRING D10BW-Joan-1
2641: PPUSH
2642: CALL_OW 88
// end ; if JMMGirl = 2 then
2646: LD_EXP 73
2650: PUSH
2651: LD_INT 2
2653: EQUAL
2654: IFFALSE 2707
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_STRING 14_Lisa
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL 6373 0 2
2671: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2672: LD_EXP 4
2676: PPUSH
2677: LD_EXP 25
2681: PPUSH
2682: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2686: LD_EXP 25
2690: PPUSH
2691: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2695: LD_EXP 4
2699: PPUSH
2700: LD_STRING D10BW-Lisa-1
2702: PPUSH
2703: CALL_OW 88
// end ; if JMMGirl = 3 then
2707: LD_EXP 73
2711: PUSH
2712: LD_INT 3
2714: EQUAL
2715: IFFALSE 2768
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2717: LD_ADDR_EXP 16
2721: PUSH
2722: LD_STRING 14_Connie
2724: PPUSH
2725: LD_INT 1
2727: PPUSH
2728: CALL 6373 0 2
2732: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2733: LD_EXP 16
2737: PPUSH
2738: LD_EXP 25
2742: PPUSH
2743: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2747: LD_EXP 25
2751: PPUSH
2752: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2756: LD_EXP 4
2760: PPUSH
2761: LD_STRING D10BW-Con-1
2763: PPUSH
2764: CALL_OW 88
// end ; end ;
2768: LD_VAR 0 1
2772: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2773: LD_INT 0
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
2782: PPUSH
2783: PPUSH
// uc_side = 1 ;
2784: LD_ADDR_OWVAR 20
2788: PUSH
2789: LD_INT 1
2791: ST_TO_ADDR
// uc_nation = 1 ;
2792: LD_ADDR_OWVAR 21
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// omegaVeh = [ ] ;
2800: LD_ADDR_VAR 0 3
2804: PUSH
2805: EMPTY
2806: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2807: LD_STRING 13s_Lisa
2809: PPUSH
2810: CALL_OW 28
2814: PUSH
2815: LD_INT 0
2817: EQUAL
2818: IFFALSE 2833
// Lisa = PrepareUnitOmega ( Lisa ) ;
2820: LD_ADDR_EXP 4
2824: PUSH
2825: LD_STRING Lisa
2827: PPUSH
2828: CALL 6487 0 1
2832: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2833: LD_STRING 13s_Donaldson
2835: PPUSH
2836: CALL_OW 28
2840: PUSH
2841: LD_INT 0
2843: EQUAL
2844: IFFALSE 2859
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2846: LD_ADDR_EXP 5
2850: PUSH
2851: LD_STRING Donaldson
2853: PPUSH
2854: CALL 6487 0 1
2858: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2859: LD_STRING 13s_Bobby
2861: PPUSH
2862: CALL_OW 28
2866: PUSH
2867: LD_INT 0
2869: EQUAL
2870: IFFALSE 2885
// Bobby = PrepareUnitOmega ( Bobby ) ;
2872: LD_ADDR_EXP 6
2876: PUSH
2877: LD_STRING Bobby
2879: PPUSH
2880: CALL 6487 0 1
2884: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2885: LD_STRING 13s_Cyrus
2887: PPUSH
2888: CALL_OW 28
2892: PUSH
2893: LD_INT 0
2895: EQUAL
2896: IFFALSE 2911
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2898: LD_ADDR_EXP 7
2902: PUSH
2903: LD_STRING Cyrus
2905: PPUSH
2906: CALL 6487 0 1
2910: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2911: LD_STRING 13s_Denis
2913: PPUSH
2914: CALL_OW 28
2918: PUSH
2919: LD_INT 0
2921: EQUAL
2922: IFFALSE 2937
// Denis = PrepareUnitOmega ( Denis ) ;
2924: LD_ADDR_EXP 8
2928: PUSH
2929: LD_STRING Denis
2931: PPUSH
2932: CALL 6487 0 1
2936: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2937: LD_STRING 13s_Brown
2939: PPUSH
2940: CALL_OW 28
2944: PUSH
2945: LD_INT 0
2947: EQUAL
2948: IFFALSE 2963
// Brown = PrepareUnitOmega ( Brown ) ;
2950: LD_ADDR_EXP 9
2954: PUSH
2955: LD_STRING Brown
2957: PPUSH
2958: CALL 6487 0 1
2962: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2963: LD_STRING 13s_Gladstone
2965: PPUSH
2966: CALL_OW 28
2970: PUSH
2971: LD_INT 0
2973: EQUAL
2974: IFFALSE 2989
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2976: LD_ADDR_EXP 10
2980: PUSH
2981: LD_STRING Gladstone
2983: PPUSH
2984: CALL 6487 0 1
2988: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
2989: LD_STRING 13s_Houten
2991: PPUSH
2992: CALL_OW 28
2996: PUSH
2997: LD_INT 0
2999: EQUAL
3000: IFFALSE 3015
// Houten = PrepareUnitOmega ( Houten ) ;
3002: LD_ADDR_EXP 11
3006: PUSH
3007: LD_STRING Houten
3009: PPUSH
3010: CALL 6487 0 1
3014: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3015: LD_STRING 13s_Cornell
3017: PPUSH
3018: CALL_OW 28
3022: PUSH
3023: LD_INT 0
3025: EQUAL
3026: IFFALSE 3041
// Cornel = PrepareUnitOmega ( Cornell ) ;
3028: LD_ADDR_EXP 12
3032: PUSH
3033: LD_STRING Cornell
3035: PPUSH
3036: CALL 6487 0 1
3040: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3041: LD_STRING 13s_Gary
3043: PPUSH
3044: CALL_OW 28
3048: PUSH
3049: LD_INT 0
3051: EQUAL
3052: IFFALSE 3067
// Gary = PrepareUnitOmega ( Gary ) ;
3054: LD_ADDR_EXP 13
3058: PUSH
3059: LD_STRING Gary
3061: PPUSH
3062: CALL 6487 0 1
3066: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3067: LD_STRING 13s_Frank
3069: PPUSH
3070: CALL_OW 28
3074: PUSH
3075: LD_INT 0
3077: EQUAL
3078: IFFALSE 3093
// Frank = PrepareUnitOmega ( Frank ) ;
3080: LD_ADDR_EXP 14
3084: PUSH
3085: LD_STRING Frank
3087: PPUSH
3088: CALL 6487 0 1
3092: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3093: LD_STRING 13s_Kikuchi
3095: PPUSH
3096: CALL_OW 28
3100: PUSH
3101: LD_INT 0
3103: EQUAL
3104: IFFALSE 3119
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3106: LD_ADDR_EXP 15
3110: PUSH
3111: LD_STRING Kikuchi
3113: PPUSH
3114: CALL 6487 0 1
3118: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3119: LD_STRING 13s_Kikuchi
3121: PPUSH
3122: CALL_OW 28
3126: PUSH
3127: LD_INT 0
3129: EQUAL
3130: IFFALSE 3145
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3132: LD_ADDR_EXP 15
3136: PUSH
3137: LD_STRING Kikuchi
3139: PPUSH
3140: CALL 6487 0 1
3144: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3145: LD_ADDR_EXP 22
3149: PUSH
3150: LD_STRING Gordon
3152: PPUSH
3153: CALL 6487 0 1
3157: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3158: LD_ADDR_EXP 23
3162: PUSH
3163: LD_STRING Peter
3165: PPUSH
3166: CALL 6487 0 1
3170: ST_TO_ADDR
// if StevensStatus = 1 then
3171: LD_EXP 70
3175: PUSH
3176: LD_INT 1
3178: EQUAL
3179: IFFALSE 3196
// Stevens = PrepareUnitOmega ( Stevens ) else
3181: LD_ADDR_EXP 3
3185: PUSH
3186: LD_STRING Stevens
3188: PPUSH
3189: CALL 6487 0 1
3193: ST_TO_ADDR
3194: GO 3209
// Baker = PrepareUnitOmega ( Baker ) ;
3196: LD_ADDR_EXP 21
3200: PUSH
3201: LD_STRING Baker
3203: PPUSH
3204: CALL 6487 0 1
3208: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3209: LD_ADDR_EXP 19
3213: PUSH
3214: LD_STRING 15_other_survivors
3216: PPUSH
3217: CALL_OW 31
3221: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3222: LD_ADDR_VAR 0 7
3226: PUSH
3227: LD_STRING 15_Vehicles_1
3229: PPUSH
3230: EMPTY
3231: PPUSH
3232: CALL_OW 30
3236: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3237: LD_ADDR_VAR 0 8
3241: PUSH
3242: LD_STRING 15_ResourcesInCargo_1
3244: PPUSH
3245: EMPTY
3246: PPUSH
3247: CALL_OW 30
3251: ST_TO_ADDR
// for i := 1 to vehicles do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_VAR 0 7
3266: PUSH
3267: FOR_TO
3268: IFFALSE 3493
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_VAR 0 7
3279: PUSH
3280: LD_VAR 0 2
3284: ARRAY
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3290: LD_ADDR_OWVAR 37
3294: PUSH
3295: LD_VAR 0 7
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3310: LD_ADDR_OWVAR 39
3314: PUSH
3315: LD_VAR 0 7
3319: PUSH
3320: LD_VAR 0 2
3324: ARRAY
3325: PUSH
3326: LD_INT 3
3328: ARRAY
3329: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3330: LD_ADDR_OWVAR 38
3334: PUSH
3335: LD_VAR 0 7
3339: PUSH
3340: LD_VAR 0 2
3344: ARRAY
3345: PUSH
3346: LD_INT 4
3348: ARRAY
3349: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3350: LD_ADDR_OWVAR 40
3354: PUSH
3355: LD_VAR 0 7
3359: PUSH
3360: LD_VAR 0 2
3364: ARRAY
3365: PUSH
3366: LD_INT 5
3368: ARRAY
3369: ST_TO_ADDR
// if vc_weapon = 8 then
3370: LD_OWVAR 40
3374: PUSH
3375: LD_INT 8
3377: EQUAL
3378: IFFALSE 3390
// vc_weapon = 9 else
3380: LD_ADDR_OWVAR 40
3384: PUSH
3385: LD_INT 9
3387: ST_TO_ADDR
3388: GO 3410
// vc_weapon = vehicles [ i ] [ 5 ] ;
3390: LD_ADDR_OWVAR 40
3394: PUSH
3395: LD_VAR 0 7
3399: PUSH
3400: LD_VAR 0 2
3404: ARRAY
3405: PUSH
3406: LD_INT 5
3408: ARRAY
3409: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3410: LD_ADDR_OWVAR 41
3414: PUSH
3415: LD_INT 40
3417: ST_TO_ADDR
// veh = CreateVehicle ;
3418: LD_ADDR_VAR 0 5
3422: PUSH
3423: CALL_OW 45
3427: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 5
3435: PPUSH
3436: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3440: LD_VAR 0 5
3444: PPUSH
3445: LD_INT 300
3447: PPUSH
3448: LD_INT 800
3450: PPUSH
3451: CALL_OW 12
3455: PPUSH
3456: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3460: LD_ADDR_VAR 0 3
3464: PUSH
3465: LD_VAR 0 3
3469: PUSH
3470: LD_VAR 0 5
3474: ADD
3475: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3476: LD_VAR 0 5
3480: PPUSH
3481: LD_INT 16
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 49
// end ;
3491: GO 3267
3493: POP
3494: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3495: LD_ADDR_VAR 0 9
3499: PUSH
3500: LD_INT 16
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 1
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 21
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: LD_INT 34
3525: PUSH
3526: LD_INT 12
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 33
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 32
3545: PUSH
3546: LD_INT 3
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: PPUSH
3560: CALL_OW 70
3564: ST_TO_ADDR
// if cargoList > 0 then
3565: LD_VAR 0 9
3569: PUSH
3570: LD_INT 0
3572: GREATER
3573: IFFALSE 3706
// for i = 1 to cargoList do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: DOUBLE
3581: LD_INT 1
3583: DEC
3584: ST_TO_ADDR
3585: LD_VAR 0 9
3589: PUSH
3590: FOR_TO
3591: IFFALSE 3704
// begin if resources > 0 then
3593: LD_VAR 0 8
3597: PUSH
3598: LD_INT 0
3600: GREATER
3601: IFFALSE 3702
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3603: LD_VAR 0 9
3607: PUSH
3608: LD_VAR 0 2
3612: ARRAY
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_VAR 0 8
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PPUSH
3632: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3636: LD_VAR 0 9
3640: PUSH
3641: LD_VAR 0 2
3645: ARRAY
3646: PPUSH
3647: LD_INT 2
3649: PPUSH
3650: LD_VAR 0 8
3654: PUSH
3655: LD_VAR 0 2
3659: ARRAY
3660: PUSH
3661: LD_INT 2
3663: ARRAY
3664: PPUSH
3665: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3669: LD_VAR 0 9
3673: PUSH
3674: LD_VAR 0 2
3678: ARRAY
3679: PPUSH
3680: LD_INT 3
3682: PPUSH
3683: LD_VAR 0 8
3687: PUSH
3688: LD_VAR 0 2
3692: ARRAY
3693: PUSH
3694: LD_INT 3
3696: ARRAY
3697: PPUSH
3698: CALL_OW 291
// end ; end ;
3702: GO 3590
3704: POP
3705: POP
// for i := 1 to heroesFromOmega do
3706: LD_ADDR_VAR 0 2
3710: PUSH
3711: DOUBLE
3712: LD_INT 1
3714: DEC
3715: ST_TO_ADDR
3716: LD_EXP 20
3720: PUSH
3721: FOR_TO
3722: IFFALSE 3752
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3724: LD_EXP 20
3728: PUSH
3729: LD_VAR 0 2
3733: ARRAY
3734: PPUSH
3735: LD_VAR 0 3
3739: PUSH
3740: LD_VAR 0 2
3744: ARRAY
3745: PPUSH
3746: CALL_OW 52
// end ;
3750: GO 3721
3752: POP
3753: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3754: LD_ADDR_VAR 0 6
3758: PUSH
3759: LD_VAR 0 3
3763: PPUSH
3764: LD_INT 58
3766: PUSH
3767: EMPTY
3768: LIST
3769: PPUSH
3770: CALL_OW 72
3774: ST_TO_ADDR
// for i := 1 to others13Omega do
3775: LD_ADDR_VAR 0 2
3779: PUSH
3780: DOUBLE
3781: LD_INT 1
3783: DEC
3784: ST_TO_ADDR
3785: LD_EXP 19
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3821
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3793: LD_EXP 19
3797: PUSH
3798: LD_VAR 0 2
3802: ARRAY
3803: PPUSH
3804: LD_VAR 0 6
3808: PUSH
3809: LD_VAR 0 2
3813: ARRAY
3814: PPUSH
3815: CALL_OW 52
// end ;
3819: GO 3790
3821: POP
3822: POP
// end ; end_of_file
3823: LD_VAR 0 1
3827: RET
// export function PrepareLegion ; var i ; begin
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
// uc_side = 8 ;
3832: LD_ADDR_OWVAR 20
3836: PUSH
3837: LD_INT 8
3839: ST_TO_ADDR
// uc_nation = 2 ;
3840: LD_ADDR_OWVAR 21
3844: PUSH
3845: LD_INT 2
3847: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3848: LD_ADDR_EXP 30
3852: PUSH
3853: LD_STRING Kurt
3855: PPUSH
3856: LD_INT 0
3858: PPUSH
3859: CALL 6373 0 2
3863: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3864: LD_ADDR_EXP 35
3868: PUSH
3869: LD_STRING Kozlov
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL 6373 0 2
3879: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3880: LD_INT 8
3882: PPUSH
3883: LD_INT 2
3885: PPUSH
3886: LD_INT 122
3888: PPUSH
3889: LD_INT 10
3891: PPUSH
3892: LD_INT 2
3894: PPUSH
3895: LD_INT 4
3897: PPUSH
3898: CALL 7491 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3902: LD_INT 8
3904: PPUSH
3905: LD_INT 2
3907: PPUSH
3908: LD_INT 99
3910: PPUSH
3911: LD_INT 10
3913: PPUSH
3914: LD_INT 2
3916: PPUSH
3917: LD_INT 2
3919: PPUSH
3920: CALL 7491 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3924: LD_INT 8
3926: PPUSH
3927: LD_INT 2
3929: PPUSH
3930: LD_INT 104
3932: PPUSH
3933: LD_INT 10
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 2
3941: PPUSH
3942: CALL 7491 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3946: LD_INT 8
3948: PPUSH
3949: LD_INT 2
3951: PPUSH
3952: LD_INT 104
3954: PPUSH
3955: LD_INT 10
3957: PPUSH
3958: LD_INT 8
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: CALL 7491 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3968: LD_INT 8
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: LD_INT 118
3976: PPUSH
3977: LD_INT 10
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: CALL 7491 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
3990: LD_INT 8
3992: PPUSH
3993: LD_INT 2
3995: PPUSH
3996: LD_INT 117
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: LD_INT 3
4004: PPUSH
4005: LD_INT 4
4007: PPUSH
4008: CALL 7491 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 2
4017: PPUSH
4018: LD_INT 252
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 2
4029: PPUSH
4030: CALL 7491 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4034: LD_ADDR_VAR 0 2
4038: PUSH
4039: LD_INT 22
4041: PUSH
4042: LD_INT 8
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 21
4051: PUSH
4052: LD_INT 3
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 30
4061: PUSH
4062: LD_INT 32
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 58
4071: PUSH
4072: EMPTY
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: PPUSH
4081: CALL_OW 69
4085: PUSH
4086: FOR_IN
4087: IFFALSE 4115
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4089: LD_INT 8
4091: PPUSH
4092: LD_INT 2
4094: PPUSH
4095: LD_VAR 0 2
4099: PPUSH
4100: LD_INT 10
4102: PPUSH
4103: LD_INT 1
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: CALL 7491 0 6
4113: GO 4086
4115: POP
4116: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4117: LD_INT 8
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 140
4125: PPUSH
4126: LD_INT 10
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: CALL 7491 0 6
// arControler = UnitsInside ( ArControl ) ;
4139: LD_ADDR_EXP 50
4143: PUSH
4144: LD_INT 140
4146: PPUSH
4147: CALL_OW 313
4151: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4152: LD_INT 139
4154: PPUSH
4155: LD_EXP 50
4159: PUSH
4160: LD_INT 1
4162: ARRAY
4163: PPUSH
4164: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4168: LD_INT 138
4170: PPUSH
4171: LD_EXP 50
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: PPUSH
4180: CALL_OW 195
// hc_name = Ali Hadarach ;
4184: LD_ADDR_OWVAR 26
4188: PUSH
4189: LD_STRING Ali Hadarach
4191: ST_TO_ADDR
// hc_gallery =  ;
4192: LD_ADDR_OWVAR 33
4196: PUSH
4197: LD_STRING 
4199: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4200: LD_INT 1
4202: PPUSH
4203: LD_INT 8
4205: PPUSH
4206: CALL_OW 383
// LegionFriend = CreateHuman ;
4210: LD_ADDR_EXP 47
4214: PUSH
4215: CALL_OW 44
4219: ST_TO_ADDR
// end ; end_of_file
4220: LD_VAR 0 1
4224: RET
// export function PrepareRussians ; var i ; begin
4225: LD_INT 0
4227: PPUSH
4228: PPUSH
// uc_side = 3 ;
4229: LD_ADDR_OWVAR 20
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4237: LD_ADDR_EXP 26
4241: PUSH
4242: LD_STRING Platonov
4244: PPUSH
4245: LD_INT 0
4247: PPUSH
4248: CALL 6373 0 2
4252: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4253: LD_EXP 26
4257: PPUSH
4258: LD_INT 23
4260: PPUSH
4261: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4265: LD_ADDR_EXP 27
4269: PUSH
4270: LD_STRING Yakotich
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL 6373 0 2
4280: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4281: LD_EXP 27
4285: PPUSH
4286: LD_INT 26
4288: PPUSH
4289: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4293: LD_ADDR_EXP 36
4297: PUSH
4298: LD_STRING Kovalyuk
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL 6373 0 2
4308: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4309: LD_EXP 36
4313: PPUSH
4314: LD_INT 3
4316: PPUSH
4317: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4321: LD_ADDR_EXP 52
4325: PUSH
4326: LD_EXP 52
4330: PUSH
4331: LD_EXP 36
4335: ADD
4336: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4337: LD_ADDR_EXP 37
4341: PUSH
4342: LD_STRING Oblukov
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL 6373 0 2
4352: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4353: LD_ADDR_EXP 38
4357: PUSH
4358: LD_STRING Bystrov
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL 6373 0 2
4368: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4369: LD_ADDR_EXP 39
4373: PUSH
4374: LD_STRING Fadeev
4376: PPUSH
4377: LD_INT 0
4379: PPUSH
4380: CALL 6373 0 2
4384: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4385: LD_ADDR_EXP 40
4389: PUSH
4390: LD_STRING Gleb
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 6373 0 2
4400: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4401: LD_ADDR_EXP 41
4405: PUSH
4406: LD_STRING Petrosyan
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL 6373 0 2
4416: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4417: LD_ADDR_EXP 42
4421: PUSH
4422: LD_STRING Petrovova
4424: PPUSH
4425: LD_INT 0
4427: PPUSH
4428: CALL 6373 0 2
4432: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4433: LD_ADDR_EXP 43
4437: PUSH
4438: LD_STRING Kuzmov
4440: PPUSH
4441: LD_INT 0
4443: PPUSH
4444: CALL 6373 0 2
4448: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4449: LD_ADDR_EXP 44
4453: PUSH
4454: LD_STRING Mikhail
4456: PPUSH
4457: LD_INT 0
4459: PPUSH
4460: CALL 6373 0 2
4464: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4465: LD_ADDR_EXP 45
4469: PUSH
4470: LD_STRING Furmanov
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL 6373 0 2
4480: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4481: LD_ADDR_EXP 46
4485: PUSH
4486: LD_STRING Belkov
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL 6373 0 2
4496: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4497: LD_EXP 37
4501: PPUSH
4502: LD_INT 22
4504: PUSH
4505: LD_INT 3
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 21
4514: PUSH
4515: LD_INT 3
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 30
4524: PUSH
4525: LD_INT 32
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 58
4534: PUSH
4535: EMPTY
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: PPUSH
4544: CALL_OW 69
4548: PUSH
4549: LD_INT 1
4551: ARRAY
4552: PPUSH
4553: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4557: LD_EXP 39
4561: PPUSH
4562: LD_INT 22
4564: PUSH
4565: LD_INT 3
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: LD_INT 21
4574: PUSH
4575: LD_INT 3
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 30
4584: PUSH
4585: LD_INT 32
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PUSH
4592: LD_INT 58
4594: PUSH
4595: EMPTY
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: LD_INT 1
4611: ARRAY
4612: PPUSH
4613: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4617: LD_EXP 40
4621: PPUSH
4622: LD_INT 22
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 21
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 30
4644: PUSH
4645: LD_INT 32
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 58
4654: PUSH
4655: EMPTY
4656: LIST
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: PPUSH
4664: CALL_OW 69
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4677: LD_EXP 42
4681: PPUSH
4682: LD_INT 22
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 21
4694: PUSH
4695: LD_INT 3
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 30
4704: PUSH
4705: LD_INT 32
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 58
4714: PUSH
4715: EMPTY
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL_OW 69
4728: PUSH
4729: LD_INT 1
4731: ARRAY
4732: PPUSH
4733: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4737: LD_EXP 43
4741: PPUSH
4742: LD_INT 22
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 21
4754: PUSH
4755: LD_INT 3
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 30
4764: PUSH
4765: LD_INT 32
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 58
4774: PUSH
4775: EMPTY
4776: LIST
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: PPUSH
4784: CALL_OW 69
4788: PUSH
4789: LD_INT 1
4791: ARRAY
4792: PPUSH
4793: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4797: LD_EXP 45
4801: PPUSH
4802: LD_INT 22
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 21
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 32
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 58
4834: PUSH
4835: EMPTY
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PPUSH
4844: CALL_OW 69
4848: PUSH
4849: LD_INT 1
4851: ARRAY
4852: PPUSH
4853: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4857: LD_EXP 46
4861: PPUSH
4862: LD_INT 22
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 21
4874: PUSH
4875: LD_INT 3
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 30
4884: PUSH
4885: LD_INT 32
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 58
4894: PUSH
4895: EMPTY
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: PUSH
4909: LD_INT 1
4911: ARRAY
4912: PPUSH
4913: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4917: LD_EXP 38
4921: PPUSH
4922: LD_INT 2
4924: PPUSH
4925: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4929: LD_EXP 41
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4941: LD_EXP 44
4945: PPUSH
4946: LD_INT 26
4948: PPUSH
4949: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4953: LD_EXP 44
4957: PPUSH
4958: LD_INT 2
4960: PPUSH
4961: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 3
4970: PPUSH
4971: LD_INT 26
4973: PPUSH
4974: LD_INT 10
4976: PPUSH
4977: LD_INT 2
4979: PPUSH
4980: LD_INT 5
4982: PPUSH
4983: CALL 7491 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
4987: LD_INT 3
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 23
4995: PPUSH
4996: LD_INT 10
4998: PPUSH
4999: LD_INT 2
5001: PPUSH
5002: LD_INT 4
5004: PPUSH
5005: CALL 7491 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5009: LD_INT 3
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 27
5017: PPUSH
5018: LD_INT 10
5020: PPUSH
5021: LD_INT 9
5023: PPUSH
5024: LD_INT 6
5026: PPUSH
5027: CALL 7491 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5031: LD_INT 3
5033: PPUSH
5034: LD_INT 3
5036: PPUSH
5037: LD_INT 27
5039: PPUSH
5040: LD_INT 10
5042: PPUSH
5043: LD_INT 3
5045: PPUSH
5046: LD_INT 3
5048: PPUSH
5049: CALL 7491 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5053: LD_INT 3
5055: PPUSH
5056: LD_INT 3
5058: PPUSH
5059: LD_INT 4
5061: PPUSH
5062: LD_INT 10
5064: PPUSH
5065: LD_INT 3
5067: PPUSH
5068: LD_INT 6
5070: PPUSH
5071: CALL 7491 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5075: LD_INT 3
5077: PPUSH
5078: LD_INT 3
5080: PPUSH
5081: LD_INT 10
5083: PPUSH
5084: LD_INT 10
5086: PPUSH
5087: LD_INT 3
5089: PPUSH
5090: LD_INT 6
5092: PPUSH
5093: CALL 7491 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5097: LD_INT 3
5099: PPUSH
5100: LD_INT 3
5102: PPUSH
5103: LD_INT 2
5105: PPUSH
5106: LD_INT 10
5108: PPUSH
5109: LD_INT 4
5111: PPUSH
5112: LD_INT 3
5114: PPUSH
5115: CALL 7491 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5119: LD_INT 3
5121: PPUSH
5122: LD_INT 3
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 10
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: LD_INT 3
5136: PPUSH
5137: CALL 7491 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5141: LD_ADDR_VAR 0 2
5145: PUSH
5146: LD_INT 22
5148: PUSH
5149: LD_INT 3
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 21
5158: PUSH
5159: LD_INT 3
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 30
5168: PUSH
5169: LD_INT 32
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 58
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: PPUSH
5188: CALL_OW 69
5192: PUSH
5193: FOR_IN
5194: IFFALSE 5222
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5196: LD_INT 3
5198: PPUSH
5199: LD_INT 3
5201: PPUSH
5202: LD_VAR 0 2
5206: PPUSH
5207: LD_INT 10
5209: PPUSH
5210: LD_INT 1
5212: PPUSH
5213: LD_INT 1
5215: PPUSH
5216: CALL 7491 0 6
5220: GO 5193
5222: POP
5223: POP
// end ;
5224: LD_VAR 0 1
5228: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5229: LD_INT 0
5231: PPUSH
5232: PPUSH
5233: PPUSH
5234: PPUSH
// uc_side = 6 ;
5235: LD_ADDR_OWVAR 20
5239: PUSH
5240: LD_INT 6
5242: ST_TO_ADDR
// uc_nation = 1 ;
5243: LD_ADDR_OWVAR 21
5247: PUSH
5248: LD_INT 1
5250: ST_TO_ADDR
// vc_engine = 3 ;
5251: LD_ADDR_OWVAR 39
5255: PUSH
5256: LD_INT 3
5258: ST_TO_ADDR
// vc_control = 1 ;
5259: LD_ADDR_OWVAR 38
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// vc_chassis = 5 ;
5267: LD_ADDR_OWVAR 37
5271: PUSH
5272: LD_INT 5
5274: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5275: LD_ADDR_OWVAR 40
5279: PUSH
5280: LD_INT 5
5282: PUSH
5283: LD_INT 9
5285: PUSH
5286: LD_INT 7
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 1
5296: PPUSH
5297: LD_INT 3
5299: PPUSH
5300: CALL_OW 12
5304: ARRAY
5305: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5306: LD_ADDR_EXP 34
5310: PUSH
5311: CALL_OW 45
5315: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5316: LD_EXP 34
5320: PPUSH
5321: LD_INT 14
5323: PPUSH
5324: LD_INT 0
5326: PPUSH
5327: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5331: LD_ADDR_EXP 33
5335: PUSH
5336: LD_STRING Vsevolod
5338: PPUSH
5339: LD_INT 0
5341: PPUSH
5342: CALL 6373 0 2
5346: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5347: LD_EXP 33
5351: PPUSH
5352: LD_EXP 34
5356: PPUSH
5357: CALL_OW 52
// for i := 1 to 5 do
5361: LD_ADDR_VAR 0 2
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 5
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5459
// begin vc_engine = 3 ;
5377: LD_ADDR_OWVAR 39
5381: PUSH
5382: LD_INT 3
5384: ST_TO_ADDR
// vc_control = 3 ;
5385: LD_ADDR_OWVAR 38
5389: PUSH
5390: LD_INT 3
5392: ST_TO_ADDR
// vc_chassis = 3 ;
5393: LD_ADDR_OWVAR 37
5397: PUSH
5398: LD_INT 3
5400: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5401: LD_ADDR_OWVAR 40
5405: PUSH
5406: LD_INT 5
5408: PUSH
5409: LD_INT 9
5411: PUSH
5412: LD_INT 7
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 1
5422: PPUSH
5423: LD_INT 3
5425: PPUSH
5426: CALL_OW 12
5430: ARRAY
5431: ST_TO_ADDR
// veh = CreateVehicle ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: CALL_OW 45
5441: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5442: LD_VAR 0 3
5446: PPUSH
5447: LD_INT 14
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// end ;
5457: GO 5374
5459: POP
5460: POP
// uc_nation = 3 ;
5461: LD_ADDR_OWVAR 21
5465: PUSH
5466: LD_INT 3
5468: ST_TO_ADDR
// for i := 1 to 7 do
5469: LD_ADDR_VAR 0 2
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_INT 7
5481: PUSH
5482: FOR_TO
5483: IFFALSE 5575
// begin vc_engine = 3 ;
5485: LD_ADDR_OWVAR 39
5489: PUSH
5490: LD_INT 3
5492: ST_TO_ADDR
// vc_control = 3 ;
5493: LD_ADDR_OWVAR 38
5497: PUSH
5498: LD_INT 3
5500: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5501: LD_ADDR_OWVAR 37
5505: PUSH
5506: LD_INT 24
5508: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5509: LD_ADDR_OWVAR 40
5513: PUSH
5514: LD_INT 44
5516: PUSH
5517: LD_INT 47
5519: PUSH
5520: LD_INT 45
5522: PUSH
5523: LD_INT 46
5525: PUSH
5526: LD_INT 49
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 4
5541: PPUSH
5542: CALL_OW 12
5546: ARRAY
5547: ST_TO_ADDR
// veh = CreateVehicle ;
5548: LD_ADDR_VAR 0 3
5552: PUSH
5553: CALL_OW 45
5557: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5558: LD_VAR 0 3
5562: PPUSH
5563: LD_INT 14
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 49
// end ;
5573: GO 5482
5575: POP
5576: POP
// repeat wait ( 0 0$1 ) ;
5577: LD_INT 35
5579: PPUSH
5580: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5584: LD_ADDR_VAR 0 4
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 6
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 21
5601: PUSH
5602: LD_INT 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 50
5611: PUSH
5612: EMPTY
5613: LIST
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5625: LD_EXP 1
5629: PPUSH
5630: CALL_OW 310
5634: NOT
5635: IFFALSE 5668
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5637: LD_VAR 0 4
5641: PPUSH
5642: LD_EXP 1
5646: PPUSH
5647: CALL_OW 250
5651: PPUSH
5652: LD_EXP 1
5656: PPUSH
5657: CALL_OW 251
5661: PPUSH
5662: CALL_OW 114
5666: GO 5707
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5668: LD_VAR 0 4
5672: PPUSH
5673: LD_EXP 1
5677: PPUSH
5678: CALL_OW 310
5682: PPUSH
5683: CALL_OW 250
5687: PPUSH
5688: LD_EXP 1
5692: PPUSH
5693: CALL_OW 310
5697: PPUSH
5698: CALL_OW 251
5702: PPUSH
5703: CALL_OW 114
// until vehList = 0 ;
5707: LD_VAR 0 4
5711: PUSH
5712: LD_INT 0
5714: EQUAL
5715: IFFALSE 5577
// end ;
5717: LD_VAR 0 1
5721: RET
// export function PreapreMehBehs ; var i , un ; begin
5722: LD_INT 0
5724: PPUSH
5725: PPUSH
5726: PPUSH
// uc_side = 6 ;
5727: LD_ADDR_OWVAR 20
5731: PUSH
5732: LD_INT 6
5734: ST_TO_ADDR
// uc_nation = 3 ;
5735: LD_ADDR_OWVAR 21
5739: PUSH
5740: LD_INT 3
5742: ST_TO_ADDR
// for i := 1 to 3 do
5743: LD_ADDR_VAR 0 2
5747: PUSH
5748: DOUBLE
5749: LD_INT 1
5751: DEC
5752: ST_TO_ADDR
5753: LD_INT 3
5755: PUSH
5756: FOR_TO
5757: IFFALSE 5828
// begin hc_name =  ;
5759: LD_ADDR_OWVAR 26
5763: PUSH
5764: LD_STRING 
5766: ST_TO_ADDR
// hc_gallery =  ;
5767: LD_ADDR_OWVAR 33
5771: PUSH
5772: LD_STRING 
5774: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5775: LD_INT 0
5777: PPUSH
5778: LD_INT 10
5780: PPUSH
5781: CALL_OW 383
// un = CreateHuman ;
5785: LD_ADDR_VAR 0 3
5789: PUSH
5790: CALL_OW 44
5794: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5795: LD_ADDR_EXP 52
5799: PUSH
5800: LD_EXP 52
5804: PUSH
5805: LD_VAR 0 3
5809: ADD
5810: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5811: LD_VAR 0 3
5815: PPUSH
5816: LD_INT 17
5818: PPUSH
5819: LD_INT 0
5821: PPUSH
5822: CALL_OW 49
// end ;
5826: GO 5756
5828: POP
5829: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5830: LD_EXP 36
5834: PPUSH
5835: LD_INT 17
5837: PPUSH
5838: LD_INT 0
5840: PPUSH
5841: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5845: LD_EXP 36
5849: PPUSH
5850: LD_INT 6
5852: PPUSH
5853: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5857: LD_INT 145
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5867: LD_EXP 52
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PPUSH
5876: LD_INT 37
5878: PPUSH
5879: LD_INT 193
5881: PPUSH
5882: LD_INT 118
5884: PPUSH
5885: LD_INT 0
5887: PPUSH
5888: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5892: LD_EXP 52
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: PPUSH
5901: LD_INT 37
5903: PPUSH
5904: LD_INT 204
5906: PPUSH
5907: LD_INT 119
5909: PPUSH
5910: LD_INT 0
5912: PPUSH
5913: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5917: LD_EXP 52
5921: PUSH
5922: LD_INT 3
5924: ARRAY
5925: PPUSH
5926: LD_INT 37
5928: PPUSH
5929: LD_INT 195
5931: PPUSH
5932: LD_INT 126
5934: PPUSH
5935: LD_INT 0
5937: PPUSH
5938: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5942: LD_EXP 52
5946: PUSH
5947: LD_INT 4
5949: ARRAY
5950: PPUSH
5951: LD_INT 37
5953: PPUSH
5954: LD_INT 207
5956: PPUSH
5957: LD_INT 126
5959: PPUSH
5960: LD_INT 0
5962: PPUSH
5963: CALL_OW 170
// end ; end_of_file
5967: LD_VAR 0 1
5971: RET
// export function PrepareAlliance ; var i ; begin
5972: LD_INT 0
5974: PPUSH
5975: PPUSH
// uc_side = 7 ;
5976: LD_ADDR_OWVAR 20
5980: PUSH
5981: LD_INT 7
5983: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
5984: LD_ADDR_EXP 28
5988: PUSH
5989: LD_STRING Roth
5991: PPUSH
5992: LD_INT 0
5994: PPUSH
5995: CALL 6373 0 2
5999: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
6000: LD_EXP 28
6004: PPUSH
6005: LD_INT 249
6007: PPUSH
6008: LD_INT 187
6010: PPUSH
6011: LD_INT 0
6013: PPUSH
6014: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
6018: LD_EXP 28
6022: PPUSH
6023: LD_INT 248
6025: PPUSH
6026: LD_INT 187
6028: PPUSH
6029: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
6033: LD_INT 7
6035: PPUSH
6036: LD_INT 1
6038: PPUSH
6039: LD_INT 45
6041: PPUSH
6042: LD_INT 10
6044: PPUSH
6045: LD_INT 2
6047: PPUSH
6048: LD_INT 3
6050: PPUSH
6051: CALL 7491 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6055: LD_INT 7
6057: PPUSH
6058: LD_INT 3
6060: PPUSH
6061: LD_INT 45
6063: PPUSH
6064: LD_INT 10
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: LD_INT 2
6072: PPUSH
6073: CALL 7491 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6077: LD_INT 7
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: LD_INT 194
6085: PPUSH
6086: LD_INT 10
6088: PPUSH
6089: LD_INT 5
6091: PPUSH
6092: LD_INT 4
6094: PPUSH
6095: CALL 7491 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6099: LD_INT 7
6101: PPUSH
6102: LD_INT 3
6104: PPUSH
6105: LD_INT 194
6107: PPUSH
6108: LD_INT 10
6110: PPUSH
6111: LD_INT 8
6113: PPUSH
6114: LD_INT 6
6116: PPUSH
6117: CALL 7491 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6121: LD_INT 7
6123: PPUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_INT 156
6129: PPUSH
6130: LD_INT 10
6132: PPUSH
6133: LD_INT 3
6135: PPUSH
6136: LD_INT 6
6138: PPUSH
6139: CALL 7491 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6143: LD_INT 7
6145: PPUSH
6146: LD_INT 3
6148: PPUSH
6149: LD_INT 162
6151: PPUSH
6152: LD_INT 10
6154: PPUSH
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 6
6160: PPUSH
6161: CALL 7491 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
6165: LD_INT 7
6167: PPUSH
6168: LD_INT 3
6170: PPUSH
6171: LD_INT 39
6173: PPUSH
6174: LD_INT 10
6176: PPUSH
6177: LD_INT 4
6179: PPUSH
6180: LD_INT 4
6182: PPUSH
6183: CALL 7491 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
6187: LD_INT 7
6189: PPUSH
6190: LD_INT 3
6192: PPUSH
6193: LD_INT 133
6195: PPUSH
6196: LD_INT 10
6198: PPUSH
6199: LD_INT 4
6201: PPUSH
6202: LD_INT 4
6204: PPUSH
6205: CALL 7491 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6209: LD_INT 7
6211: PPUSH
6212: LD_INT 1
6214: PPUSH
6215: LD_INT 46
6217: PPUSH
6218: LD_INT 10
6220: PPUSH
6221: LD_INT 4
6223: PPUSH
6224: LD_INT 2
6226: PPUSH
6227: CALL 7491 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 22
6238: PUSH
6239: LD_INT 7
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 21
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 30
6258: PUSH
6259: LD_INT 32
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 58
6268: PUSH
6269: EMPTY
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 69
6282: PUSH
6283: FOR_IN
6284: IFFALSE 6331
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6286: LD_INT 7
6288: PPUSH
6289: LD_INT 1
6291: PUSH
6292: LD_INT 3
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 1
6301: PPUSH
6302: LD_INT 2
6304: PPUSH
6305: CALL_OW 12
6309: ARRAY
6310: PPUSH
6311: LD_VAR 0 2
6315: PPUSH
6316: LD_INT 10
6318: PPUSH
6319: LD_INT 1
6321: PPUSH
6322: LD_INT 1
6324: PPUSH
6325: CALL 7491 0 6
6329: GO 6283
6331: POP
6332: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6333: LD_INT 7
6335: PPUSH
6336: LD_INT 1
6338: PPUSH
6339: LD_INT 226
6341: PPUSH
6342: LD_INT 10
6344: PPUSH
6345: LD_INT 3
6347: PPUSH
6348: LD_INT 3
6350: PPUSH
6351: CALL 7491 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6355: LD_ADDR_EXP 57
6359: PUSH
6360: LD_INT 226
6362: PPUSH
6363: CALL_OW 313
6367: ST_TO_ADDR
// end ; end_of_file
6368: LD_VAR 0 1
6372: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6373: LD_INT 0
6375: PPUSH
6376: PPUSH
// if exist_mode then
6377: LD_VAR 0 2
6381: IFFALSE 6400
// unit := CreateCharacter ( ident ) else
6383: LD_ADDR_VAR 0 4
6387: PUSH
6388: LD_VAR 0 1
6392: PPUSH
6393: CALL_OW 34
6397: ST_TO_ADDR
6398: GO 6415
// unit := NewCharacter ( ident ) ;
6400: LD_ADDR_VAR 0 4
6404: PUSH
6405: LD_VAR 0 1
6409: PPUSH
6410: CALL_OW 25
6414: ST_TO_ADDR
// result := unit ;
6415: LD_ADDR_VAR 0 3
6419: PUSH
6420: LD_VAR 0 4
6424: ST_TO_ADDR
// end ;
6425: LD_VAR 0 3
6429: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6430: LD_INT 0
6432: PPUSH
6433: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6434: LD_STRING 13s_
6436: PUSH
6437: LD_VAR 0 1
6441: STR
6442: PPUSH
6443: CALL_OW 28
6447: PUSH
6448: LD_INT 1
6450: EQUAL
6451: IFFALSE 6472
// unit = CreateCharacter ( 13s_ & ident ) ;
6453: LD_ADDR_VAR 0 3
6457: PUSH
6458: LD_STRING 13s_
6460: PUSH
6461: LD_VAR 0 1
6465: STR
6466: PPUSH
6467: CALL_OW 34
6471: ST_TO_ADDR
// result := unit ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: LD_VAR 0 3
6481: ST_TO_ADDR
// end ;
6482: LD_VAR 0 2
6486: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6491: LD_STRING 15_
6493: PUSH
6494: LD_VAR 0 1
6498: STR
6499: PPUSH
6500: CALL_OW 28
6504: PUSH
6505: LD_INT 1
6507: EQUAL
6508: IFFALSE 6545
// begin unit = CreateCharacter ( 15_ & ident ) ;
6510: LD_ADDR_VAR 0 3
6514: PUSH
6515: LD_STRING 15_
6517: PUSH
6518: LD_VAR 0 1
6522: STR
6523: PPUSH
6524: CALL_OW 34
6528: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6529: LD_ADDR_EXP 20
6533: PUSH
6534: LD_EXP 20
6538: PUSH
6539: LD_VAR 0 3
6543: ADD
6544: ST_TO_ADDR
// end ; result := unit ;
6545: LD_ADDR_VAR 0 2
6549: PUSH
6550: LD_VAR 0 3
6554: ST_TO_ADDR
// end ;
6555: LD_VAR 0 2
6559: RET
// export function TabLenght ( tab ) ; var i ; begin
6560: LD_INT 0
6562: PPUSH
6563: PPUSH
// for i = 1 to tab do
6564: LD_ADDR_VAR 0 3
6568: PUSH
6569: DOUBLE
6570: LD_INT 1
6572: DEC
6573: ST_TO_ADDR
6574: LD_VAR 0 1
6578: PUSH
6579: FOR_TO
6580: IFFALSE 6594
// result = i ;
6582: LD_ADDR_VAR 0 2
6586: PUSH
6587: LD_VAR 0 3
6591: ST_TO_ADDR
6592: GO 6579
6594: POP
6595: POP
// end ;
6596: LD_VAR 0 2
6600: RET
// export function Video ( mode ) ; begin
6601: LD_INT 0
6603: PPUSH
// if mode = true then
6604: LD_VAR 0 1
6608: PUSH
6609: LD_INT 1
6611: EQUAL
6612: IFFALSE 6632
// begin ingame_video = true ;
6614: LD_ADDR_OWVAR 52
6618: PUSH
6619: LD_INT 1
6621: ST_TO_ADDR
// interface_hidden = true ;
6622: LD_ADDR_OWVAR 54
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// end else
6630: GO 6648
// begin ingame_video = false ;
6632: LD_ADDR_OWVAR 52
6636: PUSH
6637: LD_INT 0
6639: ST_TO_ADDR
// interface_hidden = false ;
6640: LD_ADDR_OWVAR 54
6644: PUSH
6645: LD_INT 0
6647: ST_TO_ADDR
// end ; end ;
6648: LD_VAR 0 2
6652: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6653: LD_INT 0
6655: PPUSH
6656: PPUSH
6657: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_VAR 0 1
6667: PUSH
6668: LD_EXP 1
6672: PUSH
6673: LD_EXP 3
6677: PUSH
6678: LD_EXP 21
6682: PUSH
6683: LD_EXP 22
6687: PUSH
6688: LD_EXP 23
6692: PUSH
6693: LD_EXP 4
6697: PUSH
6698: LD_EXP 5
6702: PUSH
6703: LD_EXP 6
6707: PUSH
6708: LD_EXP 7
6712: PUSH
6713: LD_EXP 8
6717: PUSH
6718: LD_EXP 9
6722: PUSH
6723: LD_EXP 10
6727: PUSH
6728: LD_EXP 11
6732: PUSH
6733: LD_EXP 12
6737: PUSH
6738: LD_EXP 13
6742: PUSH
6743: LD_EXP 14
6747: PUSH
6748: LD_EXP 15
6752: PUSH
6753: LD_EXP 17
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: DIFF
6778: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6779: LD_ADDR_VAR 0 6
6783: PUSH
6784: LD_INT 1
6786: PPUSH
6787: LD_VAR 0 1
6791: PPUSH
6792: CALL_OW 12
6796: ST_TO_ADDR
// for i = 1 to characters do
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: DOUBLE
6803: LD_INT 1
6805: DEC
6806: ST_TO_ADDR
6807: LD_VAR 0 1
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6923
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6815: LD_VAR 0 5
6819: PUSH
6820: LD_VAR 0 6
6824: EQUAL
6825: PUSH
6826: LD_VAR 0 1
6830: PUSH
6831: LD_VAR 0 5
6835: ARRAY
6836: PPUSH
6837: CALL_OW 258
6841: PUSH
6842: LD_INT 1
6844: EQUAL
6845: AND
6846: IFFALSE 6868
// Say ( characters [ i ] , dialogMID ) ;
6848: LD_VAR 0 1
6852: PUSH
6853: LD_VAR 0 5
6857: ARRAY
6858: PPUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6868: LD_VAR 0 5
6872: PUSH
6873: LD_VAR 0 6
6877: EQUAL
6878: PUSH
6879: LD_VAR 0 1
6883: PUSH
6884: LD_VAR 0 5
6888: ARRAY
6889: PPUSH
6890: CALL_OW 258
6894: PUSH
6895: LD_INT 2
6897: EQUAL
6898: AND
6899: IFFALSE 6921
// Say ( characters [ i ] , dialogFID ) ;
6901: LD_VAR 0 1
6905: PUSH
6906: LD_VAR 0 5
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 3
6916: PPUSH
6917: CALL_OW 88
// end ;
6921: GO 6812
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 4
6929: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
6930: LD_INT 0
6932: PPUSH
6933: PPUSH
6934: PPUSH
6935: PPUSH
// if not list then
6936: LD_VAR 0 1
6940: NOT
6941: IFFALSE 6945
// exit ;
6943: GO 7292
// result := [ ] ;
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: EMPTY
6951: ST_TO_ADDR
// for i in list do
6952: LD_ADDR_VAR 0 4
6956: PUSH
6957: LD_VAR 0 1
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7204
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
6965: LD_ADDR_VAR 0 6
6969: PUSH
6970: LD_VAR 0 4
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: CALL_OW 259
6982: PUSH
6983: LD_VAR 0 4
6987: PPUSH
6988: LD_INT 2
6990: PPUSH
6991: CALL_OW 259
6995: PLUS
6996: PUSH
6997: LD_VAR 0 4
7001: PPUSH
7002: LD_INT 3
7004: PPUSH
7005: CALL_OW 259
7009: PLUS
7010: PUSH
7011: LD_VAR 0 4
7015: PPUSH
7016: LD_INT 4
7018: PPUSH
7019: CALL_OW 259
7023: PLUS
7024: PUSH
7025: LD_INT 4
7027: DIV
7028: ST_TO_ADDR
// if not result then
7029: LD_VAR 0 3
7033: NOT
7034: IFFALSE 7060
// result := [ [ i , tmp ] ] else
7036: LD_ADDR_VAR 0 3
7040: PUSH
7041: LD_VAR 0 4
7045: PUSH
7046: LD_VAR 0 6
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: ST_TO_ADDR
7058: GO 7202
// begin if result [ result ] [ 2 ] <= tmp then
7060: LD_VAR 0 3
7064: PUSH
7065: LD_VAR 0 3
7069: ARRAY
7070: PUSH
7071: LD_INT 2
7073: ARRAY
7074: PUSH
7075: LD_VAR 0 6
7079: LESSEQUAL
7080: IFFALSE 7122
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: LD_VAR 0 3
7091: PPUSH
7092: LD_VAR 0 3
7096: PUSH
7097: LD_INT 1
7099: PLUS
7100: PPUSH
7101: LD_VAR 0 4
7105: PUSH
7106: LD_VAR 0 6
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 2
7119: ST_TO_ADDR
7120: GO 7202
// for j = 1 to result do
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: DOUBLE
7128: LD_INT 1
7130: DEC
7131: ST_TO_ADDR
7132: LD_VAR 0 3
7136: PUSH
7137: FOR_TO
7138: IFFALSE 7200
// begin if tmp < result [ j ] [ 2 ] then
7140: LD_VAR 0 6
7144: PUSH
7145: LD_VAR 0 3
7149: PUSH
7150: LD_VAR 0 5
7154: ARRAY
7155: PUSH
7156: LD_INT 2
7158: ARRAY
7159: LESS
7160: IFFALSE 7198
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7162: LD_ADDR_VAR 0 3
7166: PUSH
7167: LD_VAR 0 3
7171: PPUSH
7172: LD_VAR 0 5
7176: PPUSH
7177: LD_VAR 0 4
7181: PUSH
7182: LD_VAR 0 6
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PPUSH
7191: CALL_OW 2
7195: ST_TO_ADDR
// break ;
7196: GO 7200
// end ; end ;
7198: GO 7137
7200: POP
7201: POP
// end ; end ;
7202: GO 6962
7204: POP
7205: POP
// if result and not asc then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_VAR 0 2
7215: NOT
7216: AND
7217: IFFALSE 7292
// begin tmp := result ;
7219: LD_ADDR_VAR 0 6
7223: PUSH
7224: LD_VAR 0 3
7228: ST_TO_ADDR
// for i = tmp downto 1 do
7229: LD_ADDR_VAR 0 4
7233: PUSH
7234: DOUBLE
7235: LD_VAR 0 6
7239: INC
7240: ST_TO_ADDR
7241: LD_INT 1
7243: PUSH
7244: FOR_DOWNTO
7245: IFFALSE 7290
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 3
7256: PPUSH
7257: LD_VAR 0 6
7261: PUSH
7262: LD_VAR 0 4
7266: MINUS
7267: PUSH
7268: LD_INT 1
7270: PLUS
7271: PPUSH
7272: LD_VAR 0 6
7276: PUSH
7277: LD_VAR 0 4
7281: ARRAY
7282: PPUSH
7283: CALL_OW 1
7287: ST_TO_ADDR
7288: GO 7244
7290: POP
7291: POP
// end ; end ;
7292: LD_VAR 0 3
7296: RET
// export function PrepareDifficulty ; begin
7297: LD_INT 0
7299: PPUSH
// if difficulty = 1 then
7300: LD_OWVAR 67
7304: PUSH
7305: LD_INT 1
7307: EQUAL
7308: IFFALSE 7336
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7310: LD_INT 51
7312: PPUSH
7313: LD_INT 6
7315: PPUSH
7316: LD_INT 2
7318: PPUSH
7319: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7323: LD_INT 57
7325: PPUSH
7326: LD_INT 6
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: CALL_OW 322
// end ; if difficulty = 2 then
7336: LD_OWVAR 67
7340: PUSH
7341: LD_INT 2
7343: EQUAL
7344: IFFALSE 7398
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7346: LD_INT 51
7348: PPUSH
7349: LD_INT 6
7351: PPUSH
7352: LD_INT 2
7354: PPUSH
7355: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7359: LD_INT 57
7361: PPUSH
7362: LD_INT 6
7364: PPUSH
7365: LD_INT 2
7367: PPUSH
7368: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7372: LD_INT 52
7374: PPUSH
7375: LD_INT 6
7377: PPUSH
7378: LD_INT 2
7380: PPUSH
7381: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7385: LD_INT 58
7387: PPUSH
7388: LD_INT 6
7390: PPUSH
7391: LD_INT 2
7393: PPUSH
7394: CALL_OW 322
// end ; if difficulty = 3 then
7398: LD_OWVAR 67
7402: PUSH
7403: LD_INT 3
7405: EQUAL
7406: IFFALSE 7486
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7408: LD_INT 51
7410: PPUSH
7411: LD_INT 6
7413: PPUSH
7414: LD_INT 2
7416: PPUSH
7417: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7421: LD_INT 57
7423: PPUSH
7424: LD_INT 6
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7434: LD_INT 52
7436: PPUSH
7437: LD_INT 6
7439: PPUSH
7440: LD_INT 2
7442: PPUSH
7443: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7447: LD_INT 58
7449: PPUSH
7450: LD_INT 6
7452: PPUSH
7453: LD_INT 2
7455: PPUSH
7456: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7460: LD_INT 53
7462: PPUSH
7463: LD_INT 6
7465: PPUSH
7466: LD_INT 2
7468: PPUSH
7469: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7473: LD_INT 59
7475: PPUSH
7476: LD_INT 6
7478: PPUSH
7479: LD_INT 2
7481: PPUSH
7482: CALL_OW 322
// end ; end ;
7486: LD_VAR 0 1
7490: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7491: LD_INT 0
7493: PPUSH
7494: PPUSH
7495: PPUSH
7496: PPUSH
7497: PPUSH
// for i = 1 to count do
7498: LD_ADDR_VAR 0 8
7502: PUSH
7503: DOUBLE
7504: LD_INT 1
7506: DEC
7507: ST_TO_ADDR
7508: LD_VAR 0 6
7512: PUSH
7513: FOR_TO
7514: IFFALSE 7595
// begin uc_side = side ;
7516: LD_ADDR_OWVAR 20
7520: PUSH
7521: LD_VAR 0 1
7525: ST_TO_ADDR
// uc_nation = nation ;
7526: LD_ADDR_OWVAR 21
7530: PUSH
7531: LD_VAR 0 2
7535: ST_TO_ADDR
// hc_gallery =  ;
7536: LD_ADDR_OWVAR 33
7540: PUSH
7541: LD_STRING 
7543: ST_TO_ADDR
// hc_name =  ;
7544: LD_ADDR_OWVAR 26
7548: PUSH
7549: LD_STRING 
7551: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7552: LD_INT 0
7554: PPUSH
7555: LD_VAR 0 5
7559: PPUSH
7560: LD_VAR 0 4
7564: PPUSH
7565: CALL_OW 380
// un = CreateHuman ;
7569: LD_ADDR_VAR 0 10
7573: PUSH
7574: CALL_OW 44
7578: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7579: LD_VAR 0 10
7583: PPUSH
7584: LD_VAR 0 3
7588: PPUSH
7589: CALL_OW 52
// end ;
7593: GO 7513
7595: POP
7596: POP
// end ;
7597: LD_VAR 0 7
7601: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7602: LD_INT 0
7604: PPUSH
7605: PPUSH
7606: PPUSH
7607: PPUSH
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7615: LD_INT 2100
7617: PUSH
7618: LD_INT 3150
7620: PUSH
7621: LD_INT 4200
7623: PUSH
7624: LD_INT 5250
7626: PUSH
7627: LD_INT 6300
7629: PUSH
7630: LD_INT 7350
7632: PUSH
7633: LD_INT 8400
7635: PUSH
7636: LD_INT 9450
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 1
7651: PPUSH
7652: LD_INT 8
7654: PPUSH
7655: CALL_OW 12
7659: ARRAY
7660: PPUSH
7661: CALL_OW 67
// amChassisTab = [ ] ;
7665: LD_ADDR_VAR 0 19
7669: PUSH
7670: EMPTY
7671: ST_TO_ADDR
// arChassisTab = [ ] ;
7672: LD_ADDR_VAR 0 18
7676: PUSH
7677: EMPTY
7678: ST_TO_ADDR
// ruChassisTab = [ ] ;
7679: LD_ADDR_VAR 0 17
7683: PUSH
7684: EMPTY
7685: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7686: LD_INT 35
7688: PPUSH
7689: CALL_OW 67
// if nation = 1 then
7693: LD_VAR 0 5
7697: PUSH
7698: LD_INT 1
7700: EQUAL
7701: IFFALSE 8192
// begin uc_side = side ;
7703: LD_ADDR_OWVAR 20
7707: PUSH
7708: LD_VAR 0 2
7712: ST_TO_ADDR
// uc_nation = nation ;
7713: LD_ADDR_OWVAR 21
7717: PUSH
7718: LD_VAR 0 5
7722: ST_TO_ADDR
// vc_engine = vehengine ;
7723: LD_ADDR_OWVAR 39
7727: PUSH
7728: LD_VAR 0 6
7732: ST_TO_ADDR
// vc_control = vehcontrol ;
7733: LD_ADDR_OWVAR 38
7737: PUSH
7738: LD_VAR 0 7
7742: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7743: LD_ADDR_OWVAR 40
7747: PUSH
7748: LD_VAR 0 10
7752: PUSH
7753: LD_INT 1
7755: PPUSH
7756: LD_VAR 0 10
7760: PPUSH
7761: CALL_OW 12
7765: ARRAY
7766: ST_TO_ADDR
// for j = 1 to AMWeapon do
7767: LD_ADDR_VAR 0 14
7771: PUSH
7772: DOUBLE
7773: LD_INT 1
7775: DEC
7776: ST_TO_ADDR
7777: LD_VAR 0 10
7781: PUSH
7782: FOR_TO
7783: IFFALSE 8084
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
7785: LD_VAR 0 10
7789: PUSH
7790: LD_VAR 0 14
7794: ARRAY
7795: PUSH
7796: LD_INT 2
7798: EQUAL
7799: PUSH
7800: LD_VAR 0 10
7804: PUSH
7805: LD_VAR 0 14
7809: ARRAY
7810: PUSH
7811: LD_INT 3
7813: EQUAL
7814: OR
7815: IFFALSE 7868
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7817: LD_ADDR_VAR 0 19
7821: PUSH
7822: LD_INT 1
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 3
7830: PUSH
7831: LD_INT 4
7833: PUSH
7834: LD_INT 5
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7844: LD_ADDR_OWVAR 37
7848: PUSH
7849: LD_VAR 0 19
7853: PUSH
7854: LD_INT 1
7856: PPUSH
7857: LD_VAR 0 19
7861: PPUSH
7862: CALL_OW 12
7866: ARRAY
7867: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
7868: LD_VAR 0 10
7872: PUSH
7873: LD_VAR 0 14
7877: ARRAY
7878: PUSH
7879: LD_INT 4
7881: EQUAL
7882: PUSH
7883: LD_VAR 0 10
7887: PUSH
7888: LD_VAR 0 14
7892: ARRAY
7893: PUSH
7894: LD_INT 5
7896: EQUAL
7897: OR
7898: PUSH
7899: LD_VAR 0 10
7903: PUSH
7904: LD_VAR 0 14
7908: ARRAY
7909: PUSH
7910: LD_INT 9
7912: EQUAL
7913: OR
7914: PUSH
7915: LD_VAR 0 10
7919: PUSH
7920: LD_VAR 0 14
7924: ARRAY
7925: PUSH
7926: LD_INT 11
7928: EQUAL
7929: OR
7930: PUSH
7931: LD_VAR 0 10
7935: PUSH
7936: LD_VAR 0 14
7940: ARRAY
7941: PUSH
7942: LD_INT 7
7944: EQUAL
7945: OR
7946: IFFALSE 7995
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7948: LD_ADDR_VAR 0 19
7952: PUSH
7953: LD_INT 2
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: LD_INT 5
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7971: LD_ADDR_OWVAR 37
7975: PUSH
7976: LD_VAR 0 19
7980: PUSH
7981: LD_INT 1
7983: PPUSH
7984: LD_VAR 0 19
7988: PPUSH
7989: CALL_OW 12
7993: ARRAY
7994: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
7995: LD_VAR 0 10
7999: PUSH
8000: LD_VAR 0 14
8004: ARRAY
8005: PUSH
8006: LD_INT 8
8008: EQUAL
8009: PUSH
8010: LD_VAR 0 10
8014: PUSH
8015: LD_VAR 0 14
8019: ARRAY
8020: PUSH
8021: LD_INT 6
8023: EQUAL
8024: OR
8025: PUSH
8026: LD_VAR 0 10
8030: PUSH
8031: LD_VAR 0 14
8035: ARRAY
8036: PUSH
8037: LD_INT 10
8039: EQUAL
8040: OR
8041: IFFALSE 8082
// begin amChassisTab = [ 4 , 5 ] ;
8043: LD_ADDR_VAR 0 19
8047: PUSH
8048: LD_INT 4
8050: PUSH
8051: LD_INT 5
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8058: LD_ADDR_OWVAR 37
8062: PUSH
8063: LD_VAR 0 19
8067: PUSH
8068: LD_INT 1
8070: PPUSH
8071: LD_VAR 0 19
8075: PPUSH
8076: CALL_OW 12
8080: ARRAY
8081: ST_TO_ADDR
// end ; end ;
8082: GO 7782
8084: POP
8085: POP
// veh = CreateVehicle ;
8086: LD_ADDR_VAR 0 16
8090: PUSH
8091: CALL_OW 45
8095: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8096: LD_VAR 0 16
8100: PPUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_INT 0
8108: PPUSH
8109: CALL_OW 49
// if vc_control = 1 then
8113: LD_OWVAR 38
8117: PUSH
8118: LD_INT 1
8120: EQUAL
8121: IFFALSE 8178
// begin hc_gallery =  ;
8123: LD_ADDR_OWVAR 33
8127: PUSH
8128: LD_STRING 
8130: ST_TO_ADDR
// hc_name =  ;
8131: LD_ADDR_OWVAR 26
8135: PUSH
8136: LD_STRING 
8138: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8139: LD_INT 0
8141: PPUSH
8142: LD_INT 3
8144: PPUSH
8145: LD_VAR 0 4
8149: PPUSH
8150: CALL_OW 380
// un = CreateHuman ;
8154: LD_ADDR_VAR 0 15
8158: PUSH
8159: CALL_OW 44
8163: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8164: LD_VAR 0 15
8168: PPUSH
8169: LD_VAR 0 16
8173: PPUSH
8174: CALL_OW 52
// end ; i = i + 1 ;
8178: LD_ADDR_VAR 0 13
8182: PUSH
8183: LD_VAR 0 13
8187: PUSH
8188: LD_INT 1
8190: PLUS
8191: ST_TO_ADDR
// end ; if nation = 2 then
8192: LD_VAR 0 5
8196: PUSH
8197: LD_INT 2
8199: EQUAL
8200: IFFALSE 8624
// begin uc_side = side ;
8202: LD_ADDR_OWVAR 20
8206: PUSH
8207: LD_VAR 0 2
8211: ST_TO_ADDR
// uc_nation = nation ;
8212: LD_ADDR_OWVAR 21
8216: PUSH
8217: LD_VAR 0 5
8221: ST_TO_ADDR
// vc_engine = vehengine ;
8222: LD_ADDR_OWVAR 39
8226: PUSH
8227: LD_VAR 0 6
8231: ST_TO_ADDR
// vc_control = vehcontrol ;
8232: LD_ADDR_OWVAR 38
8236: PUSH
8237: LD_VAR 0 7
8241: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8242: LD_ADDR_OWVAR 40
8246: PUSH
8247: LD_VAR 0 9
8251: PUSH
8252: LD_INT 1
8254: PPUSH
8255: LD_VAR 0 9
8259: PPUSH
8260: CALL_OW 12
8264: ARRAY
8265: ST_TO_ADDR
// for j = 1 to ARWeapons do
8266: LD_ADDR_VAR 0 14
8270: PUSH
8271: DOUBLE
8272: LD_INT 1
8274: DEC
8275: ST_TO_ADDR
8276: LD_VAR 0 9
8280: PUSH
8281: FOR_TO
8282: IFFALSE 8516
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8284: LD_VAR 0 9
8288: PUSH
8289: LD_VAR 0 14
8293: ARRAY
8294: PUSH
8295: LD_INT 24
8297: EQUAL
8298: PUSH
8299: LD_VAR 0 9
8303: PUSH
8304: LD_VAR 0 14
8308: ARRAY
8309: PUSH
8310: LD_INT 22
8312: EQUAL
8313: OR
8314: PUSH
8315: LD_VAR 0 9
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PUSH
8326: LD_INT 23
8328: EQUAL
8329: OR
8330: PUSH
8331: LD_VAR 0 9
8335: PUSH
8336: LD_VAR 0 14
8340: ARRAY
8341: PUSH
8342: LD_INT 30
8344: EQUAL
8345: OR
8346: IFFALSE 8395
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8348: LD_ADDR_VAR 0 18
8352: PUSH
8353: LD_INT 11
8355: PUSH
8356: LD_INT 12
8358: PUSH
8359: LD_INT 13
8361: PUSH
8362: LD_INT 14
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8371: LD_ADDR_OWVAR 37
8375: PUSH
8376: LD_VAR 0 18
8380: PUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_VAR 0 18
8388: PPUSH
8389: CALL_OW 12
8393: ARRAY
8394: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8395: LD_VAR 0 9
8399: PUSH
8400: LD_VAR 0 14
8404: ARRAY
8405: PUSH
8406: LD_INT 29
8408: EQUAL
8409: PUSH
8410: LD_VAR 0 9
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PUSH
8421: LD_INT 28
8423: EQUAL
8424: OR
8425: PUSH
8426: LD_VAR 0 9
8430: PUSH
8431: LD_VAR 0 14
8435: ARRAY
8436: PUSH
8437: LD_INT 27
8439: EQUAL
8440: OR
8441: PUSH
8442: LD_VAR 0 9
8446: PUSH
8447: LD_VAR 0 14
8451: ARRAY
8452: PUSH
8453: LD_INT 26
8455: EQUAL
8456: OR
8457: PUSH
8458: LD_VAR 0 9
8462: PUSH
8463: LD_VAR 0 14
8467: ARRAY
8468: PUSH
8469: LD_INT 25
8471: EQUAL
8472: OR
8473: IFFALSE 8514
// begin arChassisTab = [ 13 , 14 ] ;
8475: LD_ADDR_VAR 0 18
8479: PUSH
8480: LD_INT 13
8482: PUSH
8483: LD_INT 14
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8490: LD_ADDR_OWVAR 37
8494: PUSH
8495: LD_VAR 0 18
8499: PUSH
8500: LD_INT 1
8502: PPUSH
8503: LD_VAR 0 18
8507: PPUSH
8508: CALL_OW 12
8512: ARRAY
8513: ST_TO_ADDR
// end ; end ;
8514: GO 8281
8516: POP
8517: POP
// veh = CreateVehicle ;
8518: LD_ADDR_VAR 0 16
8522: PUSH
8523: CALL_OW 45
8527: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8528: LD_VAR 0 16
8532: PPUSH
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_INT 0
8540: PPUSH
8541: CALL_OW 49
// if vc_control = 1 then
8545: LD_OWVAR 38
8549: PUSH
8550: LD_INT 1
8552: EQUAL
8553: IFFALSE 8610
// begin hc_gallery =  ;
8555: LD_ADDR_OWVAR 33
8559: PUSH
8560: LD_STRING 
8562: ST_TO_ADDR
// hc_name =  ;
8563: LD_ADDR_OWVAR 26
8567: PUSH
8568: LD_STRING 
8570: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8571: LD_INT 0
8573: PPUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_VAR 0 4
8581: PPUSH
8582: CALL_OW 380
// un = CreateHuman ;
8586: LD_ADDR_VAR 0 15
8590: PUSH
8591: CALL_OW 44
8595: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8596: LD_VAR 0 15
8600: PPUSH
8601: LD_VAR 0 16
8605: PPUSH
8606: CALL_OW 52
// end ; i = i + 1 ;
8610: LD_ADDR_VAR 0 13
8614: PUSH
8615: LD_VAR 0 13
8619: PUSH
8620: LD_INT 1
8622: PLUS
8623: ST_TO_ADDR
// end ; if nation = 3 then
8624: LD_VAR 0 5
8628: PUSH
8629: LD_INT 3
8631: EQUAL
8632: IFFALSE 9008
// begin uc_side = side ;
8634: LD_ADDR_OWVAR 20
8638: PUSH
8639: LD_VAR 0 2
8643: ST_TO_ADDR
// uc_nation = nation ;
8644: LD_ADDR_OWVAR 21
8648: PUSH
8649: LD_VAR 0 5
8653: ST_TO_ADDR
// vc_engine = vehengine ;
8654: LD_ADDR_OWVAR 39
8658: PUSH
8659: LD_VAR 0 6
8663: ST_TO_ADDR
// vc_control = vehcontrol ;
8664: LD_ADDR_OWVAR 38
8668: PUSH
8669: LD_VAR 0 7
8673: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8674: LD_ADDR_OWVAR 40
8678: PUSH
8679: LD_VAR 0 8
8683: PUSH
8684: LD_INT 1
8686: PPUSH
8687: LD_VAR 0 8
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// for j = 1 to RuWeapons do
8698: LD_ADDR_VAR 0 14
8702: PUSH
8703: DOUBLE
8704: LD_INT 1
8706: DEC
8707: ST_TO_ADDR
8708: LD_VAR 0 8
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8900
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8716: LD_VAR 0 8
8720: PUSH
8721: LD_VAR 0 14
8725: ARRAY
8726: PUSH
8727: LD_INT 42
8729: EQUAL
8730: PUSH
8731: LD_VAR 0 8
8735: PUSH
8736: LD_VAR 0 14
8740: ARRAY
8741: PUSH
8742: LD_INT 43
8744: EQUAL
8745: OR
8746: PUSH
8747: LD_VAR 0 8
8751: PUSH
8752: LD_VAR 0 14
8756: ARRAY
8757: PUSH
8758: LD_INT 44
8760: EQUAL
8761: OR
8762: PUSH
8763: LD_VAR 0 8
8767: PUSH
8768: LD_VAR 0 14
8772: ARRAY
8773: PUSH
8774: LD_INT 45
8776: EQUAL
8777: OR
8778: PUSH
8779: LD_VAR 0 8
8783: PUSH
8784: LD_VAR 0 14
8788: ARRAY
8789: PUSH
8790: LD_INT 49
8792: EQUAL
8793: OR
8794: IFFALSE 8831
// begin ruChassisTab = [ 24 ] ;
8796: LD_ADDR_VAR 0 17
8800: PUSH
8801: LD_INT 24
8803: PUSH
8804: EMPTY
8805: LIST
8806: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8807: LD_ADDR_OWVAR 37
8811: PUSH
8812: LD_VAR 0 17
8816: PUSH
8817: LD_INT 1
8819: PPUSH
8820: LD_VAR 0 17
8824: PPUSH
8825: CALL_OW 12
8829: ARRAY
8830: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
8831: LD_VAR 0 8
8835: PUSH
8836: LD_VAR 0 14
8840: ARRAY
8841: PUSH
8842: LD_INT 46
8844: EQUAL
8845: PUSH
8846: LD_VAR 0 8
8850: PUSH
8851: LD_VAR 0 14
8855: ARRAY
8856: PUSH
8857: LD_INT 47
8859: EQUAL
8860: OR
8861: IFFALSE 8898
// begin ruChassisTab = [ 24 ] ;
8863: LD_ADDR_VAR 0 17
8867: PUSH
8868: LD_INT 24
8870: PUSH
8871: EMPTY
8872: LIST
8873: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8874: LD_ADDR_OWVAR 37
8878: PUSH
8879: LD_VAR 0 17
8883: PUSH
8884: LD_INT 1
8886: PPUSH
8887: LD_VAR 0 17
8891: PPUSH
8892: CALL_OW 12
8896: ARRAY
8897: ST_TO_ADDR
// end ; end ;
8898: GO 8713
8900: POP
8901: POP
// veh = CreateVehicle ;
8902: LD_ADDR_VAR 0 16
8906: PUSH
8907: CALL_OW 45
8911: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8912: LD_VAR 0 16
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: LD_INT 0
8924: PPUSH
8925: CALL_OW 49
// if vc_control = 1 then
8929: LD_OWVAR 38
8933: PUSH
8934: LD_INT 1
8936: EQUAL
8937: IFFALSE 8994
// begin hc_gallery =  ;
8939: LD_ADDR_OWVAR 33
8943: PUSH
8944: LD_STRING 
8946: ST_TO_ADDR
// hc_name =  ;
8947: LD_ADDR_OWVAR 26
8951: PUSH
8952: LD_STRING 
8954: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8955: LD_INT 0
8957: PPUSH
8958: LD_INT 3
8960: PPUSH
8961: LD_VAR 0 4
8965: PPUSH
8966: CALL_OW 380
// un = CreateHuman ;
8970: LD_ADDR_VAR 0 15
8974: PUSH
8975: CALL_OW 44
8979: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8980: LD_VAR 0 15
8984: PPUSH
8985: LD_VAR 0 16
8989: PPUSH
8990: CALL_OW 52
// end ; i = i + 1 ;
8994: LD_ADDR_VAR 0 13
8998: PUSH
8999: LD_VAR 0 13
9003: PUSH
9004: LD_INT 1
9006: PLUS
9007: ST_TO_ADDR
// end ; until i = vehCount ;
9008: LD_VAR 0 13
9012: PUSH
9013: LD_VAR 0 3
9017: EQUAL
9018: IFFALSE 7686
// repeat wait ( 0 0$1 ) ;
9020: LD_INT 35
9022: PPUSH
9023: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9027: LD_ADDR_VAR 0 20
9031: PUSH
9032: LD_INT 22
9034: PUSH
9035: LD_VAR 0 2
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 21
9046: PUSH
9047: LD_INT 2
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 24
9056: PUSH
9057: LD_INT 250
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: PPUSH
9069: CALL_OW 69
9073: ST_TO_ADDR
// if vehicleOK_list > 0 then
9074: LD_VAR 0 20
9078: PUSH
9079: LD_INT 0
9081: GREATER
9082: IFFALSE 9273
// begin for i in vehicleOK_list do
9084: LD_ADDR_VAR 0 13
9088: PUSH
9089: LD_VAR 0 20
9093: PUSH
9094: FOR_IN
9095: IFFALSE 9271
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9097: LD_ADDR_VAR 0 21
9101: PUSH
9102: LD_INT 22
9104: PUSH
9105: LD_VAR 0 11
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PPUSH
9114: CALL_OW 69
9118: PPUSH
9119: LD_VAR 0 13
9123: PPUSH
9124: CALL_OW 74
9128: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9129: LD_ADDR_VAR 0 22
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_VAR 0 11
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 2
9148: PUSH
9149: LD_INT 59
9151: PUSH
9152: EMPTY
9153: LIST
9154: PUSH
9155: LD_INT 21
9157: PUSH
9158: LD_INT 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 21
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: EMPTY
9186: LIST
9187: PPUSH
9188: CALL_OW 69
9192: PPUSH
9193: LD_VAR 0 13
9197: PPUSH
9198: CALL_OW 74
9202: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9203: LD_VAR 0 13
9207: PPUSH
9208: LD_VAR 0 21
9212: PPUSH
9213: CALL_OW 296
9217: PUSH
9218: LD_INT 8
9220: PLUS
9221: PUSH
9222: LD_VAR 0 13
9226: PPUSH
9227: LD_VAR 0 22
9231: PPUSH
9232: CALL_OW 296
9236: LESS
9237: IFFALSE 9255
// begin ComAttackUnit ( i , target1 ) ;
9239: LD_VAR 0 13
9243: PPUSH
9244: LD_VAR 0 21
9248: PPUSH
9249: CALL_OW 115
// end else
9253: GO 9269
// begin ComAttackUnit ( i , target2 ) ;
9255: LD_VAR 0 13
9259: PPUSH
9260: LD_VAR 0 22
9264: PPUSH
9265: CALL_OW 115
// end ; end ;
9269: GO 9094
9271: POP
9272: POP
// end ; until vehicleOK_list = [ ] ;
9273: LD_VAR 0 20
9277: PUSH
9278: EMPTY
9279: EQUAL
9280: IFFALSE 9020
// end ;
9282: LD_VAR 0 12
9286: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9287: LD_INT 0
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
// for i = 1 to 72 do
9293: LD_ADDR_VAR 0 5
9297: PUSH
9298: DOUBLE
9299: LD_INT 1
9301: DEC
9302: ST_TO_ADDR
9303: LD_INT 72
9305: PUSH
9306: FOR_TO
9307: IFFALSE 9365
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9309: LD_VAR 0 5
9313: PPUSH
9314: LD_VAR 0 1
9318: PPUSH
9319: CALL_OW 321
9323: PUSH
9324: LD_INT 1
9326: EQUAL
9327: PUSH
9328: LD_VAR 0 5
9332: PPUSH
9333: LD_VAR 0 3
9337: PPUSH
9338: CALL_OW 482
9342: PUSH
9343: LD_INT 1
9345: EQUAL
9346: AND
9347: IFFALSE 9363
// AddComResearch ( lab , i ) ;
9349: LD_VAR 0 2
9353: PPUSH
9354: LD_VAR 0 5
9358: PPUSH
9359: CALL_OW 184
9363: GO 9306
9365: POP
9366: POP
// end ;
9367: LD_VAR 0 4
9371: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9372: LD_INT 0
9374: PPUSH
9375: PPUSH
9376: PPUSH
9377: PPUSH
9378: PPUSH
9379: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9380: LD_ADDR_VAR 0 8
9384: PUSH
9385: LD_VAR 0 2
9389: PPUSH
9390: CALL_OW 313
9394: PUSH
9395: LD_EXP 35
9399: PUSH
9400: EMPTY
9401: LIST
9402: DIFF
9403: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9404: LD_ADDR_VAR 0 9
9408: PUSH
9409: LD_VAR 0 3
9413: PPUSH
9414: LD_INT 22
9416: PUSH
9417: LD_VAR 0 1
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 25
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 24
9438: PUSH
9439: LD_INT 750
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: LD_INT 54
9451: PUSH
9452: EMPTY
9453: LIST
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: PPUSH
9465: CALL_OW 70
9469: PUSH
9470: LD_EXP 35
9474: PUSH
9475: EMPTY
9476: LIST
9477: DIFF
9478: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9479: LD_ADDR_VAR 0 6
9483: PUSH
9484: LD_VAR 0 3
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 21
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 3
9513: PUSH
9514: LD_INT 24
9516: PUSH
9517: LD_INT 1000
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: PPUSH
9536: CALL_OW 70
9540: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9541: LD_VAR 0 6
9545: NOT
9546: PUSH
9547: LD_INT 22
9549: PUSH
9550: LD_VAR 0 1
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 25
9561: PUSH
9562: LD_INT 2
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 24
9571: PUSH
9572: LD_INT 250
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL_OW 69
9588: NOT
9589: AND
9590: IFFALSE 9594
// exit ;
9592: GO 9776
// if buildings_list > 0 and engineerOkInside then
9594: LD_VAR 0 6
9598: PUSH
9599: LD_INT 0
9601: GREATER
9602: PUSH
9603: LD_VAR 0 8
9607: AND
9608: IFFALSE 9619
// ComExitBuilding ( engineerOkInside ) ;
9610: LD_VAR 0 8
9614: PPUSH
9615: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9619: LD_VAR 0 6
9623: PUSH
9624: LD_INT 0
9626: GREATER
9627: PUSH
9628: LD_VAR 0 9
9632: PUSH
9633: LD_INT 0
9635: GREATER
9636: AND
9637: IFFALSE 9657
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9639: LD_VAR 0 9
9643: PPUSH
9644: LD_VAR 0 6
9648: PUSH
9649: LD_INT 1
9651: ARRAY
9652: PPUSH
9653: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9657: LD_VAR 0 6
9661: PUSH
9662: LD_INT 0
9664: EQUAL
9665: PUSH
9666: LD_VAR 0 4
9670: PUSH
9671: LD_INT 0
9673: EQUAL
9674: AND
9675: PUSH
9676: LD_VAR 0 9
9680: PUSH
9681: LD_INT 0
9683: GREATER
9684: AND
9685: IFFALSE 9701
// ComEnterUnit ( engineerOkOutside , building ) ;
9687: LD_VAR 0 9
9691: PPUSH
9692: LD_VAR 0 2
9696: PPUSH
9697: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9701: LD_VAR 0 9
9705: PUSH
9706: LD_INT 0
9708: GREATER
9709: PUSH
9710: LD_VAR 0 6
9714: PUSH
9715: LD_INT 0
9717: EQUAL
9718: AND
9719: PUSH
9720: LD_VAR 0 4
9724: PUSH
9725: LD_INT 0
9727: GREATER
9728: AND
9729: IFFALSE 9776
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9731: LD_VAR 0 9
9735: PPUSH
9736: LD_VAR 0 4
9740: PUSH
9741: LD_INT 1
9743: ARRAY
9744: PPUSH
9745: LD_VAR 0 4
9749: PUSH
9750: LD_INT 2
9752: ARRAY
9753: PPUSH
9754: LD_VAR 0 4
9758: PUSH
9759: LD_INT 3
9761: ARRAY
9762: PPUSH
9763: LD_VAR 0 4
9767: PUSH
9768: LD_INT 4
9770: ARRAY
9771: PPUSH
9772: CALL_OW 145
// end ;
9776: LD_VAR 0 5
9780: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
9781: LD_INT 0
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
9790: PPUSH
9791: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
9792: LD_ADDR_VAR 0 6
9796: PUSH
9797: LD_INT 22
9799: PUSH
9800: LD_VAR 0 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: LD_INT 25
9811: PUSH
9812: LD_INT 4
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 23
9821: PUSH
9822: LD_INT 2
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 24
9831: PUSH
9832: LD_INT 251
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 69
9849: PUSH
9850: LD_EXP 35
9854: PUSH
9855: EMPTY
9856: LIST
9857: DIFF
9858: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
9859: LD_ADDR_VAR 0 7
9863: PUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_INT 22
9871: PUSH
9872: LD_VAR 0 1
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 23
9883: PUSH
9884: LD_INT 2
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: LD_INT 25
9893: PUSH
9894: LD_INT 4
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 50
9903: PUSH
9904: EMPTY
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 70
9917: PUSH
9918: LD_EXP 35
9922: PUSH
9923: EMPTY
9924: LIST
9925: DIFF
9926: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9927: LD_ADDR_VAR 0 10
9931: PUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 22
9939: PUSH
9940: LD_VAR 0 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 21
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 3
9961: PUSH
9962: LD_INT 25
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 3
9978: PUSH
9979: LD_INT 24
9981: PUSH
9982: LD_INT 750
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: PPUSH
9999: CALL_OW 70
10003: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10004: LD_ADDR_VAR 0 11
10008: PUSH
10009: LD_VAR 0 2
10013: PPUSH
10014: LD_INT 22
10016: PUSH
10017: LD_VAR 0 1
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 21
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 3
10038: PUSH
10039: LD_INT 25
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 24
10058: PUSH
10059: LD_INT 1000
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 70
10080: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10081: LD_VAR 0 10
10085: NOT
10086: PUSH
10087: LD_VAR 0 11
10091: NOT
10092: AND
10093: PUSH
10094: LD_VAR 0 6
10098: NOT
10099: AND
10100: IFFALSE 10104
// exit ;
10102: GO 10338
// if damageUnits > 0 and sci_list > 0 then
10104: LD_VAR 0 10
10108: PUSH
10109: LD_INT 0
10111: GREATER
10112: PUSH
10113: LD_VAR 0 6
10117: PUSH
10118: LD_INT 0
10120: GREATER
10121: AND
10122: IFFALSE 10138
// ComMoveToArea ( damageUnits , healArea ) ;
10124: LD_VAR 0 10
10128: PPUSH
10129: LD_VAR 0 2
10133: PPUSH
10134: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10138: LD_VAR 0 11
10142: PUSH
10143: LD_INT 0
10145: GREATER
10146: PUSH
10147: LD_VAR 0 6
10151: PUSH
10152: LD_INT 0
10154: GREATER
10155: AND
10156: IFFALSE 10167
// ComExitBuilding ( sci_list ) ;
10158: LD_VAR 0 6
10162: PPUSH
10163: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10167: LD_VAR 0 11
10171: PUSH
10172: LD_INT 0
10174: GREATER
10175: PUSH
10176: LD_VAR 0 7
10180: PUSH
10181: LD_INT 0
10183: GREATER
10184: AND
10185: IFFALSE 10205
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10187: LD_VAR 0 7
10191: PPUSH
10192: LD_VAR 0 11
10196: PUSH
10197: LD_INT 1
10199: ARRAY
10200: PPUSH
10201: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10205: LD_VAR 0 10
10209: PUSH
10210: LD_INT 0
10212: EQUAL
10213: PUSH
10214: LD_VAR 0 11
10218: PUSH
10219: LD_INT 0
10221: EQUAL
10222: AND
10223: PUSH
10224: LD_VAR 0 7
10228: PUSH
10229: LD_INT 0
10231: GREATER
10232: AND
10233: IFFALSE 10338
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10235: LD_ADDR_VAR 0 12
10239: PUSH
10240: LD_INT 22
10242: PUSH
10243: LD_VAR 0 1
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 21
10254: PUSH
10255: LD_INT 3
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 30
10264: PUSH
10265: LD_INT 8
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10282: LD_ADDR_VAR 0 13
10286: PUSH
10287: LD_INT 1
10289: PPUSH
10290: LD_VAR 0 12
10294: PPUSH
10295: CALL_OW 12
10299: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10300: LD_VAR 0 7
10304: PPUSH
10305: LD_INT 3
10307: PUSH
10308: LD_INT 60
10310: PUSH
10311: EMPTY
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 72
10322: PPUSH
10323: LD_VAR 0 12
10327: PUSH
10328: LD_VAR 0 13
10332: ARRAY
10333: PPUSH
10334: CALL_OW 120
// end ; end ;
10338: LD_VAR 0 5
10342: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10343: LD_INT 0
10345: PPUSH
10346: PPUSH
10347: PPUSH
10348: PPUSH
// tmpTab = [ ] ;
10349: LD_ADDR_VAR 0 6
10353: PUSH
10354: EMPTY
10355: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10356: LD_INT 22
10358: PUSH
10359: LD_VAR 0 1
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 30
10370: PUSH
10371: LD_INT 32
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 69
10386: PUSH
10387: LD_INT 0
10389: GREATER
10390: IFFALSE 10473
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10392: LD_ADDR_VAR 0 4
10396: PUSH
10397: LD_INT 22
10399: PUSH
10400: LD_VAR 0 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 30
10411: PUSH
10412: LD_INT 32
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10471
// begin for j in UnitsInside ( i ) do
10431: LD_ADDR_VAR 0 5
10435: PUSH
10436: LD_VAR 0 4
10440: PPUSH
10441: CALL_OW 313
10445: PUSH
10446: FOR_IN
10447: IFFALSE 10467
// tmpTab = tmpTab ^ j ;
10449: LD_ADDR_VAR 0 6
10453: PUSH
10454: LD_VAR 0 6
10458: PUSH
10459: LD_VAR 0 5
10463: ADD
10464: ST_TO_ADDR
10465: GO 10446
10467: POP
10468: POP
// end ;
10469: GO 10428
10471: POP
10472: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10473: LD_VAR 0 6
10477: PPUSH
10478: LD_VAR 0 2
10482: PPUSH
10483: CALL_OW 250
10487: PPUSH
10488: LD_VAR 0 2
10492: PPUSH
10493: CALL_OW 251
10497: PPUSH
10498: CALL_OW 114
// end ;
10502: LD_VAR 0 3
10506: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
10507: LD_INT 0
10509: PPUSH
10510: PPUSH
10511: PPUSH
10512: PPUSH
10513: PPUSH
10514: PPUSH
10515: PPUSH
10516: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
10517: LD_ADDR_VAR 0 6
10521: PUSH
10522: LD_VAR 0 2
10526: PPUSH
10527: LD_INT 22
10529: PUSH
10530: LD_VAR 0 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 56
10541: PUSH
10542: EMPTY
10543: LIST
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: LD_INT 700
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: LD_INT 60
10560: PUSH
10561: EMPTY
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 2
10570: PUSH
10571: LD_INT 25
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 25
10583: PUSH
10584: LD_INT 5
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 25
10593: PUSH
10594: LD_INT 8
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 25
10603: PUSH
10604: LD_INT 9
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 70
10629: PUSH
10630: LD_EXP 26
10634: PUSH
10635: LD_EXP 27
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: DIFF
10644: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
10645: LD_ADDR_VAR 0 7
10649: PUSH
10650: LD_VAR 0 2
10654: PPUSH
10655: LD_INT 22
10657: PUSH
10658: LD_VAR 0 1
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 30
10669: PUSH
10670: LD_INT 32
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 58
10679: PUSH
10680: EMPTY
10681: LIST
10682: PUSH
10683: LD_INT 24
10685: PUSH
10686: LD_INT 251
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 70
10703: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
10704: LD_ADDR_VAR 0 9
10708: PUSH
10709: LD_VAR 0 2
10713: PPUSH
10714: LD_INT 22
10716: PUSH
10717: LD_VAR 0 1
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 2
10728: PUSH
10729: LD_INT 30
10731: PUSH
10732: LD_INT 4
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 30
10741: PUSH
10742: LD_INT 5
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 24
10756: PUSH
10757: LD_INT 251
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 70
10773: ST_TO_ADDR
// if barrackList > 0 then
10774: LD_VAR 0 9
10778: PUSH
10779: LD_INT 0
10781: GREATER
10782: IFFALSE 10930
// begin if turretList = 0 then
10784: LD_VAR 0 7
10788: PUSH
10789: LD_INT 0
10791: EQUAL
10792: IFFALSE 10834
// begin if soldiers_list > 0 then
10794: LD_VAR 0 6
10798: PUSH
10799: LD_INT 0
10801: GREATER
10802: IFFALSE 10832
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
10804: LD_VAR 0 6
10808: PPUSH
10809: LD_VAR 0 9
10813: PUSH
10814: LD_INT 1
10816: PPUSH
10817: LD_VAR 0 9
10821: PPUSH
10822: CALL_OW 12
10826: ARRAY
10827: PPUSH
10828: CALL_OW 120
// end else
10832: GO 10930
// begin for i in barrackList do
10834: LD_ADDR_VAR 0 4
10838: PUSH
10839: LD_VAR 0 9
10843: PUSH
10844: FOR_IN
10845: IFFALSE 10928
// begin insideUnits = UnitsInside ( i ) ;
10847: LD_ADDR_VAR 0 10
10851: PUSH
10852: LD_VAR 0 4
10856: PPUSH
10857: CALL_OW 313
10861: ST_TO_ADDR
// if insideUnits > 0 then
10862: LD_VAR 0 10
10866: PUSH
10867: LD_INT 0
10869: GREATER
10870: IFFALSE 10894
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
10872: LD_VAR 0 10
10876: PUSH
10877: LD_INT 1
10879: ARRAY
10880: PPUSH
10881: LD_VAR 0 7
10885: PUSH
10886: LD_INT 1
10888: ARRAY
10889: PPUSH
10890: CALL_OW 120
// if soldiers_list > 0 then
10894: LD_VAR 0 6
10898: PUSH
10899: LD_INT 0
10901: GREATER
10902: IFFALSE 10926
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
10904: LD_VAR 0 6
10908: PUSH
10909: LD_INT 1
10911: ARRAY
10912: PPUSH
10913: LD_VAR 0 7
10917: PUSH
10918: LD_INT 1
10920: ARRAY
10921: PPUSH
10922: CALL_OW 120
// end ;
10926: GO 10844
10928: POP
10929: POP
// end ; end ; end ;
10930: LD_VAR 0 3
10934: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10935: LD_INT 0
10937: PPUSH
10938: PPUSH
10939: PPUSH
10940: PPUSH
10941: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10942: LD_ADDR_VAR 0 6
10946: PUSH
10947: LD_INT 22
10949: PUSH
10950: LD_VAR 0 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 2
10961: PUSH
10962: LD_INT 30
10964: PUSH
10965: LD_INT 31
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 30
10974: PUSH
10975: LD_INT 32
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 30
10984: PUSH
10985: LD_INT 33
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 30
10994: PUSH
10995: LD_INT 4
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 30
11004: PUSH
11005: LD_INT 5
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PPUSH
11024: CALL_OW 69
11028: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11029: LD_ADDR_VAR 0 7
11033: PUSH
11034: LD_INT 22
11036: PUSH
11037: LD_VAR 0 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 21
11048: PUSH
11049: LD_INT 3
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 58
11058: PUSH
11059: EMPTY
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11072: LD_VAR 0 6
11076: PUSH
11077: LD_INT 0
11079: GREATER
11080: PUSH
11081: LD_VAR 0 7
11085: PUSH
11086: LD_INT 0
11088: GREATER
11089: AND
11090: IFFALSE 11160
// begin for i in turretsList do
11092: LD_ADDR_VAR 0 4
11096: PUSH
11097: LD_VAR 0 6
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11158
// begin for j in enemyBuildings do
11105: LD_ADDR_VAR 0 5
11109: PUSH
11110: LD_VAR 0 7
11114: PUSH
11115: FOR_IN
11116: IFFALSE 11154
// begin if GetDistUnits ( i , j ) < 20 then
11118: LD_VAR 0 4
11122: PPUSH
11123: LD_VAR 0 5
11127: PPUSH
11128: CALL_OW 296
11132: PUSH
11133: LD_INT 20
11135: LESS
11136: IFFALSE 11152
// begin ComAttackUnit ( i , j ) ;
11138: LD_VAR 0 4
11142: PPUSH
11143: LD_VAR 0 5
11147: PPUSH
11148: CALL_OW 115
// end ; end ;
11152: GO 11115
11154: POP
11155: POP
// end ;
11156: GO 11102
11158: POP
11159: POP
// end ; end ;
11160: LD_VAR 0 3
11164: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11165: LD_INT 0
11167: PPUSH
11168: PPUSH
// for i = 1 to vehCount do
11169: LD_ADDR_VAR 0 9
11173: PUSH
11174: DOUBLE
11175: LD_INT 1
11177: DEC
11178: ST_TO_ADDR
11179: LD_VAR 0 3
11183: PUSH
11184: FOR_TO
11185: IFFALSE 11232
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11187: LD_VAR 0 2
11191: PPUSH
11192: LD_VAR 0 7
11196: PPUSH
11197: LD_VAR 0 5
11201: PPUSH
11202: LD_VAR 0 6
11206: PPUSH
11207: LD_VAR 0 4
11211: PUSH
11212: LD_INT 1
11214: PPUSH
11215: LD_VAR 0 4
11219: PPUSH
11220: CALL_OW 12
11224: ARRAY
11225: PPUSH
11226: CALL_OW 185
11230: GO 11184
11232: POP
11233: POP
// end ;
11234: LD_VAR 0 8
11238: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11239: LD_INT 0
11241: PPUSH
11242: PPUSH
11243: PPUSH
11244: PPUSH
11245: PPUSH
11246: PPUSH
// if oponent = 1 then
11247: LD_VAR 0 2
11251: PUSH
11252: LD_INT 1
11254: EQUAL
11255: IFFALSE 11444
// begin repeat wait ( 0 0$1 ) ;
11257: LD_INT 35
11259: PPUSH
11260: CALL_OW 67
// for j in legionVehicles do
11264: LD_ADDR_VAR 0 5
11268: PUSH
11269: LD_EXP 49
11273: PUSH
11274: FOR_IN
11275: IFFALSE 11433
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11277: LD_ADDR_VAR 0 7
11281: PUSH
11282: LD_INT 22
11284: PUSH
11285: LD_VAR 0 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PPUSH
11294: CALL_OW 69
11298: PPUSH
11299: LD_VAR 0 5
11303: PPUSH
11304: CALL_OW 74
11308: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11309: LD_ADDR_VAR 0 8
11313: PUSH
11314: LD_INT 22
11316: PUSH
11317: LD_VAR 0 1
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 30
11328: PUSH
11329: LD_INT 32
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 59
11338: PUSH
11339: EMPTY
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: PPUSH
11350: CALL_OW 69
11354: PPUSH
11355: LD_VAR 0 5
11359: PPUSH
11360: CALL_OW 74
11364: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11365: LD_VAR 0 5
11369: PPUSH
11370: LD_VAR 0 7
11374: PPUSH
11375: CALL_OW 296
11379: PUSH
11380: LD_INT 8
11382: PLUS
11383: PUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: LD_VAR 0 8
11393: PPUSH
11394: CALL_OW 296
11398: LESS
11399: IFFALSE 11417
// ComAttackUnit ( j , target1 ) else
11401: LD_VAR 0 5
11405: PPUSH
11406: LD_VAR 0 7
11410: PPUSH
11411: CALL_OW 115
11415: GO 11431
// ComAttackUnit ( j , target2 ) ;
11417: LD_VAR 0 5
11421: PPUSH
11422: LD_VAR 0 8
11426: PPUSH
11427: CALL_OW 115
// end ;
11431: GO 11274
11433: POP
11434: POP
// until legionVehicles = [ ] ;
11435: LD_EXP 49
11439: PUSH
11440: EMPTY
11441: EQUAL
11442: IFFALSE 11257
// end ; if oponent = 2 then
11444: LD_VAR 0 2
11448: PUSH
11449: LD_INT 2
11451: EQUAL
11452: IFFALSE 11641
// begin repeat wait ( 0 0$1 ) ;
11454: LD_INT 35
11456: PPUSH
11457: CALL_OW 67
// for j in russianVehicles do
11461: LD_ADDR_VAR 0 5
11465: PUSH
11466: LD_EXP 55
11470: PUSH
11471: FOR_IN
11472: IFFALSE 11630
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11474: LD_ADDR_VAR 0 7
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_VAR 0 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 69
11495: PPUSH
11496: LD_VAR 0 5
11500: PPUSH
11501: CALL_OW 74
11505: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11506: LD_ADDR_VAR 0 8
11510: PUSH
11511: LD_INT 22
11513: PUSH
11514: LD_VAR 0 1
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 30
11525: PUSH
11526: LD_INT 32
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 59
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: PPUSH
11547: CALL_OW 69
11551: PPUSH
11552: LD_VAR 0 5
11556: PPUSH
11557: CALL_OW 74
11561: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11562: LD_VAR 0 5
11566: PPUSH
11567: LD_VAR 0 7
11571: PPUSH
11572: CALL_OW 296
11576: PUSH
11577: LD_INT 8
11579: PLUS
11580: PUSH
11581: LD_VAR 0 5
11585: PPUSH
11586: LD_VAR 0 8
11590: PPUSH
11591: CALL_OW 296
11595: LESS
11596: IFFALSE 11614
// ComAttackUnit ( j , target1 ) else
11598: LD_VAR 0 5
11602: PPUSH
11603: LD_VAR 0 7
11607: PPUSH
11608: CALL_OW 115
11612: GO 11628
// ComAttackUnit ( j , target2 ) ;
11614: LD_VAR 0 5
11618: PPUSH
11619: LD_VAR 0 8
11623: PPUSH
11624: CALL_OW 115
// end ;
11628: GO 11471
11630: POP
11631: POP
// until russianVehicles = [ ] ;
11632: LD_EXP 55
11636: PUSH
11637: EMPTY
11638: EQUAL
11639: IFFALSE 11454
// end ; if oponent = 3 then
11641: LD_VAR 0 2
11645: PUSH
11646: LD_INT 3
11648: EQUAL
11649: IFFALSE 11838
// begin repeat wait ( 0 0$1 ) ;
11651: LD_INT 35
11653: PPUSH
11654: CALL_OW 67
// for j in allianceVehicles do
11658: LD_ADDR_VAR 0 5
11662: PUSH
11663: LD_EXP 56
11667: PUSH
11668: FOR_IN
11669: IFFALSE 11827
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11671: LD_ADDR_VAR 0 7
11675: PUSH
11676: LD_INT 22
11678: PUSH
11679: LD_VAR 0 1
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PPUSH
11688: CALL_OW 69
11692: PPUSH
11693: LD_VAR 0 5
11697: PPUSH
11698: CALL_OW 74
11702: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11703: LD_ADDR_VAR 0 8
11707: PUSH
11708: LD_INT 22
11710: PUSH
11711: LD_VAR 0 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 30
11722: PUSH
11723: LD_INT 32
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 59
11732: PUSH
11733: EMPTY
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: PPUSH
11744: CALL_OW 69
11748: PPUSH
11749: LD_VAR 0 5
11753: PPUSH
11754: CALL_OW 74
11758: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11759: LD_VAR 0 5
11763: PPUSH
11764: LD_VAR 0 7
11768: PPUSH
11769: CALL_OW 296
11773: PUSH
11774: LD_INT 8
11776: PLUS
11777: PUSH
11778: LD_VAR 0 5
11782: PPUSH
11783: LD_VAR 0 8
11787: PPUSH
11788: CALL_OW 296
11792: LESS
11793: IFFALSE 11811
// ComAttackUnit ( j , target1 ) else
11795: LD_VAR 0 5
11799: PPUSH
11800: LD_VAR 0 7
11804: PPUSH
11805: CALL_OW 115
11809: GO 11825
// ComAttackUnit ( j , target2 ) ;
11811: LD_VAR 0 5
11815: PPUSH
11816: LD_VAR 0 8
11820: PPUSH
11821: CALL_OW 115
// end ;
11825: GO 11668
11827: POP
11828: POP
// until allianceVehicles = [ ] ;
11829: LD_EXP 56
11833: PUSH
11834: EMPTY
11835: EQUAL
11836: IFFALSE 11651
// end ; end ;
11838: LD_VAR 0 3
11842: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
11843: LD_INT 0
11845: PPUSH
11846: PPUSH
11847: PPUSH
11848: PPUSH
11849: PPUSH
11850: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
11851: LD_ADDR_VAR 0 6
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_VAR 0 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 25
11870: PUSH
11871: LD_INT 9
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 69
11886: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11887: LD_ADDR_VAR 0 7
11891: PUSH
11892: LD_INT 81
11894: PUSH
11895: LD_VAR 0 1
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 3
11906: PUSH
11907: LD_INT 21
11909: PUSH
11910: LD_INT 3
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 69
11929: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
11930: LD_ADDR_VAR 0 4
11934: PUSH
11935: LD_INT 1
11937: PPUSH
11938: LD_INT 3
11940: PPUSH
11941: CALL_OW 12
11945: ST_TO_ADDR
// for i = 1 to list do
11946: LD_ADDR_VAR 0 5
11950: PUSH
11951: DOUBLE
11952: LD_INT 1
11954: DEC
11955: ST_TO_ADDR
11956: LD_VAR 0 6
11960: PUSH
11961: FOR_TO
11962: IFFALSE 12164
// for ta in filter do
11964: LD_ADDR_VAR 0 3
11968: PUSH
11969: LD_VAR 0 7
11973: PUSH
11974: FOR_IN
11975: IFFALSE 12160
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
11977: LD_VAR 0 6
11981: PUSH
11982: LD_VAR 0 5
11986: ARRAY
11987: PPUSH
11988: LD_VAR 0 3
11992: PPUSH
11993: CALL_OW 296
11997: PUSH
11998: LD_INT 15
12000: LESSEQUAL
12001: IFFALSE 12158
// begin case c of 1 :
12003: LD_VAR 0 4
12007: PUSH
12008: LD_INT 1
12010: DOUBLE
12011: EQUAL
12012: IFTRUE 12016
12014: GO 12054
12016: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ARRAY
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: CALL_OW 250
12037: PPUSH
12038: LD_VAR 0 3
12042: PPUSH
12043: CALL_OW 251
12047: PPUSH
12048: CALL_OW 154
12052: GO 12158
12054: LD_INT 2
12056: DOUBLE
12057: EQUAL
12058: IFTRUE 12062
12060: GO 12126
12062: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12063: LD_VAR 0 6
12067: PUSH
12068: LD_VAR 0 5
12072: ARRAY
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: CALL_OW 250
12083: PUSH
12084: LD_INT 1
12086: NEG
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: CALL_OW 12
12095: PLUS
12096: PPUSH
12097: LD_VAR 0 3
12101: PPUSH
12102: CALL_OW 251
12106: PUSH
12107: LD_INT 1
12109: NEG
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 12
12118: PLUS
12119: PPUSH
12120: CALL_OW 153
12124: GO 12158
12126: LD_INT 3
12128: DOUBLE
12129: EQUAL
12130: IFTRUE 12134
12132: GO 12157
12134: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12135: LD_VAR 0 6
12139: PUSH
12140: LD_VAR 0 5
12144: ARRAY
12145: PPUSH
12146: LD_VAR 0 3
12150: PPUSH
12151: CALL_OW 115
12155: GO 12158
12157: POP
// end ; end ;
12158: GO 11974
12160: POP
12161: POP
12162: GO 11961
12164: POP
12165: POP
// end ;
12166: LD_VAR 0 2
12170: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12171: LD_INT 0
12173: PPUSH
12174: PPUSH
12175: PPUSH
12176: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12177: LD_INT 22
12179: PUSH
12180: LD_VAR 0 1
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 21
12191: PUSH
12192: LD_INT 2
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 34
12201: PUSH
12202: LD_INT 49
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 69
12218: PUSH
12219: LD_INT 0
12221: EQUAL
12222: IFFALSE 12226
// exit ;
12224: GO 12481
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12226: LD_INT 22
12228: PUSH
12229: LD_VAR 0 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 21
12240: PUSH
12241: LD_INT 2
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 34
12250: PUSH
12251: LD_INT 49
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: PPUSH
12263: CALL_OW 69
12267: PUSH
12268: LD_INT 0
12270: GREATER
12271: IFFALSE 12481
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12273: LD_ADDR_VAR 0 6
12277: PUSH
12278: LD_INT 22
12280: PUSH
12281: LD_VAR 0 1
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 21
12292: PUSH
12293: LD_INT 2
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 34
12302: PUSH
12303: LD_INT 49
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 69
12319: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12320: LD_INT 105
12322: PPUSH
12323: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12327: LD_ADDR_VAR 0 4
12331: PUSH
12332: LD_VAR 0 6
12336: PPUSH
12337: LD_INT 3
12339: PUSH
12340: LD_INT 60
12342: PUSH
12343: EMPTY
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: PUSH
12355: FOR_IN
12356: IFFALSE 12469
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12358: LD_ADDR_VAR 0 5
12362: PUSH
12363: LD_INT 81
12365: PUSH
12366: LD_VAR 0 1
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 101
12377: PUSH
12378: LD_VAR 0 2
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 2
12389: PUSH
12390: LD_INT 21
12392: PUSH
12393: LD_INT 1
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 3
12402: PUSH
12403: LD_INT 58
12405: PUSH
12406: EMPTY
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 69
12427: PPUSH
12428: LD_VAR 0 4
12432: PPUSH
12433: CALL_OW 74
12437: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12438: LD_VAR 0 4
12442: PPUSH
12443: LD_VAR 0 5
12447: PPUSH
12448: CALL_OW 250
12452: PPUSH
12453: LD_VAR 0 5
12457: PPUSH
12458: CALL_OW 251
12462: PPUSH
12463: CALL_OW 111
// end ;
12467: GO 12355
12469: POP
12470: POP
// until vehs = 0 ;
12471: LD_VAR 0 6
12475: PUSH
12476: LD_INT 0
12478: EQUAL
12479: IFFALSE 12273
// end ; end_of_file
12481: LD_VAR 0 3
12485: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
12486: LD_VAR 0 1
12490: PUSH
12491: LD_INT 235
12493: EQUAL
12494: PUSH
12495: LD_VAR 0 2
12499: PPUSH
12500: CALL_OW 255
12504: PUSH
12505: LD_INT 4
12507: EQUAL
12508: AND
12509: IFFALSE 12585
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
12511: LD_INT 235
12513: PPUSH
12514: LD_INT 84
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
12524: LD_INT 235
12526: PPUSH
12527: LD_INT 68
12529: PPUSH
12530: LD_INT 100
12532: PPUSH
12533: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
12537: LD_INT 235
12539: PPUSH
12540: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
12544: LD_INT 235
12546: PPUSH
12547: LD_INT 48
12549: PPUSH
12550: LD_INT 69
12552: PPUSH
12553: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
12557: LD_INT 235
12559: PPUSH
12560: LD_INT 39
12562: PPUSH
12563: LD_INT 61
12565: PPUSH
12566: CALL_OW 171
// wait ( 0 0$10 ) ;
12570: LD_INT 350
12572: PPUSH
12573: CALL_OW 67
// powellUnloadCargo = 1 ;
12577: LD_ADDR_EXP 63
12581: PUSH
12582: LD_INT 1
12584: ST_TO_ADDR
// end ; end ;
12585: PPOPN 2
12587: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
12588: LD_INT 0
12590: PPUSH
12591: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12592: LD_ADDR_VAR 0 3
12596: PUSH
12597: LD_INT 22
12599: PUSH
12600: LD_INT 4
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 21
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 56
12619: PUSH
12620: EMPTY
12621: LIST
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: LD_INT 60
12628: PUSH
12629: EMPTY
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PPUSH
12642: CALL_OW 69
12646: PUSH
12647: LD_EXP 17
12651: PUSH
12652: EMPTY
12653: LIST
12654: DIFF
12655: ST_TO_ADDR
// if GetSide ( building ) = 4 then
12656: LD_VAR 0 1
12660: PPUSH
12661: CALL_OW 255
12665: PUSH
12666: LD_INT 4
12668: EQUAL
12669: IFFALSE 12800
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
12671: LD_INT 22
12673: PUSH
12674: LD_INT 4
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 30
12683: PUSH
12684: LD_INT 8
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 69
12699: PUSH
12700: LD_INT 1
12702: EQUAL
12703: IFFALSE 12800
// begin for i = 1 to 3 do
12705: LD_ADDR_VAR 0 2
12709: PUSH
12710: DOUBLE
12711: LD_INT 1
12713: DEC
12714: ST_TO_ADDR
12715: LD_INT 3
12717: PUSH
12718: FOR_TO
12719: IFFALSE 12783
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
12721: LD_VAR 0 3
12725: PUSH
12726: LD_VAR 0 2
12730: ARRAY
12731: PPUSH
12732: LD_INT 3
12734: PUSH
12735: LD_INT 25
12737: PUSH
12738: LD_INT 2
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PPUSH
12749: CALL_OW 72
12753: PPUSH
12754: LD_VAR 0 1
12758: PPUSH
12759: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
12763: LD_VAR 0 3
12767: PUSH
12768: LD_VAR 0 2
12772: ARRAY
12773: PPUSH
12774: LD_INT 4
12776: PPUSH
12777: CALL_OW 183
// end ;
12781: GO 12718
12783: POP
12784: POP
// ResAllTechs ( 4 , building , 1 ) ;
12785: LD_INT 4
12787: PPUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL 9287 0 3
// end ; if GetSide ( building ) = 8 then
12800: LD_VAR 0 1
12804: PPUSH
12805: CALL_OW 255
12809: PUSH
12810: LD_INT 8
12812: EQUAL
12813: IFFALSE 12998
// begin if GetNation ( building ) = 3 then
12815: LD_VAR 0 1
12819: PPUSH
12820: CALL_OW 248
12824: PUSH
12825: LD_INT 3
12827: EQUAL
12828: IFFALSE 12998
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
12830: LD_EXP 35
12834: PPUSH
12835: LD_INT 73
12837: PPUSH
12838: LD_INT 16
12840: PPUSH
12841: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
12845: LD_EXP 35
12849: PPUSH
12850: LD_INT 21
12852: PPUSH
12853: LD_INT 74
12855: PPUSH
12856: LD_INT 12
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 205
// wait ( 0 0$2 ) ;
12866: LD_INT 70
12868: PPUSH
12869: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
12873: LD_EXP 35
12877: PPUSH
12878: LD_INT 22
12880: PUSH
12881: LD_INT 8
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 30
12890: PUSH
12891: LD_INT 3
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 23
12900: PUSH
12901: LD_INT 3
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: PPUSH
12913: CALL_OW 69
12917: PUSH
12918: LD_INT 1
12920: ARRAY
12921: PPUSH
12922: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
12926: LD_EXP 35
12930: PPUSH
12931: LD_INT 3
12933: PPUSH
12934: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
12938: LD_INT 22
12940: PUSH
12941: LD_INT 8
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 3
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 23
12960: PUSH
12961: LD_INT 3
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: LD_INT 24
12984: PPUSH
12985: LD_INT 3
12987: PPUSH
12988: LD_INT 3
12990: PPUSH
12991: LD_INT 48
12993: PPUSH
12994: CALL_OW 185
// end ; end ; end ;
12998: PPOPN 3
13000: END
// on BuildingComplete ( building ) do var powellPeople ;
13001: LD_INT 0
13003: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 255
13013: PUSH
13014: LD_INT 4
13016: EQUAL
13017: PUSH
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 266
13027: PUSH
13028: LD_INT 17
13030: EQUAL
13031: AND
13032: IFFALSE 13314
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13034: LD_ADDR_VAR 0 2
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_INT 4
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 21
13051: PUSH
13052: LD_INT 1
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 56
13061: PUSH
13062: EMPTY
13063: LIST
13064: PUSH
13065: LD_INT 3
13067: PUSH
13068: LD_INT 60
13070: PUSH
13071: EMPTY
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: PUSH
13089: LD_EXP 17
13093: PUSH
13094: EMPTY
13095: LIST
13096: DIFF
13097: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13098: LD_INT 22
13100: PUSH
13101: LD_INT 4
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 21
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 30
13120: PUSH
13121: LD_INT 32
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: PPUSH
13133: CALL_OW 69
13137: PUSH
13138: LD_INT 1
13140: ARRAY
13141: PPUSH
13142: LD_INT 6
13144: PPUSH
13145: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13149: LD_INT 22
13151: PUSH
13152: LD_INT 4
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 21
13161: PUSH
13162: LD_INT 3
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 30
13171: PUSH
13172: LD_INT 32
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 69
13188: PUSH
13189: LD_INT 2
13191: ARRAY
13192: PPUSH
13193: LD_INT 5
13195: PPUSH
13196: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13200: LD_VAR 0 2
13204: PUSH
13205: LD_INT 1
13207: ARRAY
13208: PPUSH
13209: LD_INT 22
13211: PUSH
13212: LD_INT 4
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 21
13221: PUSH
13222: LD_INT 3
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 30
13231: PUSH
13232: LD_INT 32
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: LIST
13243: PPUSH
13244: CALL_OW 69
13248: PUSH
13249: LD_INT 1
13251: ARRAY
13252: PPUSH
13253: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13257: LD_VAR 0 2
13261: PUSH
13262: LD_INT 2
13264: ARRAY
13265: PPUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 4
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 3
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 30
13288: PUSH
13289: LD_INT 32
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: PUSH
13306: LD_INT 2
13308: ARRAY
13309: PPUSH
13310: CALL_OW 120
// end ; if GetSide ( building ) = 8 then
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL_OW 255
13323: PUSH
13324: LD_INT 8
13326: EQUAL
13327: IFFALSE 13353
// begin if GetBType ( building ) = b_workshop then
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL_OW 266
13338: PUSH
13339: LD_INT 2
13341: EQUAL
13342: IFFALSE 13353
// ComUpgrade ( building ) ;
13344: LD_VAR 0 1
13348: PPUSH
13349: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL_OW 255
13362: PUSH
13363: LD_INT 3
13365: EQUAL
13366: IFFALSE 13440
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13368: LD_ADDR_EXP 86
13372: PUSH
13373: LD_EXP 86
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 3
13385: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13386: LD_ADDR_EXP 86
13390: PUSH
13391: LD_EXP 86
13395: PPUSH
13396: LD_INT 1
13398: PPUSH
13399: CALL_OW 3
13403: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13404: LD_ADDR_EXP 86
13408: PUSH
13409: LD_EXP 86
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: CALL_OW 3
13421: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13422: LD_ADDR_EXP 86
13426: PUSH
13427: LD_EXP 86
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 3
13439: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
13440: LD_VAR 0 1
13444: PPUSH
13445: CALL_OW 255
13449: PUSH
13450: LD_INT 8
13452: EQUAL
13453: IFFALSE 13527
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13455: LD_ADDR_EXP 85
13459: PUSH
13460: LD_EXP 85
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 3
13472: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13473: LD_ADDR_EXP 85
13477: PUSH
13478: LD_EXP 85
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 3
13490: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13491: LD_ADDR_EXP 85
13495: PUSH
13496: LD_EXP 85
13500: PPUSH
13501: LD_INT 1
13503: PPUSH
13504: CALL_OW 3
13508: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13509: LD_ADDR_EXP 85
13513: PUSH
13514: LD_EXP 85
13518: PPUSH
13519: LD_INT 1
13521: PPUSH
13522: CALL_OW 3
13526: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
13527: LD_VAR 0 1
13531: PPUSH
13532: CALL_OW 255
13536: PUSH
13537: LD_INT 7
13539: EQUAL
13540: IFFALSE 13614
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13542: LD_ADDR_EXP 87
13546: PUSH
13547: LD_EXP 87
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: CALL_OW 3
13559: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13560: LD_ADDR_EXP 87
13564: PUSH
13565: LD_EXP 87
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 3
13577: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13578: LD_ADDR_EXP 87
13582: PUSH
13583: LD_EXP 87
13587: PPUSH
13588: LD_INT 1
13590: PPUSH
13591: CALL_OW 3
13595: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13596: LD_ADDR_EXP 87
13600: PUSH
13601: LD_EXP 87
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 3
13613: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
13614: LD_VAR 0 1
13618: PPUSH
13619: CALL_OW 255
13623: PUSH
13624: LD_INT 3
13626: EQUAL
13627: IFFALSE 13694
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
13629: LD_VAR 0 1
13633: PPUSH
13634: CALL_OW 266
13638: PUSH
13639: LD_INT 32
13641: EQUAL
13642: PUSH
13643: LD_VAR 0 1
13647: PPUSH
13648: CALL_OW 266
13652: PUSH
13653: LD_INT 33
13655: EQUAL
13656: OR
13657: IFFALSE 13694
// AddComPlaceWeapon ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
13659: LD_VAR 0 1
13663: PPUSH
13664: LD_INT 46
13666: PUSH
13667: LD_INT 47
13669: PUSH
13670: LD_INT 45
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 1
13680: PPUSH
13681: LD_INT 3
13683: PPUSH
13684: CALL_OW 12
13688: ARRAY
13689: PPUSH
13690: CALL_OW 208
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
13694: LD_VAR 0 1
13698: PPUSH
13699: CALL_OW 255
13703: PUSH
13704: LD_INT 8
13706: EQUAL
13707: PUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 266
13717: PUSH
13718: LD_INT 32
13720: EQUAL
13721: AND
13722: IFFALSE 13755
// begin AddComPlaceWeapon ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
13724: LD_VAR 0 1
13728: PPUSH
13729: LD_INT 28
13731: PUSH
13732: LD_INT 27
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 1
13741: PPUSH
13742: LD_INT 2
13744: PPUSH
13745: CALL_OW 12
13749: ARRAY
13750: PPUSH
13751: CALL_OW 208
// end ; end ;
13755: PPOPN 2
13757: END
// on EnterBuilding ( building , human ) do begin end ;
13758: PPOPN 2
13760: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
13761: LD_VAR 0 1
13765: PPUSH
13766: CALL_OW 255
13770: PUSH
13771: LD_INT 6
13773: EQUAL
13774: IFFALSE 13792
// ruBehs = ruBehs ^ vehicle ;
13776: LD_ADDR_EXP 53
13780: PUSH
13781: LD_EXP 53
13785: PUSH
13786: LD_VAR 0 1
13790: ADD
13791: ST_TO_ADDR
// end ;
13792: PPOPN 1
13794: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb ;
13795: LD_INT 0
13797: PPUSH
// begin if vehicle = powellVeh then
13798: LD_VAR 0 1
13802: PUSH
13803: LD_EXP 66
13807: EQUAL
13808: IFFALSE 13824
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
13810: LD_VAR 0 1
13814: PPUSH
13815: CALL_OW 313
13819: PPUSH
13820: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 255
13833: PUSH
13834: LD_INT 4
13836: EQUAL
13837: IFFALSE 13854
// AddComMoveXY ( vehicle , 58 , 63 ) ;
13839: LD_VAR 0 1
13843: PPUSH
13844: LD_INT 58
13846: PPUSH
13847: LD_INT 63
13849: PPUSH
13850: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 255
13863: PUSH
13864: LD_INT 4
13866: EQUAL
13867: PUSH
13868: LD_EXP 62
13872: PUSH
13873: LD_INT 2
13875: EQUAL
13876: AND
13877: PUSH
13878: LD_VAR 0 1
13882: PPUSH
13883: CALL_OW 264
13887: PUSH
13888: LD_INT 6
13890: EQUAL
13891: AND
13892: IFFALSE 13946
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
13894: LD_EXP 59
13898: PUSH
13899: LD_INT 5
13901: ARRAY
13902: PPUSH
13903: CALL_OW 122
// wait ( 0 0$1 ) ;
13907: LD_INT 35
13909: PPUSH
13910: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
13914: LD_EXP 59
13918: PUSH
13919: LD_INT 5
13921: ARRAY
13922: PPUSH
13923: LD_INT 85
13925: PPUSH
13926: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
13930: LD_EXP 59
13934: PUSH
13935: LD_INT 5
13937: ARRAY
13938: PPUSH
13939: LD_INT 3
13941: PPUSH
13942: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
13946: LD_VAR 0 1
13950: PPUSH
13951: CALL_OW 255
13955: PUSH
13956: LD_INT 4
13958: EQUAL
13959: PUSH
13960: LD_EXP 62
13964: PUSH
13965: LD_INT 2
13967: EQUAL
13968: AND
13969: PUSH
13970: LD_VAR 0 1
13974: PPUSH
13975: CALL_OW 264
13979: PUSH
13980: LD_INT 3
13982: EQUAL
13983: AND
13984: IFFALSE 14011
// begin powellVeh = vehicle ;
13986: LD_ADDR_EXP 66
13990: PUSH
13991: LD_VAR 0 1
13995: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: LD_INT 49
14003: PPUSH
14004: LD_INT 74
14006: PPUSH
14007: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 255
14020: PUSH
14021: LD_INT 8
14023: EQUAL
14024: PUSH
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 248
14034: PUSH
14035: LD_INT 2
14037: EQUAL
14038: AND
14039: PUSH
14040: LD_VAR 0 1
14044: PPUSH
14045: CALL_OW 247
14049: PUSH
14050: LD_INT 2
14052: EQUAL
14053: AND
14054: IFFALSE 14090
// begin legionVehicles = legionVehicles ^ vehicle ;
14056: LD_ADDR_EXP 49
14060: PUSH
14061: LD_EXP 49
14065: PUSH
14066: LD_VAR 0 1
14070: ADD
14071: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: LD_EXP 50
14081: PUSH
14082: LD_INT 1
14084: ARRAY
14085: PPUSH
14086: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14090: LD_VAR 0 1
14094: PPUSH
14095: CALL_OW 255
14099: PUSH
14100: LD_INT 8
14102: EQUAL
14103: PUSH
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 248
14113: PUSH
14114: LD_INT 3
14116: EQUAL
14117: AND
14118: IFFALSE 14409
// begin ChangeMissionObjectives ( MlegionDel ) ;
14120: LD_STRING MlegionDel
14122: PPUSH
14123: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: LD_INT 1
14134: PPUSH
14135: LD_INT 2
14137: PPUSH
14138: CALL_OW 12
14142: ST_TO_ADDR
// legionRocket = vehicle ;
14143: LD_ADDR_EXP 91
14147: PUSH
14148: LD_VAR 0 1
14152: ST_TO_ADDR
// DialogueOn ;
14153: CALL_OW 6
// if legionBomb = 1 then
14157: LD_VAR 0 3
14161: PUSH
14162: LD_INT 1
14164: EQUAL
14165: IFFALSE 14289
// begin if Kurt then
14167: LD_EXP 30
14171: IFFALSE 14187
// Say ( Kurt , D12-Kurt-1 ) else
14173: LD_EXP 30
14177: PPUSH
14178: LD_STRING D12-Kurt-1
14180: PPUSH
14181: CALL_OW 88
14185: GO 14249
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14187: LD_INT 22
14189: PUSH
14190: LD_INT 8
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 21
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 25
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 26
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 69
14237: PUSH
14238: LD_INT 2
14240: ARRAY
14241: PPUSH
14242: LD_STRING D12-Kurt-1
14244: PPUSH
14245: CALL_OW 88
// DialogueOff ;
14249: CALL_OW 7
// wait ( 0 0$3 ) ;
14253: LD_INT 105
14255: PPUSH
14256: CALL_OW 67
// AddComAttackPlace ( legionRocket , GetX ( JMM ) , GetY ( JMM ) ) ;
14260: LD_EXP 91
14264: PPUSH
14265: LD_EXP 1
14269: PPUSH
14270: CALL_OW 250
14274: PPUSH
14275: LD_EXP 1
14279: PPUSH
14280: CALL_OW 251
14284: PPUSH
14285: CALL_OW 176
// end ; if legionBomb = 2 then
14289: LD_VAR 0 3
14293: PUSH
14294: LD_INT 2
14296: EQUAL
14297: IFFALSE 14409
// begin if Kurt then
14299: LD_EXP 30
14303: IFFALSE 14319
// Say ( Kurt , D12a-Kurt-1 ) else
14305: LD_EXP 30
14309: PPUSH
14310: LD_STRING D12a-Kurt-1
14312: PPUSH
14313: CALL_OW 88
14317: GO 14381
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
14319: LD_INT 22
14321: PUSH
14322: LD_INT 8
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 21
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 26
14351: PUSH
14352: LD_INT 1
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: PUSH
14370: LD_INT 2
14372: ARRAY
14373: PPUSH
14374: LD_STRING D12a-Kurt-11
14376: PPUSH
14377: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
14381: LD_EXP 28
14385: PPUSH
14386: LD_STRING D12a-Roth-1
14388: PPUSH
14389: CALL_OW 94
// DialogueOff ;
14393: CALL_OW 7
// ComAttackUnit ( legionRocket , RuDep2 ) ;
14397: LD_EXP 91
14401: PPUSH
14402: LD_INT 23
14404: PPUSH
14405: CALL_OW 115
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
14409: LD_VAR 0 1
14413: PPUSH
14414: CALL_OW 255
14418: PUSH
14419: LD_INT 3
14421: EQUAL
14422: PUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 248
14432: PUSH
14433: LD_INT 3
14435: EQUAL
14436: AND
14437: PUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 247
14447: PUSH
14448: LD_INT 2
14450: EQUAL
14451: AND
14452: IFFALSE 14470
// RussianVehicles = RussianVehicles ^ vehicle ;
14454: LD_ADDR_EXP 55
14458: PUSH
14459: LD_EXP 55
14463: PUSH
14464: LD_VAR 0 1
14468: ADD
14469: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
14470: LD_VAR 0 1
14474: PPUSH
14475: CALL_OW 255
14479: PUSH
14480: LD_INT 7
14482: EQUAL
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 247
14493: PUSH
14494: LD_INT 2
14496: EQUAL
14497: AND
14498: IFFALSE 14557
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
14500: LD_ADDR_EXP 56
14504: PUSH
14505: LD_EXP 56
14509: PUSH
14510: LD_VAR 0 1
14514: ADD
14515: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 263
14525: PUSH
14526: LD_INT 2
14528: EQUAL
14529: IFFALSE 14557
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
14531: LD_VAR 0 1
14535: PPUSH
14536: LD_EXP 57
14540: PUSH
14541: LD_INT 1
14543: PPUSH
14544: LD_INT 3
14546: PPUSH
14547: CALL_OW 12
14551: ARRAY
14552: PPUSH
14553: CALL_OW 135
// end ; end ;
14557: PPOPN 3
14559: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 255
14569: PUSH
14570: LD_INT 4
14572: EQUAL
14573: PUSH
14574: LD_EXP 62
14578: PUSH
14579: LD_INT 1
14581: EQUAL
14582: AND
14583: IFFALSE 14686
// begin ComEnterUnit ( human , AmFact ) ;
14585: LD_VAR 0 2
14589: PPUSH
14590: LD_INT 85
14592: PPUSH
14593: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
14597: LD_VAR 0 2
14601: PPUSH
14602: CALL_OW 258
14606: PUSH
14607: LD_INT 1
14609: EQUAL
14610: PUSH
14611: LD_EXP 94
14615: PUSH
14616: LD_INT 0
14618: EQUAL
14619: AND
14620: IFFALSE 14686
// begin blockEvent1 = 1 ;
14622: LD_ADDR_EXP 94
14626: PUSH
14627: LD_INT 1
14629: ST_TO_ADDR
// startAttacks = 1 ;
14630: LD_ADDR_EXP 65
14634: PUSH
14635: LD_INT 1
14637: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
14638: LD_VAR 0 2
14642: PPUSH
14643: LD_STRING D4a-Sol1-1
14645: PPUSH
14646: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
14650: LD_EXP 17
14654: PPUSH
14655: LD_STRING D4a-Pow-1
14657: PPUSH
14658: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
14662: LD_VAR 0 2
14666: PPUSH
14667: LD_STRING D4a-Sol1-2
14669: PPUSH
14670: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
14674: LD_EXP 17
14678: PPUSH
14679: LD_STRING D4a-Pow-2
14681: PPUSH
14682: CALL_OW 88
// end ; end ; end ;
14686: PPOPN 2
14688: END
// on UnitDestroyed ( unit ) do var i ;
14689: LD_INT 0
14691: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 255
14701: PUSH
14702: LD_INT 1
14704: EQUAL
14705: PUSH
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 247
14715: PUSH
14716: LD_INT 1
14718: EQUAL
14719: AND
14720: IFFALSE 14736
// unitLost = unitLost + 1 ;
14722: LD_ADDR_EXP 90
14726: PUSH
14727: LD_EXP 90
14731: PUSH
14732: LD_INT 1
14734: PLUS
14735: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 255
14745: PUSH
14746: LD_INT 4
14748: EQUAL
14749: PUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 247
14759: PUSH
14760: LD_INT 1
14762: EQUAL
14763: AND
14764: IFFALSE 14814
// begin for i in amUnitsAttack do
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_EXP 59
14775: PUSH
14776: FOR_IN
14777: IFFALSE 14812
// if i = unit then
14779: LD_VAR 0 2
14783: PUSH
14784: LD_VAR 0 1
14788: EQUAL
14789: IFFALSE 14810
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
14791: LD_ADDR_EXP 59
14795: PUSH
14796: LD_EXP 59
14800: PUSH
14801: LD_VAR 0 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: DIFF
14809: ST_TO_ADDR
14810: GO 14776
14812: POP
14813: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 255
14823: PUSH
14824: LD_INT 8
14826: EQUAL
14827: PUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 247
14837: PUSH
14838: LD_INT 2
14840: EQUAL
14841: AND
14842: PUSH
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 248
14852: PUSH
14853: LD_INT 2
14855: EQUAL
14856: AND
14857: IFFALSE 14907
// begin for i in legionVehicles do
14859: LD_ADDR_VAR 0 2
14863: PUSH
14864: LD_EXP 49
14868: PUSH
14869: FOR_IN
14870: IFFALSE 14905
// if i = unit then
14872: LD_VAR 0 2
14876: PUSH
14877: LD_VAR 0 1
14881: EQUAL
14882: IFFALSE 14903
// legionVehicles = legionVehicles diff [ unit ] ;
14884: LD_ADDR_EXP 49
14888: PUSH
14889: LD_EXP 49
14893: PUSH
14894: LD_VAR 0 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: DIFF
14902: ST_TO_ADDR
14903: GO 14869
14905: POP
14906: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
14907: LD_VAR 0 1
14911: PPUSH
14912: CALL_OW 255
14916: PUSH
14917: LD_INT 3
14919: EQUAL
14920: PUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 247
14930: PUSH
14931: LD_INT 2
14933: EQUAL
14934: AND
14935: IFFALSE 14985
// begin for i in RussianVehicles do
14937: LD_ADDR_VAR 0 2
14941: PUSH
14942: LD_EXP 55
14946: PUSH
14947: FOR_IN
14948: IFFALSE 14983
// if i = unit then
14950: LD_VAR 0 2
14954: PUSH
14955: LD_VAR 0 1
14959: EQUAL
14960: IFFALSE 14981
// RussianVehicles = RussianVehicles diff [ unit ] ;
14962: LD_ADDR_EXP 55
14966: PUSH
14967: LD_EXP 55
14971: PUSH
14972: LD_VAR 0 1
14976: PUSH
14977: EMPTY
14978: LIST
14979: DIFF
14980: ST_TO_ADDR
14981: GO 14947
14983: POP
14984: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 255
14994: PUSH
14995: LD_INT 7
14997: EQUAL
14998: PUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 247
15008: PUSH
15009: LD_INT 2
15011: EQUAL
15012: AND
15013: IFFALSE 15063
// begin for i in AllianceVehicles do
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: LD_EXP 56
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15061
// if i = unit then
15028: LD_VAR 0 2
15032: PUSH
15033: LD_VAR 0 1
15037: EQUAL
15038: IFFALSE 15059
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
15040: LD_ADDR_EXP 56
15044: PUSH
15045: LD_EXP 56
15049: PUSH
15050: LD_VAR 0 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: DIFF
15058: ST_TO_ADDR
15059: GO 15025
15061: POP
15062: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15063: LD_VAR 0 1
15067: PPUSH
15068: CALL_OW 255
15072: PUSH
15073: LD_INT 3
15075: EQUAL
15076: PUSH
15077: LD_VAR 0 1
15081: PPUSH
15082: CALL_OW 247
15086: PUSH
15087: LD_INT 3
15089: EQUAL
15090: AND
15091: IFFALSE 15783
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15093: LD_VAR 0 1
15097: PPUSH
15098: CALL_OW 266
15102: PUSH
15103: LD_INT 31
15105: EQUAL
15106: PUSH
15107: LD_VAR 0 1
15111: PPUSH
15112: CALL_OW 266
15116: PUSH
15117: LD_INT 32
15119: EQUAL
15120: OR
15121: PUSH
15122: LD_VAR 0 1
15126: PPUSH
15127: CALL_OW 266
15131: PUSH
15132: LD_INT 36
15134: EQUAL
15135: OR
15136: PUSH
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 266
15146: PUSH
15147: LD_INT 0
15149: EQUAL
15150: OR
15151: PUSH
15152: LD_VAR 0 1
15156: PPUSH
15157: CALL_OW 266
15161: PUSH
15162: LD_INT 24
15164: EQUAL
15165: OR
15166: PUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 266
15176: PUSH
15177: LD_INT 17
15179: EQUAL
15180: OR
15181: PUSH
15182: LD_VAR 0 1
15186: PPUSH
15187: CALL_OW 266
15191: PUSH
15192: LD_INT 25
15194: EQUAL
15195: OR
15196: PUSH
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 266
15206: PUSH
15207: LD_INT 19
15209: EQUAL
15210: OR
15211: PUSH
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 20
15224: EQUAL
15225: OR
15226: PUSH
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 266
15236: PUSH
15237: LD_INT 18
15239: EQUAL
15240: OR
15241: PUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 266
15251: PUSH
15252: LD_INT 21
15254: EQUAL
15255: OR
15256: PUSH
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 266
15266: PUSH
15267: LD_INT 23
15269: EQUAL
15270: OR
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 266
15281: PUSH
15282: LD_INT 16
15284: EQUAL
15285: OR
15286: PUSH
15287: LD_VAR 0 1
15291: PPUSH
15292: CALL_OW 266
15296: PUSH
15297: LD_INT 6
15299: EQUAL
15300: OR
15301: PUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: CALL_OW 266
15311: PUSH
15312: LD_INT 29
15314: EQUAL
15315: OR
15316: PUSH
15317: LD_VAR 0 1
15321: PPUSH
15322: CALL_OW 266
15326: PUSH
15327: LD_INT 26
15329: EQUAL
15330: OR
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 266
15341: PUSH
15342: LD_INT 30
15344: EQUAL
15345: OR
15346: PUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 266
15356: PUSH
15357: LD_INT 28
15359: EQUAL
15360: OR
15361: PUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 266
15371: PUSH
15372: LD_INT 27
15374: EQUAL
15375: OR
15376: PUSH
15377: LD_VAR 0 1
15381: PPUSH
15382: CALL_OW 266
15386: PUSH
15387: LD_INT 33
15389: EQUAL
15390: OR
15391: PUSH
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 266
15401: PUSH
15402: LD_INT 2
15404: EQUAL
15405: OR
15406: PUSH
15407: LD_VAR 0 1
15411: PPUSH
15412: CALL_OW 266
15416: PUSH
15417: LD_INT 4
15419: EQUAL
15420: OR
15421: IFFALSE 15507
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
15423: LD_ADDR_EXP 86
15427: PUSH
15428: LD_EXP 86
15432: PUSH
15433: LD_VAR 0 1
15437: PPUSH
15438: CALL_OW 266
15442: ADD
15443: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15444: LD_ADDR_EXP 86
15448: PUSH
15449: LD_EXP 86
15453: PUSH
15454: LD_VAR 0 1
15458: PPUSH
15459: CALL_OW 250
15463: ADD
15464: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15465: LD_ADDR_EXP 86
15469: PUSH
15470: LD_EXP 86
15474: PUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 251
15484: ADD
15485: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15486: LD_ADDR_EXP 86
15490: PUSH
15491: LD_EXP 86
15495: PUSH
15496: LD_VAR 0 1
15500: PPUSH
15501: CALL_OW 254
15505: ADD
15506: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 266
15516: PUSH
15517: LD_INT 1
15519: EQUAL
15520: IFFALSE 15599
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
15522: LD_ADDR_EXP 86
15526: PUSH
15527: LD_EXP 86
15531: PUSH
15532: LD_INT 0
15534: ADD
15535: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15536: LD_ADDR_EXP 86
15540: PUSH
15541: LD_EXP 86
15545: PUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 250
15555: ADD
15556: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15557: LD_ADDR_EXP 86
15561: PUSH
15562: LD_EXP 86
15566: PUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 251
15576: ADD
15577: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15578: LD_ADDR_EXP 86
15582: PUSH
15583: LD_EXP 86
15587: PUSH
15588: LD_VAR 0 1
15592: PPUSH
15593: CALL_OW 254
15597: ADD
15598: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 266
15608: PUSH
15609: LD_INT 3
15611: EQUAL
15612: IFFALSE 15691
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
15614: LD_ADDR_EXP 86
15618: PUSH
15619: LD_EXP 86
15623: PUSH
15624: LD_INT 2
15626: ADD
15627: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15628: LD_ADDR_EXP 86
15632: PUSH
15633: LD_EXP 86
15637: PUSH
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 250
15647: ADD
15648: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15649: LD_ADDR_EXP 86
15653: PUSH
15654: LD_EXP 86
15658: PUSH
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 251
15668: ADD
15669: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15670: LD_ADDR_EXP 86
15674: PUSH
15675: LD_EXP 86
15679: PUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 254
15689: ADD
15690: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 266
15700: PUSH
15701: LD_INT 5
15703: EQUAL
15704: IFFALSE 15783
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
15706: LD_ADDR_EXP 86
15710: PUSH
15711: LD_EXP 86
15715: PUSH
15716: LD_INT 4
15718: ADD
15719: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15720: LD_ADDR_EXP 86
15724: PUSH
15725: LD_EXP 86
15729: PUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 250
15739: ADD
15740: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15741: LD_ADDR_EXP 86
15745: PUSH
15746: LD_EXP 86
15750: PUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 251
15760: ADD
15761: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15762: LD_ADDR_EXP 86
15766: PUSH
15767: LD_EXP 86
15771: PUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 254
15781: ADD
15782: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
15783: LD_VAR 0 1
15787: PPUSH
15788: CALL_OW 255
15792: PUSH
15793: LD_INT 8
15795: EQUAL
15796: PUSH
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 247
15806: PUSH
15807: LD_INT 3
15809: EQUAL
15810: AND
15811: PUSH
15812: LD_VAR 0 1
15816: PPUSH
15817: CALL_OW 248
15821: PUSH
15822: LD_INT 2
15824: EQUAL
15825: AND
15826: IFFALSE 16518
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 266
15837: PUSH
15838: LD_INT 31
15840: EQUAL
15841: PUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 266
15851: PUSH
15852: LD_INT 32
15854: EQUAL
15855: OR
15856: PUSH
15857: LD_VAR 0 1
15861: PPUSH
15862: CALL_OW 266
15866: PUSH
15867: LD_INT 36
15869: EQUAL
15870: OR
15871: PUSH
15872: LD_VAR 0 1
15876: PPUSH
15877: CALL_OW 266
15881: PUSH
15882: LD_INT 0
15884: EQUAL
15885: OR
15886: PUSH
15887: LD_VAR 0 1
15891: PPUSH
15892: CALL_OW 266
15896: PUSH
15897: LD_INT 24
15899: EQUAL
15900: OR
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 266
15911: PUSH
15912: LD_INT 17
15914: EQUAL
15915: OR
15916: PUSH
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 266
15926: PUSH
15927: LD_INT 25
15929: EQUAL
15930: OR
15931: PUSH
15932: LD_VAR 0 1
15936: PPUSH
15937: CALL_OW 266
15941: PUSH
15942: LD_INT 19
15944: EQUAL
15945: OR
15946: PUSH
15947: LD_VAR 0 1
15951: PPUSH
15952: CALL_OW 266
15956: PUSH
15957: LD_INT 20
15959: EQUAL
15960: OR
15961: PUSH
15962: LD_VAR 0 1
15966: PPUSH
15967: CALL_OW 266
15971: PUSH
15972: LD_INT 18
15974: EQUAL
15975: OR
15976: PUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 266
15986: PUSH
15987: LD_INT 21
15989: EQUAL
15990: OR
15991: PUSH
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 266
16001: PUSH
16002: LD_INT 23
16004: EQUAL
16005: OR
16006: PUSH
16007: LD_VAR 0 1
16011: PPUSH
16012: CALL_OW 266
16016: PUSH
16017: LD_INT 16
16019: EQUAL
16020: OR
16021: PUSH
16022: LD_VAR 0 1
16026: PPUSH
16027: CALL_OW 266
16031: PUSH
16032: LD_INT 6
16034: EQUAL
16035: OR
16036: PUSH
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL_OW 266
16046: PUSH
16047: LD_INT 29
16049: EQUAL
16050: OR
16051: PUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 266
16061: PUSH
16062: LD_INT 26
16064: EQUAL
16065: OR
16066: PUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 266
16076: PUSH
16077: LD_INT 30
16079: EQUAL
16080: OR
16081: PUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL_OW 266
16091: PUSH
16092: LD_INT 28
16094: EQUAL
16095: OR
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 266
16106: PUSH
16107: LD_INT 27
16109: EQUAL
16110: OR
16111: PUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: CALL_OW 266
16121: PUSH
16122: LD_INT 33
16124: EQUAL
16125: OR
16126: PUSH
16127: LD_VAR 0 1
16131: PPUSH
16132: CALL_OW 266
16136: PUSH
16137: LD_INT 2
16139: EQUAL
16140: OR
16141: PUSH
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 266
16151: PUSH
16152: LD_INT 4
16154: EQUAL
16155: OR
16156: IFFALSE 16242
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
16158: LD_ADDR_EXP 85
16162: PUSH
16163: LD_EXP 85
16167: PUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 266
16177: ADD
16178: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16179: LD_ADDR_EXP 85
16183: PUSH
16184: LD_EXP 85
16188: PUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 250
16198: ADD
16199: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16200: LD_ADDR_EXP 85
16204: PUSH
16205: LD_EXP 85
16209: PUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 251
16219: ADD
16220: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16221: LD_ADDR_EXP 85
16225: PUSH
16226: LD_EXP 85
16230: PUSH
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 254
16240: ADD
16241: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 266
16251: PUSH
16252: LD_INT 1
16254: EQUAL
16255: IFFALSE 16334
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
16257: LD_ADDR_EXP 85
16261: PUSH
16262: LD_EXP 85
16266: PUSH
16267: LD_INT 0
16269: ADD
16270: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16271: LD_ADDR_EXP 85
16275: PUSH
16276: LD_EXP 85
16280: PUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 250
16290: ADD
16291: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16292: LD_ADDR_EXP 85
16296: PUSH
16297: LD_EXP 85
16301: PUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 251
16311: ADD
16312: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16313: LD_ADDR_EXP 85
16317: PUSH
16318: LD_EXP 85
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 254
16332: ADD
16333: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 266
16343: PUSH
16344: LD_INT 3
16346: EQUAL
16347: IFFALSE 16426
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
16349: LD_ADDR_EXP 85
16353: PUSH
16354: LD_EXP 85
16358: PUSH
16359: LD_INT 2
16361: ADD
16362: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16363: LD_ADDR_EXP 85
16367: PUSH
16368: LD_EXP 85
16372: PUSH
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 250
16382: ADD
16383: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16384: LD_ADDR_EXP 85
16388: PUSH
16389: LD_EXP 85
16393: PUSH
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 251
16403: ADD
16404: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16405: LD_ADDR_EXP 85
16409: PUSH
16410: LD_EXP 85
16414: PUSH
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 254
16424: ADD
16425: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16426: LD_VAR 0 1
16430: PPUSH
16431: CALL_OW 266
16435: PUSH
16436: LD_INT 5
16438: EQUAL
16439: IFFALSE 16518
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
16441: LD_ADDR_EXP 85
16445: PUSH
16446: LD_EXP 85
16450: PUSH
16451: LD_INT 4
16453: ADD
16454: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16455: LD_ADDR_EXP 85
16459: PUSH
16460: LD_EXP 85
16464: PUSH
16465: LD_VAR 0 1
16469: PPUSH
16470: CALL_OW 250
16474: ADD
16475: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16476: LD_ADDR_EXP 85
16480: PUSH
16481: LD_EXP 85
16485: PUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 251
16495: ADD
16496: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16497: LD_ADDR_EXP 85
16501: PUSH
16502: LD_EXP 85
16506: PUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 254
16516: ADD
16517: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 255
16527: PUSH
16528: LD_INT 7
16530: EQUAL
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 247
16541: PUSH
16542: LD_INT 3
16544: EQUAL
16545: AND
16546: IFFALSE 17238
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 266
16557: PUSH
16558: LD_INT 31
16560: EQUAL
16561: PUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 266
16571: PUSH
16572: LD_INT 32
16574: EQUAL
16575: OR
16576: PUSH
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 266
16586: PUSH
16587: LD_INT 36
16589: EQUAL
16590: OR
16591: PUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 266
16601: PUSH
16602: LD_INT 0
16604: EQUAL
16605: OR
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 266
16616: PUSH
16617: LD_INT 24
16619: EQUAL
16620: OR
16621: PUSH
16622: LD_VAR 0 1
16626: PPUSH
16627: CALL_OW 266
16631: PUSH
16632: LD_INT 17
16634: EQUAL
16635: OR
16636: PUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 266
16646: PUSH
16647: LD_INT 25
16649: EQUAL
16650: OR
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 266
16661: PUSH
16662: LD_INT 19
16664: EQUAL
16665: OR
16666: PUSH
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 266
16676: PUSH
16677: LD_INT 20
16679: EQUAL
16680: OR
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 266
16691: PUSH
16692: LD_INT 18
16694: EQUAL
16695: OR
16696: PUSH
16697: LD_VAR 0 1
16701: PPUSH
16702: CALL_OW 266
16706: PUSH
16707: LD_INT 21
16709: EQUAL
16710: OR
16711: PUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL_OW 266
16721: PUSH
16722: LD_INT 23
16724: EQUAL
16725: OR
16726: PUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 266
16736: PUSH
16737: LD_INT 16
16739: EQUAL
16740: OR
16741: PUSH
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 266
16751: PUSH
16752: LD_INT 6
16754: EQUAL
16755: OR
16756: PUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 266
16766: PUSH
16767: LD_INT 29
16769: EQUAL
16770: OR
16771: PUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 266
16781: PUSH
16782: LD_INT 26
16784: EQUAL
16785: OR
16786: PUSH
16787: LD_VAR 0 1
16791: PPUSH
16792: CALL_OW 266
16796: PUSH
16797: LD_INT 30
16799: EQUAL
16800: OR
16801: PUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 266
16811: PUSH
16812: LD_INT 28
16814: EQUAL
16815: OR
16816: PUSH
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 266
16826: PUSH
16827: LD_INT 27
16829: EQUAL
16830: OR
16831: PUSH
16832: LD_VAR 0 1
16836: PPUSH
16837: CALL_OW 266
16841: PUSH
16842: LD_INT 33
16844: EQUAL
16845: OR
16846: PUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 266
16856: PUSH
16857: LD_INT 2
16859: EQUAL
16860: OR
16861: PUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 266
16871: PUSH
16872: LD_INT 4
16874: EQUAL
16875: OR
16876: IFFALSE 16962
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
16878: LD_ADDR_EXP 87
16882: PUSH
16883: LD_EXP 87
16887: PUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: CALL_OW 266
16897: ADD
16898: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16899: LD_ADDR_EXP 87
16903: PUSH
16904: LD_EXP 87
16908: PUSH
16909: LD_VAR 0 1
16913: PPUSH
16914: CALL_OW 250
16918: ADD
16919: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
16920: LD_ADDR_EXP 87
16924: PUSH
16925: LD_EXP 87
16929: PUSH
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 251
16939: ADD
16940: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
16941: LD_ADDR_EXP 87
16945: PUSH
16946: LD_EXP 87
16950: PUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 254
16960: ADD
16961: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 266
16971: PUSH
16972: LD_INT 1
16974: EQUAL
16975: IFFALSE 17054
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
16977: LD_ADDR_EXP 87
16981: PUSH
16982: LD_EXP 87
16986: PUSH
16987: LD_INT 0
16989: ADD
16990: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16991: LD_ADDR_EXP 87
16995: PUSH
16996: LD_EXP 87
17000: PUSH
17001: LD_VAR 0 1
17005: PPUSH
17006: CALL_OW 250
17010: ADD
17011: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17012: LD_ADDR_EXP 87
17016: PUSH
17017: LD_EXP 87
17021: PUSH
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 251
17031: ADD
17032: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17033: LD_ADDR_EXP 87
17037: PUSH
17038: LD_EXP 87
17042: PUSH
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 254
17052: ADD
17053: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 266
17063: PUSH
17064: LD_INT 3
17066: EQUAL
17067: IFFALSE 17146
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
17069: LD_ADDR_EXP 87
17073: PUSH
17074: LD_EXP 87
17078: PUSH
17079: LD_INT 2
17081: ADD
17082: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17083: LD_ADDR_EXP 87
17087: PUSH
17088: LD_EXP 87
17092: PUSH
17093: LD_VAR 0 1
17097: PPUSH
17098: CALL_OW 250
17102: ADD
17103: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17104: LD_ADDR_EXP 87
17108: PUSH
17109: LD_EXP 87
17113: PUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 251
17123: ADD
17124: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17125: LD_ADDR_EXP 87
17129: PUSH
17130: LD_EXP 87
17134: PUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: CALL_OW 254
17144: ADD
17145: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17146: LD_VAR 0 1
17150: PPUSH
17151: CALL_OW 266
17155: PUSH
17156: LD_INT 5
17158: EQUAL
17159: IFFALSE 17238
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
17161: LD_ADDR_EXP 87
17165: PUSH
17166: LD_EXP 87
17170: PUSH
17171: LD_INT 4
17173: ADD
17174: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17175: LD_ADDR_EXP 87
17179: PUSH
17180: LD_EXP 87
17184: PUSH
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 250
17194: ADD
17195: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17196: LD_ADDR_EXP 87
17200: PUSH
17201: LD_EXP 87
17205: PUSH
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 251
17215: ADD
17216: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17217: LD_ADDR_EXP 87
17221: PUSH
17222: LD_EXP 87
17226: PUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 254
17236: ADD
17237: ST_TO_ADDR
// end ; end ; end ;
17238: PPOPN 2
17240: END
// on UnitKamikazed ( unit ) do var i ;
17241: LD_INT 0
17243: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 255
17253: PUSH
17254: LD_INT 8
17256: EQUAL
17257: PUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 247
17267: PUSH
17268: LD_INT 2
17270: EQUAL
17271: AND
17272: PUSH
17273: LD_VAR 0 1
17277: PPUSH
17278: CALL_OW 248
17282: PUSH
17283: LD_INT 2
17285: EQUAL
17286: AND
17287: IFFALSE 17337
// begin for i in legionVehicles do
17289: LD_ADDR_VAR 0 2
17293: PUSH
17294: LD_EXP 49
17298: PUSH
17299: FOR_IN
17300: IFFALSE 17335
// if i = unit then
17302: LD_VAR 0 2
17306: PUSH
17307: LD_VAR 0 1
17311: EQUAL
17312: IFFALSE 17333
// legionVehicles = legionVehicles diff [ unit ] ;
17314: LD_ADDR_EXP 49
17318: PUSH
17319: LD_EXP 49
17323: PUSH
17324: LD_VAR 0 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: DIFF
17332: ST_TO_ADDR
17333: GO 17299
17335: POP
17336: POP
// end ; end ;
17337: PPOPN 2
17339: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
17340: LD_VAR 0 2
17344: PPUSH
17345: LD_VAR 0 3
17349: PPUSH
17350: LD_INT 29
17352: PPUSH
17353: CALL_OW 309
17357: IFFALSE 17417
// begin if GetSide ( unit ) = 1 then
17359: LD_VAR 0 1
17363: PPUSH
17364: CALL_OW 255
17368: PUSH
17369: LD_INT 1
17371: EQUAL
17372: IFFALSE 17388
// begin wait ( 0 0$6 ) ;
17374: LD_INT 210
17376: PPUSH
17377: CALL_OW 67
// YouLost ( Motherlode2 ) ;
17381: LD_STRING Motherlode2
17383: PPUSH
17384: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 255
17397: PUSH
17398: LD_INT 8
17400: EQUAL
17401: IFFALSE 17417
// begin wait ( 0 0$6 ) ;
17403: LD_INT 210
17405: PPUSH
17406: CALL_OW 67
// YouLost ( Motherlode1 ) ;
17410: LD_STRING Motherlode1
17412: PPUSH
17413: CALL_OW 104
// end ; end ; end ;
17417: PPOPN 3
17419: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 255
17429: PUSH
17430: LD_INT 2
17432: EQUAL
17433: IFFALSE 17442
// YouLost ( Motherlode3 ) ;
17435: LD_STRING Motherlode3
17437: PPUSH
17438: CALL_OW 104
// end ; end_of_file
17442: PPOPN 3
17444: END
// every 3 3$0 do
17445: GO 17447
17447: DISABLE
// begin enable ;
17448: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17449: LD_ADDR_EXP 80
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 1
17466: PPUSH
17467: LD_INT 2
17469: PPUSH
17470: CALL_OW 12
17474: ARRAY
17475: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17476: LD_INT 22
17478: PUSH
17479: LD_INT 8
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 1
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 69
17504: PUSH
17505: LD_INT 1
17507: GREATER
17508: IFFALSE 17539
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
17510: LD_ADDR_EXP 82
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: LD_INT 8
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 1
17527: PPUSH
17528: LD_INT 2
17530: PPUSH
17531: CALL_OW 12
17535: ARRAY
17536: ST_TO_ADDR
17537: GO 17547
// RussianTarget = 1 ;
17539: LD_ADDR_EXP 82
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17547: LD_INT 22
17549: PUSH
17550: LD_INT 8
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 21
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PPUSH
17571: CALL_OW 69
17575: PUSH
17576: LD_INT 1
17578: GREATER
17579: IFFALSE 17614
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
17581: LD_ADDR_EXP 81
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: LD_INT 3
17591: PUSH
17592: LD_INT 8
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: PPUSH
17603: LD_INT 3
17605: PPUSH
17606: CALL_OW 12
17610: ARRAY
17611: ST_TO_ADDR
17612: GO 17641
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17614: LD_ADDR_EXP 81
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 3
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 1
17631: PPUSH
17632: LD_INT 2
17634: PPUSH
17635: CALL_OW 12
17639: ARRAY
17640: ST_TO_ADDR
// end ;
17641: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
17642: LD_EXP 61
17646: PUSH
17647: LD_INT 1
17649: EQUAL
17650: IFFALSE 18227
17652: GO 17654
17654: DISABLE
17655: LD_INT 0
17657: PPUSH
17658: PPUSH
// begin for i = 1 to 4 do
17659: LD_ADDR_VAR 0 1
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_INT 4
17671: PUSH
17672: FOR_TO
17673: IFFALSE 17713
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
17675: LD_EXP 59
17679: PUSH
17680: LD_VAR 0 1
17684: ARRAY
17685: PPUSH
17686: LD_INT 85
17688: PPUSH
17689: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
17693: LD_EXP 59
17697: PUSH
17698: LD_VAR 0 1
17702: ARRAY
17703: PPUSH
17704: LD_INT 3
17706: PPUSH
17707: CALL_OW 183
// end ;
17711: GO 17672
17713: POP
17714: POP
// wait ( 0 0$1 ) ;
17715: LD_INT 35
17717: PPUSH
17718: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
17722: LD_ADDR_VAR 0 2
17726: PUSH
17727: LD_INT 22
17729: PUSH
17730: LD_INT 4
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 56
17749: PUSH
17750: EMPTY
17751: LIST
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: LD_INT 60
17758: PUSH
17759: EMPTY
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: PUSH
17777: LD_EXP 17
17781: PUSH
17782: EMPTY
17783: LIST
17784: DIFF
17785: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
17786: LD_VAR 0 2
17790: PUSH
17791: LD_INT 1
17793: ARRAY
17794: PPUSH
17795: LD_INT 235
17797: PPUSH
17798: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
17802: LD_VAR 0 2
17806: PUSH
17807: LD_INT 2
17809: ARRAY
17810: PPUSH
17811: LD_INT 2
17813: PPUSH
17814: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
17818: LD_VAR 0 2
17822: PUSH
17823: LD_INT 3
17825: ARRAY
17826: PPUSH
17827: LD_INT 2
17829: PPUSH
17830: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
17834: LD_INT 30
17836: PPUSH
17837: LD_INT 49
17839: PPUSH
17840: LD_INT 4
17842: PPUSH
17843: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
17847: LD_INT 91
17849: PPUSH
17850: LD_INT 10
17852: PPUSH
17853: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
17857: LD_INT 91
17859: PPUSH
17860: LD_INT 11
17862: PPUSH
17863: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
17867: LD_INT 22
17869: PUSH
17870: LD_INT 4
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 25
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: PPUSH
17896: LD_INT 30
17898: PPUSH
17899: LD_INT 30
17901: PPUSH
17902: LD_INT 49
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
17912: LD_INT 22
17914: PUSH
17915: LD_INT 4
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 25
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: PPUSH
17941: LD_INT 32
17943: PPUSH
17944: LD_INT 55
17946: PPUSH
17947: LD_INT 56
17949: PPUSH
17950: LD_INT 4
17952: PPUSH
17953: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
17957: LD_INT 22
17959: PUSH
17960: LD_INT 4
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 25
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: PPUSH
17986: LD_INT 32
17988: PPUSH
17989: LD_INT 63
17991: PPUSH
17992: LD_INT 71
17994: PPUSH
17995: LD_INT 4
17997: PPUSH
17998: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
18002: LD_INT 22
18004: PUSH
18005: LD_INT 4
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 25
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PPUSH
18026: CALL_OW 69
18030: PPUSH
18031: LD_INT 28
18033: PPUSH
18034: LD_INT 40
18036: PPUSH
18037: LD_INT 72
18039: PPUSH
18040: LD_INT 4
18042: PPUSH
18043: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
18047: LD_INT 22
18049: PUSH
18050: LD_INT 4
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 25
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: PPUSH
18076: LD_INT 27
18078: PPUSH
18079: LD_INT 45
18081: PPUSH
18082: LD_INT 73
18084: PPUSH
18085: LD_INT 4
18087: PPUSH
18088: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
18092: LD_INT 22
18094: PUSH
18095: LD_INT 4
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 25
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: PPUSH
18121: LD_INT 18
18123: PPUSH
18124: LD_INT 37
18126: PPUSH
18127: LD_INT 50
18129: PPUSH
18130: LD_INT 2
18132: PPUSH
18133: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
18137: LD_INT 22
18139: PUSH
18140: LD_INT 4
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 25
18149: PUSH
18150: LD_INT 2
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: PPUSH
18166: LD_INT 17
18168: PPUSH
18169: LD_INT 41
18171: PPUSH
18172: LD_INT 51
18174: PPUSH
18175: LD_INT 3
18177: PPUSH
18178: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
18182: LD_INT 22
18184: PUSH
18185: LD_INT 4
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 25
18194: PUSH
18195: LD_INT 2
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: PPUSH
18211: LD_INT 21
18213: PPUSH
18214: LD_INT 38
18216: PPUSH
18217: LD_INT 54
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: CALL_OW 205
// end ;
18227: PPOPN 2
18229: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
18230: LD_INT 22
18232: PUSH
18233: LD_INT 4
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 30
18242: PUSH
18243: LD_INT 8
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PPUSH
18254: CALL_OW 69
18258: PUSH
18259: LD_INT 1
18261: EQUAL
18262: IFFALSE 18412
18264: GO 18266
18266: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18267: LD_INT 85
18269: PPUSH
18270: LD_INT 3
18272: PPUSH
18273: LD_INT 3
18275: PPUSH
18276: LD_INT 1
18278: PPUSH
18279: LD_INT 3
18281: PUSH
18282: LD_INT 5
18284: PUSH
18285: LD_INT 7
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 1
18295: PPUSH
18296: LD_INT 3
18298: PPUSH
18299: CALL_OW 12
18303: ARRAY
18304: PPUSH
18305: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18309: LD_INT 85
18311: PPUSH
18312: LD_INT 3
18314: PPUSH
18315: LD_INT 3
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: LD_INT 3
18323: PUSH
18324: LD_INT 5
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: PPUSH
18338: LD_INT 3
18340: PPUSH
18341: CALL_OW 12
18345: ARRAY
18346: PPUSH
18347: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18351: LD_INT 85
18353: PPUSH
18354: LD_INT 3
18356: PPUSH
18357: LD_INT 3
18359: PPUSH
18360: LD_INT 1
18362: PPUSH
18363: LD_INT 3
18365: PUSH
18366: LD_INT 5
18368: PUSH
18369: LD_INT 7
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: PPUSH
18380: LD_INT 3
18382: PPUSH
18383: CALL_OW 12
18387: ARRAY
18388: PPUSH
18389: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
18393: LD_INT 85
18395: PPUSH
18396: LD_INT 5
18398: PPUSH
18399: LD_INT 3
18401: PPUSH
18402: LD_INT 1
18404: PPUSH
18405: LD_INT 6
18407: PPUSH
18408: CALL_OW 185
// end ;
18412: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
18413: LD_INT 235
18415: PPUSH
18416: LD_INT 10
18418: PPUSH
18419: CALL_OW 308
18423: PUSH
18424: LD_EXP 63
18428: PUSH
18429: LD_INT 1
18431: EQUAL
18432: AND
18433: IFFALSE 18457
18435: GO 18437
18437: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
18438: LD_INT 235
18440: PPUSH
18441: CALL_OW 313
18445: PPUSH
18446: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
18450: LD_INT 84
18452: PPUSH
18453: CALL_OW 146
// end ;
18457: END
// every 0 0$1 trigger legionAI = 1 do
18458: LD_EXP 77
18462: PUSH
18463: LD_INT 1
18465: EQUAL
18466: IFFALSE 18529
18468: GO 18470
18470: DISABLE
// begin enable ;
18471: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
18472: LD_INT 8
18474: PPUSH
18475: LD_INT 99
18477: PPUSH
18478: LD_INT 11
18480: PPUSH
18481: LD_EXP 85
18485: PPUSH
18486: CALL 9372 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
18490: LD_INT 8
18492: PPUSH
18493: LD_INT 20
18495: PPUSH
18496: LD_INT 11
18498: PPUSH
18499: LD_INT 252
18501: PUSH
18502: EMPTY
18503: LIST
18504: PPUSH
18505: CALL 9781 0 4
// AttackNearBuildings ( 8 , 1 ) ;
18509: LD_INT 8
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: CALL 10935 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
18519: LD_INT 8
18521: PPUSH
18522: LD_INT 11
18524: PPUSH
18525: CALL 10507 0 2
// end ;
18529: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
18530: LD_EXP 77
18534: PUSH
18535: LD_INT 1
18537: EQUAL
18538: PUSH
18539: LD_EXP 93
18543: PUSH
18544: LD_INT 1
18546: GREATEREQUAL
18547: AND
18548: PUSH
18549: LD_EXP 49
18553: PUSH
18554: EMPTY
18555: EQUAL
18556: AND
18557: PUSH
18558: LD_INT 117
18560: PPUSH
18561: CALL_OW 302
18565: AND
18566: PUSH
18567: LD_INT 117
18569: PPUSH
18570: CALL_OW 255
18574: PUSH
18575: LD_INT 8
18577: EQUAL
18578: AND
18579: IFFALSE 18642
18581: GO 18583
18583: DISABLE
// begin enable ;
18584: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
18585: LD_INT 8
18587: PPUSH
18588: LD_INT 117
18590: PPUSH
18591: LD_INT 5
18593: PUSH
18594: LD_INT 6
18596: PUSH
18597: LD_INT 7
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: PUSH
18605: LD_OWVAR 67
18609: ARRAY
18610: PPUSH
18611: LD_INT 27
18613: PUSH
18614: LD_INT 28
18616: PUSH
18617: LD_INT 25
18619: PUSH
18620: LD_INT 29
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: PPUSH
18629: LD_INT 3
18631: PPUSH
18632: LD_INT 2
18634: PPUSH
18635: LD_INT 14
18637: PPUSH
18638: CALL 11165 0 7
// end ;
18642: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
18643: LD_EXP 77
18647: PUSH
18648: LD_INT 1
18650: EQUAL
18651: PUSH
18652: LD_EXP 93
18656: PUSH
18657: LD_INT 1
18659: GREATEREQUAL
18660: AND
18661: PUSH
18662: LD_EXP 49
18666: PUSH
18667: LD_INT 5
18669: PUSH
18670: LD_INT 6
18672: PUSH
18673: LD_INT 7
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: PUSH
18681: LD_OWVAR 67
18685: ARRAY
18686: EQUAL
18687: AND
18688: IFFALSE 18706
18690: GO 18692
18692: DISABLE
// begin enable ;
18693: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
18694: LD_EXP 80
18698: PPUSH
18699: LD_INT 1
18701: PPUSH
18702: CALL 11239 0 2
// end ;
18706: END
// every 0 0$1 do
18707: GO 18709
18709: DISABLE
// begin enable ;
18710: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
18711: LD_INT 6
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL 12171 0 2
// end ;
18721: END
// every 0 0$1 trigger RussianAI = 1 do
18722: LD_EXP 79
18726: PUSH
18727: LD_INT 1
18729: EQUAL
18730: IFFALSE 18809
18732: GO 18734
18734: DISABLE
// begin enable ;
18735: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
18736: LD_INT 3
18738: PPUSH
18739: LD_INT 26
18741: PPUSH
18742: LD_INT 21
18744: PPUSH
18745: LD_EXP 86
18749: PPUSH
18750: CALL 9372 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
18754: LD_INT 3
18756: PPUSH
18757: LD_INT 22
18759: PPUSH
18760: LD_INT 21
18762: PPUSH
18763: LD_INT 2
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL 9781 0 4
// AttackNearBuildings ( 3 , 1 ) ;
18777: LD_INT 3
18779: PPUSH
18780: LD_INT 1
18782: PPUSH
18783: CALL 10935 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
18787: LD_INT 3
18789: PPUSH
18790: LD_EXP 82
18794: PPUSH
18795: CALL 12171 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
18799: LD_INT 3
18801: PPUSH
18802: LD_INT 21
18804: PPUSH
18805: CALL 10507 0 2
// end ;
18809: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
18810: LD_EXP 79
18814: PUSH
18815: LD_INT 1
18817: EQUAL
18818: PUSH
18819: LD_EXP 93
18823: PUSH
18824: LD_INT 3
18826: GREATEREQUAL
18827: AND
18828: PUSH
18829: LD_EXP 55
18833: PUSH
18834: EMPTY
18835: EQUAL
18836: AND
18837: PUSH
18838: LD_INT 10
18840: PPUSH
18841: CALL_OW 302
18845: AND
18846: PUSH
18847: LD_INT 10
18849: PPUSH
18850: CALL_OW 255
18854: PUSH
18855: LD_INT 3
18857: EQUAL
18858: AND
18859: PUSH
18860: LD_INT 4
18862: PPUSH
18863: CALL_OW 302
18867: AND
18868: PUSH
18869: LD_INT 4
18871: PPUSH
18872: CALL_OW 255
18876: PUSH
18877: LD_INT 3
18879: EQUAL
18880: AND
18881: IFFALSE 19001
18883: GO 18885
18885: DISABLE
// begin enable ;
18886: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
18887: LD_INT 3
18889: PPUSH
18890: LD_INT 4
18892: PPUSH
18893: LD_INT 4
18895: PUSH
18896: LD_INT 5
18898: PUSH
18899: LD_INT 6
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: PUSH
18907: LD_OWVAR 67
18911: ARRAY
18912: PPUSH
18913: LD_INT 45
18915: PUSH
18916: LD_INT 46
18918: PUSH
18919: LD_INT 47
18921: PUSH
18922: LD_INT 49
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: PPUSH
18931: LD_INT 3
18933: PPUSH
18934: LD_INT 3
18936: PPUSH
18937: LD_INT 24
18939: PPUSH
18940: CALL 11165 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
18944: LD_INT 3
18946: PPUSH
18947: LD_INT 10
18949: PPUSH
18950: LD_INT 4
18952: PUSH
18953: LD_INT 5
18955: PUSH
18956: LD_INT 6
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: PUSH
18964: LD_OWVAR 67
18968: ARRAY
18969: PPUSH
18970: LD_INT 45
18972: PUSH
18973: LD_INT 46
18975: PUSH
18976: LD_INT 47
18978: PUSH
18979: LD_INT 49
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: PPUSH
18988: LD_INT 3
18990: PPUSH
18991: LD_INT 3
18993: PPUSH
18994: LD_INT 24
18996: PPUSH
18997: CALL 11165 0 7
// end ;
19001: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19002: LD_EXP 79
19006: PUSH
19007: LD_INT 1
19009: EQUAL
19010: PUSH
19011: LD_EXP 93
19015: PUSH
19016: LD_INT 3
19018: GREATEREQUAL
19019: AND
19020: PUSH
19021: LD_EXP 55
19025: PUSH
19026: LD_INT 8
19028: PUSH
19029: LD_INT 10
19031: PUSH
19032: LD_INT 12
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: LD_OWVAR 67
19044: ARRAY
19045: EQUAL
19046: AND
19047: IFFALSE 19159
19049: GO 19051
19051: DISABLE
// begin enable ;
19052: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19053: LD_INT 22
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 21
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: LD_INT 34
19078: PUSH
19079: LD_INT 48
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 3
19092: PUSH
19093: LD_INT 60
19095: PUSH
19096: EMPTY
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: PPUSH
19109: CALL_OW 69
19113: PPUSH
19114: LD_INT 24
19116: PUSH
19117: LD_INT 25
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_INT 2
19129: PPUSH
19130: CALL_OW 12
19134: ARRAY
19135: PPUSH
19136: CALL_OW 120
// wait ( 0 0$20 ) ;
19140: LD_INT 700
19142: PPUSH
19143: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19147: LD_EXP 82
19151: PPUSH
19152: LD_INT 2
19154: PPUSH
19155: CALL 11239 0 2
// end ;
19159: END
// every 0 0$1 trigger AllianceAI = 1 do
19160: LD_EXP 78
19164: PUSH
19165: LD_INT 1
19167: EQUAL
19168: IFFALSE 19251
19170: GO 19172
19172: DISABLE
// begin enable ;
19173: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19174: LD_INT 7
19176: PPUSH
19177: LD_INT 45
19179: PPUSH
19180: LD_INT 23
19182: PPUSH
19183: LD_EXP 87
19187: PPUSH
19188: CALL 9372 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
19192: LD_INT 7
19194: PPUSH
19195: LD_INT 24
19197: PPUSH
19198: LD_INT 23
19200: PPUSH
19201: LD_INT 46
19203: PUSH
19204: LD_INT 39
19206: PUSH
19207: LD_INT 133
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: PPUSH
19215: CALL 9781 0 4
// AttackNearBuildings ( 7 , 1 ) ;
19219: LD_INT 7
19221: PPUSH
19222: LD_INT 1
19224: PPUSH
19225: CALL 10935 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
19229: LD_INT 7
19231: PPUSH
19232: LD_EXP 81
19236: PPUSH
19237: CALL 12171 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
19241: LD_INT 7
19243: PPUSH
19244: LD_INT 23
19246: PPUSH
19247: CALL 10507 0 2
// end ;
19251: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
19252: LD_EXP 78
19256: PUSH
19257: LD_INT 1
19259: EQUAL
19260: PUSH
19261: LD_EXP 93
19265: PUSH
19266: LD_INT 4
19268: GREATEREQUAL
19269: AND
19270: PUSH
19271: LD_EXP 56
19275: PUSH
19276: EMPTY
19277: EQUAL
19278: AND
19279: PUSH
19280: LD_INT 156
19282: PPUSH
19283: CALL_OW 302
19287: AND
19288: PUSH
19289: LD_INT 156
19291: PPUSH
19292: CALL_OW 255
19296: PUSH
19297: LD_INT 7
19299: EQUAL
19300: AND
19301: PUSH
19302: LD_INT 162
19304: PPUSH
19305: CALL_OW 302
19309: AND
19310: PUSH
19311: LD_INT 162
19313: PPUSH
19314: CALL_OW 255
19318: PUSH
19319: LD_INT 7
19321: EQUAL
19322: AND
19323: IFFALSE 19439
19325: GO 19327
19327: DISABLE
// begin enable ;
19328: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
19329: LD_INT 3
19331: PPUSH
19332: LD_INT 156
19334: PPUSH
19335: LD_INT 3
19337: PUSH
19338: LD_INT 3
19340: PUSH
19341: LD_INT 4
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: LD_OWVAR 67
19353: ARRAY
19354: PPUSH
19355: LD_INT 9
19357: PUSH
19358: LD_INT 10
19360: PUSH
19361: LD_INT 7
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: PPUSH
19369: LD_INT 3
19371: PPUSH
19372: LD_INT 2
19374: PPUSH
19375: LD_INT 5
19377: PPUSH
19378: CALL 11165 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19382: LD_INT 3
19384: PPUSH
19385: LD_INT 162
19387: PPUSH
19388: LD_INT 2
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 3
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_OWVAR 67
19406: ARRAY
19407: PPUSH
19408: LD_INT 45
19410: PUSH
19411: LD_INT 46
19413: PUSH
19414: LD_INT 47
19416: PUSH
19417: LD_INT 49
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: PPUSH
19426: LD_INT 3
19428: PPUSH
19429: LD_INT 3
19431: PPUSH
19432: LD_INT 24
19434: PPUSH
19435: CALL 11165 0 7
// end ;
19439: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
19440: LD_EXP 78
19444: PUSH
19445: LD_INT 1
19447: EQUAL
19448: PUSH
19449: LD_EXP 93
19453: PUSH
19454: LD_INT 4
19456: GREATEREQUAL
19457: AND
19458: PUSH
19459: LD_EXP 56
19463: PUSH
19464: LD_INT 5
19466: PUSH
19467: LD_INT 5
19469: PUSH
19470: LD_INT 7
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: PUSH
19478: LD_OWVAR 67
19482: ARRAY
19483: EQUAL
19484: AND
19485: IFFALSE 19544
19487: GO 19489
19489: DISABLE
19490: LD_INT 0
19492: PPUSH
// begin for i in AllianceVehicles do
19493: LD_ADDR_VAR 0 1
19497: PUSH
19498: LD_EXP 56
19502: PUSH
19503: FOR_IN
19504: IFFALSE 19529
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: LD_INT 117
19513: PPUSH
19514: LD_INT 112
19516: PPUSH
19517: LD_INT 10
19519: PPUSH
19520: LD_INT 1
19522: PPUSH
19523: CALL_OW 483
19527: GO 19503
19529: POP
19530: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
19531: LD_EXP 81
19535: PPUSH
19536: LD_INT 3
19538: PPUSH
19539: CALL 11239 0 2
// enable ;
19543: ENABLE
// end ;
19544: PPOPN 1
19546: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
19547: LD_EXP 78
19551: PUSH
19552: LD_INT 1
19554: EQUAL
19555: PUSH
19556: LD_EXP 93
19560: PUSH
19561: LD_INT 4
19563: GREATEREQUAL
19564: AND
19565: IFFALSE 19746
19567: GO 19569
19569: DISABLE
19570: LD_INT 0
19572: PPUSH
// begin enable ;
19573: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
19574: LD_ADDR_VAR 0 1
19578: PUSH
19579: LD_INT 22
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 21
19591: PUSH
19592: LD_INT 3
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: LD_INT 30
19604: PUSH
19605: LD_INT 30
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 30
19614: PUSH
19615: LD_INT 28
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 30
19624: PUSH
19625: LD_INT 21
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: PPUSH
19643: CALL_OW 69
19647: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
19648: LD_ADDR_VAR 0 1
19652: PUSH
19653: LD_VAR 0 1
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 21
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 32
19680: PUSH
19681: LD_INT 3
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: LIST
19692: PPUSH
19693: CALL_OW 69
19697: ADD
19698: ST_TO_ADDR
// if tmp = [ ] then
19699: LD_VAR 0 1
19703: PUSH
19704: EMPTY
19705: EQUAL
19706: IFFALSE 19710
// exit ;
19708: GO 19746
// if tmp > 0 then
19710: LD_VAR 0 1
19714: PUSH
19715: LD_INT 0
19717: GREATER
19718: IFFALSE 19746
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
19720: LD_VAR 0 1
19724: PUSH
19725: LD_INT 1
19727: PPUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 12
19737: ARRAY
19738: PPUSH
19739: LD_INT 0
19741: PPUSH
19742: CALL_OW 234
// end ;
19746: PPOPN 1
19748: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
19749: LD_EXP 77
19753: PUSH
19754: LD_INT 1
19756: EQUAL
19757: PUSH
19758: LD_INT 22
19760: PUSH
19761: LD_INT 8
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 21
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: LD_INT 61
19783: PUSH
19784: EMPTY
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: PPUSH
19796: CALL_OW 69
19800: PUSH
19801: LD_INT 0
19803: GREATER
19804: AND
19805: IFFALSE 19887
19807: GO 19809
19809: DISABLE
19810: LD_INT 0
19812: PPUSH
// begin enable ;
19813: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
19814: LD_ADDR_VAR 0 1
19818: PUSH
19819: LD_INT 22
19821: PUSH
19822: LD_INT 8
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 21
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 3
19841: PUSH
19842: LD_INT 61
19844: PUSH
19845: EMPTY
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: LIST
19856: PPUSH
19857: CALL_OW 69
19861: PUSH
19862: FOR_IN
19863: IFFALSE 19885
// ComLinkTo ( i , arControler [ 1 ] ) ;
19865: LD_VAR 0 1
19869: PPUSH
19870: LD_EXP 50
19874: PUSH
19875: LD_INT 1
19877: ARRAY
19878: PPUSH
19879: CALL_OW 135
19883: GO 19862
19885: POP
19886: POP
// end ;
19887: PPOPN 1
19889: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
19890: LD_EXP 78
19894: PUSH
19895: LD_INT 1
19897: EQUAL
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_INT 7
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 21
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 3
19921: PUSH
19922: LD_INT 61
19924: PUSH
19925: EMPTY
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: PPUSH
19937: CALL_OW 69
19941: PUSH
19942: LD_INT 0
19944: GREATER
19945: AND
19946: IFFALSE 20036
19948: GO 19950
19950: DISABLE
19951: LD_INT 0
19953: PPUSH
// begin enable ;
19954: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
19955: LD_ADDR_VAR 0 1
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_INT 7
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 21
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 3
19982: PUSH
19983: LD_INT 61
19985: PUSH
19986: EMPTY
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: PPUSH
19998: CALL_OW 69
20002: PUSH
20003: FOR_IN
20004: IFFALSE 20034
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20006: LD_VAR 0 1
20010: PPUSH
20011: LD_EXP 57
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_INT 3
20021: PPUSH
20022: CALL_OW 12
20026: ARRAY
20027: PPUSH
20028: CALL_OW 135
20032: GO 20003
20034: POP
20035: POP
// end ; end_of_file
20036: PPOPN 1
20038: END
// every 0 0$1 trigger timerStatus = 1 do
20039: LD_EXP 88
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: IFFALSE 20084
20049: GO 20051
20051: DISABLE
// begin enable ;
20052: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20053: LD_ADDR_OWVAR 47
20057: PUSH
20058: LD_STRING #Am15-1
20060: PUSH
20061: LD_EXP 89
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20070: LD_ADDR_EXP 89
20074: PUSH
20075: LD_EXP 89
20079: PUSH
20080: LD_INT 35
20082: PLUS
20083: ST_TO_ADDR
// end ; end_of_file
20084: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20085: LD_EXP 65
20089: PUSH
20090: LD_INT 1
20092: EQUAL
20093: PUSH
20094: LD_EXP 93
20098: PUSH
20099: LD_INT 0
20101: EQUAL
20102: AND
20103: PUSH
20104: LD_EXP 83
20108: PUSH
20109: LD_INT 0
20111: EQUAL
20112: AND
20113: IFFALSE 20173
20115: GO 20117
20117: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20118: LD_INT 2
20120: PPUSH
20121: LD_INT 6
20123: PPUSH
20124: LD_INT 2
20126: PPUSH
20127: LD_INT 4
20129: PPUSH
20130: CALL_OW 12
20134: PPUSH
20135: LD_INT 10
20137: PPUSH
20138: LD_INT 3
20140: PPUSH
20141: LD_INT 3
20143: PPUSH
20144: LD_INT 3
20146: PPUSH
20147: LD_INT 42
20149: PUSH
20150: LD_INT 43
20152: PUSH
20153: LD_INT 44
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: PPUSH
20161: EMPTY
20162: PPUSH
20163: EMPTY
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL 7602 0 11
// enable ;
20172: ENABLE
// end ;
20173: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20174: LD_EXP 65
20178: PUSH
20179: LD_INT 1
20181: EQUAL
20182: PUSH
20183: LD_EXP 93
20187: PUSH
20188: LD_INT 1
20190: EQUAL
20191: AND
20192: PUSH
20193: LD_EXP 83
20197: PUSH
20198: LD_INT 0
20200: EQUAL
20201: AND
20202: IFFALSE 20262
20204: GO 20206
20206: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20207: LD_INT 2
20209: PPUSH
20210: LD_INT 6
20212: PPUSH
20213: LD_INT 4
20215: PPUSH
20216: LD_INT 6
20218: PPUSH
20219: CALL_OW 12
20223: PPUSH
20224: LD_INT 10
20226: PPUSH
20227: LD_INT 3
20229: PPUSH
20230: LD_INT 3
20232: PPUSH
20233: LD_INT 3
20235: PPUSH
20236: LD_INT 44
20238: PUSH
20239: LD_INT 45
20241: PUSH
20242: LD_INT 46
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: LIST
20249: PPUSH
20250: EMPTY
20251: PPUSH
20252: EMPTY
20253: PPUSH
20254: LD_INT 1
20256: PPUSH
20257: CALL 7602 0 11
// enable ;
20261: ENABLE
// end ;
20262: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
20263: LD_EXP 65
20267: PUSH
20268: LD_INT 1
20270: EQUAL
20271: PUSH
20272: LD_EXP 93
20276: PUSH
20277: LD_INT 3
20279: EQUAL
20280: AND
20281: PUSH
20282: LD_EXP 83
20286: PUSH
20287: LD_INT 0
20289: EQUAL
20290: AND
20291: IFFALSE 20355
20293: GO 20295
20295: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
20296: LD_INT 2
20298: PPUSH
20299: LD_INT 6
20301: PPUSH
20302: LD_INT 4
20304: PPUSH
20305: LD_INT 8
20307: PPUSH
20308: CALL_OW 12
20312: PPUSH
20313: LD_INT 10
20315: PPUSH
20316: LD_INT 3
20318: PPUSH
20319: LD_INT 3
20321: PPUSH
20322: LD_INT 3
20324: PPUSH
20325: LD_INT 44
20327: PUSH
20328: LD_INT 45
20330: PUSH
20331: LD_INT 46
20333: PUSH
20334: LD_INT 47
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: PPUSH
20343: EMPTY
20344: PPUSH
20345: EMPTY
20346: PPUSH
20347: LD_INT 1
20349: PPUSH
20350: CALL 7602 0 11
// enable ;
20354: ENABLE
// end ;
20355: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
20356: LD_EXP 65
20360: PUSH
20361: LD_INT 1
20363: EQUAL
20364: PUSH
20365: LD_EXP 93
20369: PUSH
20370: LD_INT 4
20372: GREATEREQUAL
20373: AND
20374: PUSH
20375: LD_EXP 83
20379: PUSH
20380: LD_INT 0
20382: EQUAL
20383: AND
20384: IFFALSE 20444
20386: GO 20388
20388: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
20389: LD_INT 2
20391: PPUSH
20392: LD_INT 6
20394: PPUSH
20395: LD_INT 4
20397: PPUSH
20398: LD_INT 8
20400: PPUSH
20401: CALL_OW 12
20405: PPUSH
20406: LD_INT 10
20408: PPUSH
20409: LD_INT 3
20411: PPUSH
20412: LD_INT 3
20414: PPUSH
20415: LD_INT 3
20417: PPUSH
20418: LD_INT 46
20420: PUSH
20421: LD_INT 47
20423: PUSH
20424: LD_INT 49
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: PPUSH
20432: EMPTY
20433: PPUSH
20434: EMPTY
20435: PPUSH
20436: LD_INT 1
20438: PPUSH
20439: CALL 7602 0 11
// enable ;
20443: ENABLE
// end ; end_of_file
20444: END
// every 1 do var i , dec1 , options , people ;
20445: GO 20447
20447: DISABLE
20448: LD_INT 0
20450: PPUSH
20451: PPUSH
20452: PPUSH
20453: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
20454: LD_INT 24
20456: PPUSH
20457: LD_INT 92
20459: PPUSH
20460: LD_INT 172
20462: PPUSH
20463: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
20467: LD_INT 25
20469: PPUSH
20470: LD_INT 103
20472: PPUSH
20473: LD_INT 74
20475: PPUSH
20476: CALL_OW 243
// InGameOn ;
20480: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20484: LD_EXP 24
20488: PUSH
20489: LD_EXP 25
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PPUSH
20498: LD_INT 60
20500: PPUSH
20501: LD_INT 75
20503: PPUSH
20504: CALL_OW 111
// if KappaStatus = 0 then
20508: LD_EXP 74
20512: PUSH
20513: LD_INT 0
20515: EQUAL
20516: IFFALSE 20805
// begin CenterNowOnUnits ( NewJMMVeh ) ;
20518: LD_EXP 24
20522: PPUSH
20523: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
20527: LD_EXP 1
20531: PPUSH
20532: LD_STRING D1T-JMM-1
20534: PPUSH
20535: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20539: LD_EXP 24
20543: PPUSH
20544: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
20548: LD_EXP 17
20552: PPUSH
20553: LD_STRING D1T-Pow-1
20555: PPUSH
20556: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20560: LD_EXP 24
20564: PPUSH
20565: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
20569: LD_EXP 1
20573: PPUSH
20574: LD_STRING D1T-JMM-2
20576: PPUSH
20577: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20581: LD_EXP 24
20585: PPUSH
20586: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
20590: LD_EXP 17
20594: PPUSH
20595: LD_STRING D1T-Pow-2
20597: PPUSH
20598: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20602: LD_EXP 24
20606: PPUSH
20607: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
20611: LD_EXP 1
20615: PPUSH
20616: LD_STRING D1T-JMM-3
20618: PPUSH
20619: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20623: LD_EXP 24
20627: PPUSH
20628: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
20632: LD_EXP 17
20636: PPUSH
20637: LD_STRING D1T-Pow-3
20639: PPUSH
20640: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20644: LD_EXP 24
20648: PPUSH
20649: CALL_OW 87
// if not JMMGirlVeh = [ ] then
20653: LD_EXP 72
20657: PUSH
20658: EMPTY
20659: EQUAL
20660: NOT
20661: IFFALSE 20761
// begin if JMMGirl = 1 then
20663: LD_EXP 73
20667: PUSH
20668: LD_INT 1
20670: EQUAL
20671: IFFALSE 20685
// Say ( Joan , D1T-Joan-3 ) ;
20673: LD_EXP 2
20677: PPUSH
20678: LD_STRING D1T-Joan-3
20680: PPUSH
20681: CALL_OW 88
// if JMMGirl = 2 then
20685: LD_EXP 73
20689: PUSH
20690: LD_INT 2
20692: EQUAL
20693: IFFALSE 20707
// Say ( Lisa , D1T-Lisa-3 ) ;
20695: LD_EXP 4
20699: PPUSH
20700: LD_STRING D1T-Lisa-3
20702: PPUSH
20703: CALL_OW 88
// if JMMGirl = 3 then
20707: LD_EXP 73
20711: PUSH
20712: LD_INT 3
20714: EQUAL
20715: IFFALSE 20729
// Say ( Connie , D1T-Con-3 ) ;
20717: LD_EXP 16
20721: PPUSH
20722: LD_STRING D1T-Con-3
20724: PPUSH
20725: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20729: LD_EXP 24
20733: PPUSH
20734: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
20738: LD_EXP 17
20742: PPUSH
20743: LD_STRING D1T-Pow-4
20745: PPUSH
20746: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20750: LD_EXP 24
20754: PPUSH
20755: CALL_OW 87
// end else
20759: GO 20803
// begin Say ( JMM , D1T-JMM-4 ) ;
20761: LD_EXP 1
20765: PPUSH
20766: LD_STRING D1T-JMM-4
20768: PPUSH
20769: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20773: LD_EXP 24
20777: PPUSH
20778: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
20782: LD_EXP 17
20786: PPUSH
20787: LD_STRING D1T-Pow-5
20789: PPUSH
20790: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20794: LD_EXP 24
20798: PPUSH
20799: CALL_OW 87
// end ; end else
20803: GO 20889
// begin CenterNowOnUnits ( NewJMMVeh ) ;
20805: LD_EXP 24
20809: PPUSH
20810: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
20814: LD_EXP 1
20818: PPUSH
20819: LD_STRING D1T-JMM-1
20821: PPUSH
20822: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20826: LD_EXP 24
20830: PPUSH
20831: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
20835: LD_EXP 17
20839: PPUSH
20840: LD_STRING D1T-Pow-1
20842: PPUSH
20843: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20847: LD_EXP 24
20851: PPUSH
20852: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
20856: LD_EXP 1
20860: PPUSH
20861: LD_STRING D1T-JMM-2
20863: PPUSH
20864: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20868: LD_EXP 24
20872: PPUSH
20873: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
20877: LD_EXP 17
20881: PPUSH
20882: LD_STRING D1T-Pow-2
20884: PPUSH
20885: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
20889: LD_INT 35
20891: PPUSH
20892: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20896: LD_EXP 24
20900: PUSH
20901: LD_EXP 25
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PPUSH
20910: LD_INT 60
20912: PPUSH
20913: LD_INT 75
20915: PPUSH
20916: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
20920: LD_EXP 24
20924: PPUSH
20925: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
20929: LD_EXP 24
20933: PPUSH
20934: LD_EXP 17
20938: PPUSH
20939: CALL_OW 296
20943: PUSH
20944: LD_INT 20
20946: LESS
20947: PUSH
20948: LD_EXP 24
20952: PPUSH
20953: CALL_OW 314
20957: NOT
20958: OR
20959: IFFALSE 20889
// ComExitVehicle ( JMM ) ;
20961: LD_EXP 1
20965: PPUSH
20966: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
20970: LD_INT 35
20972: PPUSH
20973: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
20977: LD_EXP 1
20981: PPUSH
20982: LD_EXP 17
20986: PPUSH
20987: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
20991: LD_EXP 1
20995: PPUSH
20996: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21000: LD_EXP 1
21004: PPUSH
21005: LD_EXP 17
21009: PPUSH
21010: CALL_OW 296
21014: PUSH
21015: LD_INT 6
21017: LESS
21018: IFFALSE 20970
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21020: LD_EXP 1
21024: PUSH
21025: LD_EXP 17
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PPUSH
21034: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21038: LD_EXP 1
21042: PPUSH
21043: LD_EXP 17
21047: PPUSH
21048: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21052: LD_EXP 17
21056: PPUSH
21057: LD_EXP 1
21061: PPUSH
21062: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21066: LD_EXP 1
21070: PPUSH
21071: LD_STRING D1-JMM-1
21073: PPUSH
21074: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21078: LD_EXP 17
21082: PPUSH
21083: LD_STRING D1-Pow-1
21085: PPUSH
21086: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21090: LD_INT 1
21092: PPUSH
21093: LD_INT 3
21095: PPUSH
21096: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21100: LD_INT 1
21102: PPUSH
21103: LD_INT 4
21105: PPUSH
21106: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21110: LD_INT 1
21112: PPUSH
21113: LD_INT 5
21115: PPUSH
21116: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21120: LD_INT 171
21122: PPUSH
21123: LD_INT 81
21125: PPUSH
21126: CALL_OW 84
// wait ( 0 0$4 ) ;
21130: LD_INT 140
21132: PPUSH
21133: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21137: LD_INT 162
21139: PPUSH
21140: LD_INT 36
21142: PPUSH
21143: CALL_OW 84
// wait ( 0 0$4 ) ;
21147: LD_INT 140
21149: PPUSH
21150: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21154: LD_INT 75
21156: PPUSH
21157: LD_INT 16
21159: PPUSH
21160: CALL_OW 84
// wait ( 0 0$4 ) ;
21164: LD_INT 140
21166: PPUSH
21167: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21171: LD_EXP 17
21175: PUSH
21176: LD_EXP 1
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PPUSH
21185: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
21189: LD_EXP 1
21193: PPUSH
21194: LD_STRING D1-JMM-2
21196: PPUSH
21197: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
21201: LD_EXP 17
21205: PPUSH
21206: LD_STRING D1-Pow-2
21208: PPUSH
21209: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
21213: LD_EXP 1
21217: PPUSH
21218: LD_STRING D1-JMM-3
21220: PPUSH
21221: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
21225: LD_EXP 17
21229: PPUSH
21230: LD_STRING D1-Pow-3
21232: PPUSH
21233: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
21237: LD_EXP 1
21241: PPUSH
21242: LD_STRING D1-JMM-4
21244: PPUSH
21245: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
21249: LD_EXP 17
21253: PPUSH
21254: LD_STRING D1-Pow-4
21256: PPUSH
21257: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
21261: LD_EXP 1
21265: PPUSH
21266: LD_STRING D1-JMM-5
21268: PPUSH
21269: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
21273: LD_EXP 17
21277: PPUSH
21278: LD_STRING D1-Pow-5
21280: PPUSH
21281: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
21285: LD_ADDR_VAR 0 3
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: LD_INT 3
21298: PUSH
21299: LD_INT 4
21301: PUSH
21302: LD_INT 5
21304: PUSH
21305: LD_INT 6
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
21316: LD_ADDR_VAR 0 2
21320: PUSH
21321: LD_STRING Q1
21323: PPUSH
21324: LD_VAR 0 3
21328: PPUSH
21329: CALL_OW 98
21333: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
21334: LD_ADDR_VAR 0 2
21338: PUSH
21339: LD_STRING Q1
21341: PPUSH
21342: LD_VAR 0 3
21346: PPUSH
21347: CALL_OW 98
21351: ST_TO_ADDR
// options = options diff dec1 ;
21352: LD_ADDR_VAR 0 3
21356: PUSH
21357: LD_VAR 0 3
21361: PUSH
21362: LD_VAR 0 2
21366: DIFF
21367: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
21368: LD_VAR 0 2
21372: PPUSH
21373: LD_VAR 0 3
21377: PPUSH
21378: CALL 22912 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
21382: LD_VAR 0 2
21386: PUSH
21387: LD_INT 5
21389: PUSH
21390: LD_INT 6
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: IN
21397: PUSH
21398: LD_VAR 0 3
21402: PUSH
21403: LD_INT 2
21405: EQUAL
21406: OR
21407: IFFALSE 21334
// if not ( dec1 in [ 5 , 6 ] ) then
21409: LD_VAR 0 2
21413: PUSH
21414: LD_INT 5
21416: PUSH
21417: LD_INT 6
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: IN
21424: NOT
21425: IFFALSE 21468
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
21427: LD_ADDR_VAR 0 2
21431: PUSH
21432: LD_STRING Q1a
21434: PPUSH
21435: LD_INT 1
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PPUSH
21445: CALL_OW 98
21449: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
21450: LD_VAR 0 2
21454: PUSH
21455: LD_INT 4
21457: PLUS
21458: PPUSH
21459: LD_VAR 0 3
21463: PPUSH
21464: CALL 22912 0 2
// end ; if not JMMGirlVeh = [ ] then
21468: LD_EXP 72
21472: PUSH
21473: EMPTY
21474: EQUAL
21475: NOT
21476: IFFALSE 21638
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
21478: LD_EXP 25
21482: PPUSH
21483: CALL_OW 313
21487: PPUSH
21488: CALL_OW 121
// wait ( 0 0$1 ) ;
21492: LD_INT 35
21494: PPUSH
21495: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21499: LD_INT 35
21501: PPUSH
21502: CALL_OW 67
// if JMMGirl = 1 then
21506: LD_EXP 73
21510: PUSH
21511: LD_INT 1
21513: EQUAL
21514: IFFALSE 21530
// ComMoveUnit ( JMM , Joan ) ;
21516: LD_EXP 1
21520: PPUSH
21521: LD_EXP 2
21525: PPUSH
21526: CALL_OW 112
// if JMMGirl = 2 then
21530: LD_EXP 73
21534: PUSH
21535: LD_INT 2
21537: EQUAL
21538: IFFALSE 21554
// ComMoveUnit ( JMM , Lisa ) ;
21540: LD_EXP 1
21544: PPUSH
21545: LD_EXP 4
21549: PPUSH
21550: CALL_OW 112
// if JMMGirl = 3 then
21554: LD_EXP 73
21558: PUSH
21559: LD_INT 3
21561: EQUAL
21562: IFFALSE 21578
// ComMoveUnit ( JMM , Connie ) ;
21564: LD_EXP 1
21568: PPUSH
21569: LD_EXP 16
21573: PPUSH
21574: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
21578: LD_EXP 1
21582: PPUSH
21583: LD_EXP 2
21587: PPUSH
21588: CALL_OW 296
21592: PUSH
21593: LD_INT 6
21595: LESS
21596: PUSH
21597: LD_EXP 1
21601: PPUSH
21602: LD_EXP 4
21606: PPUSH
21607: CALL_OW 296
21611: PUSH
21612: LD_INT 6
21614: LESS
21615: OR
21616: PUSH
21617: LD_EXP 1
21621: PPUSH
21622: LD_EXP 16
21626: PPUSH
21627: CALL_OW 296
21631: PUSH
21632: LD_INT 6
21634: LESS
21635: OR
21636: IFFALSE 21499
// end ; CenterNowOnUnits ( JMM ) ;
21638: LD_EXP 1
21642: PPUSH
21643: CALL_OW 87
// case JMMGirl of 1 :
21647: LD_EXP 73
21651: PUSH
21652: LD_INT 1
21654: DOUBLE
21655: EQUAL
21656: IFTRUE 21660
21658: GO 21715
21660: POP
// begin ComTurnUnit ( JMM , Joan ) ;
21661: LD_EXP 1
21665: PPUSH
21666: LD_EXP 2
21670: PPUSH
21671: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
21675: LD_EXP 2
21679: PPUSH
21680: LD_EXP 1
21684: PPUSH
21685: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
21689: LD_EXP 2
21693: PPUSH
21694: LD_STRING D3W-Joan-1
21696: PPUSH
21697: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21701: LD_EXP 1
21705: PPUSH
21706: LD_STRING D3W-JMM-1
21708: PPUSH
21709: CALL_OW 88
// end ; 2 :
21713: GO 21842
21715: LD_INT 2
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21778
21723: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
21724: LD_EXP 1
21728: PPUSH
21729: LD_EXP 4
21733: PPUSH
21734: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
21738: LD_EXP 4
21742: PPUSH
21743: LD_EXP 1
21747: PPUSH
21748: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
21752: LD_EXP 4
21756: PPUSH
21757: LD_STRING D3W-Lisa-1
21759: PPUSH
21760: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21764: LD_EXP 1
21768: PPUSH
21769: LD_STRING D3W-JMM-1
21771: PPUSH
21772: CALL_OW 88
// end ; 3 :
21776: GO 21842
21778: LD_INT 3
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21841
21786: POP
// begin ComTurnUnit ( JMM , Connie ) ;
21787: LD_EXP 1
21791: PPUSH
21792: LD_EXP 16
21796: PPUSH
21797: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
21801: LD_EXP 16
21805: PPUSH
21806: LD_EXP 1
21810: PPUSH
21811: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
21815: LD_EXP 16
21819: PPUSH
21820: LD_STRING D3W-Con-1
21822: PPUSH
21823: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21827: LD_EXP 1
21831: PPUSH
21832: LD_STRING D3W-JMM-1
21834: PPUSH
21835: CALL_OW 88
// end ; end ;
21839: GO 21842
21841: POP
// people = 0 ;
21842: LD_ADDR_VAR 0 4
21846: PUSH
21847: LD_INT 0
21849: ST_TO_ADDR
// if Lisa and people < 5 then
21850: LD_EXP 4
21854: PUSH
21855: LD_VAR 0 4
21859: PUSH
21860: LD_INT 5
21862: LESS
21863: AND
21864: IFFALSE 21896
// begin people = people + 1 ;
21866: LD_ADDR_VAR 0 4
21870: PUSH
21871: LD_VAR 0 4
21875: PUSH
21876: LD_INT 1
21878: PLUS
21879: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
21880: LD_ADDR_EXP 60
21884: PUSH
21885: LD_EXP 60
21889: PUSH
21890: LD_EXP 4
21894: ADD
21895: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
21896: LD_EXP 5
21900: PUSH
21901: LD_VAR 0 4
21905: PUSH
21906: LD_INT 5
21908: LESS
21909: AND
21910: IFFALSE 21942
// begin people = people + 1 ;
21912: LD_ADDR_VAR 0 4
21916: PUSH
21917: LD_VAR 0 4
21921: PUSH
21922: LD_INT 1
21924: PLUS
21925: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
21926: LD_ADDR_EXP 60
21930: PUSH
21931: LD_EXP 60
21935: PUSH
21936: LD_EXP 5
21940: ADD
21941: ST_TO_ADDR
// end ; if Bobby and people < 5 then
21942: LD_EXP 6
21946: PUSH
21947: LD_VAR 0 4
21951: PUSH
21952: LD_INT 5
21954: LESS
21955: AND
21956: IFFALSE 21988
// begin people = people + 1 ;
21958: LD_ADDR_VAR 0 4
21962: PUSH
21963: LD_VAR 0 4
21967: PUSH
21968: LD_INT 1
21970: PLUS
21971: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
21972: LD_ADDR_EXP 60
21976: PUSH
21977: LD_EXP 60
21981: PUSH
21982: LD_EXP 6
21986: ADD
21987: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
21988: LD_EXP 7
21992: PUSH
21993: LD_VAR 0 4
21997: PUSH
21998: LD_INT 5
22000: LESS
22001: AND
22002: IFFALSE 22034
// begin people = people + 1 ;
22004: LD_ADDR_VAR 0 4
22008: PUSH
22009: LD_VAR 0 4
22013: PUSH
22014: LD_INT 1
22016: PLUS
22017: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22018: LD_ADDR_EXP 60
22022: PUSH
22023: LD_EXP 60
22027: PUSH
22028: LD_EXP 7
22032: ADD
22033: ST_TO_ADDR
// end ; if Denis and people < 5 then
22034: LD_EXP 8
22038: PUSH
22039: LD_VAR 0 4
22043: PUSH
22044: LD_INT 5
22046: LESS
22047: AND
22048: IFFALSE 22080
// begin people = people + 1 ;
22050: LD_ADDR_VAR 0 4
22054: PUSH
22055: LD_VAR 0 4
22059: PUSH
22060: LD_INT 1
22062: PLUS
22063: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22064: LD_ADDR_EXP 60
22068: PUSH
22069: LD_EXP 60
22073: PUSH
22074: LD_EXP 8
22078: ADD
22079: ST_TO_ADDR
// end ; if Brown and people < 5 then
22080: LD_EXP 9
22084: PUSH
22085: LD_VAR 0 4
22089: PUSH
22090: LD_INT 5
22092: LESS
22093: AND
22094: IFFALSE 22126
// begin people = people + 1 ;
22096: LD_ADDR_VAR 0 4
22100: PUSH
22101: LD_VAR 0 4
22105: PUSH
22106: LD_INT 1
22108: PLUS
22109: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22110: LD_ADDR_EXP 60
22114: PUSH
22115: LD_EXP 60
22119: PUSH
22120: LD_EXP 9
22124: ADD
22125: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22126: LD_EXP 10
22130: PUSH
22131: LD_VAR 0 4
22135: PUSH
22136: LD_INT 5
22138: LESS
22139: AND
22140: IFFALSE 22172
// begin people = people + 1 ;
22142: LD_ADDR_VAR 0 4
22146: PUSH
22147: LD_VAR 0 4
22151: PUSH
22152: LD_INT 1
22154: PLUS
22155: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22156: LD_ADDR_EXP 60
22160: PUSH
22161: LD_EXP 60
22165: PUSH
22166: LD_EXP 10
22170: ADD
22171: ST_TO_ADDR
// end ; if Houten and people < 5 then
22172: LD_EXP 11
22176: PUSH
22177: LD_VAR 0 4
22181: PUSH
22182: LD_INT 5
22184: LESS
22185: AND
22186: IFFALSE 22218
// begin people = people + 1 ;
22188: LD_ADDR_VAR 0 4
22192: PUSH
22193: LD_VAR 0 4
22197: PUSH
22198: LD_INT 1
22200: PLUS
22201: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
22202: LD_ADDR_EXP 60
22206: PUSH
22207: LD_EXP 60
22211: PUSH
22212: LD_EXP 11
22216: ADD
22217: ST_TO_ADDR
// end ; if Cornel and people < 5 then
22218: LD_EXP 12
22222: PUSH
22223: LD_VAR 0 4
22227: PUSH
22228: LD_INT 5
22230: LESS
22231: AND
22232: IFFALSE 22264
// begin people = people + 1 ;
22234: LD_ADDR_VAR 0 4
22238: PUSH
22239: LD_VAR 0 4
22243: PUSH
22244: LD_INT 1
22246: PLUS
22247: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
22248: LD_ADDR_EXP 60
22252: PUSH
22253: LD_EXP 60
22257: PUSH
22258: LD_EXP 12
22262: ADD
22263: ST_TO_ADDR
// end ; if Gary and people < 5 then
22264: LD_EXP 13
22268: PUSH
22269: LD_VAR 0 4
22273: PUSH
22274: LD_INT 5
22276: LESS
22277: AND
22278: IFFALSE 22310
// begin people = people + 1 ;
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_VAR 0 4
22289: PUSH
22290: LD_INT 1
22292: PLUS
22293: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
22294: LD_ADDR_EXP 60
22298: PUSH
22299: LD_EXP 60
22303: PUSH
22304: LD_EXP 13
22308: ADD
22309: ST_TO_ADDR
// end ; if Frank and people < 5 then
22310: LD_EXP 14
22314: PUSH
22315: LD_VAR 0 4
22319: PUSH
22320: LD_INT 5
22322: LESS
22323: AND
22324: IFFALSE 22356
// begin people = people + 1 ;
22326: LD_ADDR_VAR 0 4
22330: PUSH
22331: LD_VAR 0 4
22335: PUSH
22336: LD_INT 1
22338: PLUS
22339: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
22340: LD_ADDR_EXP 60
22344: PUSH
22345: LD_EXP 60
22349: PUSH
22350: LD_EXP 14
22354: ADD
22355: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
22356: LD_EXP 15
22360: PUSH
22361: LD_VAR 0 4
22365: PUSH
22366: LD_INT 5
22368: LESS
22369: AND
22370: IFFALSE 22402
// begin people = people + 1 ;
22372: LD_ADDR_VAR 0 4
22376: PUSH
22377: LD_VAR 0 4
22381: PUSH
22382: LD_INT 1
22384: PLUS
22385: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
22386: LD_ADDR_EXP 60
22390: PUSH
22391: LD_EXP 60
22395: PUSH
22396: LD_EXP 15
22400: ADD
22401: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
22402: LD_EXP 60
22406: PPUSH
22407: LD_INT 25
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PPUSH
22417: CALL_OW 72
22421: PUSH
22422: LD_INT 0
22424: EQUAL
22425: IFFALSE 22443
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
22427: LD_EXP 60
22431: PUSH
22432: LD_INT 1
22434: ARRAY
22435: PPUSH
22436: LD_INT 2
22438: PPUSH
22439: CALL_OW 336
// for i = 1 to 5 do
22443: LD_ADDR_VAR 0 1
22447: PUSH
22448: DOUBLE
22449: LD_INT 1
22451: DEC
22452: ST_TO_ADDR
22453: LD_INT 5
22455: PUSH
22456: FOR_TO
22457: IFFALSE 22508
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
22459: LD_EXP 60
22463: PUSH
22464: LD_VAR 0 1
22468: ARRAY
22469: PPUSH
22470: LD_INT 62
22472: PUSH
22473: LD_VAR 0 1
22477: PLUS
22478: PPUSH
22479: LD_INT 95
22481: PPUSH
22482: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
22486: LD_EXP 60
22490: PUSH
22491: LD_VAR 0 1
22495: ARRAY
22496: PPUSH
22497: LD_EXP 1
22501: PPUSH
22502: CALL_OW 179
// end ;
22506: GO 22456
22508: POP
22509: POP
// repeat wait ( 0 0$1 ) ;
22510: LD_INT 35
22512: PPUSH
22513: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
22517: LD_EXP 1
22521: PPUSH
22522: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
22526: LD_EXP 1
22530: PPUSH
22531: LD_INT 66
22533: PPUSH
22534: LD_INT 98
22536: PPUSH
22537: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
22541: LD_EXP 2
22545: PUSH
22546: LD_EXP 4
22550: PUSH
22551: LD_EXP 16
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: PPUSH
22561: LD_INT 67
22563: PPUSH
22564: LD_INT 98
22566: PPUSH
22567: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
22571: LD_EXP 1
22575: PUSH
22576: LD_EXP 2
22580: PUSH
22581: LD_EXP 4
22585: PUSH
22586: LD_EXP 16
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: PPUSH
22597: LD_INT 63
22599: PPUSH
22600: LD_INT 95
22602: PPUSH
22603: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
22607: LD_EXP 1
22611: PPUSH
22612: LD_INT 9
22614: PPUSH
22615: CALL_OW 308
22619: PUSH
22620: LD_INT 9
22622: PPUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 4
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 21
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PPUSH
22647: CALL_OW 70
22651: PUSH
22652: LD_INT 5
22654: EQUAL
22655: AND
22656: IFFALSE 22510
// wait ( 0 0$2 ) ;
22658: LD_INT 70
22660: PPUSH
22661: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
22665: LD_EXP 4
22669: PPUSH
22670: LD_INT 9
22672: PPUSH
22673: CALL_OW 308
22677: IFFALSE 22691
// Say ( Lisa , D3nW-Lisa-1 ) ;
22679: LD_EXP 4
22683: PPUSH
22684: LD_STRING D3nW-Lisa-1
22686: PPUSH
22687: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
22691: LD_EXP 7
22695: PPUSH
22696: LD_INT 9
22698: PPUSH
22699: CALL_OW 308
22703: IFFALSE 22717
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
22705: LD_EXP 7
22709: PPUSH
22710: LD_STRING D3nW-Cyrus-1
22712: PPUSH
22713: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
22717: LD_EXP 6
22721: PPUSH
22722: LD_INT 9
22724: PPUSH
22725: CALL_OW 308
22729: IFFALSE 22743
// Say ( Bobby , D3nW-Bobby-1 ) ;
22731: LD_EXP 6
22735: PPUSH
22736: LD_STRING D3nW-Bobby-1
22738: PPUSH
22739: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
22743: LD_EXP 13
22747: PPUSH
22748: LD_INT 9
22750: PPUSH
22751: CALL_OW 308
22755: IFFALSE 22769
// Say ( Gary , D3nW-Gary-1 ) ;
22757: LD_EXP 13
22761: PPUSH
22762: LD_STRING D3nW-Gary-1
22764: PPUSH
22765: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
22769: LD_EXP 5
22773: PPUSH
22774: LD_INT 9
22776: PPUSH
22777: CALL_OW 308
22781: IFFALSE 22795
// Say ( Donaldson , D3nW-Don-1 ) ;
22783: LD_EXP 5
22787: PPUSH
22788: LD_STRING D3nW-Don-1
22790: PPUSH
22791: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
22795: LD_EXP 12
22799: PPUSH
22800: LD_INT 9
22802: PPUSH
22803: CALL_OW 308
22807: IFFALSE 22821
// Say ( Cornel , D3nW-Corn-1 ) ;
22809: LD_EXP 12
22813: PPUSH
22814: LD_STRING D3nW-Corn-1
22816: PPUSH
22817: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
22821: LD_EXP 14
22825: PPUSH
22826: LD_INT 9
22828: PPUSH
22829: CALL_OW 308
22833: IFFALSE 22847
// Say ( Frank , D3nW-Frank-1 ) ;
22835: LD_EXP 14
22839: PPUSH
22840: LD_STRING D3nW-Frank-1
22842: PPUSH
22843: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
22847: LD_EXP 1
22851: PPUSH
22852: LD_STRING D3nW-JMM-1
22854: PPUSH
22855: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
22859: LD_EXP 1
22863: PPUSH
22864: LD_STRING D3nW-JMM-1a
22866: PPUSH
22867: CALL_OW 88
// InGameOff ;
22871: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22875: LD_STRING M1
22877: PPUSH
22878: CALL_OW 337
// SaveForQuickRestart ;
22882: CALL_OW 22
// startAttacks = 1 ;
22886: LD_ADDR_EXP 65
22890: PUSH
22891: LD_INT 1
22893: ST_TO_ADDR
// wait ( 0 0$5 ) ;
22894: LD_INT 175
22896: PPUSH
22897: CALL_OW 67
// powellBuildBase = 1 ;
22901: LD_ADDR_EXP 61
22905: PUSH
22906: LD_INT 1
22908: ST_TO_ADDR
// end ;
22909: PPOPN 4
22911: END
// function ResolveQuery ( question , list_of_q ) ; begin
22912: LD_INT 0
22914: PPUSH
// case question of 1 :
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 1
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 22979
22928: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
22929: LD_EXP 1
22933: PPUSH
22934: LD_STRING D2Mot-JMM-1
22936: PPUSH
22937: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
22941: LD_EXP 17
22945: PPUSH
22946: LD_STRING D2Mot-Pow-1
22948: PPUSH
22949: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
22953: LD_EXP 1
22957: PPUSH
22958: LD_STRING D2Mot-JMM-2
22960: PPUSH
22961: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
22965: LD_EXP 17
22969: PPUSH
22970: LD_STRING D2Mot-Pow-2
22972: PPUSH
22973: CALL_OW 88
// end ; 2 :
22977: GO 23322
22979: LD_INT 2
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 23063
22987: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
22988: LD_EXP 1
22992: PPUSH
22993: LD_STRING D2Rus-JMM-1
22995: PPUSH
22996: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23000: LD_EXP 17
23004: PPUSH
23005: LD_STRING D2Rus-Pow-1
23007: PPUSH
23008: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23012: LD_EXP 1
23016: PPUSH
23017: LD_STRING D2Rus-JMM-2
23019: PPUSH
23020: CALL_OW 88
// if not ( 3 in list_of_q ) then
23024: LD_INT 3
23026: PUSH
23027: LD_VAR 0 2
23031: IN
23032: NOT
23033: IFFALSE 23049
// Say ( Powell , D2Rus-Pow-2 ) else
23035: LD_EXP 17
23039: PPUSH
23040: LD_STRING D2Rus-Pow-2
23042: PPUSH
23043: CALL_OW 88
23047: GO 23061
// Say ( Powell , D2Rus-Pow-2a ) ;
23049: LD_EXP 17
23053: PPUSH
23054: LD_STRING D2Rus-Pow-2a
23056: PPUSH
23057: CALL_OW 88
// end ; 3 :
23061: GO 23322
23063: LD_INT 3
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23156
23071: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23072: LD_EXP 1
23076: PPUSH
23077: LD_STRING D2Leg-JMM-1
23079: PPUSH
23080: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23084: LD_EXP 17
23088: PPUSH
23089: LD_STRING D2Leg-Pow-1
23091: PPUSH
23092: CALL_OW 88
// if ( 2 in list_of_q ) then
23096: LD_INT 2
23098: PUSH
23099: LD_VAR 0 2
23103: IN
23104: IFFALSE 23130
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23106: LD_EXP 1
23110: PPUSH
23111: LD_STRING D2Leg-JMM-2
23113: PPUSH
23114: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23118: LD_EXP 17
23122: PPUSH
23123: LD_STRING D2Leg-Pow-2
23125: PPUSH
23126: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23130: LD_EXP 1
23134: PPUSH
23135: LD_STRING D2Leg-JMM-3
23137: PPUSH
23138: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23142: LD_EXP 17
23146: PPUSH
23147: LD_STRING D2Leg-Pow-3
23149: PPUSH
23150: CALL_OW 88
// end ; 4 :
23154: GO 23322
23156: LD_INT 4
23158: DOUBLE
23159: EQUAL
23160: IFTRUE 23164
23162: GO 23239
23164: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23165: LD_EXP 1
23169: PPUSH
23170: LD_STRING D2Ar-JMM-1
23172: PPUSH
23173: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
23177: LD_EXP 17
23181: PPUSH
23182: LD_STRING D2Ar-Pow-1
23184: PPUSH
23185: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
23189: LD_EXP 1
23193: PPUSH
23194: LD_STRING D2Ar-JMM-2
23196: PPUSH
23197: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
23201: LD_EXP 17
23205: PPUSH
23206: LD_STRING D2Ar-Pow-2
23208: PPUSH
23209: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
23213: LD_EXP 1
23217: PPUSH
23218: LD_STRING D2Ar-JMM-3
23220: PPUSH
23221: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
23225: LD_EXP 17
23229: PPUSH
23230: LD_STRING D2Ar-Pow-3
23232: PPUSH
23233: CALL_OW 88
// end ; 5 :
23237: GO 23322
23239: LD_INT 5
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23262
23247: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
23248: LD_EXP 1
23252: PPUSH
23253: LD_STRING D2Conf-JMM-1
23255: PPUSH
23256: CALL_OW 88
// end ; 6 :
23260: GO 23322
23262: LD_INT 6
23264: DOUBLE
23265: EQUAL
23266: IFTRUE 23270
23268: GO 23321
23270: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
23271: LD_EXP 1
23275: PPUSH
23276: LD_STRING D2Com-JMM-1
23278: PPUSH
23279: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
23283: LD_EXP 17
23287: PPUSH
23288: LD_STRING D2Com-Pow-1
23290: PPUSH
23291: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
23295: LD_EXP 1
23299: PPUSH
23300: LD_STRING D2Com-JMM-2
23302: PPUSH
23303: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
23307: LD_EXP 17
23311: PPUSH
23312: LD_STRING D2Com-Pow-2
23314: PPUSH
23315: CALL_OW 88
// end ; end ;
23319: GO 23322
23321: POP
// end ;
23322: LD_VAR 0 3
23326: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
23327: LD_INT 9
23329: PPUSH
23330: LD_INT 22
23332: PUSH
23333: LD_INT 4
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 21
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PPUSH
23354: CALL_OW 70
23358: IFFALSE 23403
23360: GO 23362
23362: DISABLE
// begin enable ;
23363: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
23364: LD_INT 9
23366: PPUSH
23367: LD_INT 22
23369: PUSH
23370: LD_INT 4
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 21
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PPUSH
23391: CALL_OW 70
23395: PPUSH
23396: LD_INT 1
23398: PPUSH
23399: CALL_OW 235
// end ;
23403: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
23404: LD_INT 22
23406: PUSH
23407: LD_INT 4
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 3
23426: PUSH
23427: LD_INT 58
23429: PUSH
23430: EMPTY
23431: LIST
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: PPUSH
23442: CALL_OW 69
23446: PUSH
23447: LD_INT 4
23449: EQUAL
23450: PUSH
23451: LD_EXP 65
23455: PUSH
23456: LD_INT 1
23458: EQUAL
23459: AND
23460: IFFALSE 23473
23462: GO 23464
23464: DISABLE
// startAttacks = 0 ;
23465: LD_ADDR_EXP 65
23469: PUSH
23470: LD_INT 0
23472: ST_TO_ADDR
23473: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
23474: LD_INT 22
23476: PUSH
23477: LD_INT 4
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 21
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: LD_INT 58
23499: PUSH
23500: EMPTY
23501: LIST
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 69
23516: PUSH
23517: LD_INT 4
23519: EQUAL
23520: PUSH
23521: LD_INT 22
23523: PUSH
23524: LD_INT 6
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 21
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 24
23543: PUSH
23544: LD_INT 250
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: PPUSH
23556: CALL_OW 69
23560: PUSH
23561: LD_INT 0
23563: EQUAL
23564: AND
23565: PUSH
23566: LD_EXP 65
23570: PUSH
23571: LD_INT 0
23573: EQUAL
23574: AND
23575: PUSH
23576: LD_EXP 62
23580: PUSH
23581: LD_INT 0
23583: EQUAL
23584: AND
23585: IFFALSE 23773
23587: GO 23589
23589: DISABLE
23590: LD_INT 0
23592: PPUSH
// begin powellAttacks = 1 ;
23593: LD_ADDR_EXP 62
23597: PUSH
23598: LD_INT 1
23600: ST_TO_ADDR
// InGameOn ;
23601: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
23605: LD_EXP 17
23609: PPUSH
23610: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
23614: LD_EXP 17
23618: PPUSH
23619: LD_INT 47
23621: PPUSH
23622: LD_INT 60
23624: PPUSH
23625: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
23629: LD_EXP 17
23633: PPUSH
23634: LD_STRING D4-Pow-1
23636: PPUSH
23637: CALL_OW 88
// for i = 1 to amUnitsAttack do
23641: LD_ADDR_VAR 0 1
23645: PUSH
23646: DOUBLE
23647: LD_INT 1
23649: DEC
23650: ST_TO_ADDR
23651: LD_EXP 59
23655: PUSH
23656: FOR_TO
23657: IFFALSE 23702
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
23659: LD_EXP 59
23663: PUSH
23664: LD_VAR 0 1
23668: ARRAY
23669: PPUSH
23670: CALL_OW 258
23674: PUSH
23675: LD_INT 1
23677: EQUAL
23678: IFFALSE 23700
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
23680: LD_EXP 59
23684: PUSH
23685: LD_VAR 0 1
23689: ARRAY
23690: PPUSH
23691: LD_STRING D4-Sol1-1
23693: PPUSH
23694: CALL_OW 88
// break ;
23698: GO 23702
// end ;
23700: GO 23656
23702: POP
23703: POP
// Say ( Powell , D4-Pow-2 ) ;
23704: LD_EXP 17
23708: PPUSH
23709: LD_STRING D4-Pow-2
23711: PPUSH
23712: CALL_OW 88
// InGameOff ;
23716: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
23720: LD_INT 22
23722: PUSH
23723: LD_INT 4
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 21
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 3
23742: PUSH
23743: LD_INT 58
23745: PUSH
23746: EMPTY
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 69
23762: PPUSH
23763: LD_INT 59
23765: PPUSH
23766: LD_INT 21
23768: PPUSH
23769: CALL_OW 114
// end ;
23773: PPOPN 1
23775: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
23776: LD_INT 7
23778: PPUSH
23779: LD_INT 22
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 21
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PPUSH
23803: CALL_OW 70
23807: PUSH
23808: LD_INT 0
23810: GREATER
23811: PUSH
23812: LD_EXP 17
23816: PPUSH
23817: CALL_OW 302
23821: AND
23822: PUSH
23823: LD_EXP 64
23827: PUSH
23828: LD_INT 0
23830: EQUAL
23831: AND
23832: IFFALSE 23956
23834: GO 23836
23836: DISABLE
// begin InGameOn ;
23837: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
23841: LD_INT 22
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 21
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: PPUSH
23870: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
23874: LD_INT 7
23876: PPUSH
23877: LD_INT 22
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 21
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 70
23905: PPUSH
23906: LD_INT 70
23908: PPUSH
23909: LD_INT 104
23911: PPUSH
23912: CALL_OW 111
// if powellWarm = 0 then
23916: LD_EXP 64
23920: PUSH
23921: LD_INT 0
23923: EQUAL
23924: IFFALSE 23952
// begin Say ( Powell , DBack1-Pow-1 ) ;
23926: LD_EXP 17
23930: PPUSH
23931: LD_STRING DBack1-Pow-1
23933: PPUSH
23934: CALL_OW 88
// powellWarm = powellWarm + 1 ;
23938: LD_ADDR_EXP 64
23942: PUSH
23943: LD_EXP 64
23947: PUSH
23948: LD_INT 1
23950: PLUS
23951: ST_TO_ADDR
// end ; InGameOff ;
23952: CALL_OW 9
// end ;
23956: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
23957: LD_INT 7
23959: PPUSH
23960: LD_INT 22
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 21
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PPUSH
23984: CALL_OW 70
23988: PUSH
23989: LD_INT 0
23991: GREATER
23992: PUSH
23993: LD_EXP 17
23997: PPUSH
23998: CALL_OW 302
24002: AND
24003: PUSH
24004: LD_EXP 64
24008: PUSH
24009: LD_INT 1
24011: EQUAL
24012: AND
24013: IFFALSE 24137
24015: GO 24017
24017: DISABLE
// begin InGameOn ;
24018: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24022: LD_INT 22
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 21
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PPUSH
24046: CALL_OW 69
24050: PPUSH
24051: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24055: LD_INT 7
24057: PPUSH
24058: LD_INT 22
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 21
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 70
24086: PPUSH
24087: LD_INT 70
24089: PPUSH
24090: LD_INT 104
24092: PPUSH
24093: CALL_OW 111
// if powellWarm = 1 then
24097: LD_EXP 64
24101: PUSH
24102: LD_INT 1
24104: EQUAL
24105: IFFALSE 24133
// begin Say ( Powell , DBack2-Pow-1 ) ;
24107: LD_EXP 17
24111: PPUSH
24112: LD_STRING DBack2-Pow-1
24114: PPUSH
24115: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24119: LD_ADDR_EXP 64
24123: PUSH
24124: LD_EXP 64
24128: PUSH
24129: LD_INT 1
24131: PLUS
24132: ST_TO_ADDR
// end ; InGameOff ;
24133: CALL_OW 9
// end ;
24137: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24138: LD_INT 7
24140: PPUSH
24141: LD_INT 22
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 21
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PPUSH
24165: CALL_OW 70
24169: PUSH
24170: LD_INT 0
24172: GREATER
24173: PUSH
24174: LD_EXP 17
24178: PPUSH
24179: CALL_OW 302
24183: AND
24184: PUSH
24185: LD_EXP 64
24189: PUSH
24190: LD_INT 2
24192: EQUAL
24193: AND
24194: IFFALSE 24311
24196: GO 24198
24198: DISABLE
// begin InGameOn ;
24199: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24203: LD_INT 22
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 21
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PPUSH
24227: CALL_OW 69
24231: PPUSH
24232: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24236: LD_INT 7
24238: PPUSH
24239: LD_INT 22
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 21
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PPUSH
24263: CALL_OW 70
24267: PPUSH
24268: LD_INT 70
24270: PPUSH
24271: LD_INT 104
24273: PPUSH
24274: CALL_OW 111
// if powellWarm = 2 then
24278: LD_EXP 64
24282: PUSH
24283: LD_INT 2
24285: EQUAL
24286: IFFALSE 24307
// begin Say ( Powell , DBack3-Pow-1 ) ;
24288: LD_EXP 17
24292: PPUSH
24293: LD_STRING DBack3-Pow-1
24295: PPUSH
24296: CALL_OW 88
// YouLost ( Dismissed ) ;
24300: LD_STRING Dismissed
24302: PPUSH
24303: CALL_OW 104
// end ; InGameOff ;
24307: CALL_OW 9
// end ;
24311: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24312: LD_INT 8
24314: PPUSH
24315: LD_INT 22
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 21
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PPUSH
24339: CALL_OW 70
24343: PUSH
24344: LD_INT 0
24346: GREATER
24347: PUSH
24348: LD_EXP 17
24352: PPUSH
24353: CALL_OW 302
24357: AND
24358: PUSH
24359: LD_EXP 64
24363: PUSH
24364: LD_INT 0
24366: EQUAL
24367: AND
24368: IFFALSE 24492
24370: GO 24372
24372: DISABLE
// begin InGameOn ;
24373: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24377: LD_INT 22
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 21
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PPUSH
24401: CALL_OW 69
24405: PPUSH
24406: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
24410: LD_INT 8
24412: PPUSH
24413: LD_INT 22
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 21
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PPUSH
24437: CALL_OW 70
24441: PPUSH
24442: LD_INT 71
24444: PPUSH
24445: LD_INT 63
24447: PPUSH
24448: CALL_OW 111
// if powellWarm = 0 then
24452: LD_EXP 64
24456: PUSH
24457: LD_INT 0
24459: EQUAL
24460: IFFALSE 24488
// begin Say ( Powell , DBack1-Pow-1 ) ;
24462: LD_EXP 17
24466: PPUSH
24467: LD_STRING DBack1-Pow-1
24469: PPUSH
24470: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24474: LD_ADDR_EXP 64
24478: PUSH
24479: LD_EXP 64
24483: PUSH
24484: LD_INT 1
24486: PLUS
24487: ST_TO_ADDR
// end ; InGameOff ;
24488: CALL_OW 9
// end ;
24492: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24493: LD_INT 8
24495: PPUSH
24496: LD_INT 22
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 21
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PPUSH
24520: CALL_OW 70
24524: PUSH
24525: LD_INT 0
24527: GREATER
24528: PUSH
24529: LD_EXP 17
24533: PPUSH
24534: CALL_OW 302
24538: AND
24539: PUSH
24540: LD_EXP 64
24544: PUSH
24545: LD_INT 1
24547: EQUAL
24548: AND
24549: IFFALSE 24673
24551: GO 24553
24553: DISABLE
// begin InGameOn ;
24554: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24558: LD_INT 22
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 21
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PPUSH
24582: CALL_OW 69
24586: PPUSH
24587: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
24591: LD_INT 8
24593: PPUSH
24594: LD_INT 22
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 21
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PPUSH
24618: CALL_OW 70
24622: PPUSH
24623: LD_INT 71
24625: PPUSH
24626: LD_INT 63
24628: PPUSH
24629: CALL_OW 111
// if powellWarm = 1 then
24633: LD_EXP 64
24637: PUSH
24638: LD_INT 1
24640: EQUAL
24641: IFFALSE 24669
// begin Say ( Powell , DBack2-Pow-1 ) ;
24643: LD_EXP 17
24647: PPUSH
24648: LD_STRING DBack2-Pow-1
24650: PPUSH
24651: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24655: LD_ADDR_EXP 64
24659: PUSH
24660: LD_EXP 64
24664: PUSH
24665: LD_INT 1
24667: PLUS
24668: ST_TO_ADDR
// end ; InGameOff ;
24669: CALL_OW 9
// end ;
24673: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24674: LD_INT 8
24676: PPUSH
24677: LD_INT 22
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 21
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PPUSH
24701: CALL_OW 70
24705: PUSH
24706: LD_INT 0
24708: GREATER
24709: PUSH
24710: LD_EXP 17
24714: PPUSH
24715: CALL_OW 302
24719: AND
24720: PUSH
24721: LD_EXP 64
24725: PUSH
24726: LD_INT 2
24728: EQUAL
24729: AND
24730: IFFALSE 24847
24732: GO 24734
24734: DISABLE
// begin InGameOn ;
24735: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24739: LD_INT 22
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 21
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PPUSH
24763: CALL_OW 69
24767: PPUSH
24768: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
24772: LD_INT 8
24774: PPUSH
24775: LD_INT 22
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 21
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL_OW 70
24803: PPUSH
24804: LD_INT 71
24806: PPUSH
24807: LD_INT 63
24809: PPUSH
24810: CALL_OW 111
// if powellWarm = 2 then
24814: LD_EXP 64
24818: PUSH
24819: LD_INT 2
24821: EQUAL
24822: IFFALSE 24843
// begin Say ( Powell , DBack3-Pow-1 ) ;
24824: LD_EXP 17
24828: PPUSH
24829: LD_STRING DBack3-Pow-1
24831: PPUSH
24832: CALL_OW 88
// YouLost ( Dismissed ) ;
24836: LD_STRING Dismissed
24838: PPUSH
24839: CALL_OW 104
// end ; InGameOff ;
24843: CALL_OW 9
// end ;
24847: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
24848: LD_EXP 62
24852: PUSH
24853: LD_INT 1
24855: EQUAL
24856: IFFALSE 24905
24858: GO 24860
24860: DISABLE
24861: LD_INT 0
24863: PPUSH
// begin enable ;
24864: ENABLE
// for i = 1 to amUnitsAttack do
24865: LD_ADDR_VAR 0 1
24869: PUSH
24870: DOUBLE
24871: LD_INT 1
24873: DEC
24874: ST_TO_ADDR
24875: LD_EXP 59
24879: PUSH
24880: FOR_TO
24881: IFFALSE 24903
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
24883: LD_INT 8
24885: PPUSH
24886: LD_EXP 59
24890: PUSH
24891: LD_VAR 0 1
24895: ARRAY
24896: PPUSH
24897: CALL_OW 471
24901: GO 24880
24903: POP
24904: POP
// end ;
24905: PPOPN 1
24907: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
24908: LD_INT 22
24910: PUSH
24911: LD_INT 4
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 21
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: LD_INT 58
24933: PUSH
24934: EMPTY
24935: LIST
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: PPUSH
24946: CALL_OW 69
24950: PUSH
24951: LD_INT 0
24953: EQUAL
24954: PUSH
24955: LD_EXP 62
24959: PUSH
24960: LD_INT 1
24962: EQUAL
24963: AND
24964: IFFALSE 25135
24966: GO 24968
24968: DISABLE
// begin powellAttacks = 2 ;
24969: LD_ADDR_EXP 62
24973: PUSH
24974: LD_INT 2
24976: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
24977: LD_INT 85
24979: PPUSH
24980: LD_INT 3
24982: PPUSH
24983: LD_INT 3
24985: PPUSH
24986: LD_INT 1
24988: PPUSH
24989: LD_INT 5
24991: PUSH
24992: LD_INT 7
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: PPUSH
25002: LD_INT 2
25004: PPUSH
25005: CALL_OW 12
25009: ARRAY
25010: PPUSH
25011: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25015: LD_INT 85
25017: PPUSH
25018: LD_INT 3
25020: PPUSH
25021: LD_INT 3
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: LD_INT 5
25029: PUSH
25030: LD_INT 7
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: PPUSH
25040: LD_INT 2
25042: PPUSH
25043: CALL_OW 12
25047: ARRAY
25048: PPUSH
25049: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25053: LD_INT 85
25055: PPUSH
25056: LD_INT 3
25058: PPUSH
25059: LD_INT 3
25061: PPUSH
25062: LD_INT 1
25064: PPUSH
25065: LD_INT 5
25067: PUSH
25068: LD_INT 7
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PPUSH
25078: LD_INT 2
25080: PPUSH
25081: CALL_OW 12
25085: ARRAY
25086: PPUSH
25087: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
25091: LD_INT 85
25093: PPUSH
25094: LD_INT 5
25096: PPUSH
25097: LD_INT 3
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: LD_INT 6
25105: PPUSH
25106: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
25110: LD_ADDR_EXP 66
25114: PUSH
25115: LD_INT 85
25117: PPUSH
25118: LD_INT 3
25120: PPUSH
25121: LD_INT 3
25123: PPUSH
25124: LD_INT 1
25126: PPUSH
25127: LD_INT 3
25129: PPUSH
25130: CALL_OW 185
25134: ST_TO_ADDR
// end ;
25135: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
25136: LD_INT 22
25138: PUSH
25139: LD_INT 4
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 3
25158: PUSH
25159: LD_INT 58
25161: PUSH
25162: EMPTY
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 69
25178: PUSH
25179: LD_INT 5
25181: GREATEREQUAL
25182: PUSH
25183: LD_EXP 65
25187: PUSH
25188: LD_INT 1
25190: EQUAL
25191: AND
25192: IFFALSE 25205
25194: GO 25196
25196: DISABLE
// startAttacks = 0 ;
25197: LD_ADDR_EXP 65
25201: PUSH
25202: LD_INT 0
25204: ST_TO_ADDR
25205: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
25206: LD_INT 22
25208: PUSH
25209: LD_INT 4
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 3
25228: PUSH
25229: LD_INT 58
25231: PUSH
25232: EMPTY
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: PPUSH
25244: CALL_OW 69
25248: PUSH
25249: LD_INT 5
25251: GREATEREQUAL
25252: PUSH
25253: LD_INT 22
25255: PUSH
25256: LD_INT 6
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 21
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 24
25275: PUSH
25276: LD_INT 250
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 69
25292: PUSH
25293: LD_INT 0
25295: EQUAL
25296: AND
25297: PUSH
25298: LD_EXP 65
25302: PUSH
25303: LD_INT 0
25305: EQUAL
25306: AND
25307: PUSH
25308: LD_EXP 62
25312: PUSH
25313: LD_INT 2
25315: EQUAL
25316: AND
25317: IFFALSE 26226
25319: GO 25321
25321: DISABLE
25322: LD_INT 0
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
// begin powellAttacks = 3 ;
25328: LD_ADDR_EXP 62
25332: PUSH
25333: LD_INT 3
25335: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
25336: LD_ADDR_VAR 0 1
25340: PUSH
25341: DOUBLE
25342: LD_INT 1
25344: DEC
25345: ST_TO_ADDR
25346: LD_EXP 59
25350: PUSH
25351: FOR_TO
25352: IFFALSE 25374
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
25354: LD_INT 8
25356: PPUSH
25357: LD_EXP 59
25361: PUSH
25362: LD_VAR 0 1
25366: ARRAY
25367: PPUSH
25368: CALL_OW 472
25372: GO 25351
25374: POP
25375: POP
// wait ( 0 0$5 ) ;
25376: LD_INT 175
25378: PPUSH
25379: CALL_OW 67
// Video ( true ) ;
25383: LD_INT 1
25385: PPUSH
25386: CALL 6601 0 1
// CenterNowOnUnits ( Powell ) ;
25390: LD_EXP 17
25394: PPUSH
25395: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
25399: LD_EXP 17
25403: PPUSH
25404: LD_INT 45
25406: PPUSH
25407: LD_INT 64
25409: PPUSH
25410: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
25414: LD_EXP 17
25418: PPUSH
25419: LD_INT 46
25421: PPUSH
25422: LD_INT 66
25424: PPUSH
25425: CALL_OW 178
// for i = 5 to 8 do
25429: LD_ADDR_VAR 0 1
25433: PUSH
25434: DOUBLE
25435: LD_INT 5
25437: DEC
25438: ST_TO_ADDR
25439: LD_INT 8
25441: PUSH
25442: FOR_TO
25443: IFFALSE 25589
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
25445: LD_EXP 59
25449: PUSH
25450: LD_VAR 0 1
25454: ARRAY
25455: PPUSH
25456: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
25460: LD_EXP 59
25464: PUSH
25465: LD_VAR 0 1
25469: ARRAY
25470: PPUSH
25471: CALL_OW 121
// wait ( 0 0$1 ) ;
25475: LD_INT 35
25477: PPUSH
25478: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
25482: LD_EXP 59
25486: PUSH
25487: LD_VAR 0 1
25491: ARRAY
25492: PPUSH
25493: LD_INT 92
25495: PPUSH
25496: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
25500: LD_EXP 59
25504: PUSH
25505: LD_VAR 0 1
25509: ARRAY
25510: PPUSH
25511: LD_INT 1
25513: PPUSH
25514: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
25518: LD_EXP 59
25522: PUSH
25523: LD_VAR 0 1
25527: ARRAY
25528: PPUSH
25529: CALL_OW 182
// wait ( 0 0$1 ) ;
25533: LD_INT 35
25535: PPUSH
25536: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
25540: LD_EXP 59
25544: PUSH
25545: LD_VAR 0 1
25549: ARRAY
25550: PPUSH
25551: LD_INT 43
25553: PUSH
25554: LD_VAR 0 1
25558: PLUS
25559: PPUSH
25560: LD_INT 66
25562: PPUSH
25563: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
25567: LD_EXP 59
25571: PUSH
25572: LD_VAR 0 1
25576: ARRAY
25577: PPUSH
25578: LD_EXP 17
25582: PPUSH
25583: CALL_OW 179
// end ;
25587: GO 25442
25589: POP
25590: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
25591: LD_ADDR_VAR 0 3
25595: PUSH
25596: LD_INT 22
25598: PUSH
25599: LD_INT 4
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 21
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 56
25618: PUSH
25619: EMPTY
25620: LIST
25621: PUSH
25622: LD_INT 3
25624: PUSH
25625: LD_INT 60
25627: PUSH
25628: EMPTY
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: PPUSH
25641: CALL_OW 69
25645: PUSH
25646: LD_EXP 17
25650: PUSH
25651: EMPTY
25652: LIST
25653: DIFF
25654: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
25655: LD_VAR 0 3
25659: PPUSH
25660: LD_INT 92
25662: PPUSH
25663: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
25667: LD_VAR 0 3
25671: PPUSH
25672: LD_INT 1
25674: PPUSH
25675: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
25679: LD_EXP 17
25683: PPUSH
25684: LD_STRING D5-Pow-1
25686: PPUSH
25687: CALL_OW 88
// for i = 1 to amUnitsAttack do
25691: LD_ADDR_VAR 0 1
25695: PUSH
25696: DOUBLE
25697: LD_INT 1
25699: DEC
25700: ST_TO_ADDR
25701: LD_EXP 59
25705: PUSH
25706: FOR_TO
25707: IFFALSE 25752
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
25709: LD_EXP 59
25713: PUSH
25714: LD_VAR 0 1
25718: ARRAY
25719: PPUSH
25720: CALL_OW 258
25724: PUSH
25725: LD_INT 1
25727: EQUAL
25728: IFFALSE 25750
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
25730: LD_EXP 59
25734: PUSH
25735: LD_VAR 0 1
25739: ARRAY
25740: PPUSH
25741: LD_STRING D5-Sol2-1
25743: PPUSH
25744: CALL_OW 88
// break ;
25748: GO 25752
// end ;
25750: GO 25706
25752: POP
25753: POP
// Say ( Powell , D5-Pow-2 ) ;
25754: LD_EXP 17
25758: PPUSH
25759: LD_STRING D5-Pow-2
25761: PPUSH
25762: CALL_OW 88
// for i = 1 to amUnitsAttack do
25766: LD_ADDR_VAR 0 1
25770: PUSH
25771: DOUBLE
25772: LD_INT 1
25774: DEC
25775: ST_TO_ADDR
25776: LD_EXP 59
25780: PUSH
25781: FOR_TO
25782: IFFALSE 25827
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
25784: LD_EXP 59
25788: PUSH
25789: LD_VAR 0 1
25793: ARRAY
25794: PPUSH
25795: CALL_OW 258
25799: PUSH
25800: LD_INT 1
25802: EQUAL
25803: IFFALSE 25825
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
25805: LD_EXP 59
25809: PUSH
25810: LD_VAR 0 1
25814: ARRAY
25815: PPUSH
25816: LD_STRING D5-Sol2-2
25818: PPUSH
25819: CALL_OW 88
// break ;
25823: GO 25827
// end ;
25825: GO 25781
25827: POP
25828: POP
// Say ( Powell , D5-Pow-3 ) ;
25829: LD_EXP 17
25833: PPUSH
25834: LD_STRING D5-Pow-3
25836: PPUSH
25837: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
25841: LD_INT 22
25843: PUSH
25844: LD_INT 4
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 21
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: LD_INT 58
25866: PUSH
25867: EMPTY
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 69
25883: PPUSH
25884: LD_INT 59
25886: PPUSH
25887: LD_INT 21
25889: PPUSH
25890: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
25894: LD_EXP 59
25898: PPUSH
25899: LD_INT 59
25901: PPUSH
25902: LD_INT 21
25904: PPUSH
25905: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
25909: LD_INT 61
25911: PPUSH
25912: LD_INT 35
25914: PPUSH
25915: CALL_OW 84
// wait ( 0 0$15 ) ;
25919: LD_INT 525
25921: PPUSH
25922: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
25926: LD_EXP 17
25930: PPUSH
25931: LD_STRING D5a-Pow-1
25933: PPUSH
25934: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
25938: LD_EXP 17
25942: PPUSH
25943: LD_STRING D5a-Pow-1a
25945: PPUSH
25946: CALL_OW 88
// wait ( 0 0$2 ) ;
25950: LD_INT 70
25952: PPUSH
25953: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
25957: LD_EXP 17
25961: PPUSH
25962: LD_STRING D5a-Pow-1b
25964: PPUSH
25965: CALL_OW 88
// wait ( 0 0$3 ) ;
25969: LD_INT 105
25971: PPUSH
25972: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
25976: LD_EXP 17
25980: PPUSH
25981: LD_STRING D5a-Pow-1c
25983: PPUSH
25984: CALL_OW 88
// wait ( 0 0$1 ) ;
25988: LD_INT 35
25990: PPUSH
25991: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
25995: LD_EXP 17
25999: PPUSH
26000: LD_STRING D5a-Pow-1d
26002: PPUSH
26003: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26007: LD_INT 35
26009: PPUSH
26010: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26014: LD_INT 22
26016: PUSH
26017: LD_INT 4
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 21
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: LD_INT 58
26039: PUSH
26040: EMPTY
26041: LIST
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 69
26056: PPUSH
26057: LD_INT 59
26059: PPUSH
26060: LD_INT 21
26062: PPUSH
26063: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26067: LD_EXP 59
26071: PPUSH
26072: LD_INT 59
26074: PPUSH
26075: LD_INT 21
26077: PPUSH
26078: CALL_OW 114
// until amUnitsAttack = [ ] ;
26082: LD_EXP 59
26086: PUSH
26087: EMPTY
26088: EQUAL
26089: IFFALSE 26007
// CenterNowOnUnits ( Powell ) ;
26091: LD_EXP 17
26095: PPUSH
26096: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_INT 22
26107: PUSH
26108: LD_INT 4
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 21
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PPUSH
26129: CALL_OW 69
26133: PUSH
26134: LD_EXP 17
26138: PUSH
26139: EMPTY
26140: LIST
26141: DIFF
26142: ST_TO_ADDR
// for i in powellPeople do
26143: LD_ADDR_VAR 0 1
26147: PUSH
26148: LD_VAR 0 3
26152: PUSH
26153: FOR_IN
26154: IFFALSE 26183
// if GetSex ( i ) = sex_male then
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 258
26165: PUSH
26166: LD_INT 1
26168: EQUAL
26169: IFFALSE 26181
// sold = i ;
26171: LD_ADDR_VAR 0 2
26175: PUSH
26176: LD_VAR 0 1
26180: ST_TO_ADDR
26181: GO 26153
26183: POP
26184: POP
// Say ( sold , D6-Sol3-1 ) ;
26185: LD_VAR 0 2
26189: PPUSH
26190: LD_STRING D6-Sol3-1
26192: PPUSH
26193: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
26197: LD_EXP 17
26201: PPUSH
26202: LD_STRING D6-Pow-1
26204: PPUSH
26205: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
26209: LD_INT 139
26211: PUSH
26212: LD_INT 138
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PPUSH
26219: LD_INT 12
26221: PPUSH
26222: CALL_OW 113
// end ;
26226: PPOPN 4
26228: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
26229: LD_EXP 62
26233: PUSH
26234: LD_INT 3
26236: EQUAL
26237: PUSH
26238: LD_INT 12
26240: PPUSH
26241: LD_INT 22
26243: PUSH
26244: LD_INT 8
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 21
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PPUSH
26265: CALL_OW 70
26269: PUSH
26270: LD_INT 2
26272: EQUAL
26273: AND
26274: IFFALSE 26435
26276: GO 26278
26278: DISABLE
26279: LD_INT 0
26281: PPUSH
26282: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
26283: LD_INT 8
26285: PPUSH
26286: LD_INT 1
26288: PPUSH
26289: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
26293: LD_INT 4
26295: PPUSH
26296: LD_INT 8
26298: PPUSH
26299: LD_INT 1
26301: PPUSH
26302: LD_INT 1
26304: PPUSH
26305: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
26309: LD_ADDR_VAR 0 1
26313: PUSH
26314: LD_INT 92
26316: PPUSH
26317: CALL_OW 313
26321: PUSH
26322: FOR_IN
26323: IFFALSE 26354
// if GetSex ( i ) = sex_male then
26325: LD_VAR 0 1
26329: PPUSH
26330: CALL_OW 258
26334: PUSH
26335: LD_INT 1
26337: EQUAL
26338: IFFALSE 26352
// begin tmp = i ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_VAR 0 1
26349: ST_TO_ADDR
// break ;
26350: GO 26354
// end ;
26352: GO 26322
26354: POP
26355: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
26356: LD_INT 92
26358: PPUSH
26359: CALL_OW 313
26363: PPUSH
26364: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_STRING D6-Sol3-2
26375: PPUSH
26376: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
26380: LD_INT 139
26382: PUSH
26383: LD_INT 138
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PPUSH
26390: LD_INT 85
26392: PPUSH
26393: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
26397: LD_INT 4
26399: PPUSH
26400: LD_INT 8
26402: PPUSH
26403: LD_INT 2
26405: PPUSH
26406: LD_INT 1
26408: PPUSH
26409: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
26413: LD_INT 8
26415: PPUSH
26416: LD_INT 8
26418: PPUSH
26419: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
26423: LD_EXP 17
26427: PPUSH
26428: LD_STRING D6-Pow-2
26430: PPUSH
26431: CALL_OW 88
// end ;
26435: PPOPN 2
26437: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
26438: LD_INT 85
26440: PPUSH
26441: CALL_OW 301
26445: IFFALSE 26737
26447: GO 26449
26449: DISABLE
26450: LD_INT 0
26452: PPUSH
26453: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
26454: LD_ADDR_VAR 0 1
26458: PUSH
26459: LD_INT 22
26461: PUSH
26462: LD_INT 4
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 21
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 56
26481: PUSH
26482: EMPTY
26483: LIST
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: PPUSH
26490: CALL_OW 69
26494: PUSH
26495: LD_EXP 17
26499: PUSH
26500: EMPTY
26501: LIST
26502: DIFF
26503: PUSH
26504: FOR_IN
26505: IFFALSE 26536
// if GetSex ( i ) = sex_male then
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL_OW 258
26516: PUSH
26517: LD_INT 1
26519: EQUAL
26520: IFFALSE 26534
// begin tmp = i ;
26522: LD_ADDR_VAR 0 2
26526: PUSH
26527: LD_VAR 0 1
26531: ST_TO_ADDR
// break ;
26532: GO 26536
// end ;
26534: GO 26504
26536: POP
26537: POP
// Say ( Powell , D6a-Pow-1 ) ;
26538: LD_EXP 17
26542: PPUSH
26543: LD_STRING D6a-Pow-1
26545: PPUSH
26546: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
26550: LD_VAR 0 2
26554: PPUSH
26555: LD_STRING D6a-Sol3-1
26557: PPUSH
26558: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
26562: LD_EXP 17
26566: PPUSH
26567: LD_VAR 0 2
26571: PPUSH
26572: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
26576: LD_EXP 17
26580: PPUSH
26581: LD_STRING D6a-Pow-2
26583: PPUSH
26584: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
26588: LD_VAR 0 2
26592: PPUSH
26593: LD_STRING D6a-Sol3-2
26595: PPUSH
26596: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
26600: LD_EXP 17
26604: PPUSH
26605: LD_STRING D6a-Pow-3
26607: PPUSH
26608: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
26612: LD_EXP 17
26616: PPUSH
26617: LD_EXP 66
26621: PPUSH
26622: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
26626: LD_INT 35
26628: PPUSH
26629: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
26633: LD_EXP 17
26637: PPUSH
26638: LD_EXP 66
26642: PPUSH
26643: CALL_OW 120
// until IsInUnit ( Powell ) ;
26647: LD_EXP 17
26651: PPUSH
26652: CALL_OW 310
26656: IFFALSE 26626
// wait ( 0 0$1 ) ;
26658: LD_INT 35
26660: PPUSH
26661: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
26665: LD_EXP 66
26669: PPUSH
26670: LD_INT 77
26672: PPUSH
26673: LD_INT 64
26675: PPUSH
26676: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
26680: LD_EXP 66
26684: PPUSH
26685: LD_INT 91
26687: PPUSH
26688: LD_INT 61
26690: PPUSH
26691: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
26695: LD_EXP 66
26699: PPUSH
26700: LD_INT 74
26702: PPUSH
26703: LD_INT 25
26705: PPUSH
26706: CALL_OW 171
// centerPowell = 1 ;
26710: LD_ADDR_EXP 67
26714: PUSH
26715: LD_INT 1
26717: ST_TO_ADDR
// wait ( 0 0$15 ) ;
26718: LD_INT 525
26720: PPUSH
26721: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
26725: LD_EXP 17
26729: PPUSH
26730: LD_STRING D6b-Pow-1
26732: PPUSH
26733: CALL_OW 88
// end ;
26737: PPOPN 2
26739: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
26740: LD_EXP 66
26744: PPUSH
26745: LD_INT 13
26747: PPUSH
26748: CALL_OW 308
26752: PUSH
26753: LD_EXP 62
26757: PUSH
26758: LD_INT 3
26760: EQUAL
26761: AND
26762: IFFALSE 26904
26764: GO 26766
26766: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
26767: LD_EXP 66
26771: PPUSH
26772: LD_INT 250
26774: PPUSH
26775: CALL_OW 234
// DialogueOn ;
26779: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
26783: LD_EXP 17
26787: PPUSH
26788: LD_STRING D6b-Pow-1a
26790: PPUSH
26791: CALL_OW 88
// DialogueOff ;
26795: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
26799: LD_EXP 17
26803: PPUSH
26804: LD_INT 22
26806: PUSH
26807: LD_INT 8
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 34
26816: PUSH
26817: LD_INT 29
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 50
26826: PUSH
26827: EMPTY
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: PPUSH
26835: CALL_OW 69
26839: PUSH
26840: LD_INT 1
26842: ARRAY
26843: PPUSH
26844: CALL_OW 120
// wait ( 0 0$1 ) ;
26848: LD_INT 35
26850: PPUSH
26851: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
26855: LD_EXP 17
26859: PPUSH
26860: LD_INT 22
26862: PUSH
26863: LD_INT 8
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 34
26872: PUSH
26873: LD_INT 29
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 50
26882: PUSH
26883: EMPTY
26884: LIST
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: PPUSH
26891: CALL_OW 69
26895: PUSH
26896: LD_INT 1
26898: ARRAY
26899: PPUSH
26900: CALL_OW 120
// end ;
26904: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
26905: LD_INT 22
26907: PUSH
26908: LD_INT 4
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 34
26917: PUSH
26918: LD_INT 29
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PPUSH
26929: CALL_OW 69
26933: IFFALSE 27365
26935: GO 26937
26937: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
26938: LD_ADDR_EXP 68
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_INT 4
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 34
26955: PUSH
26956: LD_INT 29
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PPUSH
26967: CALL_OW 69
26971: PUSH
26972: LD_INT 1
26974: ARRAY
26975: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
26976: LD_INT 8
26978: PPUSH
26979: LD_INT 4
26981: PPUSH
26982: LD_INT 1
26984: PPUSH
26985: LD_INT 1
26987: PPUSH
26988: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
26992: LD_EXP 68
26996: PPUSH
26997: LD_INT 80
26999: PPUSH
27000: LD_INT 19
27002: PPUSH
27003: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27007: LD_EXP 68
27011: PPUSH
27012: LD_INT 74
27014: PPUSH
27015: LD_INT 15
27017: PPUSH
27018: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27022: LD_EXP 68
27026: PPUSH
27027: LD_INT 72
27029: PPUSH
27030: LD_INT 19
27032: PPUSH
27033: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27037: LD_EXP 68
27041: PPUSH
27042: LD_INT 78
27044: PPUSH
27045: LD_INT 24
27047: PPUSH
27048: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
27052: LD_EXP 68
27056: PPUSH
27057: LD_INT 77
27059: PPUSH
27060: LD_INT 20
27062: PPUSH
27063: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27067: LD_EXP 68
27071: PPUSH
27072: LD_INT 74
27074: PPUSH
27075: LD_INT 15
27077: PPUSH
27078: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27082: LD_EXP 68
27086: PPUSH
27087: LD_INT 72
27089: PPUSH
27090: LD_INT 19
27092: PPUSH
27093: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
27097: LD_EXP 68
27101: PPUSH
27102: LD_INT 78
27104: PPUSH
27105: LD_INT 24
27107: PPUSH
27108: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
27112: LD_EXP 68
27116: PPUSH
27117: LD_INT 77
27119: PPUSH
27120: LD_INT 20
27122: PPUSH
27123: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
27127: LD_EXP 68
27131: PPUSH
27132: LD_INT 78
27134: PPUSH
27135: LD_INT 15
27137: PPUSH
27138: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
27142: LD_EXP 17
27146: PPUSH
27147: LD_STRING D6b-Pow-1b
27149: PPUSH
27150: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
27154: LD_INT 22
27156: PUSH
27157: LD_INT 8
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 21
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 25
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 26
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: PPUSH
27200: CALL_OW 69
27204: PUSH
27205: LD_INT 1
27207: ARRAY
27208: PPUSH
27209: LD_STRING D6b-ArSol1-1
27211: PPUSH
27212: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
27216: LD_INT 22
27218: PUSH
27219: LD_INT 8
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 21
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 25
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 26
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: PPUSH
27262: CALL_OW 69
27266: PUSH
27267: LD_INT 2
27269: ARRAY
27270: PPUSH
27271: LD_STRING D6b-ArSol2-1
27273: PPUSH
27274: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
27278: LD_EXP 17
27282: PPUSH
27283: LD_STRING D6b-Pow-2
27285: PPUSH
27286: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
27290: LD_INT 35
27292: PPUSH
27293: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
27297: LD_EXP 68
27301: PPUSH
27302: LD_INT 78
27304: PPUSH
27305: LD_INT 15
27307: PPUSH
27308: CALL_OW 297
27312: PUSH
27313: LD_INT 2
27315: LESS
27316: IFFALSE 27290
// wait ( 0 0$1 ) ;
27318: LD_INT 35
27320: PPUSH
27321: CALL_OW 67
// DialogueOn ;
27325: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
27329: LD_EXP 17
27333: PPUSH
27334: LD_STRING D6b-Pow-2a
27336: PPUSH
27337: CALL_OW 88
// DialogueOff ;
27341: CALL_OW 7
// centerPowell = 0 ;
27345: LD_ADDR_EXP 67
27349: PUSH
27350: LD_INT 0
27352: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
27353: LD_EXP 68
27357: PPUSH
27358: LD_INT 105
27360: PPUSH
27361: CALL_OW 115
// end ;
27365: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
27366: LD_INT 105
27368: PPUSH
27369: CALL_OW 301
27373: PUSH
27374: LD_EXP 62
27378: PUSH
27379: LD_INT 3
27381: EQUAL
27382: AND
27383: IFFALSE 28207
27385: GO 27387
27387: DISABLE
27388: LD_INT 0
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
27394: LD_ADDR_VAR 0 2
27398: PUSH
27399: LD_INT 22
27401: PUSH
27402: LD_INT 4
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 21
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 26
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: PPUSH
27434: CALL_OW 69
27438: PUSH
27439: LD_EXP 1
27443: PUSH
27444: LD_EXP 3
27448: PUSH
27449: LD_EXP 21
27453: PUSH
27454: LD_EXP 22
27458: PUSH
27459: LD_EXP 23
27463: PUSH
27464: LD_EXP 4
27468: PUSH
27469: LD_EXP 5
27473: PUSH
27474: LD_EXP 6
27478: PUSH
27479: LD_EXP 7
27483: PUSH
27484: LD_EXP 8
27488: PUSH
27489: LD_EXP 9
27493: PUSH
27494: LD_EXP 10
27498: PUSH
27499: LD_EXP 11
27503: PUSH
27504: LD_EXP 12
27508: PUSH
27509: LD_EXP 13
27513: PUSH
27514: LD_EXP 14
27518: PUSH
27519: LD_EXP 15
27523: PUSH
27524: LD_EXP 17
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: DIFF
27549: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
27550: LD_INT 49
27552: PPUSH
27553: LD_INT 66
27555: PPUSH
27556: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
27560: LD_VAR 0 2
27564: PUSH
27565: LD_INT 1
27567: ARRAY
27568: PPUSH
27569: LD_STRING D6c-Sol3-1
27571: PPUSH
27572: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
27576: LD_EXP 1
27580: PPUSH
27581: LD_STRING D6c-JMM-1
27583: PPUSH
27584: CALL_OW 88
// if IsOk ( Cyrus ) then
27588: LD_EXP 7
27592: PPUSH
27593: CALL_OW 302
27597: IFFALSE 27611
// Say ( Cyrus , D6c-Cyrus-1 ) ;
27599: LD_EXP 7
27603: PPUSH
27604: LD_STRING D6c-Cyrus-1
27606: PPUSH
27607: CALL_OW 88
// if IsOk ( Bobby ) then
27611: LD_EXP 6
27615: PPUSH
27616: CALL_OW 302
27620: IFFALSE 27634
// Say ( Bobby , D6c-Bobby-1 ) ;
27622: LD_EXP 6
27626: PPUSH
27627: LD_STRING D6c-Bobby-1
27629: PPUSH
27630: CALL_OW 88
// if IsOk ( Cornel ) then
27634: LD_EXP 12
27638: PPUSH
27639: CALL_OW 302
27643: IFFALSE 27657
// Say ( Cornel , D6c-Corn-1 ) ;
27645: LD_EXP 12
27649: PPUSH
27650: LD_STRING D6c-Corn-1
27652: PPUSH
27653: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
27657: LD_VAR 0 2
27661: PUSH
27662: LD_INT 2
27664: ARRAY
27665: PPUSH
27666: LD_STRING D6c-Sol1-1
27668: PPUSH
27669: CALL_OW 88
// if IsOk ( Lisa ) then
27673: LD_EXP 4
27677: PPUSH
27678: CALL_OW 302
27682: IFFALSE 27696
// Say ( Lisa , D6c-Lisa-1 ) ;
27684: LD_EXP 4
27688: PPUSH
27689: LD_STRING D6c-Lisa-1
27691: PPUSH
27692: CALL_OW 88
// if IsOk ( Gary ) then
27696: LD_EXP 13
27700: PPUSH
27701: CALL_OW 302
27705: IFFALSE 27719
// Say ( Gary , D6c-Gary-1 ) ;
27707: LD_EXP 13
27711: PPUSH
27712: LD_STRING D6c-Gary-1
27714: PPUSH
27715: CALL_OW 88
// if IsOK ( Donaldson ) then
27719: LD_EXP 5
27723: PPUSH
27724: CALL_OW 302
27728: IFFALSE 27742
// Say ( Donaldson , D6c-Don-1 ) ;
27730: LD_EXP 5
27734: PPUSH
27735: LD_STRING D6c-Don-1
27737: PPUSH
27738: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
27742: LD_VAR 0 2
27746: PUSH
27747: LD_INT 3
27749: ARRAY
27750: PPUSH
27751: LD_STRING D6c-Sol2-1
27753: PPUSH
27754: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
27758: LD_INT 22
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 21
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PPUSH
27782: CALL_OW 69
27786: PPUSH
27787: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
27791: LD_INT 22
27793: PUSH
27794: LD_INT 4
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 21
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PPUSH
27815: CALL_OW 69
27819: PPUSH
27820: CALL_OW 122
// wait ( 0 0$1 ) ;
27824: LD_INT 35
27826: PPUSH
27827: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
27831: LD_ADDR_VAR 0 3
27835: PUSH
27836: LD_INT 22
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 21
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PPUSH
27860: CALL_OW 69
27864: PUSH
27865: LD_EXP 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: DIFF
27873: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
27874: LD_ADDR_VAR 0 4
27878: PUSH
27879: LD_INT 22
27881: PUSH
27882: LD_INT 4
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 21
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PPUSH
27903: CALL_OW 69
27907: ST_TO_ADDR
// for i := 1 to tmp2 do
27908: LD_ADDR_VAR 0 1
27912: PUSH
27913: DOUBLE
27914: LD_INT 1
27916: DEC
27917: ST_TO_ADDR
27918: LD_VAR 0 4
27922: PUSH
27923: FOR_TO
27924: IFFALSE 27975
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
27926: LD_VAR 0 4
27930: PUSH
27931: LD_VAR 0 1
27935: ARRAY
27936: PPUSH
27937: LD_INT 43
27939: PUSH
27940: LD_VAR 0 1
27944: PLUS
27945: PPUSH
27946: LD_INT 64
27948: PPUSH
27949: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
27953: LD_VAR 0 4
27957: PUSH
27958: LD_VAR 0 1
27962: ARRAY
27963: PPUSH
27964: LD_EXP 1
27968: PPUSH
27969: CALL_OW 179
// end ;
27973: GO 27923
27975: POP
27976: POP
// for i := 1 to tmp1 do
27977: LD_ADDR_VAR 0 1
27981: PUSH
27982: DOUBLE
27983: LD_INT 1
27985: DEC
27986: ST_TO_ADDR
27987: LD_VAR 0 3
27991: PUSH
27992: FOR_TO
27993: IFFALSE 28044
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
27995: LD_VAR 0 3
27999: PUSH
28000: LD_VAR 0 1
28004: ARRAY
28005: PPUSH
28006: LD_INT 43
28008: PUSH
28009: LD_VAR 0 1
28013: PLUS
28014: PPUSH
28015: LD_INT 65
28017: PPUSH
28018: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
28022: LD_VAR 0 3
28026: PUSH
28027: LD_VAR 0 1
28031: ARRAY
28032: PPUSH
28033: LD_EXP 1
28037: PPUSH
28038: CALL_OW 179
// end ;
28042: GO 27992
28044: POP
28045: POP
// repeat wait ( 0 0$1 ) ;
28046: LD_INT 35
28048: PPUSH
28049: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
28053: LD_EXP 1
28057: PPUSH
28058: LD_INT 48
28060: PPUSH
28061: LD_INT 68
28063: PPUSH
28064: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
28068: LD_EXP 1
28072: PPUSH
28073: LD_INT 48
28075: PPUSH
28076: LD_INT 68
28078: PPUSH
28079: CALL_OW 297
28083: PUSH
28084: LD_INT 2
28086: LESS
28087: IFFALSE 28046
// AddComTurnXY ( JMM , 47 , 65 ) ;
28089: LD_EXP 1
28093: PPUSH
28094: LD_INT 47
28096: PPUSH
28097: LD_INT 65
28099: PPUSH
28100: CALL_OW 178
// wait ( 0 0$2 ) ;
28104: LD_INT 70
28106: PPUSH
28107: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
28111: LD_VAR 0 2
28115: PUSH
28116: LD_INT 1
28118: ARRAY
28119: PPUSH
28120: LD_STRING D6c-Sol3-2
28122: PPUSH
28123: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
28127: LD_EXP 1
28131: PPUSH
28132: LD_STRING D6c-JMM-2
28134: PPUSH
28135: CALL_OW 88
// Video ( false ) ;
28139: LD_INT 0
28141: PPUSH
28142: CALL 6601 0 1
// centerPowell = 0 ;
28146: LD_ADDR_EXP 67
28150: PUSH
28151: LD_INT 0
28153: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
28154: LD_INT 22
28156: PUSH
28157: LD_INT 4
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 69
28168: PPUSH
28169: LD_INT 1
28171: PPUSH
28172: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
28176: LD_STRING M2
28178: PPUSH
28179: CALL_OW 337
// timerStatus = 1 ;
28183: LD_ADDR_EXP 88
28187: PUSH
28188: LD_INT 1
28190: ST_TO_ADDR
// missionStage = 1 ;
28191: LD_ADDR_EXP 93
28195: PUSH
28196: LD_INT 1
28198: ST_TO_ADDR
// startAttacks = 1 ;
28199: LD_ADDR_EXP 65
28203: PUSH
28204: LD_INT 1
28206: ST_TO_ADDR
// end ;
28207: PPOPN 4
28209: END
// every 0 0$1 trigger centerPowell = 1 do
28210: LD_EXP 67
28214: PUSH
28215: LD_INT 1
28217: EQUAL
28218: IFFALSE 28501
28220: GO 28222
28222: DISABLE
// begin enable ;
28223: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
28224: LD_EXP 17
28228: PUSH
28229: LD_EXP 68
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PPUSH
28238: LD_INT 1000
28240: PPUSH
28241: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
28245: LD_INT 22
28247: PUSH
28248: LD_INT 4
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 34
28257: PUSH
28258: LD_INT 29
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 33
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: PPUSH
28280: CALL_OW 69
28284: PUSH
28285: LD_INT 0
28287: GREATER
28288: IFFALSE 28341
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
28290: LD_INT 22
28292: PUSH
28293: LD_INT 4
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 34
28302: PUSH
28303: LD_INT 29
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 33
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: PPUSH
28325: CALL_OW 69
28329: PUSH
28330: LD_INT 1
28332: ARRAY
28333: PPUSH
28334: LD_INT 1000
28336: PPUSH
28337: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
28341: LD_INT 22
28343: PUSH
28344: LD_INT 8
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 34
28353: PUSH
28354: LD_INT 29
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 33
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: PPUSH
28376: CALL_OW 69
28380: PUSH
28381: LD_INT 0
28383: GREATER
28384: IFFALSE 28437
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
28386: LD_INT 22
28388: PUSH
28389: LD_INT 8
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 34
28398: PUSH
28399: LD_INT 29
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 33
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: PPUSH
28421: CALL_OW 69
28425: PUSH
28426: LD_INT 1
28428: ARRAY
28429: PPUSH
28430: LD_INT 1000
28432: PPUSH
28433: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
28437: LD_EXP 66
28441: PPUSH
28442: LD_INT 13
28444: PPUSH
28445: CALL_OW 308
28449: NOT
28450: IFFALSE 28464
// SetLives ( powellVeh , 1000 ) ;
28452: LD_EXP 66
28456: PPUSH
28457: LD_INT 1000
28459: PPUSH
28460: CALL_OW 234
// if not IsInUnit ( Powell ) then
28464: LD_EXP 17
28468: PPUSH
28469: CALL_OW 310
28473: NOT
28474: IFFALSE 28487
// CenterNowOnUnits ( Powell ) else
28476: LD_EXP 17
28480: PPUSH
28481: CALL_OW 87
28485: GO 28501
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
28487: LD_EXP 17
28491: PPUSH
28492: CALL_OW 310
28496: PPUSH
28497: CALL_OW 87
// end ;
28501: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
28502: LD_EXP 89
28506: PUSH
28507: LD_INT 560
28509: GREATEREQUAL
28510: IFFALSE 28722
28512: GO 28514
28514: DISABLE
// begin DialogueOn ;
28515: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
28519: LD_EXP 47
28523: PPUSH
28524: LD_STRING D7-Friend-1
28526: PPUSH
28527: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
28531: LD_EXP 1
28535: PPUSH
28536: LD_STRING D7-JMM-1
28538: PPUSH
28539: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
28543: LD_EXP 47
28547: PPUSH
28548: LD_STRING D7-Friend-2
28550: PPUSH
28551: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
28555: LD_EXP 1
28559: PPUSH
28560: LD_STRING D7-JMM-2
28562: PPUSH
28563: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
28567: LD_EXP 47
28571: PPUSH
28572: LD_STRING D7-Friend-3
28574: PPUSH
28575: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
28579: LD_EXP 1
28583: PPUSH
28584: LD_STRING D7-JMM-3
28586: PPUSH
28587: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
28591: LD_EXP 47
28595: PPUSH
28596: LD_STRING D7-Friend-4
28598: PPUSH
28599: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
28603: LD_EXP 1
28607: PPUSH
28608: LD_STRING D7-JMM-4
28610: PPUSH
28611: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
28615: LD_EXP 47
28619: PPUSH
28620: LD_STRING D7-Friend-5
28622: PPUSH
28623: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
28627: LD_EXP 1
28631: PPUSH
28632: LD_STRING D7-JMM-5
28634: PPUSH
28635: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
28639: LD_EXP 47
28643: PPUSH
28644: LD_STRING D7-Friend-6
28646: PPUSH
28647: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
28651: LD_EXP 1
28655: PPUSH
28656: LD_STRING D7-JMM-6
28658: PPUSH
28659: CALL_OW 88
// DialogueOff ;
28663: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
28667: LD_EXP 35
28671: PPUSH
28672: LD_INT 15
28674: PPUSH
28675: LD_INT 0
28677: PPUSH
28678: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
28682: LD_EXP 35
28686: PPUSH
28687: LD_INT 2
28689: PPUSH
28690: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
28694: LD_EXP 35
28698: PPUSH
28699: LD_INT 2
28701: PPUSH
28702: LD_INT 78
28704: PPUSH
28705: LD_INT 12
28707: PPUSH
28708: LD_INT 3
28710: PPUSH
28711: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
28715: LD_STRING Mlegion
28717: PPUSH
28718: CALL_OW 337
// end ;
28722: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
28723: LD_INT 22
28725: PUSH
28726: LD_INT 8
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 21
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 23
28745: PUSH
28746: LD_INT 2
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: PPUSH
28758: CALL_OW 69
28762: PUSH
28763: LD_INT 6
28765: PUSH
28766: LD_INT 5
28768: PUSH
28769: LD_INT 4
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: PUSH
28777: LD_OWVAR 67
28781: ARRAY
28782: LESSEQUAL
28783: IFFALSE 29097
28785: GO 28787
28787: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
28788: LD_EXP 30
28792: PPUSH
28793: LD_INT 19
28795: PPUSH
28796: LD_INT 0
28798: PPUSH
28799: CALL_OW 49
// KillUnit ( Kozlov ) ;
28803: LD_EXP 35
28807: PPUSH
28808: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
28812: LD_INT 22
28814: PUSH
28815: LD_INT 8
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 3
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 23
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 30
28844: PUSH
28845: LD_INT 3
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: PPUSH
28858: CALL_OW 69
28862: PUSH
28863: LD_INT 1
28865: ARRAY
28866: PPUSH
28867: CALL_OW 66
// DialogueOn ;
28871: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
28875: LD_EXP 1
28879: PPUSH
28880: LD_STRING D13-JMM-1
28882: PPUSH
28883: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
28887: LD_EXP 30
28891: PPUSH
28892: LD_STRING D13-Kurt-1
28894: PPUSH
28895: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
28899: LD_EXP 1
28903: PPUSH
28904: LD_STRING D13-JMM-2
28906: PPUSH
28907: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
28911: LD_EXP 30
28915: PPUSH
28916: LD_STRING D13-Kurt-2a
28918: PPUSH
28919: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
28923: LD_EXP 1
28927: PPUSH
28928: LD_STRING D13-JMM-3
28930: PPUSH
28931: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
28935: LD_EXP 30
28939: PPUSH
28940: LD_STRING D13-Kurt-3
28942: PPUSH
28943: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
28947: LD_EXP 1
28951: PPUSH
28952: LD_STRING D13-JMM-4
28954: PPUSH
28955: CALL_OW 88
// DialogueOff ;
28959: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
28963: LD_INT 22
28965: PUSH
28966: LD_INT 8
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 50
28975: PUSH
28976: EMPTY
28977: LIST
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PPUSH
28983: CALL_OW 69
28987: PPUSH
28988: LD_INT 1
28990: PPUSH
28991: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
28995: LD_INT 22
28997: PUSH
28998: LD_INT 8
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: LD_INT 24
29010: PUSH
29011: LD_INT 250
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: PPUSH
29031: LD_INT 0
29033: PPUSH
29034: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
29038: LD_STRING MlegionOut
29040: PPUSH
29041: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
29045: LD_INT 8
29047: PPUSH
29048: LD_INT 1
29050: PPUSH
29051: LD_INT 1
29053: PPUSH
29054: LD_INT 1
29056: PPUSH
29057: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
29061: LD_EXP 47
29065: PPUSH
29066: LD_INT 30
29068: PPUSH
29069: LD_INT 0
29071: PPUSH
29072: CALL_OW 49
// wait ( 0 0$1 ) ;
29076: LD_INT 35
29078: PPUSH
29079: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
29083: LD_EXP 47
29087: PPUSH
29088: LD_EXP 1
29092: PPUSH
29093: CALL_OW 112
// end ;
29097: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
29098: LD_INT 1
29100: PPUSH
29101: LD_EXP 47
29105: PPUSH
29106: CALL_OW 292
29110: IFFALSE 29386
29112: GO 29114
29114: DISABLE
29115: LD_INT 0
29117: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
29118: LD_EXP 47
29122: PPUSH
29123: CALL_OW 87
// DialogueOn ;
29127: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
29131: LD_EXP 1
29135: PPUSH
29136: LD_STRING D14-JMM-1
29138: PPUSH
29139: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
29143: LD_EXP 47
29147: PPUSH
29148: LD_STRING D14-Friend-1
29150: PPUSH
29151: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
29155: LD_EXP 1
29159: PPUSH
29160: LD_STRING D14-JMM-2
29162: PPUSH
29163: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
29167: LD_EXP 47
29171: PPUSH
29172: LD_STRING D14-Friend-2
29174: PPUSH
29175: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
29179: LD_EXP 1
29183: PPUSH
29184: LD_STRING D14-JMM-3
29186: PPUSH
29187: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
29191: LD_EXP 47
29195: PPUSH
29196: LD_STRING D14-Friend-3
29198: PPUSH
29199: CALL_OW 88
// DialogueOff ;
29203: CALL_OW 7
// dec = Query ( Q14 ) ;
29207: LD_ADDR_VAR 0 1
29211: PUSH
29212: LD_STRING Q14
29214: PPUSH
29215: CALL_OW 97
29219: ST_TO_ADDR
// if dec = 1 then
29220: LD_VAR 0 1
29224: PUSH
29225: LD_INT 1
29227: EQUAL
29228: IFFALSE 29262
// begin DialogueOn ;
29230: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
29234: LD_EXP 1
29238: PPUSH
29239: LD_STRING D14a-JMM-1
29241: PPUSH
29242: CALL_OW 88
// DialogueOff ;
29246: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
29250: LD_EXP 47
29254: PPUSH
29255: LD_INT 1
29257: PPUSH
29258: CALL_OW 235
// end ; if dec = 2 then
29262: LD_VAR 0 1
29266: PUSH
29267: LD_INT 2
29269: EQUAL
29270: IFFALSE 29304
// begin DialogueOn ;
29272: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
29276: LD_EXP 1
29280: PPUSH
29281: LD_STRING D14b-JMM-1
29283: PPUSH
29284: CALL_OW 88
// DialogueOff ;
29288: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
29292: LD_EXP 47
29296: PPUSH
29297: LD_INT 18
29299: PPUSH
29300: CALL_OW 113
// end ; if dec = 3 then
29304: LD_VAR 0 1
29308: PUSH
29309: LD_INT 3
29311: EQUAL
29312: IFFALSE 29386
// begin DialogueOn ;
29314: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
29318: LD_EXP 1
29322: PPUSH
29323: LD_STRING D14c-JMM-1
29325: PPUSH
29326: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
29330: LD_EXP 47
29334: PPUSH
29335: LD_STRING D14c-Friend-1
29337: PPUSH
29338: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
29342: LD_EXP 1
29346: PPUSH
29347: LD_STRING D14c-JMM-2
29349: PPUSH
29350: CALL_OW 88
// DialogueOff ;
29354: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
29358: LD_INT 8
29360: PPUSH
29361: LD_INT 1
29363: PPUSH
29364: LD_INT 2
29366: PPUSH
29367: LD_INT 1
29369: PPUSH
29370: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
29374: LD_EXP 47
29378: PPUSH
29379: LD_INT 18
29381: PPUSH
29382: CALL_OW 113
// end ; end ;
29386: PPOPN 1
29388: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
29389: LD_EXP 47
29393: PPUSH
29394: LD_INT 18
29396: PPUSH
29397: CALL_OW 308
29401: PUSH
29402: LD_EXP 47
29406: PPUSH
29407: CALL_OW 255
29411: PUSH
29412: LD_INT 8
29414: EQUAL
29415: AND
29416: IFFALSE 29430
29418: GO 29420
29420: DISABLE
// RemoveUnit ( LegionFriend ) ;
29421: LD_EXP 47
29425: PPUSH
29426: CALL_OW 64
29430: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
29431: LD_EXP 89
29435: PUSH
29436: LD_INT 31570
29438: GREATEREQUAL
29439: IFFALSE 29515
29441: GO 29443
29443: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
29444: LD_EXP 74
29448: PUSH
29449: LD_INT 1
29451: EQUAL
29452: PUSH
29453: LD_EXP 72
29457: PUSH
29458: EMPTY
29459: EQUAL
29460: AND
29461: IFFALSE 29467
// PrepareSupportFromKappa ;
29463: CALL 2384 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
29467: LD_EXP 74
29471: PUSH
29472: LD_INT 0
29474: EQUAL
29475: PUSH
29476: LD_EXP 75
29480: PUSH
29481: LD_INT 1
29483: EQUAL
29484: AND
29485: IFFALSE 29491
// PrepareAttackFromKappa ;
29487: CALL 5229 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
29491: LD_EXP 74
29495: PUSH
29496: LD_INT 0
29498: EQUAL
29499: PUSH
29500: LD_EXP 75
29504: PUSH
29505: LD_INT 0
29507: EQUAL
29508: AND
29509: IFFALSE 29515
// PrepareAttackFromKappa ;
29511: CALL 5229 0 0
// end ;
29515: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
29516: LD_INT 1
29518: PPUSH
29519: LD_EXP 34
29523: PPUSH
29524: CALL_OW 292
29528: IFFALSE 29796
29530: GO 29532
29532: DISABLE
// begin missionStage = 2 ;
29533: LD_ADDR_EXP 93
29537: PUSH
29538: LD_INT 2
29540: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
29541: LD_EXP 34
29545: PPUSH
29546: CALL_OW 87
// DialogueOn ;
29550: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
29554: LD_EXP 1
29558: PPUSH
29559: LD_STRING D10nB-JMM-1
29561: PPUSH
29562: CALL_OW 88
// if BurlakStatus = 1 then
29566: LD_EXP 69
29570: PUSH
29571: LD_INT 1
29573: EQUAL
29574: IFFALSE 29588
// Say ( Vsevolod , D10nB-Vse-1a ) ;
29576: LD_EXP 33
29580: PPUSH
29581: LD_STRING D10nB-Vse-1a
29583: PPUSH
29584: CALL_OW 88
// if BurlakStatus = 0 then
29588: LD_EXP 69
29592: PUSH
29593: LD_INT 0
29595: EQUAL
29596: IFFALSE 29610
// Say ( Vsevolod , D10nB-Vse-1 ) ;
29598: LD_EXP 33
29602: PPUSH
29603: LD_STRING D10nB-Vse-1
29605: PPUSH
29606: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
29610: LD_EXP 1
29614: PPUSH
29615: LD_STRING D10nB-JMM-2
29617: PPUSH
29618: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
29622: LD_EXP 74
29626: PUSH
29627: LD_EXP 75
29631: PUSH
29632: LD_INT 1
29634: EQUAL
29635: AND
29636: IFFALSE 29650
// Say ( Vsevolod , D10nB-Vse-5 ) ;
29638: LD_EXP 33
29642: PPUSH
29643: LD_STRING D10nB-Vse-5
29645: PPUSH
29646: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
29650: LD_EXP 74
29654: PUSH
29655: LD_EXP 75
29659: PUSH
29660: LD_INT 0
29662: EQUAL
29663: AND
29664: IFFALSE 29792
// begin if JMMGirl = 1 then
29666: LD_EXP 73
29670: PUSH
29671: LD_INT 1
29673: EQUAL
29674: IFFALSE 29724
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
29676: LD_EXP 33
29680: PPUSH
29681: LD_STRING D10nB-Vse-2
29683: PPUSH
29684: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
29688: LD_EXP 1
29692: PPUSH
29693: LD_STRING D10nB-JMM-3
29695: PPUSH
29696: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
29700: LD_EXP 33
29704: PPUSH
29705: LD_STRING D10nB-Vse-3
29707: PPUSH
29708: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
29712: LD_EXP 1
29716: PPUSH
29717: LD_STRING D10nB-JMM-4
29719: PPUSH
29720: CALL_OW 88
// end ; if JMMGirl = 2 then
29724: LD_EXP 73
29728: PUSH
29729: LD_INT 2
29731: EQUAL
29732: IFFALSE 29758
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
29734: LD_EXP 33
29738: PPUSH
29739: LD_STRING D10nB-Vse-4
29741: PPUSH
29742: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
29746: LD_EXP 1
29750: PPUSH
29751: LD_STRING D10nB-JMM-5
29753: PPUSH
29754: CALL_OW 88
// end ; if JMMGirl = 3 then
29758: LD_EXP 73
29762: PUSH
29763: LD_INT 3
29765: EQUAL
29766: IFFALSE 29792
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
29768: LD_EXP 33
29772: PPUSH
29773: LD_STRING D10nB-Vse-5
29775: PPUSH
29776: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
29780: LD_EXP 1
29784: PPUSH
29785: LD_STRING D10nB-JMM-6
29787: PPUSH
29788: CALL_OW 88
// end ; end ; DialogueOff ;
29792: CALL_OW 7
// end ;
29796: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
29797: LD_EXP 89
29801: PUSH
29802: LD_INT 63070
29804: GREATEREQUAL
29805: IFFALSE 30083
29807: GO 29809
29809: DISABLE
// begin PrepareOmegaTeam ;
29810: CALL 2773 0 0
// missionStage = 3 ;
29814: LD_ADDR_EXP 93
29818: PUSH
29819: LD_INT 3
29821: ST_TO_ADDR
// DialogueOn ;
29822: CALL_OW 6
// if StevensStatus = 1 then
29826: LD_EXP 70
29830: PUSH
29831: LD_INT 1
29833: EQUAL
29834: IFFALSE 29946
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
29836: LD_EXP 3
29840: PPUSH
29841: CALL_OW 310
29845: PPUSH
29846: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
29850: LD_EXP 3
29854: PPUSH
29855: LD_STRING D8-Huck-1
29857: PPUSH
29858: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
29862: LD_EXP 1
29866: PPUSH
29867: LD_STRING D8-JMM-1
29869: PPUSH
29870: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
29874: LD_EXP 3
29878: PPUSH
29879: LD_STRING D8-Huck-2
29881: PPUSH
29882: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
29886: LD_EXP 1
29890: PPUSH
29891: LD_STRING D8-JMM-2
29893: PPUSH
29894: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
29898: LD_EXP 3
29902: PPUSH
29903: LD_STRING D8-Huck-3
29905: PPUSH
29906: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
29910: LD_EXP 1
29914: PPUSH
29915: LD_STRING D8-JMM-3
29917: PPUSH
29918: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
29922: LD_EXP 3
29926: PPUSH
29927: LD_STRING D8-Huck-4
29929: PPUSH
29930: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
29934: LD_EXP 1
29938: PPUSH
29939: LD_STRING D8-JMM-4
29941: PPUSH
29942: CALL_OW 88
// end ; if StevensStatus = 0 then
29946: LD_EXP 70
29950: PUSH
29951: LD_INT 0
29953: EQUAL
29954: IFFALSE 30066
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
29956: LD_EXP 21
29960: PPUSH
29961: CALL_OW 310
29965: PPUSH
29966: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
29970: LD_EXP 21
29974: PPUSH
29975: LD_STRING D8-Huck-1
29977: PPUSH
29978: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
29982: LD_EXP 1
29986: PPUSH
29987: LD_STRING D8-JMM-1a
29989: PPUSH
29990: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
29994: LD_EXP 21
29998: PPUSH
29999: LD_STRING D8-Huck-2
30001: PPUSH
30002: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30006: LD_EXP 1
30010: PPUSH
30011: LD_STRING D8-JMM-2
30013: PPUSH
30014: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
30018: LD_EXP 21
30022: PPUSH
30023: LD_STRING D8-Huck-3
30025: PPUSH
30026: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30030: LD_EXP 1
30034: PPUSH
30035: LD_STRING D8-JMM-3
30037: PPUSH
30038: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
30042: LD_EXP 21
30046: PPUSH
30047: LD_STRING D8-Huck-4
30049: PPUSH
30050: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30054: LD_EXP 1
30058: PPUSH
30059: LD_STRING D8-JMM-4
30061: PPUSH
30062: CALL_OW 88
// end ; DialogueOff ;
30066: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
30070: LD_INT 25
30072: PPUSH
30073: LD_INT 1
30075: PPUSH
30076: LD_INT 1
30078: PPUSH
30079: CALL_OW 322
// end ;
30083: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
30084: LD_EXP 89
30088: PUSH
30089: LD_INT 73570
30091: GREATEREQUAL
30092: IFFALSE 30442
30094: GO 30096
30096: DISABLE
30097: LD_INT 0
30099: PPUSH
// begin missionStage = 4 ;
30100: LD_ADDR_EXP 93
30104: PUSH
30105: LD_INT 4
30107: ST_TO_ADDR
// DialogueOn ;
30108: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
30112: LD_EXP 28
30116: PPUSH
30117: LD_STRING D9-Roth-1
30119: PPUSH
30120: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
30124: LD_EXP 1
30128: PPUSH
30129: LD_STRING D9-JMM-1
30131: PPUSH
30132: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
30136: LD_EXP 28
30140: PPUSH
30141: LD_STRING D9-Roth-2
30143: PPUSH
30144: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
30148: LD_EXP 28
30152: PPUSH
30153: LD_STRING D9-Roth-2a
30155: PPUSH
30156: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
30160: LD_EXP 26
30164: PPUSH
30165: LD_STRING D9-Pla-2
30167: PPUSH
30168: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
30172: LD_EXP 28
30176: PPUSH
30177: LD_STRING D9-Roth-3
30179: PPUSH
30180: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
30184: LD_EXP 26
30188: PPUSH
30189: LD_STRING D9-Pla-3
30191: PPUSH
30192: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
30196: LD_EXP 28
30200: PPUSH
30201: LD_STRING D9-Roth-4
30203: PPUSH
30204: CALL_OW 94
// dec = Query ( Q9 ) ;
30208: LD_ADDR_VAR 0 1
30212: PUSH
30213: LD_STRING Q9
30215: PPUSH
30216: CALL_OW 97
30220: ST_TO_ADDR
// if dec = 1 then
30221: LD_VAR 0 1
30225: PUSH
30226: LD_INT 1
30228: EQUAL
30229: IFFALSE 30243
// SayRadio ( Roth , D9a-Roth-1 ) ;
30231: LD_EXP 28
30235: PPUSH
30236: LD_STRING D9a-Roth-1
30238: PPUSH
30239: CALL_OW 94
// if dec = 2 then
30243: LD_VAR 0 1
30247: PUSH
30248: LD_INT 2
30250: EQUAL
30251: IFFALSE 30277
// begin Say ( JMM , D9b-JMM-1 ) ;
30253: LD_EXP 1
30257: PPUSH
30258: LD_STRING D9b-JMM-1
30260: PPUSH
30261: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
30265: LD_EXP 28
30269: PPUSH
30270: LD_STRING D9b-Roth-1
30272: PPUSH
30273: CALL_OW 94
// end ; if dec = 3 then
30277: LD_VAR 0 1
30281: PUSH
30282: LD_INT 3
30284: EQUAL
30285: IFFALSE 30347
// begin Say ( JMM , D9c-JMM-1 ) ;
30287: LD_EXP 1
30291: PPUSH
30292: LD_STRING D9c-JMM-1
30294: PPUSH
30295: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
30299: LD_EXP 28
30303: PPUSH
30304: LD_STRING D9c-Roth-1
30306: PPUSH
30307: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
30311: LD_EXP 1
30315: PPUSH
30316: LD_STRING D9c-JMM-2
30318: PPUSH
30319: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
30323: LD_EXP 28
30327: PPUSH
30328: LD_STRING D9c-Roth-2
30330: PPUSH
30331: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
30335: LD_EXP 1
30339: PPUSH
30340: LD_STRING D9c-JMM-3
30342: PPUSH
30343: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
30347: LD_EXP 28
30351: PPUSH
30352: LD_STRING D9c-Roth-3
30354: PPUSH
30355: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
30359: LD_EXP 28
30363: PPUSH
30364: LD_STRING D9cont-Roth-1
30366: PPUSH
30367: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
30371: LD_EXP 1
30375: PPUSH
30376: LD_STRING D9cont-JMM-1
30378: PPUSH
30379: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
30383: LD_EXP 28
30387: PPUSH
30388: LD_STRING D9cont-Roth-2
30390: PPUSH
30391: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
30395: LD_EXP 1
30399: PPUSH
30400: LD_STRING D9cont-JMM-2
30402: PPUSH
30403: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
30407: LD_EXP 28
30411: PPUSH
30412: LD_STRING D9cont-Roth-3
30414: PPUSH
30415: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
30419: LD_EXP 1
30423: PPUSH
30424: LD_STRING D9cont-JMM-3
30426: PPUSH
30427: CALL_OW 88
// DialogueOff ;
30431: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
30435: LD_STRING M3
30437: PPUSH
30438: CALL_OW 337
// end ;
30442: PPOPN 1
30444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do
30445: LD_INT 22
30447: PUSH
30448: LD_INT 7
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 21
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 69
30473: PUSH
30474: LD_INT 20
30476: PUSH
30477: LD_INT 18
30479: PUSH
30480: LD_INT 15
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: PUSH
30488: LD_OWVAR 67
30492: ARRAY
30493: LESSEQUAL
30494: IFFALSE 30627
30496: GO 30498
30498: DISABLE
// begin AllianceAI = 0 ;
30499: LD_ADDR_EXP 78
30503: PUSH
30504: LD_INT 0
30506: ST_TO_ADDR
// AllianceEscape = 1 ;
30507: LD_ADDR_EXP 84
30511: PUSH
30512: LD_INT 1
30514: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
30515: LD_INT 7
30517: PPUSH
30518: LD_INT 1
30520: PPUSH
30521: LD_INT 1
30523: PPUSH
30524: LD_INT 1
30526: PPUSH
30527: CALL_OW 80
// DialogueOn ;
30531: CALL_OW 6
// Say ( JMM , DAb-JMM-1 ) ;
30535: LD_EXP 1
30539: PPUSH
30540: LD_STRING DAb-JMM-1
30542: PPUSH
30543: CALL_OW 88
// DialogueOff ;
30547: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
30551: LD_INT 22
30553: PUSH
30554: LD_INT 7
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 21
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PPUSH
30575: CALL_OW 69
30579: PPUSH
30580: CALL_OW 122
// wait ( 0 0$1 ) ;
30584: LD_INT 35
30586: PPUSH
30587: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
30591: LD_INT 22
30593: PUSH
30594: LD_INT 7
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 21
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PPUSH
30615: CALL_OW 69
30619: PPUSH
30620: LD_INT 28
30622: PPUSH
30623: CALL_OW 113
// end ;
30627: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
30628: LD_EXP 84
30632: PUSH
30633: LD_INT 1
30635: EQUAL
30636: PUSH
30637: LD_INT 28
30639: PPUSH
30640: LD_INT 22
30642: PUSH
30643: LD_INT 7
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 21
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PPUSH
30664: CALL_OW 70
30668: AND
30669: IFFALSE 30731
30671: GO 30673
30673: DISABLE
30674: LD_INT 0
30676: PPUSH
// begin enable ;
30677: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
30678: LD_ADDR_VAR 0 1
30682: PUSH
30683: LD_INT 28
30685: PPUSH
30686: LD_INT 22
30688: PUSH
30689: LD_INT 7
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 21
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PPUSH
30710: CALL_OW 70
30714: PUSH
30715: FOR_IN
30716: IFFALSE 30729
// RemoveUnit ( i ) ;
30718: LD_VAR 0 1
30722: PPUSH
30723: CALL_OW 64
30727: GO 30715
30729: POP
30730: POP
// end ;
30731: PPOPN 1
30733: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
30734: LD_EXP 89
30738: PUSH
30739: LD_INT 94570
30741: GREATEREQUAL
30742: IFFALSE 31061
30744: GO 30746
30746: DISABLE
// begin DialogueOn ;
30747: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
30751: LD_INT 22
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 23
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 26
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 25
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 25
30796: PUSH
30797: LD_INT 2
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 25
30806: PUSH
30807: LD_INT 3
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 25
30816: PUSH
30817: LD_INT 4
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 25
30826: PUSH
30827: LD_INT 5
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 25
30836: PUSH
30837: LD_INT 8
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: PPUSH
30859: CALL_OW 69
30863: PPUSH
30864: LD_STRING D11-Sol1-1
30866: PPUSH
30867: LD_STRING D5-FSol1-1
30869: PPUSH
30870: CALL 6653 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
30874: LD_EXP 26
30878: PPUSH
30879: LD_STRING D11-Pla-1
30881: PPUSH
30882: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
30886: LD_EXP 36
30890: PPUSH
30891: LD_STRING D11-Kov-1
30893: PPUSH
30894: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
30898: LD_EXP 26
30902: PPUSH
30903: LD_STRING D11-Pla-2
30905: PPUSH
30906: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
30910: LD_INT 22
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 23
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 26
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: LD_INT 25
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 25
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 25
30965: PUSH
30966: LD_INT 3
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 25
30975: PUSH
30976: LD_INT 4
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 25
30985: PUSH
30986: LD_INT 5
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 25
30995: PUSH
30996: LD_INT 8
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: PPUSH
31018: CALL_OW 69
31022: PPUSH
31023: LD_STRING D11-Sol1-2
31025: PPUSH
31026: LD_STRING D5-FSol1-1
31028: PPUSH
31029: CALL 6653 0 3
// Say ( JMM , D11-JMM-2 ) ;
31033: LD_EXP 1
31037: PPUSH
31038: LD_STRING D11-JMM-2
31040: PPUSH
31041: CALL_OW 88
// DialogueOff ;
31045: CALL_OW 7
// PreapreMehBehs ;
31049: CALL 5722 0 0
// missionStage = 5 ;
31053: LD_ADDR_EXP 93
31057: PUSH
31058: LD_INT 5
31060: ST_TO_ADDR
// end ;
31061: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
31062: LD_EXP 89
31066: PUSH
31067: LD_INT 105070
31069: GREATEREQUAL
31070: IFFALSE 31464
31072: GO 31074
31074: DISABLE
31075: LD_INT 0
31077: PPUSH
31078: PPUSH
// begin time = 0 0$00 ;
31079: LD_ADDR_VAR 0 2
31083: PUSH
31084: LD_INT 0
31086: ST_TO_ADDR
// DialogueOn ;
31087: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
31091: LD_EXP 26
31095: PPUSH
31096: LD_STRING D15-Pla-1
31098: PPUSH
31099: CALL_OW 94
// dec = Query ( Q15a ) ;
31103: LD_ADDR_VAR 0 1
31107: PUSH
31108: LD_STRING Q15a
31110: PPUSH
31111: CALL_OW 97
31115: ST_TO_ADDR
// if dec = 1 then
31116: LD_VAR 0 1
31120: PUSH
31121: LD_INT 1
31123: EQUAL
31124: IFFALSE 31145
// begin Say ( JMM , D15a-JMM-1 ) ;
31126: LD_EXP 1
31130: PPUSH
31131: LD_STRING D15a-JMM-1
31133: PPUSH
31134: CALL_OW 88
// YouLost ( Surrender ) ;
31138: LD_STRING Surrender
31140: PPUSH
31141: CALL_OW 104
// end ; if dec = 2 then
31145: LD_VAR 0 1
31149: PUSH
31150: LD_INT 2
31152: EQUAL
31153: IFFALSE 31183
// begin Say ( JMM , D15b-JMM-1 ) ;
31155: LD_EXP 1
31159: PPUSH
31160: LD_STRING D15b-JMM-1
31162: PPUSH
31163: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
31167: LD_EXP 26
31171: PPUSH
31172: LD_STRING D15b-Pla-1
31174: PPUSH
31175: CALL_OW 94
// DialogueOff ;
31179: CALL_OW 7
// end ; if dec = 3 then
31183: LD_VAR 0 1
31187: PUSH
31188: LD_INT 3
31190: EQUAL
31191: IFFALSE 31267
// begin Say ( JMM , D15c-JMM-1 ) ;
31193: LD_EXP 1
31197: PPUSH
31198: LD_STRING D15c-JMM-1
31200: PPUSH
31201: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
31205: LD_EXP 26
31209: PPUSH
31210: LD_STRING D15c-Pla-1
31212: PPUSH
31213: CALL_OW 94
// DialogueOff ;
31217: CALL_OW 7
// wait ( 0 0$15 ) ;
31221: LD_INT 525
31223: PPUSH
31224: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
31228: LD_EXP 26
31232: PPUSH
31233: LD_STRING D18-Pla-1
31235: PPUSH
31236: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
31240: LD_INT 273
31242: PPUSH
31243: LD_EXP 1
31247: PPUSH
31248: CALL_OW 250
31252: PPUSH
31253: LD_EXP 1
31257: PPUSH
31258: CALL_OW 251
31262: PPUSH
31263: CALL_OW 116
// end ; if dec = 4 then
31267: LD_VAR 0 1
31271: PUSH
31272: LD_INT 4
31274: EQUAL
31275: IFFALSE 31313
// begin Say ( JMM , D15d-JMM-1 ) ;
31277: LD_EXP 1
31281: PPUSH
31282: LD_STRING D15d-JMM-1
31284: PPUSH
31285: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
31289: LD_EXP 26
31293: PPUSH
31294: LD_STRING D15d-Pla-1
31296: PPUSH
31297: CALL_OW 94
// DialogueOff ;
31301: CALL_OW 7
// missionStage = 6 ;
31305: LD_ADDR_EXP 93
31309: PUSH
31310: LD_INT 6
31312: ST_TO_ADDR
// end ; if dec = 2 then
31313: LD_VAR 0 1
31317: PUSH
31318: LD_INT 2
31320: EQUAL
31321: IFFALSE 31394
// begin repeat wait ( 0 0$01 ) ;
31323: LD_INT 35
31325: PPUSH
31326: CALL_OW 67
// time = time + 0 0$01 ;
31330: LD_ADDR_VAR 0 2
31334: PUSH
31335: LD_VAR 0 2
31339: PUSH
31340: LD_INT 35
31342: PLUS
31343: ST_TO_ADDR
// until time >= 3 3$00 ;
31344: LD_VAR 0 2
31348: PUSH
31349: LD_INT 6300
31351: GREATEREQUAL
31352: IFFALSE 31323
// DialogueOn ;
31354: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
31358: LD_EXP 1
31362: PPUSH
31363: LD_STRING D15d-JMM-1a
31365: PPUSH
31366: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
31370: LD_EXP 26
31374: PPUSH
31375: LD_STRING D15d-Pla-1
31377: PPUSH
31378: CALL_OW 94
// DialogueOff ;
31382: CALL_OW 7
// missionStage = 6 ;
31386: LD_ADDR_EXP 93
31390: PUSH
31391: LD_INT 6
31393: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
31394: LD_EXP 47
31398: PPUSH
31399: CALL_OW 302
31403: PUSH
31404: LD_EXP 47
31408: PPUSH
31409: CALL_OW 255
31413: PUSH
31414: LD_INT 1
31416: EQUAL
31417: AND
31418: IFFALSE 31464
// begin DialogueOn ;
31420: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
31424: LD_EXP 1
31428: PPUSH
31429: LD_STRING D16-JMM-1
31431: PPUSH
31432: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
31436: LD_EXP 47
31440: PPUSH
31441: LD_STRING D16-Friend-1
31443: PPUSH
31444: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
31448: LD_EXP 1
31452: PPUSH
31453: LD_STRING D16-JMM-2
31455: PPUSH
31456: CALL_OW 88
// DialogueOff ;
31460: CALL_OW 7
// end ; end ;
31464: PPOPN 2
31466: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
31467: LD_EXP 93
31471: PUSH
31472: LD_INT 6
31474: EQUAL
31475: PUSH
31476: LD_EXP 47
31480: PPUSH
31481: CALL_OW 302
31485: AND
31486: PUSH
31487: LD_EXP 47
31491: PPUSH
31492: CALL_OW 255
31496: PUSH
31497: LD_INT 1
31499: EQUAL
31500: AND
31501: IFFALSE 32138
31503: GO 31505
31505: DISABLE
31506: LD_INT 0
31508: PPUSH
// begin DialogueOn ;
31509: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
31513: LD_INT 22
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: LD_INT 34
31528: PUSH
31529: LD_INT 8
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 35
31538: PUSH
31539: LD_INT 8
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PPUSH
31555: CALL_OW 69
31559: PUSH
31560: LD_INT 0
31562: GREATER
31563: IFFALSE 31587
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
31565: LD_EXP 26
31569: PPUSH
31570: LD_STRING D16c-Pla-1
31572: PPUSH
31573: CALL_OW 94
// playerHaveRocket = 1 ;
31577: LD_ADDR_EXP 92
31581: PUSH
31582: LD_INT 1
31584: ST_TO_ADDR
// end else
31585: GO 32046
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
31587: LD_EXP 26
31591: PPUSH
31592: LD_STRING D16a-Pla-1
31594: PPUSH
31595: CALL_OW 94
// if IsOK ( Stevens ) then
31599: LD_EXP 3
31603: PPUSH
31604: CALL_OW 302
31608: IFFALSE 31624
// begin Say ( Stevens , D16a-Huck-1 ) ;
31610: LD_EXP 3
31614: PPUSH
31615: LD_STRING D16a-Huck-1
31617: PPUSH
31618: CALL_OW 88
// end else
31622: GO 31772
// begin if IsOk ( Baker ) then
31624: LD_EXP 21
31628: PPUSH
31629: CALL_OW 302
31633: IFFALSE 31649
// begin Say ( Baker , D16a-Huck-1 ) ;
31635: LD_EXP 21
31639: PPUSH
31640: LD_STRING D16a-Huck-1
31642: PPUSH
31643: CALL_OW 88
// end else
31647: GO 31772
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
31649: LD_INT 22
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 23
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 26
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 25
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 25
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 25
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 25
31714: PUSH
31715: LD_INT 4
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 25
31724: PUSH
31725: LD_INT 5
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 25
31734: PUSH
31735: LD_INT 8
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: PPUSH
31757: CALL_OW 69
31761: PPUSH
31762: LD_STRING D16a-Sol1-1
31764: PPUSH
31765: LD_STRING D5-FSol1-1
31767: PPUSH
31768: CALL 6653 0 3
// end ; end ; wait ( 0 0$30 ) ;
31772: LD_INT 1050
31774: PPUSH
31775: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
31779: LD_EXP 26
31783: PPUSH
31784: LD_STRING D18-Pla-1
31786: PPUSH
31787: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
31791: LD_ADDR_VAR 0 1
31795: PUSH
31796: LD_INT 22
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 21
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 23
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 2
31828: PUSH
31829: LD_INT 30
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 30
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: PPUSH
31860: CALL_OW 69
31864: ST_TO_ADDR
// if rocketTarget = 0 then
31865: LD_VAR 0 1
31869: PUSH
31870: LD_INT 0
31872: EQUAL
31873: IFFALSE 31949
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
31875: LD_ADDR_VAR 0 1
31879: PUSH
31880: LD_INT 22
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 21
31892: PUSH
31893: LD_INT 3
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 23
31902: PUSH
31903: LD_INT 2
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: LD_INT 30
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 30
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: PPUSH
31944: CALL_OW 69
31948: ST_TO_ADDR
// if rocketTarget = 0 then
31949: LD_VAR 0 1
31953: PUSH
31954: LD_INT 0
31956: EQUAL
31957: IFFALSE 32011
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
31959: LD_ADDR_VAR 0 1
31963: PUSH
31964: LD_INT 22
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 21
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 23
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 50
31996: PUSH
31997: EMPTY
31998: LIST
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: PPUSH
32006: CALL_OW 69
32010: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
32011: LD_INT 273
32013: PPUSH
32014: LD_VAR 0 1
32018: PUSH
32019: LD_INT 1
32021: ARRAY
32022: PPUSH
32023: CALL_OW 250
32027: PPUSH
32028: LD_VAR 0 1
32032: PUSH
32033: LD_INT 1
32035: ARRAY
32036: PPUSH
32037: CALL_OW 251
32041: PPUSH
32042: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
32046: LD_EXP 1
32050: PPUSH
32051: LD_STRING D16a-JMM-1a
32053: PPUSH
32054: CALL_OW 88
// DialogueOff ;
32058: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
32062: LD_EXP 47
32066: PPUSH
32067: LD_INT 3
32069: PPUSH
32070: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
32074: LD_EXP 47
32078: PPUSH
32079: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
32083: LD_EXP 47
32087: PPUSH
32088: CALL_OW 121
// wait ( 0 0$1 ) ;
32092: LD_INT 35
32094: PPUSH
32095: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
32099: LD_EXP 47
32103: PPUSH
32104: LD_INT 18
32106: PPUSH
32107: CALL_OW 113
// wait ( 0 0$3 ) ;
32111: LD_INT 105
32113: PPUSH
32114: CALL_OW 67
// DialogueOn ;
32118: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
32122: LD_EXP 1
32126: PPUSH
32127: LD_STRING D16a-JMM-1
32129: PPUSH
32130: CALL_OW 88
// DialogueOff ;
32134: CALL_OW 7
// end ;
32138: PPOPN 1
32140: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
32141: LD_EXP 47
32145: PPUSH
32146: CALL_OW 255
32150: PUSH
32151: LD_INT 3
32153: EQUAL
32154: IFFALSE 32261
32156: GO 32158
32158: DISABLE
32159: LD_INT 0
32161: PPUSH
// begin enable ;
32162: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
32163: LD_ADDR_VAR 0 1
32167: PUSH
32168: LD_INT 22
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 56
32190: PUSH
32191: EMPTY
32192: LIST
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: LIST
32198: PPUSH
32199: CALL_OW 69
32203: PUSH
32204: FOR_IN
32205: IFFALSE 32259
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
32207: LD_VAR 0 1
32211: PPUSH
32212: LD_EXP 47
32216: PPUSH
32217: CALL_OW 296
32221: PUSH
32222: LD_INT 8
32224: LESS
32225: IFFALSE 32257
// begin disable ;
32227: DISABLE
// DialogueOn ;
32228: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
32232: LD_EXP 47
32236: PPUSH
32237: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
32241: LD_EXP 47
32245: PPUSH
32246: LD_STRING D16a-Friend-1
32248: PPUSH
32249: CALL_OW 88
// DialogueOff ;
32253: CALL_OW 7
// end ; end ;
32257: GO 32204
32259: POP
32260: POP
// end ;
32261: PPOPN 1
32263: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
32264: LD_EXP 93
32268: PUSH
32269: LD_INT 6
32271: EQUAL
32272: PUSH
32273: LD_EXP 47
32277: PPUSH
32278: CALL_OW 255
32282: PUSH
32283: LD_INT 1
32285: EQUAL
32286: NOT
32287: AND
32288: IFFALSE 32668
32290: GO 32292
32292: DISABLE
32293: LD_INT 0
32295: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
32296: LD_INT 22
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: LD_INT 34
32311: PUSH
32312: LD_INT 8
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 35
32321: PUSH
32322: LD_INT 8
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PPUSH
32338: CALL_OW 69
32342: PUSH
32343: LD_INT 0
32345: GREATER
32346: IFFALSE 32370
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
32348: LD_EXP 26
32352: PPUSH
32353: LD_STRING D16c-Pla-1
32355: PPUSH
32356: CALL_OW 94
// playerHaveRocket = 1 ;
32360: LD_ADDR_EXP 92
32364: PUSH
32365: LD_INT 1
32367: ST_TO_ADDR
// end else
32368: GO 32668
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
32370: LD_EXP 26
32374: PPUSH
32375: LD_STRING D16b-Pla-1
32377: PPUSH
32378: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
32382: LD_EXP 1
32386: PPUSH
32387: LD_STRING D16b-JMM-1
32389: PPUSH
32390: CALL_OW 88
// wait ( 0 0$15 ) ;
32394: LD_INT 525
32396: PPUSH
32397: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
32401: LD_EXP 26
32405: PPUSH
32406: LD_STRING D18-Pla-1
32408: PPUSH
32409: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
32413: LD_ADDR_VAR 0 1
32417: PUSH
32418: LD_INT 22
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 21
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 23
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 30
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 30
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: PPUSH
32482: CALL_OW 69
32486: ST_TO_ADDR
// if rocketTarget = 0 then
32487: LD_VAR 0 1
32491: PUSH
32492: LD_INT 0
32494: EQUAL
32495: IFFALSE 32571
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
32497: LD_ADDR_VAR 0 1
32501: PUSH
32502: LD_INT 22
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 21
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 23
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 30
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 30
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: PPUSH
32566: CALL_OW 69
32570: ST_TO_ADDR
// if rocketTarget = 0 then
32571: LD_VAR 0 1
32575: PUSH
32576: LD_INT 0
32578: EQUAL
32579: IFFALSE 32633
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
32581: LD_ADDR_VAR 0 1
32585: PUSH
32586: LD_INT 22
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 21
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 23
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 50
32618: PUSH
32619: EMPTY
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: PPUSH
32628: CALL_OW 69
32632: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
32633: LD_INT 273
32635: PPUSH
32636: LD_VAR 0 1
32640: PUSH
32641: LD_INT 1
32643: ARRAY
32644: PPUSH
32645: CALL_OW 250
32649: PPUSH
32650: LD_VAR 0 1
32654: PUSH
32655: LD_INT 1
32657: ARRAY
32658: PPUSH
32659: CALL_OW 251
32663: PPUSH
32664: CALL_OW 116
// end ; end ;
32668: PPOPN 1
32670: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 do
32671: LD_EXP 89
32675: PUSH
32676: LD_INT 168070
32678: GREATEREQUAL
32679: PUSH
32680: LD_EXP 93
32684: PUSH
32685: LD_INT 6
32687: GREATEREQUAL
32688: AND
32689: IFFALSE 32719
32691: GO 32693
32693: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
32694: LD_EXP 26
32698: PPUSH
32699: LD_STRING D18-Pla-1
32701: PPUSH
32702: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
32706: LD_INT 273
32708: PPUSH
32709: LD_INT 244
32711: PPUSH
32712: LD_INT 187
32714: PPUSH
32715: CALL_OW 116
// end ;
32719: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
32720: LD_EXP 93
32724: PUSH
32725: LD_INT 5
32727: GREATEREQUAL
32728: IFFALSE 32921
32730: GO 32732
32732: DISABLE
32733: LD_INT 0
32735: PPUSH
// begin enable ;
32736: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
32737: LD_ADDR_VAR 0 1
32741: PUSH
32742: LD_INT 22
32744: PUSH
32745: LD_INT 6
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 30
32754: PUSH
32755: LD_INT 37
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 57
32764: PUSH
32765: EMPTY
32766: LIST
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: PPUSH
32773: CALL_OW 69
32777: PUSH
32778: FOR_IN
32779: IFFALSE 32833
// begin if See ( 1 , i ) then
32781: LD_INT 1
32783: PPUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 292
32793: IFFALSE 32831
// begin disable ;
32795: DISABLE
// DialogueOn ;
32796: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
32800: LD_EXP 1
32804: PPUSH
32805: LD_STRING D17a-JMM-1
32807: PPUSH
32808: CALL_OW 88
// DialogueOff ;
32812: CALL_OW 7
// behemothStatus = 1 ;
32816: LD_ADDR_EXP 54
32820: PUSH
32821: LD_INT 1
32823: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
32824: LD_STRING M4a
32826: PPUSH
32827: CALL_OW 337
// end ; end ;
32831: GO 32778
32833: POP
32834: POP
// for i in ruBehs do
32835: LD_ADDR_VAR 0 1
32839: PUSH
32840: LD_EXP 53
32844: PUSH
32845: FOR_IN
32846: IFFALSE 32919
// begin if See ( 1 , i ) then
32848: LD_INT 1
32850: PPUSH
32851: LD_VAR 0 1
32855: PPUSH
32856: CALL_OW 292
32860: IFFALSE 32917
// begin disable ;
32862: DISABLE
// DialogueOn ;
32863: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
32867: LD_EXP 1
32871: PPUSH
32872: LD_STRING D17b-JMM-1
32874: PPUSH
32875: CALL_OW 88
// DialogueOff ;
32879: CALL_OW 7
// behemothStatus = 0 ;
32883: LD_ADDR_EXP 54
32887: PUSH
32888: LD_INT 0
32890: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
32891: LD_STRING M4b
32893: PPUSH
32894: CALL_OW 337
// wait ( 0 0$2 ) ;
32898: LD_INT 70
32900: PPUSH
32901: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
32905: LD_EXP 26
32909: PPUSH
32910: LD_STRING D18-Pla-1
32912: PPUSH
32913: CALL_OW 88
// end ; end ;
32917: GO 32845
32919: POP
32920: POP
// end ;
32921: PPOPN 1
32923: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
32924: LD_EXP 26
32928: PPUSH
32929: CALL_OW 301
32933: PUSH
32934: LD_EXP 27
32938: PPUSH
32939: CALL_OW 301
32943: AND
32944: PUSH
32945: LD_INT 22
32947: PUSH
32948: LD_INT 3
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 21
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 50
32967: PUSH
32968: EMPTY
32969: LIST
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: PPUSH
32976: CALL_OW 69
32980: PUSH
32981: LD_INT 7
32983: PUSH
32984: LD_INT 8
32986: PUSH
32987: LD_INT 9
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: PUSH
32995: LD_OWVAR 67
32999: ARRAY
33000: LESS
33001: AND
33002: IFFALSE 33662
33004: GO 33006
33006: DISABLE
33007: LD_INT 0
33009: PPUSH
33010: PPUSH
33011: PPUSH
// begin russianAI = 0 ;
33012: LD_ADDR_EXP 79
33016: PUSH
33017: LD_INT 0
33019: ST_TO_ADDR
// russianEscape = 1 ;
33020: LD_ADDR_EXP 83
33024: PUSH
33025: LD_INT 1
33027: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
33028: LD_INT 1
33030: PPUSH
33031: LD_INT 3
33033: PPUSH
33034: LD_INT 1
33036: PPUSH
33037: LD_INT 1
33039: PPUSH
33040: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
33044: LD_ADDR_VAR 0 1
33048: PUSH
33049: LD_INT 22
33051: PUSH
33052: LD_INT 3
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 21
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 24
33071: PUSH
33072: LD_INT 900
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: PPUSH
33084: CALL_OW 69
33088: PUSH
33089: FOR_IN
33090: IFFALSE 33121
// if GetSex ( i ) = sex_male then
33092: LD_VAR 0 1
33096: PPUSH
33097: CALL_OW 258
33101: PUSH
33102: LD_INT 1
33104: EQUAL
33105: IFFALSE 33119
// begin tmp = i ;
33107: LD_ADDR_VAR 0 2
33111: PUSH
33112: LD_VAR 0 1
33116: ST_TO_ADDR
// break ;
33117: GO 33121
// end ;
33119: GO 33089
33121: POP
33122: POP
// if tmp = 0 then
33123: LD_VAR 0 2
33127: PUSH
33128: LD_INT 0
33130: EQUAL
33131: IFFALSE 33169
// begin hc_name =  ;
33133: LD_ADDR_OWVAR 26
33137: PUSH
33138: LD_STRING 
33140: ST_TO_ADDR
// hc_gallery =  ;
33141: LD_ADDR_OWVAR 33
33145: PUSH
33146: LD_STRING 
33148: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
33149: LD_INT 1
33151: PPUSH
33152: LD_INT 10
33154: PPUSH
33155: CALL_OW 381
// tmp = CreateHuman ;
33159: LD_ADDR_VAR 0 2
33163: PUSH
33164: CALL_OW 44
33168: ST_TO_ADDR
// end ; DialogueOn ;
33169: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
33173: LD_VAR 0 2
33177: PPUSH
33178: LD_STRING DSurrenderRussians-RSol1-1a
33180: PPUSH
33181: CALL_OW 88
// DialogueOff ;
33185: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
33189: LD_INT 22
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 21
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PPUSH
33213: CALL_OW 69
33217: PPUSH
33218: CALL_OW 122
// wait ( 0 0$1 ) ;
33222: LD_INT 35
33224: PPUSH
33225: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
33229: LD_INT 22
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 21
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PPUSH
33253: CALL_OW 69
33257: PPUSH
33258: LD_INT 25
33260: PPUSH
33261: CALL_OW 113
// wait ( 0 0$10 ) ;
33265: LD_INT 350
33267: PPUSH
33268: CALL_OW 67
// PrepareOmarArmy ;
33272: CALL 34282 0 0
// missionStage = 7 ;
33276: LD_ADDR_EXP 93
33280: PUSH
33281: LD_INT 7
33283: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
33284: LD_INT 157
33286: PPUSH
33287: LD_INT 8
33289: PPUSH
33290: LD_INT 1
33292: PPUSH
33293: LD_INT 8
33295: NEG
33296: PPUSH
33297: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
33301: LD_INT 157
33303: PPUSH
33304: LD_INT 8
33306: PPUSH
33307: CALL_OW 84
// DialogueOn ;
33311: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
33315: LD_EXP 32
33319: PPUSH
33320: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
33324: LD_EXP 1
33328: PPUSH
33329: LD_STRING D19-JMM-1
33331: PPUSH
33332: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
33336: LD_INT 22
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 26
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: LD_INT 25
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 25
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 25
33381: PUSH
33382: LD_INT 3
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 25
33391: PUSH
33392: LD_INT 4
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 25
33401: PUSH
33402: LD_INT 5
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 25
33411: PUSH
33412: LD_INT 8
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: PPUSH
33433: CALL_OW 69
33437: PPUSH
33438: LD_STRING D19-Sol1-1
33440: PPUSH
33441: LD_STRING D5-FSol1-1
33443: PPUSH
33444: CALL 6653 0 3
// Say ( JMM , D19-JMM-2 ) ;
33448: LD_EXP 1
33452: PPUSH
33453: LD_STRING D19-JMM-2
33455: PPUSH
33456: CALL_OW 88
// DialogueOff ;
33460: CALL_OW 7
// LaunchMines ;
33464: CALL 33771 0 0
// wait ( 0 0$3 ) ;
33468: LD_INT 105
33470: PPUSH
33471: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
33475: LD_ADDR_VAR 0 3
33479: PUSH
33480: LD_INT 22
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 21
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PPUSH
33504: CALL_OW 69
33508: PUSH
33509: LD_INT 22
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 21
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 25
33531: PUSH
33532: LD_INT 4
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: PPUSH
33544: CALL_OW 69
33548: DIFF
33549: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_VAR 0 3
33559: PUSH
33560: LD_INT 22
33562: PUSH
33563: LD_INT 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 21
33572: PUSH
33573: LD_INT 2
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PPUSH
33584: CALL_OW 69
33588: ADD
33589: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
33590: LD_VAR 0 3
33594: PPUSH
33595: LD_INT 178
33597: PPUSH
33598: LD_INT 66
33600: PPUSH
33601: CALL_OW 114
// wait ( 0 0$10 ) ;
33605: LD_INT 350
33607: PPUSH
33608: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
33612: LD_INT 22
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 21
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 25
33634: PUSH
33635: LD_INT 4
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: PPUSH
33647: CALL_OW 69
33651: PPUSH
33652: LD_INT 177
33654: PPUSH
33655: LD_INT 69
33657: PPUSH
33658: CALL_OW 158
// end ;
33662: PPOPN 3
33664: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
33665: LD_EXP 83
33669: PUSH
33670: LD_INT 1
33672: EQUAL
33673: PUSH
33674: LD_INT 25
33676: PPUSH
33677: LD_INT 22
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 21
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL_OW 70
33705: AND
33706: IFFALSE 33768
33708: GO 33710
33710: DISABLE
33711: LD_INT 0
33713: PPUSH
// begin enable ;
33714: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
33715: LD_ADDR_VAR 0 1
33719: PUSH
33720: LD_INT 25
33722: PPUSH
33723: LD_INT 22
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 21
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PPUSH
33747: CALL_OW 70
33751: PUSH
33752: FOR_IN
33753: IFFALSE 33766
// RemoveUnit ( i ) ;
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL_OW 64
33764: GO 33752
33766: POP
33767: POP
// end ;
33768: PPOPN 1
33770: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
33776: PPUSH
33777: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
33778: LD_ADDR_VAR 0 2
33782: PUSH
33783: LD_INT 168
33785: PUSH
33786: LD_INT 18
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 169
33795: PUSH
33796: LD_INT 20
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 167
33805: PUSH
33806: LD_INT 20
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 164
33815: PUSH
33816: LD_INT 18
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 164
33825: PUSH
33826: LD_INT 19
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 163
33835: PUSH
33836: LD_INT 19
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 164
33845: PUSH
33846: LD_INT 21
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 165
33855: PUSH
33856: LD_INT 21
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 163
33865: PUSH
33866: LD_INT 20
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 164
33875: PUSH
33876: LD_INT 22
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 162
33885: PUSH
33886: LD_INT 20
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
33906: LD_ADDR_VAR 0 3
33910: PUSH
33911: LD_INT 169
33913: PUSH
33914: LD_INT 34
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 169
33923: PUSH
33924: LD_INT 35
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 167
33933: PUSH
33934: LD_INT 32
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 170
33943: PUSH
33944: LD_INT 31
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 173
33953: PUSH
33954: LD_INT 35
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 174
33963: PUSH
33964: LD_INT 39
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: ST_TO_ADDR
// for i = 1 to mines_pos do
33979: LD_ADDR_VAR 0 4
33983: PUSH
33984: DOUBLE
33985: LD_INT 1
33987: DEC
33988: ST_TO_ADDR
33989: LD_VAR 0 2
33993: PUSH
33994: FOR_TO
33995: IFFALSE 34207
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
33997: LD_VAR 0 2
34001: PUSH
34002: LD_VAR 0 4
34006: ARRAY
34007: PUSH
34008: LD_INT 1
34010: ARRAY
34011: PPUSH
34012: LD_VAR 0 2
34016: PUSH
34017: LD_VAR 0 4
34021: ARRAY
34022: PUSH
34023: LD_INT 2
34025: ARRAY
34026: PPUSH
34027: LD_INT 1
34029: PPUSH
34030: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
34034: LD_INT 1
34036: PPUSH
34037: LD_INT 3
34039: PPUSH
34040: CALL_OW 12
34044: PPUSH
34045: CALL_OW 67
// if i < mines_pos then
34049: LD_VAR 0 4
34053: PUSH
34054: LD_VAR 0 2
34058: LESS
34059: IFFALSE 34097
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
34061: LD_VAR 0 2
34065: PUSH
34066: LD_VAR 0 4
34070: ARRAY
34071: PUSH
34072: LD_INT 1
34074: ARRAY
34075: PPUSH
34076: LD_VAR 0 2
34080: PUSH
34081: LD_VAR 0 4
34085: ARRAY
34086: PUSH
34087: LD_INT 2
34089: ARRAY
34090: PPUSH
34091: CALL_OW 348
34095: GO 34205
// begin for j = 1 to mines_pos1 do
34097: LD_ADDR_VAR 0 5
34101: PUSH
34102: DOUBLE
34103: LD_INT 1
34105: DEC
34106: ST_TO_ADDR
34107: LD_VAR 0 3
34111: PUSH
34112: FOR_TO
34113: IFFALSE 34169
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
34115: LD_VAR 0 3
34119: PUSH
34120: LD_VAR 0 5
34124: ARRAY
34125: PUSH
34126: LD_INT 1
34128: ARRAY
34129: PPUSH
34130: LD_VAR 0 3
34134: PUSH
34135: LD_VAR 0 5
34139: ARRAY
34140: PUSH
34141: LD_INT 2
34143: ARRAY
34144: PPUSH
34145: LD_INT 1
34147: PPUSH
34148: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
34152: LD_INT 1
34154: PPUSH
34155: LD_INT 3
34157: PPUSH
34158: CALL_OW 12
34162: PPUSH
34163: CALL_OW 67
// end ;
34167: GO 34112
34169: POP
34170: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
34171: LD_VAR 0 2
34175: PUSH
34176: LD_VAR 0 4
34180: ARRAY
34181: PUSH
34182: LD_INT 1
34184: ARRAY
34185: PPUSH
34186: LD_VAR 0 2
34190: PUSH
34191: LD_VAR 0 4
34195: ARRAY
34196: PUSH
34197: LD_INT 2
34199: ARRAY
34200: PPUSH
34201: CALL_OW 347
// end ; end ;
34205: GO 33994
34207: POP
34208: POP
// end ;
34209: LD_VAR 0 1
34213: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
34214: LD_EXP 93
34218: PUSH
34219: LD_INT 7
34221: EQUAL
34222: PUSH
34223: LD_EXP 31
34227: PPUSH
34228: CALL_OW 301
34232: AND
34233: PUSH
34234: LD_EXP 32
34238: PPUSH
34239: CALL_OW 302
34243: AND
34244: IFFALSE 34281
34246: GO 34248
34248: DISABLE
// begin DialogueOn ;
34249: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
34253: LD_EXP 1
34257: PPUSH
34258: LD_STRING D19a-JMM-1
34260: PPUSH
34261: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
34265: LD_EXP 32
34269: PPUSH
34270: LD_STRING D19a-Hke-1
34272: PPUSH
34273: CALL_OW 88
// DialogueOff ;
34277: CALL_OW 7
// end ; end_of_file
34281: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
34282: LD_INT 0
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
// uc_side = 2 ;
34289: LD_ADDR_OWVAR 20
34293: PUSH
34294: LD_INT 2
34296: ST_TO_ADDR
// uc_nation = 2 ;
34297: LD_ADDR_OWVAR 21
34301: PUSH
34302: LD_INT 2
34304: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
34305: LD_ADDR_EXP 31
34309: PUSH
34310: LD_STRING Omar
34312: PPUSH
34313: LD_INT 0
34315: PPUSH
34316: CALL 6373 0 2
34320: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
34321: LD_ADDR_EXP 32
34325: PUSH
34326: LD_STRING Heike
34328: PPUSH
34329: LD_INT 0
34331: PPUSH
34332: CALL 6373 0 2
34336: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
34337: LD_EXP 32
34341: PPUSH
34342: LD_INT 26
34344: PPUSH
34345: LD_INT 0
34347: PPUSH
34348: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
34352: LD_ADDR_VAR 0 2
34356: PUSH
34357: DOUBLE
34358: LD_INT 1
34360: DEC
34361: ST_TO_ADDR
34362: LD_INT 5
34364: PUSH
34365: LD_INT 6
34367: PUSH
34368: LD_INT 7
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: LIST
34375: PUSH
34376: LD_OWVAR 67
34380: ARRAY
34381: PUSH
34382: FOR_TO
34383: IFFALSE 34438
// begin hc_name =  ;
34385: LD_ADDR_OWVAR 26
34389: PUSH
34390: LD_STRING 
34392: ST_TO_ADDR
// hc_gallery =  ;
34393: LD_ADDR_OWVAR 33
34397: PUSH
34398: LD_STRING 
34400: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
34401: LD_INT 0
34403: PPUSH
34404: LD_INT 8
34406: PPUSH
34407: CALL_OW 381
// un = CreateHuman ;
34411: LD_ADDR_VAR 0 3
34415: PUSH
34416: CALL_OW 44
34420: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
34421: LD_VAR 0 3
34425: PPUSH
34426: LD_INT 26
34428: PPUSH
34429: LD_INT 0
34431: PPUSH
34432: CALL_OW 49
// end ;
34436: GO 34382
34438: POP
34439: POP
// for i := 1 to 4 do
34440: LD_ADDR_VAR 0 2
34444: PUSH
34445: DOUBLE
34446: LD_INT 1
34448: DEC
34449: ST_TO_ADDR
34450: LD_INT 4
34452: PUSH
34453: FOR_TO
34454: IFFALSE 34509
// begin hc_name =  ;
34456: LD_ADDR_OWVAR 26
34460: PUSH
34461: LD_STRING 
34463: ST_TO_ADDR
// hc_gallery =  ;
34464: LD_ADDR_OWVAR 33
34468: PUSH
34469: LD_STRING 
34471: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
34472: LD_INT 0
34474: PPUSH
34475: LD_INT 8
34477: PPUSH
34478: CALL_OW 384
// un = CreateHuman ;
34482: LD_ADDR_VAR 0 3
34486: PUSH
34487: CALL_OW 44
34491: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
34492: LD_VAR 0 3
34496: PPUSH
34497: LD_INT 26
34499: PPUSH
34500: LD_INT 0
34502: PPUSH
34503: CALL_OW 49
// end ;
34507: GO 34453
34509: POP
34510: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
34511: LD_ADDR_VAR 0 2
34515: PUSH
34516: DOUBLE
34517: LD_INT 1
34519: DEC
34520: ST_TO_ADDR
34521: LD_INT 8
34523: PUSH
34524: LD_INT 9
34526: PUSH
34527: LD_INT 10
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: LIST
34534: PUSH
34535: LD_OWVAR 67
34539: ARRAY
34540: PUSH
34541: FOR_TO
34542: IFFALSE 34630
// begin vc_engine = 3 ;
34544: LD_ADDR_OWVAR 39
34548: PUSH
34549: LD_INT 3
34551: ST_TO_ADDR
// vc_control = 5 ;
34552: LD_ADDR_OWVAR 38
34556: PUSH
34557: LD_INT 5
34559: ST_TO_ADDR
// vc_chassis = 14 ;
34560: LD_ADDR_OWVAR 37
34564: PUSH
34565: LD_INT 14
34567: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
34568: LD_ADDR_OWVAR 40
34572: PUSH
34573: LD_INT 27
34575: PUSH
34576: LD_INT 26
34578: PUSH
34579: LD_INT 28
34581: PUSH
34582: LD_INT 25
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PPUSH
34594: LD_INT 3
34596: PPUSH
34597: CALL_OW 12
34601: ARRAY
34602: ST_TO_ADDR
// veh = CreateVehicle ;
34603: LD_ADDR_VAR 0 4
34607: PUSH
34608: CALL_OW 45
34612: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
34613: LD_VAR 0 4
34617: PPUSH
34618: LD_INT 26
34620: PPUSH
34621: LD_INT 0
34623: PPUSH
34624: CALL_OW 49
// end ;
34628: GO 34541
34630: POP
34631: POP
// vc_chassis := 31 ;
34632: LD_ADDR_OWVAR 37
34636: PUSH
34637: LD_INT 31
34639: ST_TO_ADDR
// vc_control := control_rider ;
34640: LD_ADDR_OWVAR 38
34644: PUSH
34645: LD_INT 4
34647: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
34648: LD_ADDR_VAR 0 5
34652: PUSH
34653: CALL_OW 45
34657: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
34658: LD_VAR 0 5
34662: PPUSH
34663: LD_INT 26
34665: PPUSH
34666: LD_INT 0
34668: PPUSH
34669: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
34673: LD_EXP 31
34677: PPUSH
34678: LD_VAR 0 5
34682: PPUSH
34683: CALL_OW 52
// end ; end_of_file
34687: LD_VAR 0 1
34691: RET
// every 1 1$30 trigger missionStage > 0 do
34692: LD_EXP 93
34696: PUSH
34697: LD_INT 0
34699: GREATER
34700: IFFALSE 34727
34702: GO 34704
34704: DISABLE
// begin enable ;
34705: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
34706: LD_INT 3
34708: PPUSH
34709: LD_INT 5
34711: PPUSH
34712: CALL_OW 12
34716: PPUSH
34717: LD_INT 27
34719: PPUSH
34720: LD_INT 1
34722: PPUSH
34723: CALL_OW 55
// end ; end_of_file
34727: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
34728: LD_EXP 93
34732: PUSH
34733: LD_INT 7
34735: EQUAL
34736: PUSH
34737: LD_INT 22
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 21
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PPUSH
34761: CALL_OW 69
34765: PUSH
34766: LD_INT 0
34768: EQUAL
34769: AND
34770: PUSH
34771: LD_INT 22
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 21
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 50
34793: PUSH
34794: EMPTY
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: PPUSH
34802: CALL_OW 69
34806: PUSH
34807: LD_INT 0
34809: EQUAL
34810: AND
34811: IFFALSE 35300
34813: GO 34815
34815: DISABLE
// begin DialogueOn ;
34816: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
34820: LD_EXP 1
34824: PPUSH
34825: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
34829: LD_EXP 1
34833: PPUSH
34834: LD_STRING D20-JMM-1
34836: PPUSH
34837: CALL_OW 88
// if IsOK ( Joan ) then
34841: LD_EXP 2
34845: PPUSH
34846: CALL_OW 302
34850: IFFALSE 34864
// Say ( Joan , D20-Joan-1 ) ;
34852: LD_EXP 2
34856: PPUSH
34857: LD_STRING D20-Joan-1
34859: PPUSH
34860: CALL_OW 88
// if IsOk ( Lisa ) then
34864: LD_EXP 4
34868: PPUSH
34869: CALL_OW 302
34873: IFFALSE 34887
// Say ( Lisa , D20-Lisa-1 ) ;
34875: LD_EXP 4
34879: PPUSH
34880: LD_STRING D20-Lisa-1
34882: PPUSH
34883: CALL_OW 88
// if IsOk ( Donaldson ) then
34887: LD_EXP 5
34891: PPUSH
34892: CALL_OW 302
34896: IFFALSE 34910
// Say ( Donaldson , D20-Don-1 ) ;
34898: LD_EXP 5
34902: PPUSH
34903: LD_STRING D20-Don-1
34905: PPUSH
34906: CALL_OW 88
// if IsOK ( Cornel ) then
34910: LD_EXP 12
34914: PPUSH
34915: CALL_OW 302
34919: IFFALSE 34933
// Say ( Cornel , D20-Corn-1 ) ;
34921: LD_EXP 12
34925: PPUSH
34926: LD_STRING D20-Corn-1
34928: PPUSH
34929: CALL_OW 88
// if IsOk ( Denis ) then
34933: LD_EXP 8
34937: PPUSH
34938: CALL_OW 302
34942: IFFALSE 34956
// Say ( Denis , D20-Den-1 ) ;
34944: LD_EXP 8
34948: PPUSH
34949: LD_STRING D20-Den-1
34951: PPUSH
34952: CALL_OW 88
// if IsOk ( Bobby ) then
34956: LD_EXP 6
34960: PPUSH
34961: CALL_OW 302
34965: IFFALSE 34979
// Say ( Bobby , D20-Bobby-1 ) ;
34967: LD_EXP 6
34971: PPUSH
34972: LD_STRING D20-Bobby-1
34974: PPUSH
34975: CALL_OW 88
// if IsOk ( Gladstone ) then
34979: LD_EXP 10
34983: PPUSH
34984: CALL_OW 302
34988: IFFALSE 35002
// Say ( Gladstone , D20-Glad-1 ) ;
34990: LD_EXP 10
34994: PPUSH
34995: LD_STRING D20-Glad-1
34997: PPUSH
34998: CALL_OW 88
// if IsOk ( Cyrus ) then
35002: LD_EXP 7
35006: PPUSH
35007: CALL_OW 302
35011: IFFALSE 35025
// Say ( Cyrus , D20-Cyrus-1 ) ;
35013: LD_EXP 7
35017: PPUSH
35018: LD_STRING D20-Cyrus-1
35020: PPUSH
35021: CALL_OW 88
// if IsOk ( Stevens ) then
35025: LD_EXP 3
35029: PPUSH
35030: CALL_OW 302
35034: IFFALSE 35048
// Say ( Stevens , D20-Huck-1 ) ;
35036: LD_EXP 3
35040: PPUSH
35041: LD_STRING D20-Huck-1
35043: PPUSH
35044: CALL_OW 88
// if IsOk ( Brown ) then
35048: LD_EXP 9
35052: PPUSH
35053: CALL_OW 302
35057: IFFALSE 35071
// Say ( Brown , D20-Brown-1 ) ;
35059: LD_EXP 9
35063: PPUSH
35064: LD_STRING D20-Brown-1
35066: PPUSH
35067: CALL_OW 88
// if IsOk ( Gary ) then
35071: LD_EXP 13
35075: PPUSH
35076: CALL_OW 302
35080: IFFALSE 35094
// Say ( Gary , D20-Gary-1 ) ;
35082: LD_EXP 13
35086: PPUSH
35087: LD_STRING D20-Gary-1
35089: PPUSH
35090: CALL_OW 88
// if IsOk ( Connie ) then
35094: LD_EXP 16
35098: PPUSH
35099: CALL_OW 302
35103: IFFALSE 35117
// Say ( Connie , D20-Con-1 ) ;
35105: LD_EXP 16
35109: PPUSH
35110: LD_STRING D20-Con-1
35112: PPUSH
35113: CALL_OW 88
// if IsOk ( Kurt ) then
35117: LD_EXP 30
35121: PPUSH
35122: CALL_OW 302
35126: IFFALSE 35140
// Say ( Kurt , D20-Kurt-1 ) ;
35128: LD_EXP 30
35132: PPUSH
35133: LD_STRING D20-Kurt-1
35135: PPUSH
35136: CALL_OW 88
// if IsOk ( Kikuchi ) then
35140: LD_EXP 15
35144: PPUSH
35145: CALL_OW 302
35149: IFFALSE 35163
// Say ( Kikuchi , D20-Yam-1 ) ;
35151: LD_EXP 15
35155: PPUSH
35156: LD_STRING D20-Yam-1
35158: PPUSH
35159: CALL_OW 88
// if IsOk ( Frank ) then
35163: LD_EXP 14
35167: PPUSH
35168: CALL_OW 302
35172: IFFALSE 35186
// Say ( Frank , D20-Frank-1 ) ;
35174: LD_EXP 14
35178: PPUSH
35179: LD_STRING D20-Frank-1
35181: PPUSH
35182: CALL_OW 88
// DialogueOff ;
35186: CALL_OW 7
// if AllianceEscape = 1 then
35190: LD_EXP 84
35194: PUSH
35195: LD_INT 1
35197: EQUAL
35198: IFFALSE 35212
// AddMedal ( Roth , 1 ) else
35200: LD_STRING Roth
35202: PPUSH
35203: LD_INT 1
35205: PPUSH
35206: CALL_OW 101
35210: GO 35223
// AddMedal ( Roth , - 1 ) ;
35212: LD_STRING Roth
35214: PPUSH
35215: LD_INT 1
35217: NEG
35218: PPUSH
35219: CALL_OW 101
// if behemothStatus = 1 then
35223: LD_EXP 54
35227: PUSH
35228: LD_INT 1
35230: EQUAL
35231: IFFALSE 35245
// AddMedal ( Project , 1 ) else
35233: LD_STRING Project
35235: PPUSH
35236: LD_INT 1
35238: PPUSH
35239: CALL_OW 101
35243: GO 35256
// AddMedal ( Project , - 1 ) ;
35245: LD_STRING Project
35247: PPUSH
35248: LD_INT 1
35250: NEG
35251: PPUSH
35252: CALL_OW 101
// if unitLost = 0 then
35256: LD_EXP 90
35260: PUSH
35261: LD_INT 0
35263: EQUAL
35264: IFFALSE 35278
// AddMedal ( NoLosses , 1 ) else
35266: LD_STRING NoLosses
35268: PPUSH
35269: LD_INT 1
35271: PPUSH
35272: CALL_OW 101
35276: GO 35289
// AddMedal ( NoLosses , - 1 ) ;
35278: LD_STRING NoLosses
35280: PPUSH
35281: LD_INT 1
35283: NEG
35284: PPUSH
35285: CALL_OW 101
// GiveMedals ( MAIN ) ;
35289: LD_STRING MAIN
35291: PPUSH
35292: CALL_OW 102
// YouWin ;
35296: CALL_OW 103
// end ; end_of_file
35300: END
// every 0 0$1 trigger IsDead ( JMM ) do
35301: LD_EXP 1
35305: PPUSH
35306: CALL_OW 301
35310: IFFALSE 35322
35312: GO 35314
35314: DISABLE
// YouLost ( JMM ) ;
35315: LD_STRING JMM
35317: PPUSH
35318: CALL_OW 104
35322: END
