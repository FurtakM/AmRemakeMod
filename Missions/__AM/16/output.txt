// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 71
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 72
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 73
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 75
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 74
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 76
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 69
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 70
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 58
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 59
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 60
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 65
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 61
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 63
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 62
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 67
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 64
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 48
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// legionVehicles = [ ] ;
 211: LD_ADDR_EXP 49
 215: PUSH
 216: EMPTY
 217: ST_TO_ADDR
// russianVehicles = [ ] ;
 218: LD_ADDR_EXP 55
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// allianceVehicles = [ ] ;
 225: LD_ADDR_EXP 56
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 232: LD_ADDR_EXP 85
 236: PUSH
 237: EMPTY
 238: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 239: LD_ADDR_EXP 86
 243: PUSH
 244: EMPTY
 245: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 246: LD_ADDR_EXP 87
 250: PUSH
 251: EMPTY
 252: ST_TO_ADDR
// ruVehicles = [ ] ;
 253: LD_ADDR_EXP 51
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruBehMehs = [ ] ;
 260: LD_ADDR_EXP 52
 264: PUSH
 265: EMPTY
 266: ST_TO_ADDR
// ruBehs = [ ] ;
 267: LD_ADDR_EXP 53
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// missionStage = 0 ;
 274: LD_ADDR_EXP 92
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// behemothStatus = 0 ;
 282: LD_ADDR_EXP 54
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// unitLost = 0 ;
 290: LD_ADDR_EXP 90
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// LegionAI = 1 ;
 298: LD_ADDR_EXP 77
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// AllianceAI = 1 ;
 306: LD_ADDR_EXP 78
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// RussianAI = 1 ;
 314: LD_ADDR_EXP 79
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// timerStatus = 0 ;
 322: LD_ADDR_EXP 88
 326: PUSH
 327: LD_INT 0
 329: ST_TO_ADDR
// timeAction = 0 0$00 ;
 330: LD_ADDR_EXP 89
 334: PUSH
 335: LD_INT 0
 337: ST_TO_ADDR
// blockEvent1 = 0 ;
 338: LD_ADDR_EXP 93
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// debugMode = 0 ;
 346: LD_ADDR_EXP 94
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// PrepareHeroes ;
 354: CALL 703 0 0
// PrepareHeroesFromEpsilon ;
 358: CALL 1240 0 0
// PrepareRandoms ;
 362: CALL 1584 0 0
// PrepareLegion ;
 366: CALL 3820 0 0
// PrepareRussians ;
 370: CALL 4217 0 0
// PrepareAlliance ;
 374: CALL 5964 0 0
// PrepareDifficulty ;
 378: CALL 7289 0 0
// SetBName ( RuDep2 , zhukov ) ;
 382: LD_INT 23
 384: PPUSH
 385: LD_STRING zhukov
 387: PPUSH
 388: CALL_OW 500
// end ;
 392: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 393: LD_EXP 94
 397: PUSH
 398: LD_INT 1
 400: EQUAL
 401: IFFALSE 700
 403: GO 405
 405: DISABLE
 406: LD_INT 0
 408: PPUSH
// begin enable ;
 409: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 410: LD_ADDR_VAR 0 1
 414: PUSH
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 21
 427: PUSH
 428: LD_INT 1
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: PPUSH
 439: CALL_OW 69
 443: PUSH
 444: FOR_IN
 445: IFFALSE 461
// SetLives ( i , 1000 ) ;
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_INT 1000
 454: PPUSH
 455: CALL_OW 234
 459: GO 444
 461: POP
 462: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 463: LD_ADDR_VAR 0 1
 467: PUSH
 468: LD_INT 22
 470: PUSH
 471: LD_INT 1
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 2
 480: PUSH
 481: LD_INT 30
 483: PUSH
 484: LD_INT 0
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: LD_INT 30
 493: PUSH
 494: LD_INT 1
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PPUSH
 510: CALL_OW 69
 514: PUSH
 515: FOR_IN
 516: IFFALSE 540
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 518: LD_VAR 0 1
 522: PPUSH
 523: CALL_OW 274
 527: PPUSH
 528: LD_INT 1
 530: PPUSH
 531: LD_INT 9999
 533: PPUSH
 534: CALL_OW 277
 538: GO 515
 540: POP
 541: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 542: LD_ADDR_VAR 0 1
 546: PUSH
 547: LD_INT 22
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: LD_INT 30
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 30
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PPUSH
 589: CALL_OW 69
 593: PUSH
 594: FOR_IN
 595: IFFALSE 619
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 597: LD_VAR 0 1
 601: PPUSH
 602: CALL_OW 274
 606: PPUSH
 607: LD_INT 2
 609: PPUSH
 610: LD_INT 9999
 612: PPUSH
 613: CALL_OW 277
 617: GO 594
 619: POP
 620: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 621: LD_ADDR_VAR 0 1
 625: PUSH
 626: LD_INT 22
 628: PUSH
 629: LD_INT 1
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: PUSH
 636: LD_INT 2
 638: PUSH
 639: LD_INT 30
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PPUSH
 668: CALL_OW 69
 672: PUSH
 673: FOR_IN
 674: IFFALSE 698
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 676: LD_VAR 0 1
 680: PPUSH
 681: CALL_OW 274
 685: PPUSH
 686: LD_INT 3
 688: PPUSH
 689: LD_INT 9999
 691: PPUSH
 692: CALL_OW 277
 696: GO 673
 698: POP
 699: POP
// end ; end_of_file
 700: PPOPN 1
 702: END
// export function PrepareHeroes ; begin
 703: LD_INT 0
 705: PPUSH
// uc_side = 1 ;
 706: LD_ADDR_OWVAR 20
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// uc_nation = 1 ;
 714: LD_ADDR_OWVAR 21
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// if JMMVeh = [ ] then
 722: LD_EXP 71
 726: PUSH
 727: EMPTY
 728: EQUAL
 729: IFFALSE 775
// begin vc_engine = 3 ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control = 1 ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_chassis = 5 ;
 747: LD_ADDR_OWVAR 37
 751: PUSH
 752: LD_INT 5
 754: ST_TO_ADDR
// vc_weapon = 9 ;
 755: LD_ADDR_OWVAR 40
 759: PUSH
 760: LD_INT 9
 762: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 763: LD_ADDR_EXP 24
 767: PUSH
 768: CALL_OW 45
 772: ST_TO_ADDR
// end else
 773: GO 857
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 775: LD_ADDR_OWVAR 37
 779: PUSH
 780: LD_EXP 71
 784: PUSH
 785: LD_INT 1
 787: ARRAY
 788: PUSH
 789: LD_INT 1
 791: ARRAY
 792: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 793: LD_ADDR_OWVAR 39
 797: PUSH
 798: LD_EXP 71
 802: PUSH
 803: LD_INT 2
 805: ARRAY
 806: PUSH
 807: LD_INT 1
 809: ARRAY
 810: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 811: LD_ADDR_OWVAR 38
 815: PUSH
 816: LD_EXP 71
 820: PUSH
 821: LD_INT 3
 823: ARRAY
 824: PUSH
 825: LD_INT 1
 827: ARRAY
 828: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 829: LD_ADDR_OWVAR 40
 833: PUSH
 834: LD_EXP 71
 838: PUSH
 839: LD_INT 4
 841: ARRAY
 842: PUSH
 843: LD_INT 1
 845: ARRAY
 846: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 847: LD_ADDR_EXP 24
 851: PUSH
 852: CALL_OW 45
 856: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 857: LD_EXP 72
 861: PUSH
 862: EMPTY
 863: EQUAL
 864: NOT
 865: IFFALSE 949
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 867: LD_ADDR_OWVAR 37
 871: PUSH
 872: LD_EXP 72
 876: PUSH
 877: LD_INT 1
 879: ARRAY
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 885: LD_ADDR_OWVAR 39
 889: PUSH
 890: LD_EXP 72
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 903: LD_ADDR_OWVAR 38
 907: PUSH
 908: LD_EXP 72
 912: PUSH
 913: LD_INT 3
 915: ARRAY
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 921: LD_ADDR_OWVAR 40
 925: PUSH
 926: LD_EXP 72
 930: PUSH
 931: LD_INT 4
 933: ARRAY
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 939: LD_ADDR_EXP 25
 943: PUSH
 944: CALL_OW 45
 948: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 949: LD_EXP 24
 953: PPUSH
 954: LD_INT 0
 956: PPUSH
 957: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 961: LD_EXP 25
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 99
 980: PPUSH
 981: LD_INT 154
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 48
// if JMMGirlVeh then
 991: LD_EXP 72
 995: IFFALSE 1015
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
 997: LD_EXP 25
1001: PPUSH
1002: LD_INT 98
1004: PPUSH
1005: LD_INT 159
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1015: LD_ADDR_EXP 1
1019: PUSH
1020: LD_STRING 14_JMM
1022: PPUSH
1023: LD_INT 1
1025: PPUSH
1026: CALL 6365 0 2
1030: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1031: LD_EXP 1
1035: PPUSH
1036: LD_EXP 24
1040: PPUSH
1041: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1045: LD_EXP 72
1049: PUSH
1050: EMPTY
1051: EQUAL
1052: NOT
1053: IFFALSE 1175
// begin if JMMGirl = 1 then
1055: LD_EXP 73
1059: PUSH
1060: LD_INT 1
1062: EQUAL
1063: IFFALSE 1095
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1065: LD_ADDR_EXP 2
1069: PUSH
1070: LD_STRING 14_Joan
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL 6365 0 2
1080: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1081: LD_EXP 2
1085: PPUSH
1086: LD_EXP 25
1090: PPUSH
1091: CALL_OW 52
// end ; if JMMGirl = 2 then
1095: LD_EXP 73
1099: PUSH
1100: LD_INT 2
1102: EQUAL
1103: IFFALSE 1135
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1105: LD_ADDR_EXP 4
1109: PUSH
1110: LD_STRING 14_Lisa
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: CALL 6365 0 2
1120: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1121: LD_EXP 4
1125: PPUSH
1126: LD_EXP 25
1130: PPUSH
1131: CALL_OW 52
// end ; if JMMGirl = 3 then
1135: LD_EXP 73
1139: PUSH
1140: LD_INT 3
1142: EQUAL
1143: IFFALSE 1175
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1145: LD_ADDR_EXP 16
1149: PUSH
1150: LD_STRING 14_Connie
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL 6365 0 2
1160: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1161: LD_EXP 16
1165: PPUSH
1166: LD_EXP 25
1170: PPUSH
1171: CALL_OW 52
// end ; end ; uc_side = 4 ;
1175: LD_ADDR_OWVAR 20
1179: PUSH
1180: LD_INT 4
1182: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1183: LD_ADDR_EXP 17
1187: PUSH
1188: LD_STRING Powell
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL 6365 0 2
1198: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1199: LD_EXP 17
1203: PPUSH
1204: LD_INT 42
1206: PPUSH
1207: LD_INT 62
1209: PPUSH
1210: LD_INT 5
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1220: LD_EXP 17
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 63
1230: PPUSH
1231: CALL_OW 118
// end ;
1235: LD_VAR 0 1
1239: RET
// export function PrepareHeroesFromEpsilon ; begin
1240: LD_INT 0
1242: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1243: LD_ADDR_EXP 4
1247: PUSH
1248: LD_STRING Lisa
1250: PPUSH
1251: CALL 6422 0 1
1255: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1256: LD_ADDR_EXP 5
1260: PUSH
1261: LD_STRING Donaldson
1263: PPUSH
1264: CALL 6422 0 1
1268: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1269: LD_ADDR_EXP 6
1273: PUSH
1274: LD_STRING Bobby
1276: PPUSH
1277: CALL 6422 0 1
1281: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1282: LD_ADDR_EXP 7
1286: PUSH
1287: LD_STRING Cyrus
1289: PPUSH
1290: CALL 6422 0 1
1294: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1295: LD_ADDR_EXP 8
1299: PUSH
1300: LD_STRING Denis
1302: PPUSH
1303: CALL 6422 0 1
1307: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1308: LD_ADDR_EXP 9
1312: PUSH
1313: LD_STRING Brown
1315: PPUSH
1316: CALL 6422 0 1
1320: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1321: LD_ADDR_EXP 10
1325: PUSH
1326: LD_STRING Gladstone
1328: PPUSH
1329: CALL 6422 0 1
1333: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1334: LD_ADDR_EXP 11
1338: PUSH
1339: LD_STRING Houten
1341: PPUSH
1342: CALL 6422 0 1
1346: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1347: LD_ADDR_EXP 12
1351: PUSH
1352: LD_STRING Cornel
1354: PPUSH
1355: CALL 6422 0 1
1359: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1360: LD_ADDR_EXP 13
1364: PUSH
1365: LD_STRING Gary
1367: PPUSH
1368: CALL 6422 0 1
1372: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1373: LD_ADDR_EXP 14
1377: PUSH
1378: LD_STRING Frank
1380: PPUSH
1381: CALL 6422 0 1
1385: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1386: LD_ADDR_EXP 15
1390: PUSH
1391: LD_STRING Kikuchi
1393: PPUSH
1394: CALL 6422 0 1
1398: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1399: LD_EXP 4
1403: PPUSH
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 0
1409: PPUSH
1410: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_INT 6
1421: PPUSH
1422: LD_INT 0
1424: PPUSH
1425: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1429: LD_EXP 6
1433: PPUSH
1434: LD_INT 6
1436: PPUSH
1437: LD_INT 0
1439: PPUSH
1440: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1444: LD_EXP 7
1448: PPUSH
1449: LD_INT 6
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1459: LD_EXP 8
1463: PPUSH
1464: LD_INT 6
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1474: LD_EXP 9
1478: PPUSH
1479: LD_INT 6
1481: PPUSH
1482: LD_INT 0
1484: PPUSH
1485: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1489: LD_EXP 10
1493: PPUSH
1494: LD_INT 6
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1504: LD_EXP 11
1508: PPUSH
1509: LD_INT 6
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1519: LD_EXP 12
1523: PPUSH
1524: LD_INT 6
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1534: LD_EXP 13
1538: PPUSH
1539: LD_INT 6
1541: PPUSH
1542: LD_INT 0
1544: PPUSH
1545: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1549: LD_EXP 14
1553: PPUSH
1554: LD_INT 6
1556: PPUSH
1557: LD_INT 0
1559: PPUSH
1560: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1564: LD_EXP 15
1568: PPUSH
1569: LD_INT 6
1571: PPUSH
1572: LD_INT 0
1574: PPUSH
1575: CALL_OW 49
// end ;
1579: LD_VAR 0 1
1583: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1584: LD_INT 0
1586: PPUSH
1587: PPUSH
1588: PPUSH
1589: PPUSH
1590: PPUSH
// uc_side = 4 ;
1591: LD_ADDR_OWVAR 20
1595: PUSH
1596: LD_INT 4
1598: ST_TO_ADDR
// uc_nation = 1 ;
1599: LD_ADDR_OWVAR 21
1603: PUSH
1604: LD_INT 1
1606: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1607: LD_ADDR_EXP 18
1611: PUSH
1612: LD_STRING 13s_others
1614: PPUSH
1615: CALL_OW 31
1619: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1620: LD_ADDR_VAR 0 4
1624: PUSH
1625: LD_INT 22
1627: PUSH
1628: LD_INT 4
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 21
1637: PUSH
1638: LD_INT 1
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 69
1653: PUSH
1654: LD_EXP 17
1658: PUSH
1659: EMPTY
1660: LIST
1661: DIFF
1662: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 4
1672: PPUSH
1673: CALL 6552 0 1
1677: ST_TO_ADDR
// if others13 >= 8 then
1678: LD_EXP 18
1682: PUSH
1683: LD_INT 8
1685: GREATEREQUAL
1686: IFFALSE 1747
// begin for i = 1 to 8 do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_INT 8
1700: PUSH
1701: FOR_TO
1702: IFFALSE 1743
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1704: LD_EXP 18
1708: PUSH
1709: LD_INT 1
1711: ARRAY
1712: PPUSH
1713: LD_INT 6
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1723: LD_ADDR_EXP 18
1727: PUSH
1728: LD_EXP 18
1732: PPUSH
1733: LD_INT 1
1735: PPUSH
1736: CALL_OW 3
1740: ST_TO_ADDR
// end ;
1741: GO 1701
1743: POP
1744: POP
// end else
1745: GO 1806
// begin for i = 1 to others13 do
1747: LD_ADDR_VAR 0 2
1751: PUSH
1752: DOUBLE
1753: LD_INT 1
1755: DEC
1756: ST_TO_ADDR
1757: LD_EXP 18
1761: PUSH
1762: FOR_TO
1763: IFFALSE 1804
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1765: LD_EXP 18
1769: PUSH
1770: LD_INT 1
1772: ARRAY
1773: PPUSH
1774: LD_INT 6
1776: PPUSH
1777: LD_INT 0
1779: PPUSH
1780: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1784: LD_ADDR_EXP 18
1788: PUSH
1789: LD_EXP 18
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: CALL_OW 3
1801: ST_TO_ADDR
// end ;
1802: GO 1762
1804: POP
1805: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 4
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 21
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PPUSH
1835: CALL_OW 69
1839: PUSH
1840: LD_EXP 17
1844: PUSH
1845: EMPTY
1846: LIST
1847: DIFF
1848: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1849: LD_ADDR_VAR 0 5
1853: PUSH
1854: LD_VAR 0 4
1858: PPUSH
1859: CALL 6552 0 1
1863: ST_TO_ADDR
// if others13 >= 6 then
1864: LD_EXP 18
1868: PUSH
1869: LD_INT 6
1871: GREATEREQUAL
1872: IFFALSE 1933
// begin for i = 1 to 6 do
1874: LD_ADDR_VAR 0 2
1878: PUSH
1879: DOUBLE
1880: LD_INT 1
1882: DEC
1883: ST_TO_ADDR
1884: LD_INT 6
1886: PUSH
1887: FOR_TO
1888: IFFALSE 1929
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1890: LD_EXP 18
1894: PUSH
1895: LD_INT 1
1897: ARRAY
1898: PPUSH
1899: LD_INT 6
1901: PPUSH
1902: LD_INT 0
1904: PPUSH
1905: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1909: LD_ADDR_EXP 18
1913: PUSH
1914: LD_EXP 18
1918: PPUSH
1919: LD_INT 1
1921: PPUSH
1922: CALL_OW 3
1926: ST_TO_ADDR
// end ;
1927: GO 1887
1929: POP
1930: POP
// end else
1931: GO 1992
// begin for i = 1 to others13 do
1933: LD_ADDR_VAR 0 2
1937: PUSH
1938: DOUBLE
1939: LD_INT 1
1941: DEC
1942: ST_TO_ADDR
1943: LD_EXP 18
1947: PUSH
1948: FOR_TO
1949: IFFALSE 1990
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1951: LD_EXP 18
1955: PUSH
1956: LD_INT 1
1958: ARRAY
1959: PPUSH
1960: LD_INT 6
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1970: LD_ADDR_EXP 18
1974: PUSH
1975: LD_EXP 18
1979: PPUSH
1980: LD_INT 1
1982: PPUSH
1983: CALL_OW 3
1987: ST_TO_ADDR
// end ;
1988: GO 1948
1990: POP
1991: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 22
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 21
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PPUSH
2021: CALL_OW 69
2025: PUSH
2026: LD_EXP 17
2030: PUSH
2031: EMPTY
2032: LIST
2033: DIFF
2034: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2035: LD_ADDR_VAR 0 5
2039: PUSH
2040: LD_VAR 0 4
2044: PPUSH
2045: CALL 6552 0 1
2049: ST_TO_ADDR
// if heroLenght < 19 then
2050: LD_VAR 0 5
2054: PUSH
2055: LD_INT 19
2057: LESS
2058: IFFALSE 2156
// for i = 1 to 19 - heroLenght do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: DOUBLE
2066: LD_INT 1
2068: DEC
2069: ST_TO_ADDR
2070: LD_INT 19
2072: PUSH
2073: LD_VAR 0 5
2077: MINUS
2078: PUSH
2079: FOR_TO
2080: IFFALSE 2154
// begin hc_gallery =  ;
2082: LD_ADDR_OWVAR 33
2086: PUSH
2087: LD_STRING 
2089: ST_TO_ADDR
// hc_name =  ;
2090: LD_ADDR_OWVAR 26
2094: PUSH
2095: LD_STRING 
2097: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2098: LD_INT 0
2100: PPUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 4
2106: PPUSH
2107: CALL_OW 12
2111: PPUSH
2112: LD_INT 6
2114: PPUSH
2115: LD_INT 8
2117: PPUSH
2118: CALL_OW 12
2122: PPUSH
2123: CALL_OW 380
// un = CreateHuman ;
2127: LD_ADDR_VAR 0 3
2131: PUSH
2132: CALL_OW 44
2136: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2137: LD_VAR 0 3
2141: PPUSH
2142: LD_INT 6
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL_OW 49
// end ;
2152: GO 2079
2154: POP
2155: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2156: LD_ADDR_VAR 0 4
2160: PUSH
2161: LD_INT 22
2163: PUSH
2164: LD_INT 4
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_INT 21
2173: PUSH
2174: LD_INT 1
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PPUSH
2185: CALL_OW 69
2189: PUSH
2190: LD_EXP 17
2194: PUSH
2195: LD_EXP 1
2199: PUSH
2200: LD_EXP 2
2204: PUSH
2205: LD_EXP 3
2209: PUSH
2210: LD_EXP 4
2214: PUSH
2215: LD_EXP 5
2219: PUSH
2220: LD_EXP 6
2224: PUSH
2225: LD_EXP 7
2229: PUSH
2230: LD_EXP 8
2234: PUSH
2235: LD_EXP 9
2239: PUSH
2240: LD_EXP 10
2244: PUSH
2245: LD_EXP 11
2249: PUSH
2250: LD_EXP 12
2254: PUSH
2255: LD_EXP 13
2259: PUSH
2260: LD_EXP 14
2264: PUSH
2265: LD_EXP 15
2269: PUSH
2270: LD_EXP 16
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: DIFF
2294: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2295: LD_ADDR_EXP 58
2299: PUSH
2300: LD_VAR 0 4
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: CALL 6922 0 2
2312: ST_TO_ADDR
// for i = 1 to 8 do
2313: LD_ADDR_VAR 0 2
2317: PUSH
2318: DOUBLE
2319: LD_INT 1
2321: DEC
2322: ST_TO_ADDR
2323: LD_INT 8
2325: PUSH
2326: FOR_TO
2327: IFFALSE 2357
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2329: LD_ADDR_EXP 59
2333: PUSH
2334: LD_EXP 59
2338: PUSH
2339: LD_EXP 58
2343: PUSH
2344: LD_VAR 0 2
2348: ARRAY
2349: PUSH
2350: LD_INT 1
2352: ARRAY
2353: ADD
2354: ST_TO_ADDR
2355: GO 2326
2357: POP
2358: POP
// SetClass ( amUnitsAttack , 1 ) ;
2359: LD_EXP 59
2363: PPUSH
2364: LD_INT 1
2366: PPUSH
2367: CALL_OW 336
// end ;
2371: LD_VAR 0 1
2375: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
// uc_side = 1 ;
2381: LD_ADDR_OWVAR 20
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// uc_nation = 1 ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// for i := 1 to 5 do
2397: LD_ADDR_VAR 0 2
2401: PUSH
2402: DOUBLE
2403: LD_INT 1
2405: DEC
2406: ST_TO_ADDR
2407: LD_INT 5
2409: PUSH
2410: FOR_TO
2411: IFFALSE 2495
// begin vc_engine = 3 ;
2413: LD_ADDR_OWVAR 39
2417: PUSH
2418: LD_INT 3
2420: ST_TO_ADDR
// vc_control = 3 ;
2421: LD_ADDR_OWVAR 38
2425: PUSH
2426: LD_INT 3
2428: ST_TO_ADDR
// vc_chassis = 3 ;
2429: LD_ADDR_OWVAR 37
2433: PUSH
2434: LD_INT 3
2436: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2437: LD_ADDR_OWVAR 40
2441: PUSH
2442: LD_INT 5
2444: PUSH
2445: LD_INT 9
2447: PUSH
2448: LD_INT 7
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 1
2458: PPUSH
2459: LD_INT 3
2461: PPUSH
2462: CALL_OW 12
2466: ARRAY
2467: ST_TO_ADDR
// veh = CreateVehicle ;
2468: LD_ADDR_VAR 0 3
2472: PUSH
2473: CALL_OW 45
2477: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2478: LD_VAR 0 3
2482: PPUSH
2483: LD_INT 14
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 49
// end ;
2493: GO 2410
2495: POP
2496: POP
// vc_engine = 3 ;
2497: LD_ADDR_OWVAR 39
2501: PUSH
2502: LD_INT 3
2504: ST_TO_ADDR
// vc_control = 1 ;
2505: LD_ADDR_OWVAR 38
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
// vc_chassis = 3 ;
2513: LD_ADDR_OWVAR 37
2517: PUSH
2518: LD_INT 3
2520: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2521: LD_ADDR_OWVAR 40
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: LD_INT 9
2531: PUSH
2532: LD_INT 7
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 1
2542: PPUSH
2543: LD_INT 3
2545: PPUSH
2546: CALL_OW 12
2550: ARRAY
2551: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2552: LD_ADDR_EXP 25
2556: PUSH
2557: CALL_OW 45
2561: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2562: LD_EXP 25
2566: PPUSH
2567: LD_INT 14
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL_OW 49
// if JMMGirl = 1 then
2577: LD_EXP 73
2581: PUSH
2582: LD_INT 1
2584: EQUAL
2585: IFFALSE 2638
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2587: LD_ADDR_EXP 2
2591: PUSH
2592: LD_STRING 14_Joan
2594: PPUSH
2595: LD_INT 1
2597: PPUSH
2598: CALL 6365 0 2
2602: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2603: LD_EXP 2
2607: PPUSH
2608: LD_EXP 25
2612: PPUSH
2613: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2617: LD_EXP 25
2621: PPUSH
2622: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2626: LD_EXP 2
2630: PPUSH
2631: LD_STRING D10BW-Joan-1
2633: PPUSH
2634: CALL_OW 88
// end ; if JMMGirl = 2 then
2638: LD_EXP 73
2642: PUSH
2643: LD_INT 2
2645: EQUAL
2646: IFFALSE 2699
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2648: LD_ADDR_EXP 4
2652: PUSH
2653: LD_STRING 14_Lisa
2655: PPUSH
2656: LD_INT 1
2658: PPUSH
2659: CALL 6365 0 2
2663: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2664: LD_EXP 4
2668: PPUSH
2669: LD_EXP 25
2673: PPUSH
2674: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2678: LD_EXP 25
2682: PPUSH
2683: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2687: LD_EXP 4
2691: PPUSH
2692: LD_STRING D10BW-Lisa-1
2694: PPUSH
2695: CALL_OW 88
// end ; if JMMGirl = 3 then
2699: LD_EXP 73
2703: PUSH
2704: LD_INT 3
2706: EQUAL
2707: IFFALSE 2760
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2709: LD_ADDR_EXP 16
2713: PUSH
2714: LD_STRING 14_Connie
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: CALL 6365 0 2
2724: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2725: LD_EXP 16
2729: PPUSH
2730: LD_EXP 25
2734: PPUSH
2735: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2739: LD_EXP 25
2743: PPUSH
2744: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2748: LD_EXP 4
2752: PPUSH
2753: LD_STRING D10BW-Con-1
2755: PPUSH
2756: CALL_OW 88
// end ; end ;
2760: LD_VAR 0 1
2764: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2765: LD_INT 0
2767: PPUSH
2768: PPUSH
2769: PPUSH
2770: PPUSH
2771: PPUSH
2772: PPUSH
2773: PPUSH
2774: PPUSH
2775: PPUSH
// uc_side = 1 ;
2776: LD_ADDR_OWVAR 20
2780: PUSH
2781: LD_INT 1
2783: ST_TO_ADDR
// uc_nation = 1 ;
2784: LD_ADDR_OWVAR 21
2788: PUSH
2789: LD_INT 1
2791: ST_TO_ADDR
// omegaVeh = [ ] ;
2792: LD_ADDR_VAR 0 3
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2799: LD_STRING 13s_Lisa
2801: PPUSH
2802: CALL_OW 28
2806: PUSH
2807: LD_INT 0
2809: EQUAL
2810: IFFALSE 2825
// Lisa = PrepareUnitOmega ( Lisa ) ;
2812: LD_ADDR_EXP 4
2816: PUSH
2817: LD_STRING Lisa
2819: PPUSH
2820: CALL 6479 0 1
2824: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2825: LD_STRING 13s_Donaldson
2827: PPUSH
2828: CALL_OW 28
2832: PUSH
2833: LD_INT 0
2835: EQUAL
2836: IFFALSE 2851
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2838: LD_ADDR_EXP 5
2842: PUSH
2843: LD_STRING Donaldson
2845: PPUSH
2846: CALL 6479 0 1
2850: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2851: LD_STRING 13s_Bobby
2853: PPUSH
2854: CALL_OW 28
2858: PUSH
2859: LD_INT 0
2861: EQUAL
2862: IFFALSE 2877
// Bobby = PrepareUnitOmega ( Bobby ) ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_STRING Bobby
2871: PPUSH
2872: CALL 6479 0 1
2876: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2877: LD_STRING 13s_Cyrus
2879: PPUSH
2880: CALL_OW 28
2884: PUSH
2885: LD_INT 0
2887: EQUAL
2888: IFFALSE 2903
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2890: LD_ADDR_EXP 7
2894: PUSH
2895: LD_STRING Cyrus
2897: PPUSH
2898: CALL 6479 0 1
2902: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2903: LD_STRING 13s_Denis
2905: PPUSH
2906: CALL_OW 28
2910: PUSH
2911: LD_INT 0
2913: EQUAL
2914: IFFALSE 2929
// Denis = PrepareUnitOmega ( Denis ) ;
2916: LD_ADDR_EXP 8
2920: PUSH
2921: LD_STRING Denis
2923: PPUSH
2924: CALL 6479 0 1
2928: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2929: LD_STRING 13s_Brown
2931: PPUSH
2932: CALL_OW 28
2936: PUSH
2937: LD_INT 0
2939: EQUAL
2940: IFFALSE 2955
// Brown = PrepareUnitOmega ( Brown ) ;
2942: LD_ADDR_EXP 9
2946: PUSH
2947: LD_STRING Brown
2949: PPUSH
2950: CALL 6479 0 1
2954: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2955: LD_STRING 13s_Gladstone
2957: PPUSH
2958: CALL_OW 28
2962: PUSH
2963: LD_INT 0
2965: EQUAL
2966: IFFALSE 2981
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2968: LD_ADDR_EXP 10
2972: PUSH
2973: LD_STRING Gladstone
2975: PPUSH
2976: CALL 6479 0 1
2980: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
2981: LD_STRING 13s_Houten
2983: PPUSH
2984: CALL_OW 28
2988: PUSH
2989: LD_INT 0
2991: EQUAL
2992: IFFALSE 3007
// Houten = PrepareUnitOmega ( Houten ) ;
2994: LD_ADDR_EXP 11
2998: PUSH
2999: LD_STRING Houten
3001: PPUSH
3002: CALL 6479 0 1
3006: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3007: LD_STRING 13s_Cornell
3009: PPUSH
3010: CALL_OW 28
3014: PUSH
3015: LD_INT 0
3017: EQUAL
3018: IFFALSE 3033
// Cornel = PrepareUnitOmega ( Cornell ) ;
3020: LD_ADDR_EXP 12
3024: PUSH
3025: LD_STRING Cornell
3027: PPUSH
3028: CALL 6479 0 1
3032: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3033: LD_STRING 13s_Gary
3035: PPUSH
3036: CALL_OW 28
3040: PUSH
3041: LD_INT 0
3043: EQUAL
3044: IFFALSE 3059
// Gary = PrepareUnitOmega ( Gary ) ;
3046: LD_ADDR_EXP 13
3050: PUSH
3051: LD_STRING Gary
3053: PPUSH
3054: CALL 6479 0 1
3058: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3059: LD_STRING 13s_Frank
3061: PPUSH
3062: CALL_OW 28
3066: PUSH
3067: LD_INT 0
3069: EQUAL
3070: IFFALSE 3085
// Frank = PrepareUnitOmega ( Frank ) ;
3072: LD_ADDR_EXP 14
3076: PUSH
3077: LD_STRING Frank
3079: PPUSH
3080: CALL 6479 0 1
3084: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3085: LD_STRING 13s_Kikuchi
3087: PPUSH
3088: CALL_OW 28
3092: PUSH
3093: LD_INT 0
3095: EQUAL
3096: IFFALSE 3111
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3098: LD_ADDR_EXP 15
3102: PUSH
3103: LD_STRING Kikuchi
3105: PPUSH
3106: CALL 6479 0 1
3110: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3111: LD_STRING 13s_Kikuchi
3113: PPUSH
3114: CALL_OW 28
3118: PUSH
3119: LD_INT 0
3121: EQUAL
3122: IFFALSE 3137
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3124: LD_ADDR_EXP 15
3128: PUSH
3129: LD_STRING Kikuchi
3131: PPUSH
3132: CALL 6479 0 1
3136: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3137: LD_ADDR_EXP 22
3141: PUSH
3142: LD_STRING Gordon
3144: PPUSH
3145: CALL 6479 0 1
3149: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3150: LD_ADDR_EXP 23
3154: PUSH
3155: LD_STRING Peter
3157: PPUSH
3158: CALL 6479 0 1
3162: ST_TO_ADDR
// if StevensStatus = 1 then
3163: LD_EXP 70
3167: PUSH
3168: LD_INT 1
3170: EQUAL
3171: IFFALSE 3188
// Stevens = PrepareUnitOmega ( Stevens ) else
3173: LD_ADDR_EXP 3
3177: PUSH
3178: LD_STRING Stevens
3180: PPUSH
3181: CALL 6479 0 1
3185: ST_TO_ADDR
3186: GO 3201
// Baker = PrepareUnitOmega ( Baker ) ;
3188: LD_ADDR_EXP 21
3192: PUSH
3193: LD_STRING Baker
3195: PPUSH
3196: CALL 6479 0 1
3200: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3201: LD_ADDR_EXP 19
3205: PUSH
3206: LD_STRING 15_other_survivors
3208: PPUSH
3209: CALL_OW 31
3213: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3214: LD_ADDR_VAR 0 7
3218: PUSH
3219: LD_STRING 15_Vehicles_1
3221: PPUSH
3222: EMPTY
3223: PPUSH
3224: CALL_OW 30
3228: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3229: LD_ADDR_VAR 0 8
3233: PUSH
3234: LD_STRING 15_ResourcesInCargo_1
3236: PPUSH
3237: EMPTY
3238: PPUSH
3239: CALL_OW 30
3243: ST_TO_ADDR
// for i := 1 to vehicles do
3244: LD_ADDR_VAR 0 2
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_VAR 0 7
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3485
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3262: LD_ADDR_OWVAR 21
3266: PUSH
3267: LD_VAR 0 7
3271: PUSH
3272: LD_VAR 0 2
3276: ARRAY
3277: PUSH
3278: LD_INT 1
3280: ARRAY
3281: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3282: LD_ADDR_OWVAR 37
3286: PUSH
3287: LD_VAR 0 7
3291: PUSH
3292: LD_VAR 0 2
3296: ARRAY
3297: PUSH
3298: LD_INT 2
3300: ARRAY
3301: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3302: LD_ADDR_OWVAR 39
3306: PUSH
3307: LD_VAR 0 7
3311: PUSH
3312: LD_VAR 0 2
3316: ARRAY
3317: PUSH
3318: LD_INT 3
3320: ARRAY
3321: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3322: LD_ADDR_OWVAR 38
3326: PUSH
3327: LD_VAR 0 7
3331: PUSH
3332: LD_VAR 0 2
3336: ARRAY
3337: PUSH
3338: LD_INT 4
3340: ARRAY
3341: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3342: LD_ADDR_OWVAR 40
3346: PUSH
3347: LD_VAR 0 7
3351: PUSH
3352: LD_VAR 0 2
3356: ARRAY
3357: PUSH
3358: LD_INT 5
3360: ARRAY
3361: ST_TO_ADDR
// if vc_weapon = 8 then
3362: LD_OWVAR 40
3366: PUSH
3367: LD_INT 8
3369: EQUAL
3370: IFFALSE 3382
// vc_weapon = 9 else
3372: LD_ADDR_OWVAR 40
3376: PUSH
3377: LD_INT 9
3379: ST_TO_ADDR
3380: GO 3402
// vc_weapon = vehicles [ i ] [ 5 ] ;
3382: LD_ADDR_OWVAR 40
3386: PUSH
3387: LD_VAR 0 7
3391: PUSH
3392: LD_VAR 0 2
3396: ARRAY
3397: PUSH
3398: LD_INT 5
3400: ARRAY
3401: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3402: LD_ADDR_OWVAR 41
3406: PUSH
3407: LD_INT 40
3409: ST_TO_ADDR
// veh = CreateVehicle ;
3410: LD_ADDR_VAR 0 5
3414: PUSH
3415: CALL_OW 45
3419: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3420: LD_VAR 0 5
3424: PPUSH
3425: LD_INT 5
3427: PPUSH
3428: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3432: LD_VAR 0 5
3436: PPUSH
3437: LD_INT 300
3439: PPUSH
3440: LD_INT 800
3442: PPUSH
3443: CALL_OW 12
3447: PPUSH
3448: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3452: LD_ADDR_VAR 0 3
3456: PUSH
3457: LD_VAR 0 3
3461: PUSH
3462: LD_VAR 0 5
3466: ADD
3467: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3468: LD_VAR 0 5
3472: PPUSH
3473: LD_INT 16
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 49
// end ;
3483: GO 3259
3485: POP
3486: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3487: LD_ADDR_VAR 0 9
3491: PUSH
3492: LD_INT 16
3494: PPUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 34
3517: PUSH
3518: LD_INT 12
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 33
3527: PUSH
3528: LD_INT 1
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 32
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: PPUSH
3552: CALL_OW 70
3556: ST_TO_ADDR
// if cargoList > 0 then
3557: LD_VAR 0 9
3561: PUSH
3562: LD_INT 0
3564: GREATER
3565: IFFALSE 3698
// for i = 1 to cargoList do
3567: LD_ADDR_VAR 0 2
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 9
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3696
// begin if resources > 0 then
3585: LD_VAR 0 8
3589: PUSH
3590: LD_INT 0
3592: GREATER
3593: IFFALSE 3694
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3595: LD_VAR 0 9
3599: PUSH
3600: LD_VAR 0 2
3604: ARRAY
3605: PPUSH
3606: LD_INT 1
3608: PPUSH
3609: LD_VAR 0 8
3613: PUSH
3614: LD_VAR 0 2
3618: ARRAY
3619: PUSH
3620: LD_INT 1
3622: ARRAY
3623: PPUSH
3624: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3628: LD_VAR 0 9
3632: PUSH
3633: LD_VAR 0 2
3637: ARRAY
3638: PPUSH
3639: LD_INT 2
3641: PPUSH
3642: LD_VAR 0 8
3646: PUSH
3647: LD_VAR 0 2
3651: ARRAY
3652: PUSH
3653: LD_INT 2
3655: ARRAY
3656: PPUSH
3657: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3661: LD_VAR 0 9
3665: PUSH
3666: LD_VAR 0 2
3670: ARRAY
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: LD_VAR 0 8
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: PUSH
3686: LD_INT 3
3688: ARRAY
3689: PPUSH
3690: CALL_OW 291
// end ; end ;
3694: GO 3582
3696: POP
3697: POP
// for i := 1 to heroesFromOmega do
3698: LD_ADDR_VAR 0 2
3702: PUSH
3703: DOUBLE
3704: LD_INT 1
3706: DEC
3707: ST_TO_ADDR
3708: LD_EXP 20
3712: PUSH
3713: FOR_TO
3714: IFFALSE 3744
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3716: LD_EXP 20
3720: PUSH
3721: LD_VAR 0 2
3725: ARRAY
3726: PPUSH
3727: LD_VAR 0 3
3731: PUSH
3732: LD_VAR 0 2
3736: ARRAY
3737: PPUSH
3738: CALL_OW 52
// end ;
3742: GO 3713
3744: POP
3745: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3746: LD_ADDR_VAR 0 6
3750: PUSH
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_INT 58
3758: PUSH
3759: EMPTY
3760: LIST
3761: PPUSH
3762: CALL_OW 72
3766: ST_TO_ADDR
// for i := 1 to others13Omega do
3767: LD_ADDR_VAR 0 2
3771: PUSH
3772: DOUBLE
3773: LD_INT 1
3775: DEC
3776: ST_TO_ADDR
3777: LD_EXP 19
3781: PUSH
3782: FOR_TO
3783: IFFALSE 3813
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3785: LD_EXP 19
3789: PUSH
3790: LD_VAR 0 2
3794: ARRAY
3795: PPUSH
3796: LD_VAR 0 6
3800: PUSH
3801: LD_VAR 0 2
3805: ARRAY
3806: PPUSH
3807: CALL_OW 52
// end ;
3811: GO 3782
3813: POP
3814: POP
// end ; end_of_file
3815: LD_VAR 0 1
3819: RET
// export function PrepareLegion ; var i ; begin
3820: LD_INT 0
3822: PPUSH
3823: PPUSH
// uc_side = 8 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 8
3831: ST_TO_ADDR
// uc_nation = 2 ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 2
3839: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3840: LD_ADDR_EXP 30
3844: PUSH
3845: LD_STRING Kurt
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 6365 0 2
3855: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3856: LD_ADDR_EXP 35
3860: PUSH
3861: LD_STRING Kozlov
3863: PPUSH
3864: LD_INT 0
3866: PPUSH
3867: CALL 6365 0 2
3871: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3872: LD_INT 8
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: LD_INT 122
3880: PPUSH
3881: LD_INT 10
3883: PPUSH
3884: LD_INT 2
3886: PPUSH
3887: LD_INT 4
3889: PPUSH
3890: CALL 7483 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3894: LD_INT 8
3896: PPUSH
3897: LD_INT 2
3899: PPUSH
3900: LD_INT 99
3902: PPUSH
3903: LD_INT 10
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: LD_INT 2
3911: PPUSH
3912: CALL 7483 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3916: LD_INT 8
3918: PPUSH
3919: LD_INT 2
3921: PPUSH
3922: LD_INT 104
3924: PPUSH
3925: LD_INT 10
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: CALL 7483 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3938: LD_INT 8
3940: PPUSH
3941: LD_INT 2
3943: PPUSH
3944: LD_INT 104
3946: PPUSH
3947: LD_INT 10
3949: PPUSH
3950: LD_INT 8
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: CALL 7483 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3960: LD_INT 8
3962: PPUSH
3963: LD_INT 2
3965: PPUSH
3966: LD_INT 118
3968: PPUSH
3969: LD_INT 10
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: CALL 7483 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
3982: LD_INT 8
3984: PPUSH
3985: LD_INT 2
3987: PPUSH
3988: LD_INT 117
3990: PPUSH
3991: LD_INT 10
3993: PPUSH
3994: LD_INT 3
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: CALL 7483 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4004: LD_INT 8
4006: PPUSH
4007: LD_INT 2
4009: PPUSH
4010: LD_INT 252
4012: PPUSH
4013: LD_INT 10
4015: PPUSH
4016: LD_INT 4
4018: PPUSH
4019: LD_INT 2
4021: PPUSH
4022: CALL 7483 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: LD_INT 22
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 21
4043: PUSH
4044: LD_INT 3
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 30
4053: PUSH
4054: LD_INT 32
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 58
4063: PUSH
4064: EMPTY
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: FOR_IN
4079: IFFALSE 4107
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4081: LD_INT 8
4083: PPUSH
4084: LD_INT 2
4086: PPUSH
4087: LD_VAR 0 2
4091: PPUSH
4092: LD_INT 10
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL 7483 0 6
4105: GO 4078
4107: POP
4108: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4109: LD_INT 8
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: LD_INT 140
4117: PPUSH
4118: LD_INT 10
4120: PPUSH
4121: LD_INT 3
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL 7483 0 6
// arControler = UnitsInside ( ArControl ) ;
4131: LD_ADDR_EXP 50
4135: PUSH
4136: LD_INT 140
4138: PPUSH
4139: CALL_OW 313
4143: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4144: LD_INT 139
4146: PPUSH
4147: LD_EXP 50
4151: PUSH
4152: LD_INT 1
4154: ARRAY
4155: PPUSH
4156: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4160: LD_INT 138
4162: PPUSH
4163: LD_EXP 50
4167: PUSH
4168: LD_INT 1
4170: ARRAY
4171: PPUSH
4172: CALL_OW 195
// hc_name = Ali Hadarach ;
4176: LD_ADDR_OWVAR 26
4180: PUSH
4181: LD_STRING Ali Hadarach
4183: ST_TO_ADDR
// hc_gallery =  ;
4184: LD_ADDR_OWVAR 33
4188: PUSH
4189: LD_STRING 
4191: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4192: LD_INT 1
4194: PPUSH
4195: LD_INT 8
4197: PPUSH
4198: CALL_OW 383
// LegionFriend = CreateHuman ;
4202: LD_ADDR_EXP 47
4206: PUSH
4207: CALL_OW 44
4211: ST_TO_ADDR
// end ; end_of_file
4212: LD_VAR 0 1
4216: RET
// export function PrepareRussians ; var i ; begin
4217: LD_INT 0
4219: PPUSH
4220: PPUSH
// uc_side = 3 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 3
4228: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4229: LD_ADDR_EXP 26
4233: PUSH
4234: LD_STRING Platonov
4236: PPUSH
4237: LD_INT 0
4239: PPUSH
4240: CALL 6365 0 2
4244: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4245: LD_EXP 26
4249: PPUSH
4250: LD_INT 23
4252: PPUSH
4253: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4257: LD_ADDR_EXP 27
4261: PUSH
4262: LD_STRING Yakotich
4264: PPUSH
4265: LD_INT 0
4267: PPUSH
4268: CALL 6365 0 2
4272: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4273: LD_EXP 27
4277: PPUSH
4278: LD_INT 26
4280: PPUSH
4281: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4285: LD_ADDR_EXP 36
4289: PUSH
4290: LD_STRING Kovalyuk
4292: PPUSH
4293: LD_INT 0
4295: PPUSH
4296: CALL 6365 0 2
4300: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4301: LD_EXP 36
4305: PPUSH
4306: LD_INT 3
4308: PPUSH
4309: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4313: LD_ADDR_EXP 52
4317: PUSH
4318: LD_EXP 52
4322: PUSH
4323: LD_EXP 36
4327: ADD
4328: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4329: LD_ADDR_EXP 37
4333: PUSH
4334: LD_STRING Oblukov
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL 6365 0 2
4344: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4345: LD_ADDR_EXP 38
4349: PUSH
4350: LD_STRING Bystrov
4352: PPUSH
4353: LD_INT 0
4355: PPUSH
4356: CALL 6365 0 2
4360: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4361: LD_ADDR_EXP 39
4365: PUSH
4366: LD_STRING Fadeev
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL 6365 0 2
4376: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4377: LD_ADDR_EXP 40
4381: PUSH
4382: LD_STRING Gleb
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL 6365 0 2
4392: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4393: LD_ADDR_EXP 41
4397: PUSH
4398: LD_STRING Petrosyan
4400: PPUSH
4401: LD_INT 0
4403: PPUSH
4404: CALL 6365 0 2
4408: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4409: LD_ADDR_EXP 42
4413: PUSH
4414: LD_STRING Petrovova
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL 6365 0 2
4424: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4425: LD_ADDR_EXP 43
4429: PUSH
4430: LD_STRING Kuzmov
4432: PPUSH
4433: LD_INT 0
4435: PPUSH
4436: CALL 6365 0 2
4440: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4441: LD_ADDR_EXP 44
4445: PUSH
4446: LD_STRING Mikhail
4448: PPUSH
4449: LD_INT 0
4451: PPUSH
4452: CALL 6365 0 2
4456: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4457: LD_ADDR_EXP 45
4461: PUSH
4462: LD_STRING Furmanov
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL 6365 0 2
4472: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4473: LD_ADDR_EXP 46
4477: PUSH
4478: LD_STRING Belkov
4480: PPUSH
4481: LD_INT 0
4483: PPUSH
4484: CALL 6365 0 2
4488: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4489: LD_EXP 37
4493: PPUSH
4494: LD_INT 22
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 21
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 58
4526: PUSH
4527: EMPTY
4528: LIST
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PUSH
4541: LD_INT 1
4543: ARRAY
4544: PPUSH
4545: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4549: LD_EXP 39
4553: PPUSH
4554: LD_INT 22
4556: PUSH
4557: LD_INT 3
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 21
4566: PUSH
4567: LD_INT 3
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_INT 30
4576: PUSH
4577: LD_INT 32
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 58
4586: PUSH
4587: EMPTY
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: LD_INT 1
4603: ARRAY
4604: PPUSH
4605: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4609: LD_EXP 40
4613: PPUSH
4614: LD_INT 22
4616: PUSH
4617: LD_INT 3
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: LD_INT 21
4626: PUSH
4627: LD_INT 3
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 30
4636: PUSH
4637: LD_INT 32
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 58
4646: PUSH
4647: EMPTY
4648: LIST
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: PUSH
4661: LD_INT 1
4663: ARRAY
4664: PPUSH
4665: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4669: LD_EXP 42
4673: PPUSH
4674: LD_INT 22
4676: PUSH
4677: LD_INT 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 21
4686: PUSH
4687: LD_INT 3
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 30
4696: PUSH
4697: LD_INT 32
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 58
4706: PUSH
4707: EMPTY
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: PUSH
4721: LD_INT 1
4723: ARRAY
4724: PPUSH
4725: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4729: LD_EXP 43
4733: PPUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 30
4756: PUSH
4757: LD_INT 32
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 58
4766: PUSH
4767: EMPTY
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: PUSH
4781: LD_INT 1
4783: ARRAY
4784: PPUSH
4785: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4789: LD_EXP 45
4793: PPUSH
4794: LD_INT 22
4796: PUSH
4797: LD_INT 3
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 21
4806: PUSH
4807: LD_INT 3
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 30
4816: PUSH
4817: LD_INT 32
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 58
4826: PUSH
4827: EMPTY
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: PUSH
4841: LD_INT 1
4843: ARRAY
4844: PPUSH
4845: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4849: LD_EXP 46
4853: PPUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 21
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 32
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 58
4886: PUSH
4887: EMPTY
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: PPUSH
4896: CALL_OW 69
4900: PUSH
4901: LD_INT 1
4903: ARRAY
4904: PPUSH
4905: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4909: LD_EXP 38
4913: PPUSH
4914: LD_INT 2
4916: PPUSH
4917: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4921: LD_EXP 41
4925: PPUSH
4926: LD_INT 1
4928: PPUSH
4929: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4933: LD_EXP 44
4937: PPUSH
4938: LD_INT 26
4940: PPUSH
4941: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4945: LD_EXP 44
4949: PPUSH
4950: LD_INT 2
4952: PPUSH
4953: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4957: LD_INT 3
4959: PPUSH
4960: LD_INT 3
4962: PPUSH
4963: LD_INT 26
4965: PPUSH
4966: LD_INT 10
4968: PPUSH
4969: LD_INT 2
4971: PPUSH
4972: LD_INT 5
4974: PPUSH
4975: CALL 7483 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
4979: LD_INT 3
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: LD_INT 23
4987: PPUSH
4988: LD_INT 10
4990: PPUSH
4991: LD_INT 2
4993: PPUSH
4994: LD_INT 4
4996: PPUSH
4997: CALL 7483 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5001: LD_INT 3
5003: PPUSH
5004: LD_INT 3
5006: PPUSH
5007: LD_INT 27
5009: PPUSH
5010: LD_INT 10
5012: PPUSH
5013: LD_INT 9
5015: PPUSH
5016: LD_INT 6
5018: PPUSH
5019: CALL 7483 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5023: LD_INT 3
5025: PPUSH
5026: LD_INT 3
5028: PPUSH
5029: LD_INT 27
5031: PPUSH
5032: LD_INT 10
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 3
5040: PPUSH
5041: CALL 7483 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5045: LD_INT 3
5047: PPUSH
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 4
5053: PPUSH
5054: LD_INT 10
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 6
5062: PPUSH
5063: CALL 7483 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5067: LD_INT 3
5069: PPUSH
5070: LD_INT 3
5072: PPUSH
5073: LD_INT 10
5075: PPUSH
5076: LD_INT 10
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 6
5084: PPUSH
5085: CALL 7483 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5089: LD_INT 3
5091: PPUSH
5092: LD_INT 3
5094: PPUSH
5095: LD_INT 2
5097: PPUSH
5098: LD_INT 10
5100: PPUSH
5101: LD_INT 4
5103: PPUSH
5104: LD_INT 3
5106: PPUSH
5107: CALL 7483 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5111: LD_INT 3
5113: PPUSH
5114: LD_INT 3
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_INT 10
5122: PPUSH
5123: LD_INT 4
5125: PPUSH
5126: LD_INT 3
5128: PPUSH
5129: CALL 7483 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5133: LD_ADDR_VAR 0 2
5137: PUSH
5138: LD_INT 22
5140: PUSH
5141: LD_INT 3
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 30
5160: PUSH
5161: LD_INT 32
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 58
5170: PUSH
5171: EMPTY
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: PPUSH
5180: CALL_OW 69
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5214
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 3
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: LD_INT 10
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL 7483 0 6
5212: GO 5185
5214: POP
5215: POP
// end ;
5216: LD_VAR 0 1
5220: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5221: LD_INT 0
5223: PPUSH
5224: PPUSH
5225: PPUSH
5226: PPUSH
// uc_side = 6 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 6
5234: ST_TO_ADDR
// uc_nation = 1 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// vc_engine = 3 ;
5243: LD_ADDR_OWVAR 39
5247: PUSH
5248: LD_INT 3
5250: ST_TO_ADDR
// vc_control = 1 ;
5251: LD_ADDR_OWVAR 38
5255: PUSH
5256: LD_INT 1
5258: ST_TO_ADDR
// vc_chassis = 5 ;
5259: LD_ADDR_OWVAR 37
5263: PUSH
5264: LD_INT 5
5266: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5267: LD_ADDR_OWVAR 40
5271: PUSH
5272: LD_INT 5
5274: PUSH
5275: LD_INT 9
5277: PUSH
5278: LD_INT 7
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 1
5288: PPUSH
5289: LD_INT 3
5291: PPUSH
5292: CALL_OW 12
5296: ARRAY
5297: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5298: LD_ADDR_EXP 34
5302: PUSH
5303: CALL_OW 45
5307: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5308: LD_EXP 34
5312: PPUSH
5313: LD_INT 14
5315: PPUSH
5316: LD_INT 0
5318: PPUSH
5319: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5323: LD_ADDR_EXP 33
5327: PUSH
5328: LD_STRING Vsevolod
5330: PPUSH
5331: LD_INT 0
5333: PPUSH
5334: CALL 6365 0 2
5338: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5339: LD_EXP 33
5343: PPUSH
5344: LD_EXP 34
5348: PPUSH
5349: CALL_OW 52
// for i := 1 to 5 do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_INT 5
5365: PUSH
5366: FOR_TO
5367: IFFALSE 5451
// begin vc_engine = 3 ;
5369: LD_ADDR_OWVAR 39
5373: PUSH
5374: LD_INT 3
5376: ST_TO_ADDR
// vc_control = 3 ;
5377: LD_ADDR_OWVAR 38
5381: PUSH
5382: LD_INT 3
5384: ST_TO_ADDR
// vc_chassis = 3 ;
5385: LD_ADDR_OWVAR 37
5389: PUSH
5390: LD_INT 3
5392: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5393: LD_ADDR_OWVAR 40
5397: PUSH
5398: LD_INT 5
5400: PUSH
5401: LD_INT 9
5403: PUSH
5404: LD_INT 7
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 3
5417: PPUSH
5418: CALL_OW 12
5422: ARRAY
5423: ST_TO_ADDR
// veh = CreateVehicle ;
5424: LD_ADDR_VAR 0 3
5428: PUSH
5429: CALL_OW 45
5433: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5434: LD_VAR 0 3
5438: PPUSH
5439: LD_INT 14
5441: PPUSH
5442: LD_INT 0
5444: PPUSH
5445: CALL_OW 49
// end ;
5449: GO 5366
5451: POP
5452: POP
// uc_nation = 3 ;
5453: LD_ADDR_OWVAR 21
5457: PUSH
5458: LD_INT 3
5460: ST_TO_ADDR
// for i := 1 to 7 do
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: DOUBLE
5467: LD_INT 1
5469: DEC
5470: ST_TO_ADDR
5471: LD_INT 7
5473: PUSH
5474: FOR_TO
5475: IFFALSE 5567
// begin vc_engine = 3 ;
5477: LD_ADDR_OWVAR 39
5481: PUSH
5482: LD_INT 3
5484: ST_TO_ADDR
// vc_control = 3 ;
5485: LD_ADDR_OWVAR 38
5489: PUSH
5490: LD_INT 3
5492: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5493: LD_ADDR_OWVAR 37
5497: PUSH
5498: LD_INT 24
5500: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5501: LD_ADDR_OWVAR 40
5505: PUSH
5506: LD_INT 44
5508: PUSH
5509: LD_INT 47
5511: PUSH
5512: LD_INT 45
5514: PUSH
5515: LD_INT 46
5517: PUSH
5518: LD_INT 49
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 1
5530: PPUSH
5531: LD_INT 4
5533: PPUSH
5534: CALL_OW 12
5538: ARRAY
5539: ST_TO_ADDR
// veh = CreateVehicle ;
5540: LD_ADDR_VAR 0 3
5544: PUSH
5545: CALL_OW 45
5549: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5550: LD_VAR 0 3
5554: PPUSH
5555: LD_INT 14
5557: PPUSH
5558: LD_INT 0
5560: PPUSH
5561: CALL_OW 49
// end ;
5565: GO 5474
5567: POP
5568: POP
// repeat wait ( 0 0$1 ) ;
5569: LD_INT 35
5571: PPUSH
5572: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5576: LD_ADDR_VAR 0 4
5580: PUSH
5581: LD_INT 22
5583: PUSH
5584: LD_INT 6
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 21
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 50
5603: PUSH
5604: EMPTY
5605: LIST
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: PPUSH
5612: CALL_OW 69
5616: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5617: LD_EXP 1
5621: PPUSH
5622: CALL_OW 310
5626: NOT
5627: IFFALSE 5660
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5629: LD_VAR 0 4
5633: PPUSH
5634: LD_EXP 1
5638: PPUSH
5639: CALL_OW 250
5643: PPUSH
5644: LD_EXP 1
5648: PPUSH
5649: CALL_OW 251
5653: PPUSH
5654: CALL_OW 114
5658: GO 5699
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5660: LD_VAR 0 4
5664: PPUSH
5665: LD_EXP 1
5669: PPUSH
5670: CALL_OW 310
5674: PPUSH
5675: CALL_OW 250
5679: PPUSH
5680: LD_EXP 1
5684: PPUSH
5685: CALL_OW 310
5689: PPUSH
5690: CALL_OW 251
5694: PPUSH
5695: CALL_OW 114
// until vehList = 0 ;
5699: LD_VAR 0 4
5703: PUSH
5704: LD_INT 0
5706: EQUAL
5707: IFFALSE 5569
// end ;
5709: LD_VAR 0 1
5713: RET
// export function PreapreMehBehs ; var i , un ; begin
5714: LD_INT 0
5716: PPUSH
5717: PPUSH
5718: PPUSH
// uc_side = 6 ;
5719: LD_ADDR_OWVAR 20
5723: PUSH
5724: LD_INT 6
5726: ST_TO_ADDR
// uc_nation = 3 ;
5727: LD_ADDR_OWVAR 21
5731: PUSH
5732: LD_INT 3
5734: ST_TO_ADDR
// for i := 1 to 3 do
5735: LD_ADDR_VAR 0 2
5739: PUSH
5740: DOUBLE
5741: LD_INT 1
5743: DEC
5744: ST_TO_ADDR
5745: LD_INT 3
5747: PUSH
5748: FOR_TO
5749: IFFALSE 5820
// begin hc_name =  ;
5751: LD_ADDR_OWVAR 26
5755: PUSH
5756: LD_STRING 
5758: ST_TO_ADDR
// hc_gallery =  ;
5759: LD_ADDR_OWVAR 33
5763: PUSH
5764: LD_STRING 
5766: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5767: LD_INT 0
5769: PPUSH
5770: LD_INT 10
5772: PPUSH
5773: CALL_OW 383
// un = CreateHuman ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: CALL_OW 44
5786: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5787: LD_ADDR_EXP 52
5791: PUSH
5792: LD_EXP 52
5796: PUSH
5797: LD_VAR 0 3
5801: ADD
5802: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5803: LD_VAR 0 3
5807: PPUSH
5808: LD_INT 17
5810: PPUSH
5811: LD_INT 0
5813: PPUSH
5814: CALL_OW 49
// end ;
5818: GO 5748
5820: POP
5821: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5822: LD_EXP 36
5826: PPUSH
5827: LD_INT 17
5829: PPUSH
5830: LD_INT 0
5832: PPUSH
5833: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5837: LD_EXP 36
5841: PPUSH
5842: LD_INT 6
5844: PPUSH
5845: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5849: LD_INT 145
5851: PPUSH
5852: LD_INT 6
5854: PPUSH
5855: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5859: LD_EXP 52
5863: PUSH
5864: LD_INT 1
5866: ARRAY
5867: PPUSH
5868: LD_INT 37
5870: PPUSH
5871: LD_INT 193
5873: PPUSH
5874: LD_INT 118
5876: PPUSH
5877: LD_INT 0
5879: PPUSH
5880: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5884: LD_EXP 52
5888: PUSH
5889: LD_INT 2
5891: ARRAY
5892: PPUSH
5893: LD_INT 37
5895: PPUSH
5896: LD_INT 204
5898: PPUSH
5899: LD_INT 119
5901: PPUSH
5902: LD_INT 0
5904: PPUSH
5905: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5909: LD_EXP 52
5913: PUSH
5914: LD_INT 3
5916: ARRAY
5917: PPUSH
5918: LD_INT 37
5920: PPUSH
5921: LD_INT 195
5923: PPUSH
5924: LD_INT 126
5926: PPUSH
5927: LD_INT 0
5929: PPUSH
5930: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5934: LD_EXP 52
5938: PUSH
5939: LD_INT 4
5941: ARRAY
5942: PPUSH
5943: LD_INT 37
5945: PPUSH
5946: LD_INT 207
5948: PPUSH
5949: LD_INT 126
5951: PPUSH
5952: LD_INT 0
5954: PPUSH
5955: CALL_OW 170
// end ; end_of_file
5959: LD_VAR 0 1
5963: RET
// export function PrepareAlliance ; var i ; begin
5964: LD_INT 0
5966: PPUSH
5967: PPUSH
// uc_side = 7 ;
5968: LD_ADDR_OWVAR 20
5972: PUSH
5973: LD_INT 7
5975: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
5976: LD_ADDR_EXP 28
5980: PUSH
5981: LD_STRING Roth
5983: PPUSH
5984: LD_INT 0
5986: PPUSH
5987: CALL 6365 0 2
5991: ST_TO_ADDR
// PlaceUnitXY ( Roth , 249 , 187 , false ) ;
5992: LD_EXP 28
5996: PPUSH
5997: LD_INT 249
5999: PPUSH
6000: LD_INT 187
6002: PPUSH
6003: LD_INT 0
6005: PPUSH
6006: CALL_OW 48
// ComTurnXY ( Roth , 248 , 187 ) ;
6010: LD_EXP 28
6014: PPUSH
6015: LD_INT 248
6017: PPUSH
6018: LD_INT 187
6020: PPUSH
6021: CALL_OW 118
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 3 ) ;
6025: LD_INT 7
6027: PPUSH
6028: LD_INT 1
6030: PPUSH
6031: LD_INT 45
6033: PPUSH
6034: LD_INT 10
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 3
6042: PPUSH
6043: CALL 7483 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6047: LD_INT 7
6049: PPUSH
6050: LD_INT 3
6052: PPUSH
6053: LD_INT 45
6055: PPUSH
6056: LD_INT 10
6058: PPUSH
6059: LD_INT 2
6061: PPUSH
6062: LD_INT 2
6064: PPUSH
6065: CALL 7483 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6069: LD_INT 7
6071: PPUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_INT 194
6077: PPUSH
6078: LD_INT 10
6080: PPUSH
6081: LD_INT 5
6083: PPUSH
6084: LD_INT 4
6086: PPUSH
6087: CALL 7483 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6091: LD_INT 7
6093: PPUSH
6094: LD_INT 3
6096: PPUSH
6097: LD_INT 194
6099: PPUSH
6100: LD_INT 10
6102: PPUSH
6103: LD_INT 8
6105: PPUSH
6106: LD_INT 6
6108: PPUSH
6109: CALL 7483 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6113: LD_INT 7
6115: PPUSH
6116: LD_INT 1
6118: PPUSH
6119: LD_INT 156
6121: PPUSH
6122: LD_INT 10
6124: PPUSH
6125: LD_INT 3
6127: PPUSH
6128: LD_INT 6
6130: PPUSH
6131: CALL 7483 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6135: LD_INT 7
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: LD_INT 162
6143: PPUSH
6144: LD_INT 10
6146: PPUSH
6147: LD_INT 3
6149: PPUSH
6150: LD_INT 6
6152: PPUSH
6153: CALL 7483 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 4 ) ;
6157: LD_INT 7
6159: PPUSH
6160: LD_INT 3
6162: PPUSH
6163: LD_INT 39
6165: PPUSH
6166: LD_INT 10
6168: PPUSH
6169: LD_INT 4
6171: PPUSH
6172: LD_INT 4
6174: PPUSH
6175: CALL 7483 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 4 ) ;
6179: LD_INT 7
6181: PPUSH
6182: LD_INT 3
6184: PPUSH
6185: LD_INT 133
6187: PPUSH
6188: LD_INT 10
6190: PPUSH
6191: LD_INT 4
6193: PPUSH
6194: LD_INT 4
6196: PPUSH
6197: CALL 7483 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6201: LD_INT 7
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: LD_INT 46
6209: PPUSH
6210: LD_INT 10
6212: PPUSH
6213: LD_INT 4
6215: PPUSH
6216: LD_INT 2
6218: PPUSH
6219: CALL 7483 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6223: LD_ADDR_VAR 0 2
6227: PUSH
6228: LD_INT 22
6230: PUSH
6231: LD_INT 7
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 21
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 30
6250: PUSH
6251: LD_INT 32
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 58
6260: PUSH
6261: EMPTY
6262: LIST
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: PUSH
6275: FOR_IN
6276: IFFALSE 6323
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6278: LD_INT 7
6280: PPUSH
6281: LD_INT 1
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 1
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 12
6301: ARRAY
6302: PPUSH
6303: LD_VAR 0 2
6307: PPUSH
6308: LD_INT 10
6310: PPUSH
6311: LD_INT 1
6313: PPUSH
6314: LD_INT 1
6316: PPUSH
6317: CALL 7483 0 6
6321: GO 6275
6323: POP
6324: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6325: LD_INT 7
6327: PPUSH
6328: LD_INT 1
6330: PPUSH
6331: LD_INT 226
6333: PPUSH
6334: LD_INT 10
6336: PPUSH
6337: LD_INT 3
6339: PPUSH
6340: LD_INT 3
6342: PPUSH
6343: CALL 7483 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6347: LD_ADDR_EXP 57
6351: PUSH
6352: LD_INT 226
6354: PPUSH
6355: CALL_OW 313
6359: ST_TO_ADDR
// end ; end_of_file
6360: LD_VAR 0 1
6364: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
// if exist_mode then
6369: LD_VAR 0 2
6373: IFFALSE 6392
// unit := CreateCharacter ( ident ) else
6375: LD_ADDR_VAR 0 4
6379: PUSH
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 34
6389: ST_TO_ADDR
6390: GO 6407
// unit := NewCharacter ( ident ) ;
6392: LD_ADDR_VAR 0 4
6396: PUSH
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 25
6406: ST_TO_ADDR
// result := unit ;
6407: LD_ADDR_VAR 0 3
6411: PUSH
6412: LD_VAR 0 4
6416: ST_TO_ADDR
// end ;
6417: LD_VAR 0 3
6421: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6422: LD_INT 0
6424: PPUSH
6425: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6426: LD_STRING 13s_
6428: PUSH
6429: LD_VAR 0 1
6433: STR
6434: PPUSH
6435: CALL_OW 28
6439: PUSH
6440: LD_INT 1
6442: EQUAL
6443: IFFALSE 6464
// unit = CreateCharacter ( 13s_ & ident ) ;
6445: LD_ADDR_VAR 0 3
6449: PUSH
6450: LD_STRING 13s_
6452: PUSH
6453: LD_VAR 0 1
6457: STR
6458: PPUSH
6459: CALL_OW 34
6463: ST_TO_ADDR
// result := unit ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: LD_VAR 0 3
6473: ST_TO_ADDR
// end ;
6474: LD_VAR 0 2
6478: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6479: LD_INT 0
6481: PPUSH
6482: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6483: LD_STRING 15_
6485: PUSH
6486: LD_VAR 0 1
6490: STR
6491: PPUSH
6492: CALL_OW 28
6496: PUSH
6497: LD_INT 1
6499: EQUAL
6500: IFFALSE 6537
// begin unit = CreateCharacter ( 15_ & ident ) ;
6502: LD_ADDR_VAR 0 3
6506: PUSH
6507: LD_STRING 15_
6509: PUSH
6510: LD_VAR 0 1
6514: STR
6515: PPUSH
6516: CALL_OW 34
6520: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6521: LD_ADDR_EXP 20
6525: PUSH
6526: LD_EXP 20
6530: PUSH
6531: LD_VAR 0 3
6535: ADD
6536: ST_TO_ADDR
// end ; result := unit ;
6537: LD_ADDR_VAR 0 2
6541: PUSH
6542: LD_VAR 0 3
6546: ST_TO_ADDR
// end ;
6547: LD_VAR 0 2
6551: RET
// export function TabLenght ( tab ) ; var i ; begin
6552: LD_INT 0
6554: PPUSH
6555: PPUSH
// for i = 1 to tab do
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_VAR 0 1
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6586
// result = i ;
6574: LD_ADDR_VAR 0 2
6578: PUSH
6579: LD_VAR 0 3
6583: ST_TO_ADDR
6584: GO 6571
6586: POP
6587: POP
// end ;
6588: LD_VAR 0 2
6592: RET
// export function Video ( mode ) ; begin
6593: LD_INT 0
6595: PPUSH
// if mode = true then
6596: LD_VAR 0 1
6600: PUSH
6601: LD_INT 1
6603: EQUAL
6604: IFFALSE 6624
// begin ingame_video = true ;
6606: LD_ADDR_OWVAR 52
6610: PUSH
6611: LD_INT 1
6613: ST_TO_ADDR
// interface_hidden = true ;
6614: LD_ADDR_OWVAR 54
6618: PUSH
6619: LD_INT 1
6621: ST_TO_ADDR
// end else
6622: GO 6640
// begin ingame_video = false ;
6624: LD_ADDR_OWVAR 52
6628: PUSH
6629: LD_INT 0
6631: ST_TO_ADDR
// interface_hidden = false ;
6632: LD_ADDR_OWVAR 54
6636: PUSH
6637: LD_INT 0
6639: ST_TO_ADDR
// end ; end ;
6640: LD_VAR 0 2
6644: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6645: LD_INT 0
6647: PPUSH
6648: PPUSH
6649: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6650: LD_ADDR_VAR 0 1
6654: PUSH
6655: LD_VAR 0 1
6659: PUSH
6660: LD_EXP 1
6664: PUSH
6665: LD_EXP 3
6669: PUSH
6670: LD_EXP 21
6674: PUSH
6675: LD_EXP 22
6679: PUSH
6680: LD_EXP 23
6684: PUSH
6685: LD_EXP 4
6689: PUSH
6690: LD_EXP 5
6694: PUSH
6695: LD_EXP 6
6699: PUSH
6700: LD_EXP 7
6704: PUSH
6705: LD_EXP 8
6709: PUSH
6710: LD_EXP 9
6714: PUSH
6715: LD_EXP 10
6719: PUSH
6720: LD_EXP 11
6724: PUSH
6725: LD_EXP 12
6729: PUSH
6730: LD_EXP 13
6734: PUSH
6735: LD_EXP 14
6739: PUSH
6740: LD_EXP 15
6744: PUSH
6745: LD_EXP 17
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: DIFF
6770: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6771: LD_ADDR_VAR 0 6
6775: PUSH
6776: LD_INT 1
6778: PPUSH
6779: LD_VAR 0 1
6783: PPUSH
6784: CALL_OW 12
6788: ST_TO_ADDR
// for i = 1 to characters do
6789: LD_ADDR_VAR 0 5
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_VAR 0 1
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6915
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6807: LD_VAR 0 5
6811: PUSH
6812: LD_VAR 0 6
6816: EQUAL
6817: PUSH
6818: LD_VAR 0 1
6822: PUSH
6823: LD_VAR 0 5
6827: ARRAY
6828: PPUSH
6829: CALL_OW 258
6833: PUSH
6834: LD_INT 1
6836: EQUAL
6837: AND
6838: IFFALSE 6860
// Say ( characters [ i ] , dialogMID ) ;
6840: LD_VAR 0 1
6844: PUSH
6845: LD_VAR 0 5
6849: ARRAY
6850: PPUSH
6851: LD_VAR 0 2
6855: PPUSH
6856: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6860: LD_VAR 0 5
6864: PUSH
6865: LD_VAR 0 6
6869: EQUAL
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: LD_VAR 0 5
6880: ARRAY
6881: PPUSH
6882: CALL_OW 258
6886: PUSH
6887: LD_INT 2
6889: EQUAL
6890: AND
6891: IFFALSE 6913
// Say ( characters [ i ] , dialogFID ) ;
6893: LD_VAR 0 1
6897: PUSH
6898: LD_VAR 0 5
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 3
6908: PPUSH
6909: CALL_OW 88
// end ;
6913: GO 6804
6915: POP
6916: POP
// end ;
6917: LD_VAR 0 4
6921: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
6922: LD_INT 0
6924: PPUSH
6925: PPUSH
6926: PPUSH
6927: PPUSH
// if not list then
6928: LD_VAR 0 1
6932: NOT
6933: IFFALSE 6937
// exit ;
6935: GO 7284
// result := [ ] ;
6937: LD_ADDR_VAR 0 3
6941: PUSH
6942: EMPTY
6943: ST_TO_ADDR
// for i in list do
6944: LD_ADDR_VAR 0 4
6948: PUSH
6949: LD_VAR 0 1
6953: PUSH
6954: FOR_IN
6955: IFFALSE 7196
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
6957: LD_ADDR_VAR 0 6
6961: PUSH
6962: LD_VAR 0 4
6966: PPUSH
6967: LD_INT 1
6969: PPUSH
6970: CALL_OW 259
6974: PUSH
6975: LD_VAR 0 4
6979: PPUSH
6980: LD_INT 2
6982: PPUSH
6983: CALL_OW 259
6987: PLUS
6988: PUSH
6989: LD_VAR 0 4
6993: PPUSH
6994: LD_INT 3
6996: PPUSH
6997: CALL_OW 259
7001: PLUS
7002: PUSH
7003: LD_VAR 0 4
7007: PPUSH
7008: LD_INT 4
7010: PPUSH
7011: CALL_OW 259
7015: PLUS
7016: PUSH
7017: LD_INT 4
7019: DIV
7020: ST_TO_ADDR
// if not result then
7021: LD_VAR 0 3
7025: NOT
7026: IFFALSE 7052
// result := [ [ i , tmp ] ] else
7028: LD_ADDR_VAR 0 3
7032: PUSH
7033: LD_VAR 0 4
7037: PUSH
7038: LD_VAR 0 6
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: ST_TO_ADDR
7050: GO 7194
// begin if result [ result ] [ 2 ] <= tmp then
7052: LD_VAR 0 3
7056: PUSH
7057: LD_VAR 0 3
7061: ARRAY
7062: PUSH
7063: LD_INT 2
7065: ARRAY
7066: PUSH
7067: LD_VAR 0 6
7071: LESSEQUAL
7072: IFFALSE 7114
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7074: LD_ADDR_VAR 0 3
7078: PUSH
7079: LD_VAR 0 3
7083: PPUSH
7084: LD_VAR 0 3
7088: PUSH
7089: LD_INT 1
7091: PLUS
7092: PPUSH
7093: LD_VAR 0 4
7097: PUSH
7098: LD_VAR 0 6
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PPUSH
7107: CALL_OW 2
7111: ST_TO_ADDR
7112: GO 7194
// for j = 1 to result do
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: DOUBLE
7120: LD_INT 1
7122: DEC
7123: ST_TO_ADDR
7124: LD_VAR 0 3
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7192
// begin if tmp < result [ j ] [ 2 ] then
7132: LD_VAR 0 6
7136: PUSH
7137: LD_VAR 0 3
7141: PUSH
7142: LD_VAR 0 5
7146: ARRAY
7147: PUSH
7148: LD_INT 2
7150: ARRAY
7151: LESS
7152: IFFALSE 7190
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7154: LD_ADDR_VAR 0 3
7158: PUSH
7159: LD_VAR 0 3
7163: PPUSH
7164: LD_VAR 0 5
7168: PPUSH
7169: LD_VAR 0 4
7173: PUSH
7174: LD_VAR 0 6
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 2
7187: ST_TO_ADDR
// break ;
7188: GO 7192
// end ; end ;
7190: GO 7129
7192: POP
7193: POP
// end ; end ;
7194: GO 6954
7196: POP
7197: POP
// if result and not asc then
7198: LD_VAR 0 3
7202: PUSH
7203: LD_VAR 0 2
7207: NOT
7208: AND
7209: IFFALSE 7284
// begin tmp := result ;
7211: LD_ADDR_VAR 0 6
7215: PUSH
7216: LD_VAR 0 3
7220: ST_TO_ADDR
// for i = tmp downto 1 do
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: DOUBLE
7227: LD_VAR 0 6
7231: INC
7232: ST_TO_ADDR
7233: LD_INT 1
7235: PUSH
7236: FOR_DOWNTO
7237: IFFALSE 7282
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_VAR 0 3
7248: PPUSH
7249: LD_VAR 0 6
7253: PUSH
7254: LD_VAR 0 4
7258: MINUS
7259: PUSH
7260: LD_INT 1
7262: PLUS
7263: PPUSH
7264: LD_VAR 0 6
7268: PUSH
7269: LD_VAR 0 4
7273: ARRAY
7274: PPUSH
7275: CALL_OW 1
7279: ST_TO_ADDR
7280: GO 7236
7282: POP
7283: POP
// end ; end ;
7284: LD_VAR 0 3
7288: RET
// export function PrepareDifficulty ; begin
7289: LD_INT 0
7291: PPUSH
// if difficulty = 1 then
7292: LD_OWVAR 67
7296: PUSH
7297: LD_INT 1
7299: EQUAL
7300: IFFALSE 7328
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7302: LD_INT 51
7304: PPUSH
7305: LD_INT 6
7307: PPUSH
7308: LD_INT 2
7310: PPUSH
7311: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7315: LD_INT 57
7317: PPUSH
7318: LD_INT 6
7320: PPUSH
7321: LD_INT 2
7323: PPUSH
7324: CALL_OW 322
// end ; if difficulty = 2 then
7328: LD_OWVAR 67
7332: PUSH
7333: LD_INT 2
7335: EQUAL
7336: IFFALSE 7390
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7338: LD_INT 51
7340: PPUSH
7341: LD_INT 6
7343: PPUSH
7344: LD_INT 2
7346: PPUSH
7347: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7351: LD_INT 57
7353: PPUSH
7354: LD_INT 6
7356: PPUSH
7357: LD_INT 2
7359: PPUSH
7360: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7364: LD_INT 52
7366: PPUSH
7367: LD_INT 6
7369: PPUSH
7370: LD_INT 2
7372: PPUSH
7373: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7377: LD_INT 58
7379: PPUSH
7380: LD_INT 6
7382: PPUSH
7383: LD_INT 2
7385: PPUSH
7386: CALL_OW 322
// end ; if difficulty = 3 then
7390: LD_OWVAR 67
7394: PUSH
7395: LD_INT 3
7397: EQUAL
7398: IFFALSE 7478
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7400: LD_INT 51
7402: PPUSH
7403: LD_INT 6
7405: PPUSH
7406: LD_INT 2
7408: PPUSH
7409: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7413: LD_INT 57
7415: PPUSH
7416: LD_INT 6
7418: PPUSH
7419: LD_INT 2
7421: PPUSH
7422: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7426: LD_INT 52
7428: PPUSH
7429: LD_INT 6
7431: PPUSH
7432: LD_INT 2
7434: PPUSH
7435: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7439: LD_INT 58
7441: PPUSH
7442: LD_INT 6
7444: PPUSH
7445: LD_INT 2
7447: PPUSH
7448: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7452: LD_INT 53
7454: PPUSH
7455: LD_INT 6
7457: PPUSH
7458: LD_INT 2
7460: PPUSH
7461: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7465: LD_INT 59
7467: PPUSH
7468: LD_INT 6
7470: PPUSH
7471: LD_INT 2
7473: PPUSH
7474: CALL_OW 322
// end ; end ;
7478: LD_VAR 0 1
7482: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7483: LD_INT 0
7485: PPUSH
7486: PPUSH
7487: PPUSH
7488: PPUSH
7489: PPUSH
// for i = 1 to count do
7490: LD_ADDR_VAR 0 8
7494: PUSH
7495: DOUBLE
7496: LD_INT 1
7498: DEC
7499: ST_TO_ADDR
7500: LD_VAR 0 6
7504: PUSH
7505: FOR_TO
7506: IFFALSE 7587
// begin uc_side = side ;
7508: LD_ADDR_OWVAR 20
7512: PUSH
7513: LD_VAR 0 1
7517: ST_TO_ADDR
// uc_nation = nation ;
7518: LD_ADDR_OWVAR 21
7522: PUSH
7523: LD_VAR 0 2
7527: ST_TO_ADDR
// hc_gallery =  ;
7528: LD_ADDR_OWVAR 33
7532: PUSH
7533: LD_STRING 
7535: ST_TO_ADDR
// hc_name =  ;
7536: LD_ADDR_OWVAR 26
7540: PUSH
7541: LD_STRING 
7543: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7544: LD_INT 0
7546: PPUSH
7547: LD_VAR 0 5
7551: PPUSH
7552: LD_VAR 0 4
7556: PPUSH
7557: CALL_OW 380
// un = CreateHuman ;
7561: LD_ADDR_VAR 0 10
7565: PUSH
7566: CALL_OW 44
7570: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7571: LD_VAR 0 10
7575: PPUSH
7576: LD_VAR 0 3
7580: PPUSH
7581: CALL_OW 52
// end ;
7585: GO 7505
7587: POP
7588: POP
// end ;
7589: LD_VAR 0 7
7593: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
7606: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7607: LD_INT 2100
7609: PUSH
7610: LD_INT 3150
7612: PUSH
7613: LD_INT 4200
7615: PUSH
7616: LD_INT 5250
7618: PUSH
7619: LD_INT 6300
7621: PUSH
7622: LD_INT 7350
7624: PUSH
7625: LD_INT 8400
7627: PUSH
7628: LD_INT 9450
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 1
7643: PPUSH
7644: LD_INT 8
7646: PPUSH
7647: CALL_OW 12
7651: ARRAY
7652: PPUSH
7653: CALL_OW 67
// amChassisTab = [ ] ;
7657: LD_ADDR_VAR 0 19
7661: PUSH
7662: EMPTY
7663: ST_TO_ADDR
// arChassisTab = [ ] ;
7664: LD_ADDR_VAR 0 18
7668: PUSH
7669: EMPTY
7670: ST_TO_ADDR
// ruChassisTab = [ ] ;
7671: LD_ADDR_VAR 0 17
7675: PUSH
7676: EMPTY
7677: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7678: LD_INT 35
7680: PPUSH
7681: CALL_OW 67
// if nation = 1 then
7685: LD_VAR 0 5
7689: PUSH
7690: LD_INT 1
7692: EQUAL
7693: IFFALSE 8184
// begin uc_side = side ;
7695: LD_ADDR_OWVAR 20
7699: PUSH
7700: LD_VAR 0 2
7704: ST_TO_ADDR
// uc_nation = nation ;
7705: LD_ADDR_OWVAR 21
7709: PUSH
7710: LD_VAR 0 5
7714: ST_TO_ADDR
// vc_engine = vehengine ;
7715: LD_ADDR_OWVAR 39
7719: PUSH
7720: LD_VAR 0 6
7724: ST_TO_ADDR
// vc_control = vehcontrol ;
7725: LD_ADDR_OWVAR 38
7729: PUSH
7730: LD_VAR 0 7
7734: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7735: LD_ADDR_OWVAR 40
7739: PUSH
7740: LD_VAR 0 10
7744: PUSH
7745: LD_INT 1
7747: PPUSH
7748: LD_VAR 0 10
7752: PPUSH
7753: CALL_OW 12
7757: ARRAY
7758: ST_TO_ADDR
// for j = 1 to AMWeapon do
7759: LD_ADDR_VAR 0 14
7763: PUSH
7764: DOUBLE
7765: LD_INT 1
7767: DEC
7768: ST_TO_ADDR
7769: LD_VAR 0 10
7773: PUSH
7774: FOR_TO
7775: IFFALSE 8076
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
7777: LD_VAR 0 10
7781: PUSH
7782: LD_VAR 0 14
7786: ARRAY
7787: PUSH
7788: LD_INT 2
7790: EQUAL
7791: PUSH
7792: LD_VAR 0 10
7796: PUSH
7797: LD_VAR 0 14
7801: ARRAY
7802: PUSH
7803: LD_INT 3
7805: EQUAL
7806: OR
7807: IFFALSE 7860
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7809: LD_ADDR_VAR 0 19
7813: PUSH
7814: LD_INT 1
7816: PUSH
7817: LD_INT 2
7819: PUSH
7820: LD_INT 3
7822: PUSH
7823: LD_INT 4
7825: PUSH
7826: LD_INT 5
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7836: LD_ADDR_OWVAR 37
7840: PUSH
7841: LD_VAR 0 19
7845: PUSH
7846: LD_INT 1
7848: PPUSH
7849: LD_VAR 0 19
7853: PPUSH
7854: CALL_OW 12
7858: ARRAY
7859: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
7860: LD_VAR 0 10
7864: PUSH
7865: LD_VAR 0 14
7869: ARRAY
7870: PUSH
7871: LD_INT 4
7873: EQUAL
7874: PUSH
7875: LD_VAR 0 10
7879: PUSH
7880: LD_VAR 0 14
7884: ARRAY
7885: PUSH
7886: LD_INT 5
7888: EQUAL
7889: OR
7890: PUSH
7891: LD_VAR 0 10
7895: PUSH
7896: LD_VAR 0 14
7900: ARRAY
7901: PUSH
7902: LD_INT 9
7904: EQUAL
7905: OR
7906: PUSH
7907: LD_VAR 0 10
7911: PUSH
7912: LD_VAR 0 14
7916: ARRAY
7917: PUSH
7918: LD_INT 11
7920: EQUAL
7921: OR
7922: PUSH
7923: LD_VAR 0 10
7927: PUSH
7928: LD_VAR 0 14
7932: ARRAY
7933: PUSH
7934: LD_INT 7
7936: EQUAL
7937: OR
7938: IFFALSE 7987
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7940: LD_ADDR_VAR 0 19
7944: PUSH
7945: LD_INT 2
7947: PUSH
7948: LD_INT 3
7950: PUSH
7951: LD_INT 4
7953: PUSH
7954: LD_INT 5
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7963: LD_ADDR_OWVAR 37
7967: PUSH
7968: LD_VAR 0 19
7972: PUSH
7973: LD_INT 1
7975: PPUSH
7976: LD_VAR 0 19
7980: PPUSH
7981: CALL_OW 12
7985: ARRAY
7986: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
7987: LD_VAR 0 10
7991: PUSH
7992: LD_VAR 0 14
7996: ARRAY
7997: PUSH
7998: LD_INT 8
8000: EQUAL
8001: PUSH
8002: LD_VAR 0 10
8006: PUSH
8007: LD_VAR 0 14
8011: ARRAY
8012: PUSH
8013: LD_INT 6
8015: EQUAL
8016: OR
8017: PUSH
8018: LD_VAR 0 10
8022: PUSH
8023: LD_VAR 0 14
8027: ARRAY
8028: PUSH
8029: LD_INT 10
8031: EQUAL
8032: OR
8033: IFFALSE 8074
// begin amChassisTab = [ 4 , 5 ] ;
8035: LD_ADDR_VAR 0 19
8039: PUSH
8040: LD_INT 4
8042: PUSH
8043: LD_INT 5
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8050: LD_ADDR_OWVAR 37
8054: PUSH
8055: LD_VAR 0 19
8059: PUSH
8060: LD_INT 1
8062: PPUSH
8063: LD_VAR 0 19
8067: PPUSH
8068: CALL_OW 12
8072: ARRAY
8073: ST_TO_ADDR
// end ; end ;
8074: GO 7774
8076: POP
8077: POP
// veh = CreateVehicle ;
8078: LD_ADDR_VAR 0 16
8082: PUSH
8083: CALL_OW 45
8087: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8088: LD_VAR 0 16
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: LD_INT 0
8100: PPUSH
8101: CALL_OW 49
// if vc_control = 1 then
8105: LD_OWVAR 38
8109: PUSH
8110: LD_INT 1
8112: EQUAL
8113: IFFALSE 8170
// begin hc_gallery =  ;
8115: LD_ADDR_OWVAR 33
8119: PUSH
8120: LD_STRING 
8122: ST_TO_ADDR
// hc_name =  ;
8123: LD_ADDR_OWVAR 26
8127: PUSH
8128: LD_STRING 
8130: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8131: LD_INT 0
8133: PPUSH
8134: LD_INT 3
8136: PPUSH
8137: LD_VAR 0 4
8141: PPUSH
8142: CALL_OW 380
// un = CreateHuman ;
8146: LD_ADDR_VAR 0 15
8150: PUSH
8151: CALL_OW 44
8155: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8156: LD_VAR 0 15
8160: PPUSH
8161: LD_VAR 0 16
8165: PPUSH
8166: CALL_OW 52
// end ; i = i + 1 ;
8170: LD_ADDR_VAR 0 13
8174: PUSH
8175: LD_VAR 0 13
8179: PUSH
8180: LD_INT 1
8182: PLUS
8183: ST_TO_ADDR
// end ; if nation = 2 then
8184: LD_VAR 0 5
8188: PUSH
8189: LD_INT 2
8191: EQUAL
8192: IFFALSE 8616
// begin uc_side = side ;
8194: LD_ADDR_OWVAR 20
8198: PUSH
8199: LD_VAR 0 2
8203: ST_TO_ADDR
// uc_nation = nation ;
8204: LD_ADDR_OWVAR 21
8208: PUSH
8209: LD_VAR 0 5
8213: ST_TO_ADDR
// vc_engine = vehengine ;
8214: LD_ADDR_OWVAR 39
8218: PUSH
8219: LD_VAR 0 6
8223: ST_TO_ADDR
// vc_control = vehcontrol ;
8224: LD_ADDR_OWVAR 38
8228: PUSH
8229: LD_VAR 0 7
8233: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8234: LD_ADDR_OWVAR 40
8238: PUSH
8239: LD_VAR 0 9
8243: PUSH
8244: LD_INT 1
8246: PPUSH
8247: LD_VAR 0 9
8251: PPUSH
8252: CALL_OW 12
8256: ARRAY
8257: ST_TO_ADDR
// for j = 1 to ARWeapons do
8258: LD_ADDR_VAR 0 14
8262: PUSH
8263: DOUBLE
8264: LD_INT 1
8266: DEC
8267: ST_TO_ADDR
8268: LD_VAR 0 9
8272: PUSH
8273: FOR_TO
8274: IFFALSE 8508
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8276: LD_VAR 0 9
8280: PUSH
8281: LD_VAR 0 14
8285: ARRAY
8286: PUSH
8287: LD_INT 24
8289: EQUAL
8290: PUSH
8291: LD_VAR 0 9
8295: PUSH
8296: LD_VAR 0 14
8300: ARRAY
8301: PUSH
8302: LD_INT 22
8304: EQUAL
8305: OR
8306: PUSH
8307: LD_VAR 0 9
8311: PUSH
8312: LD_VAR 0 14
8316: ARRAY
8317: PUSH
8318: LD_INT 23
8320: EQUAL
8321: OR
8322: PUSH
8323: LD_VAR 0 9
8327: PUSH
8328: LD_VAR 0 14
8332: ARRAY
8333: PUSH
8334: LD_INT 30
8336: EQUAL
8337: OR
8338: IFFALSE 8387
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8340: LD_ADDR_VAR 0 18
8344: PUSH
8345: LD_INT 11
8347: PUSH
8348: LD_INT 12
8350: PUSH
8351: LD_INT 13
8353: PUSH
8354: LD_INT 14
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8363: LD_ADDR_OWVAR 37
8367: PUSH
8368: LD_VAR 0 18
8372: PUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_VAR 0 18
8380: PPUSH
8381: CALL_OW 12
8385: ARRAY
8386: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8387: LD_VAR 0 9
8391: PUSH
8392: LD_VAR 0 14
8396: ARRAY
8397: PUSH
8398: LD_INT 29
8400: EQUAL
8401: PUSH
8402: LD_VAR 0 9
8406: PUSH
8407: LD_VAR 0 14
8411: ARRAY
8412: PUSH
8413: LD_INT 28
8415: EQUAL
8416: OR
8417: PUSH
8418: LD_VAR 0 9
8422: PUSH
8423: LD_VAR 0 14
8427: ARRAY
8428: PUSH
8429: LD_INT 27
8431: EQUAL
8432: OR
8433: PUSH
8434: LD_VAR 0 9
8438: PUSH
8439: LD_VAR 0 14
8443: ARRAY
8444: PUSH
8445: LD_INT 26
8447: EQUAL
8448: OR
8449: PUSH
8450: LD_VAR 0 9
8454: PUSH
8455: LD_VAR 0 14
8459: ARRAY
8460: PUSH
8461: LD_INT 25
8463: EQUAL
8464: OR
8465: IFFALSE 8506
// begin arChassisTab = [ 13 , 14 ] ;
8467: LD_ADDR_VAR 0 18
8471: PUSH
8472: LD_INT 13
8474: PUSH
8475: LD_INT 14
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8482: LD_ADDR_OWVAR 37
8486: PUSH
8487: LD_VAR 0 18
8491: PUSH
8492: LD_INT 1
8494: PPUSH
8495: LD_VAR 0 18
8499: PPUSH
8500: CALL_OW 12
8504: ARRAY
8505: ST_TO_ADDR
// end ; end ;
8506: GO 8273
8508: POP
8509: POP
// veh = CreateVehicle ;
8510: LD_ADDR_VAR 0 16
8514: PUSH
8515: CALL_OW 45
8519: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8520: LD_VAR 0 16
8524: PPUSH
8525: LD_VAR 0 1
8529: PPUSH
8530: LD_INT 0
8532: PPUSH
8533: CALL_OW 49
// if vc_control = 1 then
8537: LD_OWVAR 38
8541: PUSH
8542: LD_INT 1
8544: EQUAL
8545: IFFALSE 8602
// begin hc_gallery =  ;
8547: LD_ADDR_OWVAR 33
8551: PUSH
8552: LD_STRING 
8554: ST_TO_ADDR
// hc_name =  ;
8555: LD_ADDR_OWVAR 26
8559: PUSH
8560: LD_STRING 
8562: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8563: LD_INT 0
8565: PPUSH
8566: LD_INT 3
8568: PPUSH
8569: LD_VAR 0 4
8573: PPUSH
8574: CALL_OW 380
// un = CreateHuman ;
8578: LD_ADDR_VAR 0 15
8582: PUSH
8583: CALL_OW 44
8587: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8588: LD_VAR 0 15
8592: PPUSH
8593: LD_VAR 0 16
8597: PPUSH
8598: CALL_OW 52
// end ; i = i + 1 ;
8602: LD_ADDR_VAR 0 13
8606: PUSH
8607: LD_VAR 0 13
8611: PUSH
8612: LD_INT 1
8614: PLUS
8615: ST_TO_ADDR
// end ; if nation = 3 then
8616: LD_VAR 0 5
8620: PUSH
8621: LD_INT 3
8623: EQUAL
8624: IFFALSE 9000
// begin uc_side = side ;
8626: LD_ADDR_OWVAR 20
8630: PUSH
8631: LD_VAR 0 2
8635: ST_TO_ADDR
// uc_nation = nation ;
8636: LD_ADDR_OWVAR 21
8640: PUSH
8641: LD_VAR 0 5
8645: ST_TO_ADDR
// vc_engine = vehengine ;
8646: LD_ADDR_OWVAR 39
8650: PUSH
8651: LD_VAR 0 6
8655: ST_TO_ADDR
// vc_control = vehcontrol ;
8656: LD_ADDR_OWVAR 38
8660: PUSH
8661: LD_VAR 0 7
8665: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8666: LD_ADDR_OWVAR 40
8670: PUSH
8671: LD_VAR 0 8
8675: PUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_VAR 0 8
8683: PPUSH
8684: CALL_OW 12
8688: ARRAY
8689: ST_TO_ADDR
// for j = 1 to RuWeapons do
8690: LD_ADDR_VAR 0 14
8694: PUSH
8695: DOUBLE
8696: LD_INT 1
8698: DEC
8699: ST_TO_ADDR
8700: LD_VAR 0 8
8704: PUSH
8705: FOR_TO
8706: IFFALSE 8892
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8708: LD_VAR 0 8
8712: PUSH
8713: LD_VAR 0 14
8717: ARRAY
8718: PUSH
8719: LD_INT 42
8721: EQUAL
8722: PUSH
8723: LD_VAR 0 8
8727: PUSH
8728: LD_VAR 0 14
8732: ARRAY
8733: PUSH
8734: LD_INT 43
8736: EQUAL
8737: OR
8738: PUSH
8739: LD_VAR 0 8
8743: PUSH
8744: LD_VAR 0 14
8748: ARRAY
8749: PUSH
8750: LD_INT 44
8752: EQUAL
8753: OR
8754: PUSH
8755: LD_VAR 0 8
8759: PUSH
8760: LD_VAR 0 14
8764: ARRAY
8765: PUSH
8766: LD_INT 45
8768: EQUAL
8769: OR
8770: PUSH
8771: LD_VAR 0 8
8775: PUSH
8776: LD_VAR 0 14
8780: ARRAY
8781: PUSH
8782: LD_INT 49
8784: EQUAL
8785: OR
8786: IFFALSE 8823
// begin ruChassisTab = [ 24 ] ;
8788: LD_ADDR_VAR 0 17
8792: PUSH
8793: LD_INT 24
8795: PUSH
8796: EMPTY
8797: LIST
8798: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8799: LD_ADDR_OWVAR 37
8803: PUSH
8804: LD_VAR 0 17
8808: PUSH
8809: LD_INT 1
8811: PPUSH
8812: LD_VAR 0 17
8816: PPUSH
8817: CALL_OW 12
8821: ARRAY
8822: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
8823: LD_VAR 0 8
8827: PUSH
8828: LD_VAR 0 14
8832: ARRAY
8833: PUSH
8834: LD_INT 46
8836: EQUAL
8837: PUSH
8838: LD_VAR 0 8
8842: PUSH
8843: LD_VAR 0 14
8847: ARRAY
8848: PUSH
8849: LD_INT 47
8851: EQUAL
8852: OR
8853: IFFALSE 8890
// begin ruChassisTab = [ 24 ] ;
8855: LD_ADDR_VAR 0 17
8859: PUSH
8860: LD_INT 24
8862: PUSH
8863: EMPTY
8864: LIST
8865: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8866: LD_ADDR_OWVAR 37
8870: PUSH
8871: LD_VAR 0 17
8875: PUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 17
8883: PPUSH
8884: CALL_OW 12
8888: ARRAY
8889: ST_TO_ADDR
// end ; end ;
8890: GO 8705
8892: POP
8893: POP
// veh = CreateVehicle ;
8894: LD_ADDR_VAR 0 16
8898: PUSH
8899: CALL_OW 45
8903: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8904: LD_VAR 0 16
8908: PPUSH
8909: LD_VAR 0 1
8913: PPUSH
8914: LD_INT 0
8916: PPUSH
8917: CALL_OW 49
// if vc_control = 1 then
8921: LD_OWVAR 38
8925: PUSH
8926: LD_INT 1
8928: EQUAL
8929: IFFALSE 8986
// begin hc_gallery =  ;
8931: LD_ADDR_OWVAR 33
8935: PUSH
8936: LD_STRING 
8938: ST_TO_ADDR
// hc_name =  ;
8939: LD_ADDR_OWVAR 26
8943: PUSH
8944: LD_STRING 
8946: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8947: LD_INT 0
8949: PPUSH
8950: LD_INT 3
8952: PPUSH
8953: LD_VAR 0 4
8957: PPUSH
8958: CALL_OW 380
// un = CreateHuman ;
8962: LD_ADDR_VAR 0 15
8966: PUSH
8967: CALL_OW 44
8971: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8972: LD_VAR 0 15
8976: PPUSH
8977: LD_VAR 0 16
8981: PPUSH
8982: CALL_OW 52
// end ; i = i + 1 ;
8986: LD_ADDR_VAR 0 13
8990: PUSH
8991: LD_VAR 0 13
8995: PUSH
8996: LD_INT 1
8998: PLUS
8999: ST_TO_ADDR
// end ; until i = vehCount ;
9000: LD_VAR 0 13
9004: PUSH
9005: LD_VAR 0 3
9009: EQUAL
9010: IFFALSE 7678
// repeat wait ( 0 0$1 ) ;
9012: LD_INT 35
9014: PPUSH
9015: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9019: LD_ADDR_VAR 0 20
9023: PUSH
9024: LD_INT 22
9026: PUSH
9027: LD_VAR 0 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 21
9038: PUSH
9039: LD_INT 2
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 24
9048: PUSH
9049: LD_INT 250
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: PPUSH
9061: CALL_OW 69
9065: ST_TO_ADDR
// if vehicleOK_list > 0 then
9066: LD_VAR 0 20
9070: PUSH
9071: LD_INT 0
9073: GREATER
9074: IFFALSE 9265
// begin for i in vehicleOK_list do
9076: LD_ADDR_VAR 0 13
9080: PUSH
9081: LD_VAR 0 20
9085: PUSH
9086: FOR_IN
9087: IFFALSE 9263
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9089: LD_ADDR_VAR 0 21
9093: PUSH
9094: LD_INT 22
9096: PUSH
9097: LD_VAR 0 11
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PPUSH
9106: CALL_OW 69
9110: PPUSH
9111: LD_VAR 0 13
9115: PPUSH
9116: CALL_OW 74
9120: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9121: LD_ADDR_VAR 0 22
9125: PUSH
9126: LD_INT 22
9128: PUSH
9129: LD_VAR 0 11
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 2
9140: PUSH
9141: LD_INT 59
9143: PUSH
9144: EMPTY
9145: LIST
9146: PUSH
9147: LD_INT 21
9149: PUSH
9150: LD_INT 1
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: LD_INT 21
9159: PUSH
9160: LD_INT 2
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: PPUSH
9185: LD_VAR 0 13
9189: PPUSH
9190: CALL_OW 74
9194: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9195: LD_VAR 0 13
9199: PPUSH
9200: LD_VAR 0 21
9204: PPUSH
9205: CALL_OW 296
9209: PUSH
9210: LD_INT 8
9212: PLUS
9213: PUSH
9214: LD_VAR 0 13
9218: PPUSH
9219: LD_VAR 0 22
9223: PPUSH
9224: CALL_OW 296
9228: LESS
9229: IFFALSE 9247
// begin ComAttackUnit ( i , target1 ) ;
9231: LD_VAR 0 13
9235: PPUSH
9236: LD_VAR 0 21
9240: PPUSH
9241: CALL_OW 115
// end else
9245: GO 9261
// begin ComAttackUnit ( i , target2 ) ;
9247: LD_VAR 0 13
9251: PPUSH
9252: LD_VAR 0 22
9256: PPUSH
9257: CALL_OW 115
// end ; end ;
9261: GO 9086
9263: POP
9264: POP
// end ; until vehicleOK_list = [ ] ;
9265: LD_VAR 0 20
9269: PUSH
9270: EMPTY
9271: EQUAL
9272: IFFALSE 9012
// end ;
9274: LD_VAR 0 12
9278: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9279: LD_INT 0
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
// for i = 1 to 72 do
9285: LD_ADDR_VAR 0 5
9289: PUSH
9290: DOUBLE
9291: LD_INT 1
9293: DEC
9294: ST_TO_ADDR
9295: LD_INT 72
9297: PUSH
9298: FOR_TO
9299: IFFALSE 9357
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9301: LD_VAR 0 5
9305: PPUSH
9306: LD_VAR 0 1
9310: PPUSH
9311: CALL_OW 321
9315: PUSH
9316: LD_INT 1
9318: EQUAL
9319: PUSH
9320: LD_VAR 0 5
9324: PPUSH
9325: LD_VAR 0 3
9329: PPUSH
9330: CALL_OW 482
9334: PUSH
9335: LD_INT 1
9337: EQUAL
9338: AND
9339: IFFALSE 9355
// AddComResearch ( lab , i ) ;
9341: LD_VAR 0 2
9345: PPUSH
9346: LD_VAR 0 5
9350: PPUSH
9351: CALL_OW 184
9355: GO 9298
9357: POP
9358: POP
// end ;
9359: LD_VAR 0 4
9363: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9364: LD_INT 0
9366: PPUSH
9367: PPUSH
9368: PPUSH
9369: PPUSH
9370: PPUSH
9371: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_VAR 0 2
9381: PPUSH
9382: CALL_OW 313
9386: PUSH
9387: LD_EXP 35
9391: PUSH
9392: EMPTY
9393: LIST
9394: DIFF
9395: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9396: LD_ADDR_VAR 0 9
9400: PUSH
9401: LD_VAR 0 3
9405: PPUSH
9406: LD_INT 22
9408: PUSH
9409: LD_VAR 0 1
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: LD_INT 25
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 24
9430: PUSH
9431: LD_INT 750
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 3
9440: PUSH
9441: LD_INT 54
9443: PUSH
9444: EMPTY
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_EXP 35
9466: PUSH
9467: EMPTY
9468: LIST
9469: DIFF
9470: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9471: LD_ADDR_VAR 0 6
9475: PUSH
9476: LD_VAR 0 3
9480: PPUSH
9481: LD_INT 22
9483: PUSH
9484: LD_VAR 0 1
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 21
9495: PUSH
9496: LD_INT 3
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 24
9508: PUSH
9509: LD_INT 1000
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: PPUSH
9528: CALL_OW 70
9532: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9533: LD_VAR 0 6
9537: NOT
9538: PUSH
9539: LD_INT 22
9541: PUSH
9542: LD_VAR 0 1
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 25
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: LD_INT 24
9563: PUSH
9564: LD_INT 250
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: PPUSH
9576: CALL_OW 69
9580: NOT
9581: AND
9582: IFFALSE 9586
// exit ;
9584: GO 9768
// if buildings_list > 0 and engineerOkInside then
9586: LD_VAR 0 6
9590: PUSH
9591: LD_INT 0
9593: GREATER
9594: PUSH
9595: LD_VAR 0 8
9599: AND
9600: IFFALSE 9611
// ComExitBuilding ( engineerOkInside ) ;
9602: LD_VAR 0 8
9606: PPUSH
9607: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9611: LD_VAR 0 6
9615: PUSH
9616: LD_INT 0
9618: GREATER
9619: PUSH
9620: LD_VAR 0 9
9624: PUSH
9625: LD_INT 0
9627: GREATER
9628: AND
9629: IFFALSE 9649
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9631: LD_VAR 0 9
9635: PPUSH
9636: LD_VAR 0 6
9640: PUSH
9641: LD_INT 1
9643: ARRAY
9644: PPUSH
9645: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9649: LD_VAR 0 6
9653: PUSH
9654: LD_INT 0
9656: EQUAL
9657: PUSH
9658: LD_VAR 0 4
9662: PUSH
9663: LD_INT 0
9665: EQUAL
9666: AND
9667: PUSH
9668: LD_VAR 0 9
9672: PUSH
9673: LD_INT 0
9675: GREATER
9676: AND
9677: IFFALSE 9693
// ComEnterUnit ( engineerOkOutside , building ) ;
9679: LD_VAR 0 9
9683: PPUSH
9684: LD_VAR 0 2
9688: PPUSH
9689: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9693: LD_VAR 0 9
9697: PUSH
9698: LD_INT 0
9700: GREATER
9701: PUSH
9702: LD_VAR 0 6
9706: PUSH
9707: LD_INT 0
9709: EQUAL
9710: AND
9711: PUSH
9712: LD_VAR 0 4
9716: PUSH
9717: LD_INT 0
9719: GREATER
9720: AND
9721: IFFALSE 9768
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9723: LD_VAR 0 9
9727: PPUSH
9728: LD_VAR 0 4
9732: PUSH
9733: LD_INT 1
9735: ARRAY
9736: PPUSH
9737: LD_VAR 0 4
9741: PUSH
9742: LD_INT 2
9744: ARRAY
9745: PPUSH
9746: LD_VAR 0 4
9750: PUSH
9751: LD_INT 3
9753: ARRAY
9754: PPUSH
9755: LD_VAR 0 4
9759: PUSH
9760: LD_INT 4
9762: ARRAY
9763: PPUSH
9764: CALL_OW 145
// end ;
9768: LD_VAR 0 5
9772: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
9773: LD_INT 0
9775: PPUSH
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
9784: LD_ADDR_VAR 0 6
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 1
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 25
9803: PUSH
9804: LD_INT 4
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 23
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 24
9823: PUSH
9824: LD_INT 251
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: PPUSH
9837: CALL_OW 69
9841: PUSH
9842: LD_EXP 35
9846: PUSH
9847: EMPTY
9848: LIST
9849: DIFF
9850: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
9851: LD_ADDR_VAR 0 7
9855: PUSH
9856: LD_VAR 0 3
9860: PPUSH
9861: LD_INT 22
9863: PUSH
9864: LD_VAR 0 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 23
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 25
9885: PUSH
9886: LD_INT 4
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 50
9895: PUSH
9896: EMPTY
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 70
9909: PUSH
9910: LD_EXP 35
9914: PUSH
9915: EMPTY
9916: LIST
9917: DIFF
9918: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9919: LD_ADDR_VAR 0 10
9923: PUSH
9924: LD_VAR 0 3
9928: PPUSH
9929: LD_INT 22
9931: PUSH
9932: LD_VAR 0 1
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 21
9943: PUSH
9944: LD_INT 1
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: LD_INT 25
9956: PUSH
9957: LD_INT 3
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 3
9970: PUSH
9971: LD_INT 24
9973: PUSH
9974: LD_INT 750
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 70
9995: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9996: LD_ADDR_VAR 0 11
10000: PUSH
10001: LD_VAR 0 2
10005: PPUSH
10006: LD_INT 22
10008: PUSH
10009: LD_VAR 0 1
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 21
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: LD_INT 25
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 3
10047: PUSH
10048: LD_INT 24
10050: PUSH
10051: LD_INT 1000
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: PPUSH
10068: CALL_OW 70
10072: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10073: LD_VAR 0 10
10077: NOT
10078: PUSH
10079: LD_VAR 0 11
10083: NOT
10084: AND
10085: PUSH
10086: LD_VAR 0 6
10090: NOT
10091: AND
10092: IFFALSE 10096
// exit ;
10094: GO 10330
// if damageUnits > 0 and sci_list > 0 then
10096: LD_VAR 0 10
10100: PUSH
10101: LD_INT 0
10103: GREATER
10104: PUSH
10105: LD_VAR 0 6
10109: PUSH
10110: LD_INT 0
10112: GREATER
10113: AND
10114: IFFALSE 10130
// ComMoveToArea ( damageUnits , healArea ) ;
10116: LD_VAR 0 10
10120: PPUSH
10121: LD_VAR 0 2
10125: PPUSH
10126: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10130: LD_VAR 0 11
10134: PUSH
10135: LD_INT 0
10137: GREATER
10138: PUSH
10139: LD_VAR 0 6
10143: PUSH
10144: LD_INT 0
10146: GREATER
10147: AND
10148: IFFALSE 10159
// ComExitBuilding ( sci_list ) ;
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10159: LD_VAR 0 11
10163: PUSH
10164: LD_INT 0
10166: GREATER
10167: PUSH
10168: LD_VAR 0 7
10172: PUSH
10173: LD_INT 0
10175: GREATER
10176: AND
10177: IFFALSE 10197
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10179: LD_VAR 0 7
10183: PPUSH
10184: LD_VAR 0 11
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10197: LD_VAR 0 10
10201: PUSH
10202: LD_INT 0
10204: EQUAL
10205: PUSH
10206: LD_VAR 0 11
10210: PUSH
10211: LD_INT 0
10213: EQUAL
10214: AND
10215: PUSH
10216: LD_VAR 0 7
10220: PUSH
10221: LD_INT 0
10223: GREATER
10224: AND
10225: IFFALSE 10330
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10227: LD_ADDR_VAR 0 12
10231: PUSH
10232: LD_INT 22
10234: PUSH
10235: LD_VAR 0 1
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 21
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 30
10256: PUSH
10257: LD_INT 8
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: PPUSH
10269: CALL_OW 69
10273: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10274: LD_ADDR_VAR 0 13
10278: PUSH
10279: LD_INT 1
10281: PPUSH
10282: LD_VAR 0 12
10286: PPUSH
10287: CALL_OW 12
10291: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10292: LD_VAR 0 7
10296: PPUSH
10297: LD_INT 3
10299: PUSH
10300: LD_INT 60
10302: PUSH
10303: EMPTY
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PPUSH
10310: CALL_OW 72
10314: PPUSH
10315: LD_VAR 0 12
10319: PUSH
10320: LD_VAR 0 13
10324: ARRAY
10325: PPUSH
10326: CALL_OW 120
// end ; end ;
10330: LD_VAR 0 5
10334: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10335: LD_INT 0
10337: PPUSH
10338: PPUSH
10339: PPUSH
10340: PPUSH
// tmpTab = [ ] ;
10341: LD_ADDR_VAR 0 6
10345: PUSH
10346: EMPTY
10347: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10348: LD_INT 22
10350: PUSH
10351: LD_VAR 0 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 30
10362: PUSH
10363: LD_INT 32
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: PUSH
10379: LD_INT 0
10381: GREATER
10382: IFFALSE 10465
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10384: LD_ADDR_VAR 0 4
10388: PUSH
10389: LD_INT 22
10391: PUSH
10392: LD_VAR 0 1
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 30
10403: PUSH
10404: LD_INT 32
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PPUSH
10415: CALL_OW 69
10419: PUSH
10420: FOR_IN
10421: IFFALSE 10463
// begin for j in UnitsInside ( i ) do
10423: LD_ADDR_VAR 0 5
10427: PUSH
10428: LD_VAR 0 4
10432: PPUSH
10433: CALL_OW 313
10437: PUSH
10438: FOR_IN
10439: IFFALSE 10459
// tmpTab = tmpTab ^ j ;
10441: LD_ADDR_VAR 0 6
10445: PUSH
10446: LD_VAR 0 6
10450: PUSH
10451: LD_VAR 0 5
10455: ADD
10456: ST_TO_ADDR
10457: GO 10438
10459: POP
10460: POP
// end ;
10461: GO 10420
10463: POP
10464: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10465: LD_VAR 0 6
10469: PPUSH
10470: LD_VAR 0 2
10474: PPUSH
10475: CALL_OW 250
10479: PPUSH
10480: LD_VAR 0 2
10484: PPUSH
10485: CALL_OW 251
10489: PPUSH
10490: CALL_OW 114
// end ;
10494: LD_VAR 0 3
10498: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
10499: LD_INT 0
10501: PPUSH
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
10506: PPUSH
10507: PPUSH
10508: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
10509: LD_ADDR_VAR 0 6
10513: PUSH
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 22
10521: PUSH
10522: LD_VAR 0 1
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 56
10533: PUSH
10534: EMPTY
10535: LIST
10536: PUSH
10537: LD_INT 24
10539: PUSH
10540: LD_INT 700
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 3
10549: PUSH
10550: LD_INT 60
10552: PUSH
10553: EMPTY
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 1
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 25
10575: PUSH
10576: LD_INT 5
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: LD_INT 8
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 25
10595: PUSH
10596: LD_INT 9
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 70
10621: PUSH
10622: LD_EXP 26
10626: PUSH
10627: LD_EXP 27
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: DIFF
10636: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
10637: LD_ADDR_VAR 0 7
10641: PUSH
10642: LD_VAR 0 2
10646: PPUSH
10647: LD_INT 22
10649: PUSH
10650: LD_VAR 0 1
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 30
10661: PUSH
10662: LD_INT 32
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 58
10671: PUSH
10672: EMPTY
10673: LIST
10674: PUSH
10675: LD_INT 24
10677: PUSH
10678: LD_INT 251
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 70
10695: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
10696: LD_ADDR_VAR 0 9
10700: PUSH
10701: LD_VAR 0 2
10705: PPUSH
10706: LD_INT 22
10708: PUSH
10709: LD_VAR 0 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 30
10723: PUSH
10724: LD_INT 4
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 30
10733: PUSH
10734: LD_INT 5
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 24
10748: PUSH
10749: LD_INT 251
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: PPUSH
10761: CALL_OW 70
10765: ST_TO_ADDR
// if barrackList > 0 then
10766: LD_VAR 0 9
10770: PUSH
10771: LD_INT 0
10773: GREATER
10774: IFFALSE 10922
// begin if turretList = 0 then
10776: LD_VAR 0 7
10780: PUSH
10781: LD_INT 0
10783: EQUAL
10784: IFFALSE 10826
// begin if soldiers_list > 0 then
10786: LD_VAR 0 6
10790: PUSH
10791: LD_INT 0
10793: GREATER
10794: IFFALSE 10824
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
10796: LD_VAR 0 6
10800: PPUSH
10801: LD_VAR 0 9
10805: PUSH
10806: LD_INT 1
10808: PPUSH
10809: LD_VAR 0 9
10813: PPUSH
10814: CALL_OW 12
10818: ARRAY
10819: PPUSH
10820: CALL_OW 120
// end else
10824: GO 10922
// begin for i in barrackList do
10826: LD_ADDR_VAR 0 4
10830: PUSH
10831: LD_VAR 0 9
10835: PUSH
10836: FOR_IN
10837: IFFALSE 10920
// begin insideUnits = UnitsInside ( i ) ;
10839: LD_ADDR_VAR 0 10
10843: PUSH
10844: LD_VAR 0 4
10848: PPUSH
10849: CALL_OW 313
10853: ST_TO_ADDR
// if insideUnits > 0 then
10854: LD_VAR 0 10
10858: PUSH
10859: LD_INT 0
10861: GREATER
10862: IFFALSE 10886
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
10864: LD_VAR 0 10
10868: PUSH
10869: LD_INT 1
10871: ARRAY
10872: PPUSH
10873: LD_VAR 0 7
10877: PUSH
10878: LD_INT 1
10880: ARRAY
10881: PPUSH
10882: CALL_OW 120
// if soldiers_list > 0 then
10886: LD_VAR 0 6
10890: PUSH
10891: LD_INT 0
10893: GREATER
10894: IFFALSE 10918
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
10896: LD_VAR 0 6
10900: PUSH
10901: LD_INT 1
10903: ARRAY
10904: PPUSH
10905: LD_VAR 0 7
10909: PUSH
10910: LD_INT 1
10912: ARRAY
10913: PPUSH
10914: CALL_OW 120
// end ;
10918: GO 10836
10920: POP
10921: POP
// end ; end ; end ;
10922: LD_VAR 0 3
10926: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
10927: LD_INT 0
10929: PPUSH
10930: PPUSH
10931: PPUSH
10932: PPUSH
10933: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
10934: LD_ADDR_VAR 0 6
10938: PUSH
10939: LD_INT 22
10941: PUSH
10942: LD_VAR 0 1
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 2
10953: PUSH
10954: LD_INT 30
10956: PUSH
10957: LD_INT 31
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 30
10966: PUSH
10967: LD_INT 32
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 30
10976: PUSH
10977: LD_INT 33
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 30
10986: PUSH
10987: LD_INT 4
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 30
10996: PUSH
10997: LD_INT 5
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PPUSH
11016: CALL_OW 69
11020: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11021: LD_ADDR_VAR 0 7
11025: PUSH
11026: LD_INT 22
11028: PUSH
11029: LD_VAR 0 2
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 21
11040: PUSH
11041: LD_INT 3
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 58
11050: PUSH
11051: EMPTY
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11064: LD_VAR 0 6
11068: PUSH
11069: LD_INT 0
11071: GREATER
11072: PUSH
11073: LD_VAR 0 7
11077: PUSH
11078: LD_INT 0
11080: GREATER
11081: AND
11082: IFFALSE 11152
// begin for i in turretsList do
11084: LD_ADDR_VAR 0 4
11088: PUSH
11089: LD_VAR 0 6
11093: PUSH
11094: FOR_IN
11095: IFFALSE 11150
// begin for j in enemyBuildings do
11097: LD_ADDR_VAR 0 5
11101: PUSH
11102: LD_VAR 0 7
11106: PUSH
11107: FOR_IN
11108: IFFALSE 11146
// begin if GetDistUnits ( i , j ) < 20 then
11110: LD_VAR 0 4
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 296
11124: PUSH
11125: LD_INT 20
11127: LESS
11128: IFFALSE 11144
// begin ComAttackUnit ( i , j ) ;
11130: LD_VAR 0 4
11134: PPUSH
11135: LD_VAR 0 5
11139: PPUSH
11140: CALL_OW 115
// end ; end ;
11144: GO 11107
11146: POP
11147: POP
// end ;
11148: GO 11094
11150: POP
11151: POP
// end ; end ;
11152: LD_VAR 0 3
11156: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11157: LD_INT 0
11159: PPUSH
11160: PPUSH
// for i = 1 to vehCount do
11161: LD_ADDR_VAR 0 9
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_VAR 0 3
11175: PUSH
11176: FOR_TO
11177: IFFALSE 11224
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11179: LD_VAR 0 2
11183: PPUSH
11184: LD_VAR 0 7
11188: PPUSH
11189: LD_VAR 0 5
11193: PPUSH
11194: LD_VAR 0 6
11198: PPUSH
11199: LD_VAR 0 4
11203: PUSH
11204: LD_INT 1
11206: PPUSH
11207: LD_VAR 0 4
11211: PPUSH
11212: CALL_OW 12
11216: ARRAY
11217: PPUSH
11218: CALL_OW 185
11222: GO 11176
11224: POP
11225: POP
// end ;
11226: LD_VAR 0 8
11230: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11231: LD_INT 0
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
// if oponent = 1 then
11239: LD_VAR 0 2
11243: PUSH
11244: LD_INT 1
11246: EQUAL
11247: IFFALSE 11436
// begin repeat wait ( 0 0$1 ) ;
11249: LD_INT 35
11251: PPUSH
11252: CALL_OW 67
// for j in legionVehicles do
11256: LD_ADDR_VAR 0 5
11260: PUSH
11261: LD_EXP 49
11265: PUSH
11266: FOR_IN
11267: IFFALSE 11425
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11269: LD_ADDR_VAR 0 7
11273: PUSH
11274: LD_INT 22
11276: PUSH
11277: LD_VAR 0 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 69
11290: PPUSH
11291: LD_VAR 0 5
11295: PPUSH
11296: CALL_OW 74
11300: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11301: LD_ADDR_VAR 0 8
11305: PUSH
11306: LD_INT 22
11308: PUSH
11309: LD_VAR 0 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 30
11320: PUSH
11321: LD_INT 32
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 59
11330: PUSH
11331: EMPTY
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: PPUSH
11342: CALL_OW 69
11346: PPUSH
11347: LD_VAR 0 5
11351: PPUSH
11352: CALL_OW 74
11356: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11357: LD_VAR 0 5
11361: PPUSH
11362: LD_VAR 0 7
11366: PPUSH
11367: CALL_OW 296
11371: PUSH
11372: LD_INT 8
11374: PLUS
11375: PUSH
11376: LD_VAR 0 5
11380: PPUSH
11381: LD_VAR 0 8
11385: PPUSH
11386: CALL_OW 296
11390: LESS
11391: IFFALSE 11409
// ComAttackUnit ( j , target1 ) else
11393: LD_VAR 0 5
11397: PPUSH
11398: LD_VAR 0 7
11402: PPUSH
11403: CALL_OW 115
11407: GO 11423
// ComAttackUnit ( j , target2 ) ;
11409: LD_VAR 0 5
11413: PPUSH
11414: LD_VAR 0 8
11418: PPUSH
11419: CALL_OW 115
// end ;
11423: GO 11266
11425: POP
11426: POP
// until legionVehicles = [ ] ;
11427: LD_EXP 49
11431: PUSH
11432: EMPTY
11433: EQUAL
11434: IFFALSE 11249
// end ; if oponent = 2 then
11436: LD_VAR 0 2
11440: PUSH
11441: LD_INT 2
11443: EQUAL
11444: IFFALSE 11633
// begin repeat wait ( 0 0$1 ) ;
11446: LD_INT 35
11448: PPUSH
11449: CALL_OW 67
// for j in russianVehicles do
11453: LD_ADDR_VAR 0 5
11457: PUSH
11458: LD_EXP 55
11462: PUSH
11463: FOR_IN
11464: IFFALSE 11622
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11466: LD_ADDR_VAR 0 7
11470: PUSH
11471: LD_INT 22
11473: PUSH
11474: LD_VAR 0 1
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 69
11487: PPUSH
11488: LD_VAR 0 5
11492: PPUSH
11493: CALL_OW 74
11497: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11498: LD_ADDR_VAR 0 8
11502: PUSH
11503: LD_INT 22
11505: PUSH
11506: LD_VAR 0 1
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 30
11517: PUSH
11518: LD_INT 32
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 59
11527: PUSH
11528: EMPTY
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: PPUSH
11539: CALL_OW 69
11543: PPUSH
11544: LD_VAR 0 5
11548: PPUSH
11549: CALL_OW 74
11553: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11554: LD_VAR 0 5
11558: PPUSH
11559: LD_VAR 0 7
11563: PPUSH
11564: CALL_OW 296
11568: PUSH
11569: LD_INT 8
11571: PLUS
11572: PUSH
11573: LD_VAR 0 5
11577: PPUSH
11578: LD_VAR 0 8
11582: PPUSH
11583: CALL_OW 296
11587: LESS
11588: IFFALSE 11606
// ComAttackUnit ( j , target1 ) else
11590: LD_VAR 0 5
11594: PPUSH
11595: LD_VAR 0 7
11599: PPUSH
11600: CALL_OW 115
11604: GO 11620
// ComAttackUnit ( j , target2 ) ;
11606: LD_VAR 0 5
11610: PPUSH
11611: LD_VAR 0 8
11615: PPUSH
11616: CALL_OW 115
// end ;
11620: GO 11463
11622: POP
11623: POP
// until russianVehicles = [ ] ;
11624: LD_EXP 55
11628: PUSH
11629: EMPTY
11630: EQUAL
11631: IFFALSE 11446
// end ; if oponent = 3 then
11633: LD_VAR 0 2
11637: PUSH
11638: LD_INT 3
11640: EQUAL
11641: IFFALSE 11830
// begin repeat wait ( 0 0$1 ) ;
11643: LD_INT 35
11645: PPUSH
11646: CALL_OW 67
// for j in allianceVehicles do
11650: LD_ADDR_VAR 0 5
11654: PUSH
11655: LD_EXP 56
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11819
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11663: LD_ADDR_VAR 0 7
11667: PUSH
11668: LD_INT 22
11670: PUSH
11671: LD_VAR 0 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PPUSH
11680: CALL_OW 69
11684: PPUSH
11685: LD_VAR 0 5
11689: PPUSH
11690: CALL_OW 74
11694: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11695: LD_ADDR_VAR 0 8
11699: PUSH
11700: LD_INT 22
11702: PUSH
11703: LD_VAR 0 1
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 30
11714: PUSH
11715: LD_INT 32
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 59
11724: PUSH
11725: EMPTY
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: PPUSH
11736: CALL_OW 69
11740: PPUSH
11741: LD_VAR 0 5
11745: PPUSH
11746: CALL_OW 74
11750: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11751: LD_VAR 0 5
11755: PPUSH
11756: LD_VAR 0 7
11760: PPUSH
11761: CALL_OW 296
11765: PUSH
11766: LD_INT 8
11768: PLUS
11769: PUSH
11770: LD_VAR 0 5
11774: PPUSH
11775: LD_VAR 0 8
11779: PPUSH
11780: CALL_OW 296
11784: LESS
11785: IFFALSE 11803
// ComAttackUnit ( j , target1 ) else
11787: LD_VAR 0 5
11791: PPUSH
11792: LD_VAR 0 7
11796: PPUSH
11797: CALL_OW 115
11801: GO 11817
// ComAttackUnit ( j , target2 ) ;
11803: LD_VAR 0 5
11807: PPUSH
11808: LD_VAR 0 8
11812: PPUSH
11813: CALL_OW 115
// end ;
11817: GO 11660
11819: POP
11820: POP
// until allianceVehicles = [ ] ;
11821: LD_EXP 56
11825: PUSH
11826: EMPTY
11827: EQUAL
11828: IFFALSE 11643
// end ; end ;
11830: LD_VAR 0 3
11834: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
11835: LD_INT 0
11837: PPUSH
11838: PPUSH
11839: PPUSH
11840: PPUSH
11841: PPUSH
11842: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
11843: LD_ADDR_VAR 0 6
11847: PUSH
11848: LD_INT 22
11850: PUSH
11851: LD_VAR 0 1
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 25
11862: PUSH
11863: LD_INT 9
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 69
11878: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11879: LD_ADDR_VAR 0 7
11883: PUSH
11884: LD_INT 81
11886: PUSH
11887: LD_VAR 0 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 3
11898: PUSH
11899: LD_INT 21
11901: PUSH
11902: LD_INT 3
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 69
11921: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
11922: LD_ADDR_VAR 0 4
11926: PUSH
11927: LD_INT 1
11929: PPUSH
11930: LD_INT 3
11932: PPUSH
11933: CALL_OW 12
11937: ST_TO_ADDR
// for i = 1 to list do
11938: LD_ADDR_VAR 0 5
11942: PUSH
11943: DOUBLE
11944: LD_INT 1
11946: DEC
11947: ST_TO_ADDR
11948: LD_VAR 0 6
11952: PUSH
11953: FOR_TO
11954: IFFALSE 12156
// for ta in filter do
11956: LD_ADDR_VAR 0 3
11960: PUSH
11961: LD_VAR 0 7
11965: PUSH
11966: FOR_IN
11967: IFFALSE 12152
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
11969: LD_VAR 0 6
11973: PUSH
11974: LD_VAR 0 5
11978: ARRAY
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: CALL_OW 296
11989: PUSH
11990: LD_INT 15
11992: LESSEQUAL
11993: IFFALSE 12150
// begin case c of 1 :
11995: LD_VAR 0 4
11999: PUSH
12000: LD_INT 1
12002: DOUBLE
12003: EQUAL
12004: IFTRUE 12008
12006: GO 12046
12008: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12009: LD_VAR 0 6
12013: PUSH
12014: LD_VAR 0 5
12018: ARRAY
12019: PPUSH
12020: LD_VAR 0 3
12024: PPUSH
12025: CALL_OW 250
12029: PPUSH
12030: LD_VAR 0 3
12034: PPUSH
12035: CALL_OW 251
12039: PPUSH
12040: CALL_OW 154
12044: GO 12150
12046: LD_INT 2
12048: DOUBLE
12049: EQUAL
12050: IFTRUE 12054
12052: GO 12118
12054: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12055: LD_VAR 0 6
12059: PUSH
12060: LD_VAR 0 5
12064: ARRAY
12065: PPUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: CALL_OW 250
12075: PUSH
12076: LD_INT 1
12078: NEG
12079: PPUSH
12080: LD_INT 1
12082: PPUSH
12083: CALL_OW 12
12087: PLUS
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: CALL_OW 251
12098: PUSH
12099: LD_INT 1
12101: NEG
12102: PPUSH
12103: LD_INT 1
12105: PPUSH
12106: CALL_OW 12
12110: PLUS
12111: PPUSH
12112: CALL_OW 153
12116: GO 12150
12118: LD_INT 3
12120: DOUBLE
12121: EQUAL
12122: IFTRUE 12126
12124: GO 12149
12126: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12127: LD_VAR 0 6
12131: PUSH
12132: LD_VAR 0 5
12136: ARRAY
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: CALL_OW 115
12147: GO 12150
12149: POP
// end ; end ;
12150: GO 11966
12152: POP
12153: POP
12154: GO 11953
12156: POP
12157: POP
// end ;
12158: LD_VAR 0 2
12162: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
12167: PPUSH
12168: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12169: LD_INT 22
12171: PUSH
12172: LD_VAR 0 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 21
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 34
12193: PUSH
12194: LD_INT 49
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: PUSH
12211: LD_INT 0
12213: EQUAL
12214: IFFALSE 12218
// exit ;
12216: GO 12473
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12218: LD_INT 22
12220: PUSH
12221: LD_VAR 0 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 21
12232: PUSH
12233: LD_INT 2
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 34
12242: PUSH
12243: LD_INT 49
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: PUSH
12260: LD_INT 0
12262: GREATER
12263: IFFALSE 12473
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12265: LD_ADDR_VAR 0 6
12269: PUSH
12270: LD_INT 22
12272: PUSH
12273: LD_VAR 0 1
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 21
12284: PUSH
12285: LD_INT 2
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 34
12294: PUSH
12295: LD_INT 49
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 69
12311: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12312: LD_INT 105
12314: PPUSH
12315: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12319: LD_ADDR_VAR 0 4
12323: PUSH
12324: LD_VAR 0 6
12328: PPUSH
12329: LD_INT 3
12331: PUSH
12332: LD_INT 60
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 72
12346: PUSH
12347: FOR_IN
12348: IFFALSE 12461
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12350: LD_ADDR_VAR 0 5
12354: PUSH
12355: LD_INT 81
12357: PUSH
12358: LD_VAR 0 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 101
12369: PUSH
12370: LD_VAR 0 2
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: LD_INT 21
12384: PUSH
12385: LD_INT 1
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 3
12394: PUSH
12395: LD_INT 58
12397: PUSH
12398: EMPTY
12399: LIST
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: PPUSH
12420: LD_VAR 0 4
12424: PPUSH
12425: CALL_OW 74
12429: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12430: LD_VAR 0 4
12434: PPUSH
12435: LD_VAR 0 5
12439: PPUSH
12440: CALL_OW 250
12444: PPUSH
12445: LD_VAR 0 5
12449: PPUSH
12450: CALL_OW 251
12454: PPUSH
12455: CALL_OW 111
// end ;
12459: GO 12347
12461: POP
12462: POP
// until vehs = 0 ;
12463: LD_VAR 0 6
12467: PUSH
12468: LD_INT 0
12470: EQUAL
12471: IFFALSE 12265
// end ; end_of_file
12473: LD_VAR 0 3
12477: RET
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
12478: LD_VAR 0 1
12482: PUSH
12483: LD_INT 235
12485: EQUAL
12486: PUSH
12487: LD_VAR 0 2
12491: PPUSH
12492: CALL_OW 255
12496: PUSH
12497: LD_INT 4
12499: EQUAL
12500: AND
12501: IFFALSE 12577
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
12503: LD_INT 235
12505: PPUSH
12506: LD_INT 84
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
12516: LD_INT 235
12518: PPUSH
12519: LD_INT 68
12521: PPUSH
12522: LD_INT 100
12524: PPUSH
12525: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
12529: LD_INT 235
12531: PPUSH
12532: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
12536: LD_INT 235
12538: PPUSH
12539: LD_INT 48
12541: PPUSH
12542: LD_INT 69
12544: PPUSH
12545: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
12549: LD_INT 235
12551: PPUSH
12552: LD_INT 39
12554: PPUSH
12555: LD_INT 61
12557: PPUSH
12558: CALL_OW 171
// wait ( 0 0$10 ) ;
12562: LD_INT 350
12564: PPUSH
12565: CALL_OW 67
// powellUnloadCargo = 1 ;
12569: LD_ADDR_EXP 63
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// end ; end ;
12577: PPOPN 2
12579: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
12580: LD_INT 0
12582: PPUSH
12583: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
12584: LD_ADDR_VAR 0 3
12588: PUSH
12589: LD_INT 22
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 56
12611: PUSH
12612: EMPTY
12613: LIST
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: LD_INT 60
12620: PUSH
12621: EMPTY
12622: LIST
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 69
12638: PUSH
12639: LD_EXP 17
12643: PUSH
12644: EMPTY
12645: LIST
12646: DIFF
12647: ST_TO_ADDR
// if GetSide ( building ) = 4 then
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL_OW 255
12657: PUSH
12658: LD_INT 4
12660: EQUAL
12661: IFFALSE 12792
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
12663: LD_INT 22
12665: PUSH
12666: LD_INT 4
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 30
12675: PUSH
12676: LD_INT 8
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 69
12691: PUSH
12692: LD_INT 1
12694: EQUAL
12695: IFFALSE 12792
// begin for i = 1 to 3 do
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: DOUBLE
12703: LD_INT 1
12705: DEC
12706: ST_TO_ADDR
12707: LD_INT 3
12709: PUSH
12710: FOR_TO
12711: IFFALSE 12775
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
12713: LD_VAR 0 3
12717: PUSH
12718: LD_VAR 0 2
12722: ARRAY
12723: PPUSH
12724: LD_INT 3
12726: PUSH
12727: LD_INT 25
12729: PUSH
12730: LD_INT 2
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 72
12745: PPUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
12755: LD_VAR 0 3
12759: PUSH
12760: LD_VAR 0 2
12764: ARRAY
12765: PPUSH
12766: LD_INT 4
12768: PPUSH
12769: CALL_OW 183
// end ;
12773: GO 12710
12775: POP
12776: POP
// ResAllTechs ( 4 , building , 1 ) ;
12777: LD_INT 4
12779: PPUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL 9279 0 3
// end ; if GetSide ( building ) = 8 then
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 255
12801: PUSH
12802: LD_INT 8
12804: EQUAL
12805: IFFALSE 12990
// begin if GetNation ( building ) = 3 then
12807: LD_VAR 0 1
12811: PPUSH
12812: CALL_OW 248
12816: PUSH
12817: LD_INT 3
12819: EQUAL
12820: IFFALSE 12990
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
12822: LD_EXP 35
12826: PPUSH
12827: LD_INT 73
12829: PPUSH
12830: LD_INT 16
12832: PPUSH
12833: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
12837: LD_EXP 35
12841: PPUSH
12842: LD_INT 21
12844: PPUSH
12845: LD_INT 74
12847: PPUSH
12848: LD_INT 12
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 205
// wait ( 0 0$2 ) ;
12858: LD_INT 70
12860: PPUSH
12861: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
12865: LD_EXP 35
12869: PPUSH
12870: LD_INT 22
12872: PUSH
12873: LD_INT 8
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 30
12882: PUSH
12883: LD_INT 3
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 23
12892: PUSH
12893: LD_INT 3
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
12918: LD_EXP 35
12922: PPUSH
12923: LD_INT 3
12925: PPUSH
12926: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
12930: LD_INT 22
12932: PUSH
12933: LD_INT 8
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 30
12942: PUSH
12943: LD_INT 3
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 23
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: LD_INT 24
12976: PPUSH
12977: LD_INT 3
12979: PPUSH
12980: LD_INT 3
12982: PPUSH
12983: LD_INT 48
12985: PPUSH
12986: CALL_OW 185
// end ; end ; end ;
12990: PPOPN 3
12992: END
// on BuildingComplete ( building ) do var powellPeople ;
12993: LD_INT 0
12995: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 4
13008: EQUAL
13009: PUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 266
13019: PUSH
13020: LD_INT 17
13022: EQUAL
13023: AND
13024: IFFALSE 13306
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13026: LD_ADDR_VAR 0 2
13030: PUSH
13031: LD_INT 22
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 21
13043: PUSH
13044: LD_INT 1
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 56
13053: PUSH
13054: EMPTY
13055: LIST
13056: PUSH
13057: LD_INT 3
13059: PUSH
13060: LD_INT 60
13062: PUSH
13063: EMPTY
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PPUSH
13076: CALL_OW 69
13080: PUSH
13081: LD_EXP 17
13085: PUSH
13086: EMPTY
13087: LIST
13088: DIFF
13089: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13090: LD_INT 22
13092: PUSH
13093: LD_INT 4
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 21
13102: PUSH
13103: LD_INT 3
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 30
13112: PUSH
13113: LD_INT 32
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: PPUSH
13134: LD_INT 6
13136: PPUSH
13137: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13141: LD_INT 22
13143: PUSH
13144: LD_INT 4
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 3
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 30
13163: PUSH
13164: LD_INT 32
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 69
13180: PUSH
13181: LD_INT 2
13183: ARRAY
13184: PPUSH
13185: LD_INT 5
13187: PPUSH
13188: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13192: LD_VAR 0 2
13196: PUSH
13197: LD_INT 1
13199: ARRAY
13200: PPUSH
13201: LD_INT 22
13203: PUSH
13204: LD_INT 4
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 21
13213: PUSH
13214: LD_INT 3
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 30
13223: PUSH
13224: LD_INT 32
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 69
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13249: LD_VAR 0 2
13253: PUSH
13254: LD_INT 2
13256: ARRAY
13257: PPUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 21
13270: PUSH
13271: LD_INT 3
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 30
13280: PUSH
13281: LD_INT 32
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: PPUSH
13293: CALL_OW 69
13297: PUSH
13298: LD_INT 2
13300: ARRAY
13301: PPUSH
13302: CALL_OW 120
// end ; if GetSide ( building ) = 8 then
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 255
13315: PUSH
13316: LD_INT 8
13318: EQUAL
13319: IFFALSE 13345
// begin if GetBType ( building ) = b_workshop then
13321: LD_VAR 0 1
13325: PPUSH
13326: CALL_OW 266
13330: PUSH
13331: LD_INT 2
13333: EQUAL
13334: IFFALSE 13345
// ComUpgrade ( building ) ;
13336: LD_VAR 0 1
13340: PPUSH
13341: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 255
13354: PUSH
13355: LD_INT 3
13357: EQUAL
13358: IFFALSE 13432
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13360: LD_ADDR_EXP 86
13364: PUSH
13365: LD_EXP 86
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 3
13377: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13378: LD_ADDR_EXP 86
13382: PUSH
13383: LD_EXP 86
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: CALL_OW 3
13395: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13396: LD_ADDR_EXP 86
13400: PUSH
13401: LD_EXP 86
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 3
13413: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
13414: LD_ADDR_EXP 86
13418: PUSH
13419: LD_EXP 86
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 3
13431: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
13432: LD_VAR 0 1
13436: PPUSH
13437: CALL_OW 255
13441: PUSH
13442: LD_INT 8
13444: EQUAL
13445: IFFALSE 13519
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13447: LD_ADDR_EXP 85
13451: PUSH
13452: LD_EXP 85
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 3
13464: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13465: LD_ADDR_EXP 85
13469: PUSH
13470: LD_EXP 85
13474: PPUSH
13475: LD_INT 1
13477: PPUSH
13478: CALL_OW 3
13482: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13483: LD_ADDR_EXP 85
13487: PUSH
13488: LD_EXP 85
13492: PPUSH
13493: LD_INT 1
13495: PPUSH
13496: CALL_OW 3
13500: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
13501: LD_ADDR_EXP 85
13505: PUSH
13506: LD_EXP 85
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 3
13518: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
13519: LD_VAR 0 1
13523: PPUSH
13524: CALL_OW 255
13528: PUSH
13529: LD_INT 7
13531: EQUAL
13532: IFFALSE 13606
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13534: LD_ADDR_EXP 87
13538: PUSH
13539: LD_EXP 87
13543: PPUSH
13544: LD_INT 1
13546: PPUSH
13547: CALL_OW 3
13551: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13552: LD_ADDR_EXP 87
13556: PUSH
13557: LD_EXP 87
13561: PPUSH
13562: LD_INT 1
13564: PPUSH
13565: CALL_OW 3
13569: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13570: LD_ADDR_EXP 87
13574: PUSH
13575: LD_EXP 87
13579: PPUSH
13580: LD_INT 1
13582: PPUSH
13583: CALL_OW 3
13587: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
13588: LD_ADDR_EXP 87
13592: PUSH
13593: LD_EXP 87
13597: PPUSH
13598: LD_INT 1
13600: PPUSH
13601: CALL_OW 3
13605: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 255
13615: PUSH
13616: LD_INT 3
13618: EQUAL
13619: IFFALSE 13686
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 266
13630: PUSH
13631: LD_INT 32
13633: EQUAL
13634: PUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 266
13644: PUSH
13645: LD_INT 33
13647: EQUAL
13648: OR
13649: IFFALSE 13686
// AddComPlaceWeapon ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
13651: LD_VAR 0 1
13655: PPUSH
13656: LD_INT 46
13658: PUSH
13659: LD_INT 47
13661: PUSH
13662: LD_INT 45
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 1
13672: PPUSH
13673: LD_INT 3
13675: PPUSH
13676: CALL_OW 12
13680: ARRAY
13681: PPUSH
13682: CALL_OW 208
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
13686: LD_VAR 0 1
13690: PPUSH
13691: CALL_OW 255
13695: PUSH
13696: LD_INT 8
13698: EQUAL
13699: PUSH
13700: LD_VAR 0 1
13704: PPUSH
13705: CALL_OW 266
13709: PUSH
13710: LD_INT 32
13712: EQUAL
13713: AND
13714: IFFALSE 13747
// begin AddComPlaceWeapon ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
13716: LD_VAR 0 1
13720: PPUSH
13721: LD_INT 28
13723: PUSH
13724: LD_INT 27
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 1
13733: PPUSH
13734: LD_INT 2
13736: PPUSH
13737: CALL_OW 12
13741: ARRAY
13742: PPUSH
13743: CALL_OW 208
// end ; end ;
13747: PPOPN 2
13749: END
// on EnterBuilding ( building , human ) do begin end ;
13750: PPOPN 2
13752: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
13753: LD_VAR 0 1
13757: PPUSH
13758: CALL_OW 255
13762: PUSH
13763: LD_INT 6
13765: EQUAL
13766: IFFALSE 13784
// ruBehs = ruBehs ^ vehicle ;
13768: LD_ADDR_EXP 53
13772: PUSH
13773: LD_EXP 53
13777: PUSH
13778: LD_VAR 0 1
13782: ADD
13783: ST_TO_ADDR
// end ;
13784: PPOPN 1
13786: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb ;
13787: LD_INT 0
13789: PPUSH
// begin if vehicle = powellVeh then
13790: LD_VAR 0 1
13794: PUSH
13795: LD_EXP 66
13799: EQUAL
13800: IFFALSE 13816
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 313
13811: PPUSH
13812: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
13816: LD_VAR 0 1
13820: PPUSH
13821: CALL_OW 255
13825: PUSH
13826: LD_INT 4
13828: EQUAL
13829: IFFALSE 13846
// AddComMoveXY ( vehicle , 58 , 63 ) ;
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_INT 58
13838: PPUSH
13839: LD_INT 63
13841: PPUSH
13842: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 255
13855: PUSH
13856: LD_INT 4
13858: EQUAL
13859: PUSH
13860: LD_EXP 62
13864: PUSH
13865: LD_INT 2
13867: EQUAL
13868: AND
13869: PUSH
13870: LD_VAR 0 1
13874: PPUSH
13875: CALL_OW 264
13879: PUSH
13880: LD_INT 6
13882: EQUAL
13883: AND
13884: IFFALSE 13938
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
13886: LD_EXP 59
13890: PUSH
13891: LD_INT 5
13893: ARRAY
13894: PPUSH
13895: CALL_OW 122
// wait ( 0 0$1 ) ;
13899: LD_INT 35
13901: PPUSH
13902: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
13906: LD_EXP 59
13910: PUSH
13911: LD_INT 5
13913: ARRAY
13914: PPUSH
13915: LD_INT 85
13917: PPUSH
13918: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
13922: LD_EXP 59
13926: PUSH
13927: LD_INT 5
13929: ARRAY
13930: PPUSH
13931: LD_INT 3
13933: PPUSH
13934: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 255
13947: PUSH
13948: LD_INT 4
13950: EQUAL
13951: PUSH
13952: LD_EXP 62
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: AND
13961: PUSH
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 264
13971: PUSH
13972: LD_INT 3
13974: EQUAL
13975: AND
13976: IFFALSE 14003
// begin powellVeh = vehicle ;
13978: LD_ADDR_EXP 66
13982: PUSH
13983: LD_VAR 0 1
13987: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
13988: LD_VAR 0 1
13992: PPUSH
13993: LD_INT 49
13995: PPUSH
13996: LD_INT 74
13998: PPUSH
13999: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14003: LD_VAR 0 1
14007: PPUSH
14008: CALL_OW 255
14012: PUSH
14013: LD_INT 8
14015: EQUAL
14016: PUSH
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 248
14026: PUSH
14027: LD_INT 2
14029: EQUAL
14030: AND
14031: PUSH
14032: LD_VAR 0 1
14036: PPUSH
14037: CALL_OW 247
14041: PUSH
14042: LD_INT 2
14044: EQUAL
14045: AND
14046: IFFALSE 14082
// begin legionVehicles = legionVehicles ^ vehicle ;
14048: LD_ADDR_EXP 49
14052: PUSH
14053: LD_EXP 49
14057: PUSH
14058: LD_VAR 0 1
14062: ADD
14063: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14064: LD_VAR 0 1
14068: PPUSH
14069: LD_EXP 50
14073: PUSH
14074: LD_INT 1
14076: ARRAY
14077: PPUSH
14078: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14082: LD_VAR 0 1
14086: PPUSH
14087: CALL_OW 255
14091: PUSH
14092: LD_INT 8
14094: EQUAL
14095: PUSH
14096: LD_VAR 0 1
14100: PPUSH
14101: CALL_OW 248
14105: PUSH
14106: LD_INT 3
14108: EQUAL
14109: AND
14110: IFFALSE 14401
// begin ChangeMissionObjectives ( MlegionDel ) ;
14112: LD_STRING MlegionDel
14114: PPUSH
14115: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_INT 1
14126: PPUSH
14127: LD_INT 2
14129: PPUSH
14130: CALL_OW 12
14134: ST_TO_ADDR
// legionRocket = vehicle ;
14135: LD_ADDR_EXP 91
14139: PUSH
14140: LD_VAR 0 1
14144: ST_TO_ADDR
// DialogueOn ;
14145: CALL_OW 6
// if legionBomb = 1 then
14149: LD_VAR 0 3
14153: PUSH
14154: LD_INT 1
14156: EQUAL
14157: IFFALSE 14281
// begin if Kurt then
14159: LD_EXP 30
14163: IFFALSE 14179
// Say ( Kurt , D12-Kurt-1 ) else
14165: LD_EXP 30
14169: PPUSH
14170: LD_STRING D12-Kurt-1
14172: PPUSH
14173: CALL_OW 88
14177: GO 14241
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14179: LD_INT 22
14181: PUSH
14182: LD_INT 8
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 21
14191: PUSH
14192: LD_INT 1
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 25
14201: PUSH
14202: LD_INT 1
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 26
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 69
14229: PUSH
14230: LD_INT 2
14232: ARRAY
14233: PPUSH
14234: LD_STRING D12-Kurt-1
14236: PPUSH
14237: CALL_OW 88
// DialogueOff ;
14241: CALL_OW 7
// wait ( 0 0$3 ) ;
14245: LD_INT 105
14247: PPUSH
14248: CALL_OW 67
// AddComAttackPlace ( legionRocket , GetX ( JMM ) , GetY ( JMM ) ) ;
14252: LD_EXP 91
14256: PPUSH
14257: LD_EXP 1
14261: PPUSH
14262: CALL_OW 250
14266: PPUSH
14267: LD_EXP 1
14271: PPUSH
14272: CALL_OW 251
14276: PPUSH
14277: CALL_OW 176
// end ; if legionBomb = 2 then
14281: LD_VAR 0 3
14285: PUSH
14286: LD_INT 2
14288: EQUAL
14289: IFFALSE 14401
// begin if Kurt then
14291: LD_EXP 30
14295: IFFALSE 14311
// Say ( Kurt , D12a-Kurt-1 ) else
14297: LD_EXP 30
14301: PPUSH
14302: LD_STRING D12a-Kurt-1
14304: PPUSH
14305: CALL_OW 88
14309: GO 14373
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
14311: LD_INT 22
14313: PUSH
14314: LD_INT 8
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 21
14323: PUSH
14324: LD_INT 1
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 25
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 26
14343: PUSH
14344: LD_INT 1
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: PPUSH
14357: CALL_OW 69
14361: PUSH
14362: LD_INT 2
14364: ARRAY
14365: PPUSH
14366: LD_STRING D12a-Kurt-11
14368: PPUSH
14369: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
14373: LD_EXP 28
14377: PPUSH
14378: LD_STRING D12a-Roth-1
14380: PPUSH
14381: CALL_OW 94
// DialogueOff ;
14385: CALL_OW 7
// ComAttackUnit ( legionRocket , RuDep2 ) ;
14389: LD_EXP 91
14393: PPUSH
14394: LD_INT 23
14396: PPUSH
14397: CALL_OW 115
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 255
14410: PUSH
14411: LD_INT 3
14413: EQUAL
14414: PUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 248
14424: PUSH
14425: LD_INT 3
14427: EQUAL
14428: AND
14429: PUSH
14430: LD_VAR 0 1
14434: PPUSH
14435: CALL_OW 247
14439: PUSH
14440: LD_INT 2
14442: EQUAL
14443: AND
14444: IFFALSE 14462
// RussianVehicles = RussianVehicles ^ vehicle ;
14446: LD_ADDR_EXP 55
14450: PUSH
14451: LD_EXP 55
14455: PUSH
14456: LD_VAR 0 1
14460: ADD
14461: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 255
14471: PUSH
14472: LD_INT 7
14474: EQUAL
14475: PUSH
14476: LD_VAR 0 1
14480: PPUSH
14481: CALL_OW 247
14485: PUSH
14486: LD_INT 2
14488: EQUAL
14489: AND
14490: IFFALSE 14549
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
14492: LD_ADDR_EXP 56
14496: PUSH
14497: LD_EXP 56
14501: PUSH
14502: LD_VAR 0 1
14506: ADD
14507: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
14508: LD_VAR 0 1
14512: PPUSH
14513: CALL_OW 263
14517: PUSH
14518: LD_INT 2
14520: EQUAL
14521: IFFALSE 14549
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
14523: LD_VAR 0 1
14527: PPUSH
14528: LD_EXP 57
14532: PUSH
14533: LD_INT 1
14535: PPUSH
14536: LD_INT 3
14538: PPUSH
14539: CALL_OW 12
14543: ARRAY
14544: PPUSH
14545: CALL_OW 135
// end ; end ;
14549: PPOPN 3
14551: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
14552: LD_VAR 0 1
14556: PPUSH
14557: CALL_OW 255
14561: PUSH
14562: LD_INT 4
14564: EQUAL
14565: PUSH
14566: LD_EXP 62
14570: PUSH
14571: LD_INT 1
14573: EQUAL
14574: AND
14575: IFFALSE 14678
// begin ComEnterUnit ( human , AmFact ) ;
14577: LD_VAR 0 2
14581: PPUSH
14582: LD_INT 85
14584: PPUSH
14585: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
14589: LD_VAR 0 2
14593: PPUSH
14594: CALL_OW 258
14598: PUSH
14599: LD_INT 1
14601: EQUAL
14602: PUSH
14603: LD_EXP 93
14607: PUSH
14608: LD_INT 0
14610: EQUAL
14611: AND
14612: IFFALSE 14678
// begin blockEvent1 = 1 ;
14614: LD_ADDR_EXP 93
14618: PUSH
14619: LD_INT 1
14621: ST_TO_ADDR
// startAttacks = 1 ;
14622: LD_ADDR_EXP 65
14626: PUSH
14627: LD_INT 1
14629: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
14630: LD_VAR 0 2
14634: PPUSH
14635: LD_STRING D4a-Sol1-1
14637: PPUSH
14638: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
14642: LD_EXP 17
14646: PPUSH
14647: LD_STRING D4a-Pow-1
14649: PPUSH
14650: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
14654: LD_VAR 0 2
14658: PPUSH
14659: LD_STRING D4a-Sol1-2
14661: PPUSH
14662: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
14666: LD_EXP 17
14670: PPUSH
14671: LD_STRING D4a-Pow-2
14673: PPUSH
14674: CALL_OW 88
// end ; end ; end ;
14678: PPOPN 2
14680: END
// on UnitDestroyed ( unit ) do var i ;
14681: LD_INT 0
14683: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 255
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: PUSH
14698: LD_VAR 0 1
14702: PPUSH
14703: CALL_OW 247
14707: PUSH
14708: LD_INT 1
14710: EQUAL
14711: AND
14712: IFFALSE 14728
// unitLost = unitLost + 1 ;
14714: LD_ADDR_EXP 90
14718: PUSH
14719: LD_EXP 90
14723: PUSH
14724: LD_INT 1
14726: PLUS
14727: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
14728: LD_VAR 0 1
14732: PPUSH
14733: CALL_OW 255
14737: PUSH
14738: LD_INT 4
14740: EQUAL
14741: PUSH
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 247
14751: PUSH
14752: LD_INT 1
14754: EQUAL
14755: AND
14756: IFFALSE 14806
// begin for i in amUnitsAttack do
14758: LD_ADDR_VAR 0 2
14762: PUSH
14763: LD_EXP 59
14767: PUSH
14768: FOR_IN
14769: IFFALSE 14804
// if i = unit then
14771: LD_VAR 0 2
14775: PUSH
14776: LD_VAR 0 1
14780: EQUAL
14781: IFFALSE 14802
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
14783: LD_ADDR_EXP 59
14787: PUSH
14788: LD_EXP 59
14792: PUSH
14793: LD_VAR 0 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: DIFF
14801: ST_TO_ADDR
14802: GO 14768
14804: POP
14805: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
14806: LD_VAR 0 1
14810: PPUSH
14811: CALL_OW 255
14815: PUSH
14816: LD_INT 8
14818: EQUAL
14819: PUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 247
14829: PUSH
14830: LD_INT 2
14832: EQUAL
14833: AND
14834: PUSH
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 248
14844: PUSH
14845: LD_INT 2
14847: EQUAL
14848: AND
14849: IFFALSE 14899
// begin for i in legionVehicles do
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_EXP 49
14860: PUSH
14861: FOR_IN
14862: IFFALSE 14897
// if i = unit then
14864: LD_VAR 0 2
14868: PUSH
14869: LD_VAR 0 1
14873: EQUAL
14874: IFFALSE 14895
// legionVehicles = legionVehicles diff [ unit ] ;
14876: LD_ADDR_EXP 49
14880: PUSH
14881: LD_EXP 49
14885: PUSH
14886: LD_VAR 0 1
14890: PUSH
14891: EMPTY
14892: LIST
14893: DIFF
14894: ST_TO_ADDR
14895: GO 14861
14897: POP
14898: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 255
14908: PUSH
14909: LD_INT 3
14911: EQUAL
14912: PUSH
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 247
14922: PUSH
14923: LD_INT 2
14925: EQUAL
14926: AND
14927: IFFALSE 14977
// begin for i in RussianVehicles do
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_EXP 55
14938: PUSH
14939: FOR_IN
14940: IFFALSE 14975
// if i = unit then
14942: LD_VAR 0 2
14946: PUSH
14947: LD_VAR 0 1
14951: EQUAL
14952: IFFALSE 14973
// RussianVehicles = RussianVehicles diff [ unit ] ;
14954: LD_ADDR_EXP 55
14958: PUSH
14959: LD_EXP 55
14963: PUSH
14964: LD_VAR 0 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: DIFF
14972: ST_TO_ADDR
14973: GO 14939
14975: POP
14976: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL_OW 255
14986: PUSH
14987: LD_INT 7
14989: EQUAL
14990: PUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 247
15000: PUSH
15001: LD_INT 2
15003: EQUAL
15004: AND
15005: IFFALSE 15055
// begin for i in AllianceVehicles do
15007: LD_ADDR_VAR 0 2
15011: PUSH
15012: LD_EXP 56
15016: PUSH
15017: FOR_IN
15018: IFFALSE 15053
// if i = unit then
15020: LD_VAR 0 2
15024: PUSH
15025: LD_VAR 0 1
15029: EQUAL
15030: IFFALSE 15051
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
15032: LD_ADDR_EXP 56
15036: PUSH
15037: LD_EXP 56
15041: PUSH
15042: LD_VAR 0 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: DIFF
15050: ST_TO_ADDR
15051: GO 15017
15053: POP
15054: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 255
15064: PUSH
15065: LD_INT 3
15067: EQUAL
15068: PUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 247
15078: PUSH
15079: LD_INT 3
15081: EQUAL
15082: AND
15083: IFFALSE 15775
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15085: LD_VAR 0 1
15089: PPUSH
15090: CALL_OW 266
15094: PUSH
15095: LD_INT 31
15097: EQUAL
15098: PUSH
15099: LD_VAR 0 1
15103: PPUSH
15104: CALL_OW 266
15108: PUSH
15109: LD_INT 32
15111: EQUAL
15112: OR
15113: PUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 266
15123: PUSH
15124: LD_INT 36
15126: EQUAL
15127: OR
15128: PUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 266
15138: PUSH
15139: LD_INT 0
15141: EQUAL
15142: OR
15143: PUSH
15144: LD_VAR 0 1
15148: PPUSH
15149: CALL_OW 266
15153: PUSH
15154: LD_INT 24
15156: EQUAL
15157: OR
15158: PUSH
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 266
15168: PUSH
15169: LD_INT 17
15171: EQUAL
15172: OR
15173: PUSH
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 266
15183: PUSH
15184: LD_INT 25
15186: EQUAL
15187: OR
15188: PUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: CALL_OW 266
15198: PUSH
15199: LD_INT 19
15201: EQUAL
15202: OR
15203: PUSH
15204: LD_VAR 0 1
15208: PPUSH
15209: CALL_OW 266
15213: PUSH
15214: LD_INT 20
15216: EQUAL
15217: OR
15218: PUSH
15219: LD_VAR 0 1
15223: PPUSH
15224: CALL_OW 266
15228: PUSH
15229: LD_INT 18
15231: EQUAL
15232: OR
15233: PUSH
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 266
15243: PUSH
15244: LD_INT 21
15246: EQUAL
15247: OR
15248: PUSH
15249: LD_VAR 0 1
15253: PPUSH
15254: CALL_OW 266
15258: PUSH
15259: LD_INT 23
15261: EQUAL
15262: OR
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 266
15273: PUSH
15274: LD_INT 16
15276: EQUAL
15277: OR
15278: PUSH
15279: LD_VAR 0 1
15283: PPUSH
15284: CALL_OW 266
15288: PUSH
15289: LD_INT 6
15291: EQUAL
15292: OR
15293: PUSH
15294: LD_VAR 0 1
15298: PPUSH
15299: CALL_OW 266
15303: PUSH
15304: LD_INT 29
15306: EQUAL
15307: OR
15308: PUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 266
15318: PUSH
15319: LD_INT 26
15321: EQUAL
15322: OR
15323: PUSH
15324: LD_VAR 0 1
15328: PPUSH
15329: CALL_OW 266
15333: PUSH
15334: LD_INT 30
15336: EQUAL
15337: OR
15338: PUSH
15339: LD_VAR 0 1
15343: PPUSH
15344: CALL_OW 266
15348: PUSH
15349: LD_INT 28
15351: EQUAL
15352: OR
15353: PUSH
15354: LD_VAR 0 1
15358: PPUSH
15359: CALL_OW 266
15363: PUSH
15364: LD_INT 27
15366: EQUAL
15367: OR
15368: PUSH
15369: LD_VAR 0 1
15373: PPUSH
15374: CALL_OW 266
15378: PUSH
15379: LD_INT 33
15381: EQUAL
15382: OR
15383: PUSH
15384: LD_VAR 0 1
15388: PPUSH
15389: CALL_OW 266
15393: PUSH
15394: LD_INT 2
15396: EQUAL
15397: OR
15398: PUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 266
15408: PUSH
15409: LD_INT 4
15411: EQUAL
15412: OR
15413: IFFALSE 15499
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
15415: LD_ADDR_EXP 86
15419: PUSH
15420: LD_EXP 86
15424: PUSH
15425: LD_VAR 0 1
15429: PPUSH
15430: CALL_OW 266
15434: ADD
15435: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15436: LD_ADDR_EXP 86
15440: PUSH
15441: LD_EXP 86
15445: PUSH
15446: LD_VAR 0 1
15450: PPUSH
15451: CALL_OW 250
15455: ADD
15456: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15457: LD_ADDR_EXP 86
15461: PUSH
15462: LD_EXP 86
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: CALL_OW 251
15476: ADD
15477: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15478: LD_ADDR_EXP 86
15482: PUSH
15483: LD_EXP 86
15487: PUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 254
15497: ADD
15498: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15499: LD_VAR 0 1
15503: PPUSH
15504: CALL_OW 266
15508: PUSH
15509: LD_INT 1
15511: EQUAL
15512: IFFALSE 15591
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
15514: LD_ADDR_EXP 86
15518: PUSH
15519: LD_EXP 86
15523: PUSH
15524: LD_INT 0
15526: ADD
15527: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15528: LD_ADDR_EXP 86
15532: PUSH
15533: LD_EXP 86
15537: PUSH
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL_OW 250
15547: ADD
15548: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15549: LD_ADDR_EXP 86
15553: PUSH
15554: LD_EXP 86
15558: PUSH
15559: LD_VAR 0 1
15563: PPUSH
15564: CALL_OW 251
15568: ADD
15569: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15570: LD_ADDR_EXP 86
15574: PUSH
15575: LD_EXP 86
15579: PUSH
15580: LD_VAR 0 1
15584: PPUSH
15585: CALL_OW 254
15589: ADD
15590: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL_OW 266
15600: PUSH
15601: LD_INT 3
15603: EQUAL
15604: IFFALSE 15683
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
15606: LD_ADDR_EXP 86
15610: PUSH
15611: LD_EXP 86
15615: PUSH
15616: LD_INT 2
15618: ADD
15619: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15620: LD_ADDR_EXP 86
15624: PUSH
15625: LD_EXP 86
15629: PUSH
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 250
15639: ADD
15640: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15641: LD_ADDR_EXP 86
15645: PUSH
15646: LD_EXP 86
15650: PUSH
15651: LD_VAR 0 1
15655: PPUSH
15656: CALL_OW 251
15660: ADD
15661: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15662: LD_ADDR_EXP 86
15666: PUSH
15667: LD_EXP 86
15671: PUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: CALL_OW 254
15681: ADD
15682: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL_OW 266
15692: PUSH
15693: LD_INT 5
15695: EQUAL
15696: IFFALSE 15775
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
15698: LD_ADDR_EXP 86
15702: PUSH
15703: LD_EXP 86
15707: PUSH
15708: LD_INT 4
15710: ADD
15711: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
15712: LD_ADDR_EXP 86
15716: PUSH
15717: LD_EXP 86
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 250
15731: ADD
15732: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
15733: LD_ADDR_EXP 86
15737: PUSH
15738: LD_EXP 86
15742: PUSH
15743: LD_VAR 0 1
15747: PPUSH
15748: CALL_OW 251
15752: ADD
15753: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
15754: LD_ADDR_EXP 86
15758: PUSH
15759: LD_EXP 86
15763: PUSH
15764: LD_VAR 0 1
15768: PPUSH
15769: CALL_OW 254
15773: ADD
15774: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 255
15784: PUSH
15785: LD_INT 8
15787: EQUAL
15788: PUSH
15789: LD_VAR 0 1
15793: PPUSH
15794: CALL_OW 247
15798: PUSH
15799: LD_INT 3
15801: EQUAL
15802: AND
15803: PUSH
15804: LD_VAR 0 1
15808: PPUSH
15809: CALL_OW 248
15813: PUSH
15814: LD_INT 2
15816: EQUAL
15817: AND
15818: IFFALSE 16510
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 266
15829: PUSH
15830: LD_INT 31
15832: EQUAL
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 266
15843: PUSH
15844: LD_INT 32
15846: EQUAL
15847: OR
15848: PUSH
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 266
15858: PUSH
15859: LD_INT 36
15861: EQUAL
15862: OR
15863: PUSH
15864: LD_VAR 0 1
15868: PPUSH
15869: CALL_OW 266
15873: PUSH
15874: LD_INT 0
15876: EQUAL
15877: OR
15878: PUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 266
15888: PUSH
15889: LD_INT 24
15891: EQUAL
15892: OR
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 266
15903: PUSH
15904: LD_INT 17
15906: EQUAL
15907: OR
15908: PUSH
15909: LD_VAR 0 1
15913: PPUSH
15914: CALL_OW 266
15918: PUSH
15919: LD_INT 25
15921: EQUAL
15922: OR
15923: PUSH
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL_OW 266
15933: PUSH
15934: LD_INT 19
15936: EQUAL
15937: OR
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 266
15948: PUSH
15949: LD_INT 20
15951: EQUAL
15952: OR
15953: PUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 266
15963: PUSH
15964: LD_INT 18
15966: EQUAL
15967: OR
15968: PUSH
15969: LD_VAR 0 1
15973: PPUSH
15974: CALL_OW 266
15978: PUSH
15979: LD_INT 21
15981: EQUAL
15982: OR
15983: PUSH
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 266
15993: PUSH
15994: LD_INT 23
15996: EQUAL
15997: OR
15998: PUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 266
16008: PUSH
16009: LD_INT 16
16011: EQUAL
16012: OR
16013: PUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 266
16023: PUSH
16024: LD_INT 6
16026: EQUAL
16027: OR
16028: PUSH
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 266
16038: PUSH
16039: LD_INT 29
16041: EQUAL
16042: OR
16043: PUSH
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 266
16053: PUSH
16054: LD_INT 26
16056: EQUAL
16057: OR
16058: PUSH
16059: LD_VAR 0 1
16063: PPUSH
16064: CALL_OW 266
16068: PUSH
16069: LD_INT 30
16071: EQUAL
16072: OR
16073: PUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 266
16083: PUSH
16084: LD_INT 28
16086: EQUAL
16087: OR
16088: PUSH
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL_OW 266
16098: PUSH
16099: LD_INT 27
16101: EQUAL
16102: OR
16103: PUSH
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 266
16113: PUSH
16114: LD_INT 33
16116: EQUAL
16117: OR
16118: PUSH
16119: LD_VAR 0 1
16123: PPUSH
16124: CALL_OW 266
16128: PUSH
16129: LD_INT 2
16131: EQUAL
16132: OR
16133: PUSH
16134: LD_VAR 0 1
16138: PPUSH
16139: CALL_OW 266
16143: PUSH
16144: LD_INT 4
16146: EQUAL
16147: OR
16148: IFFALSE 16234
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
16150: LD_ADDR_EXP 85
16154: PUSH
16155: LD_EXP 85
16159: PUSH
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 266
16169: ADD
16170: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16171: LD_ADDR_EXP 85
16175: PUSH
16176: LD_EXP 85
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 250
16190: ADD
16191: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16192: LD_ADDR_EXP 85
16196: PUSH
16197: LD_EXP 85
16201: PUSH
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL_OW 251
16211: ADD
16212: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16213: LD_ADDR_EXP 85
16217: PUSH
16218: LD_EXP 85
16222: PUSH
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL_OW 254
16232: ADD
16233: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16234: LD_VAR 0 1
16238: PPUSH
16239: CALL_OW 266
16243: PUSH
16244: LD_INT 1
16246: EQUAL
16247: IFFALSE 16326
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
16249: LD_ADDR_EXP 85
16253: PUSH
16254: LD_EXP 85
16258: PUSH
16259: LD_INT 0
16261: ADD
16262: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16263: LD_ADDR_EXP 85
16267: PUSH
16268: LD_EXP 85
16272: PUSH
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 250
16282: ADD
16283: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16284: LD_ADDR_EXP 85
16288: PUSH
16289: LD_EXP 85
16293: PUSH
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL_OW 251
16303: ADD
16304: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16305: LD_ADDR_EXP 85
16309: PUSH
16310: LD_EXP 85
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 254
16324: ADD
16325: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 266
16335: PUSH
16336: LD_INT 3
16338: EQUAL
16339: IFFALSE 16418
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
16341: LD_ADDR_EXP 85
16345: PUSH
16346: LD_EXP 85
16350: PUSH
16351: LD_INT 2
16353: ADD
16354: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16355: LD_ADDR_EXP 85
16359: PUSH
16360: LD_EXP 85
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: CALL_OW 250
16374: ADD
16375: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16376: LD_ADDR_EXP 85
16380: PUSH
16381: LD_EXP 85
16385: PUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 251
16395: ADD
16396: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16397: LD_ADDR_EXP 85
16401: PUSH
16402: LD_EXP 85
16406: PUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 254
16416: ADD
16417: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 266
16427: PUSH
16428: LD_INT 5
16430: EQUAL
16431: IFFALSE 16510
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
16433: LD_ADDR_EXP 85
16437: PUSH
16438: LD_EXP 85
16442: PUSH
16443: LD_INT 4
16445: ADD
16446: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
16447: LD_ADDR_EXP 85
16451: PUSH
16452: LD_EXP 85
16456: PUSH
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 250
16466: ADD
16467: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
16468: LD_ADDR_EXP 85
16472: PUSH
16473: LD_EXP 85
16477: PUSH
16478: LD_VAR 0 1
16482: PPUSH
16483: CALL_OW 251
16487: ADD
16488: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
16489: LD_ADDR_EXP 85
16493: PUSH
16494: LD_EXP 85
16498: PUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 254
16508: ADD
16509: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 255
16519: PUSH
16520: LD_INT 7
16522: EQUAL
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 247
16533: PUSH
16534: LD_INT 3
16536: EQUAL
16537: AND
16538: IFFALSE 17230
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16540: LD_VAR 0 1
16544: PPUSH
16545: CALL_OW 266
16549: PUSH
16550: LD_INT 31
16552: EQUAL
16553: PUSH
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 266
16563: PUSH
16564: LD_INT 32
16566: EQUAL
16567: OR
16568: PUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 266
16578: PUSH
16579: LD_INT 36
16581: EQUAL
16582: OR
16583: PUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 266
16593: PUSH
16594: LD_INT 0
16596: EQUAL
16597: OR
16598: PUSH
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 266
16608: PUSH
16609: LD_INT 24
16611: EQUAL
16612: OR
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: PUSH
16624: LD_INT 17
16626: EQUAL
16627: OR
16628: PUSH
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 266
16638: PUSH
16639: LD_INT 25
16641: EQUAL
16642: OR
16643: PUSH
16644: LD_VAR 0 1
16648: PPUSH
16649: CALL_OW 266
16653: PUSH
16654: LD_INT 19
16656: EQUAL
16657: OR
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 266
16668: PUSH
16669: LD_INT 20
16671: EQUAL
16672: OR
16673: PUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 266
16683: PUSH
16684: LD_INT 18
16686: EQUAL
16687: OR
16688: PUSH
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 266
16698: PUSH
16699: LD_INT 21
16701: EQUAL
16702: OR
16703: PUSH
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 266
16713: PUSH
16714: LD_INT 23
16716: EQUAL
16717: OR
16718: PUSH
16719: LD_VAR 0 1
16723: PPUSH
16724: CALL_OW 266
16728: PUSH
16729: LD_INT 16
16731: EQUAL
16732: OR
16733: PUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 266
16743: PUSH
16744: LD_INT 6
16746: EQUAL
16747: OR
16748: PUSH
16749: LD_VAR 0 1
16753: PPUSH
16754: CALL_OW 266
16758: PUSH
16759: LD_INT 29
16761: EQUAL
16762: OR
16763: PUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 266
16773: PUSH
16774: LD_INT 26
16776: EQUAL
16777: OR
16778: PUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 266
16788: PUSH
16789: LD_INT 30
16791: EQUAL
16792: OR
16793: PUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 266
16803: PUSH
16804: LD_INT 28
16806: EQUAL
16807: OR
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 266
16818: PUSH
16819: LD_INT 27
16821: EQUAL
16822: OR
16823: PUSH
16824: LD_VAR 0 1
16828: PPUSH
16829: CALL_OW 266
16833: PUSH
16834: LD_INT 33
16836: EQUAL
16837: OR
16838: PUSH
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 266
16848: PUSH
16849: LD_INT 2
16851: EQUAL
16852: OR
16853: PUSH
16854: LD_VAR 0 1
16858: PPUSH
16859: CALL_OW 266
16863: PUSH
16864: LD_INT 4
16866: EQUAL
16867: OR
16868: IFFALSE 16954
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
16870: LD_ADDR_EXP 87
16874: PUSH
16875: LD_EXP 87
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: CALL_OW 266
16889: ADD
16890: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16891: LD_ADDR_EXP 87
16895: PUSH
16896: LD_EXP 87
16900: PUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 250
16910: ADD
16911: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
16912: LD_ADDR_EXP 87
16916: PUSH
16917: LD_EXP 87
16921: PUSH
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 251
16931: ADD
16932: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
16933: LD_ADDR_EXP 87
16937: PUSH
16938: LD_EXP 87
16942: PUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 254
16952: ADD
16953: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16954: LD_VAR 0 1
16958: PPUSH
16959: CALL_OW 266
16963: PUSH
16964: LD_INT 1
16966: EQUAL
16967: IFFALSE 17046
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
16969: LD_ADDR_EXP 87
16973: PUSH
16974: LD_EXP 87
16978: PUSH
16979: LD_INT 0
16981: ADD
16982: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
16983: LD_ADDR_EXP 87
16987: PUSH
16988: LD_EXP 87
16992: PUSH
16993: LD_VAR 0 1
16997: PPUSH
16998: CALL_OW 250
17002: ADD
17003: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17004: LD_ADDR_EXP 87
17008: PUSH
17009: LD_EXP 87
17013: PUSH
17014: LD_VAR 0 1
17018: PPUSH
17019: CALL_OW 251
17023: ADD
17024: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17025: LD_ADDR_EXP 87
17029: PUSH
17030: LD_EXP 87
17034: PUSH
17035: LD_VAR 0 1
17039: PPUSH
17040: CALL_OW 254
17044: ADD
17045: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 266
17055: PUSH
17056: LD_INT 3
17058: EQUAL
17059: IFFALSE 17138
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
17061: LD_ADDR_EXP 87
17065: PUSH
17066: LD_EXP 87
17070: PUSH
17071: LD_INT 2
17073: ADD
17074: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17075: LD_ADDR_EXP 87
17079: PUSH
17080: LD_EXP 87
17084: PUSH
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 250
17094: ADD
17095: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17096: LD_ADDR_EXP 87
17100: PUSH
17101: LD_EXP 87
17105: PUSH
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 251
17115: ADD
17116: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17117: LD_ADDR_EXP 87
17121: PUSH
17122: LD_EXP 87
17126: PUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: CALL_OW 254
17136: ADD
17137: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17138: LD_VAR 0 1
17142: PPUSH
17143: CALL_OW 266
17147: PUSH
17148: LD_INT 5
17150: EQUAL
17151: IFFALSE 17230
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
17153: LD_ADDR_EXP 87
17157: PUSH
17158: LD_EXP 87
17162: PUSH
17163: LD_INT 4
17165: ADD
17166: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17167: LD_ADDR_EXP 87
17171: PUSH
17172: LD_EXP 87
17176: PUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 250
17186: ADD
17187: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17188: LD_ADDR_EXP 87
17192: PUSH
17193: LD_EXP 87
17197: PUSH
17198: LD_VAR 0 1
17202: PPUSH
17203: CALL_OW 251
17207: ADD
17208: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17209: LD_ADDR_EXP 87
17213: PUSH
17214: LD_EXP 87
17218: PUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 254
17228: ADD
17229: ST_TO_ADDR
// end ; end ; end ;
17230: PPOPN 2
17232: END
// on UnitKamikazed ( unit ) do var i ;
17233: LD_INT 0
17235: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 255
17245: PUSH
17246: LD_INT 8
17248: EQUAL
17249: PUSH
17250: LD_VAR 0 1
17254: PPUSH
17255: CALL_OW 247
17259: PUSH
17260: LD_INT 2
17262: EQUAL
17263: AND
17264: PUSH
17265: LD_VAR 0 1
17269: PPUSH
17270: CALL_OW 248
17274: PUSH
17275: LD_INT 2
17277: EQUAL
17278: AND
17279: IFFALSE 17329
// begin for i in legionVehicles do
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_EXP 49
17290: PUSH
17291: FOR_IN
17292: IFFALSE 17327
// if i = unit then
17294: LD_VAR 0 2
17298: PUSH
17299: LD_VAR 0 1
17303: EQUAL
17304: IFFALSE 17325
// legionVehicles = legionVehicles diff [ unit ] ;
17306: LD_ADDR_EXP 49
17310: PUSH
17311: LD_EXP 49
17315: PUSH
17316: LD_VAR 0 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: DIFF
17324: ST_TO_ADDR
17325: GO 17291
17327: POP
17328: POP
// end ; end ;
17329: PPOPN 2
17331: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
17332: LD_VAR 0 2
17336: PPUSH
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 29
17344: PPUSH
17345: CALL_OW 309
17349: IFFALSE 17409
// begin if GetSide ( unit ) = 1 then
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 255
17360: PUSH
17361: LD_INT 1
17363: EQUAL
17364: IFFALSE 17380
// begin wait ( 0 0$6 ) ;
17366: LD_INT 210
17368: PPUSH
17369: CALL_OW 67
// YouLost ( Motherlode2 ) ;
17373: LD_STRING Motherlode2
17375: PPUSH
17376: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
17380: LD_VAR 0 1
17384: PPUSH
17385: CALL_OW 255
17389: PUSH
17390: LD_INT 8
17392: EQUAL
17393: IFFALSE 17409
// begin wait ( 0 0$6 ) ;
17395: LD_INT 210
17397: PPUSH
17398: CALL_OW 67
// YouLost ( Motherlode1 ) ;
17402: LD_STRING Motherlode1
17404: PPUSH
17405: CALL_OW 104
// end ; end ; end ;
17409: PPOPN 3
17411: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 255
17421: PUSH
17422: LD_INT 2
17424: EQUAL
17425: IFFALSE 17434
// YouLost ( Motherlode3 ) ;
17427: LD_STRING Motherlode3
17429: PPUSH
17430: CALL_OW 104
// end ; end_of_file
17434: PPOPN 3
17436: END
// every 3 3$0 do
17437: GO 17439
17439: DISABLE
// begin enable ;
17440: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17441: LD_ADDR_EXP 80
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: LD_INT 3
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 1
17458: PPUSH
17459: LD_INT 2
17461: PPUSH
17462: CALL_OW 12
17466: ARRAY
17467: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17468: LD_INT 22
17470: PUSH
17471: LD_INT 8
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 21
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PPUSH
17492: CALL_OW 69
17496: PUSH
17497: LD_INT 1
17499: GREATER
17500: IFFALSE 17531
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
17502: LD_ADDR_EXP 82
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: LD_INT 8
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 1
17519: PPUSH
17520: LD_INT 2
17522: PPUSH
17523: CALL_OW 12
17527: ARRAY
17528: ST_TO_ADDR
17529: GO 17539
// RussianTarget = 1 ;
17531: LD_ADDR_EXP 82
17535: PUSH
17536: LD_INT 1
17538: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
17539: LD_INT 22
17541: PUSH
17542: LD_INT 8
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 21
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PPUSH
17563: CALL_OW 69
17567: PUSH
17568: LD_INT 1
17570: GREATER
17571: IFFALSE 17606
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
17573: LD_ADDR_EXP 81
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 3
17583: PUSH
17584: LD_INT 8
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 3
17597: PPUSH
17598: CALL_OW 12
17602: ARRAY
17603: ST_TO_ADDR
17604: GO 17633
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17606: LD_ADDR_EXP 81
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: LD_INT 3
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 1
17623: PPUSH
17624: LD_INT 2
17626: PPUSH
17627: CALL_OW 12
17631: ARRAY
17632: ST_TO_ADDR
// end ;
17633: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
17634: LD_EXP 61
17638: PUSH
17639: LD_INT 1
17641: EQUAL
17642: IFFALSE 18219
17644: GO 17646
17646: DISABLE
17647: LD_INT 0
17649: PPUSH
17650: PPUSH
// begin for i = 1 to 4 do
17651: LD_ADDR_VAR 0 1
17655: PUSH
17656: DOUBLE
17657: LD_INT 1
17659: DEC
17660: ST_TO_ADDR
17661: LD_INT 4
17663: PUSH
17664: FOR_TO
17665: IFFALSE 17705
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
17667: LD_EXP 59
17671: PUSH
17672: LD_VAR 0 1
17676: ARRAY
17677: PPUSH
17678: LD_INT 85
17680: PPUSH
17681: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
17685: LD_EXP 59
17689: PUSH
17690: LD_VAR 0 1
17694: ARRAY
17695: PPUSH
17696: LD_INT 3
17698: PPUSH
17699: CALL_OW 183
// end ;
17703: GO 17664
17705: POP
17706: POP
// wait ( 0 0$1 ) ;
17707: LD_INT 35
17709: PPUSH
17710: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 22
17721: PUSH
17722: LD_INT 4
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 21
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 56
17741: PUSH
17742: EMPTY
17743: LIST
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: LD_INT 60
17750: PUSH
17751: EMPTY
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 69
17768: PUSH
17769: LD_EXP 17
17773: PUSH
17774: EMPTY
17775: LIST
17776: DIFF
17777: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
17778: LD_VAR 0 2
17782: PUSH
17783: LD_INT 1
17785: ARRAY
17786: PPUSH
17787: LD_INT 235
17789: PPUSH
17790: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
17794: LD_VAR 0 2
17798: PUSH
17799: LD_INT 2
17801: ARRAY
17802: PPUSH
17803: LD_INT 2
17805: PPUSH
17806: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
17810: LD_VAR 0 2
17814: PUSH
17815: LD_INT 3
17817: ARRAY
17818: PPUSH
17819: LD_INT 2
17821: PPUSH
17822: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
17826: LD_INT 30
17828: PPUSH
17829: LD_INT 49
17831: PPUSH
17832: LD_INT 4
17834: PPUSH
17835: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
17839: LD_INT 91
17841: PPUSH
17842: LD_INT 10
17844: PPUSH
17845: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
17849: LD_INT 91
17851: PPUSH
17852: LD_INT 11
17854: PPUSH
17855: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
17859: LD_INT 22
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 25
17871: PUSH
17872: LD_INT 2
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PPUSH
17883: CALL_OW 69
17887: PPUSH
17888: LD_INT 30
17890: PPUSH
17891: LD_INT 30
17893: PPUSH
17894: LD_INT 49
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
17904: LD_INT 22
17906: PUSH
17907: LD_INT 4
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 25
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 69
17932: PPUSH
17933: LD_INT 32
17935: PPUSH
17936: LD_INT 55
17938: PPUSH
17939: LD_INT 56
17941: PPUSH
17942: LD_INT 4
17944: PPUSH
17945: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
17949: LD_INT 22
17951: PUSH
17952: LD_INT 4
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 25
17961: PUSH
17962: LD_INT 2
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PPUSH
17973: CALL_OW 69
17977: PPUSH
17978: LD_INT 32
17980: PPUSH
17981: LD_INT 63
17983: PPUSH
17984: LD_INT 71
17986: PPUSH
17987: LD_INT 4
17989: PPUSH
17990: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
17994: LD_INT 22
17996: PUSH
17997: LD_INT 4
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 25
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: PPUSH
18023: LD_INT 28
18025: PPUSH
18026: LD_INT 40
18028: PPUSH
18029: LD_INT 72
18031: PPUSH
18032: LD_INT 4
18034: PPUSH
18035: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
18039: LD_INT 22
18041: PUSH
18042: LD_INT 4
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 25
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: PPUSH
18068: LD_INT 27
18070: PPUSH
18071: LD_INT 45
18073: PPUSH
18074: LD_INT 73
18076: PPUSH
18077: LD_INT 4
18079: PPUSH
18080: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
18084: LD_INT 22
18086: PUSH
18087: LD_INT 4
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 25
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 69
18112: PPUSH
18113: LD_INT 18
18115: PPUSH
18116: LD_INT 37
18118: PPUSH
18119: LD_INT 50
18121: PPUSH
18122: LD_INT 2
18124: PPUSH
18125: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
18129: LD_INT 22
18131: PUSH
18132: LD_INT 4
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 25
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PPUSH
18153: CALL_OW 69
18157: PPUSH
18158: LD_INT 17
18160: PPUSH
18161: LD_INT 41
18163: PPUSH
18164: LD_INT 51
18166: PPUSH
18167: LD_INT 3
18169: PPUSH
18170: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
18174: LD_INT 22
18176: PUSH
18177: LD_INT 4
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 25
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 69
18202: PPUSH
18203: LD_INT 21
18205: PPUSH
18206: LD_INT 38
18208: PPUSH
18209: LD_INT 54
18211: PPUSH
18212: LD_INT 1
18214: PPUSH
18215: CALL_OW 205
// end ;
18219: PPOPN 2
18221: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 do
18222: LD_INT 22
18224: PUSH
18225: LD_INT 4
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 30
18234: PUSH
18235: LD_INT 8
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PPUSH
18246: CALL_OW 69
18250: PUSH
18251: LD_INT 1
18253: EQUAL
18254: IFFALSE 18404
18256: GO 18258
18258: DISABLE
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18259: LD_INT 85
18261: PPUSH
18262: LD_INT 3
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_INT 3
18273: PUSH
18274: LD_INT 5
18276: PUSH
18277: LD_INT 7
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: PPUSH
18288: LD_INT 3
18290: PPUSH
18291: CALL_OW 12
18295: ARRAY
18296: PPUSH
18297: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18301: LD_INT 85
18303: PPUSH
18304: LD_INT 3
18306: PPUSH
18307: LD_INT 3
18309: PPUSH
18310: LD_INT 1
18312: PPUSH
18313: LD_INT 3
18315: PUSH
18316: LD_INT 5
18318: PUSH
18319: LD_INT 7
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PPUSH
18330: LD_INT 3
18332: PPUSH
18333: CALL_OW 12
18337: ARRAY
18338: PPUSH
18339: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
18343: LD_INT 85
18345: PPUSH
18346: LD_INT 3
18348: PPUSH
18349: LD_INT 3
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: LD_INT 3
18357: PUSH
18358: LD_INT 5
18360: PUSH
18361: LD_INT 7
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: PPUSH
18372: LD_INT 3
18374: PPUSH
18375: CALL_OW 12
18379: ARRAY
18380: PPUSH
18381: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
18385: LD_INT 85
18387: PPUSH
18388: LD_INT 5
18390: PPUSH
18391: LD_INT 3
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: LD_INT 6
18399: PPUSH
18400: CALL_OW 185
// end ;
18404: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
18405: LD_INT 235
18407: PPUSH
18408: LD_INT 10
18410: PPUSH
18411: CALL_OW 308
18415: PUSH
18416: LD_EXP 63
18420: PUSH
18421: LD_INT 1
18423: EQUAL
18424: AND
18425: IFFALSE 18449
18427: GO 18429
18429: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
18430: LD_INT 235
18432: PPUSH
18433: CALL_OW 313
18437: PPUSH
18438: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
18442: LD_INT 84
18444: PPUSH
18445: CALL_OW 146
// end ;
18449: END
// every 0 0$1 trigger legionAI = 1 do
18450: LD_EXP 77
18454: PUSH
18455: LD_INT 1
18457: EQUAL
18458: IFFALSE 18521
18460: GO 18462
18462: DISABLE
// begin enable ;
18463: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
18464: LD_INT 8
18466: PPUSH
18467: LD_INT 99
18469: PPUSH
18470: LD_INT 11
18472: PPUSH
18473: LD_EXP 85
18477: PPUSH
18478: CALL 9364 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
18482: LD_INT 8
18484: PPUSH
18485: LD_INT 20
18487: PPUSH
18488: LD_INT 11
18490: PPUSH
18491: LD_INT 252
18493: PUSH
18494: EMPTY
18495: LIST
18496: PPUSH
18497: CALL 9773 0 4
// AttackNearBuildings ( 8 , 1 ) ;
18501: LD_INT 8
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL 10927 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
18511: LD_INT 8
18513: PPUSH
18514: LD_INT 11
18516: PPUSH
18517: CALL 10499 0 2
// end ;
18521: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
18522: LD_EXP 77
18526: PUSH
18527: LD_INT 1
18529: EQUAL
18530: PUSH
18531: LD_EXP 92
18535: PUSH
18536: LD_INT 1
18538: GREATEREQUAL
18539: AND
18540: PUSH
18541: LD_EXP 49
18545: PUSH
18546: EMPTY
18547: EQUAL
18548: AND
18549: PUSH
18550: LD_INT 117
18552: PPUSH
18553: CALL_OW 302
18557: AND
18558: PUSH
18559: LD_INT 117
18561: PPUSH
18562: CALL_OW 255
18566: PUSH
18567: LD_INT 8
18569: EQUAL
18570: AND
18571: IFFALSE 18634
18573: GO 18575
18575: DISABLE
// begin enable ;
18576: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
18577: LD_INT 8
18579: PPUSH
18580: LD_INT 117
18582: PPUSH
18583: LD_INT 5
18585: PUSH
18586: LD_INT 6
18588: PUSH
18589: LD_INT 7
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: LIST
18596: PUSH
18597: LD_OWVAR 67
18601: ARRAY
18602: PPUSH
18603: LD_INT 27
18605: PUSH
18606: LD_INT 28
18608: PUSH
18609: LD_INT 25
18611: PUSH
18612: LD_INT 29
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: PPUSH
18621: LD_INT 3
18623: PPUSH
18624: LD_INT 2
18626: PPUSH
18627: LD_INT 14
18629: PPUSH
18630: CALL 11157 0 7
// end ;
18634: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
18635: LD_EXP 77
18639: PUSH
18640: LD_INT 1
18642: EQUAL
18643: PUSH
18644: LD_EXP 92
18648: PUSH
18649: LD_INT 1
18651: GREATEREQUAL
18652: AND
18653: PUSH
18654: LD_EXP 49
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: LD_INT 6
18664: PUSH
18665: LD_INT 7
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: PUSH
18673: LD_OWVAR 67
18677: ARRAY
18678: EQUAL
18679: AND
18680: IFFALSE 18698
18682: GO 18684
18684: DISABLE
// begin enable ;
18685: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
18686: LD_EXP 80
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL 11231 0 2
// end ;
18698: END
// every 0 0$1 do
18699: GO 18701
18701: DISABLE
// begin enable ;
18702: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
18703: LD_INT 6
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL 12163 0 2
// end ;
18713: END
// every 0 0$1 trigger RussianAI = 1 do
18714: LD_EXP 79
18718: PUSH
18719: LD_INT 1
18721: EQUAL
18722: IFFALSE 18801
18724: GO 18726
18726: DISABLE
// begin enable ;
18727: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
18728: LD_INT 3
18730: PPUSH
18731: LD_INT 26
18733: PPUSH
18734: LD_INT 21
18736: PPUSH
18737: LD_EXP 86
18741: PPUSH
18742: CALL 9364 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
18746: LD_INT 3
18748: PPUSH
18749: LD_INT 22
18751: PPUSH
18752: LD_INT 21
18754: PPUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PPUSH
18765: CALL 9773 0 4
// AttackNearBuildings ( 3 , 1 ) ;
18769: LD_INT 3
18771: PPUSH
18772: LD_INT 1
18774: PPUSH
18775: CALL 10927 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
18779: LD_INT 3
18781: PPUSH
18782: LD_EXP 82
18786: PPUSH
18787: CALL 12163 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
18791: LD_INT 3
18793: PPUSH
18794: LD_INT 21
18796: PPUSH
18797: CALL 10499 0 2
// end ;
18801: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
18802: LD_EXP 79
18806: PUSH
18807: LD_INT 1
18809: EQUAL
18810: PUSH
18811: LD_EXP 92
18815: PUSH
18816: LD_INT 3
18818: GREATEREQUAL
18819: AND
18820: PUSH
18821: LD_EXP 55
18825: PUSH
18826: EMPTY
18827: EQUAL
18828: AND
18829: PUSH
18830: LD_INT 10
18832: PPUSH
18833: CALL_OW 302
18837: AND
18838: PUSH
18839: LD_INT 10
18841: PPUSH
18842: CALL_OW 255
18846: PUSH
18847: LD_INT 3
18849: EQUAL
18850: AND
18851: PUSH
18852: LD_INT 4
18854: PPUSH
18855: CALL_OW 302
18859: AND
18860: PUSH
18861: LD_INT 4
18863: PPUSH
18864: CALL_OW 255
18868: PUSH
18869: LD_INT 3
18871: EQUAL
18872: AND
18873: IFFALSE 18993
18875: GO 18877
18877: DISABLE
// begin enable ;
18878: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
18879: LD_INT 3
18881: PPUSH
18882: LD_INT 4
18884: PPUSH
18885: LD_INT 4
18887: PUSH
18888: LD_INT 5
18890: PUSH
18891: LD_INT 6
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: PUSH
18899: LD_OWVAR 67
18903: ARRAY
18904: PPUSH
18905: LD_INT 45
18907: PUSH
18908: LD_INT 46
18910: PUSH
18911: LD_INT 47
18913: PUSH
18914: LD_INT 49
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: PPUSH
18923: LD_INT 3
18925: PPUSH
18926: LD_INT 3
18928: PPUSH
18929: LD_INT 24
18931: PPUSH
18932: CALL 11157 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
18936: LD_INT 3
18938: PPUSH
18939: LD_INT 10
18941: PPUSH
18942: LD_INT 4
18944: PUSH
18945: LD_INT 5
18947: PUSH
18948: LD_INT 6
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: LD_OWVAR 67
18960: ARRAY
18961: PPUSH
18962: LD_INT 45
18964: PUSH
18965: LD_INT 46
18967: PUSH
18968: LD_INT 47
18970: PUSH
18971: LD_INT 49
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: PPUSH
18980: LD_INT 3
18982: PPUSH
18983: LD_INT 3
18985: PPUSH
18986: LD_INT 24
18988: PPUSH
18989: CALL 11157 0 7
// end ;
18993: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
18994: LD_EXP 79
18998: PUSH
18999: LD_INT 1
19001: EQUAL
19002: PUSH
19003: LD_EXP 92
19007: PUSH
19008: LD_INT 3
19010: GREATEREQUAL
19011: AND
19012: PUSH
19013: LD_EXP 55
19017: PUSH
19018: LD_INT 8
19020: PUSH
19021: LD_INT 10
19023: PUSH
19024: LD_INT 12
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: PUSH
19032: LD_OWVAR 67
19036: ARRAY
19037: EQUAL
19038: AND
19039: IFFALSE 19151
19041: GO 19043
19043: DISABLE
// begin enable ;
19044: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19045: LD_INT 22
19047: PUSH
19048: LD_INT 3
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 21
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 3
19067: PUSH
19068: LD_INT 34
19070: PUSH
19071: LD_INT 48
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 3
19084: PUSH
19085: LD_INT 60
19087: PUSH
19088: EMPTY
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: PPUSH
19106: LD_INT 24
19108: PUSH
19109: LD_INT 25
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PPUSH
19119: LD_INT 2
19121: PPUSH
19122: CALL_OW 12
19126: ARRAY
19127: PPUSH
19128: CALL_OW 120
// wait ( 0 0$20 ) ;
19132: LD_INT 700
19134: PPUSH
19135: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19139: LD_EXP 82
19143: PPUSH
19144: LD_INT 2
19146: PPUSH
19147: CALL 11231 0 2
// end ;
19151: END
// every 0 0$1 trigger AllianceAI = 1 do
19152: LD_EXP 78
19156: PUSH
19157: LD_INT 1
19159: EQUAL
19160: IFFALSE 19243
19162: GO 19164
19164: DISABLE
// begin enable ;
19165: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19166: LD_INT 7
19168: PPUSH
19169: LD_INT 45
19171: PPUSH
19172: LD_INT 23
19174: PPUSH
19175: LD_EXP 87
19179: PPUSH
19180: CALL 9364 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
19184: LD_INT 7
19186: PPUSH
19187: LD_INT 24
19189: PPUSH
19190: LD_INT 23
19192: PPUSH
19193: LD_INT 46
19195: PUSH
19196: LD_INT 39
19198: PUSH
19199: LD_INT 133
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL 9773 0 4
// AttackNearBuildings ( 7 , 1 ) ;
19211: LD_INT 7
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL 10927 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
19221: LD_INT 7
19223: PPUSH
19224: LD_EXP 81
19228: PPUSH
19229: CALL 12163 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
19233: LD_INT 7
19235: PPUSH
19236: LD_INT 23
19238: PPUSH
19239: CALL 10499 0 2
// end ;
19243: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
19244: LD_EXP 78
19248: PUSH
19249: LD_INT 1
19251: EQUAL
19252: PUSH
19253: LD_EXP 92
19257: PUSH
19258: LD_INT 4
19260: GREATEREQUAL
19261: AND
19262: PUSH
19263: LD_EXP 56
19267: PUSH
19268: EMPTY
19269: EQUAL
19270: AND
19271: PUSH
19272: LD_INT 156
19274: PPUSH
19275: CALL_OW 302
19279: AND
19280: PUSH
19281: LD_INT 156
19283: PPUSH
19284: CALL_OW 255
19288: PUSH
19289: LD_INT 7
19291: EQUAL
19292: AND
19293: PUSH
19294: LD_INT 162
19296: PPUSH
19297: CALL_OW 302
19301: AND
19302: PUSH
19303: LD_INT 162
19305: PPUSH
19306: CALL_OW 255
19310: PUSH
19311: LD_INT 7
19313: EQUAL
19314: AND
19315: IFFALSE 19431
19317: GO 19319
19319: DISABLE
// begin enable ;
19320: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
19321: LD_INT 3
19323: PPUSH
19324: LD_INT 156
19326: PPUSH
19327: LD_INT 3
19329: PUSH
19330: LD_INT 3
19332: PUSH
19333: LD_INT 4
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: PUSH
19341: LD_OWVAR 67
19345: ARRAY
19346: PPUSH
19347: LD_INT 9
19349: PUSH
19350: LD_INT 10
19352: PUSH
19353: LD_INT 7
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: LIST
19360: PPUSH
19361: LD_INT 3
19363: PPUSH
19364: LD_INT 2
19366: PPUSH
19367: LD_INT 5
19369: PPUSH
19370: CALL 11157 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19374: LD_INT 3
19376: PPUSH
19377: LD_INT 162
19379: PPUSH
19380: LD_INT 2
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: PUSH
19394: LD_OWVAR 67
19398: ARRAY
19399: PPUSH
19400: LD_INT 45
19402: PUSH
19403: LD_INT 46
19405: PUSH
19406: LD_INT 47
19408: PUSH
19409: LD_INT 49
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: PPUSH
19418: LD_INT 3
19420: PPUSH
19421: LD_INT 3
19423: PPUSH
19424: LD_INT 24
19426: PPUSH
19427: CALL 11157 0 7
// end ;
19431: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
19432: LD_EXP 78
19436: PUSH
19437: LD_INT 1
19439: EQUAL
19440: PUSH
19441: LD_EXP 92
19445: PUSH
19446: LD_INT 4
19448: GREATEREQUAL
19449: AND
19450: PUSH
19451: LD_EXP 56
19455: PUSH
19456: LD_INT 5
19458: PUSH
19459: LD_INT 5
19461: PUSH
19462: LD_INT 7
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: PUSH
19470: LD_OWVAR 67
19474: ARRAY
19475: EQUAL
19476: AND
19477: IFFALSE 19536
19479: GO 19481
19481: DISABLE
19482: LD_INT 0
19484: PPUSH
// begin for i in AllianceVehicles do
19485: LD_ADDR_VAR 0 1
19489: PUSH
19490: LD_EXP 56
19494: PUSH
19495: FOR_IN
19496: IFFALSE 19521
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
19498: LD_VAR 0 1
19502: PPUSH
19503: LD_INT 117
19505: PPUSH
19506: LD_INT 112
19508: PPUSH
19509: LD_INT 10
19511: PPUSH
19512: LD_INT 1
19514: PPUSH
19515: CALL_OW 483
19519: GO 19495
19521: POP
19522: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
19523: LD_EXP 81
19527: PPUSH
19528: LD_INT 3
19530: PPUSH
19531: CALL 11231 0 2
// enable ;
19535: ENABLE
// end ;
19536: PPOPN 1
19538: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
19539: LD_EXP 78
19543: PUSH
19544: LD_INT 1
19546: EQUAL
19547: PUSH
19548: LD_EXP 92
19552: PUSH
19553: LD_INT 4
19555: GREATEREQUAL
19556: AND
19557: IFFALSE 19738
19559: GO 19561
19561: DISABLE
19562: LD_INT 0
19564: PPUSH
// begin enable ;
19565: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
19566: LD_ADDR_VAR 0 1
19570: PUSH
19571: LD_INT 22
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 21
19583: PUSH
19584: LD_INT 3
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 30
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 30
19606: PUSH
19607: LD_INT 28
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 30
19616: PUSH
19617: LD_INT 21
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
19640: LD_ADDR_VAR 0 1
19644: PUSH
19645: LD_VAR 0 1
19649: PUSH
19650: LD_INT 22
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 21
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 32
19672: PUSH
19673: LD_INT 3
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: PPUSH
19685: CALL_OW 69
19689: ADD
19690: ST_TO_ADDR
// if tmp = [ ] then
19691: LD_VAR 0 1
19695: PUSH
19696: EMPTY
19697: EQUAL
19698: IFFALSE 19702
// exit ;
19700: GO 19738
// if tmp > 0 then
19702: LD_VAR 0 1
19706: PUSH
19707: LD_INT 0
19709: GREATER
19710: IFFALSE 19738
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
19712: LD_VAR 0 1
19716: PUSH
19717: LD_INT 1
19719: PPUSH
19720: LD_VAR 0 1
19724: PPUSH
19725: CALL_OW 12
19729: ARRAY
19730: PPUSH
19731: LD_INT 0
19733: PPUSH
19734: CALL_OW 234
// end ;
19738: PPOPN 1
19740: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
19741: LD_EXP 77
19745: PUSH
19746: LD_INT 1
19748: EQUAL
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 21
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 3
19772: PUSH
19773: LD_INT 61
19775: PUSH
19776: EMPTY
19777: LIST
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL_OW 69
19792: PUSH
19793: LD_INT 0
19795: GREATER
19796: AND
19797: IFFALSE 19879
19799: GO 19801
19801: DISABLE
19802: LD_INT 0
19804: PPUSH
// begin enable ;
19805: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
19806: LD_ADDR_VAR 0 1
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_INT 8
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 21
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 3
19833: PUSH
19834: LD_INT 61
19836: PUSH
19837: EMPTY
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: PPUSH
19849: CALL_OW 69
19853: PUSH
19854: FOR_IN
19855: IFFALSE 19877
// ComLinkTo ( i , arControler [ 1 ] ) ;
19857: LD_VAR 0 1
19861: PPUSH
19862: LD_EXP 50
19866: PUSH
19867: LD_INT 1
19869: ARRAY
19870: PPUSH
19871: CALL_OW 135
19875: GO 19854
19877: POP
19878: POP
// end ;
19879: PPOPN 1
19881: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
19882: LD_EXP 78
19886: PUSH
19887: LD_INT 1
19889: EQUAL
19890: PUSH
19891: LD_INT 22
19893: PUSH
19894: LD_INT 7
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 21
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: LD_INT 61
19916: PUSH
19917: EMPTY
19918: LIST
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: PPUSH
19929: CALL_OW 69
19933: PUSH
19934: LD_INT 0
19936: GREATER
19937: AND
19938: IFFALSE 20028
19940: GO 19942
19942: DISABLE
19943: LD_INT 0
19945: PPUSH
// begin enable ;
19946: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
19947: LD_ADDR_VAR 0 1
19951: PUSH
19952: LD_INT 22
19954: PUSH
19955: LD_INT 7
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 21
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: LD_INT 61
19977: PUSH
19978: EMPTY
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: PPUSH
19990: CALL_OW 69
19994: PUSH
19995: FOR_IN
19996: IFFALSE 20026
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
19998: LD_VAR 0 1
20002: PPUSH
20003: LD_EXP 57
20007: PUSH
20008: LD_INT 1
20010: PPUSH
20011: LD_INT 3
20013: PPUSH
20014: CALL_OW 12
20018: ARRAY
20019: PPUSH
20020: CALL_OW 135
20024: GO 19995
20026: POP
20027: POP
// end ; end_of_file
20028: PPOPN 1
20030: END
// every 0 0$1 trigger timerStatus = 1 do
20031: LD_EXP 88
20035: PUSH
20036: LD_INT 1
20038: EQUAL
20039: IFFALSE 20076
20041: GO 20043
20043: DISABLE
// begin enable ;
20044: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20045: LD_ADDR_OWVAR 47
20049: PUSH
20050: LD_STRING #Am15-1
20052: PUSH
20053: LD_EXP 89
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20062: LD_ADDR_EXP 89
20066: PUSH
20067: LD_EXP 89
20071: PUSH
20072: LD_INT 35
20074: PLUS
20075: ST_TO_ADDR
// end ; end_of_file
20076: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20077: LD_EXP 65
20081: PUSH
20082: LD_INT 1
20084: EQUAL
20085: PUSH
20086: LD_EXP 92
20090: PUSH
20091: LD_INT 0
20093: EQUAL
20094: AND
20095: PUSH
20096: LD_EXP 83
20100: PUSH
20101: LD_INT 0
20103: EQUAL
20104: AND
20105: IFFALSE 20165
20107: GO 20109
20109: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20110: LD_INT 2
20112: PPUSH
20113: LD_INT 6
20115: PPUSH
20116: LD_INT 2
20118: PPUSH
20119: LD_INT 4
20121: PPUSH
20122: CALL_OW 12
20126: PPUSH
20127: LD_INT 10
20129: PPUSH
20130: LD_INT 3
20132: PPUSH
20133: LD_INT 3
20135: PPUSH
20136: LD_INT 3
20138: PPUSH
20139: LD_INT 42
20141: PUSH
20142: LD_INT 43
20144: PUSH
20145: LD_INT 44
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: PPUSH
20153: EMPTY
20154: PPUSH
20155: EMPTY
20156: PPUSH
20157: LD_INT 1
20159: PPUSH
20160: CALL 7594 0 11
// enable ;
20164: ENABLE
// end ;
20165: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20166: LD_EXP 65
20170: PUSH
20171: LD_INT 1
20173: EQUAL
20174: PUSH
20175: LD_EXP 92
20179: PUSH
20180: LD_INT 1
20182: EQUAL
20183: AND
20184: PUSH
20185: LD_EXP 83
20189: PUSH
20190: LD_INT 0
20192: EQUAL
20193: AND
20194: IFFALSE 20254
20196: GO 20198
20198: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20199: LD_INT 2
20201: PPUSH
20202: LD_INT 6
20204: PPUSH
20205: LD_INT 4
20207: PPUSH
20208: LD_INT 6
20210: PPUSH
20211: CALL_OW 12
20215: PPUSH
20216: LD_INT 10
20218: PPUSH
20219: LD_INT 3
20221: PPUSH
20222: LD_INT 3
20224: PPUSH
20225: LD_INT 3
20227: PPUSH
20228: LD_INT 44
20230: PUSH
20231: LD_INT 45
20233: PUSH
20234: LD_INT 46
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: PPUSH
20242: EMPTY
20243: PPUSH
20244: EMPTY
20245: PPUSH
20246: LD_INT 1
20248: PPUSH
20249: CALL 7594 0 11
// enable ;
20253: ENABLE
// end ;
20254: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
20255: LD_EXP 65
20259: PUSH
20260: LD_INT 1
20262: EQUAL
20263: PUSH
20264: LD_EXP 92
20268: PUSH
20269: LD_INT 3
20271: EQUAL
20272: AND
20273: PUSH
20274: LD_EXP 83
20278: PUSH
20279: LD_INT 0
20281: EQUAL
20282: AND
20283: IFFALSE 20347
20285: GO 20287
20287: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
20288: LD_INT 2
20290: PPUSH
20291: LD_INT 6
20293: PPUSH
20294: LD_INT 4
20296: PPUSH
20297: LD_INT 8
20299: PPUSH
20300: CALL_OW 12
20304: PPUSH
20305: LD_INT 10
20307: PPUSH
20308: LD_INT 3
20310: PPUSH
20311: LD_INT 3
20313: PPUSH
20314: LD_INT 3
20316: PPUSH
20317: LD_INT 44
20319: PUSH
20320: LD_INT 45
20322: PUSH
20323: LD_INT 46
20325: PUSH
20326: LD_INT 47
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: PPUSH
20335: EMPTY
20336: PPUSH
20337: EMPTY
20338: PPUSH
20339: LD_INT 1
20341: PPUSH
20342: CALL 7594 0 11
// enable ;
20346: ENABLE
// end ;
20347: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
20348: LD_EXP 65
20352: PUSH
20353: LD_INT 1
20355: EQUAL
20356: PUSH
20357: LD_EXP 92
20361: PUSH
20362: LD_INT 4
20364: GREATEREQUAL
20365: AND
20366: PUSH
20367: LD_EXP 83
20371: PUSH
20372: LD_INT 0
20374: EQUAL
20375: AND
20376: IFFALSE 20436
20378: GO 20380
20380: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
20381: LD_INT 2
20383: PPUSH
20384: LD_INT 6
20386: PPUSH
20387: LD_INT 4
20389: PPUSH
20390: LD_INT 8
20392: PPUSH
20393: CALL_OW 12
20397: PPUSH
20398: LD_INT 10
20400: PPUSH
20401: LD_INT 3
20403: PPUSH
20404: LD_INT 3
20406: PPUSH
20407: LD_INT 3
20409: PPUSH
20410: LD_INT 46
20412: PUSH
20413: LD_INT 47
20415: PUSH
20416: LD_INT 49
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: PPUSH
20424: EMPTY
20425: PPUSH
20426: EMPTY
20427: PPUSH
20428: LD_INT 1
20430: PPUSH
20431: CALL 7594 0 11
// enable ;
20435: ENABLE
// end ; end_of_file
20436: END
// every 1 do var i , dec1 , options , people ;
20437: GO 20439
20439: DISABLE
20440: LD_INT 0
20442: PPUSH
20443: PPUSH
20444: PPUSH
20445: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
20446: LD_INT 24
20448: PPUSH
20449: LD_INT 92
20451: PPUSH
20452: LD_INT 172
20454: PPUSH
20455: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
20459: LD_INT 25
20461: PPUSH
20462: LD_INT 103
20464: PPUSH
20465: LD_INT 74
20467: PPUSH
20468: CALL_OW 243
// InGameOn ;
20472: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20476: LD_EXP 24
20480: PUSH
20481: LD_EXP 25
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PPUSH
20490: LD_INT 60
20492: PPUSH
20493: LD_INT 75
20495: PPUSH
20496: CALL_OW 111
// if KappaStatus = 0 then
20500: LD_EXP 74
20504: PUSH
20505: LD_INT 0
20507: EQUAL
20508: IFFALSE 20797
// begin CenterNowOnUnits ( NewJMMVeh ) ;
20510: LD_EXP 24
20514: PPUSH
20515: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
20519: LD_EXP 1
20523: PPUSH
20524: LD_STRING D1T-JMM-1
20526: PPUSH
20527: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20531: LD_EXP 24
20535: PPUSH
20536: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
20540: LD_EXP 17
20544: PPUSH
20545: LD_STRING D1T-Pow-1
20547: PPUSH
20548: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20552: LD_EXP 24
20556: PPUSH
20557: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
20561: LD_EXP 1
20565: PPUSH
20566: LD_STRING D1T-JMM-2
20568: PPUSH
20569: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20573: LD_EXP 24
20577: PPUSH
20578: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
20582: LD_EXP 17
20586: PPUSH
20587: LD_STRING D1T-Pow-2
20589: PPUSH
20590: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20594: LD_EXP 24
20598: PPUSH
20599: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
20603: LD_EXP 1
20607: PPUSH
20608: LD_STRING D1T-JMM-3
20610: PPUSH
20611: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20615: LD_EXP 24
20619: PPUSH
20620: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
20624: LD_EXP 17
20628: PPUSH
20629: LD_STRING D1T-Pow-3
20631: PPUSH
20632: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20636: LD_EXP 24
20640: PPUSH
20641: CALL_OW 87
// if not JMMGirlVeh = [ ] then
20645: LD_EXP 72
20649: PUSH
20650: EMPTY
20651: EQUAL
20652: NOT
20653: IFFALSE 20753
// begin if JMMGirl = 1 then
20655: LD_EXP 73
20659: PUSH
20660: LD_INT 1
20662: EQUAL
20663: IFFALSE 20677
// Say ( Joan , D1T-Joan-3 ) ;
20665: LD_EXP 2
20669: PPUSH
20670: LD_STRING D1T-Joan-3
20672: PPUSH
20673: CALL_OW 88
// if JMMGirl = 2 then
20677: LD_EXP 73
20681: PUSH
20682: LD_INT 2
20684: EQUAL
20685: IFFALSE 20699
// Say ( Lisa , D1T-Lisa-3 ) ;
20687: LD_EXP 4
20691: PPUSH
20692: LD_STRING D1T-Lisa-3
20694: PPUSH
20695: CALL_OW 88
// if JMMGirl = 3 then
20699: LD_EXP 73
20703: PUSH
20704: LD_INT 3
20706: EQUAL
20707: IFFALSE 20721
// Say ( Connie , D1T-Con-3 ) ;
20709: LD_EXP 16
20713: PPUSH
20714: LD_STRING D1T-Con-3
20716: PPUSH
20717: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20721: LD_EXP 24
20725: PPUSH
20726: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
20730: LD_EXP 17
20734: PPUSH
20735: LD_STRING D1T-Pow-4
20737: PPUSH
20738: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20742: LD_EXP 24
20746: PPUSH
20747: CALL_OW 87
// end else
20751: GO 20795
// begin Say ( JMM , D1T-JMM-4 ) ;
20753: LD_EXP 1
20757: PPUSH
20758: LD_STRING D1T-JMM-4
20760: PPUSH
20761: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20765: LD_EXP 24
20769: PPUSH
20770: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
20774: LD_EXP 17
20778: PPUSH
20779: LD_STRING D1T-Pow-5
20781: PPUSH
20782: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20786: LD_EXP 24
20790: PPUSH
20791: CALL_OW 87
// end ; end else
20795: GO 20881
// begin CenterNowOnUnits ( NewJMMVeh ) ;
20797: LD_EXP 24
20801: PPUSH
20802: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
20806: LD_EXP 1
20810: PPUSH
20811: LD_STRING D1T-JMM-1
20813: PPUSH
20814: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20818: LD_EXP 24
20822: PPUSH
20823: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
20827: LD_EXP 17
20831: PPUSH
20832: LD_STRING D1T-Pow-1
20834: PPUSH
20835: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20839: LD_EXP 24
20843: PPUSH
20844: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
20848: LD_EXP 1
20852: PPUSH
20853: LD_STRING D1T-JMM-2
20855: PPUSH
20856: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
20860: LD_EXP 24
20864: PPUSH
20865: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
20869: LD_EXP 17
20873: PPUSH
20874: LD_STRING D1T-Pow-2
20876: PPUSH
20877: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
20881: LD_INT 35
20883: PPUSH
20884: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
20888: LD_EXP 24
20892: PUSH
20893: LD_EXP 25
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PPUSH
20902: LD_INT 60
20904: PPUSH
20905: LD_INT 75
20907: PPUSH
20908: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
20912: LD_EXP 24
20916: PPUSH
20917: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
20921: LD_EXP 24
20925: PPUSH
20926: LD_EXP 17
20930: PPUSH
20931: CALL_OW 296
20935: PUSH
20936: LD_INT 20
20938: LESS
20939: PUSH
20940: LD_EXP 24
20944: PPUSH
20945: CALL_OW 314
20949: NOT
20950: OR
20951: IFFALSE 20881
// ComExitVehicle ( JMM ) ;
20953: LD_EXP 1
20957: PPUSH
20958: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
20962: LD_INT 35
20964: PPUSH
20965: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
20969: LD_EXP 1
20973: PPUSH
20974: LD_EXP 17
20978: PPUSH
20979: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
20983: LD_EXP 1
20987: PPUSH
20988: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
20992: LD_EXP 1
20996: PPUSH
20997: LD_EXP 17
21001: PPUSH
21002: CALL_OW 296
21006: PUSH
21007: LD_INT 6
21009: LESS
21010: IFFALSE 20962
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21012: LD_EXP 1
21016: PUSH
21017: LD_EXP 17
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PPUSH
21026: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21030: LD_EXP 1
21034: PPUSH
21035: LD_EXP 17
21039: PPUSH
21040: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21044: LD_EXP 17
21048: PPUSH
21049: LD_EXP 1
21053: PPUSH
21054: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21058: LD_EXP 1
21062: PPUSH
21063: LD_STRING D1-JMM-1
21065: PPUSH
21066: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21070: LD_EXP 17
21074: PPUSH
21075: LD_STRING D1-Pow-1
21077: PPUSH
21078: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21082: LD_INT 1
21084: PPUSH
21085: LD_INT 3
21087: PPUSH
21088: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21092: LD_INT 1
21094: PPUSH
21095: LD_INT 4
21097: PPUSH
21098: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21102: LD_INT 1
21104: PPUSH
21105: LD_INT 5
21107: PPUSH
21108: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21112: LD_INT 171
21114: PPUSH
21115: LD_INT 81
21117: PPUSH
21118: CALL_OW 84
// wait ( 0 0$4 ) ;
21122: LD_INT 140
21124: PPUSH
21125: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21129: LD_INT 162
21131: PPUSH
21132: LD_INT 36
21134: PPUSH
21135: CALL_OW 84
// wait ( 0 0$4 ) ;
21139: LD_INT 140
21141: PPUSH
21142: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21146: LD_INT 75
21148: PPUSH
21149: LD_INT 16
21151: PPUSH
21152: CALL_OW 84
// wait ( 0 0$4 ) ;
21156: LD_INT 140
21158: PPUSH
21159: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21163: LD_EXP 17
21167: PUSH
21168: LD_EXP 1
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
21181: LD_EXP 1
21185: PPUSH
21186: LD_STRING D1-JMM-2
21188: PPUSH
21189: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
21193: LD_EXP 17
21197: PPUSH
21198: LD_STRING D1-Pow-2
21200: PPUSH
21201: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
21205: LD_EXP 1
21209: PPUSH
21210: LD_STRING D1-JMM-3
21212: PPUSH
21213: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
21217: LD_EXP 17
21221: PPUSH
21222: LD_STRING D1-Pow-3
21224: PPUSH
21225: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
21229: LD_EXP 1
21233: PPUSH
21234: LD_STRING D1-JMM-4
21236: PPUSH
21237: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
21241: LD_EXP 17
21245: PPUSH
21246: LD_STRING D1-Pow-4
21248: PPUSH
21249: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
21253: LD_EXP 1
21257: PPUSH
21258: LD_STRING D1-JMM-5
21260: PPUSH
21261: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
21265: LD_EXP 17
21269: PPUSH
21270: LD_STRING D1-Pow-5
21272: PPUSH
21273: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
21277: LD_ADDR_VAR 0 3
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: LD_INT 4
21293: PUSH
21294: LD_INT 5
21296: PUSH
21297: LD_INT 6
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
21308: LD_ADDR_VAR 0 2
21312: PUSH
21313: LD_STRING Q1
21315: PPUSH
21316: LD_VAR 0 3
21320: PPUSH
21321: CALL_OW 98
21325: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
21326: LD_ADDR_VAR 0 2
21330: PUSH
21331: LD_STRING Q1
21333: PPUSH
21334: LD_VAR 0 3
21338: PPUSH
21339: CALL_OW 98
21343: ST_TO_ADDR
// options = options diff dec1 ;
21344: LD_ADDR_VAR 0 3
21348: PUSH
21349: LD_VAR 0 3
21353: PUSH
21354: LD_VAR 0 2
21358: DIFF
21359: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_VAR 0 3
21369: PPUSH
21370: CALL 22904 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
21374: LD_VAR 0 2
21378: PUSH
21379: LD_INT 5
21381: PUSH
21382: LD_INT 6
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: IN
21389: PUSH
21390: LD_VAR 0 3
21394: PUSH
21395: LD_INT 2
21397: EQUAL
21398: OR
21399: IFFALSE 21326
// if not ( dec1 in [ 5 , 6 ] ) then
21401: LD_VAR 0 2
21405: PUSH
21406: LD_INT 5
21408: PUSH
21409: LD_INT 6
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: IN
21416: NOT
21417: IFFALSE 21460
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
21419: LD_ADDR_VAR 0 2
21423: PUSH
21424: LD_STRING Q1a
21426: PPUSH
21427: LD_INT 1
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 98
21441: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
21442: LD_VAR 0 2
21446: PUSH
21447: LD_INT 4
21449: PLUS
21450: PPUSH
21451: LD_VAR 0 3
21455: PPUSH
21456: CALL 22904 0 2
// end ; if not JMMGirlVeh = [ ] then
21460: LD_EXP 72
21464: PUSH
21465: EMPTY
21466: EQUAL
21467: NOT
21468: IFFALSE 21630
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
21470: LD_EXP 25
21474: PPUSH
21475: CALL_OW 313
21479: PPUSH
21480: CALL_OW 121
// wait ( 0 0$1 ) ;
21484: LD_INT 35
21486: PPUSH
21487: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21491: LD_INT 35
21493: PPUSH
21494: CALL_OW 67
// if JMMGirl = 1 then
21498: LD_EXP 73
21502: PUSH
21503: LD_INT 1
21505: EQUAL
21506: IFFALSE 21522
// ComMoveUnit ( JMM , Joan ) ;
21508: LD_EXP 1
21512: PPUSH
21513: LD_EXP 2
21517: PPUSH
21518: CALL_OW 112
// if JMMGirl = 2 then
21522: LD_EXP 73
21526: PUSH
21527: LD_INT 2
21529: EQUAL
21530: IFFALSE 21546
// ComMoveUnit ( JMM , Lisa ) ;
21532: LD_EXP 1
21536: PPUSH
21537: LD_EXP 4
21541: PPUSH
21542: CALL_OW 112
// if JMMGirl = 3 then
21546: LD_EXP 73
21550: PUSH
21551: LD_INT 3
21553: EQUAL
21554: IFFALSE 21570
// ComMoveUnit ( JMM , Connie ) ;
21556: LD_EXP 1
21560: PPUSH
21561: LD_EXP 16
21565: PPUSH
21566: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
21570: LD_EXP 1
21574: PPUSH
21575: LD_EXP 2
21579: PPUSH
21580: CALL_OW 296
21584: PUSH
21585: LD_INT 6
21587: LESS
21588: PUSH
21589: LD_EXP 1
21593: PPUSH
21594: LD_EXP 4
21598: PPUSH
21599: CALL_OW 296
21603: PUSH
21604: LD_INT 6
21606: LESS
21607: OR
21608: PUSH
21609: LD_EXP 1
21613: PPUSH
21614: LD_EXP 16
21618: PPUSH
21619: CALL_OW 296
21623: PUSH
21624: LD_INT 6
21626: LESS
21627: OR
21628: IFFALSE 21491
// end ; CenterNowOnUnits ( JMM ) ;
21630: LD_EXP 1
21634: PPUSH
21635: CALL_OW 87
// case JMMGirl of 1 :
21639: LD_EXP 73
21643: PUSH
21644: LD_INT 1
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21707
21652: POP
// begin ComTurnUnit ( JMM , Joan ) ;
21653: LD_EXP 1
21657: PPUSH
21658: LD_EXP 2
21662: PPUSH
21663: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
21667: LD_EXP 2
21671: PPUSH
21672: LD_EXP 1
21676: PPUSH
21677: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
21681: LD_EXP 2
21685: PPUSH
21686: LD_STRING D3W-Joan-1
21688: PPUSH
21689: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21693: LD_EXP 1
21697: PPUSH
21698: LD_STRING D3W-JMM-1
21700: PPUSH
21701: CALL_OW 88
// end ; 2 :
21705: GO 21834
21707: LD_INT 2
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21770
21715: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
21716: LD_EXP 1
21720: PPUSH
21721: LD_EXP 4
21725: PPUSH
21726: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
21730: LD_EXP 4
21734: PPUSH
21735: LD_EXP 1
21739: PPUSH
21740: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
21744: LD_EXP 4
21748: PPUSH
21749: LD_STRING D3W-Lisa-1
21751: PPUSH
21752: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21756: LD_EXP 1
21760: PPUSH
21761: LD_STRING D3W-JMM-1
21763: PPUSH
21764: CALL_OW 88
// end ; 3 :
21768: GO 21834
21770: LD_INT 3
21772: DOUBLE
21773: EQUAL
21774: IFTRUE 21778
21776: GO 21833
21778: POP
// begin ComTurnUnit ( JMM , Connie ) ;
21779: LD_EXP 1
21783: PPUSH
21784: LD_EXP 16
21788: PPUSH
21789: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
21793: LD_EXP 16
21797: PPUSH
21798: LD_EXP 1
21802: PPUSH
21803: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
21807: LD_EXP 16
21811: PPUSH
21812: LD_STRING D3W-Con-1
21814: PPUSH
21815: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
21819: LD_EXP 1
21823: PPUSH
21824: LD_STRING D3W-JMM-1
21826: PPUSH
21827: CALL_OW 88
// end ; end ;
21831: GO 21834
21833: POP
// people = 0 ;
21834: LD_ADDR_VAR 0 4
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// if Lisa and people < 5 then
21842: LD_EXP 4
21846: PUSH
21847: LD_VAR 0 4
21851: PUSH
21852: LD_INT 5
21854: LESS
21855: AND
21856: IFFALSE 21888
// begin people = people + 1 ;
21858: LD_ADDR_VAR 0 4
21862: PUSH
21863: LD_VAR 0 4
21867: PUSH
21868: LD_INT 1
21870: PLUS
21871: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
21872: LD_ADDR_EXP 60
21876: PUSH
21877: LD_EXP 60
21881: PUSH
21882: LD_EXP 4
21886: ADD
21887: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
21888: LD_EXP 5
21892: PUSH
21893: LD_VAR 0 4
21897: PUSH
21898: LD_INT 5
21900: LESS
21901: AND
21902: IFFALSE 21934
// begin people = people + 1 ;
21904: LD_ADDR_VAR 0 4
21908: PUSH
21909: LD_VAR 0 4
21913: PUSH
21914: LD_INT 1
21916: PLUS
21917: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
21918: LD_ADDR_EXP 60
21922: PUSH
21923: LD_EXP 60
21927: PUSH
21928: LD_EXP 5
21932: ADD
21933: ST_TO_ADDR
// end ; if Bobby and people < 5 then
21934: LD_EXP 6
21938: PUSH
21939: LD_VAR 0 4
21943: PUSH
21944: LD_INT 5
21946: LESS
21947: AND
21948: IFFALSE 21980
// begin people = people + 1 ;
21950: LD_ADDR_VAR 0 4
21954: PUSH
21955: LD_VAR 0 4
21959: PUSH
21960: LD_INT 1
21962: PLUS
21963: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
21964: LD_ADDR_EXP 60
21968: PUSH
21969: LD_EXP 60
21973: PUSH
21974: LD_EXP 6
21978: ADD
21979: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
21980: LD_EXP 7
21984: PUSH
21985: LD_VAR 0 4
21989: PUSH
21990: LD_INT 5
21992: LESS
21993: AND
21994: IFFALSE 22026
// begin people = people + 1 ;
21996: LD_ADDR_VAR 0 4
22000: PUSH
22001: LD_VAR 0 4
22005: PUSH
22006: LD_INT 1
22008: PLUS
22009: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22010: LD_ADDR_EXP 60
22014: PUSH
22015: LD_EXP 60
22019: PUSH
22020: LD_EXP 7
22024: ADD
22025: ST_TO_ADDR
// end ; if Denis and people < 5 then
22026: LD_EXP 8
22030: PUSH
22031: LD_VAR 0 4
22035: PUSH
22036: LD_INT 5
22038: LESS
22039: AND
22040: IFFALSE 22072
// begin people = people + 1 ;
22042: LD_ADDR_VAR 0 4
22046: PUSH
22047: LD_VAR 0 4
22051: PUSH
22052: LD_INT 1
22054: PLUS
22055: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22056: LD_ADDR_EXP 60
22060: PUSH
22061: LD_EXP 60
22065: PUSH
22066: LD_EXP 8
22070: ADD
22071: ST_TO_ADDR
// end ; if Brown and people < 5 then
22072: LD_EXP 9
22076: PUSH
22077: LD_VAR 0 4
22081: PUSH
22082: LD_INT 5
22084: LESS
22085: AND
22086: IFFALSE 22118
// begin people = people + 1 ;
22088: LD_ADDR_VAR 0 4
22092: PUSH
22093: LD_VAR 0 4
22097: PUSH
22098: LD_INT 1
22100: PLUS
22101: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22102: LD_ADDR_EXP 60
22106: PUSH
22107: LD_EXP 60
22111: PUSH
22112: LD_EXP 9
22116: ADD
22117: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22118: LD_EXP 10
22122: PUSH
22123: LD_VAR 0 4
22127: PUSH
22128: LD_INT 5
22130: LESS
22131: AND
22132: IFFALSE 22164
// begin people = people + 1 ;
22134: LD_ADDR_VAR 0 4
22138: PUSH
22139: LD_VAR 0 4
22143: PUSH
22144: LD_INT 1
22146: PLUS
22147: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22148: LD_ADDR_EXP 60
22152: PUSH
22153: LD_EXP 60
22157: PUSH
22158: LD_EXP 10
22162: ADD
22163: ST_TO_ADDR
// end ; if Houten and people < 5 then
22164: LD_EXP 11
22168: PUSH
22169: LD_VAR 0 4
22173: PUSH
22174: LD_INT 5
22176: LESS
22177: AND
22178: IFFALSE 22210
// begin people = people + 1 ;
22180: LD_ADDR_VAR 0 4
22184: PUSH
22185: LD_VAR 0 4
22189: PUSH
22190: LD_INT 1
22192: PLUS
22193: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
22194: LD_ADDR_EXP 60
22198: PUSH
22199: LD_EXP 60
22203: PUSH
22204: LD_EXP 11
22208: ADD
22209: ST_TO_ADDR
// end ; if Cornel and people < 5 then
22210: LD_EXP 12
22214: PUSH
22215: LD_VAR 0 4
22219: PUSH
22220: LD_INT 5
22222: LESS
22223: AND
22224: IFFALSE 22256
// begin people = people + 1 ;
22226: LD_ADDR_VAR 0 4
22230: PUSH
22231: LD_VAR 0 4
22235: PUSH
22236: LD_INT 1
22238: PLUS
22239: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
22240: LD_ADDR_EXP 60
22244: PUSH
22245: LD_EXP 60
22249: PUSH
22250: LD_EXP 12
22254: ADD
22255: ST_TO_ADDR
// end ; if Gary and people < 5 then
22256: LD_EXP 13
22260: PUSH
22261: LD_VAR 0 4
22265: PUSH
22266: LD_INT 5
22268: LESS
22269: AND
22270: IFFALSE 22302
// begin people = people + 1 ;
22272: LD_ADDR_VAR 0 4
22276: PUSH
22277: LD_VAR 0 4
22281: PUSH
22282: LD_INT 1
22284: PLUS
22285: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
22286: LD_ADDR_EXP 60
22290: PUSH
22291: LD_EXP 60
22295: PUSH
22296: LD_EXP 13
22300: ADD
22301: ST_TO_ADDR
// end ; if Frank and people < 5 then
22302: LD_EXP 14
22306: PUSH
22307: LD_VAR 0 4
22311: PUSH
22312: LD_INT 5
22314: LESS
22315: AND
22316: IFFALSE 22348
// begin people = people + 1 ;
22318: LD_ADDR_VAR 0 4
22322: PUSH
22323: LD_VAR 0 4
22327: PUSH
22328: LD_INT 1
22330: PLUS
22331: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
22332: LD_ADDR_EXP 60
22336: PUSH
22337: LD_EXP 60
22341: PUSH
22342: LD_EXP 14
22346: ADD
22347: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
22348: LD_EXP 15
22352: PUSH
22353: LD_VAR 0 4
22357: PUSH
22358: LD_INT 5
22360: LESS
22361: AND
22362: IFFALSE 22394
// begin people = people + 1 ;
22364: LD_ADDR_VAR 0 4
22368: PUSH
22369: LD_VAR 0 4
22373: PUSH
22374: LD_INT 1
22376: PLUS
22377: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
22378: LD_ADDR_EXP 60
22382: PUSH
22383: LD_EXP 60
22387: PUSH
22388: LD_EXP 15
22392: ADD
22393: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
22394: LD_EXP 60
22398: PPUSH
22399: LD_INT 25
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PPUSH
22409: CALL_OW 72
22413: PUSH
22414: LD_INT 0
22416: EQUAL
22417: IFFALSE 22435
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
22419: LD_EXP 60
22423: PUSH
22424: LD_INT 1
22426: ARRAY
22427: PPUSH
22428: LD_INT 2
22430: PPUSH
22431: CALL_OW 336
// for i = 1 to 5 do
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: DOUBLE
22441: LD_INT 1
22443: DEC
22444: ST_TO_ADDR
22445: LD_INT 5
22447: PUSH
22448: FOR_TO
22449: IFFALSE 22500
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
22451: LD_EXP 60
22455: PUSH
22456: LD_VAR 0 1
22460: ARRAY
22461: PPUSH
22462: LD_INT 62
22464: PUSH
22465: LD_VAR 0 1
22469: PLUS
22470: PPUSH
22471: LD_INT 95
22473: PPUSH
22474: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
22478: LD_EXP 60
22482: PUSH
22483: LD_VAR 0 1
22487: ARRAY
22488: PPUSH
22489: LD_EXP 1
22493: PPUSH
22494: CALL_OW 179
// end ;
22498: GO 22448
22500: POP
22501: POP
// repeat wait ( 0 0$1 ) ;
22502: LD_INT 35
22504: PPUSH
22505: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
22509: LD_EXP 1
22513: PPUSH
22514: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
22518: LD_EXP 1
22522: PPUSH
22523: LD_INT 66
22525: PPUSH
22526: LD_INT 98
22528: PPUSH
22529: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
22533: LD_EXP 2
22537: PUSH
22538: LD_EXP 4
22542: PUSH
22543: LD_EXP 16
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: PPUSH
22553: LD_INT 67
22555: PPUSH
22556: LD_INT 98
22558: PPUSH
22559: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
22563: LD_EXP 1
22567: PUSH
22568: LD_EXP 2
22572: PUSH
22573: LD_EXP 4
22577: PUSH
22578: LD_EXP 16
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: PPUSH
22589: LD_INT 63
22591: PPUSH
22592: LD_INT 95
22594: PPUSH
22595: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
22599: LD_EXP 1
22603: PPUSH
22604: LD_INT 9
22606: PPUSH
22607: CALL_OW 308
22611: PUSH
22612: LD_INT 9
22614: PPUSH
22615: LD_INT 22
22617: PUSH
22618: LD_INT 4
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 21
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PPUSH
22639: CALL_OW 70
22643: PUSH
22644: LD_INT 5
22646: EQUAL
22647: AND
22648: IFFALSE 22502
// wait ( 0 0$2 ) ;
22650: LD_INT 70
22652: PPUSH
22653: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
22657: LD_EXP 4
22661: PPUSH
22662: LD_INT 9
22664: PPUSH
22665: CALL_OW 308
22669: IFFALSE 22683
// Say ( Lisa , D3nW-Lisa-1 ) ;
22671: LD_EXP 4
22675: PPUSH
22676: LD_STRING D3nW-Lisa-1
22678: PPUSH
22679: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
22683: LD_EXP 7
22687: PPUSH
22688: LD_INT 9
22690: PPUSH
22691: CALL_OW 308
22695: IFFALSE 22709
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
22697: LD_EXP 7
22701: PPUSH
22702: LD_STRING D3nW-Cyrus-1
22704: PPUSH
22705: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
22709: LD_EXP 6
22713: PPUSH
22714: LD_INT 9
22716: PPUSH
22717: CALL_OW 308
22721: IFFALSE 22735
// Say ( Bobby , D3nW-Bobby-1 ) ;
22723: LD_EXP 6
22727: PPUSH
22728: LD_STRING D3nW-Bobby-1
22730: PPUSH
22731: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
22735: LD_EXP 13
22739: PPUSH
22740: LD_INT 9
22742: PPUSH
22743: CALL_OW 308
22747: IFFALSE 22761
// Say ( Gary , D3nW-Gary-1 ) ;
22749: LD_EXP 13
22753: PPUSH
22754: LD_STRING D3nW-Gary-1
22756: PPUSH
22757: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
22761: LD_EXP 5
22765: PPUSH
22766: LD_INT 9
22768: PPUSH
22769: CALL_OW 308
22773: IFFALSE 22787
// Say ( Donaldson , D3nW-Don-1 ) ;
22775: LD_EXP 5
22779: PPUSH
22780: LD_STRING D3nW-Don-1
22782: PPUSH
22783: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
22787: LD_EXP 12
22791: PPUSH
22792: LD_INT 9
22794: PPUSH
22795: CALL_OW 308
22799: IFFALSE 22813
// Say ( Cornel , D3nW-Corn-1 ) ;
22801: LD_EXP 12
22805: PPUSH
22806: LD_STRING D3nW-Corn-1
22808: PPUSH
22809: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
22813: LD_EXP 14
22817: PPUSH
22818: LD_INT 9
22820: PPUSH
22821: CALL_OW 308
22825: IFFALSE 22839
// Say ( Frank , D3nW-Frank-1 ) ;
22827: LD_EXP 14
22831: PPUSH
22832: LD_STRING D3nW-Frank-1
22834: PPUSH
22835: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
22839: LD_EXP 1
22843: PPUSH
22844: LD_STRING D3nW-JMM-1
22846: PPUSH
22847: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
22851: LD_EXP 1
22855: PPUSH
22856: LD_STRING D3nW-JMM-1a
22858: PPUSH
22859: CALL_OW 88
// InGameOff ;
22863: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22867: LD_STRING M1
22869: PPUSH
22870: CALL_OW 337
// SaveForQuickRestart ;
22874: CALL_OW 22
// startAttacks = 1 ;
22878: LD_ADDR_EXP 65
22882: PUSH
22883: LD_INT 1
22885: ST_TO_ADDR
// wait ( 0 0$5 ) ;
22886: LD_INT 175
22888: PPUSH
22889: CALL_OW 67
// powellBuildBase = 1 ;
22893: LD_ADDR_EXP 61
22897: PUSH
22898: LD_INT 1
22900: ST_TO_ADDR
// end ;
22901: PPOPN 4
22903: END
// function ResolveQuery ( question , list_of_q ) ; begin
22904: LD_INT 0
22906: PPUSH
// case question of 1 :
22907: LD_VAR 0 1
22911: PUSH
22912: LD_INT 1
22914: DOUBLE
22915: EQUAL
22916: IFTRUE 22920
22918: GO 22971
22920: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
22921: LD_EXP 1
22925: PPUSH
22926: LD_STRING D2Mot-JMM-1
22928: PPUSH
22929: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
22933: LD_EXP 17
22937: PPUSH
22938: LD_STRING D2Mot-Pow-1
22940: PPUSH
22941: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
22945: LD_EXP 1
22949: PPUSH
22950: LD_STRING D2Mot-JMM-2
22952: PPUSH
22953: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
22957: LD_EXP 17
22961: PPUSH
22962: LD_STRING D2Mot-Pow-2
22964: PPUSH
22965: CALL_OW 88
// end ; 2 :
22969: GO 23314
22971: LD_INT 2
22973: DOUBLE
22974: EQUAL
22975: IFTRUE 22979
22977: GO 23055
22979: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
22980: LD_EXP 1
22984: PPUSH
22985: LD_STRING D2Rus-JMM-1
22987: PPUSH
22988: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
22992: LD_EXP 17
22996: PPUSH
22997: LD_STRING D2Rus-Pow-1
22999: PPUSH
23000: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23004: LD_EXP 1
23008: PPUSH
23009: LD_STRING D2Rus-JMM-2
23011: PPUSH
23012: CALL_OW 88
// if not ( 3 in list_of_q ) then
23016: LD_INT 3
23018: PUSH
23019: LD_VAR 0 2
23023: IN
23024: NOT
23025: IFFALSE 23041
// Say ( Powell , D2Rus-Pow-2 ) else
23027: LD_EXP 17
23031: PPUSH
23032: LD_STRING D2Rus-Pow-2
23034: PPUSH
23035: CALL_OW 88
23039: GO 23053
// Say ( Powell , D2Rus-Pow-2a ) ;
23041: LD_EXP 17
23045: PPUSH
23046: LD_STRING D2Rus-Pow-2a
23048: PPUSH
23049: CALL_OW 88
// end ; 3 :
23053: GO 23314
23055: LD_INT 3
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23148
23063: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23064: LD_EXP 1
23068: PPUSH
23069: LD_STRING D2Leg-JMM-1
23071: PPUSH
23072: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23076: LD_EXP 17
23080: PPUSH
23081: LD_STRING D2Leg-Pow-1
23083: PPUSH
23084: CALL_OW 88
// if ( 2 in list_of_q ) then
23088: LD_INT 2
23090: PUSH
23091: LD_VAR 0 2
23095: IN
23096: IFFALSE 23122
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23098: LD_EXP 1
23102: PPUSH
23103: LD_STRING D2Leg-JMM-2
23105: PPUSH
23106: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23110: LD_EXP 17
23114: PPUSH
23115: LD_STRING D2Leg-Pow-2
23117: PPUSH
23118: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23122: LD_EXP 1
23126: PPUSH
23127: LD_STRING D2Leg-JMM-3
23129: PPUSH
23130: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23134: LD_EXP 17
23138: PPUSH
23139: LD_STRING D2Leg-Pow-3
23141: PPUSH
23142: CALL_OW 88
// end ; 4 :
23146: GO 23314
23148: LD_INT 4
23150: DOUBLE
23151: EQUAL
23152: IFTRUE 23156
23154: GO 23231
23156: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23157: LD_EXP 1
23161: PPUSH
23162: LD_STRING D2Ar-JMM-1
23164: PPUSH
23165: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
23169: LD_EXP 17
23173: PPUSH
23174: LD_STRING D2Ar-Pow-1
23176: PPUSH
23177: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
23181: LD_EXP 1
23185: PPUSH
23186: LD_STRING D2Ar-JMM-2
23188: PPUSH
23189: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
23193: LD_EXP 17
23197: PPUSH
23198: LD_STRING D2Ar-Pow-2
23200: PPUSH
23201: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
23205: LD_EXP 1
23209: PPUSH
23210: LD_STRING D2Ar-JMM-3
23212: PPUSH
23213: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
23217: LD_EXP 17
23221: PPUSH
23222: LD_STRING D2Ar-Pow-3
23224: PPUSH
23225: CALL_OW 88
// end ; 5 :
23229: GO 23314
23231: LD_INT 5
23233: DOUBLE
23234: EQUAL
23235: IFTRUE 23239
23237: GO 23254
23239: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
23240: LD_EXP 1
23244: PPUSH
23245: LD_STRING D2Conf-JMM-1
23247: PPUSH
23248: CALL_OW 88
// end ; 6 :
23252: GO 23314
23254: LD_INT 6
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23313
23262: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
23263: LD_EXP 1
23267: PPUSH
23268: LD_STRING D2Com-JMM-1
23270: PPUSH
23271: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
23275: LD_EXP 17
23279: PPUSH
23280: LD_STRING D2Com-Pow-1
23282: PPUSH
23283: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
23287: LD_EXP 1
23291: PPUSH
23292: LD_STRING D2Com-JMM-2
23294: PPUSH
23295: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
23299: LD_EXP 17
23303: PPUSH
23304: LD_STRING D2Com-Pow-2
23306: PPUSH
23307: CALL_OW 88
// end ; end ;
23311: GO 23314
23313: POP
// end ;
23314: LD_VAR 0 3
23318: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
23319: LD_INT 9
23321: PPUSH
23322: LD_INT 22
23324: PUSH
23325: LD_INT 4
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 21
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PPUSH
23346: CALL_OW 70
23350: IFFALSE 23395
23352: GO 23354
23354: DISABLE
// begin enable ;
23355: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
23356: LD_INT 9
23358: PPUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 21
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 70
23387: PPUSH
23388: LD_INT 1
23390: PPUSH
23391: CALL_OW 235
// end ;
23395: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
23396: LD_INT 22
23398: PUSH
23399: LD_INT 4
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 21
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 3
23418: PUSH
23419: LD_INT 58
23421: PUSH
23422: EMPTY
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: LIST
23433: PPUSH
23434: CALL_OW 69
23438: PUSH
23439: LD_INT 4
23441: EQUAL
23442: PUSH
23443: LD_EXP 65
23447: PUSH
23448: LD_INT 1
23450: EQUAL
23451: AND
23452: IFFALSE 23465
23454: GO 23456
23456: DISABLE
// startAttacks = 0 ;
23457: LD_ADDR_EXP 65
23461: PUSH
23462: LD_INT 0
23464: ST_TO_ADDR
23465: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
23466: LD_INT 22
23468: PUSH
23469: LD_INT 4
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 21
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: LD_INT 58
23491: PUSH
23492: EMPTY
23493: LIST
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: PPUSH
23504: CALL_OW 69
23508: PUSH
23509: LD_INT 4
23511: EQUAL
23512: PUSH
23513: LD_INT 22
23515: PUSH
23516: LD_INT 6
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 21
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 24
23535: PUSH
23536: LD_INT 250
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 69
23552: PUSH
23553: LD_INT 0
23555: EQUAL
23556: AND
23557: PUSH
23558: LD_EXP 65
23562: PUSH
23563: LD_INT 0
23565: EQUAL
23566: AND
23567: PUSH
23568: LD_EXP 62
23572: PUSH
23573: LD_INT 0
23575: EQUAL
23576: AND
23577: IFFALSE 23765
23579: GO 23581
23581: DISABLE
23582: LD_INT 0
23584: PPUSH
// begin powellAttacks = 1 ;
23585: LD_ADDR_EXP 62
23589: PUSH
23590: LD_INT 1
23592: ST_TO_ADDR
// InGameOn ;
23593: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
23597: LD_EXP 17
23601: PPUSH
23602: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
23606: LD_EXP 17
23610: PPUSH
23611: LD_INT 47
23613: PPUSH
23614: LD_INT 60
23616: PPUSH
23617: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
23621: LD_EXP 17
23625: PPUSH
23626: LD_STRING D4-Pow-1
23628: PPUSH
23629: CALL_OW 88
// for i = 1 to amUnitsAttack do
23633: LD_ADDR_VAR 0 1
23637: PUSH
23638: DOUBLE
23639: LD_INT 1
23641: DEC
23642: ST_TO_ADDR
23643: LD_EXP 59
23647: PUSH
23648: FOR_TO
23649: IFFALSE 23694
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
23651: LD_EXP 59
23655: PUSH
23656: LD_VAR 0 1
23660: ARRAY
23661: PPUSH
23662: CALL_OW 258
23666: PUSH
23667: LD_INT 1
23669: EQUAL
23670: IFFALSE 23692
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
23672: LD_EXP 59
23676: PUSH
23677: LD_VAR 0 1
23681: ARRAY
23682: PPUSH
23683: LD_STRING D4-Sol1-1
23685: PPUSH
23686: CALL_OW 88
// break ;
23690: GO 23694
// end ;
23692: GO 23648
23694: POP
23695: POP
// Say ( Powell , D4-Pow-2 ) ;
23696: LD_EXP 17
23700: PPUSH
23701: LD_STRING D4-Pow-2
23703: PPUSH
23704: CALL_OW 88
// InGameOff ;
23708: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
23712: LD_INT 22
23714: PUSH
23715: LD_INT 4
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 21
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 3
23734: PUSH
23735: LD_INT 58
23737: PUSH
23738: EMPTY
23739: LIST
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: PPUSH
23750: CALL_OW 69
23754: PPUSH
23755: LD_INT 59
23757: PPUSH
23758: LD_INT 21
23760: PPUSH
23761: CALL_OW 114
// end ;
23765: PPOPN 1
23767: END
// every 0 0$01 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) do
23768: LD_INT 7
23770: PPUSH
23771: LD_INT 22
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 21
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PPUSH
23795: CALL_OW 70
23799: PUSH
23800: LD_INT 0
23802: GREATER
23803: PUSH
23804: LD_EXP 17
23808: PPUSH
23809: CALL_OW 302
23813: AND
23814: IFFALSE 24011
23816: GO 23818
23818: DISABLE
// begin enable ;
23819: ENABLE
// InGameOn ;
23820: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
23824: LD_INT 22
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PPUSH
23848: CALL_OW 69
23852: PPUSH
23853: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
23857: LD_INT 7
23859: PPUSH
23860: LD_INT 22
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 21
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PPUSH
23884: CALL_OW 70
23888: PPUSH
23889: LD_INT 70
23891: PPUSH
23892: LD_INT 104
23894: PPUSH
23895: CALL_OW 111
// if powellWarm = 0 then
23899: LD_EXP 64
23903: PUSH
23904: LD_INT 0
23906: EQUAL
23907: IFFALSE 23935
// begin Say ( Powell , DBack1-Pow-1 ) ;
23909: LD_EXP 17
23913: PPUSH
23914: LD_STRING DBack1-Pow-1
23916: PPUSH
23917: CALL_OW 88
// powellWarm = powellWarm + 1 ;
23921: LD_ADDR_EXP 64
23925: PUSH
23926: LD_EXP 64
23930: PUSH
23931: LD_INT 1
23933: PLUS
23934: ST_TO_ADDR
// end ; if powellWarm = 1 then
23935: LD_EXP 64
23939: PUSH
23940: LD_INT 1
23942: EQUAL
23943: IFFALSE 23971
// begin Say ( Powell , DBack2-Pow-1 ) ;
23945: LD_EXP 17
23949: PPUSH
23950: LD_STRING DBack2-Pow-1
23952: PPUSH
23953: CALL_OW 88
// powellWarm = powellWarm + 1 ;
23957: LD_ADDR_EXP 64
23961: PUSH
23962: LD_EXP 64
23966: PUSH
23967: LD_INT 1
23969: PLUS
23970: ST_TO_ADDR
// end ; if powellWarm = 2 then
23971: LD_EXP 64
23975: PUSH
23976: LD_INT 2
23978: EQUAL
23979: IFFALSE 24000
// begin Say ( Powell , DBack3-Pow-1 ) ;
23981: LD_EXP 17
23985: PPUSH
23986: LD_STRING DBack3-Pow-1
23988: PPUSH
23989: CALL_OW 88
// YouLost ( Dismissed ) ;
23993: LD_STRING Dismissed
23995: PPUSH
23996: CALL_OW 104
// end ; InGameOff ;
24000: CALL_OW 9
// wait ( 0 0$6 ) ;
24004: LD_INT 210
24006: PPUSH
24007: CALL_OW 67
// end ;
24011: END
// every 0 0$01 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) do
24012: LD_INT 8
24014: PPUSH
24015: LD_INT 22
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 21
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 70
24043: PUSH
24044: LD_INT 0
24046: GREATER
24047: PUSH
24048: LD_EXP 17
24052: PPUSH
24053: CALL_OW 302
24057: AND
24058: IFFALSE 24255
24060: GO 24062
24062: DISABLE
// begin enable ;
24063: ENABLE
// InGameOn ;
24064: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24068: LD_INT 22
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 21
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: PPUSH
24097: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
24101: LD_INT 8
24103: PPUSH
24104: LD_INT 22
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 21
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PPUSH
24128: CALL_OW 70
24132: PPUSH
24133: LD_INT 71
24135: PPUSH
24136: LD_INT 63
24138: PPUSH
24139: CALL_OW 111
// if powellWarm = 0 then
24143: LD_EXP 64
24147: PUSH
24148: LD_INT 0
24150: EQUAL
24151: IFFALSE 24179
// begin Say ( Powell , DBack1-Pow-1 ) ;
24153: LD_EXP 17
24157: PPUSH
24158: LD_STRING DBack1-Pow-1
24160: PPUSH
24161: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24165: LD_ADDR_EXP 64
24169: PUSH
24170: LD_EXP 64
24174: PUSH
24175: LD_INT 1
24177: PLUS
24178: ST_TO_ADDR
// end ; if powellWarm = 1 then
24179: LD_EXP 64
24183: PUSH
24184: LD_INT 1
24186: EQUAL
24187: IFFALSE 24215
// begin Say ( Powell , DBack2-Pow-1 ) ;
24189: LD_EXP 17
24193: PPUSH
24194: LD_STRING DBack2-Pow-1
24196: PPUSH
24197: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24201: LD_ADDR_EXP 64
24205: PUSH
24206: LD_EXP 64
24210: PUSH
24211: LD_INT 1
24213: PLUS
24214: ST_TO_ADDR
// end ; if powellWarm = 2 then
24215: LD_EXP 64
24219: PUSH
24220: LD_INT 2
24222: EQUAL
24223: IFFALSE 24244
// begin Say ( Powell , DBack3-Pow-1 ) ;
24225: LD_EXP 17
24229: PPUSH
24230: LD_STRING DBack3-Pow-1
24232: PPUSH
24233: CALL_OW 88
// YouLost ( Dismissed ) ;
24237: LD_STRING Dismissed
24239: PPUSH
24240: CALL_OW 104
// end ; InGameOff ;
24244: CALL_OW 9
// wait ( 0 0$6 ) ;
24248: LD_INT 210
24250: PPUSH
24251: CALL_OW 67
// end ;
24255: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
24256: LD_EXP 62
24260: PUSH
24261: LD_INT 1
24263: EQUAL
24264: IFFALSE 24313
24266: GO 24268
24268: DISABLE
24269: LD_INT 0
24271: PPUSH
// begin enable ;
24272: ENABLE
// for i = 1 to amUnitsAttack do
24273: LD_ADDR_VAR 0 1
24277: PUSH
24278: DOUBLE
24279: LD_INT 1
24281: DEC
24282: ST_TO_ADDR
24283: LD_EXP 59
24287: PUSH
24288: FOR_TO
24289: IFFALSE 24311
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
24291: LD_INT 8
24293: PPUSH
24294: LD_EXP 59
24298: PUSH
24299: LD_VAR 0 1
24303: ARRAY
24304: PPUSH
24305: CALL_OW 471
24309: GO 24288
24311: POP
24312: POP
// end ;
24313: PPOPN 1
24315: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
24316: LD_INT 22
24318: PUSH
24319: LD_INT 4
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 21
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 3
24338: PUSH
24339: LD_INT 58
24341: PUSH
24342: EMPTY
24343: LIST
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: PPUSH
24354: CALL_OW 69
24358: PUSH
24359: LD_INT 0
24361: EQUAL
24362: PUSH
24363: LD_EXP 62
24367: PUSH
24368: LD_INT 1
24370: EQUAL
24371: AND
24372: IFFALSE 24543
24374: GO 24376
24376: DISABLE
// begin powellAttacks = 2 ;
24377: LD_ADDR_EXP 62
24381: PUSH
24382: LD_INT 2
24384: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
24385: LD_INT 85
24387: PPUSH
24388: LD_INT 3
24390: PPUSH
24391: LD_INT 3
24393: PPUSH
24394: LD_INT 1
24396: PPUSH
24397: LD_INT 5
24399: PUSH
24400: LD_INT 7
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: PPUSH
24410: LD_INT 2
24412: PPUSH
24413: CALL_OW 12
24417: ARRAY
24418: PPUSH
24419: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
24423: LD_INT 85
24425: PPUSH
24426: LD_INT 3
24428: PPUSH
24429: LD_INT 3
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: LD_INT 5
24437: PUSH
24438: LD_INT 7
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: PPUSH
24448: LD_INT 2
24450: PPUSH
24451: CALL_OW 12
24455: ARRAY
24456: PPUSH
24457: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
24461: LD_INT 85
24463: PPUSH
24464: LD_INT 3
24466: PPUSH
24467: LD_INT 3
24469: PPUSH
24470: LD_INT 1
24472: PPUSH
24473: LD_INT 5
24475: PUSH
24476: LD_INT 7
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: PPUSH
24486: LD_INT 2
24488: PPUSH
24489: CALL_OW 12
24493: ARRAY
24494: PPUSH
24495: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
24499: LD_INT 85
24501: PPUSH
24502: LD_INT 5
24504: PPUSH
24505: LD_INT 3
24507: PPUSH
24508: LD_INT 1
24510: PPUSH
24511: LD_INT 6
24513: PPUSH
24514: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
24518: LD_ADDR_EXP 66
24522: PUSH
24523: LD_INT 85
24525: PPUSH
24526: LD_INT 3
24528: PPUSH
24529: LD_INT 3
24531: PPUSH
24532: LD_INT 1
24534: PPUSH
24535: LD_INT 3
24537: PPUSH
24538: CALL_OW 185
24542: ST_TO_ADDR
// end ;
24543: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
24544: LD_INT 22
24546: PUSH
24547: LD_INT 4
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: LD_INT 58
24569: PUSH
24570: EMPTY
24571: LIST
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: PPUSH
24582: CALL_OW 69
24586: PUSH
24587: LD_INT 5
24589: GREATEREQUAL
24590: PUSH
24591: LD_EXP 65
24595: PUSH
24596: LD_INT 1
24598: EQUAL
24599: AND
24600: IFFALSE 24613
24602: GO 24604
24604: DISABLE
// startAttacks = 0 ;
24605: LD_ADDR_EXP 65
24609: PUSH
24610: LD_INT 0
24612: ST_TO_ADDR
24613: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
24614: LD_INT 22
24616: PUSH
24617: LD_INT 4
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 21
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 3
24636: PUSH
24637: LD_INT 58
24639: PUSH
24640: EMPTY
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: PPUSH
24652: CALL_OW 69
24656: PUSH
24657: LD_INT 5
24659: GREATEREQUAL
24660: PUSH
24661: LD_INT 22
24663: PUSH
24664: LD_INT 6
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 21
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 24
24683: PUSH
24684: LD_INT 250
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: PPUSH
24696: CALL_OW 69
24700: PUSH
24701: LD_INT 0
24703: EQUAL
24704: AND
24705: PUSH
24706: LD_EXP 65
24710: PUSH
24711: LD_INT 0
24713: EQUAL
24714: AND
24715: PUSH
24716: LD_EXP 62
24720: PUSH
24721: LD_INT 2
24723: EQUAL
24724: AND
24725: IFFALSE 25634
24727: GO 24729
24729: DISABLE
24730: LD_INT 0
24732: PPUSH
24733: PPUSH
24734: PPUSH
24735: PPUSH
// begin powellAttacks = 3 ;
24736: LD_ADDR_EXP 62
24740: PUSH
24741: LD_INT 3
24743: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
24744: LD_ADDR_VAR 0 1
24748: PUSH
24749: DOUBLE
24750: LD_INT 1
24752: DEC
24753: ST_TO_ADDR
24754: LD_EXP 59
24758: PUSH
24759: FOR_TO
24760: IFFALSE 24782
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
24762: LD_INT 8
24764: PPUSH
24765: LD_EXP 59
24769: PUSH
24770: LD_VAR 0 1
24774: ARRAY
24775: PPUSH
24776: CALL_OW 472
24780: GO 24759
24782: POP
24783: POP
// wait ( 0 0$5 ) ;
24784: LD_INT 175
24786: PPUSH
24787: CALL_OW 67
// Video ( true ) ;
24791: LD_INT 1
24793: PPUSH
24794: CALL 6593 0 1
// CenterNowOnUnits ( Powell ) ;
24798: LD_EXP 17
24802: PPUSH
24803: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
24807: LD_EXP 17
24811: PPUSH
24812: LD_INT 45
24814: PPUSH
24815: LD_INT 64
24817: PPUSH
24818: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
24822: LD_EXP 17
24826: PPUSH
24827: LD_INT 46
24829: PPUSH
24830: LD_INT 66
24832: PPUSH
24833: CALL_OW 178
// for i = 5 to 8 do
24837: LD_ADDR_VAR 0 1
24841: PUSH
24842: DOUBLE
24843: LD_INT 5
24845: DEC
24846: ST_TO_ADDR
24847: LD_INT 8
24849: PUSH
24850: FOR_TO
24851: IFFALSE 24997
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
24853: LD_EXP 59
24857: PUSH
24858: LD_VAR 0 1
24862: ARRAY
24863: PPUSH
24864: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
24868: LD_EXP 59
24872: PUSH
24873: LD_VAR 0 1
24877: ARRAY
24878: PPUSH
24879: CALL_OW 121
// wait ( 0 0$1 ) ;
24883: LD_INT 35
24885: PPUSH
24886: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
24890: LD_EXP 59
24894: PUSH
24895: LD_VAR 0 1
24899: ARRAY
24900: PPUSH
24901: LD_INT 92
24903: PPUSH
24904: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
24908: LD_EXP 59
24912: PUSH
24913: LD_VAR 0 1
24917: ARRAY
24918: PPUSH
24919: LD_INT 1
24921: PPUSH
24922: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
24926: LD_EXP 59
24930: PUSH
24931: LD_VAR 0 1
24935: ARRAY
24936: PPUSH
24937: CALL_OW 182
// wait ( 0 0$1 ) ;
24941: LD_INT 35
24943: PPUSH
24944: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
24948: LD_EXP 59
24952: PUSH
24953: LD_VAR 0 1
24957: ARRAY
24958: PPUSH
24959: LD_INT 43
24961: PUSH
24962: LD_VAR 0 1
24966: PLUS
24967: PPUSH
24968: LD_INT 66
24970: PPUSH
24971: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
24975: LD_EXP 59
24979: PUSH
24980: LD_VAR 0 1
24984: ARRAY
24985: PPUSH
24986: LD_EXP 17
24990: PPUSH
24991: CALL_OW 179
// end ;
24995: GO 24850
24997: POP
24998: POP
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 22
25006: PUSH
25007: LD_INT 4
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 21
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 56
25026: PUSH
25027: EMPTY
25028: LIST
25029: PUSH
25030: LD_INT 3
25032: PUSH
25033: LD_INT 60
25035: PUSH
25036: EMPTY
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: PPUSH
25049: CALL_OW 69
25053: PUSH
25054: LD_EXP 17
25058: PUSH
25059: EMPTY
25060: LIST
25061: DIFF
25062: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
25063: LD_VAR 0 3
25067: PPUSH
25068: LD_INT 92
25070: PPUSH
25071: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
25075: LD_VAR 0 3
25079: PPUSH
25080: LD_INT 1
25082: PPUSH
25083: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
25087: LD_EXP 17
25091: PPUSH
25092: LD_STRING D5-Pow-1
25094: PPUSH
25095: CALL_OW 88
// for i = 1 to amUnitsAttack do
25099: LD_ADDR_VAR 0 1
25103: PUSH
25104: DOUBLE
25105: LD_INT 1
25107: DEC
25108: ST_TO_ADDR
25109: LD_EXP 59
25113: PUSH
25114: FOR_TO
25115: IFFALSE 25160
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
25117: LD_EXP 59
25121: PUSH
25122: LD_VAR 0 1
25126: ARRAY
25127: PPUSH
25128: CALL_OW 258
25132: PUSH
25133: LD_INT 1
25135: EQUAL
25136: IFFALSE 25158
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
25138: LD_EXP 59
25142: PUSH
25143: LD_VAR 0 1
25147: ARRAY
25148: PPUSH
25149: LD_STRING D5-Sol2-1
25151: PPUSH
25152: CALL_OW 88
// break ;
25156: GO 25160
// end ;
25158: GO 25114
25160: POP
25161: POP
// Say ( Powell , D5-Pow-2 ) ;
25162: LD_EXP 17
25166: PPUSH
25167: LD_STRING D5-Pow-2
25169: PPUSH
25170: CALL_OW 88
// for i = 1 to amUnitsAttack do
25174: LD_ADDR_VAR 0 1
25178: PUSH
25179: DOUBLE
25180: LD_INT 1
25182: DEC
25183: ST_TO_ADDR
25184: LD_EXP 59
25188: PUSH
25189: FOR_TO
25190: IFFALSE 25235
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
25192: LD_EXP 59
25196: PUSH
25197: LD_VAR 0 1
25201: ARRAY
25202: PPUSH
25203: CALL_OW 258
25207: PUSH
25208: LD_INT 1
25210: EQUAL
25211: IFFALSE 25233
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
25213: LD_EXP 59
25217: PUSH
25218: LD_VAR 0 1
25222: ARRAY
25223: PPUSH
25224: LD_STRING D5-Sol2-2
25226: PPUSH
25227: CALL_OW 88
// break ;
25231: GO 25235
// end ;
25233: GO 25189
25235: POP
25236: POP
// Say ( Powell , D5-Pow-3 ) ;
25237: LD_EXP 17
25241: PPUSH
25242: LD_STRING D5-Pow-3
25244: PPUSH
25245: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
25249: LD_INT 22
25251: PUSH
25252: LD_INT 4
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 21
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 3
25271: PUSH
25272: LD_INT 58
25274: PUSH
25275: EMPTY
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: PPUSH
25287: CALL_OW 69
25291: PPUSH
25292: LD_INT 59
25294: PPUSH
25295: LD_INT 21
25297: PPUSH
25298: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
25302: LD_EXP 59
25306: PPUSH
25307: LD_INT 59
25309: PPUSH
25310: LD_INT 21
25312: PPUSH
25313: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
25317: LD_INT 61
25319: PPUSH
25320: LD_INT 35
25322: PPUSH
25323: CALL_OW 84
// wait ( 0 0$15 ) ;
25327: LD_INT 525
25329: PPUSH
25330: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
25334: LD_EXP 17
25338: PPUSH
25339: LD_STRING D5a-Pow-1
25341: PPUSH
25342: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
25346: LD_EXP 17
25350: PPUSH
25351: LD_STRING D5a-Pow-1a
25353: PPUSH
25354: CALL_OW 88
// wait ( 0 0$2 ) ;
25358: LD_INT 70
25360: PPUSH
25361: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
25365: LD_EXP 17
25369: PPUSH
25370: LD_STRING D5a-Pow-1b
25372: PPUSH
25373: CALL_OW 88
// wait ( 0 0$3 ) ;
25377: LD_INT 105
25379: PPUSH
25380: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
25384: LD_EXP 17
25388: PPUSH
25389: LD_STRING D5a-Pow-1c
25391: PPUSH
25392: CALL_OW 88
// wait ( 0 0$1 ) ;
25396: LD_INT 35
25398: PPUSH
25399: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
25403: LD_EXP 17
25407: PPUSH
25408: LD_STRING D5a-Pow-1d
25410: PPUSH
25411: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25415: LD_INT 35
25417: PPUSH
25418: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
25422: LD_INT 22
25424: PUSH
25425: LD_INT 4
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 3
25444: PUSH
25445: LD_INT 58
25447: PUSH
25448: EMPTY
25449: LIST
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: PPUSH
25460: CALL_OW 69
25464: PPUSH
25465: LD_INT 59
25467: PPUSH
25468: LD_INT 21
25470: PPUSH
25471: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
25475: LD_EXP 59
25479: PPUSH
25480: LD_INT 59
25482: PPUSH
25483: LD_INT 21
25485: PPUSH
25486: CALL_OW 114
// until amUnitsAttack = [ ] ;
25490: LD_EXP 59
25494: PUSH
25495: EMPTY
25496: EQUAL
25497: IFFALSE 25415
// CenterNowOnUnits ( Powell ) ;
25499: LD_EXP 17
25503: PPUSH
25504: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
25508: LD_ADDR_VAR 0 3
25512: PUSH
25513: LD_INT 22
25515: PUSH
25516: LD_INT 4
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 21
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PPUSH
25537: CALL_OW 69
25541: PUSH
25542: LD_EXP 17
25546: PUSH
25547: EMPTY
25548: LIST
25549: DIFF
25550: ST_TO_ADDR
// for i in powellPeople do
25551: LD_ADDR_VAR 0 1
25555: PUSH
25556: LD_VAR 0 3
25560: PUSH
25561: FOR_IN
25562: IFFALSE 25591
// if GetSex ( i ) = sex_male then
25564: LD_VAR 0 1
25568: PPUSH
25569: CALL_OW 258
25573: PUSH
25574: LD_INT 1
25576: EQUAL
25577: IFFALSE 25589
// sold = i ;
25579: LD_ADDR_VAR 0 2
25583: PUSH
25584: LD_VAR 0 1
25588: ST_TO_ADDR
25589: GO 25561
25591: POP
25592: POP
// Say ( sold , D6-Sol3-1 ) ;
25593: LD_VAR 0 2
25597: PPUSH
25598: LD_STRING D6-Sol3-1
25600: PPUSH
25601: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
25605: LD_EXP 17
25609: PPUSH
25610: LD_STRING D6-Pow-1
25612: PPUSH
25613: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
25617: LD_INT 139
25619: PUSH
25620: LD_INT 138
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PPUSH
25627: LD_INT 12
25629: PPUSH
25630: CALL_OW 113
// end ;
25634: PPOPN 4
25636: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
25637: LD_EXP 62
25641: PUSH
25642: LD_INT 3
25644: EQUAL
25645: PUSH
25646: LD_INT 12
25648: PPUSH
25649: LD_INT 22
25651: PUSH
25652: LD_INT 8
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 21
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PPUSH
25673: CALL_OW 70
25677: PUSH
25678: LD_INT 2
25680: EQUAL
25681: AND
25682: IFFALSE 25843
25684: GO 25686
25686: DISABLE
25687: LD_INT 0
25689: PPUSH
25690: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
25691: LD_INT 8
25693: PPUSH
25694: LD_INT 1
25696: PPUSH
25697: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
25701: LD_INT 4
25703: PPUSH
25704: LD_INT 8
25706: PPUSH
25707: LD_INT 1
25709: PPUSH
25710: LD_INT 1
25712: PPUSH
25713: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
25717: LD_ADDR_VAR 0 1
25721: PUSH
25722: LD_INT 92
25724: PPUSH
25725: CALL_OW 313
25729: PUSH
25730: FOR_IN
25731: IFFALSE 25762
// if GetSex ( i ) = sex_male then
25733: LD_VAR 0 1
25737: PPUSH
25738: CALL_OW 258
25742: PUSH
25743: LD_INT 1
25745: EQUAL
25746: IFFALSE 25760
// begin tmp = i ;
25748: LD_ADDR_VAR 0 2
25752: PUSH
25753: LD_VAR 0 1
25757: ST_TO_ADDR
// break ;
25758: GO 25762
// end ;
25760: GO 25730
25762: POP
25763: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
25764: LD_INT 92
25766: PPUSH
25767: CALL_OW 313
25771: PPUSH
25772: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
25776: LD_VAR 0 2
25780: PPUSH
25781: LD_STRING D6-Sol3-2
25783: PPUSH
25784: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
25788: LD_INT 139
25790: PUSH
25791: LD_INT 138
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PPUSH
25798: LD_INT 85
25800: PPUSH
25801: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
25805: LD_INT 4
25807: PPUSH
25808: LD_INT 8
25810: PPUSH
25811: LD_INT 2
25813: PPUSH
25814: LD_INT 1
25816: PPUSH
25817: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
25821: LD_INT 8
25823: PPUSH
25824: LD_INT 8
25826: PPUSH
25827: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
25831: LD_EXP 17
25835: PPUSH
25836: LD_STRING D6-Pow-2
25838: PPUSH
25839: CALL_OW 88
// end ;
25843: PPOPN 2
25845: END
// every 0 0$1 trigger IsDead ( AmFact ) do var i , tmp ;
25846: LD_INT 85
25848: PPUSH
25849: CALL_OW 301
25853: IFFALSE 26145
25855: GO 25857
25857: DISABLE
25858: LD_INT 0
25860: PPUSH
25861: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
25862: LD_ADDR_VAR 0 1
25866: PUSH
25867: LD_INT 22
25869: PUSH
25870: LD_INT 4
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 21
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 56
25889: PUSH
25890: EMPTY
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: PPUSH
25898: CALL_OW 69
25902: PUSH
25903: LD_EXP 17
25907: PUSH
25908: EMPTY
25909: LIST
25910: DIFF
25911: PUSH
25912: FOR_IN
25913: IFFALSE 25944
// if GetSex ( i ) = sex_male then
25915: LD_VAR 0 1
25919: PPUSH
25920: CALL_OW 258
25924: PUSH
25925: LD_INT 1
25927: EQUAL
25928: IFFALSE 25942
// begin tmp = i ;
25930: LD_ADDR_VAR 0 2
25934: PUSH
25935: LD_VAR 0 1
25939: ST_TO_ADDR
// break ;
25940: GO 25944
// end ;
25942: GO 25912
25944: POP
25945: POP
// Say ( Powell , D6a-Pow-1 ) ;
25946: LD_EXP 17
25950: PPUSH
25951: LD_STRING D6a-Pow-1
25953: PPUSH
25954: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_STRING D6a-Sol3-1
25965: PPUSH
25966: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
25970: LD_EXP 17
25974: PPUSH
25975: LD_VAR 0 2
25979: PPUSH
25980: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
25984: LD_EXP 17
25988: PPUSH
25989: LD_STRING D6a-Pow-2
25991: PPUSH
25992: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_STRING D6a-Sol3-2
26003: PPUSH
26004: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
26008: LD_EXP 17
26012: PPUSH
26013: LD_STRING D6a-Pow-3
26015: PPUSH
26016: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
26020: LD_EXP 17
26024: PPUSH
26025: LD_EXP 66
26029: PPUSH
26030: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
26034: LD_INT 35
26036: PPUSH
26037: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
26041: LD_EXP 17
26045: PPUSH
26046: LD_EXP 66
26050: PPUSH
26051: CALL_OW 120
// until IsInUnit ( Powell ) ;
26055: LD_EXP 17
26059: PPUSH
26060: CALL_OW 310
26064: IFFALSE 26034
// wait ( 0 0$1 ) ;
26066: LD_INT 35
26068: PPUSH
26069: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
26073: LD_EXP 66
26077: PPUSH
26078: LD_INT 77
26080: PPUSH
26081: LD_INT 64
26083: PPUSH
26084: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
26088: LD_EXP 66
26092: PPUSH
26093: LD_INT 91
26095: PPUSH
26096: LD_INT 61
26098: PPUSH
26099: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
26103: LD_EXP 66
26107: PPUSH
26108: LD_INT 74
26110: PPUSH
26111: LD_INT 25
26113: PPUSH
26114: CALL_OW 171
// centerPowell = 1 ;
26118: LD_ADDR_EXP 67
26122: PUSH
26123: LD_INT 1
26125: ST_TO_ADDR
// wait ( 0 0$15 ) ;
26126: LD_INT 525
26128: PPUSH
26129: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
26133: LD_EXP 17
26137: PPUSH
26138: LD_STRING D6b-Pow-1
26140: PPUSH
26141: CALL_OW 88
// end ;
26145: PPOPN 2
26147: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
26148: LD_EXP 66
26152: PPUSH
26153: LD_INT 13
26155: PPUSH
26156: CALL_OW 308
26160: PUSH
26161: LD_EXP 62
26165: PUSH
26166: LD_INT 3
26168: EQUAL
26169: AND
26170: IFFALSE 26312
26172: GO 26174
26174: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
26175: LD_EXP 66
26179: PPUSH
26180: LD_INT 250
26182: PPUSH
26183: CALL_OW 234
// DialogueOn ;
26187: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
26191: LD_EXP 17
26195: PPUSH
26196: LD_STRING D6b-Pow-1a
26198: PPUSH
26199: CALL_OW 88
// DialogueOff ;
26203: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
26207: LD_EXP 17
26211: PPUSH
26212: LD_INT 22
26214: PUSH
26215: LD_INT 8
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 34
26224: PUSH
26225: LD_INT 29
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 50
26234: PUSH
26235: EMPTY
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 69
26247: PUSH
26248: LD_INT 1
26250: ARRAY
26251: PPUSH
26252: CALL_OW 120
// wait ( 0 0$1 ) ;
26256: LD_INT 35
26258: PPUSH
26259: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
26263: LD_EXP 17
26267: PPUSH
26268: LD_INT 22
26270: PUSH
26271: LD_INT 8
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 34
26280: PUSH
26281: LD_INT 29
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 50
26290: PUSH
26291: EMPTY
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: LIST
26298: PPUSH
26299: CALL_OW 69
26303: PUSH
26304: LD_INT 1
26306: ARRAY
26307: PPUSH
26308: CALL_OW 120
// end ;
26312: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
26313: LD_INT 22
26315: PUSH
26316: LD_INT 4
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 34
26325: PUSH
26326: LD_INT 29
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: IFFALSE 26713
26343: GO 26345
26345: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
26346: LD_ADDR_EXP 68
26350: PUSH
26351: LD_INT 22
26353: PUSH
26354: LD_INT 4
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 34
26363: PUSH
26364: LD_INT 29
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 69
26379: PUSH
26380: LD_INT 1
26382: ARRAY
26383: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
26384: LD_INT 8
26386: PPUSH
26387: LD_INT 4
26389: PPUSH
26390: LD_INT 1
26392: PPUSH
26393: LD_INT 1
26395: PPUSH
26396: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
26400: LD_EXP 68
26404: PPUSH
26405: LD_INT 80
26407: PPUSH
26408: LD_INT 19
26410: PPUSH
26411: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
26415: LD_EXP 68
26419: PPUSH
26420: LD_INT 74
26422: PPUSH
26423: LD_INT 15
26425: PPUSH
26426: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
26430: LD_EXP 68
26434: PPUSH
26435: LD_INT 72
26437: PPUSH
26438: LD_INT 19
26440: PPUSH
26441: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
26445: LD_EXP 68
26449: PPUSH
26450: LD_INT 78
26452: PPUSH
26453: LD_INT 24
26455: PPUSH
26456: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
26460: LD_EXP 68
26464: PPUSH
26465: LD_INT 77
26467: PPUSH
26468: LD_INT 20
26470: PPUSH
26471: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
26475: LD_EXP 68
26479: PPUSH
26480: LD_INT 78
26482: PPUSH
26483: LD_INT 15
26485: PPUSH
26486: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
26490: LD_EXP 17
26494: PPUSH
26495: LD_STRING D6b-Pow-1b
26497: PPUSH
26498: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
26502: LD_INT 22
26504: PUSH
26505: LD_INT 8
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 21
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 25
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 26
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: PPUSH
26548: CALL_OW 69
26552: PUSH
26553: LD_INT 1
26555: ARRAY
26556: PPUSH
26557: LD_STRING D6b-ArSol1-1
26559: PPUSH
26560: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
26564: LD_INT 22
26566: PUSH
26567: LD_INT 8
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 21
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 25
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 26
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 69
26614: PUSH
26615: LD_INT 2
26617: ARRAY
26618: PPUSH
26619: LD_STRING D6b-ArSol2-1
26621: PPUSH
26622: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
26626: LD_EXP 17
26630: PPUSH
26631: LD_STRING D6b-Pow-2
26633: PPUSH
26634: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26638: LD_INT 35
26640: PPUSH
26641: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
26645: LD_EXP 68
26649: PPUSH
26650: LD_INT 78
26652: PPUSH
26653: LD_INT 15
26655: PPUSH
26656: CALL_OW 297
26660: PUSH
26661: LD_INT 2
26663: LESS
26664: IFFALSE 26638
// wait ( 0 0$1 ) ;
26666: LD_INT 35
26668: PPUSH
26669: CALL_OW 67
// DialogueOn ;
26673: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
26677: LD_EXP 17
26681: PPUSH
26682: LD_STRING D6b-Pow-2a
26684: PPUSH
26685: CALL_OW 88
// DialogueOff ;
26689: CALL_OW 7
// centerPowell = 0 ;
26693: LD_ADDR_EXP 67
26697: PUSH
26698: LD_INT 0
26700: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
26701: LD_EXP 68
26705: PPUSH
26706: LD_INT 105
26708: PPUSH
26709: CALL_OW 115
// end ;
26713: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
26714: LD_INT 105
26716: PPUSH
26717: CALL_OW 301
26721: PUSH
26722: LD_EXP 62
26726: PUSH
26727: LD_INT 3
26729: EQUAL
26730: AND
26731: IFFALSE 27555
26733: GO 26735
26735: DISABLE
26736: LD_INT 0
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
26742: LD_ADDR_VAR 0 2
26746: PUSH
26747: LD_INT 22
26749: PUSH
26750: LD_INT 4
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 21
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 26
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: PPUSH
26782: CALL_OW 69
26786: PUSH
26787: LD_EXP 1
26791: PUSH
26792: LD_EXP 3
26796: PUSH
26797: LD_EXP 21
26801: PUSH
26802: LD_EXP 22
26806: PUSH
26807: LD_EXP 23
26811: PUSH
26812: LD_EXP 4
26816: PUSH
26817: LD_EXP 5
26821: PUSH
26822: LD_EXP 6
26826: PUSH
26827: LD_EXP 7
26831: PUSH
26832: LD_EXP 8
26836: PUSH
26837: LD_EXP 9
26841: PUSH
26842: LD_EXP 10
26846: PUSH
26847: LD_EXP 11
26851: PUSH
26852: LD_EXP 12
26856: PUSH
26857: LD_EXP 13
26861: PUSH
26862: LD_EXP 14
26866: PUSH
26867: LD_EXP 15
26871: PUSH
26872: LD_EXP 17
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: DIFF
26897: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
26898: LD_INT 49
26900: PPUSH
26901: LD_INT 66
26903: PPUSH
26904: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
26908: LD_VAR 0 2
26912: PUSH
26913: LD_INT 1
26915: ARRAY
26916: PPUSH
26917: LD_STRING D6c-Sol3-1
26919: PPUSH
26920: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
26924: LD_EXP 1
26928: PPUSH
26929: LD_STRING D6c-JMM-1
26931: PPUSH
26932: CALL_OW 88
// if IsOk ( Cyrus ) then
26936: LD_EXP 7
26940: PPUSH
26941: CALL_OW 302
26945: IFFALSE 26959
// Say ( Cyrus , D6c-Cyrus-1 ) ;
26947: LD_EXP 7
26951: PPUSH
26952: LD_STRING D6c-Cyrus-1
26954: PPUSH
26955: CALL_OW 88
// if IsOk ( Bobby ) then
26959: LD_EXP 6
26963: PPUSH
26964: CALL_OW 302
26968: IFFALSE 26982
// Say ( Bobby , D6c-Bobby-1 ) ;
26970: LD_EXP 6
26974: PPUSH
26975: LD_STRING D6c-Bobby-1
26977: PPUSH
26978: CALL_OW 88
// if IsOk ( Cornel ) then
26982: LD_EXP 12
26986: PPUSH
26987: CALL_OW 302
26991: IFFALSE 27005
// Say ( Cornel , D6c-Corn-1 ) ;
26993: LD_EXP 12
26997: PPUSH
26998: LD_STRING D6c-Corn-1
27000: PPUSH
27001: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
27005: LD_VAR 0 2
27009: PUSH
27010: LD_INT 2
27012: ARRAY
27013: PPUSH
27014: LD_STRING D6c-Sol1-1
27016: PPUSH
27017: CALL_OW 88
// if IsOk ( Lisa ) then
27021: LD_EXP 4
27025: PPUSH
27026: CALL_OW 302
27030: IFFALSE 27044
// Say ( Lisa , D6c-Lisa-1 ) ;
27032: LD_EXP 4
27036: PPUSH
27037: LD_STRING D6c-Lisa-1
27039: PPUSH
27040: CALL_OW 88
// if IsOk ( Gary ) then
27044: LD_EXP 13
27048: PPUSH
27049: CALL_OW 302
27053: IFFALSE 27067
// Say ( Gary , D6c-Gary-1 ) ;
27055: LD_EXP 13
27059: PPUSH
27060: LD_STRING D6c-Gary-1
27062: PPUSH
27063: CALL_OW 88
// if IsOK ( Donaldson ) then
27067: LD_EXP 5
27071: PPUSH
27072: CALL_OW 302
27076: IFFALSE 27090
// Say ( Donaldson , D6c-Don-1 ) ;
27078: LD_EXP 5
27082: PPUSH
27083: LD_STRING D6c-Don-1
27085: PPUSH
27086: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
27090: LD_VAR 0 2
27094: PUSH
27095: LD_INT 3
27097: ARRAY
27098: PPUSH
27099: LD_STRING D6c-Sol2-1
27101: PPUSH
27102: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
27106: LD_INT 22
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 21
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PPUSH
27130: CALL_OW 69
27134: PPUSH
27135: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
27139: LD_INT 22
27141: PUSH
27142: LD_INT 4
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 21
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 69
27167: PPUSH
27168: CALL_OW 122
// wait ( 0 0$1 ) ;
27172: LD_INT 35
27174: PPUSH
27175: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 21
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PPUSH
27208: CALL_OW 69
27212: PUSH
27213: LD_EXP 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: DIFF
27221: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
27222: LD_ADDR_VAR 0 4
27226: PUSH
27227: LD_INT 22
27229: PUSH
27230: LD_INT 4
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 21
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 69
27255: ST_TO_ADDR
// for i := 1 to tmp2 do
27256: LD_ADDR_VAR 0 1
27260: PUSH
27261: DOUBLE
27262: LD_INT 1
27264: DEC
27265: ST_TO_ADDR
27266: LD_VAR 0 4
27270: PUSH
27271: FOR_TO
27272: IFFALSE 27323
// begin ComMoveXY ( tmp2 [ i ] , 41 + i , 63 ) ;
27274: LD_VAR 0 4
27278: PUSH
27279: LD_VAR 0 1
27283: ARRAY
27284: PPUSH
27285: LD_INT 41
27287: PUSH
27288: LD_VAR 0 1
27292: PLUS
27293: PPUSH
27294: LD_INT 63
27296: PPUSH
27297: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
27301: LD_VAR 0 4
27305: PUSH
27306: LD_VAR 0 1
27310: ARRAY
27311: PPUSH
27312: LD_EXP 1
27316: PPUSH
27317: CALL_OW 179
// end ;
27321: GO 27271
27323: POP
27324: POP
// for i := 1 to tmp1 do
27325: LD_ADDR_VAR 0 1
27329: PUSH
27330: DOUBLE
27331: LD_INT 1
27333: DEC
27334: ST_TO_ADDR
27335: LD_VAR 0 3
27339: PUSH
27340: FOR_TO
27341: IFFALSE 27392
// begin ComMoveXY ( tmp1 [ i ] , 41 + i , 64 ) ;
27343: LD_VAR 0 3
27347: PUSH
27348: LD_VAR 0 1
27352: ARRAY
27353: PPUSH
27354: LD_INT 41
27356: PUSH
27357: LD_VAR 0 1
27361: PLUS
27362: PPUSH
27363: LD_INT 64
27365: PPUSH
27366: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
27370: LD_VAR 0 3
27374: PUSH
27375: LD_VAR 0 1
27379: ARRAY
27380: PPUSH
27381: LD_EXP 1
27385: PPUSH
27386: CALL_OW 179
// end ;
27390: GO 27340
27392: POP
27393: POP
// ComMoveXY ( JMM , 48 , 68 ) ;
27394: LD_EXP 1
27398: PPUSH
27399: LD_INT 48
27401: PPUSH
27402: LD_INT 68
27404: PPUSH
27405: CALL_OW 111
// AddComTurnXY ( JMM , 47 , 65 ) ;
27409: LD_EXP 1
27413: PPUSH
27414: LD_INT 47
27416: PPUSH
27417: LD_INT 65
27419: PPUSH
27420: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
27424: LD_INT 35
27426: PPUSH
27427: CALL_OW 67
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
27431: LD_EXP 1
27435: PPUSH
27436: LD_INT 48
27438: PPUSH
27439: LD_INT 68
27441: PPUSH
27442: CALL_OW 297
27446: PUSH
27447: LD_INT 2
27449: LESS
27450: IFFALSE 27424
// wait ( 0 0$2 ) ;
27452: LD_INT 70
27454: PPUSH
27455: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
27459: LD_VAR 0 2
27463: PUSH
27464: LD_INT 1
27466: ARRAY
27467: PPUSH
27468: LD_STRING D6c-Sol3-2
27470: PPUSH
27471: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
27475: LD_EXP 1
27479: PPUSH
27480: LD_STRING D6c-JMM-2
27482: PPUSH
27483: CALL_OW 88
// Video ( false ) ;
27487: LD_INT 0
27489: PPUSH
27490: CALL 6593 0 1
// centerPowell = 0 ;
27494: LD_ADDR_EXP 67
27498: PUSH
27499: LD_INT 0
27501: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
27502: LD_INT 22
27504: PUSH
27505: LD_INT 4
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PPUSH
27512: CALL_OW 69
27516: PPUSH
27517: LD_INT 1
27519: PPUSH
27520: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
27524: LD_STRING M2
27526: PPUSH
27527: CALL_OW 337
// timerStatus = 1 ;
27531: LD_ADDR_EXP 88
27535: PUSH
27536: LD_INT 1
27538: ST_TO_ADDR
// missionStage = 1 ;
27539: LD_ADDR_EXP 92
27543: PUSH
27544: LD_INT 1
27546: ST_TO_ADDR
// startAttacks = 1 ;
27547: LD_ADDR_EXP 65
27551: PUSH
27552: LD_INT 1
27554: ST_TO_ADDR
// end ;
27555: PPOPN 4
27557: END
// every 0 0$1 trigger centerPowell = 1 do
27558: LD_EXP 67
27562: PUSH
27563: LD_INT 1
27565: EQUAL
27566: IFFALSE 27849
27568: GO 27570
27570: DISABLE
// begin enable ;
27571: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
27572: LD_EXP 17
27576: PUSH
27577: LD_EXP 68
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: LD_INT 1000
27588: PPUSH
27589: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
27593: LD_INT 22
27595: PUSH
27596: LD_INT 4
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 34
27605: PUSH
27606: LD_INT 29
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 33
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: PPUSH
27628: CALL_OW 69
27632: PUSH
27633: LD_INT 0
27635: GREATER
27636: IFFALSE 27689
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
27638: LD_INT 22
27640: PUSH
27641: LD_INT 4
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 34
27650: PUSH
27651: LD_INT 29
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 33
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: LIST
27672: PPUSH
27673: CALL_OW 69
27677: PUSH
27678: LD_INT 1
27680: ARRAY
27681: PPUSH
27682: LD_INT 1000
27684: PPUSH
27685: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
27689: LD_INT 22
27691: PUSH
27692: LD_INT 8
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 34
27701: PUSH
27702: LD_INT 29
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 33
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: PPUSH
27724: CALL_OW 69
27728: PUSH
27729: LD_INT 0
27731: GREATER
27732: IFFALSE 27785
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
27734: LD_INT 22
27736: PUSH
27737: LD_INT 8
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 34
27746: PUSH
27747: LD_INT 29
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 33
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 69
27773: PUSH
27774: LD_INT 1
27776: ARRAY
27777: PPUSH
27778: LD_INT 1000
27780: PPUSH
27781: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
27785: LD_EXP 66
27789: PPUSH
27790: LD_INT 13
27792: PPUSH
27793: CALL_OW 308
27797: NOT
27798: IFFALSE 27812
// SetLives ( powellVeh , 1000 ) ;
27800: LD_EXP 66
27804: PPUSH
27805: LD_INT 1000
27807: PPUSH
27808: CALL_OW 234
// if not IsInUnit ( Powell ) then
27812: LD_EXP 17
27816: PPUSH
27817: CALL_OW 310
27821: NOT
27822: IFFALSE 27835
// CenterNowOnUnits ( Powell ) else
27824: LD_EXP 17
27828: PPUSH
27829: CALL_OW 87
27833: GO 27849
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
27835: LD_EXP 17
27839: PPUSH
27840: CALL_OW 310
27844: PPUSH
27845: CALL_OW 87
// end ;
27849: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
27850: LD_EXP 89
27854: PUSH
27855: LD_INT 560
27857: GREATEREQUAL
27858: IFFALSE 28070
27860: GO 27862
27862: DISABLE
// begin DialogueOn ;
27863: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
27867: LD_EXP 47
27871: PPUSH
27872: LD_STRING D7-Friend-1
27874: PPUSH
27875: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
27879: LD_EXP 1
27883: PPUSH
27884: LD_STRING D7-JMM-1
27886: PPUSH
27887: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
27891: LD_EXP 47
27895: PPUSH
27896: LD_STRING D7-Friend-2
27898: PPUSH
27899: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
27903: LD_EXP 1
27907: PPUSH
27908: LD_STRING D7-JMM-2
27910: PPUSH
27911: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
27915: LD_EXP 47
27919: PPUSH
27920: LD_STRING D7-Friend-3
27922: PPUSH
27923: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
27927: LD_EXP 1
27931: PPUSH
27932: LD_STRING D7-JMM-3
27934: PPUSH
27935: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
27939: LD_EXP 47
27943: PPUSH
27944: LD_STRING D7-Friend-4
27946: PPUSH
27947: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
27951: LD_EXP 1
27955: PPUSH
27956: LD_STRING D7-JMM-4
27958: PPUSH
27959: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
27963: LD_EXP 47
27967: PPUSH
27968: LD_STRING D7-Friend-5
27970: PPUSH
27971: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
27975: LD_EXP 1
27979: PPUSH
27980: LD_STRING D7-JMM-5
27982: PPUSH
27983: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
27987: LD_EXP 47
27991: PPUSH
27992: LD_STRING D7-Friend-6
27994: PPUSH
27995: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
27999: LD_EXP 1
28003: PPUSH
28004: LD_STRING D7-JMM-6
28006: PPUSH
28007: CALL_OW 88
// DialogueOff ;
28011: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
28015: LD_EXP 35
28019: PPUSH
28020: LD_INT 15
28022: PPUSH
28023: LD_INT 0
28025: PPUSH
28026: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
28030: LD_EXP 35
28034: PPUSH
28035: LD_INT 2
28037: PPUSH
28038: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
28042: LD_EXP 35
28046: PPUSH
28047: LD_INT 2
28049: PPUSH
28050: LD_INT 78
28052: PPUSH
28053: LD_INT 12
28055: PPUSH
28056: LD_INT 3
28058: PPUSH
28059: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
28063: LD_STRING Mlegion
28065: PPUSH
28066: CALL_OW 337
// end ;
28070: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
28071: LD_INT 22
28073: PUSH
28074: LD_INT 8
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 21
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 23
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: PPUSH
28106: CALL_OW 69
28110: PUSH
28111: LD_INT 6
28113: PUSH
28114: LD_INT 5
28116: PUSH
28117: LD_INT 4
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: LIST
28124: PUSH
28125: LD_OWVAR 67
28129: ARRAY
28130: LESSEQUAL
28131: IFFALSE 28445
28133: GO 28135
28135: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
28136: LD_EXP 30
28140: PPUSH
28141: LD_INT 19
28143: PPUSH
28144: LD_INT 0
28146: PPUSH
28147: CALL_OW 49
// KillUnit ( Kozlov ) ;
28151: LD_EXP 35
28155: PPUSH
28156: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
28160: LD_INT 22
28162: PUSH
28163: LD_INT 8
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 21
28172: PUSH
28173: LD_INT 3
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 23
28182: PUSH
28183: LD_INT 3
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 3
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: PPUSH
28206: CALL_OW 69
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PPUSH
28215: CALL_OW 66
// DialogueOn ;
28219: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
28223: LD_EXP 1
28227: PPUSH
28228: LD_STRING D13-JMM-1
28230: PPUSH
28231: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
28235: LD_EXP 30
28239: PPUSH
28240: LD_STRING D13-Kurt-1
28242: PPUSH
28243: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
28247: LD_EXP 1
28251: PPUSH
28252: LD_STRING D13-JMM-2
28254: PPUSH
28255: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
28259: LD_EXP 30
28263: PPUSH
28264: LD_STRING D13-Kurt-2a
28266: PPUSH
28267: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
28271: LD_EXP 1
28275: PPUSH
28276: LD_STRING D13-JMM-3
28278: PPUSH
28279: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
28283: LD_EXP 30
28287: PPUSH
28288: LD_STRING D13-Kurt-3
28290: PPUSH
28291: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
28295: LD_EXP 1
28299: PPUSH
28300: LD_STRING D13-JMM-4
28302: PPUSH
28303: CALL_OW 88
// DialogueOff ;
28307: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
28311: LD_INT 22
28313: PUSH
28314: LD_INT 8
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 50
28323: PUSH
28324: EMPTY
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: PPUSH
28336: LD_INT 1
28338: PPUSH
28339: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
28343: LD_INT 22
28345: PUSH
28346: LD_INT 8
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 3
28355: PUSH
28356: LD_INT 24
28358: PUSH
28359: LD_INT 250
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PPUSH
28374: CALL_OW 69
28378: PPUSH
28379: LD_INT 0
28381: PPUSH
28382: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
28386: LD_STRING MlegionOut
28388: PPUSH
28389: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
28393: LD_INT 8
28395: PPUSH
28396: LD_INT 1
28398: PPUSH
28399: LD_INT 1
28401: PPUSH
28402: LD_INT 1
28404: PPUSH
28405: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
28409: LD_EXP 47
28413: PPUSH
28414: LD_INT 30
28416: PPUSH
28417: LD_INT 0
28419: PPUSH
28420: CALL_OW 49
// wait ( 0 0$1 ) ;
28424: LD_INT 35
28426: PPUSH
28427: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
28431: LD_EXP 47
28435: PPUSH
28436: LD_EXP 1
28440: PPUSH
28441: CALL_OW 112
// end ;
28445: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
28446: LD_INT 1
28448: PPUSH
28449: LD_EXP 47
28453: PPUSH
28454: CALL_OW 292
28458: IFFALSE 28734
28460: GO 28462
28462: DISABLE
28463: LD_INT 0
28465: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
28466: LD_EXP 47
28470: PPUSH
28471: CALL_OW 87
// DialogueOn ;
28475: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
28479: LD_EXP 1
28483: PPUSH
28484: LD_STRING D14-JMM-1
28486: PPUSH
28487: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
28491: LD_EXP 47
28495: PPUSH
28496: LD_STRING D14-Friend-1
28498: PPUSH
28499: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
28503: LD_EXP 1
28507: PPUSH
28508: LD_STRING D14-JMM-2
28510: PPUSH
28511: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
28515: LD_EXP 47
28519: PPUSH
28520: LD_STRING D14-Friend-2
28522: PPUSH
28523: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
28527: LD_EXP 1
28531: PPUSH
28532: LD_STRING D14-JMM-3
28534: PPUSH
28535: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
28539: LD_EXP 47
28543: PPUSH
28544: LD_STRING D14-Friend-3
28546: PPUSH
28547: CALL_OW 88
// DialogueOff ;
28551: CALL_OW 7
// dec = Query ( Q14 ) ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_STRING Q14
28562: PPUSH
28563: CALL_OW 97
28567: ST_TO_ADDR
// if dec = 1 then
28568: LD_VAR 0 1
28572: PUSH
28573: LD_INT 1
28575: EQUAL
28576: IFFALSE 28610
// begin DialogueOn ;
28578: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
28582: LD_EXP 1
28586: PPUSH
28587: LD_STRING D14a-JMM-1
28589: PPUSH
28590: CALL_OW 88
// DialogueOff ;
28594: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
28598: LD_EXP 47
28602: PPUSH
28603: LD_INT 1
28605: PPUSH
28606: CALL_OW 235
// end ; if dec = 2 then
28610: LD_VAR 0 1
28614: PUSH
28615: LD_INT 2
28617: EQUAL
28618: IFFALSE 28652
// begin DialogueOn ;
28620: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
28624: LD_EXP 1
28628: PPUSH
28629: LD_STRING D14b-JMM-1
28631: PPUSH
28632: CALL_OW 88
// DialogueOff ;
28636: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
28640: LD_EXP 47
28644: PPUSH
28645: LD_INT 18
28647: PPUSH
28648: CALL_OW 113
// end ; if dec = 3 then
28652: LD_VAR 0 1
28656: PUSH
28657: LD_INT 3
28659: EQUAL
28660: IFFALSE 28734
// begin DialogueOn ;
28662: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
28666: LD_EXP 1
28670: PPUSH
28671: LD_STRING D14c-JMM-1
28673: PPUSH
28674: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
28678: LD_EXP 47
28682: PPUSH
28683: LD_STRING D14c-Friend-1
28685: PPUSH
28686: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
28690: LD_EXP 1
28694: PPUSH
28695: LD_STRING D14c-JMM-2
28697: PPUSH
28698: CALL_OW 88
// DialogueOff ;
28702: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
28706: LD_INT 8
28708: PPUSH
28709: LD_INT 1
28711: PPUSH
28712: LD_INT 2
28714: PPUSH
28715: LD_INT 1
28717: PPUSH
28718: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
28722: LD_EXP 47
28726: PPUSH
28727: LD_INT 18
28729: PPUSH
28730: CALL_OW 113
// end ; end ;
28734: PPOPN 1
28736: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
28737: LD_EXP 47
28741: PPUSH
28742: LD_INT 18
28744: PPUSH
28745: CALL_OW 308
28749: PUSH
28750: LD_EXP 47
28754: PPUSH
28755: CALL_OW 255
28759: PUSH
28760: LD_INT 8
28762: EQUAL
28763: AND
28764: IFFALSE 28778
28766: GO 28768
28768: DISABLE
// RemoveUnit ( LegionFriend ) ;
28769: LD_EXP 47
28773: PPUSH
28774: CALL_OW 64
28778: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
28779: LD_EXP 89
28783: PUSH
28784: LD_INT 31570
28786: GREATEREQUAL
28787: IFFALSE 28863
28789: GO 28791
28791: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
28792: LD_EXP 74
28796: PUSH
28797: LD_INT 1
28799: EQUAL
28800: PUSH
28801: LD_EXP 72
28805: PUSH
28806: EMPTY
28807: EQUAL
28808: AND
28809: IFFALSE 28815
// PrepareSupportFromKappa ;
28811: CALL 2376 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
28815: LD_EXP 74
28819: PUSH
28820: LD_INT 0
28822: EQUAL
28823: PUSH
28824: LD_EXP 75
28828: PUSH
28829: LD_INT 1
28831: EQUAL
28832: AND
28833: IFFALSE 28839
// PrepareAttackFromKappa ;
28835: CALL 5221 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
28839: LD_EXP 74
28843: PUSH
28844: LD_INT 0
28846: EQUAL
28847: PUSH
28848: LD_EXP 75
28852: PUSH
28853: LD_INT 0
28855: EQUAL
28856: AND
28857: IFFALSE 28863
// PrepareAttackFromKappa ;
28859: CALL 5221 0 0
// end ;
28863: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
28864: LD_INT 1
28866: PPUSH
28867: LD_EXP 34
28871: PPUSH
28872: CALL_OW 292
28876: IFFALSE 29144
28878: GO 28880
28880: DISABLE
// begin missionStage = 2 ;
28881: LD_ADDR_EXP 92
28885: PUSH
28886: LD_INT 2
28888: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
28889: LD_EXP 34
28893: PPUSH
28894: CALL_OW 87
// DialogueOn ;
28898: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
28902: LD_EXP 1
28906: PPUSH
28907: LD_STRING D10nB-JMM-1
28909: PPUSH
28910: CALL_OW 88
// if BurlakStatus = 1 then
28914: LD_EXP 69
28918: PUSH
28919: LD_INT 1
28921: EQUAL
28922: IFFALSE 28936
// Say ( Vsevolod , D10nB-Vse-1a ) ;
28924: LD_EXP 33
28928: PPUSH
28929: LD_STRING D10nB-Vse-1a
28931: PPUSH
28932: CALL_OW 88
// if BurlakStatus = 0 then
28936: LD_EXP 69
28940: PUSH
28941: LD_INT 0
28943: EQUAL
28944: IFFALSE 28958
// Say ( Vsevolod , D10nB-Vse-1 ) ;
28946: LD_EXP 33
28950: PPUSH
28951: LD_STRING D10nB-Vse-1
28953: PPUSH
28954: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
28958: LD_EXP 1
28962: PPUSH
28963: LD_STRING D10nB-JMM-2
28965: PPUSH
28966: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
28970: LD_EXP 74
28974: PUSH
28975: LD_EXP 75
28979: PUSH
28980: LD_INT 1
28982: EQUAL
28983: AND
28984: IFFALSE 28998
// Say ( Vsevolod , D10nB-Vse-5 ) ;
28986: LD_EXP 33
28990: PPUSH
28991: LD_STRING D10nB-Vse-5
28993: PPUSH
28994: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
28998: LD_EXP 74
29002: PUSH
29003: LD_EXP 75
29007: PUSH
29008: LD_INT 0
29010: EQUAL
29011: AND
29012: IFFALSE 29140
// begin if JMMGirl = 1 then
29014: LD_EXP 73
29018: PUSH
29019: LD_INT 1
29021: EQUAL
29022: IFFALSE 29072
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
29024: LD_EXP 33
29028: PPUSH
29029: LD_STRING D10nB-Vse-2
29031: PPUSH
29032: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
29036: LD_EXP 1
29040: PPUSH
29041: LD_STRING D10nB-JMM-3
29043: PPUSH
29044: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
29048: LD_EXP 33
29052: PPUSH
29053: LD_STRING D10nB-Vse-3
29055: PPUSH
29056: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
29060: LD_EXP 1
29064: PPUSH
29065: LD_STRING D10nB-JMM-4
29067: PPUSH
29068: CALL_OW 88
// end ; if JMMGirl = 2 then
29072: LD_EXP 73
29076: PUSH
29077: LD_INT 2
29079: EQUAL
29080: IFFALSE 29106
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
29082: LD_EXP 33
29086: PPUSH
29087: LD_STRING D10nB-Vse-4
29089: PPUSH
29090: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
29094: LD_EXP 1
29098: PPUSH
29099: LD_STRING D10nB-JMM-5
29101: PPUSH
29102: CALL_OW 88
// end ; if JMMGirl = 3 then
29106: LD_EXP 73
29110: PUSH
29111: LD_INT 3
29113: EQUAL
29114: IFFALSE 29140
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
29116: LD_EXP 33
29120: PPUSH
29121: LD_STRING D10nB-Vse-5
29123: PPUSH
29124: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
29128: LD_EXP 1
29132: PPUSH
29133: LD_STRING D10nB-JMM-6
29135: PPUSH
29136: CALL_OW 88
// end ; end ; DialogueOff ;
29140: CALL_OW 7
// end ;
29144: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
29145: LD_EXP 89
29149: PUSH
29150: LD_INT 63070
29152: GREATEREQUAL
29153: IFFALSE 29431
29155: GO 29157
29157: DISABLE
// begin PrepareOmegaTeam ;
29158: CALL 2765 0 0
// missionStage = 3 ;
29162: LD_ADDR_EXP 92
29166: PUSH
29167: LD_INT 3
29169: ST_TO_ADDR
// DialogueOn ;
29170: CALL_OW 6
// if StevensStatus = 1 then
29174: LD_EXP 70
29178: PUSH
29179: LD_INT 1
29181: EQUAL
29182: IFFALSE 29294
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
29184: LD_EXP 3
29188: PPUSH
29189: CALL_OW 310
29193: PPUSH
29194: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
29198: LD_EXP 3
29202: PPUSH
29203: LD_STRING D8-Huck-1
29205: PPUSH
29206: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
29210: LD_EXP 1
29214: PPUSH
29215: LD_STRING D8-JMM-1
29217: PPUSH
29218: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
29222: LD_EXP 3
29226: PPUSH
29227: LD_STRING D8-Huck-2
29229: PPUSH
29230: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
29234: LD_EXP 1
29238: PPUSH
29239: LD_STRING D8-JMM-2
29241: PPUSH
29242: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
29246: LD_EXP 3
29250: PPUSH
29251: LD_STRING D8-Huck-3
29253: PPUSH
29254: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
29258: LD_EXP 1
29262: PPUSH
29263: LD_STRING D8-JMM-3
29265: PPUSH
29266: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
29270: LD_EXP 3
29274: PPUSH
29275: LD_STRING D8-Huck-4
29277: PPUSH
29278: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
29282: LD_EXP 1
29286: PPUSH
29287: LD_STRING D8-JMM-4
29289: PPUSH
29290: CALL_OW 88
// end ; if StevensStatus = 0 then
29294: LD_EXP 70
29298: PUSH
29299: LD_INT 0
29301: EQUAL
29302: IFFALSE 29414
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
29304: LD_EXP 21
29308: PPUSH
29309: CALL_OW 310
29313: PPUSH
29314: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
29318: LD_EXP 21
29322: PPUSH
29323: LD_STRING D8-Huck-1
29325: PPUSH
29326: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
29330: LD_EXP 1
29334: PPUSH
29335: LD_STRING D8-JMM-1a
29337: PPUSH
29338: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
29342: LD_EXP 21
29346: PPUSH
29347: LD_STRING D8-Huck-2
29349: PPUSH
29350: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
29354: LD_EXP 1
29358: PPUSH
29359: LD_STRING D8-JMM-2
29361: PPUSH
29362: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
29366: LD_EXP 21
29370: PPUSH
29371: LD_STRING D8-Huck-3
29373: PPUSH
29374: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
29378: LD_EXP 1
29382: PPUSH
29383: LD_STRING D8-JMM-3
29385: PPUSH
29386: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
29390: LD_EXP 21
29394: PPUSH
29395: LD_STRING D8-Huck-4
29397: PPUSH
29398: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
29402: LD_EXP 1
29406: PPUSH
29407: LD_STRING D8-JMM-4
29409: PPUSH
29410: CALL_OW 88
// end ; DialogueOff ;
29414: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
29418: LD_INT 25
29420: PPUSH
29421: LD_INT 1
29423: PPUSH
29424: LD_INT 1
29426: PPUSH
29427: CALL_OW 322
// end ;
29431: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
29432: LD_EXP 89
29436: PUSH
29437: LD_INT 73570
29439: GREATEREQUAL
29440: IFFALSE 29790
29442: GO 29444
29444: DISABLE
29445: LD_INT 0
29447: PPUSH
// begin missionStage = 4 ;
29448: LD_ADDR_EXP 92
29452: PUSH
29453: LD_INT 4
29455: ST_TO_ADDR
// DialogueOn ;
29456: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
29460: LD_EXP 28
29464: PPUSH
29465: LD_STRING D9-Roth-1
29467: PPUSH
29468: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
29472: LD_EXP 1
29476: PPUSH
29477: LD_STRING D9-JMM-1
29479: PPUSH
29480: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
29484: LD_EXP 28
29488: PPUSH
29489: LD_STRING D9-Roth-2
29491: PPUSH
29492: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
29496: LD_EXP 28
29500: PPUSH
29501: LD_STRING D9-Roth-2a
29503: PPUSH
29504: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
29508: LD_EXP 26
29512: PPUSH
29513: LD_STRING D9-Pla-2
29515: PPUSH
29516: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
29520: LD_EXP 28
29524: PPUSH
29525: LD_STRING D9-Roth-3
29527: PPUSH
29528: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
29532: LD_EXP 26
29536: PPUSH
29537: LD_STRING D9-Pla-3
29539: PPUSH
29540: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
29544: LD_EXP 28
29548: PPUSH
29549: LD_STRING D9-Roth-4
29551: PPUSH
29552: CALL_OW 94
// dec = Query ( Q9 ) ;
29556: LD_ADDR_VAR 0 1
29560: PUSH
29561: LD_STRING Q9
29563: PPUSH
29564: CALL_OW 97
29568: ST_TO_ADDR
// if dec = 1 then
29569: LD_VAR 0 1
29573: PUSH
29574: LD_INT 1
29576: EQUAL
29577: IFFALSE 29591
// SayRadio ( Roth , D9a-Roth-1 ) ;
29579: LD_EXP 28
29583: PPUSH
29584: LD_STRING D9a-Roth-1
29586: PPUSH
29587: CALL_OW 94
// if dec = 2 then
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 2
29598: EQUAL
29599: IFFALSE 29625
// begin Say ( JMM , D9b-JMM-1 ) ;
29601: LD_EXP 1
29605: PPUSH
29606: LD_STRING D9b-JMM-1
29608: PPUSH
29609: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
29613: LD_EXP 28
29617: PPUSH
29618: LD_STRING D9b-Roth-1
29620: PPUSH
29621: CALL_OW 94
// end ; if dec = 3 then
29625: LD_VAR 0 1
29629: PUSH
29630: LD_INT 3
29632: EQUAL
29633: IFFALSE 29695
// begin Say ( JMM , D9c-JMM-1 ) ;
29635: LD_EXP 1
29639: PPUSH
29640: LD_STRING D9c-JMM-1
29642: PPUSH
29643: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
29647: LD_EXP 28
29651: PPUSH
29652: LD_STRING D9c-Roth-1
29654: PPUSH
29655: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
29659: LD_EXP 1
29663: PPUSH
29664: LD_STRING D9c-JMM-2
29666: PPUSH
29667: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
29671: LD_EXP 28
29675: PPUSH
29676: LD_STRING D9c-Roth-2
29678: PPUSH
29679: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
29683: LD_EXP 1
29687: PPUSH
29688: LD_STRING D9c-JMM-3
29690: PPUSH
29691: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
29695: LD_EXP 28
29699: PPUSH
29700: LD_STRING D9c-Roth-3
29702: PPUSH
29703: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
29707: LD_EXP 28
29711: PPUSH
29712: LD_STRING D9cont-Roth-1
29714: PPUSH
29715: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
29719: LD_EXP 1
29723: PPUSH
29724: LD_STRING D9cont-JMM-1
29726: PPUSH
29727: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
29731: LD_EXP 28
29735: PPUSH
29736: LD_STRING D9cont-Roth-2
29738: PPUSH
29739: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
29743: LD_EXP 1
29747: PPUSH
29748: LD_STRING D9cont-JMM-2
29750: PPUSH
29751: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
29755: LD_EXP 28
29759: PPUSH
29760: LD_STRING D9cont-Roth-3
29762: PPUSH
29763: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
29767: LD_EXP 1
29771: PPUSH
29772: LD_STRING D9cont-JMM-3
29774: PPUSH
29775: CALL_OW 88
// DialogueOff ;
29779: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
29783: LD_STRING M3
29785: PPUSH
29786: CALL_OW 337
// end ;
29790: PPOPN 1
29792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do
29793: LD_INT 22
29795: PUSH
29796: LD_INT 7
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 21
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: PUSH
29822: LD_INT 20
29824: PUSH
29825: LD_INT 18
29827: PUSH
29828: LD_INT 15
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: PUSH
29836: LD_OWVAR 67
29840: ARRAY
29841: LESSEQUAL
29842: IFFALSE 29975
29844: GO 29846
29846: DISABLE
// begin AllianceAI = 0 ;
29847: LD_ADDR_EXP 78
29851: PUSH
29852: LD_INT 0
29854: ST_TO_ADDR
// AllianceEscape = 1 ;
29855: LD_ADDR_EXP 84
29859: PUSH
29860: LD_INT 1
29862: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
29863: LD_INT 7
29865: PPUSH
29866: LD_INT 1
29868: PPUSH
29869: LD_INT 1
29871: PPUSH
29872: LD_INT 1
29874: PPUSH
29875: CALL_OW 80
// DialogueOn ;
29879: CALL_OW 6
// Say ( JMM , DAb-JMM-1 ) ;
29883: LD_EXP 1
29887: PPUSH
29888: LD_STRING DAb-JMM-1
29890: PPUSH
29891: CALL_OW 88
// DialogueOff ;
29895: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
29899: LD_INT 22
29901: PUSH
29902: LD_INT 7
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 21
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 69
29927: PPUSH
29928: CALL_OW 122
// wait ( 0 0$1 ) ;
29932: LD_INT 35
29934: PPUSH
29935: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
29939: LD_INT 22
29941: PUSH
29942: LD_INT 7
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 21
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 69
29967: PPUSH
29968: LD_INT 28
29970: PPUSH
29971: CALL_OW 113
// end ;
29975: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
29976: LD_EXP 84
29980: PUSH
29981: LD_INT 1
29983: EQUAL
29984: PUSH
29985: LD_INT 28
29987: PPUSH
29988: LD_INT 22
29990: PUSH
29991: LD_INT 7
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 21
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PPUSH
30012: CALL_OW 70
30016: AND
30017: IFFALSE 30079
30019: GO 30021
30021: DISABLE
30022: LD_INT 0
30024: PPUSH
// begin enable ;
30025: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
30026: LD_ADDR_VAR 0 1
30030: PUSH
30031: LD_INT 28
30033: PPUSH
30034: LD_INT 22
30036: PUSH
30037: LD_INT 7
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 21
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PPUSH
30058: CALL_OW 70
30062: PUSH
30063: FOR_IN
30064: IFFALSE 30077
// RemoveUnit ( i ) ;
30066: LD_VAR 0 1
30070: PPUSH
30071: CALL_OW 64
30075: GO 30063
30077: POP
30078: POP
// end ;
30079: PPOPN 1
30081: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
30082: LD_EXP 89
30086: PUSH
30087: LD_INT 94570
30089: GREATEREQUAL
30090: IFFALSE 30409
30092: GO 30094
30094: DISABLE
// begin DialogueOn ;
30095: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
30099: LD_INT 22
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 23
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 26
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 25
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 25
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 25
30154: PUSH
30155: LD_INT 3
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 25
30164: PUSH
30165: LD_INT 4
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 25
30174: PUSH
30175: LD_INT 5
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 25
30184: PUSH
30185: LD_INT 8
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: PPUSH
30207: CALL_OW 69
30211: PPUSH
30212: LD_STRING D11-Sol1-1
30214: PPUSH
30215: LD_STRING D5-FSol1-1
30217: PPUSH
30218: CALL 6645 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
30222: LD_EXP 26
30226: PPUSH
30227: LD_STRING D11-Pla-1
30229: PPUSH
30230: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
30234: LD_EXP 36
30238: PPUSH
30239: LD_STRING D11-Kov-1
30241: PPUSH
30242: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
30246: LD_EXP 26
30250: PPUSH
30251: LD_STRING D11-Pla-2
30253: PPUSH
30254: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
30258: LD_INT 22
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 23
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 26
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 25
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 25
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 25
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 25
30323: PUSH
30324: LD_INT 4
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 25
30333: PUSH
30334: LD_INT 5
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 25
30343: PUSH
30344: LD_INT 8
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: PPUSH
30366: CALL_OW 69
30370: PPUSH
30371: LD_STRING D11-Sol1-2
30373: PPUSH
30374: LD_STRING D5-FSol1-1
30376: PPUSH
30377: CALL 6645 0 3
// Say ( JMM , D11-JMM-2 ) ;
30381: LD_EXP 1
30385: PPUSH
30386: LD_STRING D11-JMM-2
30388: PPUSH
30389: CALL_OW 88
// DialogueOff ;
30393: CALL_OW 7
// PreapreMehBehs ;
30397: CALL 5714 0 0
// missionStage = 5 ;
30401: LD_ADDR_EXP 92
30405: PUSH
30406: LD_INT 5
30408: ST_TO_ADDR
// end ;
30409: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
30410: LD_EXP 89
30414: PUSH
30415: LD_INT 105070
30417: GREATEREQUAL
30418: IFFALSE 30812
30420: GO 30422
30422: DISABLE
30423: LD_INT 0
30425: PPUSH
30426: PPUSH
// begin time = 0 0$00 ;
30427: LD_ADDR_VAR 0 2
30431: PUSH
30432: LD_INT 0
30434: ST_TO_ADDR
// DialogueOn ;
30435: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
30439: LD_EXP 26
30443: PPUSH
30444: LD_STRING D15-Pla-1
30446: PPUSH
30447: CALL_OW 94
// dec = Query ( Q15a ) ;
30451: LD_ADDR_VAR 0 1
30455: PUSH
30456: LD_STRING Q15a
30458: PPUSH
30459: CALL_OW 97
30463: ST_TO_ADDR
// if dec = 1 then
30464: LD_VAR 0 1
30468: PUSH
30469: LD_INT 1
30471: EQUAL
30472: IFFALSE 30493
// begin Say ( JMM , D15a-JMM-1 ) ;
30474: LD_EXP 1
30478: PPUSH
30479: LD_STRING D15a-JMM-1
30481: PPUSH
30482: CALL_OW 88
// YouLost ( Surrender ) ;
30486: LD_STRING Surrender
30488: PPUSH
30489: CALL_OW 104
// end ; if dec = 2 then
30493: LD_VAR 0 1
30497: PUSH
30498: LD_INT 2
30500: EQUAL
30501: IFFALSE 30531
// begin Say ( JMM , D15b-JMM-1 ) ;
30503: LD_EXP 1
30507: PPUSH
30508: LD_STRING D15b-JMM-1
30510: PPUSH
30511: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
30515: LD_EXP 26
30519: PPUSH
30520: LD_STRING D15b-Pla-1
30522: PPUSH
30523: CALL_OW 94
// DialogueOff ;
30527: CALL_OW 7
// end ; if dec = 3 then
30531: LD_VAR 0 1
30535: PUSH
30536: LD_INT 3
30538: EQUAL
30539: IFFALSE 30615
// begin Say ( JMM , D15c-JMM-1 ) ;
30541: LD_EXP 1
30545: PPUSH
30546: LD_STRING D15c-JMM-1
30548: PPUSH
30549: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
30553: LD_EXP 26
30557: PPUSH
30558: LD_STRING D15c-Pla-1
30560: PPUSH
30561: CALL_OW 94
// DialogueOff ;
30565: CALL_OW 7
// wait ( 0 0$15 ) ;
30569: LD_INT 525
30571: PPUSH
30572: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
30576: LD_EXP 26
30580: PPUSH
30581: LD_STRING D18-Pla-1
30583: PPUSH
30584: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
30588: LD_INT 273
30590: PPUSH
30591: LD_EXP 1
30595: PPUSH
30596: CALL_OW 250
30600: PPUSH
30601: LD_EXP 1
30605: PPUSH
30606: CALL_OW 251
30610: PPUSH
30611: CALL_OW 116
// end ; if dec = 4 then
30615: LD_VAR 0 1
30619: PUSH
30620: LD_INT 4
30622: EQUAL
30623: IFFALSE 30661
// begin Say ( JMM , D15d-JMM-1 ) ;
30625: LD_EXP 1
30629: PPUSH
30630: LD_STRING D15d-JMM-1
30632: PPUSH
30633: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
30637: LD_EXP 26
30641: PPUSH
30642: LD_STRING D15d-Pla-1
30644: PPUSH
30645: CALL_OW 94
// DialogueOff ;
30649: CALL_OW 7
// missionStage = 6 ;
30653: LD_ADDR_EXP 92
30657: PUSH
30658: LD_INT 6
30660: ST_TO_ADDR
// end ; if dec = 2 then
30661: LD_VAR 0 1
30665: PUSH
30666: LD_INT 2
30668: EQUAL
30669: IFFALSE 30742
// begin repeat wait ( 0 0$01 ) ;
30671: LD_INT 35
30673: PPUSH
30674: CALL_OW 67
// time = time + 0 0$01 ;
30678: LD_ADDR_VAR 0 2
30682: PUSH
30683: LD_VAR 0 2
30687: PUSH
30688: LD_INT 35
30690: PLUS
30691: ST_TO_ADDR
// until time >= 3 3$00 ;
30692: LD_VAR 0 2
30696: PUSH
30697: LD_INT 6300
30699: GREATEREQUAL
30700: IFFALSE 30671
// DialogueOn ;
30702: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
30706: LD_EXP 1
30710: PPUSH
30711: LD_STRING D15d-JMM-1a
30713: PPUSH
30714: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
30718: LD_EXP 26
30722: PPUSH
30723: LD_STRING D15d-Pla-1
30725: PPUSH
30726: CALL_OW 94
// DialogueOff ;
30730: CALL_OW 7
// missionStage = 6 ;
30734: LD_ADDR_EXP 92
30738: PUSH
30739: LD_INT 6
30741: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
30742: LD_EXP 47
30746: PPUSH
30747: CALL_OW 302
30751: PUSH
30752: LD_EXP 47
30756: PPUSH
30757: CALL_OW 255
30761: PUSH
30762: LD_INT 1
30764: EQUAL
30765: AND
30766: IFFALSE 30812
// begin DialogueOn ;
30768: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
30772: LD_EXP 1
30776: PPUSH
30777: LD_STRING D16-JMM-1
30779: PPUSH
30780: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
30784: LD_EXP 47
30788: PPUSH
30789: LD_STRING D16-Friend-1
30791: PPUSH
30792: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
30796: LD_EXP 1
30800: PPUSH
30801: LD_STRING D16-JMM-2
30803: PPUSH
30804: CALL_OW 88
// DialogueOff ;
30808: CALL_OW 7
// end ; end ;
30812: PPOPN 2
30814: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
30815: LD_EXP 92
30819: PUSH
30820: LD_INT 6
30822: EQUAL
30823: PUSH
30824: LD_EXP 47
30828: PPUSH
30829: CALL_OW 302
30833: AND
30834: PUSH
30835: LD_EXP 47
30839: PPUSH
30840: CALL_OW 255
30844: PUSH
30845: LD_INT 1
30847: EQUAL
30848: AND
30849: IFFALSE 31478
30851: GO 30853
30853: DISABLE
30854: LD_INT 0
30856: PPUSH
// begin DialogueOn ;
30857: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
30861: LD_INT 22
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: LD_INT 34
30876: PUSH
30877: LD_INT 8
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 35
30886: PUSH
30887: LD_INT 8
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PPUSH
30903: CALL_OW 69
30907: PUSH
30908: LD_INT 0
30910: GREATER
30911: IFFALSE 30927
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
30913: LD_EXP 26
30917: PPUSH
30918: LD_STRING D16c-Pla-1
30920: PPUSH
30921: CALL_OW 94
// end else
30925: GO 31386
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
30927: LD_EXP 26
30931: PPUSH
30932: LD_STRING D16a-Pla-1
30934: PPUSH
30935: CALL_OW 94
// if IsOK ( Stevens ) then
30939: LD_EXP 3
30943: PPUSH
30944: CALL_OW 302
30948: IFFALSE 30964
// begin Say ( Stevens , D16a-Huck-1 ) ;
30950: LD_EXP 3
30954: PPUSH
30955: LD_STRING D16a-Huck-1
30957: PPUSH
30958: CALL_OW 88
// end else
30962: GO 31112
// begin if IsOk ( Baker ) then
30964: LD_EXP 21
30968: PPUSH
30969: CALL_OW 302
30973: IFFALSE 30989
// begin Say ( Baker , D16a-Huck-1 ) ;
30975: LD_EXP 21
30979: PPUSH
30980: LD_STRING D16a-Huck-1
30982: PPUSH
30983: CALL_OW 88
// end else
30987: GO 31112
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
30989: LD_INT 22
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 23
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 26
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 25
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 25
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 25
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 25
31054: PUSH
31055: LD_INT 4
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 25
31064: PUSH
31065: LD_INT 5
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 25
31074: PUSH
31075: LD_INT 8
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: PPUSH
31097: CALL_OW 69
31101: PPUSH
31102: LD_STRING D16a-Sol1-1
31104: PPUSH
31105: LD_STRING D5-FSol1-1
31107: PPUSH
31108: CALL 6645 0 3
// end ; end ; wait ( 0 0$30 ) ;
31112: LD_INT 1050
31114: PPUSH
31115: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
31119: LD_EXP 26
31123: PPUSH
31124: LD_STRING D18-Pla-1
31126: PPUSH
31127: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
31131: LD_ADDR_VAR 0 1
31135: PUSH
31136: LD_INT 22
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 21
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 23
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: LD_INT 30
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 30
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: LIST
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: PPUSH
31200: CALL_OW 69
31204: ST_TO_ADDR
// if rocketTarget = 0 then
31205: LD_VAR 0 1
31209: PUSH
31210: LD_INT 0
31212: EQUAL
31213: IFFALSE 31289
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
31215: LD_ADDR_VAR 0 1
31219: PUSH
31220: LD_INT 22
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 21
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 23
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 30
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 30
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: PPUSH
31284: CALL_OW 69
31288: ST_TO_ADDR
// if rocketTarget = 0 then
31289: LD_VAR 0 1
31293: PUSH
31294: LD_INT 0
31296: EQUAL
31297: IFFALSE 31351
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
31299: LD_ADDR_VAR 0 1
31303: PUSH
31304: LD_INT 22
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 21
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 23
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 50
31336: PUSH
31337: EMPTY
31338: LIST
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: PPUSH
31346: CALL_OW 69
31350: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
31351: LD_INT 273
31353: PPUSH
31354: LD_VAR 0 1
31358: PUSH
31359: LD_INT 1
31361: ARRAY
31362: PPUSH
31363: CALL_OW 250
31367: PPUSH
31368: LD_VAR 0 1
31372: PUSH
31373: LD_INT 1
31375: ARRAY
31376: PPUSH
31377: CALL_OW 251
31381: PPUSH
31382: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
31386: LD_EXP 1
31390: PPUSH
31391: LD_STRING D16a-JMM-1a
31393: PPUSH
31394: CALL_OW 88
// DialogueOff ;
31398: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
31402: LD_EXP 47
31406: PPUSH
31407: LD_INT 3
31409: PPUSH
31410: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
31414: LD_EXP 47
31418: PPUSH
31419: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
31423: LD_EXP 47
31427: PPUSH
31428: CALL_OW 121
// wait ( 0 0$1 ) ;
31432: LD_INT 35
31434: PPUSH
31435: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
31439: LD_EXP 47
31443: PPUSH
31444: LD_INT 18
31446: PPUSH
31447: CALL_OW 113
// wait ( 0 0$3 ) ;
31451: LD_INT 105
31453: PPUSH
31454: CALL_OW 67
// DialogueOn ;
31458: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
31462: LD_EXP 1
31466: PPUSH
31467: LD_STRING D16a-JMM-1
31469: PPUSH
31470: CALL_OW 88
// DialogueOff ;
31474: CALL_OW 7
// end ;
31478: PPOPN 1
31480: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
31481: LD_EXP 47
31485: PPUSH
31486: CALL_OW 255
31490: PUSH
31491: LD_INT 3
31493: EQUAL
31494: IFFALSE 31601
31496: GO 31498
31498: DISABLE
31499: LD_INT 0
31501: PPUSH
// begin enable ;
31502: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
31503: LD_ADDR_VAR 0 1
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 21
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 56
31530: PUSH
31531: EMPTY
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: PPUSH
31539: CALL_OW 69
31543: PUSH
31544: FOR_IN
31545: IFFALSE 31599
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
31547: LD_VAR 0 1
31551: PPUSH
31552: LD_EXP 47
31556: PPUSH
31557: CALL_OW 296
31561: PUSH
31562: LD_INT 8
31564: LESS
31565: IFFALSE 31597
// begin disable ;
31567: DISABLE
// DialogueOn ;
31568: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
31572: LD_EXP 47
31576: PPUSH
31577: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
31581: LD_EXP 47
31585: PPUSH
31586: LD_STRING D16a-Friend-1
31588: PPUSH
31589: CALL_OW 88
// DialogueOff ;
31593: CALL_OW 7
// end ; end ;
31597: GO 31544
31599: POP
31600: POP
// end ;
31601: PPOPN 1
31603: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
31604: LD_EXP 92
31608: PUSH
31609: LD_INT 6
31611: EQUAL
31612: PUSH
31613: LD_EXP 47
31617: PPUSH
31618: CALL_OW 255
31622: PUSH
31623: LD_INT 1
31625: EQUAL
31626: NOT
31627: AND
31628: IFFALSE 32000
31630: GO 31632
31632: DISABLE
31633: LD_INT 0
31635: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
31636: LD_INT 22
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 34
31651: PUSH
31652: LD_INT 8
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 35
31661: PUSH
31662: LD_INT 8
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PPUSH
31678: CALL_OW 69
31682: PUSH
31683: LD_INT 0
31685: GREATER
31686: IFFALSE 31702
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
31688: LD_EXP 26
31692: PPUSH
31693: LD_STRING D16c-Pla-1
31695: PPUSH
31696: CALL_OW 94
// end else
31700: GO 32000
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
31702: LD_EXP 26
31706: PPUSH
31707: LD_STRING D16b-Pla-1
31709: PPUSH
31710: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
31714: LD_EXP 1
31718: PPUSH
31719: LD_STRING D16b-JMM-1
31721: PPUSH
31722: CALL_OW 88
// wait ( 0 0$15 ) ;
31726: LD_INT 525
31728: PPUSH
31729: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
31733: LD_EXP 26
31737: PPUSH
31738: LD_STRING D18-Pla-1
31740: PPUSH
31741: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
31745: LD_ADDR_VAR 0 1
31749: PUSH
31750: LD_INT 22
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 21
31762: PUSH
31763: LD_INT 3
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 23
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 30
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 30
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: PPUSH
31814: CALL_OW 69
31818: ST_TO_ADDR
// if rocketTarget = 0 then
31819: LD_VAR 0 1
31823: PUSH
31824: LD_INT 0
31826: EQUAL
31827: IFFALSE 31903
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
31829: LD_ADDR_VAR 0 1
31833: PUSH
31834: LD_INT 22
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 21
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 23
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: LD_INT 30
31869: PUSH
31870: LD_INT 0
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 30
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: PPUSH
31898: CALL_OW 69
31902: ST_TO_ADDR
// if rocketTarget = 0 then
31903: LD_VAR 0 1
31907: PUSH
31908: LD_INT 0
31910: EQUAL
31911: IFFALSE 31965
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
31913: LD_ADDR_VAR 0 1
31917: PUSH
31918: LD_INT 22
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 21
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 23
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 50
31950: PUSH
31951: EMPTY
31952: LIST
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: PPUSH
31960: CALL_OW 69
31964: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
31965: LD_INT 273
31967: PPUSH
31968: LD_VAR 0 1
31972: PUSH
31973: LD_INT 1
31975: ARRAY
31976: PPUSH
31977: CALL_OW 250
31981: PPUSH
31982: LD_VAR 0 1
31986: PUSH
31987: LD_INT 1
31989: ARRAY
31990: PPUSH
31991: CALL_OW 251
31995: PPUSH
31996: CALL_OW 116
// end ; end ;
32000: PPOPN 1
32002: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
32003: LD_EXP 92
32007: PUSH
32008: LD_INT 5
32010: GREATEREQUAL
32011: IFFALSE 32204
32013: GO 32015
32015: DISABLE
32016: LD_INT 0
32018: PPUSH
// begin enable ;
32019: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
32020: LD_ADDR_VAR 0 1
32024: PUSH
32025: LD_INT 22
32027: PUSH
32028: LD_INT 6
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 30
32037: PUSH
32038: LD_INT 37
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 57
32047: PUSH
32048: EMPTY
32049: LIST
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: PPUSH
32056: CALL_OW 69
32060: PUSH
32061: FOR_IN
32062: IFFALSE 32116
// begin if See ( 1 , i ) then
32064: LD_INT 1
32066: PPUSH
32067: LD_VAR 0 1
32071: PPUSH
32072: CALL_OW 292
32076: IFFALSE 32114
// begin disable ;
32078: DISABLE
// DialogueOn ;
32079: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
32083: LD_EXP 1
32087: PPUSH
32088: LD_STRING D17a-JMM-1
32090: PPUSH
32091: CALL_OW 88
// DialogueOff ;
32095: CALL_OW 7
// behemothStatus = 1 ;
32099: LD_ADDR_EXP 54
32103: PUSH
32104: LD_INT 1
32106: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
32107: LD_STRING M4a
32109: PPUSH
32110: CALL_OW 337
// end ; end ;
32114: GO 32061
32116: POP
32117: POP
// for i in ruBehs do
32118: LD_ADDR_VAR 0 1
32122: PUSH
32123: LD_EXP 53
32127: PUSH
32128: FOR_IN
32129: IFFALSE 32202
// begin if See ( 1 , i ) then
32131: LD_INT 1
32133: PPUSH
32134: LD_VAR 0 1
32138: PPUSH
32139: CALL_OW 292
32143: IFFALSE 32200
// begin disable ;
32145: DISABLE
// DialogueOn ;
32146: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
32150: LD_EXP 1
32154: PPUSH
32155: LD_STRING D17b-JMM-1
32157: PPUSH
32158: CALL_OW 88
// DialogueOff ;
32162: CALL_OW 7
// behemothStatus = 0 ;
32166: LD_ADDR_EXP 54
32170: PUSH
32171: LD_INT 0
32173: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
32174: LD_STRING M4b
32176: PPUSH
32177: CALL_OW 337
// wait ( 0 0$2 ) ;
32181: LD_INT 70
32183: PPUSH
32184: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
32188: LD_EXP 26
32192: PPUSH
32193: LD_STRING D18-Pla-1
32195: PPUSH
32196: CALL_OW 88
// end ; end ;
32200: GO 32128
32202: POP
32203: POP
// end ;
32204: PPOPN 1
32206: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
32207: LD_EXP 26
32211: PPUSH
32212: CALL_OW 301
32216: PUSH
32217: LD_EXP 27
32221: PPUSH
32222: CALL_OW 301
32226: AND
32227: PUSH
32228: LD_INT 22
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 21
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 50
32250: PUSH
32251: EMPTY
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: PPUSH
32259: CALL_OW 69
32263: PUSH
32264: LD_INT 7
32266: PUSH
32267: LD_INT 8
32269: PUSH
32270: LD_INT 9
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: PUSH
32278: LD_OWVAR 67
32282: ARRAY
32283: LESS
32284: AND
32285: IFFALSE 32945
32287: GO 32289
32289: DISABLE
32290: LD_INT 0
32292: PPUSH
32293: PPUSH
32294: PPUSH
// begin russianAI = 0 ;
32295: LD_ADDR_EXP 79
32299: PUSH
32300: LD_INT 0
32302: ST_TO_ADDR
// russianEscape = 1 ;
32303: LD_ADDR_EXP 83
32307: PUSH
32308: LD_INT 1
32310: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
32311: LD_INT 1
32313: PPUSH
32314: LD_INT 3
32316: PPUSH
32317: LD_INT 1
32319: PPUSH
32320: LD_INT 1
32322: PPUSH
32323: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
32327: LD_ADDR_VAR 0 1
32331: PUSH
32332: LD_INT 22
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 21
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 24
32354: PUSH
32355: LD_INT 900
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: PPUSH
32367: CALL_OW 69
32371: PUSH
32372: FOR_IN
32373: IFFALSE 32404
// if GetSex ( i ) = sex_male then
32375: LD_VAR 0 1
32379: PPUSH
32380: CALL_OW 258
32384: PUSH
32385: LD_INT 1
32387: EQUAL
32388: IFFALSE 32402
// begin tmp = i ;
32390: LD_ADDR_VAR 0 2
32394: PUSH
32395: LD_VAR 0 1
32399: ST_TO_ADDR
// break ;
32400: GO 32404
// end ;
32402: GO 32372
32404: POP
32405: POP
// if tmp = 0 then
32406: LD_VAR 0 2
32410: PUSH
32411: LD_INT 0
32413: EQUAL
32414: IFFALSE 32452
// begin hc_name =  ;
32416: LD_ADDR_OWVAR 26
32420: PUSH
32421: LD_STRING 
32423: ST_TO_ADDR
// hc_gallery =  ;
32424: LD_ADDR_OWVAR 33
32428: PUSH
32429: LD_STRING 
32431: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
32432: LD_INT 1
32434: PPUSH
32435: LD_INT 10
32437: PPUSH
32438: CALL_OW 381
// tmp = CreateHuman ;
32442: LD_ADDR_VAR 0 2
32446: PUSH
32447: CALL_OW 44
32451: ST_TO_ADDR
// end ; DialogueOn ;
32452: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
32456: LD_VAR 0 2
32460: PPUSH
32461: LD_STRING DSurrenderRussians-RSol1-1a
32463: PPUSH
32464: CALL_OW 88
// DialogueOff ;
32468: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
32472: LD_INT 22
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 21
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PPUSH
32496: CALL_OW 69
32500: PPUSH
32501: CALL_OW 122
// wait ( 0 0$1 ) ;
32505: LD_INT 35
32507: PPUSH
32508: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
32512: LD_INT 22
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 21
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PPUSH
32536: CALL_OW 69
32540: PPUSH
32541: LD_INT 25
32543: PPUSH
32544: CALL_OW 113
// wait ( 0 0$10 ) ;
32548: LD_INT 350
32550: PPUSH
32551: CALL_OW 67
// PrepareOmarArmy ;
32555: CALL 33565 0 0
// missionStage = 7 ;
32559: LD_ADDR_EXP 92
32563: PUSH
32564: LD_INT 7
32566: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
32567: LD_INT 157
32569: PPUSH
32570: LD_INT 8
32572: PPUSH
32573: LD_INT 1
32575: PPUSH
32576: LD_INT 8
32578: NEG
32579: PPUSH
32580: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
32584: LD_INT 157
32586: PPUSH
32587: LD_INT 8
32589: PPUSH
32590: CALL_OW 84
// DialogueOn ;
32594: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
32598: LD_EXP 32
32602: PPUSH
32603: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
32607: LD_EXP 1
32611: PPUSH
32612: LD_STRING D19-JMM-1
32614: PPUSH
32615: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
32619: LD_INT 22
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 26
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: LD_INT 25
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 25
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 25
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 25
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 25
32684: PUSH
32685: LD_INT 5
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 25
32694: PUSH
32695: LD_INT 8
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: LIST
32715: PPUSH
32716: CALL_OW 69
32720: PPUSH
32721: LD_STRING D19-Sol1-1
32723: PPUSH
32724: LD_STRING D5-FSol1-1
32726: PPUSH
32727: CALL 6645 0 3
// Say ( JMM , D19-JMM-2 ) ;
32731: LD_EXP 1
32735: PPUSH
32736: LD_STRING D19-JMM-2
32738: PPUSH
32739: CALL_OW 88
// DialogueOff ;
32743: CALL_OW 7
// LaunchMines ;
32747: CALL 33054 0 0
// wait ( 0 0$3 ) ;
32751: LD_INT 105
32753: PPUSH
32754: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
32758: LD_ADDR_VAR 0 3
32762: PUSH
32763: LD_INT 22
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 21
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PPUSH
32787: CALL_OW 69
32791: PUSH
32792: LD_INT 22
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 21
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 25
32814: PUSH
32815: LD_INT 4
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: LIST
32826: PPUSH
32827: CALL_OW 69
32831: DIFF
32832: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
32833: LD_ADDR_VAR 0 3
32837: PUSH
32838: LD_VAR 0 3
32842: PUSH
32843: LD_INT 22
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 21
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PPUSH
32867: CALL_OW 69
32871: ADD
32872: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
32873: LD_VAR 0 3
32877: PPUSH
32878: LD_INT 178
32880: PPUSH
32881: LD_INT 66
32883: PPUSH
32884: CALL_OW 114
// wait ( 0 0$10 ) ;
32888: LD_INT 350
32890: PPUSH
32891: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
32895: LD_INT 22
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 21
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 25
32917: PUSH
32918: LD_INT 4
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: PPUSH
32930: CALL_OW 69
32934: PPUSH
32935: LD_INT 177
32937: PPUSH
32938: LD_INT 69
32940: PPUSH
32941: CALL_OW 158
// end ;
32945: PPOPN 3
32947: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
32948: LD_EXP 83
32952: PUSH
32953: LD_INT 1
32955: EQUAL
32956: PUSH
32957: LD_INT 25
32959: PPUSH
32960: LD_INT 22
32962: PUSH
32963: LD_INT 3
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 21
32972: PUSH
32973: LD_INT 1
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PPUSH
32984: CALL_OW 70
32988: AND
32989: IFFALSE 33051
32991: GO 32993
32993: DISABLE
32994: LD_INT 0
32996: PPUSH
// begin enable ;
32997: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
32998: LD_ADDR_VAR 0 1
33002: PUSH
33003: LD_INT 25
33005: PPUSH
33006: LD_INT 22
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 21
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PPUSH
33030: CALL_OW 70
33034: PUSH
33035: FOR_IN
33036: IFFALSE 33049
// RemoveUnit ( i ) ;
33038: LD_VAR 0 1
33042: PPUSH
33043: CALL_OW 64
33047: GO 33035
33049: POP
33050: POP
// end ;
33051: PPOPN 1
33053: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
33061: LD_ADDR_VAR 0 2
33065: PUSH
33066: LD_INT 168
33068: PUSH
33069: LD_INT 18
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 169
33078: PUSH
33079: LD_INT 20
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 167
33088: PUSH
33089: LD_INT 20
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 164
33098: PUSH
33099: LD_INT 18
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 164
33108: PUSH
33109: LD_INT 19
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 163
33118: PUSH
33119: LD_INT 19
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 164
33128: PUSH
33129: LD_INT 21
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 165
33138: PUSH
33139: LD_INT 21
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 163
33148: PUSH
33149: LD_INT 20
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 164
33158: PUSH
33159: LD_INT 22
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 162
33168: PUSH
33169: LD_INT 20
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
33189: LD_ADDR_VAR 0 3
33193: PUSH
33194: LD_INT 169
33196: PUSH
33197: LD_INT 34
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 169
33206: PUSH
33207: LD_INT 35
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 167
33216: PUSH
33217: LD_INT 32
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 170
33226: PUSH
33227: LD_INT 31
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 173
33236: PUSH
33237: LD_INT 35
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 174
33246: PUSH
33247: LD_INT 39
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// for i = 1 to mines_pos do
33262: LD_ADDR_VAR 0 4
33266: PUSH
33267: DOUBLE
33268: LD_INT 1
33270: DEC
33271: ST_TO_ADDR
33272: LD_VAR 0 2
33276: PUSH
33277: FOR_TO
33278: IFFALSE 33490
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
33280: LD_VAR 0 2
33284: PUSH
33285: LD_VAR 0 4
33289: ARRAY
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: PPUSH
33295: LD_VAR 0 2
33299: PUSH
33300: LD_VAR 0 4
33304: ARRAY
33305: PUSH
33306: LD_INT 2
33308: ARRAY
33309: PPUSH
33310: LD_INT 1
33312: PPUSH
33313: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
33317: LD_INT 1
33319: PPUSH
33320: LD_INT 3
33322: PPUSH
33323: CALL_OW 12
33327: PPUSH
33328: CALL_OW 67
// if i < mines_pos then
33332: LD_VAR 0 4
33336: PUSH
33337: LD_VAR 0 2
33341: LESS
33342: IFFALSE 33380
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
33344: LD_VAR 0 2
33348: PUSH
33349: LD_VAR 0 4
33353: ARRAY
33354: PUSH
33355: LD_INT 1
33357: ARRAY
33358: PPUSH
33359: LD_VAR 0 2
33363: PUSH
33364: LD_VAR 0 4
33368: ARRAY
33369: PUSH
33370: LD_INT 2
33372: ARRAY
33373: PPUSH
33374: CALL_OW 348
33378: GO 33488
// begin for j = 1 to mines_pos1 do
33380: LD_ADDR_VAR 0 5
33384: PUSH
33385: DOUBLE
33386: LD_INT 1
33388: DEC
33389: ST_TO_ADDR
33390: LD_VAR 0 3
33394: PUSH
33395: FOR_TO
33396: IFFALSE 33452
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
33398: LD_VAR 0 3
33402: PUSH
33403: LD_VAR 0 5
33407: ARRAY
33408: PUSH
33409: LD_INT 1
33411: ARRAY
33412: PPUSH
33413: LD_VAR 0 3
33417: PUSH
33418: LD_VAR 0 5
33422: ARRAY
33423: PUSH
33424: LD_INT 2
33426: ARRAY
33427: PPUSH
33428: LD_INT 1
33430: PPUSH
33431: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
33435: LD_INT 1
33437: PPUSH
33438: LD_INT 3
33440: PPUSH
33441: CALL_OW 12
33445: PPUSH
33446: CALL_OW 67
// end ;
33450: GO 33395
33452: POP
33453: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
33454: LD_VAR 0 2
33458: PUSH
33459: LD_VAR 0 4
33463: ARRAY
33464: PUSH
33465: LD_INT 1
33467: ARRAY
33468: PPUSH
33469: LD_VAR 0 2
33473: PUSH
33474: LD_VAR 0 4
33478: ARRAY
33479: PUSH
33480: LD_INT 2
33482: ARRAY
33483: PPUSH
33484: CALL_OW 347
// end ; end ;
33488: GO 33277
33490: POP
33491: POP
// end ;
33492: LD_VAR 0 1
33496: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
33497: LD_EXP 92
33501: PUSH
33502: LD_INT 7
33504: EQUAL
33505: PUSH
33506: LD_EXP 31
33510: PPUSH
33511: CALL_OW 301
33515: AND
33516: PUSH
33517: LD_EXP 32
33521: PPUSH
33522: CALL_OW 302
33526: AND
33527: IFFALSE 33564
33529: GO 33531
33531: DISABLE
// begin DialogueOn ;
33532: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
33536: LD_EXP 1
33540: PPUSH
33541: LD_STRING D19a-JMM-1
33543: PPUSH
33544: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
33548: LD_EXP 32
33552: PPUSH
33553: LD_STRING D19a-Hke-1
33555: PPUSH
33556: CALL_OW 88
// DialogueOff ;
33560: CALL_OW 7
// end ; end_of_file
33564: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
33565: LD_INT 0
33567: PPUSH
33568: PPUSH
33569: PPUSH
33570: PPUSH
33571: PPUSH
// uc_side = 2 ;
33572: LD_ADDR_OWVAR 20
33576: PUSH
33577: LD_INT 2
33579: ST_TO_ADDR
// uc_nation = 2 ;
33580: LD_ADDR_OWVAR 21
33584: PUSH
33585: LD_INT 2
33587: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
33588: LD_ADDR_EXP 31
33592: PUSH
33593: LD_STRING Omar
33595: PPUSH
33596: LD_INT 0
33598: PPUSH
33599: CALL 6365 0 2
33603: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
33604: LD_ADDR_EXP 32
33608: PUSH
33609: LD_STRING Heike
33611: PPUSH
33612: LD_INT 0
33614: PPUSH
33615: CALL 6365 0 2
33619: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
33620: LD_EXP 32
33624: PPUSH
33625: LD_INT 26
33627: PPUSH
33628: LD_INT 0
33630: PPUSH
33631: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
33635: LD_ADDR_VAR 0 2
33639: PUSH
33640: DOUBLE
33641: LD_INT 1
33643: DEC
33644: ST_TO_ADDR
33645: LD_INT 5
33647: PUSH
33648: LD_INT 6
33650: PUSH
33651: LD_INT 7
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: PUSH
33659: LD_OWVAR 67
33663: ARRAY
33664: PUSH
33665: FOR_TO
33666: IFFALSE 33721
// begin hc_name =  ;
33668: LD_ADDR_OWVAR 26
33672: PUSH
33673: LD_STRING 
33675: ST_TO_ADDR
// hc_gallery =  ;
33676: LD_ADDR_OWVAR 33
33680: PUSH
33681: LD_STRING 
33683: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
33684: LD_INT 0
33686: PPUSH
33687: LD_INT 8
33689: PPUSH
33690: CALL_OW 381
// un = CreateHuman ;
33694: LD_ADDR_VAR 0 3
33698: PUSH
33699: CALL_OW 44
33703: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
33704: LD_VAR 0 3
33708: PPUSH
33709: LD_INT 26
33711: PPUSH
33712: LD_INT 0
33714: PPUSH
33715: CALL_OW 49
// end ;
33719: GO 33665
33721: POP
33722: POP
// for i := 1 to 4 do
33723: LD_ADDR_VAR 0 2
33727: PUSH
33728: DOUBLE
33729: LD_INT 1
33731: DEC
33732: ST_TO_ADDR
33733: LD_INT 4
33735: PUSH
33736: FOR_TO
33737: IFFALSE 33792
// begin hc_name =  ;
33739: LD_ADDR_OWVAR 26
33743: PUSH
33744: LD_STRING 
33746: ST_TO_ADDR
// hc_gallery =  ;
33747: LD_ADDR_OWVAR 33
33751: PUSH
33752: LD_STRING 
33754: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
33755: LD_INT 0
33757: PPUSH
33758: LD_INT 8
33760: PPUSH
33761: CALL_OW 384
// un = CreateHuman ;
33765: LD_ADDR_VAR 0 3
33769: PUSH
33770: CALL_OW 44
33774: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
33775: LD_VAR 0 3
33779: PPUSH
33780: LD_INT 26
33782: PPUSH
33783: LD_INT 0
33785: PPUSH
33786: CALL_OW 49
// end ;
33790: GO 33736
33792: POP
33793: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
33794: LD_ADDR_VAR 0 2
33798: PUSH
33799: DOUBLE
33800: LD_INT 1
33802: DEC
33803: ST_TO_ADDR
33804: LD_INT 8
33806: PUSH
33807: LD_INT 9
33809: PUSH
33810: LD_INT 10
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: PUSH
33818: LD_OWVAR 67
33822: ARRAY
33823: PUSH
33824: FOR_TO
33825: IFFALSE 33913
// begin vc_engine = 3 ;
33827: LD_ADDR_OWVAR 39
33831: PUSH
33832: LD_INT 3
33834: ST_TO_ADDR
// vc_control = 5 ;
33835: LD_ADDR_OWVAR 38
33839: PUSH
33840: LD_INT 5
33842: ST_TO_ADDR
// vc_chassis = 14 ;
33843: LD_ADDR_OWVAR 37
33847: PUSH
33848: LD_INT 14
33850: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
33851: LD_ADDR_OWVAR 40
33855: PUSH
33856: LD_INT 27
33858: PUSH
33859: LD_INT 26
33861: PUSH
33862: LD_INT 28
33864: PUSH
33865: LD_INT 25
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PPUSH
33877: LD_INT 3
33879: PPUSH
33880: CALL_OW 12
33884: ARRAY
33885: ST_TO_ADDR
// veh = CreateVehicle ;
33886: LD_ADDR_VAR 0 4
33890: PUSH
33891: CALL_OW 45
33895: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
33896: LD_VAR 0 4
33900: PPUSH
33901: LD_INT 26
33903: PPUSH
33904: LD_INT 0
33906: PPUSH
33907: CALL_OW 49
// end ;
33911: GO 33824
33913: POP
33914: POP
// vc_chassis := 31 ;
33915: LD_ADDR_OWVAR 37
33919: PUSH
33920: LD_INT 31
33922: ST_TO_ADDR
// vc_control := control_rider ;
33923: LD_ADDR_OWVAR 38
33927: PUSH
33928: LD_INT 4
33930: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
33931: LD_ADDR_VAR 0 5
33935: PUSH
33936: CALL_OW 45
33940: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
33941: LD_VAR 0 5
33945: PPUSH
33946: LD_INT 26
33948: PPUSH
33949: LD_INT 0
33951: PPUSH
33952: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
33956: LD_EXP 31
33960: PPUSH
33961: LD_VAR 0 5
33965: PPUSH
33966: CALL_OW 52
// end ; end_of_file
33970: LD_VAR 0 1
33974: RET
// every 1 1$30 trigger missionStage > 0 do
33975: LD_EXP 92
33979: PUSH
33980: LD_INT 0
33982: GREATER
33983: IFFALSE 34010
33985: GO 33987
33987: DISABLE
// begin enable ;
33988: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
33989: LD_INT 3
33991: PPUSH
33992: LD_INT 5
33994: PPUSH
33995: CALL_OW 12
33999: PPUSH
34000: LD_INT 27
34002: PPUSH
34003: LD_INT 1
34005: PPUSH
34006: CALL_OW 55
// end ; end_of_file
34010: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
34011: LD_EXP 92
34015: PUSH
34016: LD_INT 7
34018: EQUAL
34019: PUSH
34020: LD_INT 22
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 21
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PPUSH
34044: CALL_OW 69
34048: PUSH
34049: LD_INT 0
34051: EQUAL
34052: AND
34053: PUSH
34054: LD_INT 22
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 21
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 50
34076: PUSH
34077: EMPTY
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: PPUSH
34085: CALL_OW 69
34089: PUSH
34090: LD_INT 0
34092: EQUAL
34093: AND
34094: IFFALSE 34583
34096: GO 34098
34098: DISABLE
// begin DialogueOn ;
34099: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
34103: LD_EXP 1
34107: PPUSH
34108: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
34112: LD_EXP 1
34116: PPUSH
34117: LD_STRING D20-JMM-1
34119: PPUSH
34120: CALL_OW 88
// if IsOK ( Joan ) then
34124: LD_EXP 2
34128: PPUSH
34129: CALL_OW 302
34133: IFFALSE 34147
// Say ( Joan , D20-Joan-1 ) ;
34135: LD_EXP 2
34139: PPUSH
34140: LD_STRING D20-Joan-1
34142: PPUSH
34143: CALL_OW 88
// if IsOk ( Lisa ) then
34147: LD_EXP 4
34151: PPUSH
34152: CALL_OW 302
34156: IFFALSE 34170
// Say ( Lisa , D20-Lisa-1 ) ;
34158: LD_EXP 4
34162: PPUSH
34163: LD_STRING D20-Lisa-1
34165: PPUSH
34166: CALL_OW 88
// if IsOk ( Donaldson ) then
34170: LD_EXP 5
34174: PPUSH
34175: CALL_OW 302
34179: IFFALSE 34193
// Say ( Donaldson , D20-Don-1 ) ;
34181: LD_EXP 5
34185: PPUSH
34186: LD_STRING D20-Don-1
34188: PPUSH
34189: CALL_OW 88
// if IsOK ( Cornel ) then
34193: LD_EXP 12
34197: PPUSH
34198: CALL_OW 302
34202: IFFALSE 34216
// Say ( Cornel , D20-Corn-1 ) ;
34204: LD_EXP 12
34208: PPUSH
34209: LD_STRING D20-Corn-1
34211: PPUSH
34212: CALL_OW 88
// if IsOk ( Denis ) then
34216: LD_EXP 8
34220: PPUSH
34221: CALL_OW 302
34225: IFFALSE 34239
// Say ( Denis , D20-Den-1 ) ;
34227: LD_EXP 8
34231: PPUSH
34232: LD_STRING D20-Den-1
34234: PPUSH
34235: CALL_OW 88
// if IsOk ( Bobby ) then
34239: LD_EXP 6
34243: PPUSH
34244: CALL_OW 302
34248: IFFALSE 34262
// Say ( Bobby , D20-Bobby-1 ) ;
34250: LD_EXP 6
34254: PPUSH
34255: LD_STRING D20-Bobby-1
34257: PPUSH
34258: CALL_OW 88
// if IsOk ( Gladstone ) then
34262: LD_EXP 10
34266: PPUSH
34267: CALL_OW 302
34271: IFFALSE 34285
// Say ( Gladstone , D20-Glad-1 ) ;
34273: LD_EXP 10
34277: PPUSH
34278: LD_STRING D20-Glad-1
34280: PPUSH
34281: CALL_OW 88
// if IsOk ( Cyrus ) then
34285: LD_EXP 7
34289: PPUSH
34290: CALL_OW 302
34294: IFFALSE 34308
// Say ( Cyrus , D20-Cyrus-1 ) ;
34296: LD_EXP 7
34300: PPUSH
34301: LD_STRING D20-Cyrus-1
34303: PPUSH
34304: CALL_OW 88
// if IsOk ( Stevens ) then
34308: LD_EXP 3
34312: PPUSH
34313: CALL_OW 302
34317: IFFALSE 34331
// Say ( Stevens , D20-Huck-1 ) ;
34319: LD_EXP 3
34323: PPUSH
34324: LD_STRING D20-Huck-1
34326: PPUSH
34327: CALL_OW 88
// if IsOk ( Brown ) then
34331: LD_EXP 9
34335: PPUSH
34336: CALL_OW 302
34340: IFFALSE 34354
// Say ( Brown , D20-Brown-1 ) ;
34342: LD_EXP 9
34346: PPUSH
34347: LD_STRING D20-Brown-1
34349: PPUSH
34350: CALL_OW 88
// if IsOk ( Gary ) then
34354: LD_EXP 13
34358: PPUSH
34359: CALL_OW 302
34363: IFFALSE 34377
// Say ( Gary , D20-Gary-1 ) ;
34365: LD_EXP 13
34369: PPUSH
34370: LD_STRING D20-Gary-1
34372: PPUSH
34373: CALL_OW 88
// if IsOk ( Connie ) then
34377: LD_EXP 16
34381: PPUSH
34382: CALL_OW 302
34386: IFFALSE 34400
// Say ( Connie , D20-Con-1 ) ;
34388: LD_EXP 16
34392: PPUSH
34393: LD_STRING D20-Con-1
34395: PPUSH
34396: CALL_OW 88
// if IsOk ( Kurt ) then
34400: LD_EXP 30
34404: PPUSH
34405: CALL_OW 302
34409: IFFALSE 34423
// Say ( Kurt , D20-Kurt-1 ) ;
34411: LD_EXP 30
34415: PPUSH
34416: LD_STRING D20-Kurt-1
34418: PPUSH
34419: CALL_OW 88
// if IsOk ( Kikuchi ) then
34423: LD_EXP 15
34427: PPUSH
34428: CALL_OW 302
34432: IFFALSE 34446
// Say ( Kikuchi , D20-Yam-1 ) ;
34434: LD_EXP 15
34438: PPUSH
34439: LD_STRING D20-Yam-1
34441: PPUSH
34442: CALL_OW 88
// if IsOk ( Frank ) then
34446: LD_EXP 14
34450: PPUSH
34451: CALL_OW 302
34455: IFFALSE 34469
// Say ( Frank , D20-Frank-1 ) ;
34457: LD_EXP 14
34461: PPUSH
34462: LD_STRING D20-Frank-1
34464: PPUSH
34465: CALL_OW 88
// DialogueOff ;
34469: CALL_OW 7
// if AllianceEscape = 1 then
34473: LD_EXP 84
34477: PUSH
34478: LD_INT 1
34480: EQUAL
34481: IFFALSE 34495
// AddMedal ( Roth , 1 ) else
34483: LD_STRING Roth
34485: PPUSH
34486: LD_INT 1
34488: PPUSH
34489: CALL_OW 101
34493: GO 34506
// AddMedal ( Roth , - 1 ) ;
34495: LD_STRING Roth
34497: PPUSH
34498: LD_INT 1
34500: NEG
34501: PPUSH
34502: CALL_OW 101
// if behemothStatus = 1 then
34506: LD_EXP 54
34510: PUSH
34511: LD_INT 1
34513: EQUAL
34514: IFFALSE 34528
// AddMedal ( Project , 1 ) else
34516: LD_STRING Project
34518: PPUSH
34519: LD_INT 1
34521: PPUSH
34522: CALL_OW 101
34526: GO 34539
// AddMedal ( Project , - 1 ) ;
34528: LD_STRING Project
34530: PPUSH
34531: LD_INT 1
34533: NEG
34534: PPUSH
34535: CALL_OW 101
// if unitLost = 0 then
34539: LD_EXP 90
34543: PUSH
34544: LD_INT 0
34546: EQUAL
34547: IFFALSE 34561
// AddMedal ( NoLosses , 1 ) else
34549: LD_STRING NoLosses
34551: PPUSH
34552: LD_INT 1
34554: PPUSH
34555: CALL_OW 101
34559: GO 34572
// AddMedal ( NoLosses , - 1 ) ;
34561: LD_STRING NoLosses
34563: PPUSH
34564: LD_INT 1
34566: NEG
34567: PPUSH
34568: CALL_OW 101
// GiveMedals ( MAIN ) ;
34572: LD_STRING MAIN
34574: PPUSH
34575: CALL_OW 102
// YouWin ;
34579: CALL_OW 103
// end ; end_of_file
34583: END
// every 0 0$1 trigger IsDead ( JMM ) do
34584: LD_EXP 1
34588: PPUSH
34589: CALL_OW 301
34593: IFFALSE 34605
34595: GO 34597
34597: DISABLE
// YouLost ( JMM ) ;
34598: LD_STRING JMM
34600: PPUSH
34601: CALL_OW 104
34605: END
