// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 103
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3818 0 0
// PrepareRussians ;
 394: CALL 4215 0 0
// PrepareAlliance ;
 398: CALL 5962 0 0
// PrepareDifficulty ;
 402: CALL 7531 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 103
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 78
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 78
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 78
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 78
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 78
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 79
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 79
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 79
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 79
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 79
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 79
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6607 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 79
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 80
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6607 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 80
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6607 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 80
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6607 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6607 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6664 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6664 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6664 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6664 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6664 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6664 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6664 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6664 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6664 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6664 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6664 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6664 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6794 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6794 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6794 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 65
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7164 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 66
2357: PUSH
2358: LD_EXP 66
2362: PUSH
2363: LD_EXP 65
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 66
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 80
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6607 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 80
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6607 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 80
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6607 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6721 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6721 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6721 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6721 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6721 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6721 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6721 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6721 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6721 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6721 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6721 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6721 0 1
3134: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3135: LD_ADDR_EXP 22
3139: PUSH
3140: LD_STRING Gordon
3142: PPUSH
3143: CALL 6721 0 1
3147: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3148: LD_ADDR_EXP 23
3152: PUSH
3153: LD_STRING Peter
3155: PPUSH
3156: CALL 6721 0 1
3160: ST_TO_ADDR
// if StevensStatus = 1 then
3161: LD_EXP 77
3165: PUSH
3166: LD_INT 1
3168: EQUAL
3169: IFFALSE 3186
// Stevens = PrepareUnitOmega ( Stevens ) else
3171: LD_ADDR_EXP 3
3175: PUSH
3176: LD_STRING Stevens
3178: PPUSH
3179: CALL 6721 0 1
3183: ST_TO_ADDR
3184: GO 3199
// Baker = PrepareUnitOmega ( Baker ) ;
3186: LD_ADDR_EXP 21
3190: PUSH
3191: LD_STRING Baker
3193: PPUSH
3194: CALL 6721 0 1
3198: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3199: LD_ADDR_EXP 19
3203: PUSH
3204: LD_STRING 15_other_survivors
3206: PPUSH
3207: CALL_OW 31
3211: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3212: LD_ADDR_VAR 0 7
3216: PUSH
3217: LD_STRING 15_Vehicles_1
3219: PPUSH
3220: EMPTY
3221: PPUSH
3222: CALL_OW 30
3226: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3227: LD_ADDR_VAR 0 8
3231: PUSH
3232: LD_STRING 15_ResourcesInCargo_1
3234: PPUSH
3235: EMPTY
3236: PPUSH
3237: CALL_OW 30
3241: ST_TO_ADDR
// for i := 1 to vehicles do
3242: LD_ADDR_VAR 0 2
3246: PUSH
3247: DOUBLE
3248: LD_INT 1
3250: DEC
3251: ST_TO_ADDR
3252: LD_VAR 0 7
3256: PUSH
3257: FOR_TO
3258: IFFALSE 3483
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3260: LD_ADDR_OWVAR 21
3264: PUSH
3265: LD_VAR 0 7
3269: PUSH
3270: LD_VAR 0 2
3274: ARRAY
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3280: LD_ADDR_OWVAR 37
3284: PUSH
3285: LD_VAR 0 7
3289: PUSH
3290: LD_VAR 0 2
3294: ARRAY
3295: PUSH
3296: LD_INT 2
3298: ARRAY
3299: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3300: LD_ADDR_OWVAR 39
3304: PUSH
3305: LD_VAR 0 7
3309: PUSH
3310: LD_VAR 0 2
3314: ARRAY
3315: PUSH
3316: LD_INT 3
3318: ARRAY
3319: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3320: LD_ADDR_OWVAR 38
3324: PUSH
3325: LD_VAR 0 7
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PUSH
3336: LD_INT 4
3338: ARRAY
3339: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3340: LD_ADDR_OWVAR 40
3344: PUSH
3345: LD_VAR 0 7
3349: PUSH
3350: LD_VAR 0 2
3354: ARRAY
3355: PUSH
3356: LD_INT 5
3358: ARRAY
3359: ST_TO_ADDR
// if vc_weapon = 8 then
3360: LD_OWVAR 40
3364: PUSH
3365: LD_INT 8
3367: EQUAL
3368: IFFALSE 3380
// vc_weapon = 9 else
3370: LD_ADDR_OWVAR 40
3374: PUSH
3375: LD_INT 9
3377: ST_TO_ADDR
3378: GO 3400
// vc_weapon = vehicles [ i ] [ 5 ] ;
3380: LD_ADDR_OWVAR 40
3384: PUSH
3385: LD_VAR 0 7
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PUSH
3396: LD_INT 5
3398: ARRAY
3399: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3400: LD_ADDR_OWVAR 41
3404: PUSH
3405: LD_INT 40
3407: ST_TO_ADDR
// veh = CreateVehicle ;
3408: LD_ADDR_VAR 0 5
3412: PUSH
3413: CALL_OW 45
3417: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3418: LD_VAR 0 5
3422: PPUSH
3423: LD_INT 5
3425: PPUSH
3426: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3430: LD_VAR 0 5
3434: PPUSH
3435: LD_INT 300
3437: PPUSH
3438: LD_INT 800
3440: PPUSH
3441: CALL_OW 12
3445: PPUSH
3446: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: LD_VAR 0 3
3459: PUSH
3460: LD_VAR 0 5
3464: ADD
3465: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3466: LD_VAR 0 5
3470: PPUSH
3471: LD_INT 16
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: CALL_OW 49
// end ;
3481: GO 3257
3483: POP
3484: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3485: LD_ADDR_VAR 0 9
3489: PUSH
3490: LD_INT 16
3492: PPUSH
3493: LD_INT 22
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 21
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 34
3515: PUSH
3516: LD_INT 12
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: LD_INT 33
3525: PUSH
3526: LD_INT 1
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 32
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PPUSH
3550: CALL_OW 70
3554: ST_TO_ADDR
// if cargoList > 0 then
3555: LD_VAR 0 9
3559: PUSH
3560: LD_INT 0
3562: GREATER
3563: IFFALSE 3696
// for i = 1 to cargoList do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_VAR 0 9
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3694
// begin if resources > 0 then
3583: LD_VAR 0 8
3587: PUSH
3588: LD_INT 0
3590: GREATER
3591: IFFALSE 3692
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3593: LD_VAR 0 9
3597: PUSH
3598: LD_VAR 0 2
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_VAR 0 8
3611: PUSH
3612: LD_VAR 0 2
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3626: LD_VAR 0 9
3630: PUSH
3631: LD_VAR 0 2
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_VAR 0 8
3644: PUSH
3645: LD_VAR 0 2
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3659: LD_VAR 0 9
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_VAR 0 8
3677: PUSH
3678: LD_VAR 0 2
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3580
3694: POP
3695: POP
// for i := 1 to heroesFromOmega do
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: DOUBLE
3702: LD_INT 1
3704: DEC
3705: ST_TO_ADDR
3706: LD_EXP 20
3710: PUSH
3711: FOR_TO
3712: IFFALSE 3742
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3714: LD_EXP 20
3718: PUSH
3719: LD_VAR 0 2
3723: ARRAY
3724: PPUSH
3725: LD_VAR 0 3
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PPUSH
3736: CALL_OW 52
// end ;
3740: GO 3711
3742: POP
3743: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3744: LD_ADDR_VAR 0 6
3748: PUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_INT 58
3756: PUSH
3757: EMPTY
3758: LIST
3759: PPUSH
3760: CALL_OW 72
3764: ST_TO_ADDR
// for i := 1 to others13Omega do
3765: LD_ADDR_VAR 0 2
3769: PUSH
3770: DOUBLE
3771: LD_INT 1
3773: DEC
3774: ST_TO_ADDR
3775: LD_EXP 19
3779: PUSH
3780: FOR_TO
3781: IFFALSE 3811
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3783: LD_EXP 19
3787: PUSH
3788: LD_VAR 0 2
3792: ARRAY
3793: PPUSH
3794: LD_VAR 0 6
3798: PUSH
3799: LD_VAR 0 2
3803: ARRAY
3804: PPUSH
3805: CALL_OW 52
// end ;
3809: GO 3780
3811: POP
3812: POP
// end ; end_of_file
3813: LD_VAR 0 1
3817: RET
// export function PrepareLegion ; var i ; begin
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// uc_side = 8 ;
3822: LD_ADDR_OWVAR 20
3826: PUSH
3827: LD_INT 8
3829: ST_TO_ADDR
// uc_nation = 2 ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_INT 2
3837: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3838: LD_ADDR_EXP 30
3842: PUSH
3843: LD_STRING Kurt
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL 6607 0 2
3853: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3854: LD_ADDR_EXP 36
3858: PUSH
3859: LD_STRING Kozlov
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL 6607 0 2
3869: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3870: LD_INT 8
3872: PPUSH
3873: LD_INT 2
3875: PPUSH
3876: LD_INT 122
3878: PPUSH
3879: LD_INT 10
3881: PPUSH
3882: LD_INT 2
3884: PPUSH
3885: LD_INT 4
3887: PPUSH
3888: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3892: LD_INT 8
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: LD_INT 99
3900: PPUSH
3901: LD_INT 10
3903: PPUSH
3904: LD_INT 2
3906: PPUSH
3907: LD_INT 2
3909: PPUSH
3910: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3914: LD_INT 8
3916: PPUSH
3917: LD_INT 2
3919: PPUSH
3920: LD_INT 104
3922: PPUSH
3923: LD_INT 10
3925: PPUSH
3926: LD_INT 1
3928: PPUSH
3929: LD_INT 2
3931: PPUSH
3932: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3936: LD_INT 8
3938: PPUSH
3939: LD_INT 2
3941: PPUSH
3942: LD_INT 104
3944: PPUSH
3945: LD_INT 10
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3958: LD_INT 8
3960: PPUSH
3961: LD_INT 2
3963: PPUSH
3964: LD_INT 118
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: LD_INT 1
3975: PPUSH
3976: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: LD_INT 117
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: LD_INT 3
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: CALL 7725 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 252
4010: PPUSH
4011: LD_INT 10
4013: PPUSH
4014: LD_INT 4
4016: PPUSH
4017: LD_INT 2
4019: PPUSH
4020: CALL 7725 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4024: LD_ADDR_VAR 0 2
4028: PUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 8
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 3
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 30
4051: PUSH
4052: LD_INT 32
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 58
4061: PUSH
4062: EMPTY
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PUSH
4076: FOR_IN
4077: IFFALSE 4105
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4079: LD_INT 8
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: LD_VAR 0 2
4089: PPUSH
4090: LD_INT 10
4092: PPUSH
4093: LD_INT 1
4095: PPUSH
4096: LD_INT 1
4098: PPUSH
4099: CALL 7725 0 6
4103: GO 4076
4105: POP
4106: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4107: LD_INT 8
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: LD_INT 140
4115: PPUSH
4116: LD_INT 10
4118: PPUSH
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL 7725 0 6
// arControler = UnitsInside ( ArControl ) ;
4129: LD_ADDR_EXP 56
4133: PUSH
4134: LD_INT 140
4136: PPUSH
4137: CALL_OW 313
4141: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4142: LD_INT 139
4144: PPUSH
4145: LD_EXP 56
4149: PUSH
4150: LD_INT 1
4152: ARRAY
4153: PPUSH
4154: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4158: LD_INT 138
4160: PPUSH
4161: LD_EXP 56
4165: PUSH
4166: LD_INT 1
4168: ARRAY
4169: PPUSH
4170: CALL_OW 195
// hc_name = Ali Hadarach ;
4174: LD_ADDR_OWVAR 26
4178: PUSH
4179: LD_STRING Ali Hadarach
4181: ST_TO_ADDR
// hc_gallery =  ;
4182: LD_ADDR_OWVAR 33
4186: PUSH
4187: LD_STRING 
4189: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4190: LD_INT 1
4192: PPUSH
4193: LD_INT 8
4195: PPUSH
4196: CALL_OW 383
// LegionFriend = CreateHuman ;
4200: LD_ADDR_EXP 53
4204: PUSH
4205: CALL_OW 44
4209: ST_TO_ADDR
// end ; end_of_file
4210: LD_VAR 0 1
4214: RET
// export function PrepareRussians ; var i ; begin
4215: LD_INT 0
4217: PPUSH
4218: PPUSH
// uc_side = 3 ;
4219: LD_ADDR_OWVAR 20
4223: PUSH
4224: LD_INT 3
4226: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4227: LD_ADDR_EXP 26
4231: PUSH
4232: LD_STRING Platonov
4234: PPUSH
4235: LD_INT 0
4237: PPUSH
4238: CALL 6607 0 2
4242: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4243: LD_EXP 26
4247: PPUSH
4248: LD_INT 23
4250: PPUSH
4251: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4255: LD_ADDR_EXP 27
4259: PUSH
4260: LD_STRING Yakotich
4262: PPUSH
4263: LD_INT 0
4265: PPUSH
4266: CALL 6607 0 2
4270: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4271: LD_EXP 27
4275: PPUSH
4276: LD_INT 26
4278: PPUSH
4279: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4283: LD_ADDR_EXP 37
4287: PUSH
4288: LD_STRING Kovalyuk
4290: PPUSH
4291: LD_INT 0
4293: PPUSH
4294: CALL 6607 0 2
4298: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4299: LD_EXP 37
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4311: LD_ADDR_EXP 58
4315: PUSH
4316: LD_EXP 58
4320: PUSH
4321: LD_EXP 37
4325: ADD
4326: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4327: LD_ADDR_EXP 38
4331: PUSH
4332: LD_STRING Oblukov
4334: PPUSH
4335: LD_INT 0
4337: PPUSH
4338: CALL 6607 0 2
4342: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4343: LD_ADDR_EXP 39
4347: PUSH
4348: LD_STRING Bystrov
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL 6607 0 2
4358: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4359: LD_ADDR_EXP 40
4363: PUSH
4364: LD_STRING Fadeev
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL 6607 0 2
4374: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4375: LD_ADDR_EXP 41
4379: PUSH
4380: LD_STRING Gleb
4382: PPUSH
4383: LD_INT 0
4385: PPUSH
4386: CALL 6607 0 2
4390: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4391: LD_ADDR_EXP 42
4395: PUSH
4396: LD_STRING Petrosyan
4398: PPUSH
4399: LD_INT 0
4401: PPUSH
4402: CALL 6607 0 2
4406: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4407: LD_ADDR_EXP 43
4411: PUSH
4412: LD_STRING Petrovova
4414: PPUSH
4415: LD_INT 0
4417: PPUSH
4418: CALL 6607 0 2
4422: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4423: LD_ADDR_EXP 44
4427: PUSH
4428: LD_STRING Kuzmov
4430: PPUSH
4431: LD_INT 0
4433: PPUSH
4434: CALL 6607 0 2
4438: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4439: LD_ADDR_EXP 45
4443: PUSH
4444: LD_STRING Mikhail
4446: PPUSH
4447: LD_INT 0
4449: PPUSH
4450: CALL 6607 0 2
4454: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4455: LD_ADDR_EXP 46
4459: PUSH
4460: LD_STRING Furmanov
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL 6607 0 2
4470: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4471: LD_ADDR_EXP 47
4475: PUSH
4476: LD_STRING Belkov
4478: PPUSH
4479: LD_INT 0
4481: PPUSH
4482: CALL 6607 0 2
4486: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4487: LD_EXP 38
4491: PPUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 3
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 21
4504: PUSH
4505: LD_INT 3
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 30
4514: PUSH
4515: LD_INT 32
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 58
4524: PUSH
4525: EMPTY
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4547: LD_EXP 40
4551: PPUSH
4552: LD_INT 22
4554: PUSH
4555: LD_INT 3
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PUSH
4562: LD_INT 21
4564: PUSH
4565: LD_INT 3
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 32
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 58
4584: PUSH
4585: EMPTY
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 69
4598: PUSH
4599: LD_INT 1
4601: ARRAY
4602: PPUSH
4603: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4607: LD_EXP 41
4611: PPUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 30
4634: PUSH
4635: LD_INT 32
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 58
4644: PUSH
4645: EMPTY
4646: LIST
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PPUSH
4654: CALL_OW 69
4658: PUSH
4659: LD_INT 1
4661: ARRAY
4662: PPUSH
4663: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4667: LD_EXP 43
4671: PPUSH
4672: LD_INT 22
4674: PUSH
4675: LD_INT 3
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 30
4694: PUSH
4695: LD_INT 32
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 58
4704: PUSH
4705: EMPTY
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4727: LD_EXP 44
4731: PPUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 3
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 21
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 30
4754: PUSH
4755: LD_INT 32
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 58
4764: PUSH
4765: EMPTY
4766: LIST
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 69
4778: PUSH
4779: LD_INT 1
4781: ARRAY
4782: PPUSH
4783: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4787: LD_EXP 46
4791: PPUSH
4792: LD_INT 22
4794: PUSH
4795: LD_INT 3
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 32
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 58
4824: PUSH
4825: EMPTY
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 69
4838: PUSH
4839: LD_INT 1
4841: ARRAY
4842: PPUSH
4843: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4847: LD_EXP 47
4851: PPUSH
4852: LD_INT 22
4854: PUSH
4855: LD_INT 3
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 21
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 30
4874: PUSH
4875: LD_INT 32
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 58
4884: PUSH
4885: EMPTY
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: PPUSH
4894: CALL_OW 69
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PPUSH
4903: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4907: LD_EXP 39
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4919: LD_EXP 42
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4931: LD_EXP 45
4935: PPUSH
4936: LD_INT 26
4938: PPUSH
4939: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4943: LD_EXP 45
4947: PPUSH
4948: LD_INT 2
4950: PPUSH
4951: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4955: LD_INT 3
4957: PPUSH
4958: LD_INT 3
4960: PPUSH
4961: LD_INT 26
4963: PPUSH
4964: LD_INT 10
4966: PPUSH
4967: LD_INT 2
4969: PPUSH
4970: LD_INT 5
4972: PPUSH
4973: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
4977: LD_INT 3
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 23
4985: PPUSH
4986: LD_INT 10
4988: PPUSH
4989: LD_INT 2
4991: PPUSH
4992: LD_INT 4
4994: PPUSH
4995: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
4999: LD_INT 3
5001: PPUSH
5002: LD_INT 3
5004: PPUSH
5005: LD_INT 27
5007: PPUSH
5008: LD_INT 10
5010: PPUSH
5011: LD_INT 9
5013: PPUSH
5014: LD_INT 6
5016: PPUSH
5017: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5021: LD_INT 3
5023: PPUSH
5024: LD_INT 3
5026: PPUSH
5027: LD_INT 27
5029: PPUSH
5030: LD_INT 10
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 3
5038: PPUSH
5039: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5043: LD_INT 3
5045: PPUSH
5046: LD_INT 3
5048: PPUSH
5049: LD_INT 4
5051: PPUSH
5052: LD_INT 10
5054: PPUSH
5055: LD_INT 3
5057: PPUSH
5058: LD_INT 6
5060: PPUSH
5061: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5065: LD_INT 3
5067: PPUSH
5068: LD_INT 3
5070: PPUSH
5071: LD_INT 10
5073: PPUSH
5074: LD_INT 10
5076: PPUSH
5077: LD_INT 3
5079: PPUSH
5080: LD_INT 6
5082: PPUSH
5083: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5087: LD_INT 3
5089: PPUSH
5090: LD_INT 3
5092: PPUSH
5093: LD_INT 2
5095: PPUSH
5096: LD_INT 10
5098: PPUSH
5099: LD_INT 4
5101: PPUSH
5102: LD_INT 3
5104: PPUSH
5105: CALL 7725 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 3
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: LD_INT 10
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: LD_INT 3
5126: PPUSH
5127: CALL 7725 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: LD_INT 22
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 21
5148: PUSH
5149: LD_INT 3
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 30
5158: PUSH
5159: LD_INT 32
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 58
5168: PUSH
5169: EMPTY
5170: LIST
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: PPUSH
5178: CALL_OW 69
5182: PUSH
5183: FOR_IN
5184: IFFALSE 5212
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5186: LD_INT 3
5188: PPUSH
5189: LD_INT 3
5191: PPUSH
5192: LD_VAR 0 2
5196: PPUSH
5197: LD_INT 10
5199: PPUSH
5200: LD_INT 1
5202: PPUSH
5203: LD_INT 1
5205: PPUSH
5206: CALL 7725 0 6
5210: GO 5183
5212: POP
5213: POP
// end ;
5214: LD_VAR 0 1
5218: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
// uc_side = 6 ;
5225: LD_ADDR_OWVAR 20
5229: PUSH
5230: LD_INT 6
5232: ST_TO_ADDR
// uc_nation = 1 ;
5233: LD_ADDR_OWVAR 21
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// vc_engine = 3 ;
5241: LD_ADDR_OWVAR 39
5245: PUSH
5246: LD_INT 3
5248: ST_TO_ADDR
// vc_control = 1 ;
5249: LD_ADDR_OWVAR 38
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// vc_chassis = 5 ;
5257: LD_ADDR_OWVAR 37
5261: PUSH
5262: LD_INT 5
5264: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5265: LD_ADDR_OWVAR 40
5269: PUSH
5270: LD_INT 5
5272: PUSH
5273: LD_INT 9
5275: PUSH
5276: LD_INT 7
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 1
5286: PPUSH
5287: LD_INT 3
5289: PPUSH
5290: CALL_OW 12
5294: ARRAY
5295: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5296: LD_ADDR_EXP 35
5300: PUSH
5301: CALL_OW 45
5305: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5306: LD_EXP 35
5310: PPUSH
5311: LD_INT 14
5313: PPUSH
5314: LD_INT 0
5316: PPUSH
5317: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5321: LD_ADDR_EXP 34
5325: PUSH
5326: LD_STRING Vsevolod
5328: PPUSH
5329: LD_INT 0
5331: PPUSH
5332: CALL 6607 0 2
5336: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5337: LD_EXP 34
5341: PPUSH
5342: LD_EXP 35
5346: PPUSH
5347: CALL_OW 52
// for i := 1 to 5 do
5351: LD_ADDR_VAR 0 2
5355: PUSH
5356: DOUBLE
5357: LD_INT 1
5359: DEC
5360: ST_TO_ADDR
5361: LD_INT 5
5363: PUSH
5364: FOR_TO
5365: IFFALSE 5449
// begin vc_engine = 3 ;
5367: LD_ADDR_OWVAR 39
5371: PUSH
5372: LD_INT 3
5374: ST_TO_ADDR
// vc_control = 3 ;
5375: LD_ADDR_OWVAR 38
5379: PUSH
5380: LD_INT 3
5382: ST_TO_ADDR
// vc_chassis = 3 ;
5383: LD_ADDR_OWVAR 37
5387: PUSH
5388: LD_INT 3
5390: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5391: LD_ADDR_OWVAR 40
5395: PUSH
5396: LD_INT 5
5398: PUSH
5399: LD_INT 9
5401: PUSH
5402: LD_INT 7
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 1
5412: PPUSH
5413: LD_INT 3
5415: PPUSH
5416: CALL_OW 12
5420: ARRAY
5421: ST_TO_ADDR
// veh = CreateVehicle ;
5422: LD_ADDR_VAR 0 3
5426: PUSH
5427: CALL_OW 45
5431: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5432: LD_VAR 0 3
5436: PPUSH
5437: LD_INT 14
5439: PPUSH
5440: LD_INT 0
5442: PPUSH
5443: CALL_OW 49
// end ;
5447: GO 5364
5449: POP
5450: POP
// uc_nation = 3 ;
5451: LD_ADDR_OWVAR 21
5455: PUSH
5456: LD_INT 3
5458: ST_TO_ADDR
// for i := 1 to 7 do
5459: LD_ADDR_VAR 0 2
5463: PUSH
5464: DOUBLE
5465: LD_INT 1
5467: DEC
5468: ST_TO_ADDR
5469: LD_INT 7
5471: PUSH
5472: FOR_TO
5473: IFFALSE 5565
// begin vc_engine = 3 ;
5475: LD_ADDR_OWVAR 39
5479: PUSH
5480: LD_INT 3
5482: ST_TO_ADDR
// vc_control = 3 ;
5483: LD_ADDR_OWVAR 38
5487: PUSH
5488: LD_INT 3
5490: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5491: LD_ADDR_OWVAR 37
5495: PUSH
5496: LD_INT 24
5498: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5499: LD_ADDR_OWVAR 40
5503: PUSH
5504: LD_INT 44
5506: PUSH
5507: LD_INT 47
5509: PUSH
5510: LD_INT 45
5512: PUSH
5513: LD_INT 46
5515: PUSH
5516: LD_INT 49
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 4
5531: PPUSH
5532: CALL_OW 12
5536: ARRAY
5537: ST_TO_ADDR
// veh = CreateVehicle ;
5538: LD_ADDR_VAR 0 3
5542: PUSH
5543: CALL_OW 45
5547: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5548: LD_VAR 0 3
5552: PPUSH
5553: LD_INT 14
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 49
// end ;
5563: GO 5472
5565: POP
5566: POP
// repeat wait ( 0 0$1 ) ;
5567: LD_INT 35
5569: PPUSH
5570: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5574: LD_ADDR_VAR 0 4
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 6
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 21
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 50
5601: PUSH
5602: EMPTY
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PPUSH
5610: CALL_OW 69
5614: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5615: LD_EXP 1
5619: PPUSH
5620: CALL_OW 310
5624: NOT
5625: IFFALSE 5658
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5627: LD_VAR 0 4
5631: PPUSH
5632: LD_EXP 1
5636: PPUSH
5637: CALL_OW 250
5641: PPUSH
5642: LD_EXP 1
5646: PPUSH
5647: CALL_OW 251
5651: PPUSH
5652: CALL_OW 114
5656: GO 5697
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5658: LD_VAR 0 4
5662: PPUSH
5663: LD_EXP 1
5667: PPUSH
5668: CALL_OW 310
5672: PPUSH
5673: CALL_OW 250
5677: PPUSH
5678: LD_EXP 1
5682: PPUSH
5683: CALL_OW 310
5687: PPUSH
5688: CALL_OW 251
5692: PPUSH
5693: CALL_OW 114
// until vehList = 0 ;
5697: LD_VAR 0 4
5701: PUSH
5702: LD_INT 0
5704: EQUAL
5705: IFFALSE 5567
// end ;
5707: LD_VAR 0 1
5711: RET
// export function PreapreMehBehs ; var i , un ; begin
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
// uc_side = 6 ;
5717: LD_ADDR_OWVAR 20
5721: PUSH
5722: LD_INT 6
5724: ST_TO_ADDR
// uc_nation = 3 ;
5725: LD_ADDR_OWVAR 21
5729: PUSH
5730: LD_INT 3
5732: ST_TO_ADDR
// for i := 1 to 3 do
5733: LD_ADDR_VAR 0 2
5737: PUSH
5738: DOUBLE
5739: LD_INT 1
5741: DEC
5742: ST_TO_ADDR
5743: LD_INT 3
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5818
// begin hc_name =  ;
5749: LD_ADDR_OWVAR 26
5753: PUSH
5754: LD_STRING 
5756: ST_TO_ADDR
// hc_gallery =  ;
5757: LD_ADDR_OWVAR 33
5761: PUSH
5762: LD_STRING 
5764: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5765: LD_INT 0
5767: PPUSH
5768: LD_INT 10
5770: PPUSH
5771: CALL_OW 383
// un = CreateHuman ;
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: CALL_OW 44
5784: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5785: LD_ADDR_EXP 58
5789: PUSH
5790: LD_EXP 58
5794: PUSH
5795: LD_VAR 0 3
5799: ADD
5800: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5801: LD_VAR 0 3
5805: PPUSH
5806: LD_INT 17
5808: PPUSH
5809: LD_INT 0
5811: PPUSH
5812: CALL_OW 49
// end ;
5816: GO 5746
5818: POP
5819: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5820: LD_EXP 37
5824: PPUSH
5825: LD_INT 17
5827: PPUSH
5828: LD_INT 0
5830: PPUSH
5831: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5835: LD_EXP 37
5839: PPUSH
5840: LD_INT 6
5842: PPUSH
5843: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5847: LD_INT 145
5849: PPUSH
5850: LD_INT 6
5852: PPUSH
5853: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5857: LD_EXP 58
5861: PUSH
5862: LD_INT 1
5864: ARRAY
5865: PPUSH
5866: LD_INT 37
5868: PPUSH
5869: LD_INT 193
5871: PPUSH
5872: LD_INT 118
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5882: LD_EXP 58
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: PPUSH
5891: LD_INT 37
5893: PPUSH
5894: LD_INT 204
5896: PPUSH
5897: LD_INT 119
5899: PPUSH
5900: LD_INT 0
5902: PPUSH
5903: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5907: LD_EXP 58
5911: PUSH
5912: LD_INT 3
5914: ARRAY
5915: PPUSH
5916: LD_INT 37
5918: PPUSH
5919: LD_INT 195
5921: PPUSH
5922: LD_INT 126
5924: PPUSH
5925: LD_INT 0
5927: PPUSH
5928: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5932: LD_EXP 58
5936: PUSH
5937: LD_INT 4
5939: ARRAY
5940: PPUSH
5941: LD_INT 37
5943: PPUSH
5944: LD_INT 207
5946: PPUSH
5947: LD_INT 126
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 170
// end ; end_of_file
5957: LD_VAR 0 1
5961: RET
// export function PrepareAlliance ; var i ; begin
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
// uc_side = 7 ;
5966: LD_ADDR_OWVAR 20
5970: PUSH
5971: LD_INT 7
5973: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
5974: LD_ADDR_EXP 28
5978: PUSH
5979: LD_STRING Roth
5981: PPUSH
5982: LD_INT 0
5984: PPUSH
5985: CALL 6607 0 2
5989: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
5990: LD_EXP 28
5994: PPUSH
5995: LD_INT 31
5997: PPUSH
5998: LD_INT 0
6000: PPUSH
6001: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6005: LD_EXP 28
6009: PPUSH
6010: LD_INT 248
6012: PPUSH
6013: LD_INT 187
6015: PPUSH
6016: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6020: LD_STRING 10c_Simms
6022: PPUSH
6023: CALL_OW 28
6027: PUSH
6028: LD_INT 1
6030: EQUAL
6031: IFFALSE 6081
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6033: LD_ADDR_EXP 48
6037: PUSH
6038: LD_STRING 10c_Simms
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: CALL 6607 0 2
6048: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6049: LD_EXP 48
6053: PPUSH
6054: LD_INT 32
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6064: LD_EXP 48
6068: PPUSH
6069: LD_INT 248
6071: PPUSH
6072: LD_INT 187
6074: PPUSH
6075: CALL_OW 118
// end else
6079: GO 6155
// begin uc_nation = 1 ;
6081: LD_ADDR_OWVAR 21
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// hc_name =  ;
6089: LD_ADDR_OWVAR 26
6093: PUSH
6094: LD_STRING 
6096: ST_TO_ADDR
// hc_gallery =  ;
6097: LD_ADDR_OWVAR 33
6101: PUSH
6102: LD_STRING 
6104: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6105: LD_INT 2
6107: PPUSH
6108: LD_INT 10
6110: PPUSH
6111: CALL_OW 384
// Simms = CreateHuman ;
6115: LD_ADDR_EXP 48
6119: PUSH
6120: CALL_OW 44
6124: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6125: LD_EXP 48
6129: PPUSH
6130: LD_INT 32
6132: PPUSH
6133: LD_INT 0
6135: PPUSH
6136: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6140: LD_EXP 48
6144: PPUSH
6145: LD_INT 248
6147: PPUSH
6148: LD_INT 187
6150: PPUSH
6151: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6155: LD_ADDR_EXP 49
6159: PUSH
6160: LD_STRING Scholtze
6162: PPUSH
6163: LD_INT 0
6165: PPUSH
6166: CALL 6607 0 2
6170: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6171: LD_ADDR_EXP 50
6175: PUSH
6176: LD_STRING Kirilenkova
6178: PPUSH
6179: LD_INT 0
6181: PPUSH
6182: CALL 6607 0 2
6186: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6187: LD_ADDR_EXP 51
6191: PUSH
6192: LD_STRING Kapitsova
6194: PPUSH
6195: LD_INT 0
6197: PPUSH
6198: CALL 6607 0 2
6202: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6203: LD_ADDR_EXP 52
6207: PUSH
6208: LD_STRING Karamazov
6210: PPUSH
6211: LD_INT 0
6213: PPUSH
6214: CALL 6607 0 2
6218: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6219: LD_EXP 49
6223: PPUSH
6224: LD_INT 39
6226: PPUSH
6227: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6231: LD_EXP 50
6235: PPUSH
6236: LD_INT 133
6238: PPUSH
6239: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6243: LD_EXP 51
6247: PPUSH
6248: LD_INT 133
6250: PPUSH
6251: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6255: LD_EXP 52
6259: PPUSH
6260: LD_INT 45
6262: PPUSH
6263: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6267: LD_INT 7
6269: PPUSH
6270: LD_INT 1
6272: PPUSH
6273: LD_INT 45
6275: PPUSH
6276: LD_INT 10
6278: PPUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_INT 2
6284: PPUSH
6285: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6289: LD_INT 7
6291: PPUSH
6292: LD_INT 3
6294: PPUSH
6295: LD_INT 45
6297: PPUSH
6298: LD_INT 10
6300: PPUSH
6301: LD_INT 2
6303: PPUSH
6304: LD_INT 2
6306: PPUSH
6307: CALL 7725 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6311: LD_INT 7
6313: PPUSH
6314: LD_INT 1
6316: PPUSH
6317: LD_INT 194
6319: PPUSH
6320: LD_INT 10
6322: PPUSH
6323: LD_INT 5
6325: PPUSH
6326: LD_INT 4
6328: PPUSH
6329: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6333: LD_INT 7
6335: PPUSH
6336: LD_INT 3
6338: PPUSH
6339: LD_INT 194
6341: PPUSH
6342: LD_INT 10
6344: PPUSH
6345: LD_INT 8
6347: PPUSH
6348: LD_INT 6
6350: PPUSH
6351: CALL 7725 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6355: LD_INT 7
6357: PPUSH
6358: LD_INT 1
6360: PPUSH
6361: LD_INT 156
6363: PPUSH
6364: LD_INT 10
6366: PPUSH
6367: LD_INT 3
6369: PPUSH
6370: LD_INT 6
6372: PPUSH
6373: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6377: LD_INT 7
6379: PPUSH
6380: LD_INT 3
6382: PPUSH
6383: LD_INT 162
6385: PPUSH
6386: LD_INT 10
6388: PPUSH
6389: LD_INT 3
6391: PPUSH
6392: LD_INT 6
6394: PPUSH
6395: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6399: LD_INT 7
6401: PPUSH
6402: LD_INT 3
6404: PPUSH
6405: LD_INT 39
6407: PPUSH
6408: LD_INT 10
6410: PPUSH
6411: LD_INT 4
6413: PPUSH
6414: LD_INT 3
6416: PPUSH
6417: CALL 7725 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6421: LD_INT 7
6423: PPUSH
6424: LD_INT 3
6426: PPUSH
6427: LD_INT 133
6429: PPUSH
6430: LD_INT 10
6432: PPUSH
6433: LD_INT 4
6435: PPUSH
6436: LD_INT 2
6438: PPUSH
6439: CALL 7725 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6443: LD_INT 7
6445: PPUSH
6446: LD_INT 1
6448: PPUSH
6449: LD_INT 46
6451: PPUSH
6452: LD_INT 10
6454: PPUSH
6455: LD_INT 4
6457: PPUSH
6458: LD_INT 2
6460: PPUSH
6461: CALL 7725 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: LD_INT 22
6472: PUSH
6473: LD_INT 7
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 21
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 30
6492: PUSH
6493: LD_INT 32
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 58
6502: PUSH
6503: EMPTY
6504: LIST
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PUSH
6517: FOR_IN
6518: IFFALSE 6565
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6520: LD_INT 7
6522: PPUSH
6523: LD_INT 1
6525: PUSH
6526: LD_INT 3
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 1
6535: PPUSH
6536: LD_INT 2
6538: PPUSH
6539: CALL_OW 12
6543: ARRAY
6544: PPUSH
6545: LD_VAR 0 2
6549: PPUSH
6550: LD_INT 10
6552: PPUSH
6553: LD_INT 1
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: CALL 7725 0 6
6563: GO 6517
6565: POP
6566: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6567: LD_INT 7
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 226
6575: PPUSH
6576: LD_INT 10
6578: PPUSH
6579: LD_INT 3
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL 7725 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6589: LD_ADDR_EXP 63
6593: PUSH
6594: LD_INT 226
6596: PPUSH
6597: CALL_OW 313
6601: ST_TO_ADDR
// end ; end_of_file
6602: LD_VAR 0 1
6606: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6607: LD_INT 0
6609: PPUSH
6610: PPUSH
// if exist_mode then
6611: LD_VAR 0 2
6615: IFFALSE 6634
// unit := CreateCharacter ( ident ) else
6617: LD_ADDR_VAR 0 4
6621: PUSH
6622: LD_VAR 0 1
6626: PPUSH
6627: CALL_OW 34
6631: ST_TO_ADDR
6632: GO 6649
// unit := NewCharacter ( ident ) ;
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 25
6648: ST_TO_ADDR
// result := unit ;
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_VAR 0 4
6658: ST_TO_ADDR
// end ;
6659: LD_VAR 0 3
6663: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6668: LD_STRING 13s_
6670: PUSH
6671: LD_VAR 0 1
6675: STR
6676: PPUSH
6677: CALL_OW 28
6681: PUSH
6682: LD_INT 1
6684: EQUAL
6685: IFFALSE 6706
// unit = CreateCharacter ( 13s_ & ident ) ;
6687: LD_ADDR_VAR 0 3
6691: PUSH
6692: LD_STRING 13s_
6694: PUSH
6695: LD_VAR 0 1
6699: STR
6700: PPUSH
6701: CALL_OW 34
6705: ST_TO_ADDR
// result := unit ;
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_VAR 0 3
6715: ST_TO_ADDR
// end ;
6716: LD_VAR 0 2
6720: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6721: LD_INT 0
6723: PPUSH
6724: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6725: LD_STRING 15_
6727: PUSH
6728: LD_VAR 0 1
6732: STR
6733: PPUSH
6734: CALL_OW 28
6738: PUSH
6739: LD_INT 1
6741: EQUAL
6742: IFFALSE 6779
// begin unit = CreateCharacter ( 15_ & ident ) ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_STRING 15_
6751: PUSH
6752: LD_VAR 0 1
6756: STR
6757: PPUSH
6758: CALL_OW 34
6762: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6763: LD_ADDR_EXP 20
6767: PUSH
6768: LD_EXP 20
6772: PUSH
6773: LD_VAR 0 3
6777: ADD
6778: ST_TO_ADDR
// end ; result := unit ;
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_VAR 0 3
6788: ST_TO_ADDR
// end ;
6789: LD_VAR 0 2
6793: RET
// export function TabLenght ( tab ) ; var i ; begin
6794: LD_INT 0
6796: PPUSH
6797: PPUSH
// for i = 1 to tab do
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: DOUBLE
6804: LD_INT 1
6806: DEC
6807: ST_TO_ADDR
6808: LD_VAR 0 1
6812: PUSH
6813: FOR_TO
6814: IFFALSE 6828
// result = i ;
6816: LD_ADDR_VAR 0 2
6820: PUSH
6821: LD_VAR 0 3
6825: ST_TO_ADDR
6826: GO 6813
6828: POP
6829: POP
// end ;
6830: LD_VAR 0 2
6834: RET
// export function Video ( mode ) ; begin
6835: LD_INT 0
6837: PPUSH
// if mode = true then
6838: LD_VAR 0 1
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: IFFALSE 6866
// begin ingame_video = true ;
6848: LD_ADDR_OWVAR 52
6852: PUSH
6853: LD_INT 1
6855: ST_TO_ADDR
// interface_hidden = true ;
6856: LD_ADDR_OWVAR 54
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// end else
6864: GO 6882
// begin ingame_video = false ;
6866: LD_ADDR_OWVAR 52
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// interface_hidden = false ;
6874: LD_ADDR_OWVAR 54
6878: PUSH
6879: LD_INT 0
6881: ST_TO_ADDR
// end ; end ;
6882: LD_VAR 0 2
6886: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6887: LD_INT 0
6889: PPUSH
6890: PPUSH
6891: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6892: LD_ADDR_VAR 0 1
6896: PUSH
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 1
6906: PUSH
6907: LD_EXP 3
6911: PUSH
6912: LD_EXP 21
6916: PUSH
6917: LD_EXP 22
6921: PUSH
6922: LD_EXP 23
6926: PUSH
6927: LD_EXP 4
6931: PUSH
6932: LD_EXP 5
6936: PUSH
6937: LD_EXP 6
6941: PUSH
6942: LD_EXP 7
6946: PUSH
6947: LD_EXP 8
6951: PUSH
6952: LD_EXP 9
6956: PUSH
6957: LD_EXP 10
6961: PUSH
6962: LD_EXP 11
6966: PUSH
6967: LD_EXP 12
6971: PUSH
6972: LD_EXP 13
6976: PUSH
6977: LD_EXP 14
6981: PUSH
6982: LD_EXP 15
6986: PUSH
6987: LD_EXP 17
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: DIFF
7012: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7013: LD_ADDR_VAR 0 6
7017: PUSH
7018: LD_INT 1
7020: PPUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 12
7030: ST_TO_ADDR
// for i = 1 to characters do
7031: LD_ADDR_VAR 0 5
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_VAR 0 1
7045: PUSH
7046: FOR_TO
7047: IFFALSE 7157
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7049: LD_VAR 0 5
7053: PUSH
7054: LD_VAR 0 6
7058: EQUAL
7059: PUSH
7060: LD_VAR 0 1
7064: PUSH
7065: LD_VAR 0 5
7069: ARRAY
7070: PPUSH
7071: CALL_OW 258
7075: PUSH
7076: LD_INT 1
7078: EQUAL
7079: AND
7080: IFFALSE 7102
// Say ( characters [ i ] , dialogMID ) ;
7082: LD_VAR 0 1
7086: PUSH
7087: LD_VAR 0 5
7091: ARRAY
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7102: LD_VAR 0 5
7106: PUSH
7107: LD_VAR 0 6
7111: EQUAL
7112: PUSH
7113: LD_VAR 0 1
7117: PUSH
7118: LD_VAR 0 5
7122: ARRAY
7123: PPUSH
7124: CALL_OW 258
7128: PUSH
7129: LD_INT 2
7131: EQUAL
7132: AND
7133: IFFALSE 7155
// Say ( characters [ i ] , dialogFID ) ;
7135: LD_VAR 0 1
7139: PUSH
7140: LD_VAR 0 5
7144: ARRAY
7145: PPUSH
7146: LD_VAR 0 3
7150: PPUSH
7151: CALL_OW 88
// end ;
7155: GO 7046
7157: POP
7158: POP
// end ;
7159: LD_VAR 0 4
7163: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7164: LD_INT 0
7166: PPUSH
7167: PPUSH
7168: PPUSH
7169: PPUSH
// if not list then
7170: LD_VAR 0 1
7174: NOT
7175: IFFALSE 7179
// exit ;
7177: GO 7526
// result := [ ] ;
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: EMPTY
7185: ST_TO_ADDR
// for i in list do
7186: LD_ADDR_VAR 0 4
7190: PUSH
7191: LD_VAR 0 1
7195: PUSH
7196: FOR_IN
7197: IFFALSE 7438
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7199: LD_ADDR_VAR 0 6
7203: PUSH
7204: LD_VAR 0 4
7208: PPUSH
7209: LD_INT 1
7211: PPUSH
7212: CALL_OW 259
7216: PUSH
7217: LD_VAR 0 4
7221: PPUSH
7222: LD_INT 2
7224: PPUSH
7225: CALL_OW 259
7229: PLUS
7230: PUSH
7231: LD_VAR 0 4
7235: PPUSH
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 259
7243: PLUS
7244: PUSH
7245: LD_VAR 0 4
7249: PPUSH
7250: LD_INT 4
7252: PPUSH
7253: CALL_OW 259
7257: PLUS
7258: PUSH
7259: LD_INT 4
7261: DIV
7262: ST_TO_ADDR
// if not result then
7263: LD_VAR 0 3
7267: NOT
7268: IFFALSE 7294
// result := [ [ i , tmp ] ] else
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_VAR 0 4
7279: PUSH
7280: LD_VAR 0 6
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: ST_TO_ADDR
7292: GO 7436
// begin if result [ result ] [ 2 ] <= tmp then
7294: LD_VAR 0 3
7298: PUSH
7299: LD_VAR 0 3
7303: ARRAY
7304: PUSH
7305: LD_INT 2
7307: ARRAY
7308: PUSH
7309: LD_VAR 0 6
7313: LESSEQUAL
7314: IFFALSE 7356
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7316: LD_ADDR_VAR 0 3
7320: PUSH
7321: LD_VAR 0 3
7325: PPUSH
7326: LD_VAR 0 3
7330: PUSH
7331: LD_INT 1
7333: PLUS
7334: PPUSH
7335: LD_VAR 0 4
7339: PUSH
7340: LD_VAR 0 6
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PPUSH
7349: CALL_OW 2
7353: ST_TO_ADDR
7354: GO 7436
// for j = 1 to result do
7356: LD_ADDR_VAR 0 5
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_VAR 0 3
7370: PUSH
7371: FOR_TO
7372: IFFALSE 7434
// begin if tmp < result [ j ] [ 2 ] then
7374: LD_VAR 0 6
7378: PUSH
7379: LD_VAR 0 3
7383: PUSH
7384: LD_VAR 0 5
7388: ARRAY
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: LESS
7394: IFFALSE 7432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7396: LD_ADDR_VAR 0 3
7400: PUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: LD_VAR 0 5
7410: PPUSH
7411: LD_VAR 0 4
7415: PUSH
7416: LD_VAR 0 6
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 2
7429: ST_TO_ADDR
// break ;
7430: GO 7434
// end ; end ;
7432: GO 7371
7434: POP
7435: POP
// end ; end ;
7436: GO 7196
7438: POP
7439: POP
// if result and not asc then
7440: LD_VAR 0 3
7444: PUSH
7445: LD_VAR 0 2
7449: NOT
7450: AND
7451: IFFALSE 7526
// begin tmp := result ;
7453: LD_ADDR_VAR 0 6
7457: PUSH
7458: LD_VAR 0 3
7462: ST_TO_ADDR
// for i = tmp downto 1 do
7463: LD_ADDR_VAR 0 4
7467: PUSH
7468: DOUBLE
7469: LD_VAR 0 6
7473: INC
7474: ST_TO_ADDR
7475: LD_INT 1
7477: PUSH
7478: FOR_DOWNTO
7479: IFFALSE 7524
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7481: LD_ADDR_VAR 0 3
7485: PUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 6
7495: PUSH
7496: LD_VAR 0 4
7500: MINUS
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: PPUSH
7506: LD_VAR 0 6
7510: PUSH
7511: LD_VAR 0 4
7515: ARRAY
7516: PPUSH
7517: CALL_OW 1
7521: ST_TO_ADDR
7522: GO 7478
7524: POP
7525: POP
// end ; end ;
7526: LD_VAR 0 3
7530: RET
// export function PrepareDifficulty ; begin
7531: LD_INT 0
7533: PPUSH
// if difficulty = 1 then
7534: LD_OWVAR 67
7538: PUSH
7539: LD_INT 1
7541: EQUAL
7542: IFFALSE 7570
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7544: LD_INT 51
7546: PPUSH
7547: LD_INT 6
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7557: LD_INT 57
7559: PPUSH
7560: LD_INT 6
7562: PPUSH
7563: LD_INT 2
7565: PPUSH
7566: CALL_OW 322
// end ; if difficulty = 2 then
7570: LD_OWVAR 67
7574: PUSH
7575: LD_INT 2
7577: EQUAL
7578: IFFALSE 7632
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7580: LD_INT 51
7582: PPUSH
7583: LD_INT 6
7585: PPUSH
7586: LD_INT 2
7588: PPUSH
7589: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7593: LD_INT 57
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: LD_INT 2
7601: PPUSH
7602: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7606: LD_INT 52
7608: PPUSH
7609: LD_INT 6
7611: PPUSH
7612: LD_INT 2
7614: PPUSH
7615: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7619: LD_INT 58
7621: PPUSH
7622: LD_INT 6
7624: PPUSH
7625: LD_INT 2
7627: PPUSH
7628: CALL_OW 322
// end ; if difficulty = 3 then
7632: LD_OWVAR 67
7636: PUSH
7637: LD_INT 3
7639: EQUAL
7640: IFFALSE 7720
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7642: LD_INT 51
7644: PPUSH
7645: LD_INT 6
7647: PPUSH
7648: LD_INT 2
7650: PPUSH
7651: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7655: LD_INT 57
7657: PPUSH
7658: LD_INT 6
7660: PPUSH
7661: LD_INT 2
7663: PPUSH
7664: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7668: LD_INT 52
7670: PPUSH
7671: LD_INT 6
7673: PPUSH
7674: LD_INT 2
7676: PPUSH
7677: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7681: LD_INT 58
7683: PPUSH
7684: LD_INT 6
7686: PPUSH
7687: LD_INT 2
7689: PPUSH
7690: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7694: LD_INT 53
7696: PPUSH
7697: LD_INT 6
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7707: LD_INT 59
7709: PPUSH
7710: LD_INT 6
7712: PPUSH
7713: LD_INT 2
7715: PPUSH
7716: CALL_OW 322
// end ; end ;
7720: LD_VAR 0 1
7724: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7725: LD_INT 0
7727: PPUSH
7728: PPUSH
7729: PPUSH
7730: PPUSH
7731: PPUSH
// for i = 1 to count do
7732: LD_ADDR_VAR 0 8
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 6
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7829
// begin uc_side = side ;
7750: LD_ADDR_OWVAR 20
7754: PUSH
7755: LD_VAR 0 1
7759: ST_TO_ADDR
// uc_nation = nation ;
7760: LD_ADDR_OWVAR 21
7764: PUSH
7765: LD_VAR 0 2
7769: ST_TO_ADDR
// hc_gallery =  ;
7770: LD_ADDR_OWVAR 33
7774: PUSH
7775: LD_STRING 
7777: ST_TO_ADDR
// hc_name =  ;
7778: LD_ADDR_OWVAR 26
7782: PUSH
7783: LD_STRING 
7785: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7786: LD_INT 0
7788: PPUSH
7789: LD_VAR 0 5
7793: PPUSH
7794: LD_VAR 0 4
7798: PPUSH
7799: CALL_OW 380
// un = CreateHuman ;
7803: LD_ADDR_VAR 0 10
7807: PUSH
7808: CALL_OW 44
7812: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7813: LD_VAR 0 10
7817: PPUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 52
// end ;
7827: GO 7747
7829: POP
7830: POP
// end ;
7831: LD_VAR 0 7
7835: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7836: LD_INT 0
7838: PPUSH
7839: PPUSH
7840: PPUSH
7841: PPUSH
7842: PPUSH
7843: PPUSH
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7849: LD_INT 2100
7851: PUSH
7852: LD_INT 3150
7854: PUSH
7855: LD_INT 4200
7857: PUSH
7858: LD_INT 5250
7860: PUSH
7861: LD_INT 6300
7863: PUSH
7864: LD_INT 7350
7866: PUSH
7867: LD_INT 8400
7869: PUSH
7870: LD_INT 9450
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 1
7885: PPUSH
7886: LD_INT 8
7888: PPUSH
7889: CALL_OW 12
7893: ARRAY
7894: PPUSH
7895: CALL_OW 67
// amChassisTab = [ ] ;
7899: LD_ADDR_VAR 0 19
7903: PUSH
7904: EMPTY
7905: ST_TO_ADDR
// arChassisTab = [ ] ;
7906: LD_ADDR_VAR 0 18
7910: PUSH
7911: EMPTY
7912: ST_TO_ADDR
// ruChassisTab = [ ] ;
7913: LD_ADDR_VAR 0 17
7917: PUSH
7918: EMPTY
7919: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7920: LD_INT 35
7922: PPUSH
7923: CALL_OW 67
// if nation = 1 then
7927: LD_VAR 0 5
7931: PUSH
7932: LD_INT 1
7934: EQUAL
7935: IFFALSE 8426
// begin uc_side = side ;
7937: LD_ADDR_OWVAR 20
7941: PUSH
7942: LD_VAR 0 2
7946: ST_TO_ADDR
// uc_nation = nation ;
7947: LD_ADDR_OWVAR 21
7951: PUSH
7952: LD_VAR 0 5
7956: ST_TO_ADDR
// vc_engine = vehengine ;
7957: LD_ADDR_OWVAR 39
7961: PUSH
7962: LD_VAR 0 6
7966: ST_TO_ADDR
// vc_control = vehcontrol ;
7967: LD_ADDR_OWVAR 38
7971: PUSH
7972: LD_VAR 0 7
7976: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7977: LD_ADDR_OWVAR 40
7981: PUSH
7982: LD_VAR 0 10
7986: PUSH
7987: LD_INT 1
7989: PPUSH
7990: LD_VAR 0 10
7994: PPUSH
7995: CALL_OW 12
7999: ARRAY
8000: ST_TO_ADDR
// for j = 1 to AMWeapon do
8001: LD_ADDR_VAR 0 14
8005: PUSH
8006: DOUBLE
8007: LD_INT 1
8009: DEC
8010: ST_TO_ADDR
8011: LD_VAR 0 10
8015: PUSH
8016: FOR_TO
8017: IFFALSE 8318
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8019: LD_VAR 0 10
8023: PUSH
8024: LD_VAR 0 14
8028: ARRAY
8029: PUSH
8030: LD_INT 2
8032: EQUAL
8033: PUSH
8034: LD_VAR 0 10
8038: PUSH
8039: LD_VAR 0 14
8043: ARRAY
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: OR
8049: IFFALSE 8102
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8051: LD_ADDR_VAR 0 19
8055: PUSH
8056: LD_INT 1
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 3
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: LD_INT 5
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8078: LD_ADDR_OWVAR 37
8082: PUSH
8083: LD_VAR 0 19
8087: PUSH
8088: LD_INT 1
8090: PPUSH
8091: LD_VAR 0 19
8095: PPUSH
8096: CALL_OW 12
8100: ARRAY
8101: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8102: LD_VAR 0 10
8106: PUSH
8107: LD_VAR 0 14
8111: ARRAY
8112: PUSH
8113: LD_INT 4
8115: EQUAL
8116: PUSH
8117: LD_VAR 0 10
8121: PUSH
8122: LD_VAR 0 14
8126: ARRAY
8127: PUSH
8128: LD_INT 5
8130: EQUAL
8131: OR
8132: PUSH
8133: LD_VAR 0 10
8137: PUSH
8138: LD_VAR 0 14
8142: ARRAY
8143: PUSH
8144: LD_INT 9
8146: EQUAL
8147: OR
8148: PUSH
8149: LD_VAR 0 10
8153: PUSH
8154: LD_VAR 0 14
8158: ARRAY
8159: PUSH
8160: LD_INT 11
8162: EQUAL
8163: OR
8164: PUSH
8165: LD_VAR 0 10
8169: PUSH
8170: LD_VAR 0 14
8174: ARRAY
8175: PUSH
8176: LD_INT 7
8178: EQUAL
8179: OR
8180: IFFALSE 8229
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8182: LD_ADDR_VAR 0 19
8186: PUSH
8187: LD_INT 2
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 4
8195: PUSH
8196: LD_INT 5
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8205: LD_ADDR_OWVAR 37
8209: PUSH
8210: LD_VAR 0 19
8214: PUSH
8215: LD_INT 1
8217: PPUSH
8218: LD_VAR 0 19
8222: PPUSH
8223: CALL_OW 12
8227: ARRAY
8228: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8229: LD_VAR 0 10
8233: PUSH
8234: LD_VAR 0 14
8238: ARRAY
8239: PUSH
8240: LD_INT 8
8242: EQUAL
8243: PUSH
8244: LD_VAR 0 10
8248: PUSH
8249: LD_VAR 0 14
8253: ARRAY
8254: PUSH
8255: LD_INT 6
8257: EQUAL
8258: OR
8259: PUSH
8260: LD_VAR 0 10
8264: PUSH
8265: LD_VAR 0 14
8269: ARRAY
8270: PUSH
8271: LD_INT 10
8273: EQUAL
8274: OR
8275: IFFALSE 8316
// begin amChassisTab = [ 4 , 5 ] ;
8277: LD_ADDR_VAR 0 19
8281: PUSH
8282: LD_INT 4
8284: PUSH
8285: LD_INT 5
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8292: LD_ADDR_OWVAR 37
8296: PUSH
8297: LD_VAR 0 19
8301: PUSH
8302: LD_INT 1
8304: PPUSH
8305: LD_VAR 0 19
8309: PPUSH
8310: CALL_OW 12
8314: ARRAY
8315: ST_TO_ADDR
// end ; end ;
8316: GO 8016
8318: POP
8319: POP
// veh = CreateVehicle ;
8320: LD_ADDR_VAR 0 16
8324: PUSH
8325: CALL_OW 45
8329: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8330: LD_VAR 0 16
8334: PPUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: LD_INT 0
8342: PPUSH
8343: CALL_OW 49
// if vc_control = 1 then
8347: LD_OWVAR 38
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8412
// begin hc_gallery =  ;
8357: LD_ADDR_OWVAR 33
8361: PUSH
8362: LD_STRING 
8364: ST_TO_ADDR
// hc_name =  ;
8365: LD_ADDR_OWVAR 26
8369: PUSH
8370: LD_STRING 
8372: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8373: LD_INT 0
8375: PPUSH
8376: LD_INT 3
8378: PPUSH
8379: LD_VAR 0 4
8383: PPUSH
8384: CALL_OW 380
// un = CreateHuman ;
8388: LD_ADDR_VAR 0 15
8392: PUSH
8393: CALL_OW 44
8397: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8398: LD_VAR 0 15
8402: PPUSH
8403: LD_VAR 0 16
8407: PPUSH
8408: CALL_OW 52
// end ; i = i + 1 ;
8412: LD_ADDR_VAR 0 13
8416: PUSH
8417: LD_VAR 0 13
8421: PUSH
8422: LD_INT 1
8424: PLUS
8425: ST_TO_ADDR
// end ; if nation = 2 then
8426: LD_VAR 0 5
8430: PUSH
8431: LD_INT 2
8433: EQUAL
8434: IFFALSE 8858
// begin uc_side = side ;
8436: LD_ADDR_OWVAR 20
8440: PUSH
8441: LD_VAR 0 2
8445: ST_TO_ADDR
// uc_nation = nation ;
8446: LD_ADDR_OWVAR 21
8450: PUSH
8451: LD_VAR 0 5
8455: ST_TO_ADDR
// vc_engine = vehengine ;
8456: LD_ADDR_OWVAR 39
8460: PUSH
8461: LD_VAR 0 6
8465: ST_TO_ADDR
// vc_control = vehcontrol ;
8466: LD_ADDR_OWVAR 38
8470: PUSH
8471: LD_VAR 0 7
8475: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8476: LD_ADDR_OWVAR 40
8480: PUSH
8481: LD_VAR 0 9
8485: PUSH
8486: LD_INT 1
8488: PPUSH
8489: LD_VAR 0 9
8493: PPUSH
8494: CALL_OW 12
8498: ARRAY
8499: ST_TO_ADDR
// for j = 1 to ARWeapons do
8500: LD_ADDR_VAR 0 14
8504: PUSH
8505: DOUBLE
8506: LD_INT 1
8508: DEC
8509: ST_TO_ADDR
8510: LD_VAR 0 9
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8750
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8518: LD_VAR 0 9
8522: PUSH
8523: LD_VAR 0 14
8527: ARRAY
8528: PUSH
8529: LD_INT 24
8531: EQUAL
8532: PUSH
8533: LD_VAR 0 9
8537: PUSH
8538: LD_VAR 0 14
8542: ARRAY
8543: PUSH
8544: LD_INT 22
8546: EQUAL
8547: OR
8548: PUSH
8549: LD_VAR 0 9
8553: PUSH
8554: LD_VAR 0 14
8558: ARRAY
8559: PUSH
8560: LD_INT 23
8562: EQUAL
8563: OR
8564: PUSH
8565: LD_VAR 0 9
8569: PUSH
8570: LD_VAR 0 14
8574: ARRAY
8575: PUSH
8576: LD_INT 30
8578: EQUAL
8579: OR
8580: IFFALSE 8629
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8582: LD_ADDR_VAR 0 18
8586: PUSH
8587: LD_INT 11
8589: PUSH
8590: LD_INT 12
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8605: LD_ADDR_OWVAR 37
8609: PUSH
8610: LD_VAR 0 18
8614: PUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_VAR 0 18
8622: PPUSH
8623: CALL_OW 12
8627: ARRAY
8628: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8629: LD_VAR 0 9
8633: PUSH
8634: LD_VAR 0 14
8638: ARRAY
8639: PUSH
8640: LD_INT 29
8642: EQUAL
8643: PUSH
8644: LD_VAR 0 9
8648: PUSH
8649: LD_VAR 0 14
8653: ARRAY
8654: PUSH
8655: LD_INT 28
8657: EQUAL
8658: OR
8659: PUSH
8660: LD_VAR 0 9
8664: PUSH
8665: LD_VAR 0 14
8669: ARRAY
8670: PUSH
8671: LD_INT 27
8673: EQUAL
8674: OR
8675: PUSH
8676: LD_VAR 0 9
8680: PUSH
8681: LD_VAR 0 14
8685: ARRAY
8686: PUSH
8687: LD_INT 26
8689: EQUAL
8690: OR
8691: PUSH
8692: LD_VAR 0 9
8696: PUSH
8697: LD_VAR 0 14
8701: ARRAY
8702: PUSH
8703: LD_INT 25
8705: EQUAL
8706: OR
8707: IFFALSE 8748
// begin arChassisTab = [ 13 , 14 ] ;
8709: LD_ADDR_VAR 0 18
8713: PUSH
8714: LD_INT 13
8716: PUSH
8717: LD_INT 14
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8724: LD_ADDR_OWVAR 37
8728: PUSH
8729: LD_VAR 0 18
8733: PUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_VAR 0 18
8741: PPUSH
8742: CALL_OW 12
8746: ARRAY
8747: ST_TO_ADDR
// end ; end ;
8748: GO 8515
8750: POP
8751: POP
// veh = CreateVehicle ;
8752: LD_ADDR_VAR 0 16
8756: PUSH
8757: CALL_OW 45
8761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8762: LD_VAR 0 16
8766: PPUSH
8767: LD_VAR 0 1
8771: PPUSH
8772: LD_INT 0
8774: PPUSH
8775: CALL_OW 49
// if vc_control = 1 then
8779: LD_OWVAR 38
8783: PUSH
8784: LD_INT 1
8786: EQUAL
8787: IFFALSE 8844
// begin hc_gallery =  ;
8789: LD_ADDR_OWVAR 33
8793: PUSH
8794: LD_STRING 
8796: ST_TO_ADDR
// hc_name =  ;
8797: LD_ADDR_OWVAR 26
8801: PUSH
8802: LD_STRING 
8804: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8805: LD_INT 0
8807: PPUSH
8808: LD_INT 3
8810: PPUSH
8811: LD_VAR 0 4
8815: PPUSH
8816: CALL_OW 380
// un = CreateHuman ;
8820: LD_ADDR_VAR 0 15
8824: PUSH
8825: CALL_OW 44
8829: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8830: LD_VAR 0 15
8834: PPUSH
8835: LD_VAR 0 16
8839: PPUSH
8840: CALL_OW 52
// end ; i = i + 1 ;
8844: LD_ADDR_VAR 0 13
8848: PUSH
8849: LD_VAR 0 13
8853: PUSH
8854: LD_INT 1
8856: PLUS
8857: ST_TO_ADDR
// end ; if nation = 3 then
8858: LD_VAR 0 5
8862: PUSH
8863: LD_INT 3
8865: EQUAL
8866: IFFALSE 9242
// begin uc_side = side ;
8868: LD_ADDR_OWVAR 20
8872: PUSH
8873: LD_VAR 0 2
8877: ST_TO_ADDR
// uc_nation = nation ;
8878: LD_ADDR_OWVAR 21
8882: PUSH
8883: LD_VAR 0 5
8887: ST_TO_ADDR
// vc_engine = vehengine ;
8888: LD_ADDR_OWVAR 39
8892: PUSH
8893: LD_VAR 0 6
8897: ST_TO_ADDR
// vc_control = vehcontrol ;
8898: LD_ADDR_OWVAR 38
8902: PUSH
8903: LD_VAR 0 7
8907: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8908: LD_ADDR_OWVAR 40
8912: PUSH
8913: LD_VAR 0 8
8917: PUSH
8918: LD_INT 1
8920: PPUSH
8921: LD_VAR 0 8
8925: PPUSH
8926: CALL_OW 12
8930: ARRAY
8931: ST_TO_ADDR
// for j = 1 to RuWeapons do
8932: LD_ADDR_VAR 0 14
8936: PUSH
8937: DOUBLE
8938: LD_INT 1
8940: DEC
8941: ST_TO_ADDR
8942: LD_VAR 0 8
8946: PUSH
8947: FOR_TO
8948: IFFALSE 9134
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8950: LD_VAR 0 8
8954: PUSH
8955: LD_VAR 0 14
8959: ARRAY
8960: PUSH
8961: LD_INT 42
8963: EQUAL
8964: PUSH
8965: LD_VAR 0 8
8969: PUSH
8970: LD_VAR 0 14
8974: ARRAY
8975: PUSH
8976: LD_INT 43
8978: EQUAL
8979: OR
8980: PUSH
8981: LD_VAR 0 8
8985: PUSH
8986: LD_VAR 0 14
8990: ARRAY
8991: PUSH
8992: LD_INT 44
8994: EQUAL
8995: OR
8996: PUSH
8997: LD_VAR 0 8
9001: PUSH
9002: LD_VAR 0 14
9006: ARRAY
9007: PUSH
9008: LD_INT 45
9010: EQUAL
9011: OR
9012: PUSH
9013: LD_VAR 0 8
9017: PUSH
9018: LD_VAR 0 14
9022: ARRAY
9023: PUSH
9024: LD_INT 49
9026: EQUAL
9027: OR
9028: IFFALSE 9065
// begin ruChassisTab = [ 24 ] ;
9030: LD_ADDR_VAR 0 17
9034: PUSH
9035: LD_INT 24
9037: PUSH
9038: EMPTY
9039: LIST
9040: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9041: LD_ADDR_OWVAR 37
9045: PUSH
9046: LD_VAR 0 17
9050: PUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 17
9058: PPUSH
9059: CALL_OW 12
9063: ARRAY
9064: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9065: LD_VAR 0 8
9069: PUSH
9070: LD_VAR 0 14
9074: ARRAY
9075: PUSH
9076: LD_INT 46
9078: EQUAL
9079: PUSH
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 14
9089: ARRAY
9090: PUSH
9091: LD_INT 47
9093: EQUAL
9094: OR
9095: IFFALSE 9132
// begin ruChassisTab = [ 24 ] ;
9097: LD_ADDR_VAR 0 17
9101: PUSH
9102: LD_INT 24
9104: PUSH
9105: EMPTY
9106: LIST
9107: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9108: LD_ADDR_OWVAR 37
9112: PUSH
9113: LD_VAR 0 17
9117: PUSH
9118: LD_INT 1
9120: PPUSH
9121: LD_VAR 0 17
9125: PPUSH
9126: CALL_OW 12
9130: ARRAY
9131: ST_TO_ADDR
// end ; end ;
9132: GO 8947
9134: POP
9135: POP
// veh = CreateVehicle ;
9136: LD_ADDR_VAR 0 16
9140: PUSH
9141: CALL_OW 45
9145: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9146: LD_VAR 0 16
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: LD_INT 0
9158: PPUSH
9159: CALL_OW 49
// if vc_control = 1 then
9163: LD_OWVAR 38
9167: PUSH
9168: LD_INT 1
9170: EQUAL
9171: IFFALSE 9228
// begin hc_gallery =  ;
9173: LD_ADDR_OWVAR 33
9177: PUSH
9178: LD_STRING 
9180: ST_TO_ADDR
// hc_name =  ;
9181: LD_ADDR_OWVAR 26
9185: PUSH
9186: LD_STRING 
9188: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9189: LD_INT 0
9191: PPUSH
9192: LD_INT 3
9194: PPUSH
9195: LD_VAR 0 4
9199: PPUSH
9200: CALL_OW 380
// un = CreateHuman ;
9204: LD_ADDR_VAR 0 15
9208: PUSH
9209: CALL_OW 44
9213: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9214: LD_VAR 0 15
9218: PPUSH
9219: LD_VAR 0 16
9223: PPUSH
9224: CALL_OW 52
// end ; i = i + 1 ;
9228: LD_ADDR_VAR 0 13
9232: PUSH
9233: LD_VAR 0 13
9237: PUSH
9238: LD_INT 1
9240: PLUS
9241: ST_TO_ADDR
// end ; until i = vehCount ;
9242: LD_VAR 0 13
9246: PUSH
9247: LD_VAR 0 3
9251: EQUAL
9252: IFFALSE 7920
// repeat wait ( 0 0$1 ) ;
9254: LD_INT 35
9256: PPUSH
9257: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9261: LD_ADDR_VAR 0 20
9265: PUSH
9266: LD_INT 22
9268: PUSH
9269: LD_VAR 0 2
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 21
9280: PUSH
9281: LD_INT 2
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 24
9290: PUSH
9291: LD_INT 250
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 69
9307: ST_TO_ADDR
// if vehicleOK_list > 0 then
9308: LD_VAR 0 20
9312: PUSH
9313: LD_INT 0
9315: GREATER
9316: IFFALSE 9507
// begin for i in vehicleOK_list do
9318: LD_ADDR_VAR 0 13
9322: PUSH
9323: LD_VAR 0 20
9327: PUSH
9328: FOR_IN
9329: IFFALSE 9505
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9331: LD_ADDR_VAR 0 21
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_VAR 0 11
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 69
9352: PPUSH
9353: LD_VAR 0 13
9357: PPUSH
9358: CALL_OW 74
9362: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9363: LD_ADDR_VAR 0 22
9367: PUSH
9368: LD_INT 22
9370: PUSH
9371: LD_VAR 0 11
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: LD_INT 59
9385: PUSH
9386: EMPTY
9387: LIST
9388: PUSH
9389: LD_INT 21
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 21
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: PPUSH
9422: CALL_OW 69
9426: PPUSH
9427: LD_VAR 0 13
9431: PPUSH
9432: CALL_OW 74
9436: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9437: LD_VAR 0 13
9441: PPUSH
9442: LD_VAR 0 21
9446: PPUSH
9447: CALL_OW 296
9451: PUSH
9452: LD_INT 8
9454: PLUS
9455: PUSH
9456: LD_VAR 0 13
9460: PPUSH
9461: LD_VAR 0 22
9465: PPUSH
9466: CALL_OW 296
9470: LESS
9471: IFFALSE 9489
// begin ComAttackUnit ( i , target1 ) ;
9473: LD_VAR 0 13
9477: PPUSH
9478: LD_VAR 0 21
9482: PPUSH
9483: CALL_OW 115
// end else
9487: GO 9503
// begin ComAttackUnit ( i , target2 ) ;
9489: LD_VAR 0 13
9493: PPUSH
9494: LD_VAR 0 22
9498: PPUSH
9499: CALL_OW 115
// end ; end ;
9503: GO 9328
9505: POP
9506: POP
// end ; until vehicleOK_list = [ ] ;
9507: LD_VAR 0 20
9511: PUSH
9512: EMPTY
9513: EQUAL
9514: IFFALSE 9254
// end ;
9516: LD_VAR 0 12
9520: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9521: LD_INT 0
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
// for i = 1 to 72 do
9527: LD_ADDR_VAR 0 5
9531: PUSH
9532: DOUBLE
9533: LD_INT 1
9535: DEC
9536: ST_TO_ADDR
9537: LD_INT 72
9539: PUSH
9540: FOR_TO
9541: IFFALSE 9599
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9543: LD_VAR 0 5
9547: PPUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: CALL_OW 321
9557: PUSH
9558: LD_INT 1
9560: EQUAL
9561: PUSH
9562: LD_VAR 0 5
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: CALL_OW 482
9576: PUSH
9577: LD_INT 1
9579: EQUAL
9580: AND
9581: IFFALSE 9597
// AddComResearch ( lab , i ) ;
9583: LD_VAR 0 2
9587: PPUSH
9588: LD_VAR 0 5
9592: PPUSH
9593: CALL_OW 184
9597: GO 9540
9599: POP
9600: POP
// end ;
9601: LD_VAR 0 4
9605: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9606: LD_INT 0
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
9612: PPUSH
9613: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9614: LD_ADDR_VAR 0 8
9618: PUSH
9619: LD_VAR 0 2
9623: PPUSH
9624: CALL_OW 313
9628: PUSH
9629: LD_EXP 36
9633: PUSH
9634: EMPTY
9635: LIST
9636: DIFF
9637: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9638: LD_ADDR_VAR 0 9
9642: PUSH
9643: LD_VAR 0 3
9647: PPUSH
9648: LD_INT 22
9650: PUSH
9651: LD_VAR 0 1
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 2
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 24
9672: PUSH
9673: LD_INT 750
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 3
9682: PUSH
9683: LD_INT 54
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 70
9703: PUSH
9704: LD_EXP 36
9708: PUSH
9709: EMPTY
9710: LIST
9711: DIFF
9712: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9713: LD_ADDR_VAR 0 6
9717: PUSH
9718: LD_VAR 0 3
9722: PPUSH
9723: LD_INT 22
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 21
9737: PUSH
9738: LD_INT 3
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 24
9750: PUSH
9751: LD_INT 1000
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: PPUSH
9770: CALL_OW 70
9774: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9775: LD_VAR 0 6
9779: NOT
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_VAR 0 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 24
9805: PUSH
9806: LD_INT 250
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: PPUSH
9818: CALL_OW 69
9822: NOT
9823: AND
9824: IFFALSE 9828
// exit ;
9826: GO 10010
// if buildings_list > 0 and engineerOkInside then
9828: LD_VAR 0 6
9832: PUSH
9833: LD_INT 0
9835: GREATER
9836: PUSH
9837: LD_VAR 0 8
9841: AND
9842: IFFALSE 9853
// ComExitBuilding ( engineerOkInside ) ;
9844: LD_VAR 0 8
9848: PPUSH
9849: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9853: LD_VAR 0 6
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: PUSH
9862: LD_VAR 0 9
9866: PUSH
9867: LD_INT 0
9869: GREATER
9870: AND
9871: IFFALSE 9891
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9873: LD_VAR 0 9
9877: PPUSH
9878: LD_VAR 0 6
9882: PUSH
9883: LD_INT 1
9885: ARRAY
9886: PPUSH
9887: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9891: LD_VAR 0 6
9895: PUSH
9896: LD_INT 0
9898: EQUAL
9899: PUSH
9900: LD_VAR 0 4
9904: PUSH
9905: LD_INT 0
9907: EQUAL
9908: AND
9909: PUSH
9910: LD_VAR 0 9
9914: PUSH
9915: LD_INT 0
9917: GREATER
9918: AND
9919: IFFALSE 9935
// ComEnterUnit ( engineerOkOutside , building ) ;
9921: LD_VAR 0 9
9925: PPUSH
9926: LD_VAR 0 2
9930: PPUSH
9931: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9935: LD_VAR 0 9
9939: PUSH
9940: LD_INT 0
9942: GREATER
9943: PUSH
9944: LD_VAR 0 6
9948: PUSH
9949: LD_INT 0
9951: EQUAL
9952: AND
9953: PUSH
9954: LD_VAR 0 4
9958: PUSH
9959: LD_INT 0
9961: GREATER
9962: AND
9963: IFFALSE 10010
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9965: LD_VAR 0 9
9969: PPUSH
9970: LD_VAR 0 4
9974: PUSH
9975: LD_INT 1
9977: ARRAY
9978: PPUSH
9979: LD_VAR 0 4
9983: PUSH
9984: LD_INT 2
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 4
9992: PUSH
9993: LD_INT 3
9995: ARRAY
9996: PPUSH
9997: LD_VAR 0 4
10001: PUSH
10002: LD_INT 4
10004: ARRAY
10005: PPUSH
10006: CALL_OW 145
// end ;
10010: LD_VAR 0 5
10014: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
10023: PPUSH
10024: PPUSH
10025: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10026: LD_ADDR_VAR 0 6
10030: PUSH
10031: LD_INT 22
10033: PUSH
10034: LD_VAR 0 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 4
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 23
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 24
10065: PUSH
10066: LD_INT 251
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: PPUSH
10079: CALL_OW 69
10083: PUSH
10084: LD_EXP 36
10088: PUSH
10089: EMPTY
10090: LIST
10091: DIFF
10092: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10093: LD_ADDR_VAR 0 7
10097: PUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 22
10105: PUSH
10106: LD_VAR 0 1
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 23
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 4
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 50
10137: PUSH
10138: EMPTY
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 70
10151: PUSH
10152: LD_EXP 36
10156: PUSH
10157: EMPTY
10158: LIST
10159: DIFF
10160: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10161: LD_ADDR_VAR 0 10
10165: PUSH
10166: LD_VAR 0 3
10170: PPUSH
10171: LD_INT 22
10173: PUSH
10174: LD_VAR 0 1
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 21
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 3
10195: PUSH
10196: LD_INT 25
10198: PUSH
10199: LD_INT 3
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 3
10212: PUSH
10213: LD_INT 24
10215: PUSH
10216: LD_INT 750
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: PPUSH
10233: CALL_OW 70
10237: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10238: LD_ADDR_VAR 0 11
10242: PUSH
10243: LD_VAR 0 2
10247: PPUSH
10248: LD_INT 22
10250: PUSH
10251: LD_VAR 0 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 3
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: LD_INT 1000
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: PPUSH
10310: CALL_OW 70
10314: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10315: LD_VAR 0 10
10319: NOT
10320: PUSH
10321: LD_VAR 0 11
10325: NOT
10326: AND
10327: PUSH
10328: LD_VAR 0 6
10332: NOT
10333: AND
10334: IFFALSE 10338
// exit ;
10336: GO 10572
// if damageUnits > 0 and sci_list > 0 then
10338: LD_VAR 0 10
10342: PUSH
10343: LD_INT 0
10345: GREATER
10346: PUSH
10347: LD_VAR 0 6
10351: PUSH
10352: LD_INT 0
10354: GREATER
10355: AND
10356: IFFALSE 10372
// ComMoveToArea ( damageUnits , healArea ) ;
10358: LD_VAR 0 10
10362: PPUSH
10363: LD_VAR 0 2
10367: PPUSH
10368: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10372: LD_VAR 0 11
10376: PUSH
10377: LD_INT 0
10379: GREATER
10380: PUSH
10381: LD_VAR 0 6
10385: PUSH
10386: LD_INT 0
10388: GREATER
10389: AND
10390: IFFALSE 10401
// ComExitBuilding ( sci_list ) ;
10392: LD_VAR 0 6
10396: PPUSH
10397: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10401: LD_VAR 0 11
10405: PUSH
10406: LD_INT 0
10408: GREATER
10409: PUSH
10410: LD_VAR 0 7
10414: PUSH
10415: LD_INT 0
10417: GREATER
10418: AND
10419: IFFALSE 10439
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10421: LD_VAR 0 7
10425: PPUSH
10426: LD_VAR 0 11
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PPUSH
10435: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10439: LD_VAR 0 10
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_VAR 0 11
10452: PUSH
10453: LD_INT 0
10455: EQUAL
10456: AND
10457: PUSH
10458: LD_VAR 0 7
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: AND
10467: IFFALSE 10572
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10469: LD_ADDR_VAR 0 12
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_VAR 0 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 21
10488: PUSH
10489: LD_INT 3
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 30
10498: PUSH
10499: LD_INT 8
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10516: LD_ADDR_VAR 0 13
10520: PUSH
10521: LD_INT 1
10523: PPUSH
10524: LD_VAR 0 12
10528: PPUSH
10529: CALL_OW 12
10533: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10534: LD_VAR 0 7
10538: PPUSH
10539: LD_INT 3
10541: PUSH
10542: LD_INT 60
10544: PUSH
10545: EMPTY
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PPUSH
10552: CALL_OW 72
10556: PPUSH
10557: LD_VAR 0 12
10561: PUSH
10562: LD_VAR 0 13
10566: ARRAY
10567: PPUSH
10568: CALL_OW 120
// end ; end ;
10572: LD_VAR 0 5
10576: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10577: LD_INT 0
10579: PPUSH
10580: PPUSH
10581: PPUSH
10582: PPUSH
// tmpTab = [ ] ;
10583: LD_ADDR_VAR 0 6
10587: PUSH
10588: EMPTY
10589: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10590: LD_INT 22
10592: PUSH
10593: LD_VAR 0 1
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 30
10604: PUSH
10605: LD_INT 32
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PPUSH
10616: CALL_OW 69
10620: PUSH
10621: LD_INT 0
10623: GREATER
10624: IFFALSE 10707
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10626: LD_ADDR_VAR 0 4
10630: PUSH
10631: LD_INT 22
10633: PUSH
10634: LD_VAR 0 1
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 30
10645: PUSH
10646: LD_INT 32
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 69
10661: PUSH
10662: FOR_IN
10663: IFFALSE 10705
// begin for j in UnitsInside ( i ) do
10665: LD_ADDR_VAR 0 5
10669: PUSH
10670: LD_VAR 0 4
10674: PPUSH
10675: CALL_OW 313
10679: PUSH
10680: FOR_IN
10681: IFFALSE 10701
// tmpTab = tmpTab ^ j ;
10683: LD_ADDR_VAR 0 6
10687: PUSH
10688: LD_VAR 0 6
10692: PUSH
10693: LD_VAR 0 5
10697: ADD
10698: ST_TO_ADDR
10699: GO 10680
10701: POP
10702: POP
// end ;
10703: GO 10662
10705: POP
10706: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10707: LD_VAR 0 6
10711: PPUSH
10712: LD_VAR 0 2
10716: PPUSH
10717: CALL_OW 250
10721: PPUSH
10722: LD_VAR 0 2
10726: PPUSH
10727: CALL_OW 251
10731: PPUSH
10732: CALL_OW 114
// end ;
10736: LD_VAR 0 3
10740: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10741: LD_INT 0
10743: PPUSH
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
10748: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10749: LD_ADDR_VAR 0 8
10753: PUSH
10754: LD_VAR 0 2
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_VAR 0 1
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 34
10783: PUSH
10784: LD_INT 52
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 70
10800: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10801: LD_ADDR_VAR 0 9
10805: PUSH
10806: LD_VAR 0 2
10810: PPUSH
10811: LD_INT 22
10813: PUSH
10814: LD_VAR 0 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 21
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 3
10835: PUSH
10836: LD_INT 24
10838: PUSH
10839: LD_INT 1000
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: PPUSH
10858: CALL_OW 70
10862: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10863: LD_VAR 0 9
10867: PUSH
10868: LD_INT 0
10870: GREATER
10871: PUSH
10872: LD_VAR 0 8
10876: PPUSH
10877: LD_INT 24
10879: PUSH
10880: LD_INT 750
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 72
10891: PUSH
10892: LD_INT 0
10894: GREATER
10895: AND
10896: IFFALSE 10916
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10898: LD_VAR 0 8
10902: PPUSH
10903: LD_VAR 0 9
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10916: LD_VAR 0 8
10920: PUSH
10921: LD_INT 0
10923: GREATER
10924: PUSH
10925: LD_VAR 0 9
10929: PUSH
10930: LD_INT 0
10932: EQUAL
10933: AND
10934: PUSH
10935: LD_VAR 0 3
10939: PUSH
10940: LD_INT 0
10942: GREATER
10943: AND
10944: IFFALSE 10991
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10946: LD_VAR 0 8
10950: PPUSH
10951: LD_VAR 0 3
10955: PUSH
10956: LD_INT 1
10958: ARRAY
10959: PPUSH
10960: LD_VAR 0 3
10964: PUSH
10965: LD_INT 2
10967: ARRAY
10968: PPUSH
10969: LD_VAR 0 3
10973: PUSH
10974: LD_INT 3
10976: ARRAY
10977: PPUSH
10978: LD_VAR 0 3
10982: PUSH
10983: LD_INT 4
10985: ARRAY
10986: PPUSH
10987: CALL_OW 567
// end ;
10991: LD_VAR 0 4
10995: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
10996: LD_INT 0
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
11005: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_VAR 0 2
11015: PPUSH
11016: LD_INT 22
11018: PUSH
11019: LD_VAR 0 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 56
11030: PUSH
11031: EMPTY
11032: LIST
11033: PUSH
11034: LD_INT 24
11036: PUSH
11037: LD_INT 700
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: LD_INT 60
11049: PUSH
11050: EMPTY
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: LD_INT 25
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 25
11072: PUSH
11073: LD_INT 5
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 25
11082: PUSH
11083: LD_INT 8
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 25
11092: PUSH
11093: LD_INT 9
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 70
11118: PUSH
11119: LD_EXP 26
11123: PUSH
11124: LD_EXP 27
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: DIFF
11133: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11134: LD_ADDR_VAR 0 7
11138: PUSH
11139: LD_VAR 0 2
11143: PPUSH
11144: LD_INT 22
11146: PUSH
11147: LD_VAR 0 1
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 30
11158: PUSH
11159: LD_INT 32
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 58
11168: PUSH
11169: EMPTY
11170: LIST
11171: PUSH
11172: LD_INT 24
11174: PUSH
11175: LD_INT 251
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PPUSH
11188: CALL_OW 70
11192: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11193: LD_ADDR_VAR 0 9
11197: PUSH
11198: LD_VAR 0 2
11202: PPUSH
11203: LD_INT 22
11205: PUSH
11206: LD_VAR 0 1
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: LD_INT 2
11217: PUSH
11218: LD_INT 30
11220: PUSH
11221: LD_INT 4
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: LD_INT 5
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 24
11245: PUSH
11246: LD_INT 251
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: PPUSH
11258: CALL_OW 70
11262: ST_TO_ADDR
// if barrackList > 0 then
11263: LD_VAR 0 9
11267: PUSH
11268: LD_INT 0
11270: GREATER
11271: IFFALSE 11419
// begin if turretList = 0 then
11273: LD_VAR 0 7
11277: PUSH
11278: LD_INT 0
11280: EQUAL
11281: IFFALSE 11323
// begin if soldiers_list > 0 then
11283: LD_VAR 0 6
11287: PUSH
11288: LD_INT 0
11290: GREATER
11291: IFFALSE 11321
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11293: LD_VAR 0 6
11297: PPUSH
11298: LD_VAR 0 9
11302: PUSH
11303: LD_INT 1
11305: PPUSH
11306: LD_VAR 0 9
11310: PPUSH
11311: CALL_OW 12
11315: ARRAY
11316: PPUSH
11317: CALL_OW 120
// end else
11321: GO 11419
// begin for i in barrackList do
11323: LD_ADDR_VAR 0 4
11327: PUSH
11328: LD_VAR 0 9
11332: PUSH
11333: FOR_IN
11334: IFFALSE 11417
// begin insideUnits = UnitsInside ( i ) ;
11336: LD_ADDR_VAR 0 10
11340: PUSH
11341: LD_VAR 0 4
11345: PPUSH
11346: CALL_OW 313
11350: ST_TO_ADDR
// if insideUnits > 0 then
11351: LD_VAR 0 10
11355: PUSH
11356: LD_INT 0
11358: GREATER
11359: IFFALSE 11383
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11361: LD_VAR 0 10
11365: PUSH
11366: LD_INT 1
11368: ARRAY
11369: PPUSH
11370: LD_VAR 0 7
11374: PUSH
11375: LD_INT 1
11377: ARRAY
11378: PPUSH
11379: CALL_OW 120
// if soldiers_list > 0 then
11383: LD_VAR 0 6
11387: PUSH
11388: LD_INT 0
11390: GREATER
11391: IFFALSE 11415
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11393: LD_VAR 0 6
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PPUSH
11402: LD_VAR 0 7
11406: PUSH
11407: LD_INT 1
11409: ARRAY
11410: PPUSH
11411: CALL_OW 120
// end ;
11415: GO 11333
11417: POP
11418: POP
// end ; end ; end ;
11419: LD_VAR 0 3
11423: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11424: LD_INT 0
11426: PPUSH
11427: PPUSH
11428: PPUSH
11429: PPUSH
11430: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11431: LD_ADDR_VAR 0 6
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_VAR 0 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 2
11450: PUSH
11451: LD_INT 30
11453: PUSH
11454: LD_INT 31
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 30
11463: PUSH
11464: LD_INT 32
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 30
11473: PUSH
11474: LD_INT 33
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 30
11483: PUSH
11484: LD_INT 4
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 30
11493: PUSH
11494: LD_INT 5
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11518: LD_ADDR_VAR 0 7
11522: PUSH
11523: LD_INT 22
11525: PUSH
11526: LD_VAR 0 2
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 21
11537: PUSH
11538: LD_INT 3
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 58
11547: PUSH
11548: EMPTY
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: LIST
11555: PPUSH
11556: CALL_OW 69
11560: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11561: LD_VAR 0 6
11565: PUSH
11566: LD_INT 0
11568: GREATER
11569: PUSH
11570: LD_VAR 0 7
11574: PUSH
11575: LD_INT 0
11577: GREATER
11578: AND
11579: IFFALSE 11649
// begin for i in turretsList do
11581: LD_ADDR_VAR 0 4
11585: PUSH
11586: LD_VAR 0 6
11590: PUSH
11591: FOR_IN
11592: IFFALSE 11647
// begin for j in enemyBuildings do
11594: LD_ADDR_VAR 0 5
11598: PUSH
11599: LD_VAR 0 7
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11643
// begin if GetDistUnits ( i , j ) < 20 then
11607: LD_VAR 0 4
11611: PPUSH
11612: LD_VAR 0 5
11616: PPUSH
11617: CALL_OW 296
11621: PUSH
11622: LD_INT 20
11624: LESS
11625: IFFALSE 11641
// begin ComAttackUnit ( i , j ) ;
11627: LD_VAR 0 4
11631: PPUSH
11632: LD_VAR 0 5
11636: PPUSH
11637: CALL_OW 115
// end ; end ;
11641: GO 11604
11643: POP
11644: POP
// end ;
11645: GO 11591
11647: POP
11648: POP
// end ; end ;
11649: LD_VAR 0 3
11653: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11654: LD_INT 0
11656: PPUSH
11657: PPUSH
// for i = 1 to vehCount do
11658: LD_ADDR_VAR 0 9
11662: PUSH
11663: DOUBLE
11664: LD_INT 1
11666: DEC
11667: ST_TO_ADDR
11668: LD_VAR 0 3
11672: PUSH
11673: FOR_TO
11674: IFFALSE 11721
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11676: LD_VAR 0 2
11680: PPUSH
11681: LD_VAR 0 7
11685: PPUSH
11686: LD_VAR 0 5
11690: PPUSH
11691: LD_VAR 0 6
11695: PPUSH
11696: LD_VAR 0 4
11700: PUSH
11701: LD_INT 1
11703: PPUSH
11704: LD_VAR 0 4
11708: PPUSH
11709: CALL_OW 12
11713: ARRAY
11714: PPUSH
11715: CALL_OW 185
11719: GO 11673
11721: POP
11722: POP
// end ;
11723: LD_VAR 0 8
11727: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11728: LD_INT 0
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
// if oponent = 1 then
11736: LD_VAR 0 2
11740: PUSH
11741: LD_INT 1
11743: EQUAL
11744: IFFALSE 11934
// begin repeat wait ( 0 0$1 ) ;
11746: LD_INT 35
11748: PPUSH
11749: CALL_OW 67
// for j in legionVehicles do
11753: LD_ADDR_VAR 0 5
11757: PUSH
11758: LD_EXP 55
11762: PUSH
11763: FOR_IN
11764: IFFALSE 11922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11766: LD_ADDR_VAR 0 7
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_VAR 0 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PPUSH
11783: CALL_OW 69
11787: PPUSH
11788: LD_VAR 0 5
11792: PPUSH
11793: CALL_OW 74
11797: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11798: LD_ADDR_VAR 0 8
11802: PUSH
11803: LD_INT 22
11805: PUSH
11806: LD_VAR 0 1
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 30
11817: PUSH
11818: LD_INT 32
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 59
11827: PUSH
11828: EMPTY
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: PPUSH
11839: CALL_OW 69
11843: PPUSH
11844: LD_VAR 0 5
11848: PPUSH
11849: CALL_OW 74
11853: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11854: LD_VAR 0 5
11858: PPUSH
11859: LD_VAR 0 7
11863: PPUSH
11864: CALL_OW 296
11868: PUSH
11869: LD_INT 8
11871: PLUS
11872: PUSH
11873: LD_VAR 0 5
11877: PPUSH
11878: LD_VAR 0 8
11882: PPUSH
11883: CALL_OW 296
11887: LESS
11888: IFFALSE 11906
// ComAttackUnit ( j , target1 ) else
11890: LD_VAR 0 5
11894: PPUSH
11895: LD_VAR 0 7
11899: PPUSH
11900: CALL_OW 115
11904: GO 11920
// ComAttackUnit ( j , target2 ) ;
11906: LD_VAR 0 5
11910: PPUSH
11911: LD_VAR 0 8
11915: PPUSH
11916: CALL_OW 115
// end ;
11920: GO 11763
11922: POP
11923: POP
// until legionVehicles = 0 ;
11924: LD_EXP 55
11928: PUSH
11929: LD_INT 0
11931: EQUAL
11932: IFFALSE 11746
// end ; if oponent = 2 then
11934: LD_VAR 0 2
11938: PUSH
11939: LD_INT 2
11941: EQUAL
11942: IFFALSE 12132
// begin repeat wait ( 0 0$1 ) ;
11944: LD_INT 35
11946: PPUSH
11947: CALL_OW 67
// for j in russianVehicles do
11951: LD_ADDR_VAR 0 5
11955: PUSH
11956: LD_EXP 61
11960: PUSH
11961: FOR_IN
11962: IFFALSE 12120
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11964: LD_ADDR_VAR 0 7
11968: PUSH
11969: LD_INT 22
11971: PUSH
11972: LD_VAR 0 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 69
11985: PPUSH
11986: LD_VAR 0 5
11990: PPUSH
11991: CALL_OW 74
11995: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11996: LD_ADDR_VAR 0 8
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_VAR 0 1
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 30
12015: PUSH
12016: LD_INT 32
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 59
12025: PUSH
12026: EMPTY
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: PPUSH
12042: LD_VAR 0 5
12046: PPUSH
12047: CALL_OW 74
12051: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12052: LD_VAR 0 5
12056: PPUSH
12057: LD_VAR 0 7
12061: PPUSH
12062: CALL_OW 296
12066: PUSH
12067: LD_INT 8
12069: PLUS
12070: PUSH
12071: LD_VAR 0 5
12075: PPUSH
12076: LD_VAR 0 8
12080: PPUSH
12081: CALL_OW 296
12085: LESS
12086: IFFALSE 12104
// ComAttackUnit ( j , target1 ) else
12088: LD_VAR 0 5
12092: PPUSH
12093: LD_VAR 0 7
12097: PPUSH
12098: CALL_OW 115
12102: GO 12118
// ComAttackUnit ( j , target2 ) ;
12104: LD_VAR 0 5
12108: PPUSH
12109: LD_VAR 0 8
12113: PPUSH
12114: CALL_OW 115
// end ;
12118: GO 11961
12120: POP
12121: POP
// until russianVehicles = 0 ;
12122: LD_EXP 61
12126: PUSH
12127: LD_INT 0
12129: EQUAL
12130: IFFALSE 11944
// end ; if oponent = 3 then
12132: LD_VAR 0 2
12136: PUSH
12137: LD_INT 3
12139: EQUAL
12140: IFFALSE 12330
// begin repeat wait ( 0 0$1 ) ;
12142: LD_INT 35
12144: PPUSH
12145: CALL_OW 67
// for j in allianceVehicles do
12149: LD_ADDR_VAR 0 5
12153: PUSH
12154: LD_EXP 62
12158: PUSH
12159: FOR_IN
12160: IFFALSE 12318
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12162: LD_ADDR_VAR 0 7
12166: PUSH
12167: LD_INT 22
12169: PUSH
12170: LD_VAR 0 1
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 69
12183: PPUSH
12184: LD_VAR 0 5
12188: PPUSH
12189: CALL_OW 74
12193: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12194: LD_ADDR_VAR 0 8
12198: PUSH
12199: LD_INT 22
12201: PUSH
12202: LD_VAR 0 1
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 30
12213: PUSH
12214: LD_INT 32
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 59
12223: PUSH
12224: EMPTY
12225: LIST
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: PPUSH
12235: CALL_OW 69
12239: PPUSH
12240: LD_VAR 0 5
12244: PPUSH
12245: CALL_OW 74
12249: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12250: LD_VAR 0 5
12254: PPUSH
12255: LD_VAR 0 7
12259: PPUSH
12260: CALL_OW 296
12264: PUSH
12265: LD_INT 8
12267: PLUS
12268: PUSH
12269: LD_VAR 0 5
12273: PPUSH
12274: LD_VAR 0 8
12278: PPUSH
12279: CALL_OW 296
12283: LESS
12284: IFFALSE 12302
// ComAttackUnit ( j , target1 ) else
12286: LD_VAR 0 5
12290: PPUSH
12291: LD_VAR 0 7
12295: PPUSH
12296: CALL_OW 115
12300: GO 12316
// ComAttackUnit ( j , target2 ) ;
12302: LD_VAR 0 5
12306: PPUSH
12307: LD_VAR 0 8
12311: PPUSH
12312: CALL_OW 115
// end ;
12316: GO 12159
12318: POP
12319: POP
// until allianceVehicles = 0 ;
12320: LD_EXP 62
12324: PUSH
12325: LD_INT 0
12327: EQUAL
12328: IFFALSE 12142
// end ; end ;
12330: LD_VAR 0 3
12334: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12335: LD_INT 0
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
12342: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12343: LD_ADDR_VAR 0 6
12347: PUSH
12348: LD_INT 22
12350: PUSH
12351: LD_VAR 0 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 25
12362: PUSH
12363: LD_INT 9
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PPUSH
12374: CALL_OW 69
12378: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12379: LD_ADDR_VAR 0 7
12383: PUSH
12384: LD_INT 81
12386: PUSH
12387: LD_VAR 0 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 3
12398: PUSH
12399: LD_INT 21
12401: PUSH
12402: LD_INT 3
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 69
12421: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12422: LD_ADDR_VAR 0 4
12426: PUSH
12427: LD_INT 1
12429: PPUSH
12430: LD_INT 3
12432: PPUSH
12433: CALL_OW 12
12437: ST_TO_ADDR
// for i = 1 to list do
12438: LD_ADDR_VAR 0 5
12442: PUSH
12443: DOUBLE
12444: LD_INT 1
12446: DEC
12447: ST_TO_ADDR
12448: LD_VAR 0 6
12452: PUSH
12453: FOR_TO
12454: IFFALSE 12656
// for ta in filter do
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_VAR 0 7
12465: PUSH
12466: FOR_IN
12467: IFFALSE 12652
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12469: LD_VAR 0 6
12473: PUSH
12474: LD_VAR 0 5
12478: ARRAY
12479: PPUSH
12480: LD_VAR 0 3
12484: PPUSH
12485: CALL_OW 296
12489: PUSH
12490: LD_INT 15
12492: LESSEQUAL
12493: IFFALSE 12650
// begin case c of 1 :
12495: LD_VAR 0 4
12499: PUSH
12500: LD_INT 1
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12546
12508: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12509: LD_VAR 0 6
12513: PUSH
12514: LD_VAR 0 5
12518: ARRAY
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: CALL_OW 250
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: CALL_OW 251
12539: PPUSH
12540: CALL_OW 154
12544: GO 12650
12546: LD_INT 2
12548: DOUBLE
12549: EQUAL
12550: IFTRUE 12554
12552: GO 12618
12554: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12555: LD_VAR 0 6
12559: PUSH
12560: LD_VAR 0 5
12564: ARRAY
12565: PPUSH
12566: LD_VAR 0 3
12570: PPUSH
12571: CALL_OW 250
12575: PUSH
12576: LD_INT 1
12578: NEG
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 12
12587: PLUS
12588: PPUSH
12589: LD_VAR 0 3
12593: PPUSH
12594: CALL_OW 251
12598: PUSH
12599: LD_INT 1
12601: NEG
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL_OW 12
12610: PLUS
12611: PPUSH
12612: CALL_OW 153
12616: GO 12650
12618: LD_INT 3
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12649
12626: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12627: LD_VAR 0 6
12631: PUSH
12632: LD_VAR 0 5
12636: ARRAY
12637: PPUSH
12638: LD_VAR 0 3
12642: PPUSH
12643: CALL_OW 115
12647: GO 12650
12649: POP
// end ; end ;
12650: GO 12466
12652: POP
12653: POP
12654: GO 12453
12656: POP
12657: POP
// end ;
12658: LD_VAR 0 2
12662: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12663: LD_INT 0
12665: PPUSH
12666: PPUSH
12667: PPUSH
12668: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12669: LD_INT 22
12671: PUSH
12672: LD_VAR 0 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 21
12683: PUSH
12684: LD_INT 2
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 34
12693: PUSH
12694: LD_INT 49
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: PUSH
12711: LD_INT 0
12713: EQUAL
12714: IFFALSE 12718
// exit ;
12716: GO 12973
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12718: LD_INT 22
12720: PUSH
12721: LD_VAR 0 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 21
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 34
12742: PUSH
12743: LD_INT 49
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: PUSH
12760: LD_INT 0
12762: GREATER
12763: IFFALSE 12973
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12765: LD_ADDR_VAR 0 6
12769: PUSH
12770: LD_INT 22
12772: PUSH
12773: LD_VAR 0 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 21
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 34
12794: PUSH
12795: LD_INT 49
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 69
12811: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12812: LD_INT 105
12814: PPUSH
12815: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12819: LD_ADDR_VAR 0 4
12823: PUSH
12824: LD_VAR 0 6
12828: PPUSH
12829: LD_INT 3
12831: PUSH
12832: LD_INT 60
12834: PUSH
12835: EMPTY
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 72
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12961
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12850: LD_ADDR_VAR 0 5
12854: PUSH
12855: LD_INT 81
12857: PUSH
12858: LD_VAR 0 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 101
12869: PUSH
12870: LD_VAR 0 2
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 2
12881: PUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: LD_INT 58
12897: PUSH
12898: EMPTY
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 69
12919: PPUSH
12920: LD_VAR 0 4
12924: PPUSH
12925: CALL_OW 74
12929: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12930: LD_VAR 0 4
12934: PPUSH
12935: LD_VAR 0 5
12939: PPUSH
12940: CALL_OW 250
12944: PPUSH
12945: LD_VAR 0 5
12949: PPUSH
12950: CALL_OW 251
12954: PPUSH
12955: CALL_OW 111
// end ;
12959: GO 12847
12961: POP
12962: POP
// until vehs = 0 ;
12963: LD_VAR 0 6
12967: PUSH
12968: LD_INT 0
12970: EQUAL
12971: IFFALSE 12765
// end ; end_of_file
12973: LD_VAR 0 3
12977: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
12978: LD_VAR 0 1
12982: PUSH
12983: LD_INT 1
12985: EQUAL
12986: PUSH
12987: LD_VAR 0 2
12991: PUSH
12992: LD_INT 4
12994: EQUAL
12995: AND
12996: IFFALSE 13005
// YouLost ( text ) ;
12998: LD_STRING text
13000: PPUSH
13001: CALL_OW 104
// end ;
13005: PPOPN 2
13007: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13008: LD_VAR 0 1
13012: PUSH
13013: LD_INT 235
13015: EQUAL
13016: PUSH
13017: LD_VAR 0 2
13021: PPUSH
13022: CALL_OW 255
13026: PUSH
13027: LD_INT 4
13029: EQUAL
13030: AND
13031: IFFALSE 13107
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13033: LD_INT 235
13035: PPUSH
13036: LD_INT 84
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13046: LD_INT 235
13048: PPUSH
13049: LD_INT 68
13051: PPUSH
13052: LD_INT 100
13054: PPUSH
13055: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13059: LD_INT 235
13061: PPUSH
13062: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13066: LD_INT 235
13068: PPUSH
13069: LD_INT 48
13071: PPUSH
13072: LD_INT 69
13074: PPUSH
13075: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13079: LD_INT 235
13081: PPUSH
13082: LD_INT 39
13084: PPUSH
13085: LD_INT 61
13087: PPUSH
13088: CALL_OW 171
// wait ( 0 0$10 ) ;
13092: LD_INT 350
13094: PPUSH
13095: CALL_OW 67
// powellUnloadCargo = 1 ;
13099: LD_ADDR_EXP 70
13103: PUSH
13104: LD_INT 1
13106: ST_TO_ADDR
// end ; end ;
13107: PPOPN 2
13109: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13110: LD_INT 0
13112: PPUSH
13113: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13114: LD_ADDR_VAR 0 3
13118: PUSH
13119: LD_INT 22
13121: PUSH
13122: LD_INT 4
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 21
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 56
13141: PUSH
13142: EMPTY
13143: LIST
13144: PUSH
13145: LD_INT 3
13147: PUSH
13148: LD_INT 60
13150: PUSH
13151: EMPTY
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 69
13168: PUSH
13169: LD_EXP 17
13173: PUSH
13174: EMPTY
13175: LIST
13176: DIFF
13177: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 255
13187: PUSH
13188: LD_INT 4
13190: EQUAL
13191: IFFALSE 13322
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13193: LD_INT 22
13195: PUSH
13196: LD_INT 4
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 30
13205: PUSH
13206: LD_INT 8
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: PUSH
13222: LD_INT 1
13224: EQUAL
13225: IFFALSE 13322
// begin for i = 1 to 3 do
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: DOUBLE
13233: LD_INT 1
13235: DEC
13236: ST_TO_ADDR
13237: LD_INT 3
13239: PUSH
13240: FOR_TO
13241: IFFALSE 13305
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13243: LD_VAR 0 3
13247: PUSH
13248: LD_VAR 0 2
13252: ARRAY
13253: PPUSH
13254: LD_INT 3
13256: PUSH
13257: LD_INT 25
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 72
13275: PPUSH
13276: LD_VAR 0 1
13280: PPUSH
13281: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13285: LD_VAR 0 3
13289: PUSH
13290: LD_VAR 0 2
13294: ARRAY
13295: PPUSH
13296: LD_INT 4
13298: PPUSH
13299: CALL_OW 183
// end ;
13303: GO 13240
13305: POP
13306: POP
// ResAllTechs ( 4 , building , 1 ) ;
13307: LD_INT 4
13309: PPUSH
13310: LD_VAR 0 1
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL 9521 0 3
// end ; if GetSide ( building ) = 8 then
13322: LD_VAR 0 1
13326: PPUSH
13327: CALL_OW 255
13331: PUSH
13332: LD_INT 8
13334: EQUAL
13335: IFFALSE 13520
// begin if GetNation ( building ) = 3 then
13337: LD_VAR 0 1
13341: PPUSH
13342: CALL_OW 248
13346: PUSH
13347: LD_INT 3
13349: EQUAL
13350: IFFALSE 13520
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13352: LD_EXP 36
13356: PPUSH
13357: LD_INT 73
13359: PPUSH
13360: LD_INT 16
13362: PPUSH
13363: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13367: LD_EXP 36
13371: PPUSH
13372: LD_INT 21
13374: PPUSH
13375: LD_INT 74
13377: PPUSH
13378: LD_INT 12
13380: PPUSH
13381: LD_INT 1
13383: PPUSH
13384: CALL_OW 205
// wait ( 0 0$2 ) ;
13388: LD_INT 70
13390: PPUSH
13391: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13395: LD_EXP 36
13399: PPUSH
13400: LD_INT 22
13402: PUSH
13403: LD_INT 8
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 30
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 23
13422: PUSH
13423: LD_INT 3
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: PUSH
13440: LD_INT 1
13442: ARRAY
13443: PPUSH
13444: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13448: LD_EXP 36
13452: PPUSH
13453: LD_INT 3
13455: PPUSH
13456: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13460: LD_INT 22
13462: PUSH
13463: LD_INT 8
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 30
13472: PUSH
13473: LD_INT 3
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 3
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 69
13499: PUSH
13500: LD_INT 1
13502: ARRAY
13503: PPUSH
13504: LD_INT 24
13506: PPUSH
13507: LD_INT 3
13509: PPUSH
13510: LD_INT 3
13512: PPUSH
13513: LD_INT 48
13515: PPUSH
13516: CALL_OW 185
// end ; end ; end ;
13520: PPOPN 3
13522: END
// on BuildingComplete ( building ) do var powellPeople ;
13523: LD_INT 0
13525: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 255
13535: PUSH
13536: LD_INT 4
13538: EQUAL
13539: PUSH
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL_OW 266
13549: PUSH
13550: LD_INT 17
13552: EQUAL
13553: AND
13554: IFFALSE 13836
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 4
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 21
13573: PUSH
13574: LD_INT 1
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 56
13583: PUSH
13584: EMPTY
13585: LIST
13586: PUSH
13587: LD_INT 3
13589: PUSH
13590: LD_INT 60
13592: PUSH
13593: EMPTY
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: PPUSH
13606: CALL_OW 69
13610: PUSH
13611: LD_EXP 17
13615: PUSH
13616: EMPTY
13617: LIST
13618: DIFF
13619: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13620: LD_INT 22
13622: PUSH
13623: LD_INT 4
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 21
13632: PUSH
13633: LD_INT 3
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 30
13642: PUSH
13643: LD_INT 32
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: PPUSH
13655: CALL_OW 69
13659: PUSH
13660: LD_INT 1
13662: ARRAY
13663: PPUSH
13664: LD_INT 6
13666: PPUSH
13667: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13671: LD_INT 22
13673: PUSH
13674: LD_INT 4
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 3
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 30
13693: PUSH
13694: LD_INT 32
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PUSH
13711: LD_INT 2
13713: ARRAY
13714: PPUSH
13715: LD_INT 5
13717: PPUSH
13718: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13722: LD_VAR 0 2
13726: PUSH
13727: LD_INT 1
13729: ARRAY
13730: PPUSH
13731: LD_INT 22
13733: PUSH
13734: LD_INT 4
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 21
13743: PUSH
13744: LD_INT 3
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 32
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 69
13770: PUSH
13771: LD_INT 1
13773: ARRAY
13774: PPUSH
13775: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13779: LD_VAR 0 2
13783: PUSH
13784: LD_INT 2
13786: ARRAY
13787: PPUSH
13788: LD_INT 22
13790: PUSH
13791: LD_INT 4
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 21
13800: PUSH
13801: LD_INT 3
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 30
13810: PUSH
13811: LD_INT 32
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: PPUSH
13823: CALL_OW 69
13827: PUSH
13828: LD_INT 2
13830: ARRAY
13831: PPUSH
13832: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
13836: LD_VAR 0 1
13840: PPUSH
13841: CALL_OW 255
13845: PUSH
13846: LD_INT 4
13848: EQUAL
13849: PUSH
13850: LD_VAR 0 1
13854: PPUSH
13855: CALL_OW 266
13859: PUSH
13860: LD_INT 21
13862: EQUAL
13863: AND
13864: IFFALSE 14011
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13866: LD_INT 85
13868: PPUSH
13869: LD_INT 3
13871: PPUSH
13872: LD_INT 3
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: LD_INT 3
13880: PUSH
13881: LD_INT 5
13883: PUSH
13884: LD_INT 7
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 1
13894: PPUSH
13895: LD_INT 3
13897: PPUSH
13898: CALL_OW 12
13902: ARRAY
13903: PPUSH
13904: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13908: LD_INT 85
13910: PPUSH
13911: LD_INT 3
13913: PPUSH
13914: LD_INT 3
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: LD_INT 3
13922: PUSH
13923: LD_INT 5
13925: PUSH
13926: LD_INT 7
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 1
13936: PPUSH
13937: LD_INT 3
13939: PPUSH
13940: CALL_OW 12
13944: ARRAY
13945: PPUSH
13946: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13950: LD_INT 85
13952: PPUSH
13953: LD_INT 3
13955: PPUSH
13956: LD_INT 3
13958: PPUSH
13959: LD_INT 1
13961: PPUSH
13962: LD_INT 3
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: LD_INT 7
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 1
13978: PPUSH
13979: LD_INT 3
13981: PPUSH
13982: CALL_OW 12
13986: ARRAY
13987: PPUSH
13988: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
13992: LD_INT 85
13994: PPUSH
13995: LD_INT 5
13997: PPUSH
13998: LD_INT 3
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 6
14006: PPUSH
14007: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 255
14020: PUSH
14021: LD_INT 8
14023: EQUAL
14024: IFFALSE 14050
// begin if GetBType ( building ) = b_workshop then
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 266
14035: PUSH
14036: LD_INT 2
14038: EQUAL
14039: IFFALSE 14050
// ComUpgrade ( building ) ;
14041: LD_VAR 0 1
14045: PPUSH
14046: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14050: LD_VAR 0 1
14054: PPUSH
14055: CALL_OW 255
14059: PUSH
14060: LD_INT 3
14062: EQUAL
14063: IFFALSE 14137
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14065: LD_ADDR_EXP 94
14069: PUSH
14070: LD_EXP 94
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: CALL_OW 3
14082: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14083: LD_ADDR_EXP 94
14087: PUSH
14088: LD_EXP 94
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: CALL_OW 3
14100: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14101: LD_ADDR_EXP 94
14105: PUSH
14106: LD_EXP 94
14110: PPUSH
14111: LD_INT 1
14113: PPUSH
14114: CALL_OW 3
14118: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14119: LD_ADDR_EXP 94
14123: PUSH
14124: LD_EXP 94
14128: PPUSH
14129: LD_INT 1
14131: PPUSH
14132: CALL_OW 3
14136: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 255
14146: PUSH
14147: LD_INT 8
14149: EQUAL
14150: IFFALSE 14224
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14152: LD_ADDR_EXP 93
14156: PUSH
14157: LD_EXP 93
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: CALL_OW 3
14169: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14170: LD_ADDR_EXP 93
14174: PUSH
14175: LD_EXP 93
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: CALL_OW 3
14187: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14188: LD_ADDR_EXP 93
14192: PUSH
14193: LD_EXP 93
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: CALL_OW 3
14205: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14206: LD_ADDR_EXP 93
14210: PUSH
14211: LD_EXP 93
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 3
14223: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14224: LD_VAR 0 1
14228: PPUSH
14229: CALL_OW 255
14233: PUSH
14234: LD_INT 7
14236: EQUAL
14237: IFFALSE 14311
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14239: LD_ADDR_EXP 95
14243: PUSH
14244: LD_EXP 95
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: CALL_OW 3
14256: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14257: LD_ADDR_EXP 95
14261: PUSH
14262: LD_EXP 95
14266: PPUSH
14267: LD_INT 1
14269: PPUSH
14270: CALL_OW 3
14274: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14275: LD_ADDR_EXP 95
14279: PUSH
14280: LD_EXP 95
14284: PPUSH
14285: LD_INT 1
14287: PPUSH
14288: CALL_OW 3
14292: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14293: LD_ADDR_EXP 95
14297: PUSH
14298: LD_EXP 95
14302: PPUSH
14303: LD_INT 1
14305: PPUSH
14306: CALL_OW 3
14310: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 255
14320: PUSH
14321: LD_INT 3
14323: EQUAL
14324: IFFALSE 14391
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14326: LD_VAR 0 1
14330: PPUSH
14331: CALL_OW 266
14335: PUSH
14336: LD_INT 32
14338: EQUAL
14339: PUSH
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 266
14349: PUSH
14350: LD_INT 33
14352: EQUAL
14353: OR
14354: IFFALSE 14391
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14356: LD_VAR 0 1
14360: PPUSH
14361: LD_INT 46
14363: PUSH
14364: LD_INT 47
14366: PUSH
14367: LD_INT 45
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 1
14377: PPUSH
14378: LD_INT 3
14380: PPUSH
14381: CALL_OW 12
14385: ARRAY
14386: PPUSH
14387: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 255
14400: PUSH
14401: LD_INT 8
14403: EQUAL
14404: PUSH
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 266
14414: PUSH
14415: LD_INT 32
14417: EQUAL
14418: AND
14419: IFFALSE 14452
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14421: LD_VAR 0 1
14425: PPUSH
14426: LD_INT 28
14428: PUSH
14429: LD_INT 27
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 1
14438: PPUSH
14439: LD_INT 2
14441: PPUSH
14442: CALL_OW 12
14446: ARRAY
14447: PPUSH
14448: CALL_OW 431
// end ; end ;
14452: PPOPN 2
14454: END
// on EnterBuilding ( building , human ) do begin end ;
14455: PPOPN 2
14457: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14458: LD_VAR 0 1
14462: PPUSH
14463: CALL_OW 255
14467: PUSH
14468: LD_INT 6
14470: EQUAL
14471: IFFALSE 14489
// ruBehs = ruBehs ^ vehicle ;
14473: LD_ADDR_EXP 59
14477: PUSH
14478: LD_EXP 59
14482: PUSH
14483: LD_VAR 0 1
14487: ADD
14488: ST_TO_ADDR
// end ;
14489: PPOPN 1
14491: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14492: LD_INT 0
14494: PPUSH
14495: PPUSH
// begin if vehicle = powellVeh then
14496: LD_VAR 0 1
14500: PUSH
14501: LD_EXP 73
14505: EQUAL
14506: IFFALSE 14522
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14508: LD_VAR 0 1
14512: PPUSH
14513: CALL_OW 313
14517: PPUSH
14518: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14522: LD_VAR 0 1
14526: PPUSH
14527: CALL_OW 255
14531: PUSH
14532: LD_INT 4
14534: EQUAL
14535: IFFALSE 14552
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_INT 58
14544: PPUSH
14545: LD_INT 63
14547: PPUSH
14548: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14552: LD_VAR 0 1
14556: PPUSH
14557: CALL_OW 255
14561: PUSH
14562: LD_INT 4
14564: EQUAL
14565: PUSH
14566: LD_EXP 69
14570: PUSH
14571: LD_INT 2
14573: EQUAL
14574: AND
14575: PUSH
14576: LD_VAR 0 1
14580: PPUSH
14581: CALL_OW 264
14585: PUSH
14586: LD_INT 6
14588: EQUAL
14589: AND
14590: IFFALSE 14644
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14592: LD_EXP 66
14596: PUSH
14597: LD_INT 5
14599: ARRAY
14600: PPUSH
14601: CALL_OW 122
// wait ( 0 0$1 ) ;
14605: LD_INT 35
14607: PPUSH
14608: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
14612: LD_EXP 66
14616: PUSH
14617: LD_INT 5
14619: ARRAY
14620: PPUSH
14621: LD_INT 85
14623: PPUSH
14624: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
14628: LD_EXP 66
14632: PUSH
14633: LD_INT 5
14635: ARRAY
14636: PPUSH
14637: LD_INT 3
14639: PPUSH
14640: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
14644: LD_VAR 0 1
14648: PPUSH
14649: CALL_OW 255
14653: PUSH
14654: LD_INT 4
14656: EQUAL
14657: PUSH
14658: LD_EXP 69
14662: PUSH
14663: LD_INT 2
14665: EQUAL
14666: AND
14667: PUSH
14668: LD_VAR 0 1
14672: PPUSH
14673: CALL_OW 264
14677: PUSH
14678: LD_INT 3
14680: EQUAL
14681: AND
14682: IFFALSE 14709
// begin powellVeh = vehicle ;
14684: LD_ADDR_EXP 73
14688: PUSH
14689: LD_VAR 0 1
14693: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
14694: LD_VAR 0 1
14698: PPUSH
14699: LD_INT 49
14701: PPUSH
14702: LD_INT 74
14704: PPUSH
14705: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14709: LD_VAR 0 1
14713: PPUSH
14714: CALL_OW 255
14718: PUSH
14719: LD_INT 8
14721: EQUAL
14722: PUSH
14723: LD_VAR 0 1
14727: PPUSH
14728: CALL_OW 248
14732: PUSH
14733: LD_INT 2
14735: EQUAL
14736: AND
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 247
14747: PUSH
14748: LD_INT 2
14750: EQUAL
14751: AND
14752: IFFALSE 14788
// begin legionVehicles = legionVehicles ^ vehicle ;
14754: LD_ADDR_EXP 55
14758: PUSH
14759: LD_EXP 55
14763: PUSH
14764: LD_VAR 0 1
14768: ADD
14769: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14770: LD_VAR 0 1
14774: PPUSH
14775: LD_EXP 56
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 255
14797: PUSH
14798: LD_INT 8
14800: EQUAL
14801: PUSH
14802: LD_VAR 0 1
14806: PPUSH
14807: CALL_OW 248
14811: PUSH
14812: LD_INT 3
14814: EQUAL
14815: AND
14816: IFFALSE 15355
// begin ChangeMissionObjectives ( MlegionDel ) ;
14818: LD_STRING MlegionDel
14820: PPUSH
14821: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14825: LD_ADDR_VAR 0 3
14829: PUSH
14830: LD_INT 1
14832: PPUSH
14833: LD_INT 2
14835: PPUSH
14836: CALL_OW 12
14840: ST_TO_ADDR
// legionRocket = vehicle ;
14841: LD_ADDR_EXP 99
14845: PUSH
14846: LD_VAR 0 1
14850: ST_TO_ADDR
// DialogueOn ;
14851: CALL_OW 6
// if legionBomb = 1 then
14855: LD_VAR 0 3
14859: PUSH
14860: LD_INT 1
14862: EQUAL
14863: IFFALSE 15215
// begin if Kurt then
14865: LD_EXP 30
14869: IFFALSE 14885
// Say ( Kurt , D12-Kurt-1 ) else
14871: LD_EXP 30
14875: PPUSH
14876: LD_STRING D12-Kurt-1
14878: PPUSH
14879: CALL_OW 88
14883: GO 14947
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14885: LD_INT 22
14887: PUSH
14888: LD_INT 8
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 21
14897: PUSH
14898: LD_INT 1
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 25
14907: PUSH
14908: LD_INT 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 26
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 69
14935: PUSH
14936: LD_INT 2
14938: ARRAY
14939: PPUSH
14940: LD_STRING D12-Kurt-1
14942: PPUSH
14943: CALL_OW 88
// DialogueOff ;
14947: CALL_OW 7
// wait ( 0 0$15 ) ;
14951: LD_INT 525
14953: PPUSH
14954: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
14958: LD_ADDR_VAR 0 4
14962: PUSH
14963: LD_INT 22
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 3
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 23
14985: PUSH
14986: LD_INT 1
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 2
14995: PUSH
14996: LD_INT 30
14998: PUSH
14999: LD_INT 0
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 30
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: ST_TO_ADDR
// if rocketTarget = 0 then
15032: LD_VAR 0 4
15036: PUSH
15037: LD_INT 0
15039: EQUAL
15040: IFFALSE 15116
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15042: LD_ADDR_VAR 0 4
15046: PUSH
15047: LD_INT 22
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 3
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 23
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 2
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 0
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 30
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 69
15115: ST_TO_ADDR
// if rocketTarget = 0 then
15116: LD_VAR 0 4
15120: PUSH
15121: LD_INT 0
15123: EQUAL
15124: IFFALSE 15178
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15126: LD_ADDR_VAR 0 4
15130: PUSH
15131: LD_INT 22
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 21
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 23
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 50
15163: PUSH
15164: EMPTY
15165: LIST
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: PPUSH
15173: CALL_OW 69
15177: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15178: LD_EXP 99
15182: PPUSH
15183: LD_VAR 0 4
15187: PUSH
15188: LD_INT 1
15190: ARRAY
15191: PPUSH
15192: CALL_OW 250
15196: PPUSH
15197: LD_VAR 0 4
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PPUSH
15206: CALL_OW 251
15210: PPUSH
15211: CALL_OW 116
// end ; if legionBomb = 2 then
15215: LD_VAR 0 3
15219: PUSH
15220: LD_INT 2
15222: EQUAL
15223: IFFALSE 15355
// begin if Kurt then
15225: LD_EXP 30
15229: IFFALSE 15245
// Say ( Kurt , D12a-Kurt-1 ) else
15231: LD_EXP 30
15235: PPUSH
15236: LD_STRING D12a-Kurt-1
15238: PPUSH
15239: CALL_OW 88
15243: GO 15307
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15245: LD_INT 22
15247: PUSH
15248: LD_INT 8
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 21
15257: PUSH
15258: LD_INT 1
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 25
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 26
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: PUSH
15296: LD_INT 2
15298: ARRAY
15299: PPUSH
15300: LD_STRING D12a-Kurt-11
15302: PPUSH
15303: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15307: LD_EXP 28
15311: PPUSH
15312: LD_STRING D12a-Roth-1
15314: PPUSH
15315: CALL_OW 94
// DialogueOff ;
15319: CALL_OW 7
// wait ( 0 0$15 ) ;
15323: LD_INT 525
15325: PPUSH
15326: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15330: LD_EXP 99
15334: PPUSH
15335: LD_INT 23
15337: PPUSH
15338: CALL_OW 250
15342: PPUSH
15343: LD_INT 23
15345: PPUSH
15346: CALL_OW 251
15350: PPUSH
15351: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15355: LD_VAR 0 1
15359: PPUSH
15360: CALL_OW 255
15364: PUSH
15365: LD_INT 3
15367: EQUAL
15368: PUSH
15369: LD_VAR 0 1
15373: PPUSH
15374: CALL_OW 248
15378: PUSH
15379: LD_INT 3
15381: EQUAL
15382: AND
15383: PUSH
15384: LD_VAR 0 1
15388: PPUSH
15389: CALL_OW 247
15393: PUSH
15394: LD_INT 2
15396: EQUAL
15397: AND
15398: IFFALSE 15416
// RussianVehicles = RussianVehicles ^ vehicle ;
15400: LD_ADDR_EXP 61
15404: PUSH
15405: LD_EXP 61
15409: PUSH
15410: LD_VAR 0 1
15414: ADD
15415: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15416: LD_VAR 0 1
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_INT 7
15428: EQUAL
15429: PUSH
15430: LD_VAR 0 1
15434: PPUSH
15435: CALL_OW 247
15439: PUSH
15440: LD_INT 2
15442: EQUAL
15443: AND
15444: IFFALSE 15503
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15446: LD_ADDR_EXP 62
15450: PUSH
15451: LD_EXP 62
15455: PUSH
15456: LD_VAR 0 1
15460: ADD
15461: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 263
15471: PUSH
15472: LD_INT 2
15474: EQUAL
15475: IFFALSE 15503
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15477: LD_VAR 0 1
15481: PPUSH
15482: LD_EXP 63
15486: PUSH
15487: LD_INT 1
15489: PPUSH
15490: LD_INT 3
15492: PPUSH
15493: CALL_OW 12
15497: ARRAY
15498: PPUSH
15499: CALL_OW 135
// end ; end ;
15503: PPOPN 4
15505: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 255
15515: PUSH
15516: LD_INT 4
15518: EQUAL
15519: PUSH
15520: LD_EXP 69
15524: PUSH
15525: LD_INT 1
15527: EQUAL
15528: AND
15529: IFFALSE 15632
// begin ComEnterUnit ( human , AmFact ) ;
15531: LD_VAR 0 2
15535: PPUSH
15536: LD_INT 85
15538: PPUSH
15539: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15543: LD_VAR 0 2
15547: PPUSH
15548: CALL_OW 258
15552: PUSH
15553: LD_INT 1
15555: EQUAL
15556: PUSH
15557: LD_EXP 102
15561: PUSH
15562: LD_INT 0
15564: EQUAL
15565: AND
15566: IFFALSE 15632
// begin blockEvent1 = 1 ;
15568: LD_ADDR_EXP 102
15572: PUSH
15573: LD_INT 1
15575: ST_TO_ADDR
// startAttacks = 1 ;
15576: LD_ADDR_EXP 72
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15584: LD_VAR 0 2
15588: PPUSH
15589: LD_STRING D4a-Sol1-1
15591: PPUSH
15592: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
15596: LD_EXP 17
15600: PPUSH
15601: LD_STRING D4a-Pow-1
15603: PPUSH
15604: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
15608: LD_VAR 0 2
15612: PPUSH
15613: LD_STRING D4a-Sol1-2
15615: PPUSH
15616: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
15620: LD_EXP 17
15624: PPUSH
15625: LD_STRING D4a-Pow-2
15627: PPUSH
15628: CALL_OW 88
// end ; end ; end ;
15632: PPOPN 2
15634: END
// on UnitDestroyed ( unit ) do var i ;
15635: LD_INT 0
15637: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 255
15647: PUSH
15648: LD_INT 1
15650: EQUAL
15651: PUSH
15652: LD_VAR 0 1
15656: PPUSH
15657: CALL_OW 247
15661: PUSH
15662: LD_INT 1
15664: EQUAL
15665: AND
15666: IFFALSE 15682
// unitLost = unitLost + 1 ;
15668: LD_ADDR_EXP 98
15672: PUSH
15673: LD_EXP 98
15677: PUSH
15678: LD_INT 1
15680: PLUS
15681: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 255
15691: PUSH
15692: LD_INT 4
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL_OW 247
15705: PUSH
15706: LD_INT 1
15708: EQUAL
15709: AND
15710: IFFALSE 15760
// begin for i in amUnitsAttack do
15712: LD_ADDR_VAR 0 2
15716: PUSH
15717: LD_EXP 66
15721: PUSH
15722: FOR_IN
15723: IFFALSE 15758
// if i = unit then
15725: LD_VAR 0 2
15729: PUSH
15730: LD_VAR 0 1
15734: EQUAL
15735: IFFALSE 15756
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
15737: LD_ADDR_EXP 66
15741: PUSH
15742: LD_EXP 66
15746: PUSH
15747: LD_VAR 0 1
15751: PUSH
15752: EMPTY
15753: LIST
15754: DIFF
15755: ST_TO_ADDR
15756: GO 15722
15758: POP
15759: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 255
15769: PUSH
15770: LD_INT 8
15772: EQUAL
15773: PUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 247
15783: PUSH
15784: LD_INT 2
15786: EQUAL
15787: AND
15788: PUSH
15789: LD_VAR 0 1
15793: PPUSH
15794: CALL_OW 248
15798: PUSH
15799: LD_INT 2
15801: EQUAL
15802: AND
15803: IFFALSE 15853
// begin for i in legionVehicles do
15805: LD_ADDR_VAR 0 2
15809: PUSH
15810: LD_EXP 55
15814: PUSH
15815: FOR_IN
15816: IFFALSE 15851
// if i = unit then
15818: LD_VAR 0 2
15822: PUSH
15823: LD_VAR 0 1
15827: EQUAL
15828: IFFALSE 15849
// legionVehicles = legionVehicles diff [ unit ] ;
15830: LD_ADDR_EXP 55
15834: PUSH
15835: LD_EXP 55
15839: PUSH
15840: LD_VAR 0 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: DIFF
15848: ST_TO_ADDR
15849: GO 15815
15851: POP
15852: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15853: LD_VAR 0 1
15857: PPUSH
15858: CALL_OW 255
15862: PUSH
15863: LD_INT 3
15865: EQUAL
15866: PUSH
15867: LD_VAR 0 1
15871: PPUSH
15872: CALL_OW 247
15876: PUSH
15877: LD_INT 2
15879: EQUAL
15880: AND
15881: IFFALSE 15931
// begin for i in RussianVehicles do
15883: LD_ADDR_VAR 0 2
15887: PUSH
15888: LD_EXP 61
15892: PUSH
15893: FOR_IN
15894: IFFALSE 15929
// if i = unit then
15896: LD_VAR 0 2
15900: PUSH
15901: LD_VAR 0 1
15905: EQUAL
15906: IFFALSE 15927
// RussianVehicles = RussianVehicles diff [ unit ] ;
15908: LD_ADDR_EXP 61
15912: PUSH
15913: LD_EXP 61
15917: PUSH
15918: LD_VAR 0 1
15922: PUSH
15923: EMPTY
15924: LIST
15925: DIFF
15926: ST_TO_ADDR
15927: GO 15893
15929: POP
15930: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
15931: LD_VAR 0 1
15935: PPUSH
15936: CALL_OW 255
15940: PUSH
15941: LD_INT 7
15943: EQUAL
15944: PUSH
15945: LD_VAR 0 1
15949: PPUSH
15950: CALL_OW 247
15954: PUSH
15955: LD_INT 2
15957: EQUAL
15958: AND
15959: IFFALSE 16009
// begin for i in AllianceVehicles do
15961: LD_ADDR_VAR 0 2
15965: PUSH
15966: LD_EXP 62
15970: PUSH
15971: FOR_IN
15972: IFFALSE 16007
// if i = unit then
15974: LD_VAR 0 2
15978: PUSH
15979: LD_VAR 0 1
15983: EQUAL
15984: IFFALSE 16005
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
15986: LD_ADDR_EXP 62
15990: PUSH
15991: LD_EXP 62
15995: PUSH
15996: LD_VAR 0 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: DIFF
16004: ST_TO_ADDR
16005: GO 15971
16007: POP
16008: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 255
16018: PUSH
16019: LD_INT 3
16021: EQUAL
16022: PUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 247
16032: PUSH
16033: LD_INT 3
16035: EQUAL
16036: AND
16037: IFFALSE 16729
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 266
16048: PUSH
16049: LD_INT 31
16051: EQUAL
16052: PUSH
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL_OW 266
16062: PUSH
16063: LD_INT 32
16065: EQUAL
16066: OR
16067: PUSH
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 266
16077: PUSH
16078: LD_INT 36
16080: EQUAL
16081: OR
16082: PUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 266
16092: PUSH
16093: LD_INT 0
16095: EQUAL
16096: OR
16097: PUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 266
16107: PUSH
16108: LD_INT 24
16110: EQUAL
16111: OR
16112: PUSH
16113: LD_VAR 0 1
16117: PPUSH
16118: CALL_OW 266
16122: PUSH
16123: LD_INT 17
16125: EQUAL
16126: OR
16127: PUSH
16128: LD_VAR 0 1
16132: PPUSH
16133: CALL_OW 266
16137: PUSH
16138: LD_INT 25
16140: EQUAL
16141: OR
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 266
16152: PUSH
16153: LD_INT 19
16155: EQUAL
16156: OR
16157: PUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 266
16167: PUSH
16168: LD_INT 20
16170: EQUAL
16171: OR
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 266
16182: PUSH
16183: LD_INT 18
16185: EQUAL
16186: OR
16187: PUSH
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL_OW 266
16197: PUSH
16198: LD_INT 21
16200: EQUAL
16201: OR
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 266
16212: PUSH
16213: LD_INT 23
16215: EQUAL
16216: OR
16217: PUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 266
16227: PUSH
16228: LD_INT 16
16230: EQUAL
16231: OR
16232: PUSH
16233: LD_VAR 0 1
16237: PPUSH
16238: CALL_OW 266
16242: PUSH
16243: LD_INT 6
16245: EQUAL
16246: OR
16247: PUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 266
16257: PUSH
16258: LD_INT 29
16260: EQUAL
16261: OR
16262: PUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 266
16272: PUSH
16273: LD_INT 26
16275: EQUAL
16276: OR
16277: PUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 266
16287: PUSH
16288: LD_INT 30
16290: EQUAL
16291: OR
16292: PUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL_OW 266
16302: PUSH
16303: LD_INT 28
16305: EQUAL
16306: OR
16307: PUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 266
16317: PUSH
16318: LD_INT 27
16320: EQUAL
16321: OR
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 266
16332: PUSH
16333: LD_INT 33
16335: EQUAL
16336: OR
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 266
16347: PUSH
16348: LD_INT 2
16350: EQUAL
16351: OR
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 266
16362: PUSH
16363: LD_INT 4
16365: EQUAL
16366: OR
16367: IFFALSE 16453
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16369: LD_ADDR_EXP 94
16373: PUSH
16374: LD_EXP 94
16378: PUSH
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 266
16388: ADD
16389: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16390: LD_ADDR_EXP 94
16394: PUSH
16395: LD_EXP 94
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 250
16409: ADD
16410: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16411: LD_ADDR_EXP 94
16415: PUSH
16416: LD_EXP 94
16420: PUSH
16421: LD_VAR 0 1
16425: PPUSH
16426: CALL_OW 251
16430: ADD
16431: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16432: LD_ADDR_EXP 94
16436: PUSH
16437: LD_EXP 94
16441: PUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 254
16451: ADD
16452: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 266
16462: PUSH
16463: LD_INT 1
16465: EQUAL
16466: IFFALSE 16545
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16468: LD_ADDR_EXP 94
16472: PUSH
16473: LD_EXP 94
16477: PUSH
16478: LD_INT 0
16480: ADD
16481: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16482: LD_ADDR_EXP 94
16486: PUSH
16487: LD_EXP 94
16491: PUSH
16492: LD_VAR 0 1
16496: PPUSH
16497: CALL_OW 250
16501: ADD
16502: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16503: LD_ADDR_EXP 94
16507: PUSH
16508: LD_EXP 94
16512: PUSH
16513: LD_VAR 0 1
16517: PPUSH
16518: CALL_OW 251
16522: ADD
16523: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16524: LD_ADDR_EXP 94
16528: PUSH
16529: LD_EXP 94
16533: PUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 254
16543: ADD
16544: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 266
16554: PUSH
16555: LD_INT 3
16557: EQUAL
16558: IFFALSE 16637
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16560: LD_ADDR_EXP 94
16564: PUSH
16565: LD_EXP 94
16569: PUSH
16570: LD_INT 2
16572: ADD
16573: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16574: LD_ADDR_EXP 94
16578: PUSH
16579: LD_EXP 94
16583: PUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 250
16593: ADD
16594: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16595: LD_ADDR_EXP 94
16599: PUSH
16600: LD_EXP 94
16604: PUSH
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 251
16614: ADD
16615: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16616: LD_ADDR_EXP 94
16620: PUSH
16621: LD_EXP 94
16625: PUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 254
16635: ADD
16636: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 266
16646: PUSH
16647: LD_INT 5
16649: EQUAL
16650: IFFALSE 16729
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
16652: LD_ADDR_EXP 94
16656: PUSH
16657: LD_EXP 94
16661: PUSH
16662: LD_INT 4
16664: ADD
16665: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16666: LD_ADDR_EXP 94
16670: PUSH
16671: LD_EXP 94
16675: PUSH
16676: LD_VAR 0 1
16680: PPUSH
16681: CALL_OW 250
16685: ADD
16686: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16687: LD_ADDR_EXP 94
16691: PUSH
16692: LD_EXP 94
16696: PUSH
16697: LD_VAR 0 1
16701: PPUSH
16702: CALL_OW 251
16706: ADD
16707: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16708: LD_ADDR_EXP 94
16712: PUSH
16713: LD_EXP 94
16717: PUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 254
16727: ADD
16728: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 255
16738: PUSH
16739: LD_INT 8
16741: EQUAL
16742: PUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 247
16752: PUSH
16753: LD_INT 3
16755: EQUAL
16756: AND
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 248
16767: PUSH
16768: LD_INT 2
16770: EQUAL
16771: AND
16772: IFFALSE 17464
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 266
16783: PUSH
16784: LD_INT 31
16786: EQUAL
16787: PUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 266
16797: PUSH
16798: LD_INT 32
16800: EQUAL
16801: OR
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 266
16812: PUSH
16813: LD_INT 36
16815: EQUAL
16816: OR
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 266
16827: PUSH
16828: LD_INT 0
16830: EQUAL
16831: OR
16832: PUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 266
16842: PUSH
16843: LD_INT 24
16845: EQUAL
16846: OR
16847: PUSH
16848: LD_VAR 0 1
16852: PPUSH
16853: CALL_OW 266
16857: PUSH
16858: LD_INT 17
16860: EQUAL
16861: OR
16862: PUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL_OW 266
16872: PUSH
16873: LD_INT 25
16875: EQUAL
16876: OR
16877: PUSH
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 266
16887: PUSH
16888: LD_INT 19
16890: EQUAL
16891: OR
16892: PUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 266
16902: PUSH
16903: LD_INT 20
16905: EQUAL
16906: OR
16907: PUSH
16908: LD_VAR 0 1
16912: PPUSH
16913: CALL_OW 266
16917: PUSH
16918: LD_INT 18
16920: EQUAL
16921: OR
16922: PUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 266
16932: PUSH
16933: LD_INT 21
16935: EQUAL
16936: OR
16937: PUSH
16938: LD_VAR 0 1
16942: PPUSH
16943: CALL_OW 266
16947: PUSH
16948: LD_INT 23
16950: EQUAL
16951: OR
16952: PUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 266
16962: PUSH
16963: LD_INT 16
16965: EQUAL
16966: OR
16967: PUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 266
16977: PUSH
16978: LD_INT 6
16980: EQUAL
16981: OR
16982: PUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 266
16992: PUSH
16993: LD_INT 29
16995: EQUAL
16996: OR
16997: PUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 266
17007: PUSH
17008: LD_INT 26
17010: EQUAL
17011: OR
17012: PUSH
17013: LD_VAR 0 1
17017: PPUSH
17018: CALL_OW 266
17022: PUSH
17023: LD_INT 30
17025: EQUAL
17026: OR
17027: PUSH
17028: LD_VAR 0 1
17032: PPUSH
17033: CALL_OW 266
17037: PUSH
17038: LD_INT 28
17040: EQUAL
17041: OR
17042: PUSH
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 266
17052: PUSH
17053: LD_INT 27
17055: EQUAL
17056: OR
17057: PUSH
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 266
17067: PUSH
17068: LD_INT 33
17070: EQUAL
17071: OR
17072: PUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 266
17082: PUSH
17083: LD_INT 2
17085: EQUAL
17086: OR
17087: PUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 266
17097: PUSH
17098: LD_INT 4
17100: EQUAL
17101: OR
17102: IFFALSE 17188
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17104: LD_ADDR_EXP 93
17108: PUSH
17109: LD_EXP 93
17113: PUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 266
17123: ADD
17124: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17125: LD_ADDR_EXP 93
17129: PUSH
17130: LD_EXP 93
17134: PUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: CALL_OW 250
17144: ADD
17145: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17146: LD_ADDR_EXP 93
17150: PUSH
17151: LD_EXP 93
17155: PUSH
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL_OW 251
17165: ADD
17166: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17167: LD_ADDR_EXP 93
17171: PUSH
17172: LD_EXP 93
17176: PUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 254
17186: ADD
17187: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 266
17197: PUSH
17198: LD_INT 1
17200: EQUAL
17201: IFFALSE 17280
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17203: LD_ADDR_EXP 93
17207: PUSH
17208: LD_EXP 93
17212: PUSH
17213: LD_INT 0
17215: ADD
17216: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17217: LD_ADDR_EXP 93
17221: PUSH
17222: LD_EXP 93
17226: PUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 250
17236: ADD
17237: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17238: LD_ADDR_EXP 93
17242: PUSH
17243: LD_EXP 93
17247: PUSH
17248: LD_VAR 0 1
17252: PPUSH
17253: CALL_OW 251
17257: ADD
17258: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17259: LD_ADDR_EXP 93
17263: PUSH
17264: LD_EXP 93
17268: PUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 254
17278: ADD
17279: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 266
17289: PUSH
17290: LD_INT 3
17292: EQUAL
17293: IFFALSE 17372
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17295: LD_ADDR_EXP 93
17299: PUSH
17300: LD_EXP 93
17304: PUSH
17305: LD_INT 2
17307: ADD
17308: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17309: LD_ADDR_EXP 93
17313: PUSH
17314: LD_EXP 93
17318: PUSH
17319: LD_VAR 0 1
17323: PPUSH
17324: CALL_OW 250
17328: ADD
17329: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17330: LD_ADDR_EXP 93
17334: PUSH
17335: LD_EXP 93
17339: PUSH
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 251
17349: ADD
17350: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17351: LD_ADDR_EXP 93
17355: PUSH
17356: LD_EXP 93
17360: PUSH
17361: LD_VAR 0 1
17365: PPUSH
17366: CALL_OW 254
17370: ADD
17371: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17372: LD_VAR 0 1
17376: PPUSH
17377: CALL_OW 266
17381: PUSH
17382: LD_INT 5
17384: EQUAL
17385: IFFALSE 17464
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17387: LD_ADDR_EXP 93
17391: PUSH
17392: LD_EXP 93
17396: PUSH
17397: LD_INT 4
17399: ADD
17400: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17401: LD_ADDR_EXP 93
17405: PUSH
17406: LD_EXP 93
17410: PUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 250
17420: ADD
17421: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17422: LD_ADDR_EXP 93
17426: PUSH
17427: LD_EXP 93
17431: PUSH
17432: LD_VAR 0 1
17436: PPUSH
17437: CALL_OW 251
17441: ADD
17442: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17443: LD_ADDR_EXP 93
17447: PUSH
17448: LD_EXP 93
17452: PUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 254
17462: ADD
17463: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 255
17473: PUSH
17474: LD_INT 7
17476: EQUAL
17477: PUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 247
17487: PUSH
17488: LD_INT 3
17490: EQUAL
17491: AND
17492: IFFALSE 18184
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 266
17503: PUSH
17504: LD_INT 31
17506: EQUAL
17507: PUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 266
17517: PUSH
17518: LD_INT 32
17520: EQUAL
17521: OR
17522: PUSH
17523: LD_VAR 0 1
17527: PPUSH
17528: CALL_OW 266
17532: PUSH
17533: LD_INT 36
17535: EQUAL
17536: OR
17537: PUSH
17538: LD_VAR 0 1
17542: PPUSH
17543: CALL_OW 266
17547: PUSH
17548: LD_INT 0
17550: EQUAL
17551: OR
17552: PUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 266
17562: PUSH
17563: LD_INT 24
17565: EQUAL
17566: OR
17567: PUSH
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 266
17577: PUSH
17578: LD_INT 17
17580: EQUAL
17581: OR
17582: PUSH
17583: LD_VAR 0 1
17587: PPUSH
17588: CALL_OW 266
17592: PUSH
17593: LD_INT 25
17595: EQUAL
17596: OR
17597: PUSH
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 266
17607: PUSH
17608: LD_INT 19
17610: EQUAL
17611: OR
17612: PUSH
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 266
17622: PUSH
17623: LD_INT 20
17625: EQUAL
17626: OR
17627: PUSH
17628: LD_VAR 0 1
17632: PPUSH
17633: CALL_OW 266
17637: PUSH
17638: LD_INT 18
17640: EQUAL
17641: OR
17642: PUSH
17643: LD_VAR 0 1
17647: PPUSH
17648: CALL_OW 266
17652: PUSH
17653: LD_INT 21
17655: EQUAL
17656: OR
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 266
17667: PUSH
17668: LD_INT 23
17670: EQUAL
17671: OR
17672: PUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 266
17682: PUSH
17683: LD_INT 16
17685: EQUAL
17686: OR
17687: PUSH
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 266
17697: PUSH
17698: LD_INT 6
17700: EQUAL
17701: OR
17702: PUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 266
17712: PUSH
17713: LD_INT 29
17715: EQUAL
17716: OR
17717: PUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: CALL_OW 266
17727: PUSH
17728: LD_INT 26
17730: EQUAL
17731: OR
17732: PUSH
17733: LD_VAR 0 1
17737: PPUSH
17738: CALL_OW 266
17742: PUSH
17743: LD_INT 30
17745: EQUAL
17746: OR
17747: PUSH
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 266
17757: PUSH
17758: LD_INT 28
17760: EQUAL
17761: OR
17762: PUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 266
17772: PUSH
17773: LD_INT 27
17775: EQUAL
17776: OR
17777: PUSH
17778: LD_VAR 0 1
17782: PPUSH
17783: CALL_OW 266
17787: PUSH
17788: LD_INT 33
17790: EQUAL
17791: OR
17792: PUSH
17793: LD_VAR 0 1
17797: PPUSH
17798: CALL_OW 266
17802: PUSH
17803: LD_INT 2
17805: EQUAL
17806: OR
17807: PUSH
17808: LD_VAR 0 1
17812: PPUSH
17813: CALL_OW 266
17817: PUSH
17818: LD_INT 4
17820: EQUAL
17821: OR
17822: IFFALSE 17908
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
17824: LD_ADDR_EXP 95
17828: PUSH
17829: LD_EXP 95
17833: PUSH
17834: LD_VAR 0 1
17838: PPUSH
17839: CALL_OW 266
17843: ADD
17844: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17845: LD_ADDR_EXP 95
17849: PUSH
17850: LD_EXP 95
17854: PUSH
17855: LD_VAR 0 1
17859: PPUSH
17860: CALL_OW 250
17864: ADD
17865: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17866: LD_ADDR_EXP 95
17870: PUSH
17871: LD_EXP 95
17875: PUSH
17876: LD_VAR 0 1
17880: PPUSH
17881: CALL_OW 251
17885: ADD
17886: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17887: LD_ADDR_EXP 95
17891: PUSH
17892: LD_EXP 95
17896: PUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 254
17906: ADD
17907: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 266
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: IFFALSE 18000
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
17923: LD_ADDR_EXP 95
17927: PUSH
17928: LD_EXP 95
17932: PUSH
17933: LD_INT 0
17935: ADD
17936: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17937: LD_ADDR_EXP 95
17941: PUSH
17942: LD_EXP 95
17946: PUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 250
17956: ADD
17957: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17958: LD_ADDR_EXP 95
17962: PUSH
17963: LD_EXP 95
17967: PUSH
17968: LD_VAR 0 1
17972: PPUSH
17973: CALL_OW 251
17977: ADD
17978: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17979: LD_ADDR_EXP 95
17983: PUSH
17984: LD_EXP 95
17988: PUSH
17989: LD_VAR 0 1
17993: PPUSH
17994: CALL_OW 254
17998: ADD
17999: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18000: LD_VAR 0 1
18004: PPUSH
18005: CALL_OW 266
18009: PUSH
18010: LD_INT 3
18012: EQUAL
18013: IFFALSE 18092
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18015: LD_ADDR_EXP 95
18019: PUSH
18020: LD_EXP 95
18024: PUSH
18025: LD_INT 2
18027: ADD
18028: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18029: LD_ADDR_EXP 95
18033: PUSH
18034: LD_EXP 95
18038: PUSH
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 250
18048: ADD
18049: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18050: LD_ADDR_EXP 95
18054: PUSH
18055: LD_EXP 95
18059: PUSH
18060: LD_VAR 0 1
18064: PPUSH
18065: CALL_OW 251
18069: ADD
18070: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18071: LD_ADDR_EXP 95
18075: PUSH
18076: LD_EXP 95
18080: PUSH
18081: LD_VAR 0 1
18085: PPUSH
18086: CALL_OW 254
18090: ADD
18091: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 266
18101: PUSH
18102: LD_INT 5
18104: EQUAL
18105: IFFALSE 18184
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18107: LD_ADDR_EXP 95
18111: PUSH
18112: LD_EXP 95
18116: PUSH
18117: LD_INT 4
18119: ADD
18120: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18121: LD_ADDR_EXP 95
18125: PUSH
18126: LD_EXP 95
18130: PUSH
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 250
18140: ADD
18141: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18142: LD_ADDR_EXP 95
18146: PUSH
18147: LD_EXP 95
18151: PUSH
18152: LD_VAR 0 1
18156: PPUSH
18157: CALL_OW 251
18161: ADD
18162: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18163: LD_ADDR_EXP 95
18167: PUSH
18168: LD_EXP 95
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 254
18182: ADD
18183: ST_TO_ADDR
// end ; end ; end ;
18184: PPOPN 2
18186: END
// on UnitKamikazed ( unit ) do var i ;
18187: LD_INT 0
18189: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 255
18199: PUSH
18200: LD_INT 8
18202: EQUAL
18203: PUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 247
18213: PUSH
18214: LD_INT 2
18216: EQUAL
18217: AND
18218: PUSH
18219: LD_VAR 0 1
18223: PPUSH
18224: CALL_OW 248
18228: PUSH
18229: LD_INT 2
18231: EQUAL
18232: AND
18233: IFFALSE 18283
// begin for i in legionVehicles do
18235: LD_ADDR_VAR 0 2
18239: PUSH
18240: LD_EXP 55
18244: PUSH
18245: FOR_IN
18246: IFFALSE 18281
// if i = unit then
18248: LD_VAR 0 2
18252: PUSH
18253: LD_VAR 0 1
18257: EQUAL
18258: IFFALSE 18279
// legionVehicles = legionVehicles diff [ unit ] ;
18260: LD_ADDR_EXP 55
18264: PUSH
18265: LD_EXP 55
18269: PUSH
18270: LD_VAR 0 1
18274: PUSH
18275: EMPTY
18276: LIST
18277: DIFF
18278: ST_TO_ADDR
18279: GO 18245
18281: POP
18282: POP
// end ; end ;
18283: PPOPN 2
18285: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18286: LD_VAR 0 2
18290: PPUSH
18291: LD_VAR 0 3
18295: PPUSH
18296: LD_INT 29
18298: PPUSH
18299: CALL_OW 309
18303: IFFALSE 18363
// begin if GetSide ( unit ) = 1 then
18305: LD_VAR 0 1
18309: PPUSH
18310: CALL_OW 255
18314: PUSH
18315: LD_INT 1
18317: EQUAL
18318: IFFALSE 18334
// begin wait ( 0 0$6 ) ;
18320: LD_INT 210
18322: PPUSH
18323: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18327: LD_STRING Motherlode2
18329: PPUSH
18330: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18334: LD_VAR 0 1
18338: PPUSH
18339: CALL_OW 255
18343: PUSH
18344: LD_INT 8
18346: EQUAL
18347: IFFALSE 18363
// begin wait ( 0 0$6 ) ;
18349: LD_INT 210
18351: PPUSH
18352: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18356: LD_STRING Motherlode1
18358: PPUSH
18359: CALL_OW 104
// end ; end ; end ;
18363: PPOPN 3
18365: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 255
18375: PUSH
18376: LD_INT 2
18378: EQUAL
18379: IFFALSE 18388
// YouLost ( Motherlode3 ) ;
18381: LD_STRING Motherlode3
18383: PPUSH
18384: CALL_OW 104
// end ; end_of_file
18388: PPOPN 3
18390: END
// every 3 3$0 do
18391: GO 18393
18393: DISABLE
// begin enable ;
18394: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18395: LD_ADDR_EXP 87
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: LD_INT 3
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PPUSH
18413: LD_INT 2
18415: PPUSH
18416: CALL_OW 12
18420: ARRAY
18421: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18422: LD_INT 22
18424: PUSH
18425: LD_INT 8
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 21
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PPUSH
18446: CALL_OW 69
18450: PUSH
18451: LD_INT 1
18453: GREATER
18454: IFFALSE 18485
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
18456: LD_ADDR_EXP 89
18460: PUSH
18461: LD_INT 1
18463: PUSH
18464: LD_INT 8
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: PPUSH
18474: LD_INT 2
18476: PPUSH
18477: CALL_OW 12
18481: ARRAY
18482: ST_TO_ADDR
18483: GO 18493
// RussianTarget = 1 ;
18485: LD_ADDR_EXP 89
18489: PUSH
18490: LD_INT 1
18492: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18493: LD_INT 22
18495: PUSH
18496: LD_INT 8
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 21
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 69
18521: PUSH
18522: LD_INT 1
18524: GREATER
18525: IFFALSE 18560
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
18527: LD_ADDR_EXP 88
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: LD_INT 3
18537: PUSH
18538: LD_INT 8
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: PPUSH
18549: LD_INT 3
18551: PPUSH
18552: CALL_OW 12
18556: ARRAY
18557: ST_TO_ADDR
18558: GO 18587
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18560: LD_ADDR_EXP 88
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: LD_INT 3
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: PPUSH
18578: LD_INT 2
18580: PPUSH
18581: CALL_OW 12
18585: ARRAY
18586: ST_TO_ADDR
// end ;
18587: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
18588: LD_EXP 68
18592: PUSH
18593: LD_INT 1
18595: EQUAL
18596: IFFALSE 19173
18598: GO 18600
18600: DISABLE
18601: LD_INT 0
18603: PPUSH
18604: PPUSH
// begin for i = 1 to 4 do
18605: LD_ADDR_VAR 0 1
18609: PUSH
18610: DOUBLE
18611: LD_INT 1
18613: DEC
18614: ST_TO_ADDR
18615: LD_INT 4
18617: PUSH
18618: FOR_TO
18619: IFFALSE 18659
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
18621: LD_EXP 66
18625: PUSH
18626: LD_VAR 0 1
18630: ARRAY
18631: PPUSH
18632: LD_INT 85
18634: PPUSH
18635: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
18639: LD_EXP 66
18643: PUSH
18644: LD_VAR 0 1
18648: ARRAY
18649: PPUSH
18650: LD_INT 3
18652: PPUSH
18653: CALL_OW 183
// end ;
18657: GO 18618
18659: POP
18660: POP
// wait ( 0 0$1 ) ;
18661: LD_INT 35
18663: PPUSH
18664: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18668: LD_ADDR_VAR 0 2
18672: PUSH
18673: LD_INT 22
18675: PUSH
18676: LD_INT 4
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 21
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 56
18695: PUSH
18696: EMPTY
18697: LIST
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: LD_INT 60
18704: PUSH
18705: EMPTY
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: PPUSH
18718: CALL_OW 69
18722: PUSH
18723: LD_EXP 17
18727: PUSH
18728: EMPTY
18729: LIST
18730: DIFF
18731: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
18732: LD_VAR 0 2
18736: PUSH
18737: LD_INT 1
18739: ARRAY
18740: PPUSH
18741: LD_INT 235
18743: PPUSH
18744: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
18748: LD_VAR 0 2
18752: PUSH
18753: LD_INT 2
18755: ARRAY
18756: PPUSH
18757: LD_INT 2
18759: PPUSH
18760: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
18764: LD_VAR 0 2
18768: PUSH
18769: LD_INT 3
18771: ARRAY
18772: PPUSH
18773: LD_INT 2
18775: PPUSH
18776: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
18780: LD_INT 30
18782: PPUSH
18783: LD_INT 49
18785: PPUSH
18786: LD_INT 4
18788: PPUSH
18789: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
18793: LD_INT 91
18795: PPUSH
18796: LD_INT 10
18798: PPUSH
18799: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
18803: LD_INT 91
18805: PPUSH
18806: LD_INT 11
18808: PPUSH
18809: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
18813: LD_INT 22
18815: PUSH
18816: LD_INT 4
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 25
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PPUSH
18837: CALL_OW 69
18841: PPUSH
18842: LD_INT 30
18844: PPUSH
18845: LD_INT 30
18847: PPUSH
18848: LD_INT 49
18850: PPUSH
18851: LD_INT 1
18853: PPUSH
18854: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
18858: LD_INT 22
18860: PUSH
18861: LD_INT 4
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 25
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: PPUSH
18887: LD_INT 32
18889: PPUSH
18890: LD_INT 55
18892: PPUSH
18893: LD_INT 56
18895: PPUSH
18896: LD_INT 4
18898: PPUSH
18899: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
18903: LD_INT 22
18905: PUSH
18906: LD_INT 4
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 25
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: PPUSH
18932: LD_INT 32
18934: PPUSH
18935: LD_INT 63
18937: PPUSH
18938: LD_INT 71
18940: PPUSH
18941: LD_INT 4
18943: PPUSH
18944: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
18948: LD_INT 22
18950: PUSH
18951: LD_INT 4
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PPUSH
18972: CALL_OW 69
18976: PPUSH
18977: LD_INT 28
18979: PPUSH
18980: LD_INT 40
18982: PPUSH
18983: LD_INT 72
18985: PPUSH
18986: LD_INT 4
18988: PPUSH
18989: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
18993: LD_INT 22
18995: PUSH
18996: LD_INT 4
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 25
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PPUSH
19017: CALL_OW 69
19021: PPUSH
19022: LD_INT 27
19024: PPUSH
19025: LD_INT 45
19027: PPUSH
19028: LD_INT 73
19030: PPUSH
19031: LD_INT 4
19033: PPUSH
19034: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
19038: LD_INT 22
19040: PUSH
19041: LD_INT 4
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 25
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 69
19066: PPUSH
19067: LD_INT 18
19069: PPUSH
19070: LD_INT 37
19072: PPUSH
19073: LD_INT 50
19075: PPUSH
19076: LD_INT 2
19078: PPUSH
19079: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
19083: LD_INT 22
19085: PUSH
19086: LD_INT 4
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 25
19095: PUSH
19096: LD_INT 2
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PPUSH
19112: LD_INT 17
19114: PPUSH
19115: LD_INT 41
19117: PPUSH
19118: LD_INT 51
19120: PPUSH
19121: LD_INT 3
19123: PPUSH
19124: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
19128: LD_INT 22
19130: PUSH
19131: LD_INT 4
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 25
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PPUSH
19152: CALL_OW 69
19156: PPUSH
19157: LD_INT 21
19159: PPUSH
19160: LD_INT 38
19162: PPUSH
19163: LD_INT 54
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 205
// end ;
19173: PPOPN 2
19175: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19176: LD_INT 235
19178: PPUSH
19179: LD_INT 10
19181: PPUSH
19182: CALL_OW 308
19186: PUSH
19187: LD_EXP 70
19191: PUSH
19192: LD_INT 1
19194: EQUAL
19195: AND
19196: IFFALSE 19220
19198: GO 19200
19200: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19201: LD_INT 235
19203: PPUSH
19204: CALL_OW 313
19208: PPUSH
19209: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19213: LD_INT 84
19215: PPUSH
19216: CALL_OW 146
// end ;
19220: END
// every 0 0$1 trigger legionAI = 1 do
19221: LD_EXP 84
19225: PUSH
19226: LD_INT 1
19228: EQUAL
19229: IFFALSE 19292
19231: GO 19233
19233: DISABLE
// begin enable ;
19234: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19235: LD_INT 8
19237: PPUSH
19238: LD_INT 99
19240: PPUSH
19241: LD_INT 11
19243: PPUSH
19244: LD_EXP 93
19248: PPUSH
19249: CALL 9606 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19253: LD_INT 8
19255: PPUSH
19256: LD_INT 20
19258: PPUSH
19259: LD_INT 11
19261: PPUSH
19262: LD_INT 252
19264: PUSH
19265: EMPTY
19266: LIST
19267: PPUSH
19268: CALL 10015 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19272: LD_INT 8
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL 11424 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19282: LD_INT 8
19284: PPUSH
19285: LD_INT 11
19287: PPUSH
19288: CALL 10996 0 2
// end ;
19292: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19293: LD_EXP 84
19297: PUSH
19298: LD_INT 1
19300: EQUAL
19301: PUSH
19302: LD_EXP 101
19306: PUSH
19307: LD_INT 1
19309: GREATEREQUAL
19310: AND
19311: PUSH
19312: LD_EXP 55
19316: PUSH
19317: EMPTY
19318: EQUAL
19319: AND
19320: PUSH
19321: LD_INT 117
19323: PPUSH
19324: CALL_OW 302
19328: AND
19329: PUSH
19330: LD_INT 117
19332: PPUSH
19333: CALL_OW 255
19337: PUSH
19338: LD_INT 8
19340: EQUAL
19341: AND
19342: IFFALSE 19405
19344: GO 19346
19346: DISABLE
// begin enable ;
19347: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19348: LD_INT 8
19350: PPUSH
19351: LD_INT 117
19353: PPUSH
19354: LD_INT 5
19356: PUSH
19357: LD_INT 6
19359: PUSH
19360: LD_INT 7
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: PUSH
19368: LD_OWVAR 67
19372: ARRAY
19373: PPUSH
19374: LD_INT 27
19376: PUSH
19377: LD_INT 28
19379: PUSH
19380: LD_INT 25
19382: PUSH
19383: LD_INT 29
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: PPUSH
19392: LD_INT 3
19394: PPUSH
19395: LD_INT 2
19397: PPUSH
19398: LD_INT 14
19400: PPUSH
19401: CALL 11654 0 7
// end ;
19405: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19406: LD_EXP 84
19410: PUSH
19411: LD_INT 1
19413: EQUAL
19414: PUSH
19415: LD_EXP 101
19419: PUSH
19420: LD_INT 1
19422: GREATEREQUAL
19423: AND
19424: PUSH
19425: LD_EXP 55
19429: PUSH
19430: LD_INT 5
19432: PUSH
19433: LD_INT 6
19435: PUSH
19436: LD_INT 7
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: LD_OWVAR 67
19448: ARRAY
19449: EQUAL
19450: AND
19451: IFFALSE 19469
19453: GO 19455
19455: DISABLE
// begin enable ;
19456: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
19457: LD_EXP 87
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: CALL 11728 0 2
// end ;
19469: END
// every 0 0$1 do
19470: GO 19472
19472: DISABLE
// begin enable ;
19473: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19474: LD_INT 6
19476: PPUSH
19477: LD_INT 1
19479: PPUSH
19480: CALL 12663 0 2
// end ;
19484: END
// every 0 0$1 trigger RussianAI = 1 do
19485: LD_EXP 86
19489: PUSH
19490: LD_INT 1
19492: EQUAL
19493: IFFALSE 19587
19495: GO 19497
19497: DISABLE
// begin enable ;
19498: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19499: LD_INT 3
19501: PPUSH
19502: LD_INT 26
19504: PPUSH
19505: LD_INT 21
19507: PPUSH
19508: LD_EXP 94
19512: PPUSH
19513: CALL 9606 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19517: LD_INT 3
19519: PPUSH
19520: LD_INT 22
19522: PPUSH
19523: LD_INT 21
19525: PPUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL 10015 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19540: LD_INT 3
19542: PPUSH
19543: LD_INT 1
19545: PPUSH
19546: CALL 11424 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19550: LD_INT 3
19552: PPUSH
19553: LD_EXP 89
19557: PPUSH
19558: CALL 12663 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19562: LD_INT 3
19564: PPUSH
19565: LD_INT 21
19567: PPUSH
19568: CALL 10996 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
19572: LD_INT 3
19574: PPUSH
19575: LD_INT 21
19577: PPUSH
19578: LD_EXP 94
19582: PPUSH
19583: CALL 10741 0 3
// end ;
19587: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19588: LD_EXP 86
19592: PUSH
19593: LD_INT 1
19595: EQUAL
19596: PUSH
19597: LD_EXP 101
19601: PUSH
19602: LD_INT 3
19604: GREATEREQUAL
19605: AND
19606: PUSH
19607: LD_EXP 61
19611: PUSH
19612: EMPTY
19613: EQUAL
19614: AND
19615: PUSH
19616: LD_INT 10
19618: PPUSH
19619: CALL_OW 302
19623: AND
19624: PUSH
19625: LD_INT 10
19627: PPUSH
19628: CALL_OW 255
19632: PUSH
19633: LD_INT 3
19635: EQUAL
19636: AND
19637: PUSH
19638: LD_INT 4
19640: PPUSH
19641: CALL_OW 302
19645: AND
19646: PUSH
19647: LD_INT 4
19649: PPUSH
19650: CALL_OW 255
19654: PUSH
19655: LD_INT 3
19657: EQUAL
19658: AND
19659: IFFALSE 19779
19661: GO 19663
19663: DISABLE
// begin enable ;
19664: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19665: LD_INT 3
19667: PPUSH
19668: LD_INT 4
19670: PPUSH
19671: LD_INT 4
19673: PUSH
19674: LD_INT 5
19676: PUSH
19677: LD_INT 6
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: PUSH
19685: LD_OWVAR 67
19689: ARRAY
19690: PPUSH
19691: LD_INT 45
19693: PUSH
19694: LD_INT 46
19696: PUSH
19697: LD_INT 47
19699: PUSH
19700: LD_INT 49
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: PPUSH
19709: LD_INT 3
19711: PPUSH
19712: LD_INT 3
19714: PPUSH
19715: LD_INT 24
19717: PPUSH
19718: CALL 11654 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19722: LD_INT 3
19724: PPUSH
19725: LD_INT 10
19727: PPUSH
19728: LD_INT 4
19730: PUSH
19731: LD_INT 5
19733: PUSH
19734: LD_INT 6
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: PUSH
19742: LD_OWVAR 67
19746: ARRAY
19747: PPUSH
19748: LD_INT 45
19750: PUSH
19751: LD_INT 46
19753: PUSH
19754: LD_INT 47
19756: PUSH
19757: LD_INT 49
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: PPUSH
19766: LD_INT 3
19768: PPUSH
19769: LD_INT 3
19771: PPUSH
19772: LD_INT 24
19774: PPUSH
19775: CALL 11654 0 7
// end ;
19779: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19780: LD_EXP 86
19784: PUSH
19785: LD_INT 1
19787: EQUAL
19788: PUSH
19789: LD_EXP 101
19793: PUSH
19794: LD_INT 3
19796: GREATEREQUAL
19797: AND
19798: PUSH
19799: LD_EXP 61
19803: PUSH
19804: LD_INT 8
19806: PUSH
19807: LD_INT 10
19809: PUSH
19810: LD_INT 12
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: LD_OWVAR 67
19822: ARRAY
19823: EQUAL
19824: AND
19825: IFFALSE 19937
19827: GO 19829
19829: DISABLE
// begin enable ;
19830: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19831: LD_INT 22
19833: PUSH
19834: LD_INT 3
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 21
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 3
19853: PUSH
19854: LD_INT 34
19856: PUSH
19857: LD_INT 48
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 3
19870: PUSH
19871: LD_INT 60
19873: PUSH
19874: EMPTY
19875: LIST
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 69
19891: PPUSH
19892: LD_INT 24
19894: PUSH
19895: LD_INT 25
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: PPUSH
19905: LD_INT 2
19907: PPUSH
19908: CALL_OW 12
19912: ARRAY
19913: PPUSH
19914: CALL_OW 120
// wait ( 0 0$20 ) ;
19918: LD_INT 700
19920: PPUSH
19921: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19925: LD_EXP 89
19929: PPUSH
19930: LD_INT 2
19932: PPUSH
19933: CALL 11728 0 2
// end ;
19937: END
// every 0 0$1 trigger AllianceAI = 1 do
19938: LD_EXP 85
19942: PUSH
19943: LD_INT 1
19945: EQUAL
19946: IFFALSE 20029
19948: GO 19950
19950: DISABLE
// begin enable ;
19951: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19952: LD_INT 7
19954: PPUSH
19955: LD_INT 45
19957: PPUSH
19958: LD_INT 23
19960: PPUSH
19961: LD_EXP 95
19965: PPUSH
19966: CALL 9606 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
19970: LD_INT 7
19972: PPUSH
19973: LD_INT 24
19975: PPUSH
19976: LD_INT 23
19978: PPUSH
19979: LD_INT 46
19981: PUSH
19982: LD_INT 39
19984: PUSH
19985: LD_INT 133
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL 10015 0 4
// AttackNearBuildings ( 7 , 1 ) ;
19997: LD_INT 7
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL 11424 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20007: LD_INT 7
20009: PPUSH
20010: LD_EXP 88
20014: PPUSH
20015: CALL 12663 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20019: LD_INT 7
20021: PPUSH
20022: LD_INT 23
20024: PPUSH
20025: CALL 10996 0 2
// end ;
20029: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20030: LD_EXP 85
20034: PUSH
20035: LD_INT 1
20037: EQUAL
20038: PUSH
20039: LD_EXP 101
20043: PUSH
20044: LD_INT 4
20046: GREATEREQUAL
20047: AND
20048: PUSH
20049: LD_EXP 62
20053: PUSH
20054: EMPTY
20055: EQUAL
20056: AND
20057: PUSH
20058: LD_INT 156
20060: PPUSH
20061: CALL_OW 302
20065: AND
20066: PUSH
20067: LD_INT 156
20069: PPUSH
20070: CALL_OW 255
20074: PUSH
20075: LD_INT 7
20077: EQUAL
20078: AND
20079: PUSH
20080: LD_INT 162
20082: PPUSH
20083: CALL_OW 302
20087: AND
20088: PUSH
20089: LD_INT 162
20091: PPUSH
20092: CALL_OW 255
20096: PUSH
20097: LD_INT 7
20099: EQUAL
20100: AND
20101: IFFALSE 20217
20103: GO 20105
20105: DISABLE
// begin enable ;
20106: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20107: LD_INT 3
20109: PPUSH
20110: LD_INT 156
20112: PPUSH
20113: LD_INT 3
20115: PUSH
20116: LD_INT 3
20118: PUSH
20119: LD_INT 4
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: PUSH
20127: LD_OWVAR 67
20131: ARRAY
20132: PPUSH
20133: LD_INT 9
20135: PUSH
20136: LD_INT 10
20138: PUSH
20139: LD_INT 7
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: PPUSH
20147: LD_INT 3
20149: PPUSH
20150: LD_INT 2
20152: PPUSH
20153: LD_INT 5
20155: PPUSH
20156: CALL 11654 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20160: LD_INT 3
20162: PPUSH
20163: LD_INT 162
20165: PPUSH
20166: LD_INT 2
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 3
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: LD_OWVAR 67
20184: ARRAY
20185: PPUSH
20186: LD_INT 45
20188: PUSH
20189: LD_INT 46
20191: PUSH
20192: LD_INT 47
20194: PUSH
20195: LD_INT 49
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: PPUSH
20204: LD_INT 3
20206: PPUSH
20207: LD_INT 3
20209: PPUSH
20210: LD_INT 24
20212: PPUSH
20213: CALL 11654 0 7
// end ;
20217: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20218: LD_EXP 85
20222: PUSH
20223: LD_INT 1
20225: EQUAL
20226: PUSH
20227: LD_EXP 101
20231: PUSH
20232: LD_INT 4
20234: GREATEREQUAL
20235: AND
20236: PUSH
20237: LD_EXP 62
20241: PUSH
20242: LD_INT 5
20244: PUSH
20245: LD_INT 5
20247: PUSH
20248: LD_INT 7
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: LD_OWVAR 67
20260: ARRAY
20261: EQUAL
20262: AND
20263: IFFALSE 20322
20265: GO 20267
20267: DISABLE
20268: LD_INT 0
20270: PPUSH
// begin for i in AllianceVehicles do
20271: LD_ADDR_VAR 0 1
20275: PUSH
20276: LD_EXP 62
20280: PUSH
20281: FOR_IN
20282: IFFALSE 20307
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20284: LD_VAR 0 1
20288: PPUSH
20289: LD_INT 117
20291: PPUSH
20292: LD_INT 112
20294: PPUSH
20295: LD_INT 10
20297: PPUSH
20298: LD_INT 1
20300: PPUSH
20301: CALL_OW 483
20305: GO 20281
20307: POP
20308: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20309: LD_EXP 88
20313: PPUSH
20314: LD_INT 3
20316: PPUSH
20317: CALL 11728 0 2
// enable ;
20321: ENABLE
// end ;
20322: PPOPN 1
20324: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20325: LD_EXP 85
20329: PUSH
20330: LD_INT 1
20332: EQUAL
20333: PUSH
20334: LD_EXP 101
20338: PUSH
20339: LD_INT 4
20341: GREATEREQUAL
20342: AND
20343: IFFALSE 20524
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
// begin enable ;
20351: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20352: LD_ADDR_VAR 0 1
20356: PUSH
20357: LD_INT 22
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 21
20369: PUSH
20370: LD_INT 3
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: LD_INT 30
20382: PUSH
20383: LD_INT 30
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 30
20392: PUSH
20393: LD_INT 28
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 30
20402: PUSH
20403: LD_INT 21
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: PPUSH
20421: CALL_OW 69
20425: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
20426: LD_ADDR_VAR 0 1
20430: PUSH
20431: LD_VAR 0 1
20435: PUSH
20436: LD_INT 22
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 21
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 32
20458: PUSH
20459: LD_INT 3
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: ADD
20476: ST_TO_ADDR
// if tmp = [ ] then
20477: LD_VAR 0 1
20481: PUSH
20482: EMPTY
20483: EQUAL
20484: IFFALSE 20488
// exit ;
20486: GO 20524
// if tmp > 0 then
20488: LD_VAR 0 1
20492: PUSH
20493: LD_INT 0
20495: GREATER
20496: IFFALSE 20524
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20498: LD_VAR 0 1
20502: PUSH
20503: LD_INT 1
20505: PPUSH
20506: LD_VAR 0 1
20510: PPUSH
20511: CALL_OW 12
20515: ARRAY
20516: PPUSH
20517: LD_INT 0
20519: PPUSH
20520: CALL_OW 234
// end ;
20524: PPOPN 1
20526: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20527: LD_EXP 84
20531: PUSH
20532: LD_INT 1
20534: EQUAL
20535: PUSH
20536: LD_INT 22
20538: PUSH
20539: LD_INT 8
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 3
20558: PUSH
20559: LD_INT 61
20561: PUSH
20562: EMPTY
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: PPUSH
20574: CALL_OW 69
20578: PUSH
20579: LD_INT 0
20581: GREATER
20582: AND
20583: IFFALSE 20665
20585: GO 20587
20587: DISABLE
20588: LD_INT 0
20590: PPUSH
// begin enable ;
20591: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20592: LD_ADDR_VAR 0 1
20596: PUSH
20597: LD_INT 22
20599: PUSH
20600: LD_INT 8
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 21
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 3
20619: PUSH
20620: LD_INT 61
20622: PUSH
20623: EMPTY
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: PPUSH
20635: CALL_OW 69
20639: PUSH
20640: FOR_IN
20641: IFFALSE 20663
// ComLinkTo ( i , arControler [ 1 ] ) ;
20643: LD_VAR 0 1
20647: PPUSH
20648: LD_EXP 56
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: PPUSH
20657: CALL_OW 135
20661: GO 20640
20663: POP
20664: POP
// end ;
20665: PPOPN 1
20667: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20668: LD_EXP 85
20672: PUSH
20673: LD_INT 1
20675: EQUAL
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 7
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 21
20689: PUSH
20690: LD_INT 2
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 3
20699: PUSH
20700: LD_INT 61
20702: PUSH
20703: EMPTY
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: PPUSH
20715: CALL_OW 69
20719: PUSH
20720: LD_INT 0
20722: GREATER
20723: AND
20724: IFFALSE 20814
20726: GO 20728
20728: DISABLE
20729: LD_INT 0
20731: PPUSH
// begin enable ;
20732: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20733: LD_ADDR_VAR 0 1
20737: PUSH
20738: LD_INT 22
20740: PUSH
20741: LD_INT 7
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 21
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 3
20760: PUSH
20761: LD_INT 61
20763: PUSH
20764: EMPTY
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: PPUSH
20776: CALL_OW 69
20780: PUSH
20781: FOR_IN
20782: IFFALSE 20812
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20784: LD_VAR 0 1
20788: PPUSH
20789: LD_EXP 63
20793: PUSH
20794: LD_INT 1
20796: PPUSH
20797: LD_INT 3
20799: PPUSH
20800: CALL_OW 12
20804: ARRAY
20805: PPUSH
20806: CALL_OW 135
20810: GO 20781
20812: POP
20813: POP
// end ; end_of_file
20814: PPOPN 1
20816: END
// every 0 0$1 trigger timerStatus = 1 do
20817: LD_EXP 96
20821: PUSH
20822: LD_INT 1
20824: EQUAL
20825: IFFALSE 20862
20827: GO 20829
20829: DISABLE
// begin enable ;
20830: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20831: LD_ADDR_OWVAR 47
20835: PUSH
20836: LD_STRING #Am15-1
20838: PUSH
20839: LD_EXP 97
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20848: LD_ADDR_EXP 97
20852: PUSH
20853: LD_EXP 97
20857: PUSH
20858: LD_INT 35
20860: PLUS
20861: ST_TO_ADDR
// end ; end_of_file
20862: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20863: LD_EXP 72
20867: PUSH
20868: LD_INT 1
20870: EQUAL
20871: PUSH
20872: LD_EXP 101
20876: PUSH
20877: LD_INT 0
20879: EQUAL
20880: AND
20881: PUSH
20882: LD_EXP 90
20886: PUSH
20887: LD_INT 0
20889: EQUAL
20890: AND
20891: IFFALSE 20951
20893: GO 20895
20895: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20896: LD_INT 2
20898: PPUSH
20899: LD_INT 6
20901: PPUSH
20902: LD_INT 2
20904: PPUSH
20905: LD_INT 4
20907: PPUSH
20908: CALL_OW 12
20912: PPUSH
20913: LD_INT 10
20915: PPUSH
20916: LD_INT 3
20918: PPUSH
20919: LD_INT 3
20921: PPUSH
20922: LD_INT 3
20924: PPUSH
20925: LD_INT 42
20927: PUSH
20928: LD_INT 43
20930: PUSH
20931: LD_INT 44
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: PPUSH
20939: EMPTY
20940: PPUSH
20941: EMPTY
20942: PPUSH
20943: LD_INT 1
20945: PPUSH
20946: CALL 7836 0 11
// enable ;
20950: ENABLE
// end ;
20951: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20952: LD_EXP 72
20956: PUSH
20957: LD_INT 1
20959: EQUAL
20960: PUSH
20961: LD_EXP 101
20965: PUSH
20966: LD_INT 1
20968: EQUAL
20969: AND
20970: PUSH
20971: LD_EXP 90
20975: PUSH
20976: LD_INT 0
20978: EQUAL
20979: AND
20980: IFFALSE 21040
20982: GO 20984
20984: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20985: LD_INT 2
20987: PPUSH
20988: LD_INT 6
20990: PPUSH
20991: LD_INT 4
20993: PPUSH
20994: LD_INT 6
20996: PPUSH
20997: CALL_OW 12
21001: PPUSH
21002: LD_INT 10
21004: PPUSH
21005: LD_INT 3
21007: PPUSH
21008: LD_INT 3
21010: PPUSH
21011: LD_INT 3
21013: PPUSH
21014: LD_INT 44
21016: PUSH
21017: LD_INT 45
21019: PUSH
21020: LD_INT 46
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: PPUSH
21028: EMPTY
21029: PPUSH
21030: EMPTY
21031: PPUSH
21032: LD_INT 1
21034: PPUSH
21035: CALL 7836 0 11
// enable ;
21039: ENABLE
// end ;
21040: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21041: LD_EXP 72
21045: PUSH
21046: LD_INT 1
21048: EQUAL
21049: PUSH
21050: LD_EXP 101
21054: PUSH
21055: LD_INT 3
21057: EQUAL
21058: AND
21059: PUSH
21060: LD_EXP 90
21064: PUSH
21065: LD_INT 0
21067: EQUAL
21068: AND
21069: IFFALSE 21133
21071: GO 21073
21073: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21074: LD_INT 2
21076: PPUSH
21077: LD_INT 6
21079: PPUSH
21080: LD_INT 4
21082: PPUSH
21083: LD_INT 8
21085: PPUSH
21086: CALL_OW 12
21090: PPUSH
21091: LD_INT 10
21093: PPUSH
21094: LD_INT 3
21096: PPUSH
21097: LD_INT 3
21099: PPUSH
21100: LD_INT 3
21102: PPUSH
21103: LD_INT 44
21105: PUSH
21106: LD_INT 45
21108: PUSH
21109: LD_INT 46
21111: PUSH
21112: LD_INT 47
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PPUSH
21121: EMPTY
21122: PPUSH
21123: EMPTY
21124: PPUSH
21125: LD_INT 1
21127: PPUSH
21128: CALL 7836 0 11
// enable ;
21132: ENABLE
// end ;
21133: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21134: LD_EXP 72
21138: PUSH
21139: LD_INT 1
21141: EQUAL
21142: PUSH
21143: LD_EXP 101
21147: PUSH
21148: LD_INT 4
21150: GREATEREQUAL
21151: AND
21152: PUSH
21153: LD_EXP 90
21157: PUSH
21158: LD_INT 0
21160: EQUAL
21161: AND
21162: IFFALSE 21222
21164: GO 21166
21166: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21167: LD_INT 2
21169: PPUSH
21170: LD_INT 6
21172: PPUSH
21173: LD_INT 4
21175: PPUSH
21176: LD_INT 8
21178: PPUSH
21179: CALL_OW 12
21183: PPUSH
21184: LD_INT 10
21186: PPUSH
21187: LD_INT 3
21189: PPUSH
21190: LD_INT 3
21192: PPUSH
21193: LD_INT 3
21195: PPUSH
21196: LD_INT 46
21198: PUSH
21199: LD_INT 47
21201: PUSH
21202: LD_INT 49
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: PPUSH
21210: EMPTY
21211: PPUSH
21212: EMPTY
21213: PPUSH
21214: LD_INT 1
21216: PPUSH
21217: CALL 7836 0 11
// enable ;
21221: ENABLE
// end ; end_of_file
21222: END
// every 1 do var i , dec1 , options , people ;
21223: GO 21225
21225: DISABLE
21226: LD_INT 0
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21232: LD_INT 24
21234: PPUSH
21235: LD_INT 92
21237: PPUSH
21238: LD_INT 172
21240: PPUSH
21241: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21245: LD_INT 25
21247: PPUSH
21248: LD_INT 103
21250: PPUSH
21251: LD_INT 74
21253: PPUSH
21254: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21258: LD_EXP 48
21262: PPUSH
21263: LD_INT 4
21265: PPUSH
21266: CALL_OW 336
// InGameOn ;
21270: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21274: LD_EXP 24
21278: PUSH
21279: LD_EXP 25
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PPUSH
21288: LD_INT 60
21290: PPUSH
21291: LD_INT 75
21293: PPUSH
21294: CALL_OW 111
// if KappaStatus = 0 then
21298: LD_EXP 81
21302: PUSH
21303: LD_INT 0
21305: EQUAL
21306: IFFALSE 21595
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21308: LD_EXP 24
21312: PPUSH
21313: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21317: LD_EXP 1
21321: PPUSH
21322: LD_STRING D1T-JMM-1
21324: PPUSH
21325: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21329: LD_EXP 24
21333: PPUSH
21334: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21338: LD_EXP 17
21342: PPUSH
21343: LD_STRING D1T-Pow-1
21345: PPUSH
21346: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21350: LD_EXP 24
21354: PPUSH
21355: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21359: LD_EXP 1
21363: PPUSH
21364: LD_STRING D1T-JMM-2
21366: PPUSH
21367: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21371: LD_EXP 24
21375: PPUSH
21376: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21380: LD_EXP 17
21384: PPUSH
21385: LD_STRING D1T-Pow-2
21387: PPUSH
21388: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21392: LD_EXP 24
21396: PPUSH
21397: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21401: LD_EXP 1
21405: PPUSH
21406: LD_STRING D1T-JMM-3
21408: PPUSH
21409: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21413: LD_EXP 24
21417: PPUSH
21418: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
21422: LD_EXP 17
21426: PPUSH
21427: LD_STRING D1T-Pow-3
21429: PPUSH
21430: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21434: LD_EXP 24
21438: PPUSH
21439: CALL_OW 87
// if not JMMGirlVeh = [ ] then
21443: LD_EXP 79
21447: PUSH
21448: EMPTY
21449: EQUAL
21450: NOT
21451: IFFALSE 21551
// begin if JMMGirl = 1 then
21453: LD_EXP 80
21457: PUSH
21458: LD_INT 1
21460: EQUAL
21461: IFFALSE 21475
// Say ( Joan , D1T-Joan-3 ) ;
21463: LD_EXP 2
21467: PPUSH
21468: LD_STRING D1T-Joan-3
21470: PPUSH
21471: CALL_OW 88
// if JMMGirl = 2 then
21475: LD_EXP 80
21479: PUSH
21480: LD_INT 2
21482: EQUAL
21483: IFFALSE 21497
// Say ( Lisa , D1T-Lisa-3 ) ;
21485: LD_EXP 4
21489: PPUSH
21490: LD_STRING D1T-Lisa-3
21492: PPUSH
21493: CALL_OW 88
// if JMMGirl = 3 then
21497: LD_EXP 80
21501: PUSH
21502: LD_INT 3
21504: EQUAL
21505: IFFALSE 21519
// Say ( Connie , D1T-Con-3 ) ;
21507: LD_EXP 16
21511: PPUSH
21512: LD_STRING D1T-Con-3
21514: PPUSH
21515: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21519: LD_EXP 24
21523: PPUSH
21524: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21528: LD_EXP 17
21532: PPUSH
21533: LD_STRING D1T-Pow-4
21535: PPUSH
21536: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21540: LD_EXP 24
21544: PPUSH
21545: CALL_OW 87
// end else
21549: GO 21593
// begin Say ( JMM , D1T-JMM-4 ) ;
21551: LD_EXP 1
21555: PPUSH
21556: LD_STRING D1T-JMM-4
21558: PPUSH
21559: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21563: LD_EXP 24
21567: PPUSH
21568: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21572: LD_EXP 17
21576: PPUSH
21577: LD_STRING D1T-Pow-5
21579: PPUSH
21580: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21584: LD_EXP 24
21588: PPUSH
21589: CALL_OW 87
// end ; end else
21593: GO 21679
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21595: LD_EXP 24
21599: PPUSH
21600: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21604: LD_EXP 1
21608: PPUSH
21609: LD_STRING D1T-JMM-1
21611: PPUSH
21612: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21616: LD_EXP 24
21620: PPUSH
21621: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21625: LD_EXP 17
21629: PPUSH
21630: LD_STRING D1T-Pow-1
21632: PPUSH
21633: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21637: LD_EXP 24
21641: PPUSH
21642: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21646: LD_EXP 1
21650: PPUSH
21651: LD_STRING D1T-JMM-2
21653: PPUSH
21654: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21658: LD_EXP 24
21662: PPUSH
21663: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21667: LD_EXP 17
21671: PPUSH
21672: LD_STRING D1T-Pow-2
21674: PPUSH
21675: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21679: LD_INT 35
21681: PPUSH
21682: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21686: LD_EXP 24
21690: PUSH
21691: LD_EXP 25
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: LD_INT 60
21702: PPUSH
21703: LD_INT 75
21705: PPUSH
21706: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
21710: LD_EXP 24
21714: PPUSH
21715: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
21719: LD_EXP 24
21723: PPUSH
21724: LD_EXP 17
21728: PPUSH
21729: CALL_OW 296
21733: PUSH
21734: LD_INT 20
21736: LESS
21737: PUSH
21738: LD_EXP 24
21742: PPUSH
21743: CALL_OW 314
21747: NOT
21748: OR
21749: IFFALSE 21679
// ComExitVehicle ( JMM ) ;
21751: LD_EXP 1
21755: PPUSH
21756: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
21760: LD_INT 35
21762: PPUSH
21763: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
21767: LD_EXP 1
21771: PPUSH
21772: LD_EXP 17
21776: PPUSH
21777: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
21781: LD_EXP 1
21785: PPUSH
21786: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21790: LD_EXP 1
21794: PPUSH
21795: LD_EXP 17
21799: PPUSH
21800: CALL_OW 296
21804: PUSH
21805: LD_INT 6
21807: LESS
21808: IFFALSE 21760
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21810: LD_EXP 1
21814: PUSH
21815: LD_EXP 17
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PPUSH
21824: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21828: LD_EXP 1
21832: PPUSH
21833: LD_EXP 17
21837: PPUSH
21838: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21842: LD_EXP 17
21846: PPUSH
21847: LD_EXP 1
21851: PPUSH
21852: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21856: LD_EXP 1
21860: PPUSH
21861: LD_STRING D1-JMM-1
21863: PPUSH
21864: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21868: LD_EXP 17
21872: PPUSH
21873: LD_STRING D1-Pow-1
21875: PPUSH
21876: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21880: LD_INT 1
21882: PPUSH
21883: LD_INT 3
21885: PPUSH
21886: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21890: LD_INT 1
21892: PPUSH
21893: LD_INT 4
21895: PPUSH
21896: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21900: LD_INT 1
21902: PPUSH
21903: LD_INT 5
21905: PPUSH
21906: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21910: LD_INT 171
21912: PPUSH
21913: LD_INT 81
21915: PPUSH
21916: CALL_OW 84
// wait ( 0 0$4 ) ;
21920: LD_INT 140
21922: PPUSH
21923: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21927: LD_INT 162
21929: PPUSH
21930: LD_INT 36
21932: PPUSH
21933: CALL_OW 84
// wait ( 0 0$4 ) ;
21937: LD_INT 140
21939: PPUSH
21940: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21944: LD_INT 75
21946: PPUSH
21947: LD_INT 16
21949: PPUSH
21950: CALL_OW 84
// wait ( 0 0$4 ) ;
21954: LD_INT 140
21956: PPUSH
21957: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21961: LD_EXP 17
21965: PUSH
21966: LD_EXP 1
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PPUSH
21975: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
21979: LD_EXP 1
21983: PPUSH
21984: LD_STRING D1-JMM-2
21986: PPUSH
21987: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
21991: LD_EXP 17
21995: PPUSH
21996: LD_STRING D1-Pow-2
21998: PPUSH
21999: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22003: LD_EXP 1
22007: PPUSH
22008: LD_STRING D1-JMM-3
22010: PPUSH
22011: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22015: LD_EXP 17
22019: PPUSH
22020: LD_STRING D1-Pow-3
22022: PPUSH
22023: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22027: LD_EXP 1
22031: PPUSH
22032: LD_STRING D1-JMM-4
22034: PPUSH
22035: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22039: LD_EXP 17
22043: PPUSH
22044: LD_STRING D1-Pow-4
22046: PPUSH
22047: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22051: LD_EXP 1
22055: PPUSH
22056: LD_STRING D1-JMM-5
22058: PPUSH
22059: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
22063: LD_EXP 17
22067: PPUSH
22068: LD_STRING D1-Pow-5
22070: PPUSH
22071: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22075: LD_ADDR_VAR 0 3
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: LD_INT 4
22091: PUSH
22092: LD_INT 5
22094: PUSH
22095: LD_INT 6
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22106: LD_ADDR_VAR 0 2
22110: PUSH
22111: LD_STRING Q1
22113: PPUSH
22114: LD_VAR 0 3
22118: PPUSH
22119: CALL_OW 98
22123: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22124: LD_ADDR_VAR 0 2
22128: PUSH
22129: LD_STRING Q1
22131: PPUSH
22132: LD_VAR 0 3
22136: PPUSH
22137: CALL_OW 98
22141: ST_TO_ADDR
// options = options diff dec1 ;
22142: LD_ADDR_VAR 0 3
22146: PUSH
22147: LD_VAR 0 3
22151: PUSH
22152: LD_VAR 0 2
22156: DIFF
22157: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22158: LD_VAR 0 2
22162: PPUSH
22163: LD_VAR 0 3
22167: PPUSH
22168: CALL 23702 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22172: LD_VAR 0 2
22176: PUSH
22177: LD_INT 5
22179: PUSH
22180: LD_INT 6
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: IN
22187: PUSH
22188: LD_VAR 0 3
22192: PUSH
22193: LD_INT 2
22195: EQUAL
22196: OR
22197: IFFALSE 22124
// if not ( dec1 in [ 5 , 6 ] ) then
22199: LD_VAR 0 2
22203: PUSH
22204: LD_INT 5
22206: PUSH
22207: LD_INT 6
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: IN
22214: NOT
22215: IFFALSE 22258
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22217: LD_ADDR_VAR 0 2
22221: PUSH
22222: LD_STRING Q1a
22224: PPUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PPUSH
22235: CALL_OW 98
22239: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22240: LD_VAR 0 2
22244: PUSH
22245: LD_INT 4
22247: PLUS
22248: PPUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: CALL 23702 0 2
// end ; if not JMMGirlVeh = [ ] then
22258: LD_EXP 79
22262: PUSH
22263: EMPTY
22264: EQUAL
22265: NOT
22266: IFFALSE 22632
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22268: LD_EXP 25
22272: PPUSH
22273: CALL_OW 313
22277: PPUSH
22278: CALL_OW 121
// wait ( 0 0$1 ) ;
22282: LD_INT 35
22284: PPUSH
22285: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22289: LD_INT 35
22291: PPUSH
22292: CALL_OW 67
// if JMMGirl = 1 then
22296: LD_EXP 80
22300: PUSH
22301: LD_INT 1
22303: EQUAL
22304: IFFALSE 22320
// ComMoveUnit ( JMM , Joan ) ;
22306: LD_EXP 1
22310: PPUSH
22311: LD_EXP 2
22315: PPUSH
22316: CALL_OW 112
// if JMMGirl = 2 then
22320: LD_EXP 80
22324: PUSH
22325: LD_INT 2
22327: EQUAL
22328: IFFALSE 22344
// ComMoveUnit ( JMM , Lisa ) ;
22330: LD_EXP 1
22334: PPUSH
22335: LD_EXP 4
22339: PPUSH
22340: CALL_OW 112
// if JMMGirl = 3 then
22344: LD_EXP 80
22348: PUSH
22349: LD_INT 3
22351: EQUAL
22352: IFFALSE 22368
// ComMoveUnit ( JMM , Connie ) ;
22354: LD_EXP 1
22358: PPUSH
22359: LD_EXP 16
22363: PPUSH
22364: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22368: LD_EXP 1
22372: PPUSH
22373: LD_EXP 2
22377: PPUSH
22378: CALL_OW 296
22382: PUSH
22383: LD_INT 6
22385: LESS
22386: PUSH
22387: LD_EXP 1
22391: PPUSH
22392: LD_EXP 4
22396: PPUSH
22397: CALL_OW 296
22401: PUSH
22402: LD_INT 6
22404: LESS
22405: OR
22406: PUSH
22407: LD_EXP 1
22411: PPUSH
22412: LD_EXP 16
22416: PPUSH
22417: CALL_OW 296
22421: PUSH
22422: LD_INT 6
22424: LESS
22425: OR
22426: IFFALSE 22289
// CenterNowOnUnits ( JMM ) ;
22428: LD_EXP 1
22432: PPUSH
22433: CALL_OW 87
// case JMMGirl of 1 :
22437: LD_EXP 80
22441: PUSH
22442: LD_INT 1
22444: DOUBLE
22445: EQUAL
22446: IFTRUE 22450
22448: GO 22505
22450: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22451: LD_EXP 1
22455: PPUSH
22456: LD_EXP 2
22460: PPUSH
22461: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22465: LD_EXP 2
22469: PPUSH
22470: LD_EXP 1
22474: PPUSH
22475: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22479: LD_EXP 2
22483: PPUSH
22484: LD_STRING D3W-Joan-1
22486: PPUSH
22487: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22491: LD_EXP 1
22495: PPUSH
22496: LD_STRING D3W-JMM-1
22498: PPUSH
22499: CALL_OW 88
// end ; 2 :
22503: GO 22632
22505: LD_INT 2
22507: DOUBLE
22508: EQUAL
22509: IFTRUE 22513
22511: GO 22568
22513: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22514: LD_EXP 1
22518: PPUSH
22519: LD_EXP 4
22523: PPUSH
22524: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22528: LD_EXP 4
22532: PPUSH
22533: LD_EXP 1
22537: PPUSH
22538: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22542: LD_EXP 4
22546: PPUSH
22547: LD_STRING D3W-Lisa-1
22549: PPUSH
22550: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22554: LD_EXP 1
22558: PPUSH
22559: LD_STRING D3W-JMM-1
22561: PPUSH
22562: CALL_OW 88
// end ; 3 :
22566: GO 22632
22568: LD_INT 3
22570: DOUBLE
22571: EQUAL
22572: IFTRUE 22576
22574: GO 22631
22576: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22577: LD_EXP 1
22581: PPUSH
22582: LD_EXP 16
22586: PPUSH
22587: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22591: LD_EXP 16
22595: PPUSH
22596: LD_EXP 1
22600: PPUSH
22601: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22605: LD_EXP 16
22609: PPUSH
22610: LD_STRING D3W-Con-1
22612: PPUSH
22613: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22617: LD_EXP 1
22621: PPUSH
22622: LD_STRING D3W-JMM-1
22624: PPUSH
22625: CALL_OW 88
// end ; end ;
22629: GO 22632
22631: POP
// end ; people = 0 ;
22632: LD_ADDR_VAR 0 4
22636: PUSH
22637: LD_INT 0
22639: ST_TO_ADDR
// if Lisa and people < 5 then
22640: LD_EXP 4
22644: PUSH
22645: LD_VAR 0 4
22649: PUSH
22650: LD_INT 5
22652: LESS
22653: AND
22654: IFFALSE 22686
// begin people = people + 1 ;
22656: LD_ADDR_VAR 0 4
22660: PUSH
22661: LD_VAR 0 4
22665: PUSH
22666: LD_INT 1
22668: PLUS
22669: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22670: LD_ADDR_EXP 67
22674: PUSH
22675: LD_EXP 67
22679: PUSH
22680: LD_EXP 4
22684: ADD
22685: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22686: LD_EXP 5
22690: PUSH
22691: LD_VAR 0 4
22695: PUSH
22696: LD_INT 5
22698: LESS
22699: AND
22700: IFFALSE 22732
// begin people = people + 1 ;
22702: LD_ADDR_VAR 0 4
22706: PUSH
22707: LD_VAR 0 4
22711: PUSH
22712: LD_INT 1
22714: PLUS
22715: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
22716: LD_ADDR_EXP 67
22720: PUSH
22721: LD_EXP 67
22725: PUSH
22726: LD_EXP 5
22730: ADD
22731: ST_TO_ADDR
// end ; if Bobby and people < 5 then
22732: LD_EXP 6
22736: PUSH
22737: LD_VAR 0 4
22741: PUSH
22742: LD_INT 5
22744: LESS
22745: AND
22746: IFFALSE 22778
// begin people = people + 1 ;
22748: LD_ADDR_VAR 0 4
22752: PUSH
22753: LD_VAR 0 4
22757: PUSH
22758: LD_INT 1
22760: PLUS
22761: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
22762: LD_ADDR_EXP 67
22766: PUSH
22767: LD_EXP 67
22771: PUSH
22772: LD_EXP 6
22776: ADD
22777: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
22778: LD_EXP 7
22782: PUSH
22783: LD_VAR 0 4
22787: PUSH
22788: LD_INT 5
22790: LESS
22791: AND
22792: IFFALSE 22824
// begin people = people + 1 ;
22794: LD_ADDR_VAR 0 4
22798: PUSH
22799: LD_VAR 0 4
22803: PUSH
22804: LD_INT 1
22806: PLUS
22807: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22808: LD_ADDR_EXP 67
22812: PUSH
22813: LD_EXP 67
22817: PUSH
22818: LD_EXP 7
22822: ADD
22823: ST_TO_ADDR
// end ; if Denis and people < 5 then
22824: LD_EXP 8
22828: PUSH
22829: LD_VAR 0 4
22833: PUSH
22834: LD_INT 5
22836: LESS
22837: AND
22838: IFFALSE 22870
// begin people = people + 1 ;
22840: LD_ADDR_VAR 0 4
22844: PUSH
22845: LD_VAR 0 4
22849: PUSH
22850: LD_INT 1
22852: PLUS
22853: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22854: LD_ADDR_EXP 67
22858: PUSH
22859: LD_EXP 67
22863: PUSH
22864: LD_EXP 8
22868: ADD
22869: ST_TO_ADDR
// end ; if Brown and people < 5 then
22870: LD_EXP 9
22874: PUSH
22875: LD_VAR 0 4
22879: PUSH
22880: LD_INT 5
22882: LESS
22883: AND
22884: IFFALSE 22916
// begin people = people + 1 ;
22886: LD_ADDR_VAR 0 4
22890: PUSH
22891: LD_VAR 0 4
22895: PUSH
22896: LD_INT 1
22898: PLUS
22899: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22900: LD_ADDR_EXP 67
22904: PUSH
22905: LD_EXP 67
22909: PUSH
22910: LD_EXP 9
22914: ADD
22915: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22916: LD_EXP 10
22920: PUSH
22921: LD_VAR 0 4
22925: PUSH
22926: LD_INT 5
22928: LESS
22929: AND
22930: IFFALSE 22962
// begin people = people + 1 ;
22932: LD_ADDR_VAR 0 4
22936: PUSH
22937: LD_VAR 0 4
22941: PUSH
22942: LD_INT 1
22944: PLUS
22945: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22946: LD_ADDR_EXP 67
22950: PUSH
22951: LD_EXP 67
22955: PUSH
22956: LD_EXP 10
22960: ADD
22961: ST_TO_ADDR
// end ; if Houten and people < 5 then
22962: LD_EXP 11
22966: PUSH
22967: LD_VAR 0 4
22971: PUSH
22972: LD_INT 5
22974: LESS
22975: AND
22976: IFFALSE 23008
// begin people = people + 1 ;
22978: LD_ADDR_VAR 0 4
22982: PUSH
22983: LD_VAR 0 4
22987: PUSH
22988: LD_INT 1
22990: PLUS
22991: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
22992: LD_ADDR_EXP 67
22996: PUSH
22997: LD_EXP 67
23001: PUSH
23002: LD_EXP 11
23006: ADD
23007: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23008: LD_EXP 12
23012: PUSH
23013: LD_VAR 0 4
23017: PUSH
23018: LD_INT 5
23020: LESS
23021: AND
23022: IFFALSE 23054
// begin people = people + 1 ;
23024: LD_ADDR_VAR 0 4
23028: PUSH
23029: LD_VAR 0 4
23033: PUSH
23034: LD_INT 1
23036: PLUS
23037: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23038: LD_ADDR_EXP 67
23042: PUSH
23043: LD_EXP 67
23047: PUSH
23048: LD_EXP 12
23052: ADD
23053: ST_TO_ADDR
// end ; if Gary and people < 5 then
23054: LD_EXP 13
23058: PUSH
23059: LD_VAR 0 4
23063: PUSH
23064: LD_INT 5
23066: LESS
23067: AND
23068: IFFALSE 23100
// begin people = people + 1 ;
23070: LD_ADDR_VAR 0 4
23074: PUSH
23075: LD_VAR 0 4
23079: PUSH
23080: LD_INT 1
23082: PLUS
23083: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23084: LD_ADDR_EXP 67
23088: PUSH
23089: LD_EXP 67
23093: PUSH
23094: LD_EXP 13
23098: ADD
23099: ST_TO_ADDR
// end ; if Frank and people < 5 then
23100: LD_EXP 14
23104: PUSH
23105: LD_VAR 0 4
23109: PUSH
23110: LD_INT 5
23112: LESS
23113: AND
23114: IFFALSE 23146
// begin people = people + 1 ;
23116: LD_ADDR_VAR 0 4
23120: PUSH
23121: LD_VAR 0 4
23125: PUSH
23126: LD_INT 1
23128: PLUS
23129: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23130: LD_ADDR_EXP 67
23134: PUSH
23135: LD_EXP 67
23139: PUSH
23140: LD_EXP 14
23144: ADD
23145: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23146: LD_EXP 15
23150: PUSH
23151: LD_VAR 0 4
23155: PUSH
23156: LD_INT 5
23158: LESS
23159: AND
23160: IFFALSE 23192
// begin people = people + 1 ;
23162: LD_ADDR_VAR 0 4
23166: PUSH
23167: LD_VAR 0 4
23171: PUSH
23172: LD_INT 1
23174: PLUS
23175: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23176: LD_ADDR_EXP 67
23180: PUSH
23181: LD_EXP 67
23185: PUSH
23186: LD_EXP 15
23190: ADD
23191: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23192: LD_EXP 67
23196: PPUSH
23197: LD_INT 25
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PPUSH
23207: CALL_OW 72
23211: PUSH
23212: LD_INT 0
23214: EQUAL
23215: IFFALSE 23233
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23217: LD_EXP 67
23221: PUSH
23222: LD_INT 1
23224: ARRAY
23225: PPUSH
23226: LD_INT 2
23228: PPUSH
23229: CALL_OW 336
// for i = 1 to 5 do
23233: LD_ADDR_VAR 0 1
23237: PUSH
23238: DOUBLE
23239: LD_INT 1
23241: DEC
23242: ST_TO_ADDR
23243: LD_INT 5
23245: PUSH
23246: FOR_TO
23247: IFFALSE 23298
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23249: LD_EXP 67
23253: PUSH
23254: LD_VAR 0 1
23258: ARRAY
23259: PPUSH
23260: LD_INT 62
23262: PUSH
23263: LD_VAR 0 1
23267: PLUS
23268: PPUSH
23269: LD_INT 95
23271: PPUSH
23272: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23276: LD_EXP 67
23280: PUSH
23281: LD_VAR 0 1
23285: ARRAY
23286: PPUSH
23287: LD_EXP 1
23291: PPUSH
23292: CALL_OW 179
// end ;
23296: GO 23246
23298: POP
23299: POP
// repeat wait ( 0 0$1 ) ;
23300: LD_INT 35
23302: PPUSH
23303: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23307: LD_EXP 1
23311: PPUSH
23312: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23316: LD_EXP 1
23320: PPUSH
23321: LD_INT 66
23323: PPUSH
23324: LD_INT 98
23326: PPUSH
23327: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23331: LD_EXP 2
23335: PUSH
23336: LD_EXP 4
23340: PUSH
23341: LD_EXP 16
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: PPUSH
23351: LD_INT 67
23353: PPUSH
23354: LD_INT 98
23356: PPUSH
23357: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23361: LD_EXP 1
23365: PUSH
23366: LD_EXP 2
23370: PUSH
23371: LD_EXP 4
23375: PUSH
23376: LD_EXP 16
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: PPUSH
23387: LD_INT 63
23389: PPUSH
23390: LD_INT 95
23392: PPUSH
23393: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23397: LD_EXP 1
23401: PPUSH
23402: LD_INT 9
23404: PPUSH
23405: CALL_OW 308
23409: PUSH
23410: LD_INT 9
23412: PPUSH
23413: LD_INT 22
23415: PUSH
23416: LD_INT 4
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 21
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PPUSH
23437: CALL_OW 70
23441: PUSH
23442: LD_INT 5
23444: EQUAL
23445: AND
23446: IFFALSE 23300
// wait ( 0 0$2 ) ;
23448: LD_INT 70
23450: PPUSH
23451: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
23455: LD_EXP 4
23459: PPUSH
23460: LD_INT 9
23462: PPUSH
23463: CALL_OW 308
23467: IFFALSE 23481
// Say ( Lisa , D3nW-Lisa-1 ) ;
23469: LD_EXP 4
23473: PPUSH
23474: LD_STRING D3nW-Lisa-1
23476: PPUSH
23477: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
23481: LD_EXP 7
23485: PPUSH
23486: LD_INT 9
23488: PPUSH
23489: CALL_OW 308
23493: IFFALSE 23507
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23495: LD_EXP 7
23499: PPUSH
23500: LD_STRING D3nW-Cyrus-1
23502: PPUSH
23503: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23507: LD_EXP 6
23511: PPUSH
23512: LD_INT 9
23514: PPUSH
23515: CALL_OW 308
23519: IFFALSE 23533
// Say ( Bobby , D3nW-Bobby-1 ) ;
23521: LD_EXP 6
23525: PPUSH
23526: LD_STRING D3nW-Bobby-1
23528: PPUSH
23529: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23533: LD_EXP 13
23537: PPUSH
23538: LD_INT 9
23540: PPUSH
23541: CALL_OW 308
23545: IFFALSE 23559
// Say ( Gary , D3nW-Gary-1 ) ;
23547: LD_EXP 13
23551: PPUSH
23552: LD_STRING D3nW-Gary-1
23554: PPUSH
23555: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23559: LD_EXP 5
23563: PPUSH
23564: LD_INT 9
23566: PPUSH
23567: CALL_OW 308
23571: IFFALSE 23585
// Say ( Donaldson , D3nW-Don-1 ) ;
23573: LD_EXP 5
23577: PPUSH
23578: LD_STRING D3nW-Don-1
23580: PPUSH
23581: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23585: LD_EXP 12
23589: PPUSH
23590: LD_INT 9
23592: PPUSH
23593: CALL_OW 308
23597: IFFALSE 23611
// Say ( Cornel , D3nW-Corn-1 ) ;
23599: LD_EXP 12
23603: PPUSH
23604: LD_STRING D3nW-Corn-1
23606: PPUSH
23607: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23611: LD_EXP 14
23615: PPUSH
23616: LD_INT 9
23618: PPUSH
23619: CALL_OW 308
23623: IFFALSE 23637
// Say ( Frank , D3nW-Frank-1 ) ;
23625: LD_EXP 14
23629: PPUSH
23630: LD_STRING D3nW-Frank-1
23632: PPUSH
23633: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23637: LD_EXP 1
23641: PPUSH
23642: LD_STRING D3nW-JMM-1
23644: PPUSH
23645: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23649: LD_EXP 1
23653: PPUSH
23654: LD_STRING D3nW-JMM-1a
23656: PPUSH
23657: CALL_OW 88
// InGameOff ;
23661: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23665: LD_STRING M1
23667: PPUSH
23668: CALL_OW 337
// SaveForQuickRestart ;
23672: CALL_OW 22
// startAttacks = 1 ;
23676: LD_ADDR_EXP 72
23680: PUSH
23681: LD_INT 1
23683: ST_TO_ADDR
// wait ( 0 0$5 ) ;
23684: LD_INT 175
23686: PPUSH
23687: CALL_OW 67
// powellBuildBase = 1 ;
23691: LD_ADDR_EXP 68
23695: PUSH
23696: LD_INT 1
23698: ST_TO_ADDR
// end ;
23699: PPOPN 4
23701: END
// function ResolveQuery ( question , list_of_q ) ; begin
23702: LD_INT 0
23704: PPUSH
// case question of 1 :
23705: LD_VAR 0 1
23709: PUSH
23710: LD_INT 1
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23769
23718: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
23719: LD_EXP 1
23723: PPUSH
23724: LD_STRING D2Mot-JMM-1
23726: PPUSH
23727: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
23731: LD_EXP 17
23735: PPUSH
23736: LD_STRING D2Mot-Pow-1
23738: PPUSH
23739: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
23743: LD_EXP 1
23747: PPUSH
23748: LD_STRING D2Mot-JMM-2
23750: PPUSH
23751: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
23755: LD_EXP 17
23759: PPUSH
23760: LD_STRING D2Mot-Pow-2
23762: PPUSH
23763: CALL_OW 88
// end ; 2 :
23767: GO 24112
23769: LD_INT 2
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 23853
23777: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
23778: LD_EXP 1
23782: PPUSH
23783: LD_STRING D2Rus-JMM-1
23785: PPUSH
23786: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23790: LD_EXP 17
23794: PPUSH
23795: LD_STRING D2Rus-Pow-1
23797: PPUSH
23798: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23802: LD_EXP 1
23806: PPUSH
23807: LD_STRING D2Rus-JMM-2
23809: PPUSH
23810: CALL_OW 88
// if not ( 3 in list_of_q ) then
23814: LD_INT 3
23816: PUSH
23817: LD_VAR 0 2
23821: IN
23822: NOT
23823: IFFALSE 23839
// Say ( Powell , D2Rus-Pow-2 ) else
23825: LD_EXP 17
23829: PPUSH
23830: LD_STRING D2Rus-Pow-2
23832: PPUSH
23833: CALL_OW 88
23837: GO 23851
// Say ( Powell , D2Rus-Pow-2a ) ;
23839: LD_EXP 17
23843: PPUSH
23844: LD_STRING D2Rus-Pow-2a
23846: PPUSH
23847: CALL_OW 88
// end ; 3 :
23851: GO 24112
23853: LD_INT 3
23855: DOUBLE
23856: EQUAL
23857: IFTRUE 23861
23859: GO 23946
23861: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23862: LD_EXP 1
23866: PPUSH
23867: LD_STRING D2Leg-JMM-1
23869: PPUSH
23870: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23874: LD_EXP 17
23878: PPUSH
23879: LD_STRING D2Leg-Pow-1
23881: PPUSH
23882: CALL_OW 88
// if ( 2 in list_of_q ) then
23886: LD_INT 2
23888: PUSH
23889: LD_VAR 0 2
23893: IN
23894: IFFALSE 23920
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23896: LD_EXP 1
23900: PPUSH
23901: LD_STRING D2Leg-JMM-2
23903: PPUSH
23904: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23908: LD_EXP 17
23912: PPUSH
23913: LD_STRING D2Leg-Pow-2
23915: PPUSH
23916: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23920: LD_EXP 1
23924: PPUSH
23925: LD_STRING D2Leg-JMM-3
23927: PPUSH
23928: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23932: LD_EXP 17
23936: PPUSH
23937: LD_STRING D2Leg-Pow-3
23939: PPUSH
23940: CALL_OW 88
// end ; 4 :
23944: GO 24112
23946: LD_INT 4
23948: DOUBLE
23949: EQUAL
23950: IFTRUE 23954
23952: GO 24029
23954: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23955: LD_EXP 1
23959: PPUSH
23960: LD_STRING D2Ar-JMM-1
23962: PPUSH
23963: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
23967: LD_EXP 17
23971: PPUSH
23972: LD_STRING D2Ar-Pow-1
23974: PPUSH
23975: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
23979: LD_EXP 1
23983: PPUSH
23984: LD_STRING D2Ar-JMM-2
23986: PPUSH
23987: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
23991: LD_EXP 17
23995: PPUSH
23996: LD_STRING D2Ar-Pow-2
23998: PPUSH
23999: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24003: LD_EXP 1
24007: PPUSH
24008: LD_STRING D2Ar-JMM-3
24010: PPUSH
24011: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24015: LD_EXP 17
24019: PPUSH
24020: LD_STRING D2Ar-Pow-3
24022: PPUSH
24023: CALL_OW 88
// end ; 5 :
24027: GO 24112
24029: LD_INT 5
24031: DOUBLE
24032: EQUAL
24033: IFTRUE 24037
24035: GO 24052
24037: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24038: LD_EXP 1
24042: PPUSH
24043: LD_STRING D2Conf-JMM-1
24045: PPUSH
24046: CALL_OW 88
// end ; 6 :
24050: GO 24112
24052: LD_INT 6
24054: DOUBLE
24055: EQUAL
24056: IFTRUE 24060
24058: GO 24111
24060: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24061: LD_EXP 1
24065: PPUSH
24066: LD_STRING D2Com-JMM-1
24068: PPUSH
24069: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24073: LD_EXP 17
24077: PPUSH
24078: LD_STRING D2Com-Pow-1
24080: PPUSH
24081: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24085: LD_EXP 1
24089: PPUSH
24090: LD_STRING D2Com-JMM-2
24092: PPUSH
24093: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24097: LD_EXP 17
24101: PPUSH
24102: LD_STRING D2Com-Pow-2
24104: PPUSH
24105: CALL_OW 88
// end ; end ;
24109: GO 24112
24111: POP
// end ;
24112: LD_VAR 0 3
24116: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
24117: LD_INT 9
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 4
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 21
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PPUSH
24144: CALL_OW 70
24148: IFFALSE 24193
24150: GO 24152
24152: DISABLE
// begin enable ;
24153: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
24154: LD_INT 9
24156: PPUSH
24157: LD_INT 22
24159: PUSH
24160: LD_INT 4
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 21
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PPUSH
24181: CALL_OW 70
24185: PPUSH
24186: LD_INT 1
24188: PPUSH
24189: CALL_OW 235
// end ;
24193: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24194: LD_INT 22
24196: PUSH
24197: LD_INT 4
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 21
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: LD_INT 58
24219: PUSH
24220: EMPTY
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: PPUSH
24232: CALL_OW 69
24236: PUSH
24237: LD_INT 4
24239: EQUAL
24240: PUSH
24241: LD_EXP 72
24245: PUSH
24246: LD_INT 1
24248: EQUAL
24249: AND
24250: IFFALSE 24263
24252: GO 24254
24254: DISABLE
// startAttacks = 0 ;
24255: LD_ADDR_EXP 72
24259: PUSH
24260: LD_INT 0
24262: ST_TO_ADDR
24263: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24264: LD_INT 22
24266: PUSH
24267: LD_INT 4
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 2
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 3
24286: PUSH
24287: LD_INT 58
24289: PUSH
24290: EMPTY
24291: LIST
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: PPUSH
24302: CALL_OW 69
24306: PUSH
24307: LD_INT 4
24309: EQUAL
24310: PUSH
24311: LD_INT 22
24313: PUSH
24314: LD_INT 6
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 21
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 24
24333: PUSH
24334: LD_INT 250
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: PPUSH
24346: CALL_OW 69
24350: PUSH
24351: LD_INT 0
24353: EQUAL
24354: AND
24355: PUSH
24356: LD_EXP 72
24360: PUSH
24361: LD_INT 0
24363: EQUAL
24364: AND
24365: PUSH
24366: LD_EXP 69
24370: PUSH
24371: LD_INT 0
24373: EQUAL
24374: AND
24375: IFFALSE 24563
24377: GO 24379
24379: DISABLE
24380: LD_INT 0
24382: PPUSH
// begin powellAttacks = 1 ;
24383: LD_ADDR_EXP 69
24387: PUSH
24388: LD_INT 1
24390: ST_TO_ADDR
// InGameOn ;
24391: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24395: LD_EXP 17
24399: PPUSH
24400: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24404: LD_EXP 17
24408: PPUSH
24409: LD_INT 47
24411: PPUSH
24412: LD_INT 60
24414: PPUSH
24415: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24419: LD_EXP 17
24423: PPUSH
24424: LD_STRING D4-Pow-1
24426: PPUSH
24427: CALL_OW 88
// for i = 1 to amUnitsAttack do
24431: LD_ADDR_VAR 0 1
24435: PUSH
24436: DOUBLE
24437: LD_INT 1
24439: DEC
24440: ST_TO_ADDR
24441: LD_EXP 66
24445: PUSH
24446: FOR_TO
24447: IFFALSE 24492
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24449: LD_EXP 66
24453: PUSH
24454: LD_VAR 0 1
24458: ARRAY
24459: PPUSH
24460: CALL_OW 258
24464: PUSH
24465: LD_INT 1
24467: EQUAL
24468: IFFALSE 24490
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24470: LD_EXP 66
24474: PUSH
24475: LD_VAR 0 1
24479: ARRAY
24480: PPUSH
24481: LD_STRING D4-Sol1-1
24483: PPUSH
24484: CALL_OW 88
// break ;
24488: GO 24492
// end ;
24490: GO 24446
24492: POP
24493: POP
// Say ( Powell , D4-Pow-2 ) ;
24494: LD_EXP 17
24498: PPUSH
24499: LD_STRING D4-Pow-2
24501: PPUSH
24502: CALL_OW 88
// InGameOff ;
24506: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24510: LD_INT 22
24512: PUSH
24513: LD_INT 4
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 21
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 3
24532: PUSH
24533: LD_INT 58
24535: PUSH
24536: EMPTY
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: LIST
24547: PPUSH
24548: CALL_OW 69
24552: PPUSH
24553: LD_INT 59
24555: PPUSH
24556: LD_INT 21
24558: PPUSH
24559: CALL_OW 114
// end ;
24563: PPOPN 1
24565: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24566: LD_INT 7
24568: PPUSH
24569: LD_INT 22
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 21
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PPUSH
24593: CALL_OW 70
24597: PUSH
24598: LD_INT 0
24600: GREATER
24601: PUSH
24602: LD_EXP 17
24606: PPUSH
24607: CALL_OW 302
24611: AND
24612: PUSH
24613: LD_EXP 71
24617: PUSH
24618: LD_INT 0
24620: EQUAL
24621: AND
24622: IFFALSE 24746
24624: GO 24626
24626: DISABLE
// begin InGameOn ;
24627: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24631: LD_INT 22
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 21
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PPUSH
24655: CALL_OW 69
24659: PPUSH
24660: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24664: LD_INT 7
24666: PPUSH
24667: LD_INT 22
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 21
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PPUSH
24691: CALL_OW 70
24695: PPUSH
24696: LD_INT 70
24698: PPUSH
24699: LD_INT 104
24701: PPUSH
24702: CALL_OW 111
// if powellWarm = 0 then
24706: LD_EXP 71
24710: PUSH
24711: LD_INT 0
24713: EQUAL
24714: IFFALSE 24742
// begin Say ( Powell , DBack1-Pow-1 ) ;
24716: LD_EXP 17
24720: PPUSH
24721: LD_STRING DBack1-Pow-1
24723: PPUSH
24724: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24728: LD_ADDR_EXP 71
24732: PUSH
24733: LD_EXP 71
24737: PUSH
24738: LD_INT 1
24740: PLUS
24741: ST_TO_ADDR
// end ; InGameOff ;
24742: CALL_OW 9
// end ;
24746: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24747: LD_INT 7
24749: PPUSH
24750: LD_INT 22
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 21
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 70
24778: PUSH
24779: LD_INT 0
24781: GREATER
24782: PUSH
24783: LD_EXP 17
24787: PPUSH
24788: CALL_OW 302
24792: AND
24793: PUSH
24794: LD_EXP 71
24798: PUSH
24799: LD_INT 1
24801: EQUAL
24802: AND
24803: IFFALSE 24927
24805: GO 24807
24807: DISABLE
// begin InGameOn ;
24808: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24812: LD_INT 22
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 21
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PPUSH
24841: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24845: LD_INT 7
24847: PPUSH
24848: LD_INT 22
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 21
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PPUSH
24872: CALL_OW 70
24876: PPUSH
24877: LD_INT 70
24879: PPUSH
24880: LD_INT 104
24882: PPUSH
24883: CALL_OW 111
// if powellWarm = 1 then
24887: LD_EXP 71
24891: PUSH
24892: LD_INT 1
24894: EQUAL
24895: IFFALSE 24923
// begin Say ( Powell , DBack2-Pow-1 ) ;
24897: LD_EXP 17
24901: PPUSH
24902: LD_STRING DBack2-Pow-1
24904: PPUSH
24905: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24909: LD_ADDR_EXP 71
24913: PUSH
24914: LD_EXP 71
24918: PUSH
24919: LD_INT 1
24921: PLUS
24922: ST_TO_ADDR
// end ; InGameOff ;
24923: CALL_OW 9
// end ;
24927: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24928: LD_INT 7
24930: PPUSH
24931: LD_INT 22
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 21
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PPUSH
24955: CALL_OW 70
24959: PUSH
24960: LD_INT 0
24962: GREATER
24963: PUSH
24964: LD_EXP 17
24968: PPUSH
24969: CALL_OW 302
24973: AND
24974: PUSH
24975: LD_EXP 71
24979: PUSH
24980: LD_INT 2
24982: EQUAL
24983: AND
24984: IFFALSE 25101
24986: GO 24988
24988: DISABLE
// begin InGameOn ;
24989: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24993: LD_INT 22
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 21
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PPUSH
25017: CALL_OW 69
25021: PPUSH
25022: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25026: LD_INT 7
25028: PPUSH
25029: LD_INT 22
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 21
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PPUSH
25053: CALL_OW 70
25057: PPUSH
25058: LD_INT 70
25060: PPUSH
25061: LD_INT 104
25063: PPUSH
25064: CALL_OW 111
// if powellWarm = 2 then
25068: LD_EXP 71
25072: PUSH
25073: LD_INT 2
25075: EQUAL
25076: IFFALSE 25097
// begin Say ( Powell , DBack3-Pow-1 ) ;
25078: LD_EXP 17
25082: PPUSH
25083: LD_STRING DBack3-Pow-1
25085: PPUSH
25086: CALL_OW 88
// YouLost ( Dismissed ) ;
25090: LD_STRING Dismissed
25092: PPUSH
25093: CALL_OW 104
// end ; InGameOff ;
25097: CALL_OW 9
// end ;
25101: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25102: LD_INT 8
25104: PPUSH
25105: LD_INT 22
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 21
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 70
25133: PUSH
25134: LD_INT 0
25136: GREATER
25137: PUSH
25138: LD_EXP 17
25142: PPUSH
25143: CALL_OW 302
25147: AND
25148: PUSH
25149: LD_EXP 71
25153: PUSH
25154: LD_INT 0
25156: EQUAL
25157: AND
25158: IFFALSE 25282
25160: GO 25162
25162: DISABLE
// begin InGameOn ;
25163: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25167: LD_INT 22
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 21
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PPUSH
25191: CALL_OW 69
25195: PPUSH
25196: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25200: LD_INT 8
25202: PPUSH
25203: LD_INT 22
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 21
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 70
25231: PPUSH
25232: LD_INT 71
25234: PPUSH
25235: LD_INT 63
25237: PPUSH
25238: CALL_OW 111
// if powellWarm = 0 then
25242: LD_EXP 71
25246: PUSH
25247: LD_INT 0
25249: EQUAL
25250: IFFALSE 25278
// begin Say ( Powell , DBack1-Pow-1 ) ;
25252: LD_EXP 17
25256: PPUSH
25257: LD_STRING DBack1-Pow-1
25259: PPUSH
25260: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25264: LD_ADDR_EXP 71
25268: PUSH
25269: LD_EXP 71
25273: PUSH
25274: LD_INT 1
25276: PLUS
25277: ST_TO_ADDR
// end ; InGameOff ;
25278: CALL_OW 9
// end ;
25282: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25283: LD_INT 8
25285: PPUSH
25286: LD_INT 22
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 21
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PPUSH
25310: CALL_OW 70
25314: PUSH
25315: LD_INT 0
25317: GREATER
25318: PUSH
25319: LD_EXP 17
25323: PPUSH
25324: CALL_OW 302
25328: AND
25329: PUSH
25330: LD_EXP 71
25334: PUSH
25335: LD_INT 1
25337: EQUAL
25338: AND
25339: IFFALSE 25463
25341: GO 25343
25343: DISABLE
// begin InGameOn ;
25344: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25348: LD_INT 22
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: PPUSH
25377: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25381: LD_INT 8
25383: PPUSH
25384: LD_INT 22
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 21
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PPUSH
25408: CALL_OW 70
25412: PPUSH
25413: LD_INT 71
25415: PPUSH
25416: LD_INT 63
25418: PPUSH
25419: CALL_OW 111
// if powellWarm = 1 then
25423: LD_EXP 71
25427: PUSH
25428: LD_INT 1
25430: EQUAL
25431: IFFALSE 25459
// begin Say ( Powell , DBack2-Pow-1 ) ;
25433: LD_EXP 17
25437: PPUSH
25438: LD_STRING DBack2-Pow-1
25440: PPUSH
25441: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25445: LD_ADDR_EXP 71
25449: PUSH
25450: LD_EXP 71
25454: PUSH
25455: LD_INT 1
25457: PLUS
25458: ST_TO_ADDR
// end ; InGameOff ;
25459: CALL_OW 9
// end ;
25463: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25464: LD_INT 8
25466: PPUSH
25467: LD_INT 22
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 21
25479: PUSH
25480: LD_INT 1
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PPUSH
25491: CALL_OW 70
25495: PUSH
25496: LD_INT 0
25498: GREATER
25499: PUSH
25500: LD_EXP 17
25504: PPUSH
25505: CALL_OW 302
25509: AND
25510: PUSH
25511: LD_EXP 71
25515: PUSH
25516: LD_INT 2
25518: EQUAL
25519: AND
25520: IFFALSE 25637
25522: GO 25524
25524: DISABLE
// begin InGameOn ;
25525: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25529: LD_INT 22
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 21
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PPUSH
25553: CALL_OW 69
25557: PPUSH
25558: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25562: LD_INT 8
25564: PPUSH
25565: LD_INT 22
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 21
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PPUSH
25589: CALL_OW 70
25593: PPUSH
25594: LD_INT 71
25596: PPUSH
25597: LD_INT 63
25599: PPUSH
25600: CALL_OW 111
// if powellWarm = 2 then
25604: LD_EXP 71
25608: PUSH
25609: LD_INT 2
25611: EQUAL
25612: IFFALSE 25633
// begin Say ( Powell , DBack3-Pow-1 ) ;
25614: LD_EXP 17
25618: PPUSH
25619: LD_STRING DBack3-Pow-1
25621: PPUSH
25622: CALL_OW 88
// YouLost ( Dismissed ) ;
25626: LD_STRING Dismissed
25628: PPUSH
25629: CALL_OW 104
// end ; InGameOff ;
25633: CALL_OW 9
// end ;
25637: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25638: LD_EXP 69
25642: PUSH
25643: LD_INT 1
25645: EQUAL
25646: IFFALSE 25695
25648: GO 25650
25650: DISABLE
25651: LD_INT 0
25653: PPUSH
// begin enable ;
25654: ENABLE
// for i = 1 to amUnitsAttack do
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: DOUBLE
25661: LD_INT 1
25663: DEC
25664: ST_TO_ADDR
25665: LD_EXP 66
25669: PUSH
25670: FOR_TO
25671: IFFALSE 25693
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25673: LD_INT 8
25675: PPUSH
25676: LD_EXP 66
25680: PUSH
25681: LD_VAR 0 1
25685: ARRAY
25686: PPUSH
25687: CALL_OW 471
25691: GO 25670
25693: POP
25694: POP
// end ;
25695: PPOPN 1
25697: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25698: LD_INT 22
25700: PUSH
25701: LD_INT 4
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 21
25710: PUSH
25711: LD_INT 2
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 3
25720: PUSH
25721: LD_INT 58
25723: PUSH
25724: EMPTY
25725: LIST
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 69
25740: PUSH
25741: LD_INT 0
25743: EQUAL
25744: PUSH
25745: LD_EXP 69
25749: PUSH
25750: LD_INT 1
25752: EQUAL
25753: AND
25754: IFFALSE 25925
25756: GO 25758
25758: DISABLE
// begin powellAttacks = 2 ;
25759: LD_ADDR_EXP 69
25763: PUSH
25764: LD_INT 2
25766: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25767: LD_INT 85
25769: PPUSH
25770: LD_INT 3
25772: PPUSH
25773: LD_INT 3
25775: PPUSH
25776: LD_INT 1
25778: PPUSH
25779: LD_INT 5
25781: PUSH
25782: LD_INT 7
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: PPUSH
25792: LD_INT 2
25794: PPUSH
25795: CALL_OW 12
25799: ARRAY
25800: PPUSH
25801: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25805: LD_INT 85
25807: PPUSH
25808: LD_INT 3
25810: PPUSH
25811: LD_INT 3
25813: PPUSH
25814: LD_INT 1
25816: PPUSH
25817: LD_INT 5
25819: PUSH
25820: LD_INT 7
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: PPUSH
25830: LD_INT 2
25832: PPUSH
25833: CALL_OW 12
25837: ARRAY
25838: PPUSH
25839: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25843: LD_INT 85
25845: PPUSH
25846: LD_INT 3
25848: PPUSH
25849: LD_INT 3
25851: PPUSH
25852: LD_INT 1
25854: PPUSH
25855: LD_INT 5
25857: PUSH
25858: LD_INT 7
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: PPUSH
25868: LD_INT 2
25870: PPUSH
25871: CALL_OW 12
25875: ARRAY
25876: PPUSH
25877: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
25881: LD_INT 85
25883: PPUSH
25884: LD_INT 5
25886: PPUSH
25887: LD_INT 3
25889: PPUSH
25890: LD_INT 1
25892: PPUSH
25893: LD_INT 6
25895: PPUSH
25896: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
25900: LD_ADDR_EXP 73
25904: PUSH
25905: LD_INT 85
25907: PPUSH
25908: LD_INT 3
25910: PPUSH
25911: LD_INT 3
25913: PPUSH
25914: LD_INT 1
25916: PPUSH
25917: LD_INT 3
25919: PPUSH
25920: CALL_OW 185
25924: ST_TO_ADDR
// end ;
25925: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
25926: LD_INT 22
25928: PUSH
25929: LD_INT 4
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 21
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 3
25948: PUSH
25949: LD_INT 58
25951: PUSH
25952: EMPTY
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: LIST
25963: PPUSH
25964: CALL_OW 69
25968: PUSH
25969: LD_INT 5
25971: GREATEREQUAL
25972: PUSH
25973: LD_EXP 72
25977: PUSH
25978: LD_INT 1
25980: EQUAL
25981: AND
25982: IFFALSE 25995
25984: GO 25986
25986: DISABLE
// startAttacks = 0 ;
25987: LD_ADDR_EXP 72
25991: PUSH
25992: LD_INT 0
25994: ST_TO_ADDR
25995: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
25996: LD_INT 22
25998: PUSH
25999: LD_INT 4
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 21
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: LD_INT 58
26021: PUSH
26022: EMPTY
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: PUSH
26039: LD_INT 5
26041: GREATEREQUAL
26042: PUSH
26043: LD_INT 22
26045: PUSH
26046: LD_INT 6
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 21
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PPUSH
26067: CALL_OW 69
26071: PUSH
26072: LD_INT 0
26074: EQUAL
26075: AND
26076: PUSH
26077: LD_EXP 72
26081: PUSH
26082: LD_INT 0
26084: EQUAL
26085: AND
26086: PUSH
26087: LD_EXP 69
26091: PUSH
26092: LD_INT 2
26094: EQUAL
26095: AND
26096: IFFALSE 27031
26098: GO 26100
26100: DISABLE
26101: LD_INT 0
26103: PPUSH
26104: PPUSH
26105: PPUSH
26106: PPUSH
// begin powellAttacks = 3 ;
26107: LD_ADDR_EXP 69
26111: PUSH
26112: LD_INT 3
26114: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26115: LD_ADDR_VAR 0 1
26119: PUSH
26120: DOUBLE
26121: LD_INT 1
26123: DEC
26124: ST_TO_ADDR
26125: LD_EXP 66
26129: PUSH
26130: FOR_TO
26131: IFFALSE 26153
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26133: LD_INT 8
26135: PPUSH
26136: LD_EXP 66
26140: PUSH
26141: LD_VAR 0 1
26145: ARRAY
26146: PPUSH
26147: CALL_OW 472
26151: GO 26130
26153: POP
26154: POP
// wait ( 0 0$5 ) ;
26155: LD_INT 175
26157: PPUSH
26158: CALL_OW 67
// Video ( true ) ;
26162: LD_INT 1
26164: PPUSH
26165: CALL 6835 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26169: LD_INT 22
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PPUSH
26179: CALL_OW 69
26183: PPUSH
26184: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26188: LD_EXP 17
26192: PPUSH
26193: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26197: LD_EXP 17
26201: PPUSH
26202: LD_INT 45
26204: PPUSH
26205: LD_INT 64
26207: PPUSH
26208: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26212: LD_EXP 17
26216: PPUSH
26217: LD_INT 46
26219: PPUSH
26220: LD_INT 66
26222: PPUSH
26223: CALL_OW 178
// for i = 5 to 8 do
26227: LD_ADDR_VAR 0 1
26231: PUSH
26232: DOUBLE
26233: LD_INT 5
26235: DEC
26236: ST_TO_ADDR
26237: LD_INT 8
26239: PUSH
26240: FOR_TO
26241: IFFALSE 26387
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26243: LD_EXP 66
26247: PUSH
26248: LD_VAR 0 1
26252: ARRAY
26253: PPUSH
26254: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26258: LD_EXP 66
26262: PUSH
26263: LD_VAR 0 1
26267: ARRAY
26268: PPUSH
26269: CALL_OW 121
// wait ( 0 0$1 ) ;
26273: LD_INT 35
26275: PPUSH
26276: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26280: LD_EXP 66
26284: PUSH
26285: LD_VAR 0 1
26289: ARRAY
26290: PPUSH
26291: LD_INT 92
26293: PPUSH
26294: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26298: LD_EXP 66
26302: PUSH
26303: LD_VAR 0 1
26307: ARRAY
26308: PPUSH
26309: LD_INT 1
26311: PPUSH
26312: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26316: LD_EXP 66
26320: PUSH
26321: LD_VAR 0 1
26325: ARRAY
26326: PPUSH
26327: CALL_OW 182
// wait ( 0 0$1 ) ;
26331: LD_INT 35
26333: PPUSH
26334: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26338: LD_EXP 66
26342: PUSH
26343: LD_VAR 0 1
26347: ARRAY
26348: PPUSH
26349: LD_INT 43
26351: PUSH
26352: LD_VAR 0 1
26356: PLUS
26357: PPUSH
26358: LD_INT 66
26360: PPUSH
26361: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26365: LD_EXP 66
26369: PUSH
26370: LD_VAR 0 1
26374: ARRAY
26375: PPUSH
26376: LD_EXP 17
26380: PPUSH
26381: CALL_OW 179
// end ;
26385: GO 26240
26387: POP
26388: POP
// wait ( 0 0$10 ) ;
26389: LD_INT 350
26391: PPUSH
26392: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26396: LD_ADDR_VAR 0 3
26400: PUSH
26401: LD_INT 22
26403: PUSH
26404: LD_INT 4
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 21
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 56
26423: PUSH
26424: EMPTY
26425: LIST
26426: PUSH
26427: LD_INT 3
26429: PUSH
26430: LD_INT 60
26432: PUSH
26433: EMPTY
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: PPUSH
26446: CALL_OW 69
26450: PUSH
26451: LD_EXP 17
26455: PUSH
26456: EMPTY
26457: LIST
26458: DIFF
26459: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26460: LD_VAR 0 3
26464: PPUSH
26465: LD_INT 92
26467: PPUSH
26468: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
26472: LD_VAR 0 3
26476: PPUSH
26477: LD_INT 1
26479: PPUSH
26480: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
26484: LD_EXP 17
26488: PPUSH
26489: LD_STRING D5-Pow-1
26491: PPUSH
26492: CALL_OW 88
// for i = 1 to amUnitsAttack do
26496: LD_ADDR_VAR 0 1
26500: PUSH
26501: DOUBLE
26502: LD_INT 1
26504: DEC
26505: ST_TO_ADDR
26506: LD_EXP 66
26510: PUSH
26511: FOR_TO
26512: IFFALSE 26557
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26514: LD_EXP 66
26518: PUSH
26519: LD_VAR 0 1
26523: ARRAY
26524: PPUSH
26525: CALL_OW 258
26529: PUSH
26530: LD_INT 1
26532: EQUAL
26533: IFFALSE 26555
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26535: LD_EXP 66
26539: PUSH
26540: LD_VAR 0 1
26544: ARRAY
26545: PPUSH
26546: LD_STRING D5-Sol2-1
26548: PPUSH
26549: CALL_OW 88
// break ;
26553: GO 26557
// end ;
26555: GO 26511
26557: POP
26558: POP
// Say ( Powell , D5-Pow-2 ) ;
26559: LD_EXP 17
26563: PPUSH
26564: LD_STRING D5-Pow-2
26566: PPUSH
26567: CALL_OW 88
// for i = 1 to amUnitsAttack do
26571: LD_ADDR_VAR 0 1
26575: PUSH
26576: DOUBLE
26577: LD_INT 1
26579: DEC
26580: ST_TO_ADDR
26581: LD_EXP 66
26585: PUSH
26586: FOR_TO
26587: IFFALSE 26632
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26589: LD_EXP 66
26593: PUSH
26594: LD_VAR 0 1
26598: ARRAY
26599: PPUSH
26600: CALL_OW 258
26604: PUSH
26605: LD_INT 1
26607: EQUAL
26608: IFFALSE 26630
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26610: LD_EXP 66
26614: PUSH
26615: LD_VAR 0 1
26619: ARRAY
26620: PPUSH
26621: LD_STRING D5-Sol2-2
26623: PPUSH
26624: CALL_OW 88
// break ;
26628: GO 26632
// end ;
26630: GO 26586
26632: POP
26633: POP
// Say ( Powell , D5-Pow-3 ) ;
26634: LD_EXP 17
26638: PPUSH
26639: LD_STRING D5-Pow-3
26641: PPUSH
26642: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26646: LD_INT 22
26648: PUSH
26649: LD_INT 4
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 21
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 3
26668: PUSH
26669: LD_INT 58
26671: PUSH
26672: EMPTY
26673: LIST
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: PPUSH
26684: CALL_OW 69
26688: PPUSH
26689: LD_INT 59
26691: PPUSH
26692: LD_INT 21
26694: PPUSH
26695: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26699: LD_EXP 66
26703: PPUSH
26704: LD_INT 59
26706: PPUSH
26707: LD_INT 21
26709: PPUSH
26710: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
26714: LD_INT 61
26716: PPUSH
26717: LD_INT 35
26719: PPUSH
26720: CALL_OW 84
// wait ( 0 0$15 ) ;
26724: LD_INT 525
26726: PPUSH
26727: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
26731: LD_EXP 17
26735: PPUSH
26736: LD_STRING D5a-Pow-1
26738: PPUSH
26739: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
26743: LD_EXP 17
26747: PPUSH
26748: LD_STRING D5a-Pow-1a
26750: PPUSH
26751: CALL_OW 88
// wait ( 0 0$2 ) ;
26755: LD_INT 70
26757: PPUSH
26758: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
26762: LD_EXP 17
26766: PPUSH
26767: LD_STRING D5a-Pow-1b
26769: PPUSH
26770: CALL_OW 88
// wait ( 0 0$3 ) ;
26774: LD_INT 105
26776: PPUSH
26777: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
26781: LD_EXP 17
26785: PPUSH
26786: LD_STRING D5a-Pow-1c
26788: PPUSH
26789: CALL_OW 88
// wait ( 0 0$1 ) ;
26793: LD_INT 35
26795: PPUSH
26796: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
26800: LD_EXP 17
26804: PPUSH
26805: LD_STRING D5a-Pow-1d
26807: PPUSH
26808: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26812: LD_INT 35
26814: PPUSH
26815: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26819: LD_INT 22
26821: PUSH
26822: LD_INT 4
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 21
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: LD_INT 58
26844: PUSH
26845: EMPTY
26846: LIST
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: PPUSH
26857: CALL_OW 69
26861: PPUSH
26862: LD_INT 59
26864: PPUSH
26865: LD_INT 21
26867: PPUSH
26868: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26872: LD_EXP 66
26876: PPUSH
26877: LD_INT 59
26879: PPUSH
26880: LD_INT 21
26882: PPUSH
26883: CALL_OW 114
// until amUnitsAttack = [ ] ;
26887: LD_EXP 66
26891: PUSH
26892: EMPTY
26893: EQUAL
26894: IFFALSE 26812
// CenterNowOnUnits ( Powell ) ;
26896: LD_EXP 17
26900: PPUSH
26901: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
26905: LD_ADDR_VAR 0 3
26909: PUSH
26910: LD_INT 22
26912: PUSH
26913: LD_INT 4
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 21
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PPUSH
26934: CALL_OW 69
26938: PUSH
26939: LD_EXP 17
26943: PUSH
26944: EMPTY
26945: LIST
26946: DIFF
26947: ST_TO_ADDR
// for i in powellPeople do
26948: LD_ADDR_VAR 0 1
26952: PUSH
26953: LD_VAR 0 3
26957: PUSH
26958: FOR_IN
26959: IFFALSE 26988
// if GetSex ( i ) = sex_male then
26961: LD_VAR 0 1
26965: PPUSH
26966: CALL_OW 258
26970: PUSH
26971: LD_INT 1
26973: EQUAL
26974: IFFALSE 26986
// sold = i ;
26976: LD_ADDR_VAR 0 2
26980: PUSH
26981: LD_VAR 0 1
26985: ST_TO_ADDR
26986: GO 26958
26988: POP
26989: POP
// Say ( sold , D6-Sol3-1 ) ;
26990: LD_VAR 0 2
26994: PPUSH
26995: LD_STRING D6-Sol3-1
26997: PPUSH
26998: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27002: LD_EXP 17
27006: PPUSH
27007: LD_STRING D6-Pow-1
27009: PPUSH
27010: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27014: LD_INT 139
27016: PUSH
27017: LD_INT 138
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: LD_INT 12
27026: PPUSH
27027: CALL_OW 113
// end ;
27031: PPOPN 4
27033: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27034: LD_EXP 69
27038: PUSH
27039: LD_INT 3
27041: EQUAL
27042: PUSH
27043: LD_INT 12
27045: PPUSH
27046: LD_INT 22
27048: PUSH
27049: LD_INT 8
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 21
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PPUSH
27070: CALL_OW 70
27074: PUSH
27075: LD_INT 2
27077: EQUAL
27078: AND
27079: IFFALSE 27240
27081: GO 27083
27083: DISABLE
27084: LD_INT 0
27086: PPUSH
27087: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27088: LD_INT 8
27090: PPUSH
27091: LD_INT 1
27093: PPUSH
27094: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27098: LD_INT 4
27100: PPUSH
27101: LD_INT 8
27103: PPUSH
27104: LD_INT 1
27106: PPUSH
27107: LD_INT 1
27109: PPUSH
27110: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27114: LD_ADDR_VAR 0 1
27118: PUSH
27119: LD_INT 92
27121: PPUSH
27122: CALL_OW 313
27126: PUSH
27127: FOR_IN
27128: IFFALSE 27159
// if GetSex ( i ) = sex_male then
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL_OW 258
27139: PUSH
27140: LD_INT 1
27142: EQUAL
27143: IFFALSE 27157
// begin tmp = i ;
27145: LD_ADDR_VAR 0 2
27149: PUSH
27150: LD_VAR 0 1
27154: ST_TO_ADDR
// break ;
27155: GO 27159
// end ;
27157: GO 27127
27159: POP
27160: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27161: LD_INT 92
27163: PPUSH
27164: CALL_OW 313
27168: PPUSH
27169: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_STRING D6-Sol3-2
27180: PPUSH
27181: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27185: LD_INT 139
27187: PUSH
27188: LD_INT 138
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PPUSH
27195: LD_INT 85
27197: PPUSH
27198: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27202: LD_INT 4
27204: PPUSH
27205: LD_INT 8
27207: PPUSH
27208: LD_INT 2
27210: PPUSH
27211: LD_INT 1
27213: PPUSH
27214: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27218: LD_INT 8
27220: PPUSH
27221: LD_INT 8
27223: PPUSH
27224: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27228: LD_EXP 17
27232: PPUSH
27233: LD_STRING D6-Pow-2
27235: PPUSH
27236: CALL_OW 88
// end ;
27240: PPOPN 2
27242: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27243: LD_INT 85
27245: PPUSH
27246: CALL_OW 301
27250: IFFALSE 27714
27252: GO 27254
27254: DISABLE
27255: LD_INT 0
27257: PPUSH
27258: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27259: LD_INT 22
27261: PUSH
27262: LD_INT 8
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 21
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 33
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 34
27291: PUSH
27292: LD_INT 29
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 50
27301: PUSH
27302: EMPTY
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: PPUSH
27312: CALL_OW 69
27316: PUSH
27317: LD_INT 1
27319: EQUAL
27320: IFFALSE 27431
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27322: LD_INT 22
27324: PUSH
27325: LD_INT 8
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 21
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 33
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 34
27354: PUSH
27355: LD_INT 29
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 50
27364: PUSH
27365: EMPTY
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: PPUSH
27375: CALL_OW 69
27379: PPUSH
27380: LD_INT 34
27382: PPUSH
27383: LD_INT 22
27385: PUSH
27386: LD_INT 4
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 21
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 30
27405: PUSH
27406: LD_INT 32
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: PPUSH
27418: CALL_OW 70
27422: PUSH
27423: LD_INT 1
27425: ARRAY
27426: PPUSH
27427: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27431: LD_ADDR_VAR 0 1
27435: PUSH
27436: LD_INT 22
27438: PUSH
27439: LD_INT 4
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 21
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 56
27458: PUSH
27459: EMPTY
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 69
27471: PUSH
27472: LD_EXP 17
27476: PUSH
27477: EMPTY
27478: LIST
27479: DIFF
27480: PUSH
27481: FOR_IN
27482: IFFALSE 27513
// if GetSex ( i ) = sex_male then
27484: LD_VAR 0 1
27488: PPUSH
27489: CALL_OW 258
27493: PUSH
27494: LD_INT 1
27496: EQUAL
27497: IFFALSE 27511
// begin tmp = i ;
27499: LD_ADDR_VAR 0 2
27503: PUSH
27504: LD_VAR 0 1
27508: ST_TO_ADDR
// break ;
27509: GO 27513
// end ;
27511: GO 27481
27513: POP
27514: POP
// Say ( Powell , D6a-Pow-1 ) ;
27515: LD_EXP 17
27519: PPUSH
27520: LD_STRING D6a-Pow-1
27522: PPUSH
27523: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
27527: LD_VAR 0 2
27531: PPUSH
27532: LD_STRING D6a-Sol3-1
27534: PPUSH
27535: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
27539: LD_EXP 17
27543: PPUSH
27544: LD_VAR 0 2
27548: PPUSH
27549: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
27553: LD_EXP 17
27557: PPUSH
27558: LD_STRING D6a-Pow-2
27560: PPUSH
27561: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
27565: LD_VAR 0 2
27569: PPUSH
27570: LD_STRING D6a-Sol3-2
27572: PPUSH
27573: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
27577: LD_EXP 17
27581: PPUSH
27582: LD_STRING D6a-Pow-3
27584: PPUSH
27585: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
27589: LD_EXP 17
27593: PPUSH
27594: LD_EXP 73
27598: PPUSH
27599: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
27603: LD_INT 35
27605: PPUSH
27606: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
27610: LD_EXP 17
27614: PPUSH
27615: LD_EXP 73
27619: PPUSH
27620: CALL_OW 120
// until IsInUnit ( Powell ) ;
27624: LD_EXP 17
27628: PPUSH
27629: CALL_OW 310
27633: IFFALSE 27603
// wait ( 0 0$1 ) ;
27635: LD_INT 35
27637: PPUSH
27638: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
27642: LD_EXP 73
27646: PPUSH
27647: LD_INT 77
27649: PPUSH
27650: LD_INT 64
27652: PPUSH
27653: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
27657: LD_EXP 73
27661: PPUSH
27662: LD_INT 91
27664: PPUSH
27665: LD_INT 61
27667: PPUSH
27668: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
27672: LD_EXP 73
27676: PPUSH
27677: LD_INT 74
27679: PPUSH
27680: LD_INT 25
27682: PPUSH
27683: CALL_OW 171
// centerPowell = 1 ;
27687: LD_ADDR_EXP 74
27691: PUSH
27692: LD_INT 1
27694: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27695: LD_INT 525
27697: PPUSH
27698: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
27702: LD_EXP 17
27706: PPUSH
27707: LD_STRING D6b-Pow-1
27709: PPUSH
27710: CALL_OW 88
// end ;
27714: PPOPN 2
27716: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
27717: LD_EXP 73
27721: PPUSH
27722: LD_INT 13
27724: PPUSH
27725: CALL_OW 308
27729: PUSH
27730: LD_EXP 69
27734: PUSH
27735: LD_INT 3
27737: EQUAL
27738: AND
27739: IFFALSE 27881
27741: GO 27743
27743: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
27744: LD_EXP 73
27748: PPUSH
27749: LD_INT 250
27751: PPUSH
27752: CALL_OW 234
// DialogueOn ;
27756: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
27760: LD_EXP 17
27764: PPUSH
27765: LD_STRING D6b-Pow-1a
27767: PPUSH
27768: CALL_OW 88
// DialogueOff ;
27772: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27776: LD_EXP 17
27780: PPUSH
27781: LD_INT 22
27783: PUSH
27784: LD_INT 8
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 34
27793: PUSH
27794: LD_INT 29
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 50
27803: PUSH
27804: EMPTY
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: PPUSH
27812: CALL_OW 69
27816: PUSH
27817: LD_INT 1
27819: ARRAY
27820: PPUSH
27821: CALL_OW 120
// wait ( 0 0$1 ) ;
27825: LD_INT 35
27827: PPUSH
27828: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27832: LD_EXP 17
27836: PPUSH
27837: LD_INT 22
27839: PUSH
27840: LD_INT 8
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 34
27849: PUSH
27850: LD_INT 29
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 50
27859: PUSH
27860: EMPTY
27861: LIST
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: PPUSH
27868: CALL_OW 69
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PPUSH
27877: CALL_OW 120
// end ;
27881: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
27882: LD_INT 22
27884: PUSH
27885: LD_INT 4
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 34
27894: PUSH
27895: LD_INT 29
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PPUSH
27906: CALL_OW 69
27910: IFFALSE 28342
27912: GO 27914
27914: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
27915: LD_ADDR_EXP 75
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_INT 4
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 34
27932: PUSH
27933: LD_INT 29
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PPUSH
27944: CALL_OW 69
27948: PUSH
27949: LD_INT 1
27951: ARRAY
27952: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
27953: LD_INT 8
27955: PPUSH
27956: LD_INT 4
27958: PPUSH
27959: LD_INT 1
27961: PPUSH
27962: LD_INT 1
27964: PPUSH
27965: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
27969: LD_EXP 75
27973: PPUSH
27974: LD_INT 80
27976: PPUSH
27977: LD_INT 19
27979: PPUSH
27980: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
27984: LD_EXP 75
27988: PPUSH
27989: LD_INT 74
27991: PPUSH
27992: LD_INT 15
27994: PPUSH
27995: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
27999: LD_EXP 75
28003: PPUSH
28004: LD_INT 72
28006: PPUSH
28007: LD_INT 19
28009: PPUSH
28010: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28014: LD_EXP 75
28018: PPUSH
28019: LD_INT 78
28021: PPUSH
28022: LD_INT 24
28024: PPUSH
28025: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28029: LD_EXP 75
28033: PPUSH
28034: LD_INT 77
28036: PPUSH
28037: LD_INT 20
28039: PPUSH
28040: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28044: LD_EXP 75
28048: PPUSH
28049: LD_INT 74
28051: PPUSH
28052: LD_INT 15
28054: PPUSH
28055: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28059: LD_EXP 75
28063: PPUSH
28064: LD_INT 72
28066: PPUSH
28067: LD_INT 19
28069: PPUSH
28070: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28074: LD_EXP 75
28078: PPUSH
28079: LD_INT 78
28081: PPUSH
28082: LD_INT 24
28084: PPUSH
28085: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28089: LD_EXP 75
28093: PPUSH
28094: LD_INT 77
28096: PPUSH
28097: LD_INT 20
28099: PPUSH
28100: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28104: LD_EXP 75
28108: PPUSH
28109: LD_INT 78
28111: PPUSH
28112: LD_INT 15
28114: PPUSH
28115: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28119: LD_EXP 17
28123: PPUSH
28124: LD_STRING D6b-Pow-1b
28126: PPUSH
28127: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28131: LD_INT 22
28133: PUSH
28134: LD_INT 8
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 21
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 25
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 26
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 69
28181: PUSH
28182: LD_INT 1
28184: ARRAY
28185: PPUSH
28186: LD_STRING D6b-ArSol1-1
28188: PPUSH
28189: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28193: LD_INT 22
28195: PUSH
28196: LD_INT 8
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 21
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 25
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 26
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: PPUSH
28239: CALL_OW 69
28243: PUSH
28244: LD_INT 2
28246: ARRAY
28247: PPUSH
28248: LD_STRING D6b-ArSol2-1
28250: PPUSH
28251: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28255: LD_EXP 17
28259: PPUSH
28260: LD_STRING D6b-Pow-2
28262: PPUSH
28263: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28267: LD_INT 35
28269: PPUSH
28270: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28274: LD_EXP 75
28278: PPUSH
28279: LD_INT 78
28281: PPUSH
28282: LD_INT 15
28284: PPUSH
28285: CALL_OW 297
28289: PUSH
28290: LD_INT 2
28292: LESS
28293: IFFALSE 28267
// wait ( 0 0$1 ) ;
28295: LD_INT 35
28297: PPUSH
28298: CALL_OW 67
// DialogueOn ;
28302: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28306: LD_EXP 17
28310: PPUSH
28311: LD_STRING D6b-Pow-2a
28313: PPUSH
28314: CALL_OW 88
// DialogueOff ;
28318: CALL_OW 7
// centerPowell = 0 ;
28322: LD_ADDR_EXP 74
28326: PUSH
28327: LD_INT 0
28329: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28330: LD_EXP 75
28334: PPUSH
28335: LD_INT 105
28337: PPUSH
28338: CALL_OW 115
// end ;
28342: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28343: LD_INT 105
28345: PPUSH
28346: CALL_OW 301
28350: PUSH
28351: LD_EXP 69
28355: PUSH
28356: LD_INT 3
28358: EQUAL
28359: AND
28360: IFFALSE 29194
28362: GO 28364
28364: DISABLE
28365: LD_INT 0
28367: PPUSH
28368: PPUSH
28369: PPUSH
28370: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28371: LD_ADDR_VAR 0 2
28375: PUSH
28376: LD_INT 22
28378: PUSH
28379: LD_INT 4
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 21
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 26
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: PPUSH
28411: CALL_OW 69
28415: PUSH
28416: LD_EXP 1
28420: PUSH
28421: LD_EXP 3
28425: PUSH
28426: LD_EXP 21
28430: PUSH
28431: LD_EXP 22
28435: PUSH
28436: LD_EXP 23
28440: PUSH
28441: LD_EXP 4
28445: PUSH
28446: LD_EXP 5
28450: PUSH
28451: LD_EXP 6
28455: PUSH
28456: LD_EXP 7
28460: PUSH
28461: LD_EXP 8
28465: PUSH
28466: LD_EXP 9
28470: PUSH
28471: LD_EXP 10
28475: PUSH
28476: LD_EXP 11
28480: PUSH
28481: LD_EXP 12
28485: PUSH
28486: LD_EXP 13
28490: PUSH
28491: LD_EXP 14
28495: PUSH
28496: LD_EXP 15
28500: PUSH
28501: LD_EXP 17
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: DIFF
28526: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
28527: LD_INT 49
28529: PPUSH
28530: LD_INT 66
28532: PPUSH
28533: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
28537: LD_VAR 0 2
28541: PUSH
28542: LD_INT 1
28544: ARRAY
28545: PPUSH
28546: LD_STRING D6c-Sol3-1
28548: PPUSH
28549: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
28553: LD_EXP 1
28557: PPUSH
28558: LD_STRING D6c-JMM-1
28560: PPUSH
28561: CALL_OW 88
// if IsOk ( Cyrus ) then
28565: LD_EXP 7
28569: PPUSH
28570: CALL_OW 302
28574: IFFALSE 28588
// Say ( Cyrus , D6c-Cyrus-1 ) ;
28576: LD_EXP 7
28580: PPUSH
28581: LD_STRING D6c-Cyrus-1
28583: PPUSH
28584: CALL_OW 88
// if IsOk ( Bobby ) then
28588: LD_EXP 6
28592: PPUSH
28593: CALL_OW 302
28597: IFFALSE 28611
// Say ( Bobby , D6c-Bobby-1 ) ;
28599: LD_EXP 6
28603: PPUSH
28604: LD_STRING D6c-Bobby-1
28606: PPUSH
28607: CALL_OW 88
// if IsOk ( Cornel ) then
28611: LD_EXP 12
28615: PPUSH
28616: CALL_OW 302
28620: IFFALSE 28634
// Say ( Cornel , D6c-Corn-1 ) ;
28622: LD_EXP 12
28626: PPUSH
28627: LD_STRING D6c-Corn-1
28629: PPUSH
28630: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
28634: LD_VAR 0 2
28638: PUSH
28639: LD_INT 2
28641: ARRAY
28642: PPUSH
28643: LD_STRING D6c-Sol1-1
28645: PPUSH
28646: CALL_OW 88
// if IsOk ( Lisa ) then
28650: LD_EXP 4
28654: PPUSH
28655: CALL_OW 302
28659: IFFALSE 28673
// Say ( Lisa , D6c-Lisa-1 ) ;
28661: LD_EXP 4
28665: PPUSH
28666: LD_STRING D6c-Lisa-1
28668: PPUSH
28669: CALL_OW 88
// if IsOk ( Gary ) then
28673: LD_EXP 13
28677: PPUSH
28678: CALL_OW 302
28682: IFFALSE 28696
// Say ( Gary , D6c-Gary-1 ) ;
28684: LD_EXP 13
28688: PPUSH
28689: LD_STRING D6c-Gary-1
28691: PPUSH
28692: CALL_OW 88
// if IsOK ( Donaldson ) then
28696: LD_EXP 5
28700: PPUSH
28701: CALL_OW 302
28705: IFFALSE 28719
// Say ( Donaldson , D6c-Don-1 ) ;
28707: LD_EXP 5
28711: PPUSH
28712: LD_STRING D6c-Don-1
28714: PPUSH
28715: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
28719: LD_VAR 0 2
28723: PUSH
28724: LD_INT 3
28726: ARRAY
28727: PPUSH
28728: LD_STRING D6c-Sol2-1
28730: PPUSH
28731: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
28735: LD_INT 22
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 21
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PPUSH
28759: CALL_OW 69
28763: PPUSH
28764: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
28768: LD_INT 22
28770: PUSH
28771: LD_INT 4
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 21
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PPUSH
28792: CALL_OW 69
28796: PPUSH
28797: CALL_OW 122
// wait ( 0 0$1 ) ;
28801: LD_INT 35
28803: PPUSH
28804: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 22
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 21
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PPUSH
28837: CALL_OW 69
28841: PUSH
28842: LD_EXP 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: DIFF
28850: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
28851: LD_ADDR_VAR 0 4
28855: PUSH
28856: LD_INT 22
28858: PUSH
28859: LD_INT 4
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 21
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PPUSH
28880: CALL_OW 69
28884: ST_TO_ADDR
// for i := 1 to tmp2 do
28885: LD_ADDR_VAR 0 1
28889: PUSH
28890: DOUBLE
28891: LD_INT 1
28893: DEC
28894: ST_TO_ADDR
28895: LD_VAR 0 4
28899: PUSH
28900: FOR_TO
28901: IFFALSE 28952
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
28903: LD_VAR 0 4
28907: PUSH
28908: LD_VAR 0 1
28912: ARRAY
28913: PPUSH
28914: LD_INT 43
28916: PUSH
28917: LD_VAR 0 1
28921: PLUS
28922: PPUSH
28923: LD_INT 64
28925: PPUSH
28926: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
28930: LD_VAR 0 4
28934: PUSH
28935: LD_VAR 0 1
28939: ARRAY
28940: PPUSH
28941: LD_EXP 1
28945: PPUSH
28946: CALL_OW 179
// end ;
28950: GO 28900
28952: POP
28953: POP
// for i := 1 to tmp1 do
28954: LD_ADDR_VAR 0 1
28958: PUSH
28959: DOUBLE
28960: LD_INT 1
28962: DEC
28963: ST_TO_ADDR
28964: LD_VAR 0 3
28968: PUSH
28969: FOR_TO
28970: IFFALSE 29021
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
28972: LD_VAR 0 3
28976: PUSH
28977: LD_VAR 0 1
28981: ARRAY
28982: PPUSH
28983: LD_INT 43
28985: PUSH
28986: LD_VAR 0 1
28990: PLUS
28991: PPUSH
28992: LD_INT 65
28994: PPUSH
28995: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
28999: LD_VAR 0 3
29003: PUSH
29004: LD_VAR 0 1
29008: ARRAY
29009: PPUSH
29010: LD_EXP 1
29014: PPUSH
29015: CALL_OW 179
// end ;
29019: GO 28969
29021: POP
29022: POP
// repeat wait ( 0 0$1 ) ;
29023: LD_INT 35
29025: PPUSH
29026: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29030: LD_EXP 1
29034: PPUSH
29035: LD_INT 48
29037: PPUSH
29038: LD_INT 68
29040: PPUSH
29041: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29045: LD_EXP 1
29049: PPUSH
29050: LD_INT 48
29052: PPUSH
29053: LD_INT 68
29055: PPUSH
29056: CALL_OW 297
29060: PUSH
29061: LD_INT 2
29063: LESS
29064: IFFALSE 29023
// AddComTurnXY ( JMM , 47 , 65 ) ;
29066: LD_EXP 1
29070: PPUSH
29071: LD_INT 47
29073: PPUSH
29074: LD_INT 65
29076: PPUSH
29077: CALL_OW 178
// wait ( 0 0$2 ) ;
29081: LD_INT 70
29083: PPUSH
29084: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29088: LD_VAR 0 2
29092: PUSH
29093: LD_INT 1
29095: ARRAY
29096: PPUSH
29097: LD_STRING D6c-Sol3-2
29099: PPUSH
29100: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29104: LD_EXP 1
29108: PPUSH
29109: LD_STRING D6c-JMM-2
29111: PPUSH
29112: CALL_OW 88
// Video ( false ) ;
29116: LD_INT 0
29118: PPUSH
29119: CALL 6835 0 1
// centerPowell = 0 ;
29123: LD_ADDR_EXP 74
29127: PUSH
29128: LD_INT 0
29130: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29131: LD_INT 22
29133: PUSH
29134: LD_INT 4
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 69
29145: PPUSH
29146: LD_INT 1
29148: PPUSH
29149: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29153: LD_STRING M2
29155: PPUSH
29156: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29160: LD_INT 4
29162: PPUSH
29163: LD_INT 4
29165: PPUSH
29166: CALL_OW 343
// timerStatus = 1 ;
29170: LD_ADDR_EXP 96
29174: PUSH
29175: LD_INT 1
29177: ST_TO_ADDR
// missionStage = 1 ;
29178: LD_ADDR_EXP 101
29182: PUSH
29183: LD_INT 1
29185: ST_TO_ADDR
// startAttacks = 1 ;
29186: LD_ADDR_EXP 72
29190: PUSH
29191: LD_INT 1
29193: ST_TO_ADDR
// end ;
29194: PPOPN 4
29196: END
// every 0 0$1 trigger centerPowell = 1 do
29197: LD_EXP 74
29201: PUSH
29202: LD_INT 1
29204: EQUAL
29205: IFFALSE 29488
29207: GO 29209
29209: DISABLE
// begin enable ;
29210: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29211: LD_EXP 17
29215: PUSH
29216: LD_EXP 75
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PPUSH
29225: LD_INT 1000
29227: PPUSH
29228: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29232: LD_INT 22
29234: PUSH
29235: LD_INT 4
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 34
29244: PUSH
29245: LD_INT 29
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 33
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: PPUSH
29267: CALL_OW 69
29271: PUSH
29272: LD_INT 0
29274: GREATER
29275: IFFALSE 29328
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29277: LD_INT 22
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 34
29289: PUSH
29290: LD_INT 29
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 33
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: PPUSH
29312: CALL_OW 69
29316: PUSH
29317: LD_INT 1
29319: ARRAY
29320: PPUSH
29321: LD_INT 1000
29323: PPUSH
29324: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29328: LD_INT 22
29330: PUSH
29331: LD_INT 8
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 34
29340: PUSH
29341: LD_INT 29
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 33
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 69
29367: PUSH
29368: LD_INT 0
29370: GREATER
29371: IFFALSE 29424
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29373: LD_INT 22
29375: PUSH
29376: LD_INT 8
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 34
29385: PUSH
29386: LD_INT 29
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 33
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: LIST
29407: PPUSH
29408: CALL_OW 69
29412: PUSH
29413: LD_INT 1
29415: ARRAY
29416: PPUSH
29417: LD_INT 1000
29419: PPUSH
29420: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29424: LD_EXP 73
29428: PPUSH
29429: LD_INT 13
29431: PPUSH
29432: CALL_OW 308
29436: NOT
29437: IFFALSE 29451
// SetLives ( powellVeh , 1000 ) ;
29439: LD_EXP 73
29443: PPUSH
29444: LD_INT 1000
29446: PPUSH
29447: CALL_OW 234
// if not IsInUnit ( Powell ) then
29451: LD_EXP 17
29455: PPUSH
29456: CALL_OW 310
29460: NOT
29461: IFFALSE 29474
// CenterNowOnUnits ( Powell ) else
29463: LD_EXP 17
29467: PPUSH
29468: CALL_OW 87
29472: GO 29488
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
29474: LD_EXP 17
29478: PPUSH
29479: CALL_OW 310
29483: PPUSH
29484: CALL_OW 87
// end ;
29488: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
29489: LD_EXP 97
29493: PUSH
29494: LD_INT 560
29496: GREATEREQUAL
29497: IFFALSE 29709
29499: GO 29501
29501: DISABLE
// begin DialogueOn ;
29502: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
29506: LD_EXP 53
29510: PPUSH
29511: LD_STRING D7-Friend-1
29513: PPUSH
29514: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
29518: LD_EXP 1
29522: PPUSH
29523: LD_STRING D7-JMM-1
29525: PPUSH
29526: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
29530: LD_EXP 53
29534: PPUSH
29535: LD_STRING D7-Friend-2
29537: PPUSH
29538: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
29542: LD_EXP 1
29546: PPUSH
29547: LD_STRING D7-JMM-2
29549: PPUSH
29550: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
29554: LD_EXP 53
29558: PPUSH
29559: LD_STRING D7-Friend-3
29561: PPUSH
29562: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
29566: LD_EXP 1
29570: PPUSH
29571: LD_STRING D7-JMM-3
29573: PPUSH
29574: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
29578: LD_EXP 53
29582: PPUSH
29583: LD_STRING D7-Friend-4
29585: PPUSH
29586: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
29590: LD_EXP 1
29594: PPUSH
29595: LD_STRING D7-JMM-4
29597: PPUSH
29598: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
29602: LD_EXP 53
29606: PPUSH
29607: LD_STRING D7-Friend-5
29609: PPUSH
29610: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
29614: LD_EXP 1
29618: PPUSH
29619: LD_STRING D7-JMM-5
29621: PPUSH
29622: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
29626: LD_EXP 53
29630: PPUSH
29631: LD_STRING D7-Friend-6
29633: PPUSH
29634: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
29638: LD_EXP 1
29642: PPUSH
29643: LD_STRING D7-JMM-6
29645: PPUSH
29646: CALL_OW 88
// DialogueOff ;
29650: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
29654: LD_EXP 36
29658: PPUSH
29659: LD_INT 15
29661: PPUSH
29662: LD_INT 0
29664: PPUSH
29665: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
29669: LD_EXP 36
29673: PPUSH
29674: LD_INT 2
29676: PPUSH
29677: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29681: LD_EXP 36
29685: PPUSH
29686: LD_INT 2
29688: PPUSH
29689: LD_INT 78
29691: PPUSH
29692: LD_INT 12
29694: PPUSH
29695: LD_INT 3
29697: PPUSH
29698: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
29702: LD_STRING Mlegion
29704: PPUSH
29705: CALL_OW 337
// end ;
29709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
29710: LD_INT 22
29712: PUSH
29713: LD_INT 8
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 21
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 23
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: PPUSH
29745: CALL_OW 69
29749: PUSH
29750: LD_INT 6
29752: PUSH
29753: LD_INT 5
29755: PUSH
29756: LD_INT 4
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: PUSH
29764: LD_OWVAR 67
29768: ARRAY
29769: LESSEQUAL
29770: IFFALSE 30084
29772: GO 29774
29774: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
29775: LD_EXP 30
29779: PPUSH
29780: LD_INT 19
29782: PPUSH
29783: LD_INT 0
29785: PPUSH
29786: CALL_OW 49
// KillUnit ( Kozlov ) ;
29790: LD_EXP 36
29794: PPUSH
29795: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
29799: LD_INT 22
29801: PUSH
29802: LD_INT 8
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 21
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 23
29821: PUSH
29822: LD_INT 3
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 30
29831: PUSH
29832: LD_INT 3
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: PPUSH
29845: CALL_OW 69
29849: PUSH
29850: LD_INT 1
29852: ARRAY
29853: PPUSH
29854: CALL_OW 66
// DialogueOn ;
29858: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
29862: LD_EXP 1
29866: PPUSH
29867: LD_STRING D13-JMM-1
29869: PPUSH
29870: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
29874: LD_EXP 30
29878: PPUSH
29879: LD_STRING D13-Kurt-1
29881: PPUSH
29882: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
29886: LD_EXP 1
29890: PPUSH
29891: LD_STRING D13-JMM-2
29893: PPUSH
29894: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
29898: LD_EXP 30
29902: PPUSH
29903: LD_STRING D13-Kurt-2a
29905: PPUSH
29906: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
29910: LD_EXP 1
29914: PPUSH
29915: LD_STRING D13-JMM-3
29917: PPUSH
29918: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
29922: LD_EXP 30
29926: PPUSH
29927: LD_STRING D13-Kurt-3
29929: PPUSH
29930: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
29934: LD_EXP 1
29938: PPUSH
29939: LD_STRING D13-JMM-4
29941: PPUSH
29942: CALL_OW 88
// DialogueOff ;
29946: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
29950: LD_INT 22
29952: PUSH
29953: LD_INT 8
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 50
29962: PUSH
29963: EMPTY
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PPUSH
29970: CALL_OW 69
29974: PPUSH
29975: LD_INT 1
29977: PPUSH
29978: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
29982: LD_INT 22
29984: PUSH
29985: LD_INT 8
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: LD_INT 24
29997: PUSH
29998: LD_INT 250
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 69
30017: PPUSH
30018: LD_INT 0
30020: PPUSH
30021: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30025: LD_STRING MlegionOut
30027: PPUSH
30028: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30032: LD_INT 8
30034: PPUSH
30035: LD_INT 1
30037: PPUSH
30038: LD_INT 1
30040: PPUSH
30041: LD_INT 1
30043: PPUSH
30044: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30048: LD_EXP 53
30052: PPUSH
30053: LD_INT 30
30055: PPUSH
30056: LD_INT 0
30058: PPUSH
30059: CALL_OW 49
// wait ( 0 0$1 ) ;
30063: LD_INT 35
30065: PPUSH
30066: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30070: LD_EXP 53
30074: PPUSH
30075: LD_EXP 1
30079: PPUSH
30080: CALL_OW 112
// end ;
30084: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30085: LD_INT 1
30087: PPUSH
30088: LD_EXP 53
30092: PPUSH
30093: CALL_OW 292
30097: IFFALSE 30373
30099: GO 30101
30101: DISABLE
30102: LD_INT 0
30104: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30105: LD_EXP 53
30109: PPUSH
30110: CALL_OW 87
// DialogueOn ;
30114: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30118: LD_EXP 1
30122: PPUSH
30123: LD_STRING D14-JMM-1
30125: PPUSH
30126: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30130: LD_EXP 53
30134: PPUSH
30135: LD_STRING D14-Friend-1
30137: PPUSH
30138: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30142: LD_EXP 1
30146: PPUSH
30147: LD_STRING D14-JMM-2
30149: PPUSH
30150: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30154: LD_EXP 53
30158: PPUSH
30159: LD_STRING D14-Friend-2
30161: PPUSH
30162: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30166: LD_EXP 1
30170: PPUSH
30171: LD_STRING D14-JMM-3
30173: PPUSH
30174: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30178: LD_EXP 53
30182: PPUSH
30183: LD_STRING D14-Friend-3
30185: PPUSH
30186: CALL_OW 88
// DialogueOff ;
30190: CALL_OW 7
// dec = Query ( Q14 ) ;
30194: LD_ADDR_VAR 0 1
30198: PUSH
30199: LD_STRING Q14
30201: PPUSH
30202: CALL_OW 97
30206: ST_TO_ADDR
// if dec = 1 then
30207: LD_VAR 0 1
30211: PUSH
30212: LD_INT 1
30214: EQUAL
30215: IFFALSE 30249
// begin DialogueOn ;
30217: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30221: LD_EXP 1
30225: PPUSH
30226: LD_STRING D14a-JMM-1
30228: PPUSH
30229: CALL_OW 88
// DialogueOff ;
30233: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30237: LD_EXP 53
30241: PPUSH
30242: LD_INT 1
30244: PPUSH
30245: CALL_OW 235
// end ; if dec = 2 then
30249: LD_VAR 0 1
30253: PUSH
30254: LD_INT 2
30256: EQUAL
30257: IFFALSE 30291
// begin DialogueOn ;
30259: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30263: LD_EXP 1
30267: PPUSH
30268: LD_STRING D14b-JMM-1
30270: PPUSH
30271: CALL_OW 88
// DialogueOff ;
30275: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30279: LD_EXP 53
30283: PPUSH
30284: LD_INT 18
30286: PPUSH
30287: CALL_OW 113
// end ; if dec = 3 then
30291: LD_VAR 0 1
30295: PUSH
30296: LD_INT 3
30298: EQUAL
30299: IFFALSE 30373
// begin DialogueOn ;
30301: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30305: LD_EXP 1
30309: PPUSH
30310: LD_STRING D14c-JMM-1
30312: PPUSH
30313: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30317: LD_EXP 53
30321: PPUSH
30322: LD_STRING D14c-Friend-1
30324: PPUSH
30325: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30329: LD_EXP 1
30333: PPUSH
30334: LD_STRING D14c-JMM-2
30336: PPUSH
30337: CALL_OW 88
// DialogueOff ;
30341: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30345: LD_INT 8
30347: PPUSH
30348: LD_INT 1
30350: PPUSH
30351: LD_INT 2
30353: PPUSH
30354: LD_INT 1
30356: PPUSH
30357: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30361: LD_EXP 53
30365: PPUSH
30366: LD_INT 18
30368: PPUSH
30369: CALL_OW 113
// end ; end ;
30373: PPOPN 1
30375: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30376: LD_EXP 53
30380: PPUSH
30381: LD_INT 18
30383: PPUSH
30384: CALL_OW 308
30388: PUSH
30389: LD_EXP 53
30393: PPUSH
30394: CALL_OW 255
30398: PUSH
30399: LD_INT 8
30401: EQUAL
30402: AND
30403: IFFALSE 30417
30405: GO 30407
30407: DISABLE
// RemoveUnit ( LegionFriend ) ;
30408: LD_EXP 53
30412: PPUSH
30413: CALL_OW 64
30417: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30418: LD_EXP 97
30422: PUSH
30423: LD_INT 31570
30425: GREATEREQUAL
30426: IFFALSE 30502
30428: GO 30430
30430: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30431: LD_EXP 81
30435: PUSH
30436: LD_INT 1
30438: EQUAL
30439: PUSH
30440: LD_EXP 79
30444: PUSH
30445: EMPTY
30446: EQUAL
30447: AND
30448: IFFALSE 30454
// PrepareSupportFromKappa ;
30450: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
30454: LD_EXP 81
30458: PUSH
30459: LD_INT 0
30461: EQUAL
30462: PUSH
30463: LD_EXP 82
30467: PUSH
30468: LD_INT 1
30470: EQUAL
30471: AND
30472: IFFALSE 30478
// PrepareAttackFromKappa ;
30474: CALL 5219 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
30478: LD_EXP 81
30482: PUSH
30483: LD_INT 0
30485: EQUAL
30486: PUSH
30487: LD_EXP 82
30491: PUSH
30492: LD_INT 0
30494: EQUAL
30495: AND
30496: IFFALSE 30502
// PrepareAttackFromKappa ;
30498: CALL 5219 0 0
// end ;
30502: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
30503: LD_INT 1
30505: PPUSH
30506: LD_EXP 35
30510: PPUSH
30511: CALL_OW 292
30515: IFFALSE 30783
30517: GO 30519
30519: DISABLE
// begin missionStage = 2 ;
30520: LD_ADDR_EXP 101
30524: PUSH
30525: LD_INT 2
30527: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
30528: LD_EXP 35
30532: PPUSH
30533: CALL_OW 87
// DialogueOn ;
30537: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30541: LD_EXP 1
30545: PPUSH
30546: LD_STRING D10nB-JMM-1
30548: PPUSH
30549: CALL_OW 88
// if BurlakStatus = 1 then
30553: LD_EXP 76
30557: PUSH
30558: LD_INT 1
30560: EQUAL
30561: IFFALSE 30575
// Say ( Vsevolod , D10nB-Vse-1a ) ;
30563: LD_EXP 34
30567: PPUSH
30568: LD_STRING D10nB-Vse-1a
30570: PPUSH
30571: CALL_OW 88
// if BurlakStatus = 0 then
30575: LD_EXP 76
30579: PUSH
30580: LD_INT 0
30582: EQUAL
30583: IFFALSE 30597
// Say ( Vsevolod , D10nB-Vse-1 ) ;
30585: LD_EXP 34
30589: PPUSH
30590: LD_STRING D10nB-Vse-1
30592: PPUSH
30593: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
30597: LD_EXP 1
30601: PPUSH
30602: LD_STRING D10nB-JMM-2
30604: PPUSH
30605: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
30609: LD_EXP 81
30613: PUSH
30614: LD_EXP 82
30618: PUSH
30619: LD_INT 1
30621: EQUAL
30622: AND
30623: IFFALSE 30637
// Say ( Vsevolod , D10nB-Vse-5 ) ;
30625: LD_EXP 34
30629: PPUSH
30630: LD_STRING D10nB-Vse-5
30632: PPUSH
30633: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
30637: LD_EXP 81
30641: PUSH
30642: LD_EXP 82
30646: PUSH
30647: LD_INT 0
30649: EQUAL
30650: AND
30651: IFFALSE 30779
// begin if JMMGirl = 1 then
30653: LD_EXP 80
30657: PUSH
30658: LD_INT 1
30660: EQUAL
30661: IFFALSE 30711
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
30663: LD_EXP 34
30667: PPUSH
30668: LD_STRING D10nB-Vse-2
30670: PPUSH
30671: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30675: LD_EXP 1
30679: PPUSH
30680: LD_STRING D10nB-JMM-3
30682: PPUSH
30683: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30687: LD_EXP 34
30691: PPUSH
30692: LD_STRING D10nB-Vse-3
30694: PPUSH
30695: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
30699: LD_EXP 1
30703: PPUSH
30704: LD_STRING D10nB-JMM-4
30706: PPUSH
30707: CALL_OW 88
// end ; if JMMGirl = 2 then
30711: LD_EXP 80
30715: PUSH
30716: LD_INT 2
30718: EQUAL
30719: IFFALSE 30745
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
30721: LD_EXP 34
30725: PPUSH
30726: LD_STRING D10nB-Vse-4
30728: PPUSH
30729: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
30733: LD_EXP 1
30737: PPUSH
30738: LD_STRING D10nB-JMM-5
30740: PPUSH
30741: CALL_OW 88
// end ; if JMMGirl = 3 then
30745: LD_EXP 80
30749: PUSH
30750: LD_INT 3
30752: EQUAL
30753: IFFALSE 30779
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
30755: LD_EXP 34
30759: PPUSH
30760: LD_STRING D10nB-Vse-5
30762: PPUSH
30763: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
30767: LD_EXP 1
30771: PPUSH
30772: LD_STRING D10nB-JMM-6
30774: PPUSH
30775: CALL_OW 88
// end ; end ; DialogueOff ;
30779: CALL_OW 7
// end ;
30783: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
30784: LD_EXP 97
30788: PUSH
30789: LD_INT 63070
30791: GREATEREQUAL
30792: IFFALSE 31070
30794: GO 30796
30796: DISABLE
// begin PrepareOmegaTeam ;
30797: CALL 2789 0 0
// missionStage = 3 ;
30801: LD_ADDR_EXP 101
30805: PUSH
30806: LD_INT 3
30808: ST_TO_ADDR
// DialogueOn ;
30809: CALL_OW 6
// if StevensStatus = 1 then
30813: LD_EXP 77
30817: PUSH
30818: LD_INT 1
30820: EQUAL
30821: IFFALSE 30933
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
30823: LD_EXP 3
30827: PPUSH
30828: CALL_OW 310
30832: PPUSH
30833: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
30837: LD_EXP 3
30841: PPUSH
30842: LD_STRING D8-Huck-1
30844: PPUSH
30845: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
30849: LD_EXP 1
30853: PPUSH
30854: LD_STRING D8-JMM-1
30856: PPUSH
30857: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
30861: LD_EXP 3
30865: PPUSH
30866: LD_STRING D8-Huck-2
30868: PPUSH
30869: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30873: LD_EXP 1
30877: PPUSH
30878: LD_STRING D8-JMM-2
30880: PPUSH
30881: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
30885: LD_EXP 3
30889: PPUSH
30890: LD_STRING D8-Huck-3
30892: PPUSH
30893: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30897: LD_EXP 1
30901: PPUSH
30902: LD_STRING D8-JMM-3
30904: PPUSH
30905: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
30909: LD_EXP 3
30913: PPUSH
30914: LD_STRING D8-Huck-4
30916: PPUSH
30917: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30921: LD_EXP 1
30925: PPUSH
30926: LD_STRING D8-JMM-4
30928: PPUSH
30929: CALL_OW 88
// end ; if StevensStatus = 0 then
30933: LD_EXP 77
30937: PUSH
30938: LD_INT 0
30940: EQUAL
30941: IFFALSE 31053
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
30943: LD_EXP 21
30947: PPUSH
30948: CALL_OW 310
30952: PPUSH
30953: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
30957: LD_EXP 21
30961: PPUSH
30962: LD_STRING D8-Huck-1
30964: PPUSH
30965: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
30969: LD_EXP 1
30973: PPUSH
30974: LD_STRING D8-JMM-1a
30976: PPUSH
30977: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
30981: LD_EXP 21
30985: PPUSH
30986: LD_STRING D8-Huck-2
30988: PPUSH
30989: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30993: LD_EXP 1
30997: PPUSH
30998: LD_STRING D8-JMM-2
31000: PPUSH
31001: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
31005: LD_EXP 21
31009: PPUSH
31010: LD_STRING D8-Huck-3
31012: PPUSH
31013: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
31017: LD_EXP 1
31021: PPUSH
31022: LD_STRING D8-JMM-3
31024: PPUSH
31025: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
31029: LD_EXP 21
31033: PPUSH
31034: LD_STRING D8-Huck-4
31036: PPUSH
31037: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
31041: LD_EXP 1
31045: PPUSH
31046: LD_STRING D8-JMM-4
31048: PPUSH
31049: CALL_OW 88
// end ; DialogueOff ;
31053: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31057: LD_INT 25
31059: PPUSH
31060: LD_INT 1
31062: PPUSH
31063: LD_INT 1
31065: PPUSH
31066: CALL_OW 322
// end ;
31070: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31071: LD_EXP 97
31075: PUSH
31076: LD_INT 73570
31078: GREATEREQUAL
31079: IFFALSE 31429
31081: GO 31083
31083: DISABLE
31084: LD_INT 0
31086: PPUSH
// begin missionStage = 4 ;
31087: LD_ADDR_EXP 101
31091: PUSH
31092: LD_INT 4
31094: ST_TO_ADDR
// DialogueOn ;
31095: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31099: LD_EXP 28
31103: PPUSH
31104: LD_STRING D9-Roth-1
31106: PPUSH
31107: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31111: LD_EXP 1
31115: PPUSH
31116: LD_STRING D9-JMM-1
31118: PPUSH
31119: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31123: LD_EXP 28
31127: PPUSH
31128: LD_STRING D9-Roth-2
31130: PPUSH
31131: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31135: LD_EXP 28
31139: PPUSH
31140: LD_STRING D9-Roth-2a
31142: PPUSH
31143: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31147: LD_EXP 26
31151: PPUSH
31152: LD_STRING D9-Pla-2
31154: PPUSH
31155: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31159: LD_EXP 28
31163: PPUSH
31164: LD_STRING D9-Roth-3
31166: PPUSH
31167: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31171: LD_EXP 26
31175: PPUSH
31176: LD_STRING D9-Pla-3
31178: PPUSH
31179: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31183: LD_EXP 28
31187: PPUSH
31188: LD_STRING D9-Roth-4
31190: PPUSH
31191: CALL_OW 94
// dec = Query ( Q9 ) ;
31195: LD_ADDR_VAR 0 1
31199: PUSH
31200: LD_STRING Q9
31202: PPUSH
31203: CALL_OW 97
31207: ST_TO_ADDR
// if dec = 1 then
31208: LD_VAR 0 1
31212: PUSH
31213: LD_INT 1
31215: EQUAL
31216: IFFALSE 31230
// SayRadio ( Roth , D9a-Roth-1 ) ;
31218: LD_EXP 28
31222: PPUSH
31223: LD_STRING D9a-Roth-1
31225: PPUSH
31226: CALL_OW 94
// if dec = 2 then
31230: LD_VAR 0 1
31234: PUSH
31235: LD_INT 2
31237: EQUAL
31238: IFFALSE 31264
// begin Say ( JMM , D9b-JMM-1 ) ;
31240: LD_EXP 1
31244: PPUSH
31245: LD_STRING D9b-JMM-1
31247: PPUSH
31248: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31252: LD_EXP 28
31256: PPUSH
31257: LD_STRING D9b-Roth-1
31259: PPUSH
31260: CALL_OW 94
// end ; if dec = 3 then
31264: LD_VAR 0 1
31268: PUSH
31269: LD_INT 3
31271: EQUAL
31272: IFFALSE 31334
// begin Say ( JMM , D9c-JMM-1 ) ;
31274: LD_EXP 1
31278: PPUSH
31279: LD_STRING D9c-JMM-1
31281: PPUSH
31282: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31286: LD_EXP 28
31290: PPUSH
31291: LD_STRING D9c-Roth-1
31293: PPUSH
31294: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31298: LD_EXP 1
31302: PPUSH
31303: LD_STRING D9c-JMM-2
31305: PPUSH
31306: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31310: LD_EXP 28
31314: PPUSH
31315: LD_STRING D9c-Roth-2
31317: PPUSH
31318: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31322: LD_EXP 1
31326: PPUSH
31327: LD_STRING D9c-JMM-3
31329: PPUSH
31330: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31334: LD_EXP 28
31338: PPUSH
31339: LD_STRING D9c-Roth-3
31341: PPUSH
31342: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31346: LD_EXP 28
31350: PPUSH
31351: LD_STRING D9cont-Roth-1
31353: PPUSH
31354: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31358: LD_EXP 1
31362: PPUSH
31363: LD_STRING D9cont-JMM-1
31365: PPUSH
31366: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31370: LD_EXP 28
31374: PPUSH
31375: LD_STRING D9cont-Roth-2
31377: PPUSH
31378: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31382: LD_EXP 1
31386: PPUSH
31387: LD_STRING D9cont-JMM-2
31389: PPUSH
31390: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31394: LD_EXP 28
31398: PPUSH
31399: LD_STRING D9cont-Roth-3
31401: PPUSH
31402: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31406: LD_EXP 1
31410: PPUSH
31411: LD_STRING D9cont-JMM-3
31413: PPUSH
31414: CALL_OW 88
// DialogueOff ;
31418: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31422: LD_STRING M3
31424: PPUSH
31425: CALL_OW 337
// end ;
31429: PPOPN 1
31431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
31432: LD_INT 22
31434: PUSH
31435: LD_INT 7
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 21
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PPUSH
31456: CALL_OW 69
31460: PUSH
31461: LD_INT 20
31463: PUSH
31464: LD_INT 18
31466: PUSH
31467: LD_INT 15
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: PUSH
31475: LD_OWVAR 67
31479: ARRAY
31480: LESSEQUAL
31481: IFFALSE 31967
31483: GO 31485
31485: DISABLE
31486: LD_INT 0
31488: PPUSH
31489: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
31490: LD_ADDR_VAR 0 1
31494: PUSH
31495: LD_INT 22
31497: PUSH
31498: LD_INT 7
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 21
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 23
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 24
31527: PUSH
31528: LD_INT 900
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: PPUSH
31541: CALL_OW 69
31545: PUSH
31546: FOR_IN
31547: IFFALSE 31578
// if GetSex ( i ) = sex_male then
31549: LD_VAR 0 1
31553: PPUSH
31554: CALL_OW 258
31558: PUSH
31559: LD_INT 1
31561: EQUAL
31562: IFFALSE 31576
// begin tmp = i ;
31564: LD_ADDR_VAR 0 2
31568: PUSH
31569: LD_VAR 0 1
31573: ST_TO_ADDR
// break ;
31574: GO 31578
// end ;
31576: GO 31546
31578: POP
31579: POP
// if tmp = 0 then
31580: LD_VAR 0 2
31584: PUSH
31585: LD_INT 0
31587: EQUAL
31588: IFFALSE 31642
// begin uc_side = 7 ;
31590: LD_ADDR_OWVAR 20
31594: PUSH
31595: LD_INT 7
31597: ST_TO_ADDR
// uc_nation = 3 ;
31598: LD_ADDR_OWVAR 21
31602: PUSH
31603: LD_INT 3
31605: ST_TO_ADDR
// hc_name =  ;
31606: LD_ADDR_OWVAR 26
31610: PUSH
31611: LD_STRING 
31613: ST_TO_ADDR
// hc_gallery =  ;
31614: LD_ADDR_OWVAR 33
31618: PUSH
31619: LD_STRING 
31621: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
31622: LD_INT 1
31624: PPUSH
31625: LD_INT 10
31627: PPUSH
31628: CALL_OW 381
// tmp = CreateHuman ;
31632: LD_ADDR_VAR 0 2
31636: PUSH
31637: CALL_OW 44
31641: ST_TO_ADDR
// end ; AllianceAI = 0 ;
31642: LD_ADDR_EXP 85
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// AllianceEscape = 1 ;
31650: LD_ADDR_EXP 91
31654: PUSH
31655: LD_INT 1
31657: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
31658: LD_INT 7
31660: PPUSH
31661: LD_INT 1
31663: PPUSH
31664: LD_INT 1
31666: PPUSH
31667: LD_INT 1
31669: PPUSH
31670: CALL_OW 80
// DialogueOn ;
31674: CALL_OW 6
// if IsOK ( Roth ) then
31678: LD_EXP 28
31682: PPUSH
31683: CALL_OW 302
31687: IFFALSE 31701
// Say ( JMM , DAb-JMM-1 ) ;
31689: LD_EXP 1
31693: PPUSH
31694: LD_STRING DAb-JMM-1
31696: PPUSH
31697: CALL_OW 88
// if IsOK ( Roth ) then
31701: LD_EXP 28
31705: PPUSH
31706: CALL_OW 302
31710: IFFALSE 31726
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
31712: LD_EXP 28
31716: PPUSH
31717: LD_STRING DSurrenderAlliance-Roth-1
31719: PPUSH
31720: CALL_OW 88
31724: GO 31738
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
31726: LD_VAR 0 2
31730: PPUSH
31731: LD_STRING DSurrenderAlliance-Sci1-1
31733: PPUSH
31734: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
31738: LD_INT 23
31740: PPUSH
31741: LD_INT 22
31743: PUSH
31744: LD_INT 4
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PPUSH
31751: CALL_OW 70
31755: PUSH
31756: LD_INT 1
31758: EQUAL
31759: IFFALSE 31773
// Say ( JMM , DAb-JMM-1a ) ;
31761: LD_EXP 1
31765: PPUSH
31766: LD_STRING DAb-JMM-1a
31768: PPUSH
31769: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
31773: LD_INT 23
31775: PPUSH
31776: LD_INT 22
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PPUSH
31786: CALL_OW 70
31790: PUSH
31791: LD_INT 1
31793: GREATER
31794: IFFALSE 31808
// Say ( JMM , DAb-JMM-1b ) ;
31796: LD_EXP 1
31800: PPUSH
31801: LD_STRING DAb-JMM-1b
31803: PPUSH
31804: CALL_OW 88
// DialogueOff ;
31808: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
31812: LD_INT 23
31814: PPUSH
31815: LD_INT 22
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PPUSH
31825: CALL_OW 70
31829: PUSH
31830: LD_INT 0
31832: GREATER
31833: IFFALSE 31860
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
31835: LD_INT 23
31837: PPUSH
31838: LD_INT 22
31840: PUSH
31841: LD_INT 4
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PPUSH
31848: CALL_OW 70
31852: PPUSH
31853: LD_INT 1
31855: PPUSH
31856: CALL_OW 235
// if IsDying ( Roth ) then
31860: LD_EXP 28
31864: PPUSH
31865: CALL_OW 303
31869: IFFALSE 31891
// begin RothStatus = 0 ;
31871: LD_ADDR_EXP 92
31875: PUSH
31876: LD_INT 0
31878: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
31879: LD_EXP 28
31883: PPUSH
31884: LD_INT 0
31886: PPUSH
31887: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
31891: LD_INT 22
31893: PUSH
31894: LD_INT 7
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 21
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PPUSH
31915: CALL_OW 69
31919: PPUSH
31920: CALL_OW 122
// wait ( 0 0$1 ) ;
31924: LD_INT 35
31926: PPUSH
31927: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
31931: LD_INT 22
31933: PUSH
31934: LD_INT 7
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 21
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PPUSH
31955: CALL_OW 69
31959: PPUSH
31960: LD_INT 28
31962: PPUSH
31963: CALL_OW 113
// end ;
31967: PPOPN 2
31969: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
31970: LD_EXP 91
31974: PUSH
31975: LD_INT 1
31977: EQUAL
31978: PUSH
31979: LD_INT 28
31981: PPUSH
31982: LD_INT 22
31984: PUSH
31985: LD_INT 7
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PPUSH
32006: CALL_OW 70
32010: AND
32011: IFFALSE 32073
32013: GO 32015
32015: DISABLE
32016: LD_INT 0
32018: PPUSH
// begin enable ;
32019: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32020: LD_ADDR_VAR 0 1
32024: PUSH
32025: LD_INT 28
32027: PPUSH
32028: LD_INT 22
32030: PUSH
32031: LD_INT 7
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 21
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PPUSH
32052: CALL_OW 70
32056: PUSH
32057: FOR_IN
32058: IFFALSE 32071
// RemoveUnit ( i ) ;
32060: LD_VAR 0 1
32064: PPUSH
32065: CALL_OW 64
32069: GO 32057
32071: POP
32072: POP
// end ;
32073: PPOPN 1
32075: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 and IsOK ( Roth ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32076: LD_INT 33
32078: PPUSH
32079: LD_INT 22
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 21
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PPUSH
32103: CALL_OW 70
32107: PUSH
32108: LD_INT 0
32110: GREATER
32111: PUSH
32112: LD_INT 33
32114: PPUSH
32115: LD_INT 22
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 21
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 33
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: LD_INT 58
32150: PUSH
32151: EMPTY
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: PPUSH
32164: CALL_OW 70
32168: PUSH
32169: LD_INT 0
32171: GREATER
32172: PUSH
32173: LD_EXP 28
32177: PPUSH
32178: CALL_OW 302
32182: AND
32183: PUSH
32184: LD_EXP 85
32188: PUSH
32189: LD_INT 1
32191: EQUAL
32192: AND
32193: OR
32194: IFFALSE 34564
32196: GO 32198
32198: DISABLE
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
32203: PPUSH
// begin tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32204: LD_ADDR_VAR 0 1
32208: PUSH
32209: LD_INT 33
32211: PPUSH
32212: LD_INT 22
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: LD_INT 21
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 33
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PPUSH
32254: CALL_OW 70
32258: PUSH
32259: LD_INT 1
32261: ARRAY
32262: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32263: LD_ADDR_VAR 0 2
32267: PUSH
32268: LD_EXP 1
32272: PUSH
32273: LD_EXP 2
32277: PUSH
32278: LD_EXP 3
32282: PUSH
32283: LD_EXP 21
32287: PUSH
32288: LD_EXP 4
32292: PUSH
32293: LD_EXP 5
32297: PUSH
32298: LD_EXP 6
32302: PUSH
32303: LD_EXP 7
32307: PUSH
32308: LD_EXP 8
32312: PUSH
32313: LD_EXP 9
32317: PUSH
32318: LD_EXP 10
32322: PUSH
32323: LD_EXP 11
32327: PUSH
32328: LD_EXP 12
32332: PUSH
32333: LD_EXP 13
32337: PUSH
32338: LD_EXP 14
32342: PUSH
32343: LD_EXP 15
32347: PUSH
32348: LD_EXP 16
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
// InGameOn ;
32372: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32376: LD_INT 1
32378: PPUSH
32379: LD_INT 7
32381: PPUSH
32382: LD_INT 1
32384: PPUSH
32385: LD_INT 1
32387: PPUSH
32388: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 247
32410: PUSH
32411: LD_INT 2
32413: EQUAL
32414: IFFALSE 32435
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
32416: LD_ADDR_VAR 0 1
32420: PUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 313
32430: PUSH
32431: LD_INT 1
32433: ARRAY
32434: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
32435: LD_VAR 0 1
32439: PPUSH
32440: CALL_OW 121
// wait ( 0 0$1 ) ;
32444: LD_INT 35
32446: PPUSH
32447: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
32451: LD_VAR 0 1
32455: PPUSH
32456: LD_INT 248
32458: PPUSH
32459: LD_INT 186
32461: PPUSH
32462: LD_INT 4
32464: PPUSH
32465: LD_INT 1
32467: PPUSH
32468: CALL_OW 483
// wait ( 0 0$2 ) ;
32472: LD_INT 70
32474: PPUSH
32475: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
32479: LD_VAR 0 1
32483: PPUSH
32484: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
32488: LD_VAR 0 1
32492: PPUSH
32493: LD_EXP 28
32497: PPUSH
32498: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
32502: LD_EXP 28
32506: PUSH
32507: LD_EXP 48
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PPUSH
32516: LD_VAR 0 1
32520: PPUSH
32521: CALL_OW 119
// if tpUnit = JMM then
32525: LD_VAR 0 1
32529: PUSH
32530: LD_EXP 1
32534: EQUAL
32535: IFFALSE 32549
// Say ( JMM , DA1-JMM-1 ) ;
32537: LD_EXP 1
32541: PPUSH
32542: LD_STRING DA1-JMM-1
32544: PPUSH
32545: CALL_OW 88
// if tpUnit = Joan then
32549: LD_VAR 0 1
32553: PUSH
32554: LD_EXP 2
32558: EQUAL
32559: IFFALSE 32573
// Say ( Joan , DA1-Joan-1 ) ;
32561: LD_EXP 2
32565: PPUSH
32566: LD_STRING DA1-Joan-1
32568: PPUSH
32569: CALL_OW 88
// if tpUnit = Lisa then
32573: LD_VAR 0 1
32577: PUSH
32578: LD_EXP 4
32582: EQUAL
32583: IFFALSE 32597
// Say ( Lisa , DA1-Lisa-1 ) ;
32585: LD_EXP 4
32589: PPUSH
32590: LD_STRING DA1-Lisa-1
32592: PPUSH
32593: CALL_OW 88
// if tpUnit = Donaldson then
32597: LD_VAR 0 1
32601: PUSH
32602: LD_EXP 5
32606: EQUAL
32607: IFFALSE 32621
// Say ( Donaldson , DA1-Don-1 ) ;
32609: LD_EXP 5
32613: PPUSH
32614: LD_STRING DA1-Don-1
32616: PPUSH
32617: CALL_OW 88
// if tpUnit = Cornel then
32621: LD_VAR 0 1
32625: PUSH
32626: LD_EXP 12
32630: EQUAL
32631: IFFALSE 32645
// Say ( Cornel , DA1-Corn-1 ) ;
32633: LD_EXP 12
32637: PPUSH
32638: LD_STRING DA1-Corn-1
32640: PPUSH
32641: CALL_OW 88
// if tpUnit = Denis then
32645: LD_VAR 0 1
32649: PUSH
32650: LD_EXP 8
32654: EQUAL
32655: IFFALSE 32669
// Say ( Denis , DA1-Den-1 ) ;
32657: LD_EXP 8
32661: PPUSH
32662: LD_STRING DA1-Den-1
32664: PPUSH
32665: CALL_OW 88
// if tpUnit = Bobby then
32669: LD_VAR 0 1
32673: PUSH
32674: LD_EXP 6
32678: EQUAL
32679: IFFALSE 32693
// Say ( Bobby , DA1-Bobby-1 ) ;
32681: LD_EXP 6
32685: PPUSH
32686: LD_STRING DA1-Bobby-1
32688: PPUSH
32689: CALL_OW 88
// if tpUnit = Gladstone then
32693: LD_VAR 0 1
32697: PUSH
32698: LD_EXP 10
32702: EQUAL
32703: IFFALSE 32717
// Say ( Gladstone , DA1-Glad-1 ) ;
32705: LD_EXP 10
32709: PPUSH
32710: LD_STRING DA1-Glad-1
32712: PPUSH
32713: CALL_OW 88
// if tpUnit = Cyrus then
32717: LD_VAR 0 1
32721: PUSH
32722: LD_EXP 7
32726: EQUAL
32727: IFFALSE 32741
// Say ( Cyrus , DA1-Cyrus-1 ) ;
32729: LD_EXP 7
32733: PPUSH
32734: LD_STRING DA1-Cyrus-1
32736: PPUSH
32737: CALL_OW 88
// if tpUnit = Stevens then
32741: LD_VAR 0 1
32745: PUSH
32746: LD_EXP 3
32750: EQUAL
32751: IFFALSE 32765
// Say ( Stevens , DA1-Huck-1 ) ;
32753: LD_EXP 3
32757: PPUSH
32758: LD_STRING DA1-Huck-1
32760: PPUSH
32761: CALL_OW 88
// if tpUnit = Baker then
32765: LD_VAR 0 1
32769: PUSH
32770: LD_EXP 21
32774: EQUAL
32775: IFFALSE 32789
// Say ( Baker , DA1-Huck-1 ) ;
32777: LD_EXP 21
32781: PPUSH
32782: LD_STRING DA1-Huck-1
32784: PPUSH
32785: CALL_OW 88
// if tpUnit = Brown then
32789: LD_VAR 0 1
32793: PUSH
32794: LD_EXP 9
32798: EQUAL
32799: IFFALSE 32813
// Say ( Brown , DA1-Brown-1 ) ;
32801: LD_EXP 9
32805: PPUSH
32806: LD_STRING DA1-Brown-1
32808: PPUSH
32809: CALL_OW 88
// if tpUnit = Gary then
32813: LD_VAR 0 1
32817: PUSH
32818: LD_EXP 13
32822: EQUAL
32823: IFFALSE 32837
// Say ( Gary , DA1-Gary-1 ) ;
32825: LD_EXP 13
32829: PPUSH
32830: LD_STRING DA1-Gary-1
32832: PPUSH
32833: CALL_OW 88
// if tpUnit = Connie then
32837: LD_VAR 0 1
32841: PUSH
32842: LD_EXP 16
32846: EQUAL
32847: IFFALSE 32861
// Say ( Connie , DA1-Con-1 ) ;
32849: LD_EXP 16
32853: PPUSH
32854: LD_STRING DA1-Con-1
32856: PPUSH
32857: CALL_OW 88
// if tpUnit = Kurt then
32861: LD_VAR 0 1
32865: PUSH
32866: LD_EXP 30
32870: EQUAL
32871: IFFALSE 32885
// Say ( Kurt , DA1-Kurt-1 ) ;
32873: LD_EXP 30
32877: PPUSH
32878: LD_STRING DA1-Kurt-1
32880: PPUSH
32881: CALL_OW 88
// if tpUnit = Kikuchi then
32885: LD_VAR 0 1
32889: PUSH
32890: LD_EXP 15
32894: EQUAL
32895: IFFALSE 32909
// Say ( Kikuchi , DA1-Yam-1 ) ;
32897: LD_EXP 15
32901: PPUSH
32902: LD_STRING DA1-Yam-1
32904: PPUSH
32905: CALL_OW 88
// if tpUnit = Frank then
32909: LD_VAR 0 1
32913: PUSH
32914: LD_EXP 14
32918: EQUAL
32919: IFFALSE 32933
// Say ( Frank , DA1-Frank-1 ) ;
32921: LD_EXP 14
32925: PPUSH
32926: LD_STRING DA1-Frank-1
32928: PPUSH
32929: CALL_OW 88
// if not tpUnit in heroes then
32933: LD_VAR 0 1
32937: PUSH
32938: LD_VAR 0 2
32942: IN
32943: NOT
32944: IFFALSE 33000
// begin if GetSex ( tpUnit ) = 1 then
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 258
32955: PUSH
32956: LD_INT 1
32958: EQUAL
32959: IFFALSE 32973
// Say ( tpUnit , DA1-Sol1-1 ) ;
32961: LD_VAR 0 1
32965: PPUSH
32966: LD_STRING DA1-Sol1-1
32968: PPUSH
32969: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 258
32982: PUSH
32983: LD_INT 2
32985: EQUAL
32986: IFFALSE 33000
// Say ( tpUnit , DA1-FSol1-1 ) ;
32988: LD_VAR 0 1
32992: PPUSH
32993: LD_STRING DA1-FSol1-1
32995: PPUSH
32996: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33000: LD_EXP 28
33004: PPUSH
33005: LD_STRING DA-Roth-1
33007: PPUSH
33008: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33012: LD_EXP 48
33016: PPUSH
33017: LD_STRING DA-Sim-1
33019: PPUSH
33020: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33024: LD_EXP 28
33028: PPUSH
33029: LD_STRING DA-Roth-2
33031: PPUSH
33032: CALL_OW 88
// if tpUnit = JMM then
33036: LD_VAR 0 1
33040: PUSH
33041: LD_EXP 1
33045: EQUAL
33046: IFFALSE 33079
// begin Say ( JMM , DA1-JMM-1a ) ;
33048: LD_EXP 1
33052: PPUSH
33053: LD_STRING DA1-JMM-1a
33055: PPUSH
33056: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33060: LD_EXP 28
33064: PPUSH
33065: LD_STRING DA-Roth-3a
33067: PPUSH
33068: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33072: LD_STRING JMMCaptured
33074: PPUSH
33075: CALL_OW 104
// end ; if tpUnit = Joan then
33079: LD_VAR 0 1
33083: PUSH
33084: LD_EXP 2
33088: EQUAL
33089: IFFALSE 33151
// begin Say ( Joan , DA1-Joan-1a ) ;
33091: LD_EXP 2
33095: PPUSH
33096: LD_STRING DA1-Joan-1a
33098: PPUSH
33099: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33103: LD_EXP 28
33107: PPUSH
33108: LD_STRING DA-Roth-3a
33110: PPUSH
33111: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33115: LD_EXP 2
33119: PPUSH
33120: LD_INT 4
33122: PPUSH
33123: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33127: LD_EXP 2
33131: PPUSH
33132: LD_INT 257
33134: PPUSH
33135: LD_INT 198
33137: PPUSH
33138: CALL_OW 111
// AddComHold ( Joan ) ;
33142: LD_EXP 2
33146: PPUSH
33147: CALL_OW 200
// end ; if tpUnit = Donaldson then
33151: LD_VAR 0 1
33155: PUSH
33156: LD_EXP 5
33160: EQUAL
33161: IFFALSE 33214
// begin Say ( Donaldson , DA1-Don-1a ) ;
33163: LD_EXP 5
33167: PPUSH
33168: LD_STRING DA1-Don-1a
33170: PPUSH
33171: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33175: LD_EXP 28
33179: PPUSH
33180: LD_STRING DA-Roth-3
33182: PPUSH
33183: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33187: LD_EXP 5
33191: PPUSH
33192: LD_INT 7
33194: PPUSH
33195: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33199: LD_EXP 5
33203: PPUSH
33204: LD_INT 240
33206: PPUSH
33207: LD_INT 188
33209: PPUSH
33210: CALL_OW 111
// end ; if tpUnit = Cornel then
33214: LD_VAR 0 1
33218: PUSH
33219: LD_EXP 12
33223: EQUAL
33224: IFFALSE 33286
// begin Say ( Cornel , DA1-Corn-1a ) ;
33226: LD_EXP 12
33230: PPUSH
33231: LD_STRING DA1-Corn-1a
33233: PPUSH
33234: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33238: LD_EXP 28
33242: PPUSH
33243: LD_STRING DA-Roth-3a
33245: PPUSH
33246: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33250: LD_EXP 12
33254: PPUSH
33255: LD_INT 4
33257: PPUSH
33258: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33262: LD_EXP 12
33266: PPUSH
33267: LD_INT 257
33269: PPUSH
33270: LD_INT 198
33272: PPUSH
33273: CALL_OW 111
// AddComHold ( Cornel ) ;
33277: LD_EXP 12
33281: PPUSH
33282: CALL_OW 200
// end ; if tpUnit = Denis then
33286: LD_VAR 0 1
33290: PUSH
33291: LD_EXP 8
33295: EQUAL
33296: IFFALSE 33349
// begin Say ( Denis , DA1-Den-1a ) ;
33298: LD_EXP 8
33302: PPUSH
33303: LD_STRING DA1-Den-1a
33305: PPUSH
33306: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33310: LD_EXP 28
33314: PPUSH
33315: LD_STRING DA-Roth-3
33317: PPUSH
33318: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33322: LD_EXP 8
33326: PPUSH
33327: LD_INT 7
33329: PPUSH
33330: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33334: LD_EXP 8
33338: PPUSH
33339: LD_INT 240
33341: PPUSH
33342: LD_INT 188
33344: PPUSH
33345: CALL_OW 111
// end ; if tpUnit = Bobby then
33349: LD_VAR 0 1
33353: PUSH
33354: LD_EXP 6
33358: EQUAL
33359: IFFALSE 33412
// begin Say ( Joan , DA1-Bobby-1a ) ;
33361: LD_EXP 2
33365: PPUSH
33366: LD_STRING DA1-Bobby-1a
33368: PPUSH
33369: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33373: LD_EXP 28
33377: PPUSH
33378: LD_STRING DA-Roth-3
33380: PPUSH
33381: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
33385: LD_EXP 6
33389: PPUSH
33390: LD_INT 7
33392: PPUSH
33393: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
33397: LD_EXP 6
33401: PPUSH
33402: LD_INT 240
33404: PPUSH
33405: LD_INT 188
33407: PPUSH
33408: CALL_OW 111
// end ; if tpUnit = Gladstone then
33412: LD_VAR 0 1
33416: PUSH
33417: LD_EXP 10
33421: EQUAL
33422: IFFALSE 33484
// begin Say ( Gladstone , DA1-Glad-1a ) ;
33424: LD_EXP 10
33428: PPUSH
33429: LD_STRING DA1-Glad-1a
33431: PPUSH
33432: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33436: LD_EXP 28
33440: PPUSH
33441: LD_STRING DA-Roth-3a
33443: PPUSH
33444: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
33448: LD_EXP 10
33452: PPUSH
33453: LD_INT 4
33455: PPUSH
33456: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
33460: LD_EXP 10
33464: PPUSH
33465: LD_INT 257
33467: PPUSH
33468: LD_INT 198
33470: PPUSH
33471: CALL_OW 111
// AddComHold ( Gladstone ) ;
33475: LD_EXP 10
33479: PPUSH
33480: CALL_OW 200
// end ; if tpUnit = Cyrus then
33484: LD_VAR 0 1
33488: PUSH
33489: LD_EXP 7
33493: EQUAL
33494: IFFALSE 33556
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33496: LD_EXP 7
33500: PPUSH
33501: LD_STRING DA1-Cyrus-1a
33503: PPUSH
33504: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33508: LD_EXP 28
33512: PPUSH
33513: LD_STRING DA-Roth-3a
33515: PPUSH
33516: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33520: LD_EXP 7
33524: PPUSH
33525: LD_INT 4
33527: PPUSH
33528: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33532: LD_EXP 7
33536: PPUSH
33537: LD_INT 257
33539: PPUSH
33540: LD_INT 198
33542: PPUSH
33543: CALL_OW 111
// AddComHold ( Cyrus ) ;
33547: LD_EXP 7
33551: PPUSH
33552: CALL_OW 200
// end ; if tpUnit = Stevens then
33556: LD_VAR 0 1
33560: PUSH
33561: LD_EXP 3
33565: EQUAL
33566: IFFALSE 33619
// begin Say ( Stevens , DA1-Huck-1a ) ;
33568: LD_EXP 3
33572: PPUSH
33573: LD_STRING DA1-Huck-1a
33575: PPUSH
33576: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33580: LD_EXP 28
33584: PPUSH
33585: LD_STRING DA-Roth-3
33587: PPUSH
33588: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
33592: LD_EXP 3
33596: PPUSH
33597: LD_INT 7
33599: PPUSH
33600: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
33604: LD_EXP 3
33608: PPUSH
33609: LD_INT 240
33611: PPUSH
33612: LD_INT 188
33614: PPUSH
33615: CALL_OW 111
// end ; if tpUnit = Baker then
33619: LD_VAR 0 1
33623: PUSH
33624: LD_EXP 21
33628: EQUAL
33629: IFFALSE 33682
// begin Say ( Baker , DA1-Huck-1a ) ;
33631: LD_EXP 21
33635: PPUSH
33636: LD_STRING DA1-Huck-1a
33638: PPUSH
33639: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33643: LD_EXP 28
33647: PPUSH
33648: LD_STRING DA-Roth-3
33650: PPUSH
33651: CALL_OW 88
// SetSide ( Baker , 7 ) ;
33655: LD_EXP 21
33659: PPUSH
33660: LD_INT 7
33662: PPUSH
33663: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
33667: LD_EXP 21
33671: PPUSH
33672: LD_INT 240
33674: PPUSH
33675: LD_INT 188
33677: PPUSH
33678: CALL_OW 111
// end ; if tpUnit = Brown then
33682: LD_VAR 0 1
33686: PUSH
33687: LD_EXP 9
33691: EQUAL
33692: IFFALSE 33745
// begin Say ( Cyrus , DA1-Brown-1a ) ;
33694: LD_EXP 7
33698: PPUSH
33699: LD_STRING DA1-Brown-1a
33701: PPUSH
33702: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33706: LD_EXP 28
33710: PPUSH
33711: LD_STRING DA-Roth-3
33713: PPUSH
33714: CALL_OW 88
// SetSide ( Brown , 7 ) ;
33718: LD_EXP 9
33722: PPUSH
33723: LD_INT 7
33725: PPUSH
33726: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
33730: LD_EXP 9
33734: PPUSH
33735: LD_INT 240
33737: PPUSH
33738: LD_INT 188
33740: PPUSH
33741: CALL_OW 111
// end ; if tpUnit = Gary then
33745: LD_VAR 0 1
33749: PUSH
33750: LD_EXP 13
33754: EQUAL
33755: IFFALSE 33817
// begin Say ( Gary , DA1-Gary-1a ) ;
33757: LD_EXP 13
33761: PPUSH
33762: LD_STRING DA1-Gary-1a
33764: PPUSH
33765: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33769: LD_EXP 28
33773: PPUSH
33774: LD_STRING DA-Roth-3a
33776: PPUSH
33777: CALL_OW 88
// SetSide ( Gary , 4 ) ;
33781: LD_EXP 13
33785: PPUSH
33786: LD_INT 4
33788: PPUSH
33789: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
33793: LD_EXP 13
33797: PPUSH
33798: LD_INT 257
33800: PPUSH
33801: LD_INT 198
33803: PPUSH
33804: CALL_OW 111
// AddComHold ( Gary ) ;
33808: LD_EXP 13
33812: PPUSH
33813: CALL_OW 200
// end ; if tpUnit = Cyrus then
33817: LD_VAR 0 1
33821: PUSH
33822: LD_EXP 7
33826: EQUAL
33827: IFFALSE 33889
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33829: LD_EXP 7
33833: PPUSH
33834: LD_STRING DA1-Cyrus-1a
33836: PPUSH
33837: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33841: LD_EXP 28
33845: PPUSH
33846: LD_STRING DA-Roth-3a
33848: PPUSH
33849: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33853: LD_EXP 7
33857: PPUSH
33858: LD_INT 4
33860: PPUSH
33861: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33865: LD_EXP 7
33869: PPUSH
33870: LD_INT 257
33872: PPUSH
33873: LD_INT 198
33875: PPUSH
33876: CALL_OW 111
// AddComHold ( Cyrus ) ;
33880: LD_EXP 7
33884: PPUSH
33885: CALL_OW 200
// end ; if tpUnit = Connie then
33889: LD_VAR 0 1
33893: PUSH
33894: LD_EXP 16
33898: EQUAL
33899: IFFALSE 33961
// begin Say ( Connie , DA1-Con-1a ) ;
33901: LD_EXP 16
33905: PPUSH
33906: LD_STRING DA1-Con-1a
33908: PPUSH
33909: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33913: LD_EXP 28
33917: PPUSH
33918: LD_STRING DA-Roth-3a
33920: PPUSH
33921: CALL_OW 88
// SetSide ( Connie , 4 ) ;
33925: LD_EXP 16
33929: PPUSH
33930: LD_INT 4
33932: PPUSH
33933: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
33937: LD_EXP 16
33941: PPUSH
33942: LD_INT 257
33944: PPUSH
33945: LD_INT 198
33947: PPUSH
33948: CALL_OW 111
// AddComHold ( Connie ) ;
33952: LD_EXP 16
33956: PPUSH
33957: CALL_OW 200
// end ; if tpUnit = Kurt then
33961: LD_VAR 0 1
33965: PUSH
33966: LD_EXP 30
33970: EQUAL
33971: IFFALSE 34033
// begin Say ( Kurt , DA1-Kurt-1a ) ;
33973: LD_EXP 30
33977: PPUSH
33978: LD_STRING DA1-Kurt-1a
33980: PPUSH
33981: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33985: LD_EXP 28
33989: PPUSH
33990: LD_STRING DA-Roth-3a
33992: PPUSH
33993: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
33997: LD_EXP 30
34001: PPUSH
34002: LD_INT 4
34004: PPUSH
34005: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34009: LD_EXP 30
34013: PPUSH
34014: LD_INT 257
34016: PPUSH
34017: LD_INT 198
34019: PPUSH
34020: CALL_OW 111
// AddComHold ( Kurt ) ;
34024: LD_EXP 30
34028: PPUSH
34029: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34033: LD_VAR 0 1
34037: PUSH
34038: LD_EXP 15
34042: EQUAL
34043: IFFALSE 34096
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34045: LD_EXP 15
34049: PPUSH
34050: LD_STRING DA1-Yam-1a
34052: PPUSH
34053: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34057: LD_EXP 28
34061: PPUSH
34062: LD_STRING DA-Roth-3
34064: PPUSH
34065: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34069: LD_EXP 15
34073: PPUSH
34074: LD_INT 7
34076: PPUSH
34077: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34081: LD_EXP 15
34085: PPUSH
34086: LD_INT 240
34088: PPUSH
34089: LD_INT 188
34091: PPUSH
34092: CALL_OW 111
// end ; if tpUnit = Frank then
34096: LD_VAR 0 1
34100: PUSH
34101: LD_EXP 14
34105: EQUAL
34106: IFFALSE 34168
// begin Say ( Frank , DA1-Frank-1a ) ;
34108: LD_EXP 14
34112: PPUSH
34113: LD_STRING DA1-Frank-1a
34115: PPUSH
34116: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34120: LD_EXP 28
34124: PPUSH
34125: LD_STRING DA-Roth-3a
34127: PPUSH
34128: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34132: LD_EXP 14
34136: PPUSH
34137: LD_INT 4
34139: PPUSH
34140: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34144: LD_EXP 14
34148: PPUSH
34149: LD_INT 257
34151: PPUSH
34152: LD_INT 198
34154: PPUSH
34155: CALL_OW 111
// AddComHold ( Frank ) ;
34159: LD_EXP 14
34163: PPUSH
34164: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34168: LD_EXP 64
34172: PUSH
34173: LD_INT 0
34175: EQUAL
34176: IFFALSE 34222
// begin Say ( JMM , DAa-JMM-1 ) ;
34178: LD_EXP 1
34182: PPUSH
34183: LD_STRING DAa-JMM-1
34185: PPUSH
34186: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34190: LD_EXP 1
34194: PPUSH
34195: LD_STRING DAa-JMM-1a
34197: PPUSH
34198: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34202: LD_EXP 1
34206: PPUSH
34207: LD_STRING DAa-JMM-1b
34209: PPUSH
34210: CALL_OW 88
// allianceFirstContact = 1 ;
34214: LD_ADDR_EXP 64
34218: PUSH
34219: LD_INT 1
34221: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34222: LD_VAR 0 1
34226: PUSH
34227: LD_VAR 0 2
34231: IN
34232: NOT
34233: IFFALSE 34543
// begin rnd = Rand ( 1 , 2 ) ;
34235: LD_ADDR_VAR 0 3
34239: PUSH
34240: LD_INT 1
34242: PPUSH
34243: LD_INT 2
34245: PPUSH
34246: CALL_OW 12
34250: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34251: LD_VAR 0 1
34255: PPUSH
34256: CALL_OW 258
34260: PUSH
34261: LD_INT 1
34263: EQUAL
34264: IFFALSE 34397
// begin if rnd = 1 then
34266: LD_VAR 0 3
34270: PUSH
34271: LD_INT 1
34273: EQUAL
34274: IFFALSE 34336
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34276: LD_VAR 0 1
34280: PPUSH
34281: LD_STRING DA1-Sol1-1a
34283: PPUSH
34284: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34288: LD_EXP 28
34292: PPUSH
34293: LD_STRING DA-Roth-3a
34295: PPUSH
34296: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34300: LD_VAR 0 1
34304: PPUSH
34305: LD_INT 4
34307: PPUSH
34308: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34312: LD_VAR 0 1
34316: PPUSH
34317: LD_INT 257
34319: PPUSH
34320: LD_INT 198
34322: PPUSH
34323: CALL_OW 111
// AddComHold ( tpUnit ) ;
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 200
// end ; if rnd = 2 then
34336: LD_VAR 0 3
34340: PUSH
34341: LD_INT 2
34343: EQUAL
34344: IFFALSE 34397
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34346: LD_VAR 0 1
34350: PPUSH
34351: LD_STRING DA1-Sol1-1b
34353: PPUSH
34354: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34358: LD_EXP 28
34362: PPUSH
34363: LD_STRING DA-Roth-3
34365: PPUSH
34366: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34370: LD_VAR 0 1
34374: PPUSH
34375: LD_INT 7
34377: PPUSH
34378: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34382: LD_VAR 0 1
34386: PPUSH
34387: LD_INT 240
34389: PPUSH
34390: LD_INT 188
34392: PPUSH
34393: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
34397: LD_VAR 0 1
34401: PPUSH
34402: CALL_OW 258
34406: PUSH
34407: LD_INT 2
34409: EQUAL
34410: IFFALSE 34543
// begin if rnd = 1 then
34412: LD_VAR 0 3
34416: PUSH
34417: LD_INT 1
34419: EQUAL
34420: IFFALSE 34482
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
34422: LD_VAR 0 1
34426: PPUSH
34427: LD_STRING DA1-FSol1-1a
34429: PPUSH
34430: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34434: LD_EXP 28
34438: PPUSH
34439: LD_STRING DA-Roth-3a
34441: PPUSH
34442: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34446: LD_VAR 0 1
34450: PPUSH
34451: LD_INT 4
34453: PPUSH
34454: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34458: LD_VAR 0 1
34462: PPUSH
34463: LD_INT 257
34465: PPUSH
34466: LD_INT 198
34468: PPUSH
34469: CALL_OW 111
// AddComHold ( tpUnit ) ;
34473: LD_VAR 0 1
34477: PPUSH
34478: CALL_OW 200
// end ; if rnd = 2 then
34482: LD_VAR 0 3
34486: PUSH
34487: LD_INT 2
34489: EQUAL
34490: IFFALSE 34543
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
34492: LD_VAR 0 1
34496: PPUSH
34497: LD_STRING DA1-FSol1-1b
34499: PPUSH
34500: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34504: LD_EXP 28
34508: PPUSH
34509: LD_STRING DA-Roth-3
34511: PPUSH
34512: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34516: LD_VAR 0 1
34520: PPUSH
34521: LD_INT 7
34523: PPUSH
34524: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34528: LD_VAR 0 1
34532: PPUSH
34533: LD_INT 240
34535: PPUSH
34536: LD_INT 188
34538: PPUSH
34539: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
34543: LD_INT 1
34545: PPUSH
34546: LD_INT 7
34548: PPUSH
34549: LD_INT 2
34551: PPUSH
34552: LD_INT 1
34554: PPUSH
34555: CALL_OW 80
// InGameOff ;
34559: CALL_OW 9
// enable ;
34563: ENABLE
// end ;
34564: PPOPN 3
34566: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
34567: LD_EXP 97
34571: PUSH
34572: LD_INT 94570
34574: GREATEREQUAL
34575: IFFALSE 34894
34577: GO 34579
34579: DISABLE
// begin DialogueOn ;
34580: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
34584: LD_INT 22
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 23
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 26
34606: PUSH
34607: LD_INT 1
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: LD_INT 25
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 25
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 25
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 25
34649: PUSH
34650: LD_INT 4
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 25
34659: PUSH
34660: LD_INT 5
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 25
34669: PUSH
34670: LD_INT 8
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: PPUSH
34692: CALL_OW 69
34696: PPUSH
34697: LD_STRING D11-Sol1-1
34699: PPUSH
34700: LD_STRING D5-FSol1-1
34702: PPUSH
34703: CALL 6887 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
34707: LD_EXP 26
34711: PPUSH
34712: LD_STRING D11-Pla-1
34714: PPUSH
34715: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
34719: LD_EXP 37
34723: PPUSH
34724: LD_STRING D11-Kov-1
34726: PPUSH
34727: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
34731: LD_EXP 26
34735: PPUSH
34736: LD_STRING D11-Pla-2
34738: PPUSH
34739: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
34743: LD_INT 22
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 23
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 26
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 25
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 25
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 25
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 25
34808: PUSH
34809: LD_INT 4
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 25
34818: PUSH
34819: LD_INT 5
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 25
34828: PUSH
34829: LD_INT 8
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: PPUSH
34851: CALL_OW 69
34855: PPUSH
34856: LD_STRING D11-Sol1-2
34858: PPUSH
34859: LD_STRING D5-FSol1-1
34861: PPUSH
34862: CALL 6887 0 3
// Say ( JMM , D11-JMM-2 ) ;
34866: LD_EXP 1
34870: PPUSH
34871: LD_STRING D11-JMM-2
34873: PPUSH
34874: CALL_OW 88
// DialogueOff ;
34878: CALL_OW 7
// PreapreMehBehs ;
34882: CALL 5712 0 0
// missionStage = 5 ;
34886: LD_ADDR_EXP 101
34890: PUSH
34891: LD_INT 5
34893: ST_TO_ADDR
// end ;
34894: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
34895: LD_EXP 97
34899: PUSH
34900: LD_INT 105070
34902: GREATEREQUAL
34903: IFFALSE 35297
34905: GO 34907
34907: DISABLE
34908: LD_INT 0
34910: PPUSH
34911: PPUSH
// begin time = 0 0$00 ;
34912: LD_ADDR_VAR 0 2
34916: PUSH
34917: LD_INT 0
34919: ST_TO_ADDR
// DialogueOn ;
34920: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
34924: LD_EXP 26
34928: PPUSH
34929: LD_STRING D15-Pla-1
34931: PPUSH
34932: CALL_OW 94
// dec = Query ( Q15a ) ;
34936: LD_ADDR_VAR 0 1
34940: PUSH
34941: LD_STRING Q15a
34943: PPUSH
34944: CALL_OW 97
34948: ST_TO_ADDR
// if dec = 1 then
34949: LD_VAR 0 1
34953: PUSH
34954: LD_INT 1
34956: EQUAL
34957: IFFALSE 34978
// begin Say ( JMM , D15a-JMM-1 ) ;
34959: LD_EXP 1
34963: PPUSH
34964: LD_STRING D15a-JMM-1
34966: PPUSH
34967: CALL_OW 88
// YouLost ( Surrender ) ;
34971: LD_STRING Surrender
34973: PPUSH
34974: CALL_OW 104
// end ; if dec = 2 then
34978: LD_VAR 0 1
34982: PUSH
34983: LD_INT 2
34985: EQUAL
34986: IFFALSE 35016
// begin Say ( JMM , D15b-JMM-1 ) ;
34988: LD_EXP 1
34992: PPUSH
34993: LD_STRING D15b-JMM-1
34995: PPUSH
34996: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35000: LD_EXP 26
35004: PPUSH
35005: LD_STRING D15b-Pla-1
35007: PPUSH
35008: CALL_OW 94
// DialogueOff ;
35012: CALL_OW 7
// end ; if dec = 3 then
35016: LD_VAR 0 1
35020: PUSH
35021: LD_INT 3
35023: EQUAL
35024: IFFALSE 35100
// begin Say ( JMM , D15c-JMM-1 ) ;
35026: LD_EXP 1
35030: PPUSH
35031: LD_STRING D15c-JMM-1
35033: PPUSH
35034: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35038: LD_EXP 26
35042: PPUSH
35043: LD_STRING D15c-Pla-1
35045: PPUSH
35046: CALL_OW 94
// DialogueOff ;
35050: CALL_OW 7
// wait ( 0 0$15 ) ;
35054: LD_INT 525
35056: PPUSH
35057: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35061: LD_EXP 26
35065: PPUSH
35066: LD_STRING D18-Pla-1
35068: PPUSH
35069: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35073: LD_INT 273
35075: PPUSH
35076: LD_EXP 1
35080: PPUSH
35081: CALL_OW 250
35085: PPUSH
35086: LD_EXP 1
35090: PPUSH
35091: CALL_OW 251
35095: PPUSH
35096: CALL_OW 116
// end ; if dec = 4 then
35100: LD_VAR 0 1
35104: PUSH
35105: LD_INT 4
35107: EQUAL
35108: IFFALSE 35146
// begin Say ( JMM , D15d-JMM-1 ) ;
35110: LD_EXP 1
35114: PPUSH
35115: LD_STRING D15d-JMM-1
35117: PPUSH
35118: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35122: LD_EXP 26
35126: PPUSH
35127: LD_STRING D15d-Pla-1
35129: PPUSH
35130: CALL_OW 94
// DialogueOff ;
35134: CALL_OW 7
// missionStage = 6 ;
35138: LD_ADDR_EXP 101
35142: PUSH
35143: LD_INT 6
35145: ST_TO_ADDR
// end ; if dec = 2 then
35146: LD_VAR 0 1
35150: PUSH
35151: LD_INT 2
35153: EQUAL
35154: IFFALSE 35227
// begin repeat wait ( 0 0$01 ) ;
35156: LD_INT 35
35158: PPUSH
35159: CALL_OW 67
// time = time + 0 0$01 ;
35163: LD_ADDR_VAR 0 2
35167: PUSH
35168: LD_VAR 0 2
35172: PUSH
35173: LD_INT 35
35175: PLUS
35176: ST_TO_ADDR
// until time >= 3 3$00 ;
35177: LD_VAR 0 2
35181: PUSH
35182: LD_INT 6300
35184: GREATEREQUAL
35185: IFFALSE 35156
// DialogueOn ;
35187: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35191: LD_EXP 1
35195: PPUSH
35196: LD_STRING D15d-JMM-1a
35198: PPUSH
35199: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35203: LD_EXP 26
35207: PPUSH
35208: LD_STRING D15d-Pla-1
35210: PPUSH
35211: CALL_OW 94
// DialogueOff ;
35215: CALL_OW 7
// missionStage = 6 ;
35219: LD_ADDR_EXP 101
35223: PUSH
35224: LD_INT 6
35226: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35227: LD_EXP 53
35231: PPUSH
35232: CALL_OW 302
35236: PUSH
35237: LD_EXP 53
35241: PPUSH
35242: CALL_OW 255
35246: PUSH
35247: LD_INT 1
35249: EQUAL
35250: AND
35251: IFFALSE 35297
// begin DialogueOn ;
35253: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35257: LD_EXP 1
35261: PPUSH
35262: LD_STRING D16-JMM-1
35264: PPUSH
35265: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35269: LD_EXP 53
35273: PPUSH
35274: LD_STRING D16-Friend-1
35276: PPUSH
35277: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35281: LD_EXP 1
35285: PPUSH
35286: LD_STRING D16-JMM-2
35288: PPUSH
35289: CALL_OW 88
// DialogueOff ;
35293: CALL_OW 7
// end ; end ;
35297: PPOPN 2
35299: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35300: LD_EXP 101
35304: PUSH
35305: LD_INT 6
35307: EQUAL
35308: PUSH
35309: LD_EXP 53
35313: PPUSH
35314: CALL_OW 302
35318: AND
35319: PUSH
35320: LD_EXP 53
35324: PPUSH
35325: CALL_OW 255
35329: PUSH
35330: LD_INT 1
35332: EQUAL
35333: AND
35334: IFFALSE 35971
35336: GO 35338
35338: DISABLE
35339: LD_INT 0
35341: PPUSH
// begin DialogueOn ;
35342: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35346: LD_INT 22
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 2
35358: PUSH
35359: LD_INT 34
35361: PUSH
35362: LD_INT 8
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 35
35371: PUSH
35372: LD_INT 8
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PPUSH
35388: CALL_OW 69
35392: PUSH
35393: LD_INT 0
35395: GREATER
35396: IFFALSE 35420
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35398: LD_EXP 26
35402: PPUSH
35403: LD_STRING D16c-Pla-1
35405: PPUSH
35406: CALL_OW 94
// playerHaveRocket = 1 ;
35410: LD_ADDR_EXP 100
35414: PUSH
35415: LD_INT 1
35417: ST_TO_ADDR
// end else
35418: GO 35879
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
35420: LD_EXP 26
35424: PPUSH
35425: LD_STRING D16a-Pla-1
35427: PPUSH
35428: CALL_OW 94
// if IsOK ( Stevens ) then
35432: LD_EXP 3
35436: PPUSH
35437: CALL_OW 302
35441: IFFALSE 35457
// begin Say ( Stevens , D16a-Huck-1 ) ;
35443: LD_EXP 3
35447: PPUSH
35448: LD_STRING D16a-Huck-1
35450: PPUSH
35451: CALL_OW 88
// end else
35455: GO 35605
// begin if IsOk ( Baker ) then
35457: LD_EXP 21
35461: PPUSH
35462: CALL_OW 302
35466: IFFALSE 35482
// begin Say ( Baker , D16a-Huck-1 ) ;
35468: LD_EXP 21
35472: PPUSH
35473: LD_STRING D16a-Huck-1
35475: PPUSH
35476: CALL_OW 88
// end else
35480: GO 35605
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
35482: LD_INT 22
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 23
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 26
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 25
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 25
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 25
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 25
35547: PUSH
35548: LD_INT 4
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 25
35557: PUSH
35558: LD_INT 5
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 25
35567: PUSH
35568: LD_INT 8
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: PPUSH
35590: CALL_OW 69
35594: PPUSH
35595: LD_STRING D16a-Sol1-1
35597: PPUSH
35598: LD_STRING D5-FSol1-1
35600: PPUSH
35601: CALL 6887 0 3
// end ; end ; wait ( 0 0$30 ) ;
35605: LD_INT 1050
35607: PPUSH
35608: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35612: LD_EXP 26
35616: PPUSH
35617: LD_STRING D18-Pla-1
35619: PPUSH
35620: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35624: LD_ADDR_VAR 0 1
35628: PUSH
35629: LD_INT 22
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 21
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 23
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: LD_INT 30
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 30
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: PPUSH
35693: CALL_OW 69
35697: ST_TO_ADDR
// if rocketTarget = 0 then
35698: LD_VAR 0 1
35702: PUSH
35703: LD_INT 0
35705: EQUAL
35706: IFFALSE 35782
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35708: LD_ADDR_VAR 0 1
35712: PUSH
35713: LD_INT 22
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 21
35725: PUSH
35726: LD_INT 3
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 23
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 30
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 30
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: PPUSH
35777: CALL_OW 69
35781: ST_TO_ADDR
// if rocketTarget = 0 then
35782: LD_VAR 0 1
35786: PUSH
35787: LD_INT 0
35789: EQUAL
35790: IFFALSE 35844
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35792: LD_ADDR_VAR 0 1
35796: PUSH
35797: LD_INT 22
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 21
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 23
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 50
35829: PUSH
35830: EMPTY
35831: LIST
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: PPUSH
35839: CALL_OW 69
35843: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35844: LD_INT 273
35846: PPUSH
35847: LD_VAR 0 1
35851: PUSH
35852: LD_INT 1
35854: ARRAY
35855: PPUSH
35856: CALL_OW 250
35860: PPUSH
35861: LD_VAR 0 1
35865: PUSH
35866: LD_INT 1
35868: ARRAY
35869: PPUSH
35870: CALL_OW 251
35874: PPUSH
35875: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
35879: LD_EXP 1
35883: PPUSH
35884: LD_STRING D16a-JMM-1a
35886: PPUSH
35887: CALL_OW 88
// DialogueOff ;
35891: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
35895: LD_EXP 53
35899: PPUSH
35900: LD_INT 3
35902: PPUSH
35903: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
35907: LD_EXP 53
35911: PPUSH
35912: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
35916: LD_EXP 53
35920: PPUSH
35921: CALL_OW 121
// wait ( 0 0$1 ) ;
35925: LD_INT 35
35927: PPUSH
35928: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
35932: LD_EXP 53
35936: PPUSH
35937: LD_INT 18
35939: PPUSH
35940: CALL_OW 113
// wait ( 0 0$3 ) ;
35944: LD_INT 105
35946: PPUSH
35947: CALL_OW 67
// DialogueOn ;
35951: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
35955: LD_EXP 1
35959: PPUSH
35960: LD_STRING D16a-JMM-1
35962: PPUSH
35963: CALL_OW 88
// DialogueOff ;
35967: CALL_OW 7
// end ;
35971: PPOPN 1
35973: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
35974: LD_EXP 53
35978: PPUSH
35979: CALL_OW 255
35983: PUSH
35984: LD_INT 3
35986: EQUAL
35987: IFFALSE 36094
35989: GO 35991
35991: DISABLE
35992: LD_INT 0
35994: PPUSH
// begin enable ;
35995: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
35996: LD_ADDR_VAR 0 1
36000: PUSH
36001: LD_INT 22
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 21
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 56
36023: PUSH
36024: EMPTY
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: PPUSH
36032: CALL_OW 69
36036: PUSH
36037: FOR_IN
36038: IFFALSE 36092
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36040: LD_VAR 0 1
36044: PPUSH
36045: LD_EXP 53
36049: PPUSH
36050: CALL_OW 296
36054: PUSH
36055: LD_INT 8
36057: LESS
36058: IFFALSE 36090
// begin disable ;
36060: DISABLE
// DialogueOn ;
36061: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36065: LD_EXP 53
36069: PPUSH
36070: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36074: LD_EXP 53
36078: PPUSH
36079: LD_STRING D16a-Friend-1
36081: PPUSH
36082: CALL_OW 88
// DialogueOff ;
36086: CALL_OW 7
// end ; end ;
36090: GO 36037
36092: POP
36093: POP
// end ;
36094: PPOPN 1
36096: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36097: LD_EXP 101
36101: PUSH
36102: LD_INT 6
36104: EQUAL
36105: PUSH
36106: LD_EXP 53
36110: PPUSH
36111: CALL_OW 255
36115: PUSH
36116: LD_INT 1
36118: EQUAL
36119: NOT
36120: AND
36121: IFFALSE 36501
36123: GO 36125
36125: DISABLE
36126: LD_INT 0
36128: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36129: LD_INT 22
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 34
36144: PUSH
36145: LD_INT 8
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 35
36154: PUSH
36155: LD_INT 8
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PPUSH
36171: CALL_OW 69
36175: PUSH
36176: LD_INT 0
36178: GREATER
36179: IFFALSE 36203
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36181: LD_EXP 26
36185: PPUSH
36186: LD_STRING D16c-Pla-1
36188: PPUSH
36189: CALL_OW 94
// playerHaveRocket = 1 ;
36193: LD_ADDR_EXP 100
36197: PUSH
36198: LD_INT 1
36200: ST_TO_ADDR
// end else
36201: GO 36501
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36203: LD_EXP 26
36207: PPUSH
36208: LD_STRING D16b-Pla-1
36210: PPUSH
36211: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36215: LD_EXP 1
36219: PPUSH
36220: LD_STRING D16b-JMM-1
36222: PPUSH
36223: CALL_OW 88
// wait ( 0 0$15 ) ;
36227: LD_INT 525
36229: PPUSH
36230: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36234: LD_EXP 26
36238: PPUSH
36239: LD_STRING D18-Pla-1
36241: PPUSH
36242: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36246: LD_ADDR_VAR 0 1
36250: PUSH
36251: LD_INT 22
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 21
36263: PUSH
36264: LD_INT 3
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 23
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 30
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 30
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: PPUSH
36315: CALL_OW 69
36319: ST_TO_ADDR
// if rocketTarget = 0 then
36320: LD_VAR 0 1
36324: PUSH
36325: LD_INT 0
36327: EQUAL
36328: IFFALSE 36404
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36330: LD_ADDR_VAR 0 1
36334: PUSH
36335: LD_INT 22
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 21
36347: PUSH
36348: LD_INT 3
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 23
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 30
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 30
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: PPUSH
36399: CALL_OW 69
36403: ST_TO_ADDR
// if rocketTarget = 0 then
36404: LD_VAR 0 1
36408: PUSH
36409: LD_INT 0
36411: EQUAL
36412: IFFALSE 36466
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36414: LD_ADDR_VAR 0 1
36418: PUSH
36419: LD_INT 22
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 21
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 23
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 50
36451: PUSH
36452: EMPTY
36453: LIST
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: PPUSH
36461: CALL_OW 69
36465: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36466: LD_INT 273
36468: PPUSH
36469: LD_VAR 0 1
36473: PUSH
36474: LD_INT 1
36476: ARRAY
36477: PPUSH
36478: CALL_OW 250
36482: PPUSH
36483: LD_VAR 0 1
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PPUSH
36492: CALL_OW 251
36496: PPUSH
36497: CALL_OW 116
// end ; end ;
36501: PPOPN 1
36503: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
36504: LD_EXP 97
36508: PUSH
36509: LD_INT 168070
36511: GREATEREQUAL
36512: PUSH
36513: LD_EXP 101
36517: PUSH
36518: LD_INT 6
36520: GREATEREQUAL
36521: AND
36522: PUSH
36523: LD_EXP 85
36527: PUSH
36528: LD_INT 1
36530: EQUAL
36531: AND
36532: IFFALSE 36562
36534: GO 36536
36536: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
36537: LD_EXP 26
36541: PPUSH
36542: LD_STRING D18-Pla-1
36544: PPUSH
36545: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
36549: LD_INT 273
36551: PPUSH
36552: LD_INT 244
36554: PPUSH
36555: LD_INT 187
36557: PPUSH
36558: CALL_OW 116
// end ;
36562: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
36563: LD_EXP 101
36567: PUSH
36568: LD_INT 5
36570: GREATEREQUAL
36571: IFFALSE 36764
36573: GO 36575
36575: DISABLE
36576: LD_INT 0
36578: PPUSH
// begin enable ;
36579: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
36580: LD_ADDR_VAR 0 1
36584: PUSH
36585: LD_INT 22
36587: PUSH
36588: LD_INT 6
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 30
36597: PUSH
36598: LD_INT 37
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 57
36607: PUSH
36608: EMPTY
36609: LIST
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: PPUSH
36616: CALL_OW 69
36620: PUSH
36621: FOR_IN
36622: IFFALSE 36676
// begin if See ( 1 , i ) then
36624: LD_INT 1
36626: PPUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: CALL_OW 292
36636: IFFALSE 36674
// begin disable ;
36638: DISABLE
// DialogueOn ;
36639: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
36643: LD_EXP 1
36647: PPUSH
36648: LD_STRING D17a-JMM-1
36650: PPUSH
36651: CALL_OW 88
// DialogueOff ;
36655: CALL_OW 7
// behemothStatus = 1 ;
36659: LD_ADDR_EXP 60
36663: PUSH
36664: LD_INT 1
36666: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
36667: LD_STRING M4a
36669: PPUSH
36670: CALL_OW 337
// end ; end ;
36674: GO 36621
36676: POP
36677: POP
// for i in ruBehs do
36678: LD_ADDR_VAR 0 1
36682: PUSH
36683: LD_EXP 59
36687: PUSH
36688: FOR_IN
36689: IFFALSE 36762
// begin if See ( 1 , i ) then
36691: LD_INT 1
36693: PPUSH
36694: LD_VAR 0 1
36698: PPUSH
36699: CALL_OW 292
36703: IFFALSE 36760
// begin disable ;
36705: DISABLE
// DialogueOn ;
36706: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
36710: LD_EXP 1
36714: PPUSH
36715: LD_STRING D17b-JMM-1
36717: PPUSH
36718: CALL_OW 88
// DialogueOff ;
36722: CALL_OW 7
// behemothStatus = 0 ;
36726: LD_ADDR_EXP 60
36730: PUSH
36731: LD_INT 0
36733: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
36734: LD_STRING M4b
36736: PPUSH
36737: CALL_OW 337
// wait ( 0 0$2 ) ;
36741: LD_INT 70
36743: PPUSH
36744: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36748: LD_EXP 26
36752: PPUSH
36753: LD_STRING D18-Pla-1
36755: PPUSH
36756: CALL_OW 88
// end ; end ;
36760: GO 36688
36762: POP
36763: POP
// end ;
36764: PPOPN 1
36766: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
36767: LD_EXP 26
36771: PPUSH
36772: CALL_OW 301
36776: PUSH
36777: LD_EXP 27
36781: PPUSH
36782: CALL_OW 301
36786: AND
36787: PUSH
36788: LD_INT 22
36790: PUSH
36791: LD_INT 3
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 21
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 50
36810: PUSH
36811: EMPTY
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: PPUSH
36819: CALL_OW 69
36823: PUSH
36824: LD_INT 7
36826: PUSH
36827: LD_INT 8
36829: PUSH
36830: LD_INT 9
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: PUSH
36838: LD_OWVAR 67
36842: ARRAY
36843: LESS
36844: AND
36845: IFFALSE 37521
36847: GO 36849
36849: DISABLE
36850: LD_INT 0
36852: PPUSH
36853: PPUSH
36854: PPUSH
// begin russianAI = 0 ;
36855: LD_ADDR_EXP 86
36859: PUSH
36860: LD_INT 0
36862: ST_TO_ADDR
// russianEscape = 1 ;
36863: LD_ADDR_EXP 90
36867: PUSH
36868: LD_INT 1
36870: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
36871: LD_INT 1
36873: PPUSH
36874: LD_INT 3
36876: PPUSH
36877: LD_INT 1
36879: PPUSH
36880: LD_INT 1
36882: PPUSH
36883: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
36887: LD_ADDR_VAR 0 1
36891: PUSH
36892: LD_INT 22
36894: PUSH
36895: LD_INT 3
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 21
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 24
36914: PUSH
36915: LD_INT 900
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: PPUSH
36927: CALL_OW 69
36931: PUSH
36932: FOR_IN
36933: IFFALSE 36964
// if GetSex ( i ) = sex_male then
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL_OW 258
36944: PUSH
36945: LD_INT 1
36947: EQUAL
36948: IFFALSE 36962
// begin tmp = i ;
36950: LD_ADDR_VAR 0 2
36954: PUSH
36955: LD_VAR 0 1
36959: ST_TO_ADDR
// break ;
36960: GO 36964
// end ;
36962: GO 36932
36964: POP
36965: POP
// if tmp = 0 then
36966: LD_VAR 0 2
36970: PUSH
36971: LD_INT 0
36973: EQUAL
36974: IFFALSE 37028
// begin uc_side = 3 ;
36976: LD_ADDR_OWVAR 20
36980: PUSH
36981: LD_INT 3
36983: ST_TO_ADDR
// uc_nation = 3 ;
36984: LD_ADDR_OWVAR 21
36988: PUSH
36989: LD_INT 3
36991: ST_TO_ADDR
// hc_name =  ;
36992: LD_ADDR_OWVAR 26
36996: PUSH
36997: LD_STRING 
36999: ST_TO_ADDR
// hc_gallery =  ;
37000: LD_ADDR_OWVAR 33
37004: PUSH
37005: LD_STRING 
37007: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37008: LD_INT 1
37010: PPUSH
37011: LD_INT 10
37013: PPUSH
37014: CALL_OW 381
// tmp = CreateHuman ;
37018: LD_ADDR_VAR 0 2
37022: PUSH
37023: CALL_OW 44
37027: ST_TO_ADDR
// end ; DialogueOn ;
37028: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37032: LD_VAR 0 2
37036: PPUSH
37037: LD_STRING DSurrenderRussians-RSol1-1a
37039: PPUSH
37040: CALL_OW 88
// DialogueOff ;
37044: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37048: LD_INT 22
37050: PUSH
37051: LD_INT 3
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 21
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PPUSH
37072: CALL_OW 69
37076: PPUSH
37077: CALL_OW 122
// wait ( 0 0$1 ) ;
37081: LD_INT 35
37083: PPUSH
37084: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37088: LD_INT 22
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 21
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PPUSH
37112: CALL_OW 69
37116: PPUSH
37117: LD_INT 25
37119: PPUSH
37120: CALL_OW 113
// wait ( 0 0$10 ) ;
37124: LD_INT 350
37126: PPUSH
37127: CALL_OW 67
// PrepareOmarArmy ;
37131: CALL 38141 0 0
// missionStage = 7 ;
37135: LD_ADDR_EXP 101
37139: PUSH
37140: LD_INT 7
37142: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37143: LD_INT 157
37145: PPUSH
37146: LD_INT 8
37148: PPUSH
37149: LD_INT 1
37151: PPUSH
37152: LD_INT 8
37154: NEG
37155: PPUSH
37156: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37160: LD_INT 157
37162: PPUSH
37163: LD_INT 8
37165: PPUSH
37166: CALL_OW 84
// DialogueOn ;
37170: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37174: LD_EXP 32
37178: PPUSH
37179: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37183: LD_EXP 1
37187: PPUSH
37188: LD_STRING D19-JMM-1
37190: PPUSH
37191: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37195: LD_INT 22
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 26
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 25
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 25
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 25
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 25
37250: PUSH
37251: LD_INT 4
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 25
37260: PUSH
37261: LD_INT 5
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 25
37270: PUSH
37271: LD_INT 8
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: PPUSH
37292: CALL_OW 69
37296: PPUSH
37297: LD_STRING D19-Sol1-1
37299: PPUSH
37300: LD_STRING D5-FSol1-1
37302: PPUSH
37303: CALL 6887 0 3
// Say ( JMM , D19-JMM-2 ) ;
37307: LD_EXP 1
37311: PPUSH
37312: LD_STRING D19-JMM-2
37314: PPUSH
37315: CALL_OW 88
// DialogueOff ;
37319: CALL_OW 7
// LaunchMines ;
37323: CALL 37630 0 0
// wait ( 0 0$3 ) ;
37327: LD_INT 105
37329: PPUSH
37330: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37334: LD_ADDR_VAR 0 3
37338: PUSH
37339: LD_INT 22
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 21
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PPUSH
37363: CALL_OW 69
37367: PUSH
37368: LD_INT 22
37370: PUSH
37371: LD_INT 2
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 21
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 25
37390: PUSH
37391: LD_INT 4
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: PPUSH
37403: CALL_OW 69
37407: DIFF
37408: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
37409: LD_ADDR_VAR 0 3
37413: PUSH
37414: LD_VAR 0 3
37418: PUSH
37419: LD_INT 22
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 21
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PPUSH
37443: CALL_OW 69
37447: ADD
37448: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
37449: LD_VAR 0 3
37453: PPUSH
37454: LD_INT 178
37456: PPUSH
37457: LD_INT 66
37459: PPUSH
37460: CALL_OW 114
// wait ( 0 0$10 ) ;
37464: LD_INT 350
37466: PPUSH
37467: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
37471: LD_INT 22
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 21
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 25
37493: PUSH
37494: LD_INT 4
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: PPUSH
37506: CALL_OW 69
37510: PPUSH
37511: LD_INT 177
37513: PPUSH
37514: LD_INT 69
37516: PPUSH
37517: CALL_OW 158
// end ;
37521: PPOPN 3
37523: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
37524: LD_EXP 90
37528: PUSH
37529: LD_INT 1
37531: EQUAL
37532: PUSH
37533: LD_INT 25
37535: PPUSH
37536: LD_INT 22
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 21
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PPUSH
37560: CALL_OW 70
37564: AND
37565: IFFALSE 37627
37567: GO 37569
37569: DISABLE
37570: LD_INT 0
37572: PPUSH
// begin enable ;
37573: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
37574: LD_ADDR_VAR 0 1
37578: PUSH
37579: LD_INT 25
37581: PPUSH
37582: LD_INT 22
37584: PUSH
37585: LD_INT 3
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 21
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PPUSH
37606: CALL_OW 70
37610: PUSH
37611: FOR_IN
37612: IFFALSE 37625
// RemoveUnit ( i ) ;
37614: LD_VAR 0 1
37618: PPUSH
37619: CALL_OW 64
37623: GO 37611
37625: POP
37626: POP
// end ;
37627: PPOPN 1
37629: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
37630: LD_INT 0
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
37637: LD_ADDR_VAR 0 2
37641: PUSH
37642: LD_INT 168
37644: PUSH
37645: LD_INT 18
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 169
37654: PUSH
37655: LD_INT 20
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 167
37664: PUSH
37665: LD_INT 20
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 164
37674: PUSH
37675: LD_INT 18
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 164
37684: PUSH
37685: LD_INT 19
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 163
37694: PUSH
37695: LD_INT 19
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 164
37704: PUSH
37705: LD_INT 21
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 165
37714: PUSH
37715: LD_INT 21
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 163
37724: PUSH
37725: LD_INT 20
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 164
37734: PUSH
37735: LD_INT 22
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 162
37744: PUSH
37745: LD_INT 20
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_INT 169
37772: PUSH
37773: LD_INT 34
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 169
37782: PUSH
37783: LD_INT 35
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 167
37792: PUSH
37793: LD_INT 32
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 170
37802: PUSH
37803: LD_INT 31
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 173
37812: PUSH
37813: LD_INT 35
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 174
37822: PUSH
37823: LD_INT 39
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: ST_TO_ADDR
// for i = 1 to mines_pos do
37838: LD_ADDR_VAR 0 4
37842: PUSH
37843: DOUBLE
37844: LD_INT 1
37846: DEC
37847: ST_TO_ADDR
37848: LD_VAR 0 2
37852: PUSH
37853: FOR_TO
37854: IFFALSE 38066
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
37856: LD_VAR 0 2
37860: PUSH
37861: LD_VAR 0 4
37865: ARRAY
37866: PUSH
37867: LD_INT 1
37869: ARRAY
37870: PPUSH
37871: LD_VAR 0 2
37875: PUSH
37876: LD_VAR 0 4
37880: ARRAY
37881: PUSH
37882: LD_INT 2
37884: ARRAY
37885: PPUSH
37886: LD_INT 1
37888: PPUSH
37889: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37893: LD_INT 1
37895: PPUSH
37896: LD_INT 3
37898: PPUSH
37899: CALL_OW 12
37903: PPUSH
37904: CALL_OW 67
// if i < mines_pos then
37908: LD_VAR 0 4
37912: PUSH
37913: LD_VAR 0 2
37917: LESS
37918: IFFALSE 37956
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
37920: LD_VAR 0 2
37924: PUSH
37925: LD_VAR 0 4
37929: ARRAY
37930: PUSH
37931: LD_INT 1
37933: ARRAY
37934: PPUSH
37935: LD_VAR 0 2
37939: PUSH
37940: LD_VAR 0 4
37944: ARRAY
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: PPUSH
37950: CALL_OW 348
37954: GO 38064
// begin for j = 1 to mines_pos1 do
37956: LD_ADDR_VAR 0 5
37960: PUSH
37961: DOUBLE
37962: LD_INT 1
37964: DEC
37965: ST_TO_ADDR
37966: LD_VAR 0 3
37970: PUSH
37971: FOR_TO
37972: IFFALSE 38028
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
37974: LD_VAR 0 3
37978: PUSH
37979: LD_VAR 0 5
37983: ARRAY
37984: PUSH
37985: LD_INT 1
37987: ARRAY
37988: PPUSH
37989: LD_VAR 0 3
37993: PUSH
37994: LD_VAR 0 5
37998: ARRAY
37999: PUSH
38000: LD_INT 2
38002: ARRAY
38003: PPUSH
38004: LD_INT 1
38006: PPUSH
38007: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38011: LD_INT 1
38013: PPUSH
38014: LD_INT 3
38016: PPUSH
38017: CALL_OW 12
38021: PPUSH
38022: CALL_OW 67
// end ;
38026: GO 37971
38028: POP
38029: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38030: LD_VAR 0 2
38034: PUSH
38035: LD_VAR 0 4
38039: ARRAY
38040: PUSH
38041: LD_INT 1
38043: ARRAY
38044: PPUSH
38045: LD_VAR 0 2
38049: PUSH
38050: LD_VAR 0 4
38054: ARRAY
38055: PUSH
38056: LD_INT 2
38058: ARRAY
38059: PPUSH
38060: CALL_OW 347
// end ; end ;
38064: GO 37853
38066: POP
38067: POP
// end ;
38068: LD_VAR 0 1
38072: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38073: LD_EXP 101
38077: PUSH
38078: LD_INT 7
38080: EQUAL
38081: PUSH
38082: LD_EXP 31
38086: PPUSH
38087: CALL_OW 301
38091: AND
38092: PUSH
38093: LD_EXP 32
38097: PPUSH
38098: CALL_OW 302
38102: AND
38103: IFFALSE 38140
38105: GO 38107
38107: DISABLE
// begin DialogueOn ;
38108: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38112: LD_EXP 1
38116: PPUSH
38117: LD_STRING D19a-JMM-1
38119: PPUSH
38120: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38124: LD_EXP 32
38128: PPUSH
38129: LD_STRING D19a-Hke-1
38131: PPUSH
38132: CALL_OW 88
// DialogueOff ;
38136: CALL_OW 7
// end ; end_of_file
38140: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38141: LD_INT 0
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
// uc_side = 2 ;
38148: LD_ADDR_OWVAR 20
38152: PUSH
38153: LD_INT 2
38155: ST_TO_ADDR
// uc_nation = 2 ;
38156: LD_ADDR_OWVAR 21
38160: PUSH
38161: LD_INT 2
38163: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38164: LD_ADDR_EXP 31
38168: PUSH
38169: LD_STRING Omar
38171: PPUSH
38172: LD_INT 0
38174: PPUSH
38175: CALL 6607 0 2
38179: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38180: LD_ADDR_EXP 32
38184: PUSH
38185: LD_STRING Heike
38187: PPUSH
38188: LD_INT 0
38190: PPUSH
38191: CALL 6607 0 2
38195: ST_TO_ADDR
// if KhatamStatus = 1 then
38196: LD_EXP 83
38200: PUSH
38201: LD_INT 1
38203: EQUAL
38204: IFFALSE 38219
// Khatam = NewCharacter ( Khatam ) ;
38206: LD_ADDR_EXP 33
38210: PUSH
38211: LD_STRING Khatam
38213: PPUSH
38214: CALL_OW 25
38218: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38219: LD_EXP 32
38223: PPUSH
38224: LD_INT 26
38226: PPUSH
38227: LD_INT 0
38229: PPUSH
38230: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38234: LD_EXP 33
38238: PPUSH
38239: LD_INT 26
38241: PPUSH
38242: LD_INT 0
38244: PPUSH
38245: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38249: LD_ADDR_VAR 0 2
38253: PUSH
38254: DOUBLE
38255: LD_INT 1
38257: DEC
38258: ST_TO_ADDR
38259: LD_INT 5
38261: PUSH
38262: LD_INT 6
38264: PUSH
38265: LD_INT 7
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: PUSH
38273: LD_OWVAR 67
38277: ARRAY
38278: PUSH
38279: FOR_TO
38280: IFFALSE 38335
// begin hc_name =  ;
38282: LD_ADDR_OWVAR 26
38286: PUSH
38287: LD_STRING 
38289: ST_TO_ADDR
// hc_gallery =  ;
38290: LD_ADDR_OWVAR 33
38294: PUSH
38295: LD_STRING 
38297: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38298: LD_INT 0
38300: PPUSH
38301: LD_INT 8
38303: PPUSH
38304: CALL_OW 381
// un = CreateHuman ;
38308: LD_ADDR_VAR 0 3
38312: PUSH
38313: CALL_OW 44
38317: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38318: LD_VAR 0 3
38322: PPUSH
38323: LD_INT 26
38325: PPUSH
38326: LD_INT 0
38328: PPUSH
38329: CALL_OW 49
// end ;
38333: GO 38279
38335: POP
38336: POP
// for i := 1 to 4 do
38337: LD_ADDR_VAR 0 2
38341: PUSH
38342: DOUBLE
38343: LD_INT 1
38345: DEC
38346: ST_TO_ADDR
38347: LD_INT 4
38349: PUSH
38350: FOR_TO
38351: IFFALSE 38406
// begin hc_name =  ;
38353: LD_ADDR_OWVAR 26
38357: PUSH
38358: LD_STRING 
38360: ST_TO_ADDR
// hc_gallery =  ;
38361: LD_ADDR_OWVAR 33
38365: PUSH
38366: LD_STRING 
38368: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38369: LD_INT 0
38371: PPUSH
38372: LD_INT 8
38374: PPUSH
38375: CALL_OW 384
// un = CreateHuman ;
38379: LD_ADDR_VAR 0 3
38383: PUSH
38384: CALL_OW 44
38388: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38389: LD_VAR 0 3
38393: PPUSH
38394: LD_INT 26
38396: PPUSH
38397: LD_INT 0
38399: PPUSH
38400: CALL_OW 49
// end ;
38404: GO 38350
38406: POP
38407: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
38408: LD_ADDR_VAR 0 2
38412: PUSH
38413: DOUBLE
38414: LD_INT 1
38416: DEC
38417: ST_TO_ADDR
38418: LD_INT 8
38420: PUSH
38421: LD_INT 9
38423: PUSH
38424: LD_INT 10
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: PUSH
38432: LD_OWVAR 67
38436: ARRAY
38437: PUSH
38438: FOR_TO
38439: IFFALSE 38527
// begin vc_engine = 3 ;
38441: LD_ADDR_OWVAR 39
38445: PUSH
38446: LD_INT 3
38448: ST_TO_ADDR
// vc_control = 5 ;
38449: LD_ADDR_OWVAR 38
38453: PUSH
38454: LD_INT 5
38456: ST_TO_ADDR
// vc_chassis = 14 ;
38457: LD_ADDR_OWVAR 37
38461: PUSH
38462: LD_INT 14
38464: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
38465: LD_ADDR_OWVAR 40
38469: PUSH
38470: LD_INT 27
38472: PUSH
38473: LD_INT 26
38475: PUSH
38476: LD_INT 28
38478: PUSH
38479: LD_INT 25
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PPUSH
38491: LD_INT 3
38493: PPUSH
38494: CALL_OW 12
38498: ARRAY
38499: ST_TO_ADDR
// veh = CreateVehicle ;
38500: LD_ADDR_VAR 0 4
38504: PUSH
38505: CALL_OW 45
38509: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
38510: LD_VAR 0 4
38514: PPUSH
38515: LD_INT 26
38517: PPUSH
38518: LD_INT 0
38520: PPUSH
38521: CALL_OW 49
// end ;
38525: GO 38438
38527: POP
38528: POP
// vc_chassis := 31 ;
38529: LD_ADDR_OWVAR 37
38533: PUSH
38534: LD_INT 31
38536: ST_TO_ADDR
// vc_control := control_rider ;
38537: LD_ADDR_OWVAR 38
38541: PUSH
38542: LD_INT 4
38544: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
38545: LD_ADDR_VAR 0 5
38549: PUSH
38550: CALL_OW 45
38554: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
38555: LD_VAR 0 5
38559: PPUSH
38560: LD_INT 26
38562: PPUSH
38563: LD_INT 0
38565: PPUSH
38566: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
38570: LD_EXP 31
38574: PPUSH
38575: LD_VAR 0 5
38579: PPUSH
38580: CALL_OW 52
// end ; end_of_file
38584: LD_VAR 0 1
38588: RET
// every 1 1$30 trigger missionStage > 0 do
38589: LD_EXP 101
38593: PUSH
38594: LD_INT 0
38596: GREATER
38597: IFFALSE 38624
38599: GO 38601
38601: DISABLE
// begin enable ;
38602: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
38603: LD_INT 3
38605: PPUSH
38606: LD_INT 5
38608: PPUSH
38609: CALL_OW 12
38613: PPUSH
38614: LD_INT 27
38616: PPUSH
38617: LD_INT 1
38619: PPUSH
38620: CALL_OW 55
// end ; end_of_file
38624: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
38625: LD_EXP 101
38629: PUSH
38630: LD_INT 7
38632: EQUAL
38633: PUSH
38634: LD_INT 22
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 21
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PPUSH
38658: CALL_OW 69
38662: PUSH
38663: LD_INT 0
38665: EQUAL
38666: AND
38667: PUSH
38668: LD_INT 22
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 21
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 50
38690: PUSH
38691: EMPTY
38692: LIST
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: PPUSH
38699: CALL_OW 69
38703: PUSH
38704: LD_INT 0
38706: EQUAL
38707: AND
38708: IFFALSE 39197
38710: GO 38712
38712: DISABLE
// begin DialogueOn ;
38713: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
38717: LD_EXP 1
38721: PPUSH
38722: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
38726: LD_EXP 1
38730: PPUSH
38731: LD_STRING D20-JMM-1
38733: PPUSH
38734: CALL_OW 88
// if IsOK ( Joan ) then
38738: LD_EXP 2
38742: PPUSH
38743: CALL_OW 302
38747: IFFALSE 38761
// Say ( Joan , D20-Joan-1 ) ;
38749: LD_EXP 2
38753: PPUSH
38754: LD_STRING D20-Joan-1
38756: PPUSH
38757: CALL_OW 88
// if IsOk ( Lisa ) then
38761: LD_EXP 4
38765: PPUSH
38766: CALL_OW 302
38770: IFFALSE 38784
// Say ( Lisa , D20-Lisa-1 ) ;
38772: LD_EXP 4
38776: PPUSH
38777: LD_STRING D20-Lisa-1
38779: PPUSH
38780: CALL_OW 88
// if IsOk ( Donaldson ) then
38784: LD_EXP 5
38788: PPUSH
38789: CALL_OW 302
38793: IFFALSE 38807
// Say ( Donaldson , D20-Don-1 ) ;
38795: LD_EXP 5
38799: PPUSH
38800: LD_STRING D20-Don-1
38802: PPUSH
38803: CALL_OW 88
// if IsOK ( Cornel ) then
38807: LD_EXP 12
38811: PPUSH
38812: CALL_OW 302
38816: IFFALSE 38830
// Say ( Cornel , D20-Corn-1 ) ;
38818: LD_EXP 12
38822: PPUSH
38823: LD_STRING D20-Corn-1
38825: PPUSH
38826: CALL_OW 88
// if IsOk ( Denis ) then
38830: LD_EXP 8
38834: PPUSH
38835: CALL_OW 302
38839: IFFALSE 38853
// Say ( Denis , D20-Den-1 ) ;
38841: LD_EXP 8
38845: PPUSH
38846: LD_STRING D20-Den-1
38848: PPUSH
38849: CALL_OW 88
// if IsOk ( Bobby ) then
38853: LD_EXP 6
38857: PPUSH
38858: CALL_OW 302
38862: IFFALSE 38876
// Say ( Bobby , D20-Bobby-1 ) ;
38864: LD_EXP 6
38868: PPUSH
38869: LD_STRING D20-Bobby-1
38871: PPUSH
38872: CALL_OW 88
// if IsOk ( Gladstone ) then
38876: LD_EXP 10
38880: PPUSH
38881: CALL_OW 302
38885: IFFALSE 38899
// Say ( Gladstone , D20-Glad-1 ) ;
38887: LD_EXP 10
38891: PPUSH
38892: LD_STRING D20-Glad-1
38894: PPUSH
38895: CALL_OW 88
// if IsOk ( Cyrus ) then
38899: LD_EXP 7
38903: PPUSH
38904: CALL_OW 302
38908: IFFALSE 38922
// Say ( Cyrus , D20-Cyrus-1 ) ;
38910: LD_EXP 7
38914: PPUSH
38915: LD_STRING D20-Cyrus-1
38917: PPUSH
38918: CALL_OW 88
// if IsOk ( Stevens ) then
38922: LD_EXP 3
38926: PPUSH
38927: CALL_OW 302
38931: IFFALSE 38945
// Say ( Stevens , D20-Huck-1 ) ;
38933: LD_EXP 3
38937: PPUSH
38938: LD_STRING D20-Huck-1
38940: PPUSH
38941: CALL_OW 88
// if IsOk ( Brown ) then
38945: LD_EXP 9
38949: PPUSH
38950: CALL_OW 302
38954: IFFALSE 38968
// Say ( Brown , D20-Brown-1 ) ;
38956: LD_EXP 9
38960: PPUSH
38961: LD_STRING D20-Brown-1
38963: PPUSH
38964: CALL_OW 88
// if IsOk ( Gary ) then
38968: LD_EXP 13
38972: PPUSH
38973: CALL_OW 302
38977: IFFALSE 38991
// Say ( Gary , D20-Gary-1 ) ;
38979: LD_EXP 13
38983: PPUSH
38984: LD_STRING D20-Gary-1
38986: PPUSH
38987: CALL_OW 88
// if IsOk ( Connie ) then
38991: LD_EXP 16
38995: PPUSH
38996: CALL_OW 302
39000: IFFALSE 39014
// Say ( Connie , D20-Con-1 ) ;
39002: LD_EXP 16
39006: PPUSH
39007: LD_STRING D20-Con-1
39009: PPUSH
39010: CALL_OW 88
// if IsOk ( Kurt ) then
39014: LD_EXP 30
39018: PPUSH
39019: CALL_OW 302
39023: IFFALSE 39037
// Say ( Kurt , D20-Kurt-1 ) ;
39025: LD_EXP 30
39029: PPUSH
39030: LD_STRING D20-Kurt-1
39032: PPUSH
39033: CALL_OW 88
// if IsOk ( Kikuchi ) then
39037: LD_EXP 15
39041: PPUSH
39042: CALL_OW 302
39046: IFFALSE 39060
// Say ( Kikuchi , D20-Yam-1 ) ;
39048: LD_EXP 15
39052: PPUSH
39053: LD_STRING D20-Yam-1
39055: PPUSH
39056: CALL_OW 88
// if IsOk ( Frank ) then
39060: LD_EXP 14
39064: PPUSH
39065: CALL_OW 302
39069: IFFALSE 39083
// Say ( Frank , D20-Frank-1 ) ;
39071: LD_EXP 14
39075: PPUSH
39076: LD_STRING D20-Frank-1
39078: PPUSH
39079: CALL_OW 88
// DialogueOff ;
39083: CALL_OW 7
// if AllianceEscape = 1 then
39087: LD_EXP 91
39091: PUSH
39092: LD_INT 1
39094: EQUAL
39095: IFFALSE 39109
// AddMedal ( Roth , 1 ) else
39097: LD_STRING Roth
39099: PPUSH
39100: LD_INT 1
39102: PPUSH
39103: CALL_OW 101
39107: GO 39120
// AddMedal ( Roth , - 1 ) ;
39109: LD_STRING Roth
39111: PPUSH
39112: LD_INT 1
39114: NEG
39115: PPUSH
39116: CALL_OW 101
// if behemothStatus = 1 then
39120: LD_EXP 60
39124: PUSH
39125: LD_INT 1
39127: EQUAL
39128: IFFALSE 39142
// AddMedal ( Project , 1 ) else
39130: LD_STRING Project
39132: PPUSH
39133: LD_INT 1
39135: PPUSH
39136: CALL_OW 101
39140: GO 39153
// AddMedal ( Project , - 1 ) ;
39142: LD_STRING Project
39144: PPUSH
39145: LD_INT 1
39147: NEG
39148: PPUSH
39149: CALL_OW 101
// if unitLost = 0 then
39153: LD_EXP 98
39157: PUSH
39158: LD_INT 0
39160: EQUAL
39161: IFFALSE 39175
// AddMedal ( NoLosses , 1 ) else
39163: LD_STRING NoLosses
39165: PPUSH
39166: LD_INT 1
39168: PPUSH
39169: CALL_OW 101
39173: GO 39186
// AddMedal ( NoLosses , - 1 ) ;
39175: LD_STRING NoLosses
39177: PPUSH
39178: LD_INT 1
39180: NEG
39181: PPUSH
39182: CALL_OW 101
// GiveMedals ( MAIN ) ;
39186: LD_STRING MAIN
39188: PPUSH
39189: CALL_OW 102
// YouWin ;
39193: CALL_OW 103
// end ; end_of_file
39197: END
// every 0 0$1 trigger IsDead ( JMM ) do
39198: LD_EXP 1
39202: PPUSH
39203: CALL_OW 301
39207: IFFALSE 39219
39209: GO 39211
39211: DISABLE
// YouLost ( JMM ) ;
39212: LD_STRING JMM
39214: PPUSH
39215: CALL_OW 104
39219: END
