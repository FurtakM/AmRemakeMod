// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 103
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// PrepareHeroes ;
 378: CALL 727 0 0
// PrepareHeroesFromEpsilon ;
 382: CALL 1264 0 0
// PrepareRandoms ;
 386: CALL 1608 0 0
// PrepareLegion ;
 390: CALL 3851 0 0
// PrepareRussians ;
 394: CALL 4248 0 0
// PrepareAlliance ;
 398: CALL 5995 0 0
// PrepareDifficulty ;
 402: CALL 7564 0 0
// SetBName ( RuDep2 , zhukov ) ;
 406: LD_INT 23
 408: PPUSH
 409: LD_STRING zhukov
 411: PPUSH
 412: CALL_OW 500
// end ;
 416: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 417: LD_EXP 103
 421: PUSH
 422: LD_INT 1
 424: EQUAL
 425: IFFALSE 724
 427: GO 429
 429: DISABLE
 430: LD_INT 0
 432: PPUSH
// begin enable ;
 433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 21
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PPUSH
 463: CALL_OW 69
 467: PUSH
 468: FOR_IN
 469: IFFALSE 485
// SetLives ( i , 1000 ) ;
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 1000
 478: PPUSH
 479: CALL_OW 234
 483: GO 468
 485: POP
 486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 487: LD_ADDR_VAR 0 1
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 30
 507: PUSH
 508: LD_INT 0
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 30
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL_OW 69
 538: PUSH
 539: FOR_IN
 540: IFFALSE 564
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 542: LD_VAR 0 1
 546: PPUSH
 547: CALL_OW 274
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: LD_INT 9999
 557: PPUSH
 558: CALL_OW 277
 562: GO 539
 564: POP
 565: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 566: LD_ADDR_VAR 0 1
 570: PUSH
 571: LD_INT 22
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 30
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 69
 617: PUSH
 618: FOR_IN
 619: IFFALSE 643
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 621: LD_VAR 0 1
 625: PPUSH
 626: CALL_OW 274
 630: PPUSH
 631: LD_INT 2
 633: PPUSH
 634: LD_INT 9999
 636: PPUSH
 637: CALL_OW 277
 641: GO 618
 643: POP
 644: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 645: LD_ADDR_VAR 0 1
 649: PUSH
 650: LD_INT 22
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 30
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: FOR_IN
 698: IFFALSE 722
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 700: LD_VAR 0 1
 704: PPUSH
 705: CALL_OW 274
 709: PPUSH
 710: LD_INT 3
 712: PPUSH
 713: LD_INT 9999
 715: PPUSH
 716: CALL_OW 277
 720: GO 697
 722: POP
 723: POP
// end ; end_of_file
 724: PPOPN 1
 726: END
// export function PrepareHeroes ; begin
 727: LD_INT 0
 729: PPUSH
// uc_side = 1 ;
 730: LD_ADDR_OWVAR 20
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// uc_nation = 1 ;
 738: LD_ADDR_OWVAR 21
 742: PUSH
 743: LD_INT 1
 745: ST_TO_ADDR
// if JMMVeh = [ ] then
 746: LD_EXP 78
 750: PUSH
 751: EMPTY
 752: EQUAL
 753: IFFALSE 799
// begin vc_engine = 3 ;
 755: LD_ADDR_OWVAR 39
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_control = 1 ;
 763: LD_ADDR_OWVAR 38
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// vc_chassis = 5 ;
 771: LD_ADDR_OWVAR 37
 775: PUSH
 776: LD_INT 5
 778: ST_TO_ADDR
// vc_weapon = 9 ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 9
 786: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 787: LD_ADDR_EXP 24
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// end else
 797: GO 881
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 799: LD_ADDR_OWVAR 37
 803: PUSH
 804: LD_EXP 78
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_INT 1
 815: ARRAY
 816: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 817: LD_ADDR_OWVAR 39
 821: PUSH
 822: LD_EXP 78
 826: PUSH
 827: LD_INT 2
 829: ARRAY
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 835: LD_ADDR_OWVAR 38
 839: PUSH
 840: LD_EXP 78
 844: PUSH
 845: LD_INT 3
 847: ARRAY
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_EXP 78
 862: PUSH
 863: LD_INT 4
 865: ARRAY
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 871: LD_ADDR_EXP 24
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 881: LD_EXP 79
 885: PUSH
 886: EMPTY
 887: EQUAL
 888: NOT
 889: IFFALSE 973
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 891: LD_ADDR_OWVAR 37
 895: PUSH
 896: LD_EXP 79
 900: PUSH
 901: LD_INT 1
 903: ARRAY
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 909: LD_ADDR_OWVAR 39
 913: PUSH
 914: LD_EXP 79
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 927: LD_ADDR_OWVAR 38
 931: PUSH
 932: LD_EXP 79
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 945: LD_ADDR_OWVAR 40
 949: PUSH
 950: LD_EXP 79
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 963: LD_ADDR_EXP 25
 967: PUSH
 968: CALL_OW 45
 972: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 973: LD_EXP 24
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
 985: LD_EXP 25
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
 997: LD_EXP 24
1001: PPUSH
1002: LD_INT 99
1004: PPUSH
1005: LD_INT 154
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// if JMMGirlVeh then
1015: LD_EXP 79
1019: IFFALSE 1039
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1021: LD_EXP 25
1025: PPUSH
1026: LD_INT 98
1028: PPUSH
1029: LD_INT 159
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1039: LD_ADDR_EXP 1
1043: PUSH
1044: LD_STRING 14_JMM
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 6640 0 2
1054: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1055: LD_EXP 1
1059: PPUSH
1060: LD_EXP 24
1064: PPUSH
1065: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1069: LD_EXP 79
1073: PUSH
1074: EMPTY
1075: EQUAL
1076: NOT
1077: IFFALSE 1199
// begin if JMMGirl = 1 then
1079: LD_EXP 80
1083: PUSH
1084: LD_INT 1
1086: EQUAL
1087: IFFALSE 1119
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1089: LD_ADDR_EXP 2
1093: PUSH
1094: LD_STRING 14_Joan
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: CALL 6640 0 2
1104: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1105: LD_EXP 2
1109: PPUSH
1110: LD_EXP 25
1114: PPUSH
1115: CALL_OW 52
// end ; if JMMGirl = 2 then
1119: LD_EXP 80
1123: PUSH
1124: LD_INT 2
1126: EQUAL
1127: IFFALSE 1159
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1129: LD_ADDR_EXP 4
1133: PUSH
1134: LD_STRING 14_Lisa
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 6640 0 2
1144: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1145: LD_EXP 4
1149: PPUSH
1150: LD_EXP 25
1154: PPUSH
1155: CALL_OW 52
// end ; if JMMGirl = 3 then
1159: LD_EXP 80
1163: PUSH
1164: LD_INT 3
1166: EQUAL
1167: IFFALSE 1199
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_STRING 14_Connie
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 6640 0 2
1184: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1185: LD_EXP 16
1189: PPUSH
1190: LD_EXP 25
1194: PPUSH
1195: CALL_OW 52
// end ; end ; uc_side = 4 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 4
1206: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1207: LD_ADDR_EXP 17
1211: PUSH
1212: LD_STRING Powell
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL 6640 0 2
1222: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1223: LD_EXP 17
1227: PPUSH
1228: LD_INT 42
1230: PPUSH
1231: LD_INT 62
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1244: LD_EXP 17
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 63
1254: PPUSH
1255: CALL_OW 118
// end ;
1259: LD_VAR 0 1
1263: RET
// export function PrepareHeroesFromEpsilon ; begin
1264: LD_INT 0
1266: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1267: LD_ADDR_EXP 4
1271: PUSH
1272: LD_STRING Lisa
1274: PPUSH
1275: CALL 6697 0 1
1279: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1280: LD_ADDR_EXP 5
1284: PUSH
1285: LD_STRING Donaldson
1287: PPUSH
1288: CALL 6697 0 1
1292: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1293: LD_ADDR_EXP 6
1297: PUSH
1298: LD_STRING Bobby
1300: PPUSH
1301: CALL 6697 0 1
1305: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_STRING Cyrus
1313: PPUSH
1314: CALL 6697 0 1
1318: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1319: LD_ADDR_EXP 8
1323: PUSH
1324: LD_STRING Denis
1326: PPUSH
1327: CALL 6697 0 1
1331: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1332: LD_ADDR_EXP 9
1336: PUSH
1337: LD_STRING Brown
1339: PPUSH
1340: CALL 6697 0 1
1344: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1345: LD_ADDR_EXP 10
1349: PUSH
1350: LD_STRING Gladstone
1352: PPUSH
1353: CALL 6697 0 1
1357: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1358: LD_ADDR_EXP 11
1362: PUSH
1363: LD_STRING Houten
1365: PPUSH
1366: CALL 6697 0 1
1370: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1371: LD_ADDR_EXP 12
1375: PUSH
1376: LD_STRING Cornel
1378: PPUSH
1379: CALL 6697 0 1
1383: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1384: LD_ADDR_EXP 13
1388: PUSH
1389: LD_STRING Gary
1391: PPUSH
1392: CALL 6697 0 1
1396: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1397: LD_ADDR_EXP 14
1401: PUSH
1402: LD_STRING Frank
1404: PPUSH
1405: CALL 6697 0 1
1409: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1410: LD_ADDR_EXP 15
1414: PUSH
1415: LD_STRING Kikuchi
1417: PPUSH
1418: CALL 6697 0 1
1422: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1423: LD_EXP 4
1427: PPUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 6
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_INT 6
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_INT 6
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1483: LD_EXP 8
1487: PPUSH
1488: LD_INT 6
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 6
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_INT 6
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1528: LD_EXP 11
1532: PPUSH
1533: LD_INT 6
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1543: LD_EXP 12
1547: PPUSH
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1558: LD_EXP 13
1562: PPUSH
1563: LD_INT 6
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1573: LD_EXP 14
1577: PPUSH
1578: LD_INT 6
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_INT 6
1595: PPUSH
1596: LD_INT 0
1598: PPUSH
1599: CALL_OW 49
// end ;
1603: LD_VAR 0 1
1607: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1608: LD_INT 0
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
1614: PPUSH
// uc_side = 4 ;
1615: LD_ADDR_OWVAR 20
1619: PUSH
1620: LD_INT 4
1622: ST_TO_ADDR
// uc_nation = 1 ;
1623: LD_ADDR_OWVAR 21
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1631: LD_ADDR_EXP 18
1635: PUSH
1636: LD_STRING 13s_others
1638: PPUSH
1639: CALL_OW 31
1643: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_INT 22
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 69
1677: PUSH
1678: LD_EXP 17
1682: PUSH
1683: EMPTY
1684: LIST
1685: DIFF
1686: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1687: LD_ADDR_VAR 0 5
1691: PUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 6827 0 1
1701: ST_TO_ADDR
// if others13 >= 8 then
1702: LD_EXP 18
1706: PUSH
1707: LD_INT 8
1709: GREATEREQUAL
1710: IFFALSE 1771
// begin for i = 1 to 8 do
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_INT 8
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1767
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1728: LD_EXP 18
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1747: LD_ADDR_EXP 18
1751: PUSH
1752: LD_EXP 18
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 3
1764: ST_TO_ADDR
// end ;
1765: GO 1725
1767: POP
1768: POP
// end else
1769: GO 1830
// begin for i = 1 to others13 do
1771: LD_ADDR_VAR 0 2
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_EXP 18
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1828
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1789: LD_EXP 18
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_INT 6
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1808: LD_ADDR_EXP 18
1812: PUSH
1813: LD_EXP 18
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 3
1825: ST_TO_ADDR
// end ;
1826: GO 1786
1828: POP
1829: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: PUSH
1864: LD_EXP 17
1868: PUSH
1869: EMPTY
1870: LIST
1871: DIFF
1872: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1873: LD_ADDR_VAR 0 5
1877: PUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL 6827 0 1
1887: ST_TO_ADDR
// if others13 >= 6 then
1888: LD_EXP 18
1892: PUSH
1893: LD_INT 6
1895: GREATEREQUAL
1896: IFFALSE 1957
// begin for i = 1 to 6 do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: DOUBLE
1904: LD_INT 1
1906: DEC
1907: ST_TO_ADDR
1908: LD_INT 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 1953
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1914: LD_EXP 18
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: LD_INT 6
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1933: LD_ADDR_EXP 18
1937: PUSH
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: CALL_OW 3
1950: ST_TO_ADDR
// end ;
1951: GO 1911
1953: POP
1954: POP
// end else
1955: GO 2016
// begin for i = 1 to others13 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_EXP 18
1971: PUSH
1972: FOR_TO
1973: IFFALSE 2014
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1975: LD_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PPUSH
1984: LD_INT 6
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1994: LD_ADDR_EXP 18
1998: PUSH
1999: LD_EXP 18
2003: PPUSH
2004: LD_INT 1
2006: PPUSH
2007: CALL_OW 3
2011: ST_TO_ADDR
// end ;
2012: GO 1972
2014: POP
2015: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2016: LD_ADDR_VAR 0 4
2020: PUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_EXP 17
2054: PUSH
2055: EMPTY
2056: LIST
2057: DIFF
2058: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2059: LD_ADDR_VAR 0 5
2063: PUSH
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL 6827 0 1
2073: ST_TO_ADDR
// if heroLenght < 19 then
2074: LD_VAR 0 5
2078: PUSH
2079: LD_INT 19
2081: LESS
2082: IFFALSE 2180
// for i = 1 to 19 - heroLenght do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 19
2096: PUSH
2097: LD_VAR 0 5
2101: MINUS
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2178
// begin hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: CALL_OW 12
2135: PPUSH
2136: LD_INT 6
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: CALL_OW 12
2146: PPUSH
2147: CALL_OW 380
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_INT 6
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// end ;
2176: GO 2103
2178: POP
2179: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 17
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: LD_EXP 2
2228: PUSH
2229: LD_EXP 3
2233: PUSH
2234: LD_EXP 4
2238: PUSH
2239: LD_EXP 5
2243: PUSH
2244: LD_EXP 6
2248: PUSH
2249: LD_EXP 7
2253: PUSH
2254: LD_EXP 8
2258: PUSH
2259: LD_EXP 9
2263: PUSH
2264: LD_EXP 10
2268: PUSH
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 12
2278: PUSH
2279: LD_EXP 13
2283: PUSH
2284: LD_EXP 14
2288: PUSH
2289: LD_EXP 15
2293: PUSH
2294: LD_EXP 16
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: DIFF
2318: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2319: LD_ADDR_EXP 65
2323: PUSH
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_INT 1
2331: PPUSH
2332: CALL 7197 0 2
2336: ST_TO_ADDR
// for i = 1 to 8 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 8
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2381
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2353: LD_ADDR_EXP 66
2357: PUSH
2358: LD_EXP 66
2362: PUSH
2363: LD_EXP 65
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: ADD
2378: ST_TO_ADDR
2379: GO 2350
2381: POP
2382: POP
// SetClass ( amUnitsAttack , 1 ) ;
2383: LD_EXP 66
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 336
// end ;
2395: LD_VAR 0 1
2399: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
// uc_side = 1 ;
2405: LD_ADDR_OWVAR 20
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// uc_nation = 1 ;
2413: LD_ADDR_OWVAR 21
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// for i := 1 to 5 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 5
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2519
// begin vc_engine = 3 ;
2437: LD_ADDR_OWVAR 39
2441: PUSH
2442: LD_INT 3
2444: ST_TO_ADDR
// vc_control = 3 ;
2445: LD_ADDR_OWVAR 38
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// vc_chassis = 3 ;
2453: LD_ADDR_OWVAR 37
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 5
2468: PUSH
2469: LD_INT 9
2471: PUSH
2472: LD_INT 7
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 14
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2434
2519: POP
2520: POP
// vc_engine = 3 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 3
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = 3 ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 9
2555: PUSH
2556: LD_INT 7
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 12
2574: ARRAY
2575: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2576: LD_ADDR_EXP 25
2580: PUSH
2581: CALL_OW 45
2585: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2586: LD_EXP 25
2590: PPUSH
2591: LD_INT 14
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// if JMMGirl = 1 then
2601: LD_EXP 80
2605: PUSH
2606: LD_INT 1
2608: EQUAL
2609: IFFALSE 2662
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2611: LD_ADDR_EXP 2
2615: PUSH
2616: LD_STRING 14_Joan
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL 6640 0 2
2626: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2627: LD_EXP 2
2631: PPUSH
2632: LD_EXP 25
2636: PPUSH
2637: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2641: LD_EXP 25
2645: PPUSH
2646: CALL_OW 87
// Say ( Joan , D10BW-Joan-1 ) ;
2650: LD_EXP 2
2654: PPUSH
2655: LD_STRING D10BW-Joan-1
2657: PPUSH
2658: CALL_OW 88
// end ; if JMMGirl = 2 then
2662: LD_EXP 80
2666: PUSH
2667: LD_INT 2
2669: EQUAL
2670: IFFALSE 2723
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2672: LD_ADDR_EXP 4
2676: PUSH
2677: LD_STRING 14_Lisa
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL 6640 0 2
2687: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_EXP 25
2697: PPUSH
2698: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 87
// Say ( Lisa , D10BW-Lisa-1 ) ;
2711: LD_EXP 4
2715: PPUSH
2716: LD_STRING D10BW-Lisa-1
2718: PPUSH
2719: CALL_OW 88
// end ; if JMMGirl = 3 then
2723: LD_EXP 80
2727: PUSH
2728: LD_INT 3
2730: EQUAL
2731: IFFALSE 2784
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2733: LD_ADDR_EXP 16
2737: PUSH
2738: LD_STRING 14_Connie
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL 6640 0 2
2748: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2749: LD_EXP 16
2753: PPUSH
2754: LD_EXP 25
2758: PPUSH
2759: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2763: LD_EXP 25
2767: PPUSH
2768: CALL_OW 87
// Say ( Lisa , D10BW-Con-1 ) ;
2772: LD_EXP 4
2776: PPUSH
2777: LD_STRING D10BW-Con-1
2779: PPUSH
2780: CALL_OW 88
// end ; end ;
2784: LD_VAR 0 1
2788: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// omegaVeh = [ ] ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2823: LD_STRING 13s_Lisa
2825: PPUSH
2826: CALL_OW 28
2830: PUSH
2831: LD_INT 0
2833: EQUAL
2834: IFFALSE 2849
// Lisa = PrepareUnitOmega ( Lisa ) ;
2836: LD_ADDR_EXP 4
2840: PUSH
2841: LD_STRING Lisa
2843: PPUSH
2844: CALL 6754 0 1
2848: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2849: LD_STRING 13s_Donaldson
2851: PPUSH
2852: CALL_OW 28
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2875
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2862: LD_ADDR_EXP 5
2866: PUSH
2867: LD_STRING Donaldson
2869: PPUSH
2870: CALL 6754 0 1
2874: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2875: LD_STRING 13s_Bobby
2877: PPUSH
2878: CALL_OW 28
2882: PUSH
2883: LD_INT 0
2885: EQUAL
2886: IFFALSE 2901
// Bobby = PrepareUnitOmega ( Bobby ) ;
2888: LD_ADDR_EXP 6
2892: PUSH
2893: LD_STRING Bobby
2895: PPUSH
2896: CALL 6754 0 1
2900: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2901: LD_STRING 13s_Cyrus
2903: PPUSH
2904: CALL_OW 28
2908: PUSH
2909: LD_INT 0
2911: EQUAL
2912: IFFALSE 2927
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2914: LD_ADDR_EXP 7
2918: PUSH
2919: LD_STRING Cyrus
2921: PPUSH
2922: CALL 6754 0 1
2926: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2927: LD_STRING 13s_Denis
2929: PPUSH
2930: CALL_OW 28
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 2953
// Denis = PrepareUnitOmega ( Denis ) ;
2940: LD_ADDR_EXP 8
2944: PUSH
2945: LD_STRING Denis
2947: PPUSH
2948: CALL 6754 0 1
2952: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2953: LD_STRING 13s_Brown
2955: PPUSH
2956: CALL_OW 28
2960: PUSH
2961: LD_INT 0
2963: EQUAL
2964: IFFALSE 2979
// Brown = PrepareUnitOmega ( Brown ) ;
2966: LD_ADDR_EXP 9
2970: PUSH
2971: LD_STRING Brown
2973: PPUSH
2974: CALL 6754 0 1
2978: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2979: LD_STRING 13s_Gladstone
2981: PPUSH
2982: CALL_OW 28
2986: PUSH
2987: LD_INT 0
2989: EQUAL
2990: IFFALSE 3005
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
2992: LD_ADDR_EXP 10
2996: PUSH
2997: LD_STRING Gladstone
2999: PPUSH
3000: CALL 6754 0 1
3004: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3005: LD_STRING 13s_Houten
3007: PPUSH
3008: CALL_OW 28
3012: PUSH
3013: LD_INT 0
3015: EQUAL
3016: IFFALSE 3031
// Houten = PrepareUnitOmega ( Houten ) ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_STRING Houten
3025: PPUSH
3026: CALL 6754 0 1
3030: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3031: LD_STRING 13s_Cornell
3033: PPUSH
3034: CALL_OW 28
3038: PUSH
3039: LD_INT 0
3041: EQUAL
3042: IFFALSE 3057
// Cornel = PrepareUnitOmega ( Cornell ) ;
3044: LD_ADDR_EXP 12
3048: PUSH
3049: LD_STRING Cornell
3051: PPUSH
3052: CALL 6754 0 1
3056: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3057: LD_STRING 13s_Gary
3059: PPUSH
3060: CALL_OW 28
3064: PUSH
3065: LD_INT 0
3067: EQUAL
3068: IFFALSE 3083
// Gary = PrepareUnitOmega ( Gary ) ;
3070: LD_ADDR_EXP 13
3074: PUSH
3075: LD_STRING Gary
3077: PPUSH
3078: CALL 6754 0 1
3082: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3083: LD_STRING 13s_Frank
3085: PPUSH
3086: CALL_OW 28
3090: PUSH
3091: LD_INT 0
3093: EQUAL
3094: IFFALSE 3109
// Frank = PrepareUnitOmega ( Frank ) ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_STRING Frank
3103: PPUSH
3104: CALL 6754 0 1
3108: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3109: LD_STRING 13s_Kikuchi
3111: PPUSH
3112: CALL_OW 28
3116: PUSH
3117: LD_INT 0
3119: EQUAL
3120: IFFALSE 3135
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3122: LD_ADDR_EXP 15
3126: PUSH
3127: LD_STRING Kikuchi
3129: PPUSH
3130: CALL 6754 0 1
3134: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
3135: LD_EXP 80
3139: PUSH
3140: LD_INT 1
3142: EQUAL
3143: PUSH
3144: LD_EXP 80
3148: PUSH
3149: LD_INT 2
3151: EQUAL
3152: OR
3153: IFFALSE 3168
// Connie = PrepareUnitOmega ( Connie ) ;
3155: LD_ADDR_EXP 16
3159: PUSH
3160: LD_STRING Connie
3162: PPUSH
3163: CALL 6754 0 1
3167: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3168: LD_ADDR_EXP 22
3172: PUSH
3173: LD_STRING Gordon
3175: PPUSH
3176: CALL 6754 0 1
3180: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3181: LD_ADDR_EXP 23
3185: PUSH
3186: LD_STRING Peter
3188: PPUSH
3189: CALL 6754 0 1
3193: ST_TO_ADDR
// if StevensStatus = 1 then
3194: LD_EXP 77
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3219
// Stevens = PrepareUnitOmega ( Stevens ) else
3204: LD_ADDR_EXP 3
3208: PUSH
3209: LD_STRING Stevens
3211: PPUSH
3212: CALL 6754 0 1
3216: ST_TO_ADDR
3217: GO 3232
// Baker = PrepareUnitOmega ( Baker ) ;
3219: LD_ADDR_EXP 21
3223: PUSH
3224: LD_STRING Baker
3226: PPUSH
3227: CALL 6754 0 1
3231: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3232: LD_ADDR_EXP 19
3236: PUSH
3237: LD_STRING 15_other_survivors
3239: PPUSH
3240: CALL_OW 31
3244: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3245: LD_ADDR_VAR 0 7
3249: PUSH
3250: LD_STRING 15_Vehicles_1
3252: PPUSH
3253: EMPTY
3254: PPUSH
3255: CALL_OW 30
3259: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_STRING 15_ResourcesInCargo_1
3267: PPUSH
3268: EMPTY
3269: PPUSH
3270: CALL_OW 30
3274: ST_TO_ADDR
// for i := 1 to vehicles do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_VAR 0 7
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3516
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3293: LD_ADDR_OWVAR 21
3297: PUSH
3298: LD_VAR 0 7
3302: PUSH
3303: LD_VAR 0 2
3307: ARRAY
3308: PUSH
3309: LD_INT 1
3311: ARRAY
3312: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3313: LD_ADDR_OWVAR 37
3317: PUSH
3318: LD_VAR 0 7
3322: PUSH
3323: LD_VAR 0 2
3327: ARRAY
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3333: LD_ADDR_OWVAR 39
3337: PUSH
3338: LD_VAR 0 7
3342: PUSH
3343: LD_VAR 0 2
3347: ARRAY
3348: PUSH
3349: LD_INT 3
3351: ARRAY
3352: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3353: LD_ADDR_OWVAR 38
3357: PUSH
3358: LD_VAR 0 7
3362: PUSH
3363: LD_VAR 0 2
3367: ARRAY
3368: PUSH
3369: LD_INT 4
3371: ARRAY
3372: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3373: LD_ADDR_OWVAR 40
3377: PUSH
3378: LD_VAR 0 7
3382: PUSH
3383: LD_VAR 0 2
3387: ARRAY
3388: PUSH
3389: LD_INT 5
3391: ARRAY
3392: ST_TO_ADDR
// if vc_weapon = 8 then
3393: LD_OWVAR 40
3397: PUSH
3398: LD_INT 8
3400: EQUAL
3401: IFFALSE 3413
// vc_weapon = 9 else
3403: LD_ADDR_OWVAR 40
3407: PUSH
3408: LD_INT 9
3410: ST_TO_ADDR
3411: GO 3433
// vc_weapon = vehicles [ i ] [ 5 ] ;
3413: LD_ADDR_OWVAR 40
3417: PUSH
3418: LD_VAR 0 7
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: PUSH
3429: LD_INT 5
3431: ARRAY
3432: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3433: LD_ADDR_OWVAR 41
3437: PUSH
3438: LD_INT 40
3440: ST_TO_ADDR
// veh = CreateVehicle ;
3441: LD_ADDR_VAR 0 5
3445: PUSH
3446: CALL_OW 45
3450: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3451: LD_VAR 0 5
3455: PPUSH
3456: LD_INT 5
3458: PPUSH
3459: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3463: LD_VAR 0 5
3467: PPUSH
3468: LD_INT 300
3470: PPUSH
3471: LD_INT 800
3473: PPUSH
3474: CALL_OW 12
3478: PPUSH
3479: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 3
3492: PUSH
3493: LD_VAR 0 5
3497: ADD
3498: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3499: LD_VAR 0 5
3503: PPUSH
3504: LD_INT 16
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// end ;
3514: GO 3290
3516: POP
3517: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3518: LD_ADDR_VAR 0 9
3522: PUSH
3523: LD_INT 16
3525: PPUSH
3526: LD_INT 22
3528: PUSH
3529: LD_INT 1
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 21
3538: PUSH
3539: LD_INT 2
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 34
3548: PUSH
3549: LD_INT 12
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PUSH
3556: LD_INT 33
3558: PUSH
3559: LD_INT 1
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 32
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PPUSH
3583: CALL_OW 70
3587: ST_TO_ADDR
// if cargoList > 0 then
3588: LD_VAR 0 9
3592: PUSH
3593: LD_INT 0
3595: GREATER
3596: IFFALSE 3729
// for i = 1 to cargoList do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_VAR 0 9
3612: PUSH
3613: FOR_TO
3614: IFFALSE 3727
// begin if resources > 0 then
3616: LD_VAR 0 8
3620: PUSH
3621: LD_INT 0
3623: GREATER
3624: IFFALSE 3725
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3626: LD_VAR 0 9
3630: PUSH
3631: LD_VAR 0 2
3635: ARRAY
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_VAR 0 8
3644: PUSH
3645: LD_VAR 0 2
3649: ARRAY
3650: PUSH
3651: LD_INT 1
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3659: LD_VAR 0 9
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_VAR 0 8
3677: PUSH
3678: LD_VAR 0 2
3682: ARRAY
3683: PUSH
3684: LD_INT 2
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3692: LD_VAR 0 9
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PPUSH
3703: LD_INT 3
3705: PPUSH
3706: LD_VAR 0 8
3710: PUSH
3711: LD_VAR 0 2
3715: ARRAY
3716: PUSH
3717: LD_INT 3
3719: ARRAY
3720: PPUSH
3721: CALL_OW 291
// end ; end ;
3725: GO 3613
3727: POP
3728: POP
// for i := 1 to heroesFromOmega do
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: DOUBLE
3735: LD_INT 1
3737: DEC
3738: ST_TO_ADDR
3739: LD_EXP 20
3743: PUSH
3744: FOR_TO
3745: IFFALSE 3775
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3747: LD_EXP 20
3751: PUSH
3752: LD_VAR 0 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_VAR 0 2
3767: ARRAY
3768: PPUSH
3769: CALL_OW 52
// end ;
3773: GO 3744
3775: POP
3776: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3777: LD_ADDR_VAR 0 6
3781: PUSH
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_INT 58
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 72
3797: ST_TO_ADDR
// for i := 1 to others13Omega do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_EXP 19
3812: PUSH
3813: FOR_TO
3814: IFFALSE 3844
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3816: LD_EXP 19
3820: PUSH
3821: LD_VAR 0 2
3825: ARRAY
3826: PPUSH
3827: LD_VAR 0 6
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 52
// end ;
3842: GO 3813
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// export function PrepareLegion ; var i ; begin
3851: LD_INT 0
3853: PPUSH
3854: PPUSH
// uc_side = 8 ;
3855: LD_ADDR_OWVAR 20
3859: PUSH
3860: LD_INT 8
3862: ST_TO_ADDR
// uc_nation = 2 ;
3863: LD_ADDR_OWVAR 21
3867: PUSH
3868: LD_INT 2
3870: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3871: LD_ADDR_EXP 30
3875: PUSH
3876: LD_STRING Kurt
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL 6640 0 2
3886: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3887: LD_ADDR_EXP 36
3891: PUSH
3892: LD_STRING Kozlov
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 6640 0 2
3902: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3903: LD_INT 8
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: LD_INT 122
3911: PPUSH
3912: LD_INT 10
3914: PPUSH
3915: LD_INT 2
3917: PPUSH
3918: LD_INT 4
3920: PPUSH
3921: CALL 7758 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3925: LD_INT 8
3927: PPUSH
3928: LD_INT 2
3930: PPUSH
3931: LD_INT 99
3933: PPUSH
3934: LD_INT 10
3936: PPUSH
3937: LD_INT 2
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL 7758 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3947: LD_INT 8
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_INT 104
3955: PPUSH
3956: LD_INT 10
3958: PPUSH
3959: LD_INT 1
3961: PPUSH
3962: LD_INT 2
3964: PPUSH
3965: CALL 7758 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3969: LD_INT 8
3971: PPUSH
3972: LD_INT 2
3974: PPUSH
3975: LD_INT 104
3977: PPUSH
3978: LD_INT 10
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL 7758 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
3991: LD_INT 8
3993: PPUSH
3994: LD_INT 2
3996: PPUSH
3997: LD_INT 118
3999: PPUSH
4000: LD_INT 10
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL 7758 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4013: LD_INT 8
4015: PPUSH
4016: LD_INT 2
4018: PPUSH
4019: LD_INT 117
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: CALL 7758 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4035: LD_INT 8
4037: PPUSH
4038: LD_INT 2
4040: PPUSH
4041: LD_INT 252
4043: PPUSH
4044: LD_INT 10
4046: PPUSH
4047: LD_INT 4
4049: PPUSH
4050: LD_INT 2
4052: PPUSH
4053: CALL 7758 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 8
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 3
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 30
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 58
4094: PUSH
4095: EMPTY
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 69
4108: PUSH
4109: FOR_IN
4110: IFFALSE 4138
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4112: LD_INT 8
4114: PPUSH
4115: LD_INT 2
4117: PPUSH
4118: LD_VAR 0 2
4122: PPUSH
4123: LD_INT 10
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: CALL 7758 0 6
4136: GO 4109
4138: POP
4139: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4140: LD_INT 8
4142: PPUSH
4143: LD_INT 2
4145: PPUSH
4146: LD_INT 140
4148: PPUSH
4149: LD_INT 10
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: CALL 7758 0 6
// arControler = UnitsInside ( ArControl ) ;
4162: LD_ADDR_EXP 56
4166: PUSH
4167: LD_INT 140
4169: PPUSH
4170: CALL_OW 313
4174: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4175: LD_INT 139
4177: PPUSH
4178: LD_EXP 56
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4191: LD_INT 138
4193: PPUSH
4194: LD_EXP 56
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 195
// hc_name = Ali Hadarach ;
4207: LD_ADDR_OWVAR 26
4211: PUSH
4212: LD_STRING Ali Hadarach
4214: ST_TO_ADDR
// hc_gallery =  ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING 
4222: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4223: LD_INT 1
4225: PPUSH
4226: LD_INT 8
4228: PPUSH
4229: CALL_OW 383
// LegionFriend = CreateHuman ;
4233: LD_ADDR_EXP 53
4237: PUSH
4238: CALL_OW 44
4242: ST_TO_ADDR
// end ; end_of_file
4243: LD_VAR 0 1
4247: RET
// export function PrepareRussians ; var i ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// uc_side = 3 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 3
4259: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4260: LD_ADDR_EXP 26
4264: PUSH
4265: LD_STRING Platonov
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL 6640 0 2
4275: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4276: LD_EXP 26
4280: PPUSH
4281: LD_INT 23
4283: PPUSH
4284: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4288: LD_ADDR_EXP 27
4292: PUSH
4293: LD_STRING Yakotich
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL 6640 0 2
4303: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4304: LD_EXP 27
4308: PPUSH
4309: LD_INT 26
4311: PPUSH
4312: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4316: LD_ADDR_EXP 37
4320: PUSH
4321: LD_STRING Kovalyuk
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL 6640 0 2
4331: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4332: LD_EXP 37
4336: PPUSH
4337: LD_INT 3
4339: PPUSH
4340: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4344: LD_ADDR_EXP 58
4348: PUSH
4349: LD_EXP 58
4353: PUSH
4354: LD_EXP 37
4358: ADD
4359: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4360: LD_ADDR_EXP 38
4364: PUSH
4365: LD_STRING Oblukov
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL 6640 0 2
4375: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4376: LD_ADDR_EXP 39
4380: PUSH
4381: LD_STRING Bystrov
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL 6640 0 2
4391: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4392: LD_ADDR_EXP 40
4396: PUSH
4397: LD_STRING Fadeev
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL 6640 0 2
4407: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4408: LD_ADDR_EXP 41
4412: PUSH
4413: LD_STRING Gleb
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL 6640 0 2
4423: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4424: LD_ADDR_EXP 42
4428: PUSH
4429: LD_STRING Petrosyan
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL 6640 0 2
4439: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4440: LD_ADDR_EXP 43
4444: PUSH
4445: LD_STRING Petrovova
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL 6640 0 2
4455: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4456: LD_ADDR_EXP 44
4460: PUSH
4461: LD_STRING Kuzmov
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 6640 0 2
4471: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4472: LD_ADDR_EXP 45
4476: PUSH
4477: LD_STRING Mikhail
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL 6640 0 2
4487: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4488: LD_ADDR_EXP 46
4492: PUSH
4493: LD_STRING Furmanov
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL 6640 0 2
4503: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4504: LD_ADDR_EXP 47
4508: PUSH
4509: LD_STRING Belkov
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL 6640 0 2
4519: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4520: LD_EXP 38
4524: PPUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 3
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 21
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 30
4547: PUSH
4548: LD_INT 32
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 58
4557: PUSH
4558: EMPTY
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PUSH
4572: LD_INT 1
4574: ARRAY
4575: PPUSH
4576: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4580: LD_EXP 40
4584: PPUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 3
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 58
4617: PUSH
4618: EMPTY
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: CALL_OW 69
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: PPUSH
4636: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4640: LD_EXP 41
4644: PPUSH
4645: LD_INT 22
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 21
4657: PUSH
4658: LD_INT 3
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_INT 32
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 58
4677: PUSH
4678: EMPTY
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: PUSH
4692: LD_INT 1
4694: ARRAY
4695: PPUSH
4696: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4700: LD_EXP 43
4704: PPUSH
4705: LD_INT 22
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 21
4717: PUSH
4718: LD_INT 3
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 30
4727: PUSH
4728: LD_INT 32
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 58
4737: PUSH
4738: EMPTY
4739: LIST
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: PPUSH
4747: CALL_OW 69
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4760: LD_EXP 44
4764: PPUSH
4765: LD_INT 22
4767: PUSH
4768: LD_INT 3
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 21
4777: PUSH
4778: LD_INT 3
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 30
4787: PUSH
4788: LD_INT 32
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 58
4797: PUSH
4798: EMPTY
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PPUSH
4816: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4820: LD_EXP 46
4824: PPUSH
4825: LD_INT 22
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 3
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 32
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 58
4857: PUSH
4858: EMPTY
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PUSH
4872: LD_INT 1
4874: ARRAY
4875: PPUSH
4876: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4880: LD_EXP 47
4884: PPUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 21
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 32
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 58
4917: PUSH
4918: EMPTY
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 69
4931: PUSH
4932: LD_INT 1
4934: ARRAY
4935: PPUSH
4936: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4940: LD_EXP 39
4944: PPUSH
4945: LD_INT 2
4947: PPUSH
4948: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4952: LD_EXP 42
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4964: LD_EXP 45
4968: PPUSH
4969: LD_INT 26
4971: PPUSH
4972: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4976: LD_EXP 45
4980: PPUSH
4981: LD_INT 2
4983: PPUSH
4984: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
4988: LD_INT 3
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: LD_INT 26
4996: PPUSH
4997: LD_INT 10
4999: PPUSH
5000: LD_INT 2
5002: PPUSH
5003: LD_INT 5
5005: PPUSH
5006: CALL 7758 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5010: LD_INT 3
5012: PPUSH
5013: LD_INT 3
5015: PPUSH
5016: LD_INT 23
5018: PPUSH
5019: LD_INT 10
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: LD_INT 4
5027: PPUSH
5028: CALL 7758 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5032: LD_INT 3
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 27
5040: PPUSH
5041: LD_INT 10
5043: PPUSH
5044: LD_INT 9
5046: PPUSH
5047: LD_INT 6
5049: PPUSH
5050: CALL 7758 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5054: LD_INT 3
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 27
5062: PPUSH
5063: LD_INT 10
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 3
5071: PPUSH
5072: CALL 7758 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: LD_INT 10
5087: PPUSH
5088: LD_INT 3
5090: PPUSH
5091: LD_INT 6
5093: PPUSH
5094: CALL 7758 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: LD_INT 3
5112: PPUSH
5113: LD_INT 6
5115: PPUSH
5116: CALL 7758 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 3
5125: PPUSH
5126: LD_INT 2
5128: PPUSH
5129: LD_INT 10
5131: PPUSH
5132: LD_INT 4
5134: PPUSH
5135: LD_INT 3
5137: PPUSH
5138: CALL 7758 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5142: LD_INT 3
5144: PPUSH
5145: LD_INT 3
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 10
5153: PPUSH
5154: LD_INT 4
5156: PPUSH
5157: LD_INT 3
5159: PPUSH
5160: CALL 7758 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 22
5171: PUSH
5172: LD_INT 3
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 3
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 30
5191: PUSH
5192: LD_INT 32
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 58
5201: PUSH
5202: EMPTY
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5245
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5219: LD_INT 3
5221: PPUSH
5222: LD_INT 3
5224: PPUSH
5225: LD_VAR 0 2
5229: PPUSH
5230: LD_INT 10
5232: PPUSH
5233: LD_INT 1
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL 7758 0 6
5243: GO 5216
5245: POP
5246: POP
// end ;
5247: LD_VAR 0 1
5251: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5252: LD_INT 0
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
// uc_side = 6 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 6
5265: ST_TO_ADDR
// uc_nation = 1 ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// vc_engine = 3 ;
5274: LD_ADDR_OWVAR 39
5278: PUSH
5279: LD_INT 3
5281: ST_TO_ADDR
// vc_control = 1 ;
5282: LD_ADDR_OWVAR 38
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_chassis = 5 ;
5290: LD_ADDR_OWVAR 37
5294: PUSH
5295: LD_INT 5
5297: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5298: LD_ADDR_OWVAR 40
5302: PUSH
5303: LD_INT 5
5305: PUSH
5306: LD_INT 9
5308: PUSH
5309: LD_INT 7
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 1
5319: PPUSH
5320: LD_INT 3
5322: PPUSH
5323: CALL_OW 12
5327: ARRAY
5328: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5329: LD_ADDR_EXP 35
5333: PUSH
5334: CALL_OW 45
5338: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5339: LD_EXP 35
5343: PPUSH
5344: LD_INT 14
5346: PPUSH
5347: LD_INT 0
5349: PPUSH
5350: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5354: LD_ADDR_EXP 34
5358: PUSH
5359: LD_STRING Vsevolod
5361: PPUSH
5362: LD_INT 0
5364: PPUSH
5365: CALL 6640 0 2
5369: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5370: LD_EXP 34
5374: PPUSH
5375: LD_EXP 35
5379: PPUSH
5380: CALL_OW 52
// for i := 1 to 5 do
5384: LD_ADDR_VAR 0 2
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_INT 5
5396: PUSH
5397: FOR_TO
5398: IFFALSE 5482
// begin vc_engine = 3 ;
5400: LD_ADDR_OWVAR 39
5404: PUSH
5405: LD_INT 3
5407: ST_TO_ADDR
// vc_control = 3 ;
5408: LD_ADDR_OWVAR 38
5412: PUSH
5413: LD_INT 3
5415: ST_TO_ADDR
// vc_chassis = 3 ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5424: LD_ADDR_OWVAR 40
5428: PUSH
5429: LD_INT 5
5431: PUSH
5432: LD_INT 9
5434: PUSH
5435: LD_INT 7
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_INT 3
5448: PPUSH
5449: CALL_OW 12
5453: ARRAY
5454: ST_TO_ADDR
// veh = CreateVehicle ;
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: CALL_OW 45
5464: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5465: LD_VAR 0 3
5469: PPUSH
5470: LD_INT 14
5472: PPUSH
5473: LD_INT 0
5475: PPUSH
5476: CALL_OW 49
// end ;
5480: GO 5397
5482: POP
5483: POP
// uc_nation = 3 ;
5484: LD_ADDR_OWVAR 21
5488: PUSH
5489: LD_INT 3
5491: ST_TO_ADDR
// for i := 1 to 7 do
5492: LD_ADDR_VAR 0 2
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_INT 7
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5598
// begin vc_engine = 3 ;
5508: LD_ADDR_OWVAR 39
5512: PUSH
5513: LD_INT 3
5515: ST_TO_ADDR
// vc_control = 3 ;
5516: LD_ADDR_OWVAR 38
5520: PUSH
5521: LD_INT 3
5523: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5524: LD_ADDR_OWVAR 37
5528: PUSH
5529: LD_INT 24
5531: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5532: LD_ADDR_OWVAR 40
5536: PUSH
5537: LD_INT 44
5539: PUSH
5540: LD_INT 47
5542: PUSH
5543: LD_INT 45
5545: PUSH
5546: LD_INT 46
5548: PUSH
5549: LD_INT 49
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 1
5561: PPUSH
5562: LD_INT 4
5564: PPUSH
5565: CALL_OW 12
5569: ARRAY
5570: ST_TO_ADDR
// veh = CreateVehicle ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: CALL_OW 45
5580: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5581: LD_VAR 0 3
5585: PPUSH
5586: LD_INT 14
5588: PPUSH
5589: LD_INT 0
5591: PPUSH
5592: CALL_OW 49
// end ;
5596: GO 5505
5598: POP
5599: POP
// repeat wait ( 0 0$1 ) ;
5600: LD_INT 35
5602: PPUSH
5603: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 6
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 50
5634: PUSH
5635: EMPTY
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 69
5647: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5648: LD_EXP 1
5652: PPUSH
5653: CALL_OW 310
5657: NOT
5658: IFFALSE 5691
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5660: LD_VAR 0 4
5664: PPUSH
5665: LD_EXP 1
5669: PPUSH
5670: CALL_OW 250
5674: PPUSH
5675: LD_EXP 1
5679: PPUSH
5680: CALL_OW 251
5684: PPUSH
5685: CALL_OW 114
5689: GO 5730
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5691: LD_VAR 0 4
5695: PPUSH
5696: LD_EXP 1
5700: PPUSH
5701: CALL_OW 310
5705: PPUSH
5706: CALL_OW 250
5710: PPUSH
5711: LD_EXP 1
5715: PPUSH
5716: CALL_OW 310
5720: PPUSH
5721: CALL_OW 251
5725: PPUSH
5726: CALL_OW 114
// until vehList = 0 ;
5730: LD_VAR 0 4
5734: PUSH
5735: LD_INT 0
5737: EQUAL
5738: IFFALSE 5600
// end ;
5740: LD_VAR 0 1
5744: RET
// export function PreapreMehBehs ; var i , un ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
// uc_side = 6 ;
5750: LD_ADDR_OWVAR 20
5754: PUSH
5755: LD_INT 6
5757: ST_TO_ADDR
// uc_nation = 3 ;
5758: LD_ADDR_OWVAR 21
5762: PUSH
5763: LD_INT 3
5765: ST_TO_ADDR
// for i := 1 to 3 do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_INT 3
5778: PUSH
5779: FOR_TO
5780: IFFALSE 5851
// begin hc_name =  ;
5782: LD_ADDR_OWVAR 26
5786: PUSH
5787: LD_STRING 
5789: ST_TO_ADDR
// hc_gallery =  ;
5790: LD_ADDR_OWVAR 33
5794: PUSH
5795: LD_STRING 
5797: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5798: LD_INT 0
5800: PPUSH
5801: LD_INT 10
5803: PPUSH
5804: CALL_OW 383
// un = CreateHuman ;
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: CALL_OW 44
5817: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5818: LD_ADDR_EXP 58
5822: PUSH
5823: LD_EXP 58
5827: PUSH
5828: LD_VAR 0 3
5832: ADD
5833: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: CALL_OW 49
// end ;
5849: GO 5779
5851: POP
5852: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5853: LD_EXP 37
5857: PPUSH
5858: LD_INT 17
5860: PPUSH
5861: LD_INT 0
5863: PPUSH
5864: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5868: LD_EXP 37
5872: PPUSH
5873: LD_INT 6
5875: PPUSH
5876: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5880: LD_INT 145
5882: PPUSH
5883: LD_INT 6
5885: PPUSH
5886: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5890: LD_EXP 58
5894: PUSH
5895: LD_INT 1
5897: ARRAY
5898: PPUSH
5899: LD_INT 37
5901: PPUSH
5902: LD_INT 193
5904: PPUSH
5905: LD_INT 118
5907: PPUSH
5908: LD_INT 0
5910: PPUSH
5911: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5915: LD_EXP 58
5919: PUSH
5920: LD_INT 2
5922: ARRAY
5923: PPUSH
5924: LD_INT 37
5926: PPUSH
5927: LD_INT 204
5929: PPUSH
5930: LD_INT 119
5932: PPUSH
5933: LD_INT 0
5935: PPUSH
5936: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5940: LD_EXP 58
5944: PUSH
5945: LD_INT 3
5947: ARRAY
5948: PPUSH
5949: LD_INT 37
5951: PPUSH
5952: LD_INT 195
5954: PPUSH
5955: LD_INT 126
5957: PPUSH
5958: LD_INT 0
5960: PPUSH
5961: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5965: LD_EXP 58
5969: PUSH
5970: LD_INT 4
5972: ARRAY
5973: PPUSH
5974: LD_INT 37
5976: PPUSH
5977: LD_INT 207
5979: PPUSH
5980: LD_INT 126
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 170
// end ; end_of_file
5990: LD_VAR 0 1
5994: RET
// export function PrepareAlliance ; var i ; begin
5995: LD_INT 0
5997: PPUSH
5998: PPUSH
// uc_side = 7 ;
5999: LD_ADDR_OWVAR 20
6003: PUSH
6004: LD_INT 7
6006: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6007: LD_ADDR_EXP 28
6011: PUSH
6012: LD_STRING Roth
6014: PPUSH
6015: LD_INT 0
6017: PPUSH
6018: CALL 6640 0 2
6022: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6023: LD_EXP 28
6027: PPUSH
6028: LD_INT 31
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6038: LD_EXP 28
6042: PPUSH
6043: LD_INT 248
6045: PPUSH
6046: LD_INT 187
6048: PPUSH
6049: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6053: LD_STRING 10c_Simms
6055: PPUSH
6056: CALL_OW 28
6060: PUSH
6061: LD_INT 1
6063: EQUAL
6064: IFFALSE 6114
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6066: LD_ADDR_EXP 48
6070: PUSH
6071: LD_STRING 10c_Simms
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL 6640 0 2
6081: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6082: LD_EXP 48
6086: PPUSH
6087: LD_INT 32
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6097: LD_EXP 48
6101: PPUSH
6102: LD_INT 248
6104: PPUSH
6105: LD_INT 187
6107: PPUSH
6108: CALL_OW 118
// end else
6112: GO 6188
// begin uc_nation = 1 ;
6114: LD_ADDR_OWVAR 21
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// hc_name =  ;
6122: LD_ADDR_OWVAR 26
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// hc_gallery =  ;
6130: LD_ADDR_OWVAR 33
6134: PUSH
6135: LD_STRING 
6137: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6138: LD_INT 2
6140: PPUSH
6141: LD_INT 10
6143: PPUSH
6144: CALL_OW 384
// Simms = CreateHuman ;
6148: LD_ADDR_EXP 48
6152: PUSH
6153: CALL_OW 44
6157: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6158: LD_EXP 48
6162: PPUSH
6163: LD_INT 32
6165: PPUSH
6166: LD_INT 0
6168: PPUSH
6169: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6173: LD_EXP 48
6177: PPUSH
6178: LD_INT 248
6180: PPUSH
6181: LD_INT 187
6183: PPUSH
6184: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6188: LD_ADDR_EXP 49
6192: PUSH
6193: LD_STRING Scholtze
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL 6640 0 2
6203: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6204: LD_ADDR_EXP 50
6208: PUSH
6209: LD_STRING Kirilenkova
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL 6640 0 2
6219: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6220: LD_ADDR_EXP 51
6224: PUSH
6225: LD_STRING Kapitsova
6227: PPUSH
6228: LD_INT 0
6230: PPUSH
6231: CALL 6640 0 2
6235: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6236: LD_ADDR_EXP 52
6240: PUSH
6241: LD_STRING Karamazov
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL 6640 0 2
6251: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6252: LD_EXP 49
6256: PPUSH
6257: LD_INT 39
6259: PPUSH
6260: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6264: LD_EXP 50
6268: PPUSH
6269: LD_INT 133
6271: PPUSH
6272: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6276: LD_EXP 51
6280: PPUSH
6281: LD_INT 133
6283: PPUSH
6284: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6288: LD_EXP 52
6292: PPUSH
6293: LD_INT 45
6295: PPUSH
6296: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6300: LD_INT 7
6302: PPUSH
6303: LD_INT 1
6305: PPUSH
6306: LD_INT 45
6308: PPUSH
6309: LD_INT 10
6311: PPUSH
6312: LD_INT 2
6314: PPUSH
6315: LD_INT 2
6317: PPUSH
6318: CALL 7758 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6322: LD_INT 7
6324: PPUSH
6325: LD_INT 3
6327: PPUSH
6328: LD_INT 45
6330: PPUSH
6331: LD_INT 10
6333: PPUSH
6334: LD_INT 2
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL 7758 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6344: LD_INT 7
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: LD_INT 194
6352: PPUSH
6353: LD_INT 10
6355: PPUSH
6356: LD_INT 5
6358: PPUSH
6359: LD_INT 4
6361: PPUSH
6362: CALL 7758 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6366: LD_INT 7
6368: PPUSH
6369: LD_INT 3
6371: PPUSH
6372: LD_INT 194
6374: PPUSH
6375: LD_INT 10
6377: PPUSH
6378: LD_INT 8
6380: PPUSH
6381: LD_INT 6
6383: PPUSH
6384: CALL 7758 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6388: LD_INT 7
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 156
6396: PPUSH
6397: LD_INT 10
6399: PPUSH
6400: LD_INT 3
6402: PPUSH
6403: LD_INT 6
6405: PPUSH
6406: CALL 7758 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6410: LD_INT 7
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 162
6418: PPUSH
6419: LD_INT 10
6421: PPUSH
6422: LD_INT 3
6424: PPUSH
6425: LD_INT 6
6427: PPUSH
6428: CALL 7758 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6432: LD_INT 7
6434: PPUSH
6435: LD_INT 3
6437: PPUSH
6438: LD_INT 39
6440: PPUSH
6441: LD_INT 10
6443: PPUSH
6444: LD_INT 4
6446: PPUSH
6447: LD_INT 3
6449: PPUSH
6450: CALL 7758 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6454: LD_INT 7
6456: PPUSH
6457: LD_INT 3
6459: PPUSH
6460: LD_INT 133
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: LD_INT 4
6468: PPUSH
6469: LD_INT 2
6471: PPUSH
6472: CALL 7758 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6476: LD_INT 7
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 46
6484: PPUSH
6485: LD_INT 10
6487: PPUSH
6488: LD_INT 4
6490: PPUSH
6491: LD_INT 2
6493: PPUSH
6494: CALL 7758 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_INT 22
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 21
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: LD_INT 30
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 58
6535: PUSH
6536: EMPTY
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PPUSH
6545: CALL_OW 69
6549: PUSH
6550: FOR_IN
6551: IFFALSE 6598
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6553: LD_INT 7
6555: PPUSH
6556: LD_INT 1
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 2
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: PPUSH
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 10
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: CALL 7758 0 6
6596: GO 6550
6598: POP
6599: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6600: LD_INT 7
6602: PPUSH
6603: LD_INT 1
6605: PPUSH
6606: LD_INT 226
6608: PPUSH
6609: LD_INT 10
6611: PPUSH
6612: LD_INT 3
6614: PPUSH
6615: LD_INT 3
6617: PPUSH
6618: CALL 7758 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6622: LD_ADDR_EXP 63
6626: PUSH
6627: LD_INT 226
6629: PPUSH
6630: CALL_OW 313
6634: ST_TO_ADDR
// end ; end_of_file
6635: LD_VAR 0 1
6639: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
// if exist_mode then
6644: LD_VAR 0 2
6648: IFFALSE 6667
// unit := CreateCharacter ( ident ) else
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 34
6664: ST_TO_ADDR
6665: GO 6682
// unit := NewCharacter ( ident ) ;
6667: LD_ADDR_VAR 0 4
6671: PUSH
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 25
6681: ST_TO_ADDR
// result := unit ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_VAR 0 4
6691: ST_TO_ADDR
// end ;
6692: LD_VAR 0 3
6696: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6697: LD_INT 0
6699: PPUSH
6700: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6701: LD_STRING 13s_
6703: PUSH
6704: LD_VAR 0 1
6708: STR
6709: PPUSH
6710: CALL_OW 28
6714: PUSH
6715: LD_INT 1
6717: EQUAL
6718: IFFALSE 6739
// unit = CreateCharacter ( 13s_ & ident ) ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_STRING 13s_
6727: PUSH
6728: LD_VAR 0 1
6732: STR
6733: PPUSH
6734: CALL_OW 34
6738: ST_TO_ADDR
// result := unit ;
6739: LD_ADDR_VAR 0 2
6743: PUSH
6744: LD_VAR 0 3
6748: ST_TO_ADDR
// end ;
6749: LD_VAR 0 2
6753: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6758: LD_STRING 15_
6760: PUSH
6761: LD_VAR 0 1
6765: STR
6766: PPUSH
6767: CALL_OW 28
6771: PUSH
6772: LD_INT 1
6774: EQUAL
6775: IFFALSE 6812
// begin unit = CreateCharacter ( 15_ & ident ) ;
6777: LD_ADDR_VAR 0 3
6781: PUSH
6782: LD_STRING 15_
6784: PUSH
6785: LD_VAR 0 1
6789: STR
6790: PPUSH
6791: CALL_OW 34
6795: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6796: LD_ADDR_EXP 20
6800: PUSH
6801: LD_EXP 20
6805: PUSH
6806: LD_VAR 0 3
6810: ADD
6811: ST_TO_ADDR
// end ; result := unit ;
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_VAR 0 3
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 2
6826: RET
// export function TabLenght ( tab ) ; var i ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
// for i = 1 to tab do
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: DOUBLE
6837: LD_INT 1
6839: DEC
6840: ST_TO_ADDR
6841: LD_VAR 0 1
6845: PUSH
6846: FOR_TO
6847: IFFALSE 6861
// result = i ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 3
6858: ST_TO_ADDR
6859: GO 6846
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 2
6867: RET
// export function Video ( mode ) ; begin
6868: LD_INT 0
6870: PPUSH
// if mode = true then
6871: LD_VAR 0 1
6875: PUSH
6876: LD_INT 1
6878: EQUAL
6879: IFFALSE 6899
// begin ingame_video = true ;
6881: LD_ADDR_OWVAR 52
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// interface_hidden = true ;
6889: LD_ADDR_OWVAR 54
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// end else
6897: GO 6915
// begin ingame_video = false ;
6899: LD_ADDR_OWVAR 52
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// interface_hidden = false ;
6907: LD_ADDR_OWVAR 54
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// end ; end ;
6915: LD_VAR 0 2
6919: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
6924: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_EXP 1
6939: PUSH
6940: LD_EXP 3
6944: PUSH
6945: LD_EXP 21
6949: PUSH
6950: LD_EXP 22
6954: PUSH
6955: LD_EXP 23
6959: PUSH
6960: LD_EXP 4
6964: PUSH
6965: LD_EXP 5
6969: PUSH
6970: LD_EXP 6
6974: PUSH
6975: LD_EXP 7
6979: PUSH
6980: LD_EXP 8
6984: PUSH
6985: LD_EXP 9
6989: PUSH
6990: LD_EXP 10
6994: PUSH
6995: LD_EXP 11
6999: PUSH
7000: LD_EXP 12
7004: PUSH
7005: LD_EXP 13
7009: PUSH
7010: LD_EXP 14
7014: PUSH
7015: LD_EXP 15
7019: PUSH
7020: LD_EXP 17
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: DIFF
7045: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7046: LD_ADDR_VAR 0 6
7050: PUSH
7051: LD_INT 1
7053: PPUSH
7054: LD_VAR 0 1
7058: PPUSH
7059: CALL_OW 12
7063: ST_TO_ADDR
// for i = 1 to characters do
7064: LD_ADDR_VAR 0 5
7068: PUSH
7069: DOUBLE
7070: LD_INT 1
7072: DEC
7073: ST_TO_ADDR
7074: LD_VAR 0 1
7078: PUSH
7079: FOR_TO
7080: IFFALSE 7190
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7082: LD_VAR 0 5
7086: PUSH
7087: LD_VAR 0 6
7091: EQUAL
7092: PUSH
7093: LD_VAR 0 1
7097: PUSH
7098: LD_VAR 0 5
7102: ARRAY
7103: PPUSH
7104: CALL_OW 258
7108: PUSH
7109: LD_INT 1
7111: EQUAL
7112: AND
7113: IFFALSE 7135
// Say ( characters [ i ] , dialogMID ) ;
7115: LD_VAR 0 1
7119: PUSH
7120: LD_VAR 0 5
7124: ARRAY
7125: PPUSH
7126: LD_VAR 0 2
7130: PPUSH
7131: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7135: LD_VAR 0 5
7139: PUSH
7140: LD_VAR 0 6
7144: EQUAL
7145: PUSH
7146: LD_VAR 0 1
7150: PUSH
7151: LD_VAR 0 5
7155: ARRAY
7156: PPUSH
7157: CALL_OW 258
7161: PUSH
7162: LD_INT 2
7164: EQUAL
7165: AND
7166: IFFALSE 7188
// Say ( characters [ i ] , dialogFID ) ;
7168: LD_VAR 0 1
7172: PUSH
7173: LD_VAR 0 5
7177: ARRAY
7178: PPUSH
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL_OW 88
// end ;
7188: GO 7079
7190: POP
7191: POP
// end ;
7192: LD_VAR 0 4
7196: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7197: LD_INT 0
7199: PPUSH
7200: PPUSH
7201: PPUSH
7202: PPUSH
// if not list then
7203: LD_VAR 0 1
7207: NOT
7208: IFFALSE 7212
// exit ;
7210: GO 7559
// result := [ ] ;
7212: LD_ADDR_VAR 0 3
7216: PUSH
7217: EMPTY
7218: ST_TO_ADDR
// for i in list do
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: LD_VAR 0 1
7228: PUSH
7229: FOR_IN
7230: IFFALSE 7471
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7232: LD_ADDR_VAR 0 6
7236: PUSH
7237: LD_VAR 0 4
7241: PPUSH
7242: LD_INT 1
7244: PPUSH
7245: CALL_OW 259
7249: PUSH
7250: LD_VAR 0 4
7254: PPUSH
7255: LD_INT 2
7257: PPUSH
7258: CALL_OW 259
7262: PLUS
7263: PUSH
7264: LD_VAR 0 4
7268: PPUSH
7269: LD_INT 3
7271: PPUSH
7272: CALL_OW 259
7276: PLUS
7277: PUSH
7278: LD_VAR 0 4
7282: PPUSH
7283: LD_INT 4
7285: PPUSH
7286: CALL_OW 259
7290: PLUS
7291: PUSH
7292: LD_INT 4
7294: DIV
7295: ST_TO_ADDR
// if not result then
7296: LD_VAR 0 3
7300: NOT
7301: IFFALSE 7327
// result := [ [ i , tmp ] ] else
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: LD_VAR 0 4
7312: PUSH
7313: LD_VAR 0 6
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: ST_TO_ADDR
7325: GO 7469
// begin if result [ result ] [ 2 ] <= tmp then
7327: LD_VAR 0 3
7331: PUSH
7332: LD_VAR 0 3
7336: ARRAY
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: PUSH
7342: LD_VAR 0 6
7346: LESSEQUAL
7347: IFFALSE 7389
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_VAR 0 3
7358: PPUSH
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 1
7366: PLUS
7367: PPUSH
7368: LD_VAR 0 4
7372: PUSH
7373: LD_VAR 0 6
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 2
7386: ST_TO_ADDR
7387: GO 7469
// for j = 1 to result do
7389: LD_ADDR_VAR 0 5
7393: PUSH
7394: DOUBLE
7395: LD_INT 1
7397: DEC
7398: ST_TO_ADDR
7399: LD_VAR 0 3
7403: PUSH
7404: FOR_TO
7405: IFFALSE 7467
// begin if tmp < result [ j ] [ 2 ] then
7407: LD_VAR 0 6
7411: PUSH
7412: LD_VAR 0 3
7416: PUSH
7417: LD_VAR 0 5
7421: ARRAY
7422: PUSH
7423: LD_INT 2
7425: ARRAY
7426: LESS
7427: IFFALSE 7465
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7429: LD_ADDR_VAR 0 3
7433: PUSH
7434: LD_VAR 0 3
7438: PPUSH
7439: LD_VAR 0 5
7443: PPUSH
7444: LD_VAR 0 4
7448: PUSH
7449: LD_VAR 0 6
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PPUSH
7458: CALL_OW 2
7462: ST_TO_ADDR
// break ;
7463: GO 7467
// end ; end ;
7465: GO 7404
7467: POP
7468: POP
// end ; end ;
7469: GO 7229
7471: POP
7472: POP
// if result and not asc then
7473: LD_VAR 0 3
7477: PUSH
7478: LD_VAR 0 2
7482: NOT
7483: AND
7484: IFFALSE 7559
// begin tmp := result ;
7486: LD_ADDR_VAR 0 6
7490: PUSH
7491: LD_VAR 0 3
7495: ST_TO_ADDR
// for i = tmp downto 1 do
7496: LD_ADDR_VAR 0 4
7500: PUSH
7501: DOUBLE
7502: LD_VAR 0 6
7506: INC
7507: ST_TO_ADDR
7508: LD_INT 1
7510: PUSH
7511: FOR_DOWNTO
7512: IFFALSE 7557
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7514: LD_ADDR_VAR 0 3
7518: PUSH
7519: LD_VAR 0 3
7523: PPUSH
7524: LD_VAR 0 6
7528: PUSH
7529: LD_VAR 0 4
7533: MINUS
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: PPUSH
7539: LD_VAR 0 6
7543: PUSH
7544: LD_VAR 0 4
7548: ARRAY
7549: PPUSH
7550: CALL_OW 1
7554: ST_TO_ADDR
7555: GO 7511
7557: POP
7558: POP
// end ; end ;
7559: LD_VAR 0 3
7563: RET
// export function PrepareDifficulty ; begin
7564: LD_INT 0
7566: PPUSH
// if difficulty = 1 then
7567: LD_OWVAR 67
7571: PUSH
7572: LD_INT 1
7574: EQUAL
7575: IFFALSE 7603
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7577: LD_INT 51
7579: PPUSH
7580: LD_INT 6
7582: PPUSH
7583: LD_INT 2
7585: PPUSH
7586: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7590: LD_INT 57
7592: PPUSH
7593: LD_INT 6
7595: PPUSH
7596: LD_INT 2
7598: PPUSH
7599: CALL_OW 322
// end ; if difficulty = 2 then
7603: LD_OWVAR 67
7607: PUSH
7608: LD_INT 2
7610: EQUAL
7611: IFFALSE 7665
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7613: LD_INT 51
7615: PPUSH
7616: LD_INT 6
7618: PPUSH
7619: LD_INT 2
7621: PPUSH
7622: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7626: LD_INT 57
7628: PPUSH
7629: LD_INT 6
7631: PPUSH
7632: LD_INT 2
7634: PPUSH
7635: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7639: LD_INT 52
7641: PPUSH
7642: LD_INT 6
7644: PPUSH
7645: LD_INT 2
7647: PPUSH
7648: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7652: LD_INT 58
7654: PPUSH
7655: LD_INT 6
7657: PPUSH
7658: LD_INT 2
7660: PPUSH
7661: CALL_OW 322
// end ; if difficulty = 3 then
7665: LD_OWVAR 67
7669: PUSH
7670: LD_INT 3
7672: EQUAL
7673: IFFALSE 7753
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7675: LD_INT 51
7677: PPUSH
7678: LD_INT 6
7680: PPUSH
7681: LD_INT 2
7683: PPUSH
7684: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7688: LD_INT 57
7690: PPUSH
7691: LD_INT 6
7693: PPUSH
7694: LD_INT 2
7696: PPUSH
7697: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7701: LD_INT 52
7703: PPUSH
7704: LD_INT 6
7706: PPUSH
7707: LD_INT 2
7709: PPUSH
7710: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7714: LD_INT 58
7716: PPUSH
7717: LD_INT 6
7719: PPUSH
7720: LD_INT 2
7722: PPUSH
7723: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7727: LD_INT 53
7729: PPUSH
7730: LD_INT 6
7732: PPUSH
7733: LD_INT 2
7735: PPUSH
7736: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7740: LD_INT 59
7742: PPUSH
7743: LD_INT 6
7745: PPUSH
7746: LD_INT 2
7748: PPUSH
7749: CALL_OW 322
// end ; end ;
7753: LD_VAR 0 1
7757: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7758: LD_INT 0
7760: PPUSH
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
// for i = 1 to count do
7765: LD_ADDR_VAR 0 8
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_VAR 0 6
7779: PUSH
7780: FOR_TO
7781: IFFALSE 7862
// begin uc_side = side ;
7783: LD_ADDR_OWVAR 20
7787: PUSH
7788: LD_VAR 0 1
7792: ST_TO_ADDR
// uc_nation = nation ;
7793: LD_ADDR_OWVAR 21
7797: PUSH
7798: LD_VAR 0 2
7802: ST_TO_ADDR
// hc_gallery =  ;
7803: LD_ADDR_OWVAR 33
7807: PUSH
7808: LD_STRING 
7810: ST_TO_ADDR
// hc_name =  ;
7811: LD_ADDR_OWVAR 26
7815: PUSH
7816: LD_STRING 
7818: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7819: LD_INT 0
7821: PPUSH
7822: LD_VAR 0 5
7826: PPUSH
7827: LD_VAR 0 4
7831: PPUSH
7832: CALL_OW 380
// un = CreateHuman ;
7836: LD_ADDR_VAR 0 10
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7846: LD_VAR 0 10
7850: PPUSH
7851: LD_VAR 0 3
7855: PPUSH
7856: CALL_OW 52
// end ;
7860: GO 7780
7862: POP
7863: POP
// end ;
7864: LD_VAR 0 7
7868: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7882: LD_INT 2100
7884: PUSH
7885: LD_INT 3150
7887: PUSH
7888: LD_INT 4200
7890: PUSH
7891: LD_INT 5250
7893: PUSH
7894: LD_INT 6300
7896: PUSH
7897: LD_INT 7350
7899: PUSH
7900: LD_INT 8400
7902: PUSH
7903: LD_INT 9450
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 1
7918: PPUSH
7919: LD_INT 8
7921: PPUSH
7922: CALL_OW 12
7926: ARRAY
7927: PPUSH
7928: CALL_OW 67
// amChassisTab = [ ] ;
7932: LD_ADDR_VAR 0 19
7936: PUSH
7937: EMPTY
7938: ST_TO_ADDR
// arChassisTab = [ ] ;
7939: LD_ADDR_VAR 0 18
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// ruChassisTab = [ ] ;
7946: LD_ADDR_VAR 0 17
7950: PUSH
7951: EMPTY
7952: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7953: LD_INT 35
7955: PPUSH
7956: CALL_OW 67
// if nation = 1 then
7960: LD_VAR 0 5
7964: PUSH
7965: LD_INT 1
7967: EQUAL
7968: IFFALSE 8459
// begin uc_side = side ;
7970: LD_ADDR_OWVAR 20
7974: PUSH
7975: LD_VAR 0 2
7979: ST_TO_ADDR
// uc_nation = nation ;
7980: LD_ADDR_OWVAR 21
7984: PUSH
7985: LD_VAR 0 5
7989: ST_TO_ADDR
// vc_engine = vehengine ;
7990: LD_ADDR_OWVAR 39
7994: PUSH
7995: LD_VAR 0 6
7999: ST_TO_ADDR
// vc_control = vehcontrol ;
8000: LD_ADDR_OWVAR 38
8004: PUSH
8005: LD_VAR 0 7
8009: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8010: LD_ADDR_OWVAR 40
8014: PUSH
8015: LD_VAR 0 10
8019: PUSH
8020: LD_INT 1
8022: PPUSH
8023: LD_VAR 0 10
8027: PPUSH
8028: CALL_OW 12
8032: ARRAY
8033: ST_TO_ADDR
// for j = 1 to AMWeapon do
8034: LD_ADDR_VAR 0 14
8038: PUSH
8039: DOUBLE
8040: LD_INT 1
8042: DEC
8043: ST_TO_ADDR
8044: LD_VAR 0 10
8048: PUSH
8049: FOR_TO
8050: IFFALSE 8351
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8052: LD_VAR 0 10
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: EQUAL
8066: PUSH
8067: LD_VAR 0 10
8071: PUSH
8072: LD_VAR 0 14
8076: ARRAY
8077: PUSH
8078: LD_INT 3
8080: EQUAL
8081: OR
8082: IFFALSE 8135
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8084: LD_ADDR_VAR 0 19
8088: PUSH
8089: LD_INT 1
8091: PUSH
8092: LD_INT 2
8094: PUSH
8095: LD_INT 3
8097: PUSH
8098: LD_INT 4
8100: PUSH
8101: LD_INT 5
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8111: LD_ADDR_OWVAR 37
8115: PUSH
8116: LD_VAR 0 19
8120: PUSH
8121: LD_INT 1
8123: PPUSH
8124: LD_VAR 0 19
8128: PPUSH
8129: CALL_OW 12
8133: ARRAY
8134: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8135: LD_VAR 0 10
8139: PUSH
8140: LD_VAR 0 14
8144: ARRAY
8145: PUSH
8146: LD_INT 4
8148: EQUAL
8149: PUSH
8150: LD_VAR 0 10
8154: PUSH
8155: LD_VAR 0 14
8159: ARRAY
8160: PUSH
8161: LD_INT 5
8163: EQUAL
8164: OR
8165: PUSH
8166: LD_VAR 0 10
8170: PUSH
8171: LD_VAR 0 14
8175: ARRAY
8176: PUSH
8177: LD_INT 9
8179: EQUAL
8180: OR
8181: PUSH
8182: LD_VAR 0 10
8186: PUSH
8187: LD_VAR 0 14
8191: ARRAY
8192: PUSH
8193: LD_INT 11
8195: EQUAL
8196: OR
8197: PUSH
8198: LD_VAR 0 10
8202: PUSH
8203: LD_VAR 0 14
8207: ARRAY
8208: PUSH
8209: LD_INT 7
8211: EQUAL
8212: OR
8213: IFFALSE 8262
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8215: LD_ADDR_VAR 0 19
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: LD_INT 3
8225: PUSH
8226: LD_INT 4
8228: PUSH
8229: LD_INT 5
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8238: LD_ADDR_OWVAR 37
8242: PUSH
8243: LD_VAR 0 19
8247: PUSH
8248: LD_INT 1
8250: PPUSH
8251: LD_VAR 0 19
8255: PPUSH
8256: CALL_OW 12
8260: ARRAY
8261: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8262: LD_VAR 0 10
8266: PUSH
8267: LD_VAR 0 14
8271: ARRAY
8272: PUSH
8273: LD_INT 8
8275: EQUAL
8276: PUSH
8277: LD_VAR 0 10
8281: PUSH
8282: LD_VAR 0 14
8286: ARRAY
8287: PUSH
8288: LD_INT 6
8290: EQUAL
8291: OR
8292: PUSH
8293: LD_VAR 0 10
8297: PUSH
8298: LD_VAR 0 14
8302: ARRAY
8303: PUSH
8304: LD_INT 10
8306: EQUAL
8307: OR
8308: IFFALSE 8349
// begin amChassisTab = [ 4 , 5 ] ;
8310: LD_ADDR_VAR 0 19
8314: PUSH
8315: LD_INT 4
8317: PUSH
8318: LD_INT 5
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8325: LD_ADDR_OWVAR 37
8329: PUSH
8330: LD_VAR 0 19
8334: PUSH
8335: LD_INT 1
8337: PPUSH
8338: LD_VAR 0 19
8342: PPUSH
8343: CALL_OW 12
8347: ARRAY
8348: ST_TO_ADDR
// end ; end ;
8349: GO 8049
8351: POP
8352: POP
// veh = CreateVehicle ;
8353: LD_ADDR_VAR 0 16
8357: PUSH
8358: CALL_OW 45
8362: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8363: LD_VAR 0 16
8367: PPUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_INT 0
8375: PPUSH
8376: CALL_OW 49
// if vc_control = 1 then
8380: LD_OWVAR 38
8384: PUSH
8385: LD_INT 1
8387: EQUAL
8388: IFFALSE 8445
// begin hc_gallery =  ;
8390: LD_ADDR_OWVAR 33
8394: PUSH
8395: LD_STRING 
8397: ST_TO_ADDR
// hc_name =  ;
8398: LD_ADDR_OWVAR 26
8402: PUSH
8403: LD_STRING 
8405: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8406: LD_INT 0
8408: PPUSH
8409: LD_INT 3
8411: PPUSH
8412: LD_VAR 0 4
8416: PPUSH
8417: CALL_OW 380
// un = CreateHuman ;
8421: LD_ADDR_VAR 0 15
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8431: LD_VAR 0 15
8435: PPUSH
8436: LD_VAR 0 16
8440: PPUSH
8441: CALL_OW 52
// end ; i = i + 1 ;
8445: LD_ADDR_VAR 0 13
8449: PUSH
8450: LD_VAR 0 13
8454: PUSH
8455: LD_INT 1
8457: PLUS
8458: ST_TO_ADDR
// end ; if nation = 2 then
8459: LD_VAR 0 5
8463: PUSH
8464: LD_INT 2
8466: EQUAL
8467: IFFALSE 8891
// begin uc_side = side ;
8469: LD_ADDR_OWVAR 20
8473: PUSH
8474: LD_VAR 0 2
8478: ST_TO_ADDR
// uc_nation = nation ;
8479: LD_ADDR_OWVAR 21
8483: PUSH
8484: LD_VAR 0 5
8488: ST_TO_ADDR
// vc_engine = vehengine ;
8489: LD_ADDR_OWVAR 39
8493: PUSH
8494: LD_VAR 0 6
8498: ST_TO_ADDR
// vc_control = vehcontrol ;
8499: LD_ADDR_OWVAR 38
8503: PUSH
8504: LD_VAR 0 7
8508: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8509: LD_ADDR_OWVAR 40
8513: PUSH
8514: LD_VAR 0 9
8518: PUSH
8519: LD_INT 1
8521: PPUSH
8522: LD_VAR 0 9
8526: PPUSH
8527: CALL_OW 12
8531: ARRAY
8532: ST_TO_ADDR
// for j = 1 to ARWeapons do
8533: LD_ADDR_VAR 0 14
8537: PUSH
8538: DOUBLE
8539: LD_INT 1
8541: DEC
8542: ST_TO_ADDR
8543: LD_VAR 0 9
8547: PUSH
8548: FOR_TO
8549: IFFALSE 8783
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8551: LD_VAR 0 9
8555: PUSH
8556: LD_VAR 0 14
8560: ARRAY
8561: PUSH
8562: LD_INT 24
8564: EQUAL
8565: PUSH
8566: LD_VAR 0 9
8570: PUSH
8571: LD_VAR 0 14
8575: ARRAY
8576: PUSH
8577: LD_INT 22
8579: EQUAL
8580: OR
8581: PUSH
8582: LD_VAR 0 9
8586: PUSH
8587: LD_VAR 0 14
8591: ARRAY
8592: PUSH
8593: LD_INT 23
8595: EQUAL
8596: OR
8597: PUSH
8598: LD_VAR 0 9
8602: PUSH
8603: LD_VAR 0 14
8607: ARRAY
8608: PUSH
8609: LD_INT 30
8611: EQUAL
8612: OR
8613: IFFALSE 8662
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8615: LD_ADDR_VAR 0 18
8619: PUSH
8620: LD_INT 11
8622: PUSH
8623: LD_INT 12
8625: PUSH
8626: LD_INT 13
8628: PUSH
8629: LD_INT 14
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8638: LD_ADDR_OWVAR 37
8642: PUSH
8643: LD_VAR 0 18
8647: PUSH
8648: LD_INT 1
8650: PPUSH
8651: LD_VAR 0 18
8655: PPUSH
8656: CALL_OW 12
8660: ARRAY
8661: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8662: LD_VAR 0 9
8666: PUSH
8667: LD_VAR 0 14
8671: ARRAY
8672: PUSH
8673: LD_INT 29
8675: EQUAL
8676: PUSH
8677: LD_VAR 0 9
8681: PUSH
8682: LD_VAR 0 14
8686: ARRAY
8687: PUSH
8688: LD_INT 28
8690: EQUAL
8691: OR
8692: PUSH
8693: LD_VAR 0 9
8697: PUSH
8698: LD_VAR 0 14
8702: ARRAY
8703: PUSH
8704: LD_INT 27
8706: EQUAL
8707: OR
8708: PUSH
8709: LD_VAR 0 9
8713: PUSH
8714: LD_VAR 0 14
8718: ARRAY
8719: PUSH
8720: LD_INT 26
8722: EQUAL
8723: OR
8724: PUSH
8725: LD_VAR 0 9
8729: PUSH
8730: LD_VAR 0 14
8734: ARRAY
8735: PUSH
8736: LD_INT 25
8738: EQUAL
8739: OR
8740: IFFALSE 8781
// begin arChassisTab = [ 13 , 14 ] ;
8742: LD_ADDR_VAR 0 18
8746: PUSH
8747: LD_INT 13
8749: PUSH
8750: LD_INT 14
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8757: LD_ADDR_OWVAR 37
8761: PUSH
8762: LD_VAR 0 18
8766: PUSH
8767: LD_INT 1
8769: PPUSH
8770: LD_VAR 0 18
8774: PPUSH
8775: CALL_OW 12
8779: ARRAY
8780: ST_TO_ADDR
// end ; end ;
8781: GO 8548
8783: POP
8784: POP
// veh = CreateVehicle ;
8785: LD_ADDR_VAR 0 16
8789: PUSH
8790: CALL_OW 45
8794: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8795: LD_VAR 0 16
8799: PPUSH
8800: LD_VAR 0 1
8804: PPUSH
8805: LD_INT 0
8807: PPUSH
8808: CALL_OW 49
// if vc_control = 1 then
8812: LD_OWVAR 38
8816: PUSH
8817: LD_INT 1
8819: EQUAL
8820: IFFALSE 8877
// begin hc_gallery =  ;
8822: LD_ADDR_OWVAR 33
8826: PUSH
8827: LD_STRING 
8829: ST_TO_ADDR
// hc_name =  ;
8830: LD_ADDR_OWVAR 26
8834: PUSH
8835: LD_STRING 
8837: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8838: LD_INT 0
8840: PPUSH
8841: LD_INT 3
8843: PPUSH
8844: LD_VAR 0 4
8848: PPUSH
8849: CALL_OW 380
// un = CreateHuman ;
8853: LD_ADDR_VAR 0 15
8857: PUSH
8858: CALL_OW 44
8862: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8863: LD_VAR 0 15
8867: PPUSH
8868: LD_VAR 0 16
8872: PPUSH
8873: CALL_OW 52
// end ; i = i + 1 ;
8877: LD_ADDR_VAR 0 13
8881: PUSH
8882: LD_VAR 0 13
8886: PUSH
8887: LD_INT 1
8889: PLUS
8890: ST_TO_ADDR
// end ; if nation = 3 then
8891: LD_VAR 0 5
8895: PUSH
8896: LD_INT 3
8898: EQUAL
8899: IFFALSE 9275
// begin uc_side = side ;
8901: LD_ADDR_OWVAR 20
8905: PUSH
8906: LD_VAR 0 2
8910: ST_TO_ADDR
// uc_nation = nation ;
8911: LD_ADDR_OWVAR 21
8915: PUSH
8916: LD_VAR 0 5
8920: ST_TO_ADDR
// vc_engine = vehengine ;
8921: LD_ADDR_OWVAR 39
8925: PUSH
8926: LD_VAR 0 6
8930: ST_TO_ADDR
// vc_control = vehcontrol ;
8931: LD_ADDR_OWVAR 38
8935: PUSH
8936: LD_VAR 0 7
8940: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8941: LD_ADDR_OWVAR 40
8945: PUSH
8946: LD_VAR 0 8
8950: PUSH
8951: LD_INT 1
8953: PPUSH
8954: LD_VAR 0 8
8958: PPUSH
8959: CALL_OW 12
8963: ARRAY
8964: ST_TO_ADDR
// for j = 1 to RuWeapons do
8965: LD_ADDR_VAR 0 14
8969: PUSH
8970: DOUBLE
8971: LD_INT 1
8973: DEC
8974: ST_TO_ADDR
8975: LD_VAR 0 8
8979: PUSH
8980: FOR_TO
8981: IFFALSE 9167
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8983: LD_VAR 0 8
8987: PUSH
8988: LD_VAR 0 14
8992: ARRAY
8993: PUSH
8994: LD_INT 42
8996: EQUAL
8997: PUSH
8998: LD_VAR 0 8
9002: PUSH
9003: LD_VAR 0 14
9007: ARRAY
9008: PUSH
9009: LD_INT 43
9011: EQUAL
9012: OR
9013: PUSH
9014: LD_VAR 0 8
9018: PUSH
9019: LD_VAR 0 14
9023: ARRAY
9024: PUSH
9025: LD_INT 44
9027: EQUAL
9028: OR
9029: PUSH
9030: LD_VAR 0 8
9034: PUSH
9035: LD_VAR 0 14
9039: ARRAY
9040: PUSH
9041: LD_INT 45
9043: EQUAL
9044: OR
9045: PUSH
9046: LD_VAR 0 8
9050: PUSH
9051: LD_VAR 0 14
9055: ARRAY
9056: PUSH
9057: LD_INT 49
9059: EQUAL
9060: OR
9061: IFFALSE 9098
// begin ruChassisTab = [ 24 ] ;
9063: LD_ADDR_VAR 0 17
9067: PUSH
9068: LD_INT 24
9070: PUSH
9071: EMPTY
9072: LIST
9073: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9074: LD_ADDR_OWVAR 37
9078: PUSH
9079: LD_VAR 0 17
9083: PUSH
9084: LD_INT 1
9086: PPUSH
9087: LD_VAR 0 17
9091: PPUSH
9092: CALL_OW 12
9096: ARRAY
9097: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9098: LD_VAR 0 8
9102: PUSH
9103: LD_VAR 0 14
9107: ARRAY
9108: PUSH
9109: LD_INT 46
9111: EQUAL
9112: PUSH
9113: LD_VAR 0 8
9117: PUSH
9118: LD_VAR 0 14
9122: ARRAY
9123: PUSH
9124: LD_INT 47
9126: EQUAL
9127: OR
9128: IFFALSE 9165
// begin ruChassisTab = [ 24 ] ;
9130: LD_ADDR_VAR 0 17
9134: PUSH
9135: LD_INT 24
9137: PUSH
9138: EMPTY
9139: LIST
9140: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9141: LD_ADDR_OWVAR 37
9145: PUSH
9146: LD_VAR 0 17
9150: PUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_VAR 0 17
9158: PPUSH
9159: CALL_OW 12
9163: ARRAY
9164: ST_TO_ADDR
// end ; end ;
9165: GO 8980
9167: POP
9168: POP
// veh = CreateVehicle ;
9169: LD_ADDR_VAR 0 16
9173: PUSH
9174: CALL_OW 45
9178: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9179: LD_VAR 0 16
9183: PPUSH
9184: LD_VAR 0 1
9188: PPUSH
9189: LD_INT 0
9191: PPUSH
9192: CALL_OW 49
// if vc_control = 1 then
9196: LD_OWVAR 38
9200: PUSH
9201: LD_INT 1
9203: EQUAL
9204: IFFALSE 9261
// begin hc_gallery =  ;
9206: LD_ADDR_OWVAR 33
9210: PUSH
9211: LD_STRING 
9213: ST_TO_ADDR
// hc_name =  ;
9214: LD_ADDR_OWVAR 26
9218: PUSH
9219: LD_STRING 
9221: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9222: LD_INT 0
9224: PPUSH
9225: LD_INT 3
9227: PPUSH
9228: LD_VAR 0 4
9232: PPUSH
9233: CALL_OW 380
// un = CreateHuman ;
9237: LD_ADDR_VAR 0 15
9241: PUSH
9242: CALL_OW 44
9246: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9247: LD_VAR 0 15
9251: PPUSH
9252: LD_VAR 0 16
9256: PPUSH
9257: CALL_OW 52
// end ; i = i + 1 ;
9261: LD_ADDR_VAR 0 13
9265: PUSH
9266: LD_VAR 0 13
9270: PUSH
9271: LD_INT 1
9273: PLUS
9274: ST_TO_ADDR
// end ; until i = vehCount ;
9275: LD_VAR 0 13
9279: PUSH
9280: LD_VAR 0 3
9284: EQUAL
9285: IFFALSE 7953
// repeat wait ( 0 0$1 ) ;
9287: LD_INT 35
9289: PPUSH
9290: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9294: LD_ADDR_VAR 0 20
9298: PUSH
9299: LD_INT 22
9301: PUSH
9302: LD_VAR 0 2
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 21
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 24
9323: PUSH
9324: LD_INT 250
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: PPUSH
9336: CALL_OW 69
9340: ST_TO_ADDR
// if vehicleOK_list > 0 then
9341: LD_VAR 0 20
9345: PUSH
9346: LD_INT 0
9348: GREATER
9349: IFFALSE 9540
// begin for i in vehicleOK_list do
9351: LD_ADDR_VAR 0 13
9355: PUSH
9356: LD_VAR 0 20
9360: PUSH
9361: FOR_IN
9362: IFFALSE 9538
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9364: LD_ADDR_VAR 0 21
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 11
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 69
9385: PPUSH
9386: LD_VAR 0 13
9390: PPUSH
9391: CALL_OW 74
9395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9396: LD_ADDR_VAR 0 22
9400: PUSH
9401: LD_INT 22
9403: PUSH
9404: LD_VAR 0 11
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 2
9415: PUSH
9416: LD_INT 59
9418: PUSH
9419: EMPTY
9420: LIST
9421: PUSH
9422: LD_INT 21
9424: PUSH
9425: LD_INT 1
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: PPUSH
9460: LD_VAR 0 13
9464: PPUSH
9465: CALL_OW 74
9469: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9470: LD_VAR 0 13
9474: PPUSH
9475: LD_VAR 0 21
9479: PPUSH
9480: CALL_OW 296
9484: PUSH
9485: LD_INT 8
9487: PLUS
9488: PUSH
9489: LD_VAR 0 13
9493: PPUSH
9494: LD_VAR 0 22
9498: PPUSH
9499: CALL_OW 296
9503: LESS
9504: IFFALSE 9522
// begin ComAttackUnit ( i , target1 ) ;
9506: LD_VAR 0 13
9510: PPUSH
9511: LD_VAR 0 21
9515: PPUSH
9516: CALL_OW 115
// end else
9520: GO 9536
// begin ComAttackUnit ( i , target2 ) ;
9522: LD_VAR 0 13
9526: PPUSH
9527: LD_VAR 0 22
9531: PPUSH
9532: CALL_OW 115
// end ; end ;
9536: GO 9361
9538: POP
9539: POP
// end ; until vehicleOK_list = [ ] ;
9540: LD_VAR 0 20
9544: PUSH
9545: EMPTY
9546: EQUAL
9547: IFFALSE 9287
// end ;
9549: LD_VAR 0 12
9553: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
// for i = 1 to 72 do
9560: LD_ADDR_VAR 0 5
9564: PUSH
9565: DOUBLE
9566: LD_INT 1
9568: DEC
9569: ST_TO_ADDR
9570: LD_INT 72
9572: PUSH
9573: FOR_TO
9574: IFFALSE 9632
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9576: LD_VAR 0 5
9580: PPUSH
9581: LD_VAR 0 1
9585: PPUSH
9586: CALL_OW 321
9590: PUSH
9591: LD_INT 1
9593: EQUAL
9594: PUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: CALL_OW 482
9609: PUSH
9610: LD_INT 1
9612: EQUAL
9613: AND
9614: IFFALSE 9630
// AddComResearch ( lab , i ) ;
9616: LD_VAR 0 2
9620: PPUSH
9621: LD_VAR 0 5
9625: PPUSH
9626: CALL_OW 184
9630: GO 9573
9632: POP
9633: POP
// end ;
9634: LD_VAR 0 4
9638: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9639: LD_INT 0
9641: PPUSH
9642: PPUSH
9643: PPUSH
9644: PPUSH
9645: PPUSH
9646: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9647: LD_ADDR_VAR 0 8
9651: PUSH
9652: LD_VAR 0 2
9656: PPUSH
9657: CALL_OW 313
9661: PUSH
9662: LD_EXP 36
9666: PUSH
9667: EMPTY
9668: LIST
9669: DIFF
9670: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9671: LD_ADDR_VAR 0 9
9675: PUSH
9676: LD_VAR 0 3
9680: PPUSH
9681: LD_INT 22
9683: PUSH
9684: LD_VAR 0 1
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 2
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 24
9705: PUSH
9706: LD_INT 750
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 3
9715: PUSH
9716: LD_INT 54
9718: PUSH
9719: EMPTY
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: PPUSH
9732: CALL_OW 70
9736: PUSH
9737: LD_EXP 36
9741: PUSH
9742: EMPTY
9743: LIST
9744: DIFF
9745: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9746: LD_ADDR_VAR 0 6
9750: PUSH
9751: LD_VAR 0 3
9755: PPUSH
9756: LD_INT 22
9758: PUSH
9759: LD_VAR 0 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 21
9770: PUSH
9771: LD_INT 3
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 3
9780: PUSH
9781: LD_INT 24
9783: PUSH
9784: LD_INT 1000
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: PPUSH
9803: CALL_OW 70
9807: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9808: LD_VAR 0 6
9812: NOT
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_VAR 0 1
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 25
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 24
9838: PUSH
9839: LD_INT 250
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 69
9855: NOT
9856: AND
9857: IFFALSE 9861
// exit ;
9859: GO 10043
// if buildings_list > 0 and engineerOkInside then
9861: LD_VAR 0 6
9865: PUSH
9866: LD_INT 0
9868: GREATER
9869: PUSH
9870: LD_VAR 0 8
9874: AND
9875: IFFALSE 9886
// ComExitBuilding ( engineerOkInside ) ;
9877: LD_VAR 0 8
9881: PPUSH
9882: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9886: LD_VAR 0 6
9890: PUSH
9891: LD_INT 0
9893: GREATER
9894: PUSH
9895: LD_VAR 0 9
9899: PUSH
9900: LD_INT 0
9902: GREATER
9903: AND
9904: IFFALSE 9924
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9906: LD_VAR 0 9
9910: PPUSH
9911: LD_VAR 0 6
9915: PUSH
9916: LD_INT 1
9918: ARRAY
9919: PPUSH
9920: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9924: LD_VAR 0 6
9928: PUSH
9929: LD_INT 0
9931: EQUAL
9932: PUSH
9933: LD_VAR 0 4
9937: PUSH
9938: LD_INT 0
9940: EQUAL
9941: AND
9942: PUSH
9943: LD_VAR 0 9
9947: PUSH
9948: LD_INT 0
9950: GREATER
9951: AND
9952: IFFALSE 9968
// ComEnterUnit ( engineerOkOutside , building ) ;
9954: LD_VAR 0 9
9958: PPUSH
9959: LD_VAR 0 2
9963: PPUSH
9964: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9968: LD_VAR 0 9
9972: PUSH
9973: LD_INT 0
9975: GREATER
9976: PUSH
9977: LD_VAR 0 6
9981: PUSH
9982: LD_INT 0
9984: EQUAL
9985: AND
9986: PUSH
9987: LD_VAR 0 4
9991: PUSH
9992: LD_INT 0
9994: GREATER
9995: AND
9996: IFFALSE 10043
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9998: LD_VAR 0 9
10002: PPUSH
10003: LD_VAR 0 4
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: PPUSH
10012: LD_VAR 0 4
10016: PUSH
10017: LD_INT 2
10019: ARRAY
10020: PPUSH
10021: LD_VAR 0 4
10025: PUSH
10026: LD_INT 3
10028: ARRAY
10029: PPUSH
10030: LD_VAR 0 4
10034: PUSH
10035: LD_INT 4
10037: ARRAY
10038: PPUSH
10039: CALL_OW 145
// end ;
10043: LD_VAR 0 5
10047: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10048: LD_INT 0
10050: PPUSH
10051: PPUSH
10052: PPUSH
10053: PPUSH
10054: PPUSH
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_INT 22
10066: PUSH
10067: LD_VAR 0 1
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 4
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 23
10088: PUSH
10089: LD_INT 2
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 24
10098: PUSH
10099: LD_INT 251
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 69
10116: PUSH
10117: LD_EXP 36
10121: PUSH
10122: EMPTY
10123: LIST
10124: DIFF
10125: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_VAR 0 3
10135: PPUSH
10136: LD_INT 22
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 23
10150: PUSH
10151: LD_INT 2
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 25
10160: PUSH
10161: LD_INT 4
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 50
10170: PUSH
10171: EMPTY
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: PPUSH
10180: CALL_OW 70
10184: PUSH
10185: LD_EXP 36
10189: PUSH
10190: EMPTY
10191: LIST
10192: DIFF
10193: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10194: LD_ADDR_VAR 0 10
10198: PUSH
10199: LD_VAR 0 3
10203: PPUSH
10204: LD_INT 22
10206: PUSH
10207: LD_VAR 0 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 21
10218: PUSH
10219: LD_INT 1
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: LD_INT 3
10228: PUSH
10229: LD_INT 25
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 24
10248: PUSH
10249: LD_INT 750
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 70
10270: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10271: LD_ADDR_VAR 0 11
10275: PUSH
10276: LD_VAR 0 2
10280: PPUSH
10281: LD_INT 22
10283: PUSH
10284: LD_VAR 0 1
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 21
10295: PUSH
10296: LD_INT 1
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: LD_INT 25
10308: PUSH
10309: LD_INT 3
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 3
10322: PUSH
10323: LD_INT 24
10325: PUSH
10326: LD_INT 1000
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 70
10347: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10348: LD_VAR 0 10
10352: NOT
10353: PUSH
10354: LD_VAR 0 11
10358: NOT
10359: AND
10360: PUSH
10361: LD_VAR 0 6
10365: NOT
10366: AND
10367: IFFALSE 10371
// exit ;
10369: GO 10605
// if damageUnits > 0 and sci_list > 0 then
10371: LD_VAR 0 10
10375: PUSH
10376: LD_INT 0
10378: GREATER
10379: PUSH
10380: LD_VAR 0 6
10384: PUSH
10385: LD_INT 0
10387: GREATER
10388: AND
10389: IFFALSE 10405
// ComMoveToArea ( damageUnits , healArea ) ;
10391: LD_VAR 0 10
10395: PPUSH
10396: LD_VAR 0 2
10400: PPUSH
10401: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10405: LD_VAR 0 11
10409: PUSH
10410: LD_INT 0
10412: GREATER
10413: PUSH
10414: LD_VAR 0 6
10418: PUSH
10419: LD_INT 0
10421: GREATER
10422: AND
10423: IFFALSE 10434
// ComExitBuilding ( sci_list ) ;
10425: LD_VAR 0 6
10429: PPUSH
10430: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10434: LD_VAR 0 11
10438: PUSH
10439: LD_INT 0
10441: GREATER
10442: PUSH
10443: LD_VAR 0 7
10447: PUSH
10448: LD_INT 0
10450: GREATER
10451: AND
10452: IFFALSE 10472
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10454: LD_VAR 0 7
10458: PPUSH
10459: LD_VAR 0 11
10463: PUSH
10464: LD_INT 1
10466: ARRAY
10467: PPUSH
10468: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10472: LD_VAR 0 10
10476: PUSH
10477: LD_INT 0
10479: EQUAL
10480: PUSH
10481: LD_VAR 0 11
10485: PUSH
10486: LD_INT 0
10488: EQUAL
10489: AND
10490: PUSH
10491: LD_VAR 0 7
10495: PUSH
10496: LD_INT 0
10498: GREATER
10499: AND
10500: IFFALSE 10605
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10502: LD_ADDR_VAR 0 12
10506: PUSH
10507: LD_INT 22
10509: PUSH
10510: LD_VAR 0 1
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 21
10521: PUSH
10522: LD_INT 3
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 30
10531: PUSH
10532: LD_INT 8
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: PPUSH
10544: CALL_OW 69
10548: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10549: LD_ADDR_VAR 0 13
10553: PUSH
10554: LD_INT 1
10556: PPUSH
10557: LD_VAR 0 12
10561: PPUSH
10562: CALL_OW 12
10566: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10567: LD_VAR 0 7
10571: PPUSH
10572: LD_INT 3
10574: PUSH
10575: LD_INT 60
10577: PUSH
10578: EMPTY
10579: LIST
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PPUSH
10585: CALL_OW 72
10589: PPUSH
10590: LD_VAR 0 12
10594: PUSH
10595: LD_VAR 0 13
10599: ARRAY
10600: PPUSH
10601: CALL_OW 120
// end ; end ;
10605: LD_VAR 0 5
10609: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
// tmpTab = [ ] ;
10616: LD_ADDR_VAR 0 6
10620: PUSH
10621: EMPTY
10622: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10623: LD_INT 22
10625: PUSH
10626: LD_VAR 0 1
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 30
10637: PUSH
10638: LD_INT 32
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: PUSH
10654: LD_INT 0
10656: GREATER
10657: IFFALSE 10740
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10659: LD_ADDR_VAR 0 4
10663: PUSH
10664: LD_INT 22
10666: PUSH
10667: LD_VAR 0 1
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 30
10678: PUSH
10679: LD_INT 32
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PPUSH
10690: CALL_OW 69
10694: PUSH
10695: FOR_IN
10696: IFFALSE 10738
// begin for j in UnitsInside ( i ) do
10698: LD_ADDR_VAR 0 5
10702: PUSH
10703: LD_VAR 0 4
10707: PPUSH
10708: CALL_OW 313
10712: PUSH
10713: FOR_IN
10714: IFFALSE 10734
// tmpTab = tmpTab ^ j ;
10716: LD_ADDR_VAR 0 6
10720: PUSH
10721: LD_VAR 0 6
10725: PUSH
10726: LD_VAR 0 5
10730: ADD
10731: ST_TO_ADDR
10732: GO 10713
10734: POP
10735: POP
// end ;
10736: GO 10695
10738: POP
10739: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10740: LD_VAR 0 6
10744: PPUSH
10745: LD_VAR 0 2
10749: PPUSH
10750: CALL_OW 250
10754: PPUSH
10755: LD_VAR 0 2
10759: PPUSH
10760: CALL_OW 251
10764: PPUSH
10765: CALL_OW 114
// end ;
10769: LD_VAR 0 3
10773: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
10778: PPUSH
10779: PPUSH
10780: PPUSH
10781: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10782: LD_ADDR_VAR 0 8
10786: PUSH
10787: LD_VAR 0 2
10791: PPUSH
10792: LD_INT 22
10794: PUSH
10795: LD_VAR 0 1
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 21
10806: PUSH
10807: LD_INT 2
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 34
10816: PUSH
10817: LD_INT 52
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: LIST
10828: PPUSH
10829: CALL_OW 70
10833: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10834: LD_ADDR_VAR 0 9
10838: PUSH
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 22
10846: PUSH
10847: LD_VAR 0 1
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 21
10858: PUSH
10859: LD_INT 3
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 3
10868: PUSH
10869: LD_INT 24
10871: PUSH
10872: LD_INT 1000
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: PPUSH
10891: CALL_OW 70
10895: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10896: LD_VAR 0 9
10900: PUSH
10901: LD_INT 0
10903: GREATER
10904: PUSH
10905: LD_VAR 0 8
10909: PPUSH
10910: LD_INT 24
10912: PUSH
10913: LD_INT 750
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 72
10924: PUSH
10925: LD_INT 0
10927: GREATER
10928: AND
10929: IFFALSE 10949
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10931: LD_VAR 0 8
10935: PPUSH
10936: LD_VAR 0 9
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: PPUSH
10945: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10949: LD_VAR 0 8
10953: PUSH
10954: LD_INT 0
10956: GREATER
10957: PUSH
10958: LD_VAR 0 9
10962: PUSH
10963: LD_INT 0
10965: EQUAL
10966: AND
10967: PUSH
10968: LD_VAR 0 3
10972: PUSH
10973: LD_INT 0
10975: GREATER
10976: AND
10977: IFFALSE 11024
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10979: LD_VAR 0 8
10983: PPUSH
10984: LD_VAR 0 3
10988: PUSH
10989: LD_INT 1
10991: ARRAY
10992: PPUSH
10993: LD_VAR 0 3
10997: PUSH
10998: LD_INT 2
11000: ARRAY
11001: PPUSH
11002: LD_VAR 0 3
11006: PUSH
11007: LD_INT 3
11009: ARRAY
11010: PPUSH
11011: LD_VAR 0 3
11015: PUSH
11016: LD_INT 4
11018: ARRAY
11019: PPUSH
11020: CALL_OW 567
// end ;
11024: LD_VAR 0 4
11028: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
11033: PPUSH
11034: PPUSH
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11039: LD_ADDR_VAR 0 6
11043: PUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: LD_INT 22
11051: PUSH
11052: LD_VAR 0 1
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 56
11063: PUSH
11064: EMPTY
11065: LIST
11066: PUSH
11067: LD_INT 24
11069: PUSH
11070: LD_INT 700
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 3
11079: PUSH
11080: LD_INT 60
11082: PUSH
11083: EMPTY
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 2
11092: PUSH
11093: LD_INT 25
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 25
11105: PUSH
11106: LD_INT 5
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 25
11115: PUSH
11116: LD_INT 8
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 25
11125: PUSH
11126: LD_INT 9
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 70
11151: PUSH
11152: LD_EXP 26
11156: PUSH
11157: LD_EXP 27
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: DIFF
11166: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11167: LD_ADDR_VAR 0 7
11171: PUSH
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_INT 22
11179: PUSH
11180: LD_VAR 0 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 30
11191: PUSH
11192: LD_INT 32
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 58
11201: PUSH
11202: EMPTY
11203: LIST
11204: PUSH
11205: LD_INT 24
11207: PUSH
11208: LD_INT 251
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: PPUSH
11221: CALL_OW 70
11225: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11226: LD_ADDR_VAR 0 9
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: LD_INT 22
11238: PUSH
11239: LD_VAR 0 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: LD_INT 30
11253: PUSH
11254: LD_INT 4
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 30
11263: PUSH
11264: LD_INT 5
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 24
11278: PUSH
11279: LD_INT 251
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: PPUSH
11291: CALL_OW 70
11295: ST_TO_ADDR
// if barrackList > 0 then
11296: LD_VAR 0 9
11300: PUSH
11301: LD_INT 0
11303: GREATER
11304: IFFALSE 11452
// begin if turretList = 0 then
11306: LD_VAR 0 7
11310: PUSH
11311: LD_INT 0
11313: EQUAL
11314: IFFALSE 11356
// begin if soldiers_list > 0 then
11316: LD_VAR 0 6
11320: PUSH
11321: LD_INT 0
11323: GREATER
11324: IFFALSE 11354
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11326: LD_VAR 0 6
11330: PPUSH
11331: LD_VAR 0 9
11335: PUSH
11336: LD_INT 1
11338: PPUSH
11339: LD_VAR 0 9
11343: PPUSH
11344: CALL_OW 12
11348: ARRAY
11349: PPUSH
11350: CALL_OW 120
// end else
11354: GO 11452
// begin for i in barrackList do
11356: LD_ADDR_VAR 0 4
11360: PUSH
11361: LD_VAR 0 9
11365: PUSH
11366: FOR_IN
11367: IFFALSE 11450
// begin insideUnits = UnitsInside ( i ) ;
11369: LD_ADDR_VAR 0 10
11373: PUSH
11374: LD_VAR 0 4
11378: PPUSH
11379: CALL_OW 313
11383: ST_TO_ADDR
// if insideUnits > 0 then
11384: LD_VAR 0 10
11388: PUSH
11389: LD_INT 0
11391: GREATER
11392: IFFALSE 11416
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11394: LD_VAR 0 10
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: PPUSH
11403: LD_VAR 0 7
11407: PUSH
11408: LD_INT 1
11410: ARRAY
11411: PPUSH
11412: CALL_OW 120
// if soldiers_list > 0 then
11416: LD_VAR 0 6
11420: PUSH
11421: LD_INT 0
11423: GREATER
11424: IFFALSE 11448
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11426: LD_VAR 0 6
11430: PUSH
11431: LD_INT 1
11433: ARRAY
11434: PPUSH
11435: LD_VAR 0 7
11439: PUSH
11440: LD_INT 1
11442: ARRAY
11443: PPUSH
11444: CALL_OW 120
// end ;
11448: GO 11366
11450: POP
11451: POP
// end ; end ; end ;
11452: LD_VAR 0 3
11456: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11457: LD_INT 0
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11464: LD_ADDR_VAR 0 6
11468: PUSH
11469: LD_INT 22
11471: PUSH
11472: LD_VAR 0 1
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 2
11483: PUSH
11484: LD_INT 30
11486: PUSH
11487: LD_INT 31
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 30
11496: PUSH
11497: LD_INT 32
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 30
11506: PUSH
11507: LD_INT 33
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 30
11516: PUSH
11517: LD_INT 4
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 30
11526: PUSH
11527: LD_INT 5
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PPUSH
11546: CALL_OW 69
11550: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11551: LD_ADDR_VAR 0 7
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_VAR 0 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 21
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 58
11580: PUSH
11581: EMPTY
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11594: LD_VAR 0 6
11598: PUSH
11599: LD_INT 0
11601: GREATER
11602: PUSH
11603: LD_VAR 0 7
11607: PUSH
11608: LD_INT 0
11610: GREATER
11611: AND
11612: IFFALSE 11682
// begin for i in turretsList do
11614: LD_ADDR_VAR 0 4
11618: PUSH
11619: LD_VAR 0 6
11623: PUSH
11624: FOR_IN
11625: IFFALSE 11680
// begin for j in enemyBuildings do
11627: LD_ADDR_VAR 0 5
11631: PUSH
11632: LD_VAR 0 7
11636: PUSH
11637: FOR_IN
11638: IFFALSE 11676
// begin if GetDistUnits ( i , j ) < 20 then
11640: LD_VAR 0 4
11644: PPUSH
11645: LD_VAR 0 5
11649: PPUSH
11650: CALL_OW 296
11654: PUSH
11655: LD_INT 20
11657: LESS
11658: IFFALSE 11674
// begin ComAttackUnit ( i , j ) ;
11660: LD_VAR 0 4
11664: PPUSH
11665: LD_VAR 0 5
11669: PPUSH
11670: CALL_OW 115
// end ; end ;
11674: GO 11637
11676: POP
11677: POP
// end ;
11678: GO 11624
11680: POP
11681: POP
// end ; end ;
11682: LD_VAR 0 3
11686: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11687: LD_INT 0
11689: PPUSH
11690: PPUSH
// for i = 1 to vehCount do
11691: LD_ADDR_VAR 0 9
11695: PUSH
11696: DOUBLE
11697: LD_INT 1
11699: DEC
11700: ST_TO_ADDR
11701: LD_VAR 0 3
11705: PUSH
11706: FOR_TO
11707: IFFALSE 11754
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11709: LD_VAR 0 2
11713: PPUSH
11714: LD_VAR 0 7
11718: PPUSH
11719: LD_VAR 0 5
11723: PPUSH
11724: LD_VAR 0 6
11728: PPUSH
11729: LD_VAR 0 4
11733: PUSH
11734: LD_INT 1
11736: PPUSH
11737: LD_VAR 0 4
11741: PPUSH
11742: CALL_OW 12
11746: ARRAY
11747: PPUSH
11748: CALL_OW 185
11752: GO 11706
11754: POP
11755: POP
// end ;
11756: LD_VAR 0 8
11760: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11761: LD_INT 0
11763: PPUSH
11764: PPUSH
11765: PPUSH
11766: PPUSH
11767: PPUSH
11768: PPUSH
// if oponent = 1 then
11769: LD_VAR 0 2
11773: PUSH
11774: LD_INT 1
11776: EQUAL
11777: IFFALSE 11967
// begin repeat wait ( 0 0$1 ) ;
11779: LD_INT 35
11781: PPUSH
11782: CALL_OW 67
// for j in legionVehicles do
11786: LD_ADDR_VAR 0 5
11790: PUSH
11791: LD_EXP 55
11795: PUSH
11796: FOR_IN
11797: IFFALSE 11955
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11799: LD_ADDR_VAR 0 7
11803: PUSH
11804: LD_INT 22
11806: PUSH
11807: LD_VAR 0 1
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PPUSH
11816: CALL_OW 69
11820: PPUSH
11821: LD_VAR 0 5
11825: PPUSH
11826: CALL_OW 74
11830: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11831: LD_ADDR_VAR 0 8
11835: PUSH
11836: LD_INT 22
11838: PUSH
11839: LD_VAR 0 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 30
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 59
11860: PUSH
11861: EMPTY
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: PPUSH
11872: CALL_OW 69
11876: PPUSH
11877: LD_VAR 0 5
11881: PPUSH
11882: CALL_OW 74
11886: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11887: LD_VAR 0 5
11891: PPUSH
11892: LD_VAR 0 7
11896: PPUSH
11897: CALL_OW 296
11901: PUSH
11902: LD_INT 8
11904: PLUS
11905: PUSH
11906: LD_VAR 0 5
11910: PPUSH
11911: LD_VAR 0 8
11915: PPUSH
11916: CALL_OW 296
11920: LESS
11921: IFFALSE 11939
// ComAttackUnit ( j , target1 ) else
11923: LD_VAR 0 5
11927: PPUSH
11928: LD_VAR 0 7
11932: PPUSH
11933: CALL_OW 115
11937: GO 11953
// ComAttackUnit ( j , target2 ) ;
11939: LD_VAR 0 5
11943: PPUSH
11944: LD_VAR 0 8
11948: PPUSH
11949: CALL_OW 115
// end ;
11953: GO 11796
11955: POP
11956: POP
// until legionVehicles = 0 ;
11957: LD_EXP 55
11961: PUSH
11962: LD_INT 0
11964: EQUAL
11965: IFFALSE 11779
// end ; if oponent = 2 then
11967: LD_VAR 0 2
11971: PUSH
11972: LD_INT 2
11974: EQUAL
11975: IFFALSE 12165
// begin repeat wait ( 0 0$1 ) ;
11977: LD_INT 35
11979: PPUSH
11980: CALL_OW 67
// for j in russianVehicles do
11984: LD_ADDR_VAR 0 5
11988: PUSH
11989: LD_EXP 61
11993: PUSH
11994: FOR_IN
11995: IFFALSE 12153
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11997: LD_ADDR_VAR 0 7
12001: PUSH
12002: LD_INT 22
12004: PUSH
12005: LD_VAR 0 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PPUSH
12014: CALL_OW 69
12018: PPUSH
12019: LD_VAR 0 5
12023: PPUSH
12024: CALL_OW 74
12028: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12029: LD_ADDR_VAR 0 8
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 30
12048: PUSH
12049: LD_INT 32
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 59
12058: PUSH
12059: EMPTY
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: PPUSH
12070: CALL_OW 69
12074: PPUSH
12075: LD_VAR 0 5
12079: PPUSH
12080: CALL_OW 74
12084: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12085: LD_VAR 0 5
12089: PPUSH
12090: LD_VAR 0 7
12094: PPUSH
12095: CALL_OW 296
12099: PUSH
12100: LD_INT 8
12102: PLUS
12103: PUSH
12104: LD_VAR 0 5
12108: PPUSH
12109: LD_VAR 0 8
12113: PPUSH
12114: CALL_OW 296
12118: LESS
12119: IFFALSE 12137
// ComAttackUnit ( j , target1 ) else
12121: LD_VAR 0 5
12125: PPUSH
12126: LD_VAR 0 7
12130: PPUSH
12131: CALL_OW 115
12135: GO 12151
// ComAttackUnit ( j , target2 ) ;
12137: LD_VAR 0 5
12141: PPUSH
12142: LD_VAR 0 8
12146: PPUSH
12147: CALL_OW 115
// end ;
12151: GO 11994
12153: POP
12154: POP
// until russianVehicles = 0 ;
12155: LD_EXP 61
12159: PUSH
12160: LD_INT 0
12162: EQUAL
12163: IFFALSE 11977
// end ; if oponent = 3 then
12165: LD_VAR 0 2
12169: PUSH
12170: LD_INT 3
12172: EQUAL
12173: IFFALSE 12363
// begin repeat wait ( 0 0$1 ) ;
12175: LD_INT 35
12177: PPUSH
12178: CALL_OW 67
// for j in allianceVehicles do
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_EXP 62
12191: PUSH
12192: FOR_IN
12193: IFFALSE 12351
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12195: LD_ADDR_VAR 0 7
12199: PUSH
12200: LD_INT 22
12202: PUSH
12203: LD_VAR 0 1
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PPUSH
12212: CALL_OW 69
12216: PPUSH
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 74
12226: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12227: LD_ADDR_VAR 0 8
12231: PUSH
12232: LD_INT 22
12234: PUSH
12235: LD_VAR 0 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 30
12246: PUSH
12247: LD_INT 32
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 59
12256: PUSH
12257: EMPTY
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: PPUSH
12268: CALL_OW 69
12272: PPUSH
12273: LD_VAR 0 5
12277: PPUSH
12278: CALL_OW 74
12282: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12283: LD_VAR 0 5
12287: PPUSH
12288: LD_VAR 0 7
12292: PPUSH
12293: CALL_OW 296
12297: PUSH
12298: LD_INT 8
12300: PLUS
12301: PUSH
12302: LD_VAR 0 5
12306: PPUSH
12307: LD_VAR 0 8
12311: PPUSH
12312: CALL_OW 296
12316: LESS
12317: IFFALSE 12335
// ComAttackUnit ( j , target1 ) else
12319: LD_VAR 0 5
12323: PPUSH
12324: LD_VAR 0 7
12328: PPUSH
12329: CALL_OW 115
12333: GO 12349
// ComAttackUnit ( j , target2 ) ;
12335: LD_VAR 0 5
12339: PPUSH
12340: LD_VAR 0 8
12344: PPUSH
12345: CALL_OW 115
// end ;
12349: GO 12192
12351: POP
12352: POP
// until allianceVehicles = 0 ;
12353: LD_EXP 62
12357: PUSH
12358: LD_INT 0
12360: EQUAL
12361: IFFALSE 12175
// end ; end ;
12363: LD_VAR 0 3
12367: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12368: LD_INT 0
12370: PPUSH
12371: PPUSH
12372: PPUSH
12373: PPUSH
12374: PPUSH
12375: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12376: LD_ADDR_VAR 0 6
12380: PUSH
12381: LD_INT 22
12383: PUSH
12384: LD_VAR 0 1
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 25
12395: PUSH
12396: LD_INT 9
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 69
12411: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12412: LD_ADDR_VAR 0 7
12416: PUSH
12417: LD_INT 81
12419: PUSH
12420: LD_VAR 0 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: LD_INT 21
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 69
12454: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12455: LD_ADDR_VAR 0 4
12459: PUSH
12460: LD_INT 1
12462: PPUSH
12463: LD_INT 3
12465: PPUSH
12466: CALL_OW 12
12470: ST_TO_ADDR
// for i = 1 to list do
12471: LD_ADDR_VAR 0 5
12475: PUSH
12476: DOUBLE
12477: LD_INT 1
12479: DEC
12480: ST_TO_ADDR
12481: LD_VAR 0 6
12485: PUSH
12486: FOR_TO
12487: IFFALSE 12689
// for ta in filter do
12489: LD_ADDR_VAR 0 3
12493: PUSH
12494: LD_VAR 0 7
12498: PUSH
12499: FOR_IN
12500: IFFALSE 12685
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12502: LD_VAR 0 6
12506: PUSH
12507: LD_VAR 0 5
12511: ARRAY
12512: PPUSH
12513: LD_VAR 0 3
12517: PPUSH
12518: CALL_OW 296
12522: PUSH
12523: LD_INT 15
12525: LESSEQUAL
12526: IFFALSE 12683
// begin case c of 1 :
12528: LD_VAR 0 4
12532: PUSH
12533: LD_INT 1
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12579
12541: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12542: LD_VAR 0 6
12546: PUSH
12547: LD_VAR 0 5
12551: ARRAY
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: CALL_OW 250
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: CALL_OW 251
12572: PPUSH
12573: CALL_OW 154
12577: GO 12683
12579: LD_INT 2
12581: DOUBLE
12582: EQUAL
12583: IFTRUE 12587
12585: GO 12651
12587: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12588: LD_VAR 0 6
12592: PUSH
12593: LD_VAR 0 5
12597: ARRAY
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: CALL_OW 250
12608: PUSH
12609: LD_INT 1
12611: NEG
12612: PPUSH
12613: LD_INT 1
12615: PPUSH
12616: CALL_OW 12
12620: PLUS
12621: PPUSH
12622: LD_VAR 0 3
12626: PPUSH
12627: CALL_OW 251
12631: PUSH
12632: LD_INT 1
12634: NEG
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 12
12643: PLUS
12644: PPUSH
12645: CALL_OW 153
12649: GO 12683
12651: LD_INT 3
12653: DOUBLE
12654: EQUAL
12655: IFTRUE 12659
12657: GO 12682
12659: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12660: LD_VAR 0 6
12664: PUSH
12665: LD_VAR 0 5
12669: ARRAY
12670: PPUSH
12671: LD_VAR 0 3
12675: PPUSH
12676: CALL_OW 115
12680: GO 12683
12682: POP
// end ; end ;
12683: GO 12499
12685: POP
12686: POP
12687: GO 12486
12689: POP
12690: POP
// end ;
12691: LD_VAR 0 2
12695: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12696: LD_INT 0
12698: PPUSH
12699: PPUSH
12700: PPUSH
12701: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12702: LD_INT 22
12704: PUSH
12705: LD_VAR 0 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 21
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 34
12726: PUSH
12727: LD_INT 49
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: PUSH
12744: LD_INT 0
12746: EQUAL
12747: IFFALSE 12751
// exit ;
12749: GO 13006
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12751: LD_INT 22
12753: PUSH
12754: LD_VAR 0 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 21
12765: PUSH
12766: LD_INT 2
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 34
12775: PUSH
12776: LD_INT 49
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 69
12792: PUSH
12793: LD_INT 0
12795: GREATER
12796: IFFALSE 13006
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12798: LD_ADDR_VAR 0 6
12802: PUSH
12803: LD_INT 22
12805: PUSH
12806: LD_VAR 0 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 34
12827: PUSH
12828: LD_INT 49
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12845: LD_INT 105
12847: PPUSH
12848: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12852: LD_ADDR_VAR 0 4
12856: PUSH
12857: LD_VAR 0 6
12861: PPUSH
12862: LD_INT 3
12864: PUSH
12865: LD_INT 60
12867: PUSH
12868: EMPTY
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PPUSH
12875: CALL_OW 72
12879: PUSH
12880: FOR_IN
12881: IFFALSE 12994
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12883: LD_ADDR_VAR 0 5
12887: PUSH
12888: LD_INT 81
12890: PUSH
12891: LD_VAR 0 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 101
12902: PUSH
12903: LD_VAR 0 2
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 2
12914: PUSH
12915: LD_INT 21
12917: PUSH
12918: LD_INT 1
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 3
12927: PUSH
12928: LD_INT 58
12930: PUSH
12931: EMPTY
12932: LIST
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: PPUSH
12948: CALL_OW 69
12952: PPUSH
12953: LD_VAR 0 4
12957: PPUSH
12958: CALL_OW 74
12962: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12963: LD_VAR 0 4
12967: PPUSH
12968: LD_VAR 0 5
12972: PPUSH
12973: CALL_OW 250
12977: PPUSH
12978: LD_VAR 0 5
12982: PPUSH
12983: CALL_OW 251
12987: PPUSH
12988: CALL_OW 111
// end ;
12992: GO 12880
12994: POP
12995: POP
// until vehs = 0 ;
12996: LD_VAR 0 6
13000: PUSH
13001: LD_INT 0
13003: EQUAL
13004: IFFALSE 12798
// end ; end_of_file
13006: LD_VAR 0 3
13010: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
13011: LD_VAR 0 1
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: PUSH
13020: LD_VAR 0 2
13024: PUSH
13025: LD_INT 4
13027: EQUAL
13028: AND
13029: IFFALSE 13038
// YouLost ( text ) ;
13031: LD_STRING text
13033: PPUSH
13034: CALL_OW 104
// end ;
13038: PPOPN 2
13040: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13041: LD_VAR 0 1
13045: PUSH
13046: LD_INT 235
13048: EQUAL
13049: PUSH
13050: LD_VAR 0 2
13054: PPUSH
13055: CALL_OW 255
13059: PUSH
13060: LD_INT 4
13062: EQUAL
13063: AND
13064: IFFALSE 13140
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13066: LD_INT 235
13068: PPUSH
13069: LD_INT 84
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13079: LD_INT 235
13081: PPUSH
13082: LD_INT 68
13084: PPUSH
13085: LD_INT 100
13087: PPUSH
13088: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13092: LD_INT 235
13094: PPUSH
13095: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13099: LD_INT 235
13101: PPUSH
13102: LD_INT 48
13104: PPUSH
13105: LD_INT 69
13107: PPUSH
13108: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13112: LD_INT 235
13114: PPUSH
13115: LD_INT 39
13117: PPUSH
13118: LD_INT 61
13120: PPUSH
13121: CALL_OW 171
// wait ( 0 0$10 ) ;
13125: LD_INT 350
13127: PPUSH
13128: CALL_OW 67
// powellUnloadCargo = 1 ;
13132: LD_ADDR_EXP 70
13136: PUSH
13137: LD_INT 1
13139: ST_TO_ADDR
// end ; end ;
13140: PPOPN 2
13142: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13143: LD_INT 0
13145: PPUSH
13146: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13147: LD_ADDR_VAR 0 3
13151: PUSH
13152: LD_INT 22
13154: PUSH
13155: LD_INT 4
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 21
13164: PUSH
13165: LD_INT 1
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 56
13174: PUSH
13175: EMPTY
13176: LIST
13177: PUSH
13178: LD_INT 3
13180: PUSH
13181: LD_INT 60
13183: PUSH
13184: EMPTY
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: PUSH
13202: LD_EXP 17
13206: PUSH
13207: EMPTY
13208: LIST
13209: DIFF
13210: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13211: LD_VAR 0 1
13215: PPUSH
13216: CALL_OW 255
13220: PUSH
13221: LD_INT 4
13223: EQUAL
13224: IFFALSE 13355
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13226: LD_INT 22
13228: PUSH
13229: LD_INT 4
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 30
13238: PUSH
13239: LD_INT 8
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PPUSH
13250: CALL_OW 69
13254: PUSH
13255: LD_INT 1
13257: EQUAL
13258: IFFALSE 13355
// begin for i = 1 to 3 do
13260: LD_ADDR_VAR 0 2
13264: PUSH
13265: DOUBLE
13266: LD_INT 1
13268: DEC
13269: ST_TO_ADDR
13270: LD_INT 3
13272: PUSH
13273: FOR_TO
13274: IFFALSE 13338
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13276: LD_VAR 0 3
13280: PUSH
13281: LD_VAR 0 2
13285: ARRAY
13286: PPUSH
13287: LD_INT 3
13289: PUSH
13290: LD_INT 25
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 72
13308: PPUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13318: LD_VAR 0 3
13322: PUSH
13323: LD_VAR 0 2
13327: ARRAY
13328: PPUSH
13329: LD_INT 4
13331: PPUSH
13332: CALL_OW 183
// end ;
13336: GO 13273
13338: POP
13339: POP
// ResAllTechs ( 4 , building , 1 ) ;
13340: LD_INT 4
13342: PPUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL 9554 0 3
// end ; if GetSide ( building ) = 8 then
13355: LD_VAR 0 1
13359: PPUSH
13360: CALL_OW 255
13364: PUSH
13365: LD_INT 8
13367: EQUAL
13368: IFFALSE 13553
// begin if GetNation ( building ) = 3 then
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 248
13379: PUSH
13380: LD_INT 3
13382: EQUAL
13383: IFFALSE 13553
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13385: LD_EXP 36
13389: PPUSH
13390: LD_INT 73
13392: PPUSH
13393: LD_INT 16
13395: PPUSH
13396: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13400: LD_EXP 36
13404: PPUSH
13405: LD_INT 21
13407: PPUSH
13408: LD_INT 74
13410: PPUSH
13411: LD_INT 12
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: CALL_OW 205
// wait ( 0 0$2 ) ;
13421: LD_INT 70
13423: PPUSH
13424: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13428: LD_EXP 36
13432: PPUSH
13433: LD_INT 22
13435: PUSH
13436: LD_INT 8
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 30
13445: PUSH
13446: LD_INT 3
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 23
13455: PUSH
13456: LD_INT 3
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: PPUSH
13468: CALL_OW 69
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PPUSH
13477: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13481: LD_EXP 36
13485: PPUSH
13486: LD_INT 3
13488: PPUSH
13489: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13493: LD_INT 22
13495: PUSH
13496: LD_INT 8
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 30
13505: PUSH
13506: LD_INT 3
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 23
13515: PUSH
13516: LD_INT 3
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: PPUSH
13528: CALL_OW 69
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: PPUSH
13537: LD_INT 24
13539: PPUSH
13540: LD_INT 3
13542: PPUSH
13543: LD_INT 3
13545: PPUSH
13546: LD_INT 48
13548: PPUSH
13549: CALL_OW 185
// end ; end ; end ;
13553: PPOPN 3
13555: END
// on BuildingComplete ( building ) do var powellPeople ;
13556: LD_INT 0
13558: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 255
13568: PUSH
13569: LD_INT 4
13571: EQUAL
13572: PUSH
13573: LD_VAR 0 1
13577: PPUSH
13578: CALL_OW 266
13582: PUSH
13583: LD_INT 17
13585: EQUAL
13586: AND
13587: IFFALSE 13869
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13589: LD_ADDR_VAR 0 2
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_INT 4
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 21
13606: PUSH
13607: LD_INT 1
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 56
13616: PUSH
13617: EMPTY
13618: LIST
13619: PUSH
13620: LD_INT 3
13622: PUSH
13623: LD_INT 60
13625: PUSH
13626: EMPTY
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: PUSH
13644: LD_EXP 17
13648: PUSH
13649: EMPTY
13650: LIST
13651: DIFF
13652: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
13653: LD_INT 22
13655: PUSH
13656: LD_INT 4
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 21
13665: PUSH
13666: LD_INT 3
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 30
13675: PUSH
13676: LD_INT 32
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: PPUSH
13688: CALL_OW 69
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PPUSH
13697: LD_INT 6
13699: PPUSH
13700: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
13704: LD_INT 22
13706: PUSH
13707: LD_INT 4
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 21
13716: PUSH
13717: LD_INT 3
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: LD_INT 32
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: LIST
13738: PPUSH
13739: CALL_OW 69
13743: PUSH
13744: LD_INT 2
13746: ARRAY
13747: PPUSH
13748: LD_INT 5
13750: PPUSH
13751: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
13755: LD_VAR 0 2
13759: PUSH
13760: LD_INT 1
13762: ARRAY
13763: PPUSH
13764: LD_INT 22
13766: PUSH
13767: LD_INT 4
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 21
13776: PUSH
13777: LD_INT 3
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 30
13786: PUSH
13787: LD_INT 32
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 69
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
13812: LD_VAR 0 2
13816: PUSH
13817: LD_INT 2
13819: ARRAY
13820: PPUSH
13821: LD_INT 22
13823: PUSH
13824: LD_INT 4
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 21
13833: PUSH
13834: LD_INT 3
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 30
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: PPUSH
13856: CALL_OW 69
13860: PUSH
13861: LD_INT 2
13863: ARRAY
13864: PPUSH
13865: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
13869: LD_VAR 0 1
13873: PPUSH
13874: CALL_OW 255
13878: PUSH
13879: LD_INT 4
13881: EQUAL
13882: PUSH
13883: LD_VAR 0 1
13887: PPUSH
13888: CALL_OW 266
13892: PUSH
13893: LD_INT 21
13895: EQUAL
13896: AND
13897: IFFALSE 14044
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13899: LD_INT 85
13901: PPUSH
13902: LD_INT 3
13904: PPUSH
13905: LD_INT 3
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 3
13913: PUSH
13914: LD_INT 5
13916: PUSH
13917: LD_INT 7
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_INT 3
13930: PPUSH
13931: CALL_OW 12
13935: ARRAY
13936: PPUSH
13937: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13941: LD_INT 85
13943: PPUSH
13944: LD_INT 3
13946: PPUSH
13947: LD_INT 3
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: LD_INT 3
13955: PUSH
13956: LD_INT 5
13958: PUSH
13959: LD_INT 7
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 1
13969: PPUSH
13970: LD_INT 3
13972: PPUSH
13973: CALL_OW 12
13977: ARRAY
13978: PPUSH
13979: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
13983: LD_INT 85
13985: PPUSH
13986: LD_INT 3
13988: PPUSH
13989: LD_INT 3
13991: PPUSH
13992: LD_INT 1
13994: PPUSH
13995: LD_INT 3
13997: PUSH
13998: LD_INT 5
14000: PUSH
14001: LD_INT 7
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 1
14011: PPUSH
14012: LD_INT 3
14014: PPUSH
14015: CALL_OW 12
14019: ARRAY
14020: PPUSH
14021: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
14025: LD_INT 85
14027: PPUSH
14028: LD_INT 5
14030: PPUSH
14031: LD_INT 3
14033: PPUSH
14034: LD_INT 1
14036: PPUSH
14037: LD_INT 6
14039: PPUSH
14040: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 255
14053: PUSH
14054: LD_INT 8
14056: EQUAL
14057: IFFALSE 14083
// begin if GetBType ( building ) = b_workshop then
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 266
14068: PUSH
14069: LD_INT 2
14071: EQUAL
14072: IFFALSE 14083
// ComUpgrade ( building ) ;
14074: LD_VAR 0 1
14078: PPUSH
14079: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14083: LD_VAR 0 1
14087: PPUSH
14088: CALL_OW 255
14092: PUSH
14093: LD_INT 3
14095: EQUAL
14096: IFFALSE 14170
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14098: LD_ADDR_EXP 94
14102: PUSH
14103: LD_EXP 94
14107: PPUSH
14108: LD_INT 1
14110: PPUSH
14111: CALL_OW 3
14115: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14116: LD_ADDR_EXP 94
14120: PUSH
14121: LD_EXP 94
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: CALL_OW 3
14133: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14134: LD_ADDR_EXP 94
14138: PUSH
14139: LD_EXP 94
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: CALL_OW 3
14151: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14152: LD_ADDR_EXP 94
14156: PUSH
14157: LD_EXP 94
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: CALL_OW 3
14169: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 255
14179: PUSH
14180: LD_INT 8
14182: EQUAL
14183: IFFALSE 14257
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14185: LD_ADDR_EXP 93
14189: PUSH
14190: LD_EXP 93
14194: PPUSH
14195: LD_INT 1
14197: PPUSH
14198: CALL_OW 3
14202: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14203: LD_ADDR_EXP 93
14207: PUSH
14208: LD_EXP 93
14212: PPUSH
14213: LD_INT 1
14215: PPUSH
14216: CALL_OW 3
14220: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14221: LD_ADDR_EXP 93
14225: PUSH
14226: LD_EXP 93
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 3
14238: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14239: LD_ADDR_EXP 93
14243: PUSH
14244: LD_EXP 93
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: CALL_OW 3
14256: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 255
14266: PUSH
14267: LD_INT 7
14269: EQUAL
14270: IFFALSE 14344
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14272: LD_ADDR_EXP 95
14276: PUSH
14277: LD_EXP 95
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: CALL_OW 3
14289: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14290: LD_ADDR_EXP 95
14294: PUSH
14295: LD_EXP 95
14299: PPUSH
14300: LD_INT 1
14302: PPUSH
14303: CALL_OW 3
14307: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14308: LD_ADDR_EXP 95
14312: PUSH
14313: LD_EXP 95
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: CALL_OW 3
14325: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14326: LD_ADDR_EXP 95
14330: PUSH
14331: LD_EXP 95
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: CALL_OW 3
14343: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 255
14353: PUSH
14354: LD_INT 3
14356: EQUAL
14357: IFFALSE 14424
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 266
14368: PUSH
14369: LD_INT 32
14371: EQUAL
14372: PUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 266
14382: PUSH
14383: LD_INT 33
14385: EQUAL
14386: OR
14387: IFFALSE 14424
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14389: LD_VAR 0 1
14393: PPUSH
14394: LD_INT 46
14396: PUSH
14397: LD_INT 47
14399: PUSH
14400: LD_INT 45
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 1
14410: PPUSH
14411: LD_INT 3
14413: PPUSH
14414: CALL_OW 12
14418: ARRAY
14419: PPUSH
14420: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 255
14433: PUSH
14434: LD_INT 8
14436: EQUAL
14437: PUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 266
14447: PUSH
14448: LD_INT 32
14450: EQUAL
14451: AND
14452: IFFALSE 14485
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14454: LD_VAR 0 1
14458: PPUSH
14459: LD_INT 28
14461: PUSH
14462: LD_INT 27
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 1
14471: PPUSH
14472: LD_INT 2
14474: PPUSH
14475: CALL_OW 12
14479: ARRAY
14480: PPUSH
14481: CALL_OW 431
// end ; end ;
14485: PPOPN 2
14487: END
// on EnterBuilding ( building , human ) do begin end ;
14488: PPOPN 2
14490: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 255
14500: PUSH
14501: LD_INT 6
14503: EQUAL
14504: IFFALSE 14522
// ruBehs = ruBehs ^ vehicle ;
14506: LD_ADDR_EXP 59
14510: PUSH
14511: LD_EXP 59
14515: PUSH
14516: LD_VAR 0 1
14520: ADD
14521: ST_TO_ADDR
// end ;
14522: PPOPN 1
14524: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14525: LD_INT 0
14527: PPUSH
14528: PPUSH
// begin if vehicle = powellVeh then
14529: LD_VAR 0 1
14533: PUSH
14534: LD_EXP 73
14538: EQUAL
14539: IFFALSE 14555
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14541: LD_VAR 0 1
14545: PPUSH
14546: CALL_OW 313
14550: PPUSH
14551: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 255
14564: PUSH
14565: LD_INT 4
14567: EQUAL
14568: IFFALSE 14585
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14570: LD_VAR 0 1
14574: PPUSH
14575: LD_INT 58
14577: PPUSH
14578: LD_INT 63
14580: PPUSH
14581: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14585: LD_VAR 0 1
14589: PPUSH
14590: CALL_OW 255
14594: PUSH
14595: LD_INT 4
14597: EQUAL
14598: PUSH
14599: LD_EXP 69
14603: PUSH
14604: LD_INT 2
14606: EQUAL
14607: AND
14608: PUSH
14609: LD_VAR 0 1
14613: PPUSH
14614: CALL_OW 264
14618: PUSH
14619: LD_INT 6
14621: EQUAL
14622: AND
14623: IFFALSE 14677
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14625: LD_EXP 66
14629: PUSH
14630: LD_INT 5
14632: ARRAY
14633: PPUSH
14634: CALL_OW 122
// wait ( 0 0$1 ) ;
14638: LD_INT 35
14640: PPUSH
14641: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
14645: LD_EXP 66
14649: PUSH
14650: LD_INT 5
14652: ARRAY
14653: PPUSH
14654: LD_INT 85
14656: PPUSH
14657: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
14661: LD_EXP 66
14665: PUSH
14666: LD_INT 5
14668: ARRAY
14669: PPUSH
14670: LD_INT 3
14672: PPUSH
14673: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
14677: LD_VAR 0 1
14681: PPUSH
14682: CALL_OW 255
14686: PUSH
14687: LD_INT 4
14689: EQUAL
14690: PUSH
14691: LD_EXP 69
14695: PUSH
14696: LD_INT 2
14698: EQUAL
14699: AND
14700: PUSH
14701: LD_VAR 0 1
14705: PPUSH
14706: CALL_OW 264
14710: PUSH
14711: LD_INT 3
14713: EQUAL
14714: AND
14715: IFFALSE 14742
// begin powellVeh = vehicle ;
14717: LD_ADDR_EXP 73
14721: PUSH
14722: LD_VAR 0 1
14726: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
14727: LD_VAR 0 1
14731: PPUSH
14732: LD_INT 49
14734: PPUSH
14735: LD_INT 74
14737: PPUSH
14738: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 255
14751: PUSH
14752: LD_INT 8
14754: EQUAL
14755: PUSH
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 248
14765: PUSH
14766: LD_INT 2
14768: EQUAL
14769: AND
14770: PUSH
14771: LD_VAR 0 1
14775: PPUSH
14776: CALL_OW 247
14780: PUSH
14781: LD_INT 2
14783: EQUAL
14784: AND
14785: IFFALSE 14821
// begin legionVehicles = legionVehicles ^ vehicle ;
14787: LD_ADDR_EXP 55
14791: PUSH
14792: LD_EXP 55
14796: PUSH
14797: LD_VAR 0 1
14801: ADD
14802: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
14803: LD_VAR 0 1
14807: PPUSH
14808: LD_EXP 56
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PPUSH
14817: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL_OW 255
14830: PUSH
14831: LD_INT 8
14833: EQUAL
14834: PUSH
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 248
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: AND
14849: IFFALSE 15388
// begin ChangeMissionObjectives ( MlegionDel ) ;
14851: LD_STRING MlegionDel
14853: PPUSH
14854: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
14858: LD_ADDR_VAR 0 3
14862: PUSH
14863: LD_INT 1
14865: PPUSH
14866: LD_INT 2
14868: PPUSH
14869: CALL_OW 12
14873: ST_TO_ADDR
// legionRocket = vehicle ;
14874: LD_ADDR_EXP 99
14878: PUSH
14879: LD_VAR 0 1
14883: ST_TO_ADDR
// DialogueOn ;
14884: CALL_OW 6
// if legionBomb = 1 then
14888: LD_VAR 0 3
14892: PUSH
14893: LD_INT 1
14895: EQUAL
14896: IFFALSE 15248
// begin if Kurt then
14898: LD_EXP 30
14902: IFFALSE 14918
// Say ( Kurt , D12-Kurt-1 ) else
14904: LD_EXP 30
14908: PPUSH
14909: LD_STRING D12-Kurt-1
14911: PPUSH
14912: CALL_OW 88
14916: GO 14980
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
14918: LD_INT 22
14920: PUSH
14921: LD_INT 8
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 21
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 25
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 26
14950: PUSH
14951: LD_INT 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 69
14968: PUSH
14969: LD_INT 2
14971: ARRAY
14972: PPUSH
14973: LD_STRING D12-Kurt-1
14975: PPUSH
14976: CALL_OW 88
// DialogueOff ;
14980: CALL_OW 7
// wait ( 0 0$15 ) ;
14984: LD_INT 525
14986: PPUSH
14987: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
14991: LD_ADDR_VAR 0 4
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 23
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 2
15028: PUSH
15029: LD_INT 30
15031: PUSH
15032: LD_INT 0
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 30
15041: PUSH
15042: LD_INT 1
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 69
15064: ST_TO_ADDR
// if rocketTarget = 0 then
15065: LD_VAR 0 4
15069: PUSH
15070: LD_INT 0
15072: EQUAL
15073: IFFALSE 15149
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15075: LD_ADDR_VAR 0 4
15079: PUSH
15080: LD_INT 22
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 23
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: LD_INT 30
15115: PUSH
15116: LD_INT 0
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 30
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: ST_TO_ADDR
// if rocketTarget = 0 then
15149: LD_VAR 0 4
15153: PUSH
15154: LD_INT 0
15156: EQUAL
15157: IFFALSE 15211
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15159: LD_ADDR_VAR 0 4
15163: PUSH
15164: LD_INT 22
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 21
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 23
15186: PUSH
15187: LD_INT 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 50
15196: PUSH
15197: EMPTY
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 69
15210: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15211: LD_EXP 99
15215: PPUSH
15216: LD_VAR 0 4
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PPUSH
15225: CALL_OW 250
15229: PPUSH
15230: LD_VAR 0 4
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PPUSH
15239: CALL_OW 251
15243: PPUSH
15244: CALL_OW 116
// end ; if legionBomb = 2 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 2
15255: EQUAL
15256: IFFALSE 15388
// begin if Kurt then
15258: LD_EXP 30
15262: IFFALSE 15278
// Say ( Kurt , D12a-Kurt-1 ) else
15264: LD_EXP 30
15268: PPUSH
15269: LD_STRING D12a-Kurt-1
15271: PPUSH
15272: CALL_OW 88
15276: GO 15340
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15278: LD_INT 22
15280: PUSH
15281: LD_INT 8
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 21
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 26
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: PPUSH
15324: CALL_OW 69
15328: PUSH
15329: LD_INT 2
15331: ARRAY
15332: PPUSH
15333: LD_STRING D12a-Kurt-11
15335: PPUSH
15336: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15340: LD_EXP 28
15344: PPUSH
15345: LD_STRING D12a-Roth-1
15347: PPUSH
15348: CALL_OW 94
// DialogueOff ;
15352: CALL_OW 7
// wait ( 0 0$15 ) ;
15356: LD_INT 525
15358: PPUSH
15359: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15363: LD_EXP 99
15367: PPUSH
15368: LD_INT 23
15370: PPUSH
15371: CALL_OW 250
15375: PPUSH
15376: LD_INT 23
15378: PPUSH
15379: CALL_OW 251
15383: PPUSH
15384: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15388: LD_VAR 0 1
15392: PPUSH
15393: CALL_OW 255
15397: PUSH
15398: LD_INT 3
15400: EQUAL
15401: PUSH
15402: LD_VAR 0 1
15406: PPUSH
15407: CALL_OW 248
15411: PUSH
15412: LD_INT 3
15414: EQUAL
15415: AND
15416: PUSH
15417: LD_VAR 0 1
15421: PPUSH
15422: CALL_OW 247
15426: PUSH
15427: LD_INT 2
15429: EQUAL
15430: AND
15431: IFFALSE 15449
// RussianVehicles = RussianVehicles ^ vehicle ;
15433: LD_ADDR_EXP 61
15437: PUSH
15438: LD_EXP 61
15442: PUSH
15443: LD_VAR 0 1
15447: ADD
15448: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15449: LD_VAR 0 1
15453: PPUSH
15454: CALL_OW 255
15458: PUSH
15459: LD_INT 7
15461: EQUAL
15462: PUSH
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 247
15472: PUSH
15473: LD_INT 2
15475: EQUAL
15476: AND
15477: IFFALSE 15536
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15479: LD_ADDR_EXP 62
15483: PUSH
15484: LD_EXP 62
15488: PUSH
15489: LD_VAR 0 1
15493: ADD
15494: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 263
15504: PUSH
15505: LD_INT 2
15507: EQUAL
15508: IFFALSE 15536
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15510: LD_VAR 0 1
15514: PPUSH
15515: LD_EXP 63
15519: PUSH
15520: LD_INT 1
15522: PPUSH
15523: LD_INT 3
15525: PPUSH
15526: CALL_OW 12
15530: ARRAY
15531: PPUSH
15532: CALL_OW 135
// end ; end ;
15536: PPOPN 4
15538: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 255
15548: PUSH
15549: LD_INT 4
15551: EQUAL
15552: PUSH
15553: LD_EXP 69
15557: PUSH
15558: LD_INT 1
15560: EQUAL
15561: AND
15562: IFFALSE 15665
// begin ComEnterUnit ( human , AmFact ) ;
15564: LD_VAR 0 2
15568: PPUSH
15569: LD_INT 85
15571: PPUSH
15572: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15576: LD_VAR 0 2
15580: PPUSH
15581: CALL_OW 258
15585: PUSH
15586: LD_INT 1
15588: EQUAL
15589: PUSH
15590: LD_EXP 102
15594: PUSH
15595: LD_INT 0
15597: EQUAL
15598: AND
15599: IFFALSE 15665
// begin blockEvent1 = 1 ;
15601: LD_ADDR_EXP 102
15605: PUSH
15606: LD_INT 1
15608: ST_TO_ADDR
// startAttacks = 1 ;
15609: LD_ADDR_EXP 72
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15617: LD_VAR 0 2
15621: PPUSH
15622: LD_STRING D4a-Sol1-1
15624: PPUSH
15625: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
15629: LD_EXP 17
15633: PPUSH
15634: LD_STRING D4a-Pow-1
15636: PPUSH
15637: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
15641: LD_VAR 0 2
15645: PPUSH
15646: LD_STRING D4a-Sol1-2
15648: PPUSH
15649: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
15653: LD_EXP 17
15657: PPUSH
15658: LD_STRING D4a-Pow-2
15660: PPUSH
15661: CALL_OW 88
// end ; end ; end ;
15665: PPOPN 2
15667: END
// on UnitDestroyed ( unit ) do var i ;
15668: LD_INT 0
15670: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15671: LD_VAR 0 1
15675: PPUSH
15676: CALL_OW 255
15680: PUSH
15681: LD_INT 1
15683: EQUAL
15684: PUSH
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 247
15694: PUSH
15695: LD_INT 1
15697: EQUAL
15698: AND
15699: IFFALSE 15715
// unitLost = unitLost + 1 ;
15701: LD_ADDR_EXP 98
15705: PUSH
15706: LD_EXP 98
15710: PUSH
15711: LD_INT 1
15713: PLUS
15714: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 255
15724: PUSH
15725: LD_INT 4
15727: EQUAL
15728: PUSH
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL_OW 247
15738: PUSH
15739: LD_INT 1
15741: EQUAL
15742: AND
15743: IFFALSE 15793
// begin for i in amUnitsAttack do
15745: LD_ADDR_VAR 0 2
15749: PUSH
15750: LD_EXP 66
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15791
// if i = unit then
15758: LD_VAR 0 2
15762: PUSH
15763: LD_VAR 0 1
15767: EQUAL
15768: IFFALSE 15789
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
15770: LD_ADDR_EXP 66
15774: PUSH
15775: LD_EXP 66
15779: PUSH
15780: LD_VAR 0 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: DIFF
15788: ST_TO_ADDR
15789: GO 15755
15791: POP
15792: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
15793: LD_VAR 0 1
15797: PPUSH
15798: CALL_OW 255
15802: PUSH
15803: LD_INT 8
15805: EQUAL
15806: PUSH
15807: LD_VAR 0 1
15811: PPUSH
15812: CALL_OW 247
15816: PUSH
15817: LD_INT 2
15819: EQUAL
15820: AND
15821: PUSH
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 248
15831: PUSH
15832: LD_INT 2
15834: EQUAL
15835: AND
15836: IFFALSE 15886
// begin for i in legionVehicles do
15838: LD_ADDR_VAR 0 2
15842: PUSH
15843: LD_EXP 55
15847: PUSH
15848: FOR_IN
15849: IFFALSE 15884
// if i = unit then
15851: LD_VAR 0 2
15855: PUSH
15856: LD_VAR 0 1
15860: EQUAL
15861: IFFALSE 15882
// legionVehicles = legionVehicles diff [ unit ] ;
15863: LD_ADDR_EXP 55
15867: PUSH
15868: LD_EXP 55
15872: PUSH
15873: LD_VAR 0 1
15877: PUSH
15878: EMPTY
15879: LIST
15880: DIFF
15881: ST_TO_ADDR
15882: GO 15848
15884: POP
15885: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 255
15895: PUSH
15896: LD_INT 3
15898: EQUAL
15899: PUSH
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 247
15909: PUSH
15910: LD_INT 2
15912: EQUAL
15913: AND
15914: IFFALSE 15964
// begin for i in RussianVehicles do
15916: LD_ADDR_VAR 0 2
15920: PUSH
15921: LD_EXP 61
15925: PUSH
15926: FOR_IN
15927: IFFALSE 15962
// if i = unit then
15929: LD_VAR 0 2
15933: PUSH
15934: LD_VAR 0 1
15938: EQUAL
15939: IFFALSE 15960
// RussianVehicles = RussianVehicles diff [ unit ] ;
15941: LD_ADDR_EXP 61
15945: PUSH
15946: LD_EXP 61
15950: PUSH
15951: LD_VAR 0 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: DIFF
15959: ST_TO_ADDR
15960: GO 15926
15962: POP
15963: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
15964: LD_VAR 0 1
15968: PPUSH
15969: CALL_OW 255
15973: PUSH
15974: LD_INT 7
15976: EQUAL
15977: PUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 247
15987: PUSH
15988: LD_INT 2
15990: EQUAL
15991: AND
15992: IFFALSE 16042
// begin for i in AllianceVehicles do
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_EXP 62
16003: PUSH
16004: FOR_IN
16005: IFFALSE 16040
// if i = unit then
16007: LD_VAR 0 2
16011: PUSH
16012: LD_VAR 0 1
16016: EQUAL
16017: IFFALSE 16038
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
16019: LD_ADDR_EXP 62
16023: PUSH
16024: LD_EXP 62
16028: PUSH
16029: LD_VAR 0 1
16033: PUSH
16034: EMPTY
16035: LIST
16036: DIFF
16037: ST_TO_ADDR
16038: GO 16004
16040: POP
16041: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16042: LD_VAR 0 1
16046: PPUSH
16047: CALL_OW 255
16051: PUSH
16052: LD_INT 3
16054: EQUAL
16055: PUSH
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 247
16065: PUSH
16066: LD_INT 3
16068: EQUAL
16069: AND
16070: IFFALSE 16762
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 266
16081: PUSH
16082: LD_INT 31
16084: EQUAL
16085: PUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 266
16095: PUSH
16096: LD_INT 32
16098: EQUAL
16099: OR
16100: PUSH
16101: LD_VAR 0 1
16105: PPUSH
16106: CALL_OW 266
16110: PUSH
16111: LD_INT 36
16113: EQUAL
16114: OR
16115: PUSH
16116: LD_VAR 0 1
16120: PPUSH
16121: CALL_OW 266
16125: PUSH
16126: LD_INT 0
16128: EQUAL
16129: OR
16130: PUSH
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 266
16140: PUSH
16141: LD_INT 24
16143: EQUAL
16144: OR
16145: PUSH
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 266
16155: PUSH
16156: LD_INT 17
16158: EQUAL
16159: OR
16160: PUSH
16161: LD_VAR 0 1
16165: PPUSH
16166: CALL_OW 266
16170: PUSH
16171: LD_INT 25
16173: EQUAL
16174: OR
16175: PUSH
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 266
16185: PUSH
16186: LD_INT 19
16188: EQUAL
16189: OR
16190: PUSH
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 266
16200: PUSH
16201: LD_INT 20
16203: EQUAL
16204: OR
16205: PUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 266
16215: PUSH
16216: LD_INT 18
16218: EQUAL
16219: OR
16220: PUSH
16221: LD_VAR 0 1
16225: PPUSH
16226: CALL_OW 266
16230: PUSH
16231: LD_INT 21
16233: EQUAL
16234: OR
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 266
16245: PUSH
16246: LD_INT 23
16248: EQUAL
16249: OR
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 266
16260: PUSH
16261: LD_INT 16
16263: EQUAL
16264: OR
16265: PUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 266
16275: PUSH
16276: LD_INT 6
16278: EQUAL
16279: OR
16280: PUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 266
16290: PUSH
16291: LD_INT 29
16293: EQUAL
16294: OR
16295: PUSH
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 266
16305: PUSH
16306: LD_INT 26
16308: EQUAL
16309: OR
16310: PUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 266
16320: PUSH
16321: LD_INT 30
16323: EQUAL
16324: OR
16325: PUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 266
16335: PUSH
16336: LD_INT 28
16338: EQUAL
16339: OR
16340: PUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 266
16350: PUSH
16351: LD_INT 27
16353: EQUAL
16354: OR
16355: PUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 266
16365: PUSH
16366: LD_INT 33
16368: EQUAL
16369: OR
16370: PUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 266
16380: PUSH
16381: LD_INT 2
16383: EQUAL
16384: OR
16385: PUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 266
16395: PUSH
16396: LD_INT 4
16398: EQUAL
16399: OR
16400: IFFALSE 16486
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16402: LD_ADDR_EXP 94
16406: PUSH
16407: LD_EXP 94
16411: PUSH
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL_OW 266
16421: ADD
16422: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16423: LD_ADDR_EXP 94
16427: PUSH
16428: LD_EXP 94
16432: PUSH
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 250
16442: ADD
16443: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16444: LD_ADDR_EXP 94
16448: PUSH
16449: LD_EXP 94
16453: PUSH
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 251
16463: ADD
16464: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16465: LD_ADDR_EXP 94
16469: PUSH
16470: LD_EXP 94
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 254
16484: ADD
16485: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 266
16495: PUSH
16496: LD_INT 1
16498: EQUAL
16499: IFFALSE 16578
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16501: LD_ADDR_EXP 94
16505: PUSH
16506: LD_EXP 94
16510: PUSH
16511: LD_INT 0
16513: ADD
16514: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16515: LD_ADDR_EXP 94
16519: PUSH
16520: LD_EXP 94
16524: PUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 250
16534: ADD
16535: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16536: LD_ADDR_EXP 94
16540: PUSH
16541: LD_EXP 94
16545: PUSH
16546: LD_VAR 0 1
16550: PPUSH
16551: CALL_OW 251
16555: ADD
16556: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16557: LD_ADDR_EXP 94
16561: PUSH
16562: LD_EXP 94
16566: PUSH
16567: LD_VAR 0 1
16571: PPUSH
16572: CALL_OW 254
16576: ADD
16577: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 266
16587: PUSH
16588: LD_INT 3
16590: EQUAL
16591: IFFALSE 16670
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16593: LD_ADDR_EXP 94
16597: PUSH
16598: LD_EXP 94
16602: PUSH
16603: LD_INT 2
16605: ADD
16606: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16607: LD_ADDR_EXP 94
16611: PUSH
16612: LD_EXP 94
16616: PUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 250
16626: ADD
16627: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16628: LD_ADDR_EXP 94
16632: PUSH
16633: LD_EXP 94
16637: PUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 251
16647: ADD
16648: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16649: LD_ADDR_EXP 94
16653: PUSH
16654: LD_EXP 94
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 254
16668: ADD
16669: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 266
16679: PUSH
16680: LD_INT 5
16682: EQUAL
16683: IFFALSE 16762
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
16685: LD_ADDR_EXP 94
16689: PUSH
16690: LD_EXP 94
16694: PUSH
16695: LD_INT 4
16697: ADD
16698: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16699: LD_ADDR_EXP 94
16703: PUSH
16704: LD_EXP 94
16708: PUSH
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 250
16718: ADD
16719: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16720: LD_ADDR_EXP 94
16724: PUSH
16725: LD_EXP 94
16729: PUSH
16730: LD_VAR 0 1
16734: PPUSH
16735: CALL_OW 251
16739: ADD
16740: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16741: LD_ADDR_EXP 94
16745: PUSH
16746: LD_EXP 94
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 254
16760: ADD
16761: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
16762: LD_VAR 0 1
16766: PPUSH
16767: CALL_OW 255
16771: PUSH
16772: LD_INT 8
16774: EQUAL
16775: PUSH
16776: LD_VAR 0 1
16780: PPUSH
16781: CALL_OW 247
16785: PUSH
16786: LD_INT 3
16788: EQUAL
16789: AND
16790: PUSH
16791: LD_VAR 0 1
16795: PPUSH
16796: CALL_OW 248
16800: PUSH
16801: LD_INT 2
16803: EQUAL
16804: AND
16805: IFFALSE 17497
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 266
16816: PUSH
16817: LD_INT 31
16819: EQUAL
16820: PUSH
16821: LD_VAR 0 1
16825: PPUSH
16826: CALL_OW 266
16830: PUSH
16831: LD_INT 32
16833: EQUAL
16834: OR
16835: PUSH
16836: LD_VAR 0 1
16840: PPUSH
16841: CALL_OW 266
16845: PUSH
16846: LD_INT 36
16848: EQUAL
16849: OR
16850: PUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 266
16860: PUSH
16861: LD_INT 0
16863: EQUAL
16864: OR
16865: PUSH
16866: LD_VAR 0 1
16870: PPUSH
16871: CALL_OW 266
16875: PUSH
16876: LD_INT 24
16878: EQUAL
16879: OR
16880: PUSH
16881: LD_VAR 0 1
16885: PPUSH
16886: CALL_OW 266
16890: PUSH
16891: LD_INT 17
16893: EQUAL
16894: OR
16895: PUSH
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 266
16905: PUSH
16906: LD_INT 25
16908: EQUAL
16909: OR
16910: PUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 266
16920: PUSH
16921: LD_INT 19
16923: EQUAL
16924: OR
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 266
16935: PUSH
16936: LD_INT 20
16938: EQUAL
16939: OR
16940: PUSH
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 266
16950: PUSH
16951: LD_INT 18
16953: EQUAL
16954: OR
16955: PUSH
16956: LD_VAR 0 1
16960: PPUSH
16961: CALL_OW 266
16965: PUSH
16966: LD_INT 21
16968: EQUAL
16969: OR
16970: PUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 266
16980: PUSH
16981: LD_INT 23
16983: EQUAL
16984: OR
16985: PUSH
16986: LD_VAR 0 1
16990: PPUSH
16991: CALL_OW 266
16995: PUSH
16996: LD_INT 16
16998: EQUAL
16999: OR
17000: PUSH
17001: LD_VAR 0 1
17005: PPUSH
17006: CALL_OW 266
17010: PUSH
17011: LD_INT 6
17013: EQUAL
17014: OR
17015: PUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 266
17025: PUSH
17026: LD_INT 29
17028: EQUAL
17029: OR
17030: PUSH
17031: LD_VAR 0 1
17035: PPUSH
17036: CALL_OW 266
17040: PUSH
17041: LD_INT 26
17043: EQUAL
17044: OR
17045: PUSH
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 266
17055: PUSH
17056: LD_INT 30
17058: EQUAL
17059: OR
17060: PUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 266
17070: PUSH
17071: LD_INT 28
17073: EQUAL
17074: OR
17075: PUSH
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL_OW 266
17085: PUSH
17086: LD_INT 27
17088: EQUAL
17089: OR
17090: PUSH
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 266
17100: PUSH
17101: LD_INT 33
17103: EQUAL
17104: OR
17105: PUSH
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 266
17115: PUSH
17116: LD_INT 2
17118: EQUAL
17119: OR
17120: PUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: CALL_OW 266
17130: PUSH
17131: LD_INT 4
17133: EQUAL
17134: OR
17135: IFFALSE 17221
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17137: LD_ADDR_EXP 93
17141: PUSH
17142: LD_EXP 93
17146: PUSH
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 266
17156: ADD
17157: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17158: LD_ADDR_EXP 93
17162: PUSH
17163: LD_EXP 93
17167: PUSH
17168: LD_VAR 0 1
17172: PPUSH
17173: CALL_OW 250
17177: ADD
17178: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17179: LD_ADDR_EXP 93
17183: PUSH
17184: LD_EXP 93
17188: PUSH
17189: LD_VAR 0 1
17193: PPUSH
17194: CALL_OW 251
17198: ADD
17199: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17200: LD_ADDR_EXP 93
17204: PUSH
17205: LD_EXP 93
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 254
17219: ADD
17220: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL_OW 266
17230: PUSH
17231: LD_INT 1
17233: EQUAL
17234: IFFALSE 17313
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17236: LD_ADDR_EXP 93
17240: PUSH
17241: LD_EXP 93
17245: PUSH
17246: LD_INT 0
17248: ADD
17249: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17250: LD_ADDR_EXP 93
17254: PUSH
17255: LD_EXP 93
17259: PUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 250
17269: ADD
17270: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17271: LD_ADDR_EXP 93
17275: PUSH
17276: LD_EXP 93
17280: PUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 251
17290: ADD
17291: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17292: LD_ADDR_EXP 93
17296: PUSH
17297: LD_EXP 93
17301: PUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 254
17311: ADD
17312: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 266
17322: PUSH
17323: LD_INT 3
17325: EQUAL
17326: IFFALSE 17405
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17328: LD_ADDR_EXP 93
17332: PUSH
17333: LD_EXP 93
17337: PUSH
17338: LD_INT 2
17340: ADD
17341: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17342: LD_ADDR_EXP 93
17346: PUSH
17347: LD_EXP 93
17351: PUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 250
17361: ADD
17362: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17363: LD_ADDR_EXP 93
17367: PUSH
17368: LD_EXP 93
17372: PUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 251
17382: ADD
17383: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17384: LD_ADDR_EXP 93
17388: PUSH
17389: LD_EXP 93
17393: PUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 254
17403: ADD
17404: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 266
17414: PUSH
17415: LD_INT 5
17417: EQUAL
17418: IFFALSE 17497
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17420: LD_ADDR_EXP 93
17424: PUSH
17425: LD_EXP 93
17429: PUSH
17430: LD_INT 4
17432: ADD
17433: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17434: LD_ADDR_EXP 93
17438: PUSH
17439: LD_EXP 93
17443: PUSH
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL_OW 250
17453: ADD
17454: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17455: LD_ADDR_EXP 93
17459: PUSH
17460: LD_EXP 93
17464: PUSH
17465: LD_VAR 0 1
17469: PPUSH
17470: CALL_OW 251
17474: ADD
17475: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17476: LD_ADDR_EXP 93
17480: PUSH
17481: LD_EXP 93
17485: PUSH
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 254
17495: ADD
17496: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 255
17506: PUSH
17507: LD_INT 7
17509: EQUAL
17510: PUSH
17511: LD_VAR 0 1
17515: PPUSH
17516: CALL_OW 247
17520: PUSH
17521: LD_INT 3
17523: EQUAL
17524: AND
17525: IFFALSE 18217
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 266
17536: PUSH
17537: LD_INT 31
17539: EQUAL
17540: PUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 266
17550: PUSH
17551: LD_INT 32
17553: EQUAL
17554: OR
17555: PUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 266
17565: PUSH
17566: LD_INT 36
17568: EQUAL
17569: OR
17570: PUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 266
17580: PUSH
17581: LD_INT 0
17583: EQUAL
17584: OR
17585: PUSH
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL_OW 266
17595: PUSH
17596: LD_INT 24
17598: EQUAL
17599: OR
17600: PUSH
17601: LD_VAR 0 1
17605: PPUSH
17606: CALL_OW 266
17610: PUSH
17611: LD_INT 17
17613: EQUAL
17614: OR
17615: PUSH
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 266
17625: PUSH
17626: LD_INT 25
17628: EQUAL
17629: OR
17630: PUSH
17631: LD_VAR 0 1
17635: PPUSH
17636: CALL_OW 266
17640: PUSH
17641: LD_INT 19
17643: EQUAL
17644: OR
17645: PUSH
17646: LD_VAR 0 1
17650: PPUSH
17651: CALL_OW 266
17655: PUSH
17656: LD_INT 20
17658: EQUAL
17659: OR
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 266
17670: PUSH
17671: LD_INT 18
17673: EQUAL
17674: OR
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 266
17685: PUSH
17686: LD_INT 21
17688: EQUAL
17689: OR
17690: PUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: CALL_OW 266
17700: PUSH
17701: LD_INT 23
17703: EQUAL
17704: OR
17705: PUSH
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 266
17715: PUSH
17716: LD_INT 16
17718: EQUAL
17719: OR
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 266
17730: PUSH
17731: LD_INT 6
17733: EQUAL
17734: OR
17735: PUSH
17736: LD_VAR 0 1
17740: PPUSH
17741: CALL_OW 266
17745: PUSH
17746: LD_INT 29
17748: EQUAL
17749: OR
17750: PUSH
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 266
17760: PUSH
17761: LD_INT 26
17763: EQUAL
17764: OR
17765: PUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 266
17775: PUSH
17776: LD_INT 30
17778: EQUAL
17779: OR
17780: PUSH
17781: LD_VAR 0 1
17785: PPUSH
17786: CALL_OW 266
17790: PUSH
17791: LD_INT 28
17793: EQUAL
17794: OR
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 266
17805: PUSH
17806: LD_INT 27
17808: EQUAL
17809: OR
17810: PUSH
17811: LD_VAR 0 1
17815: PPUSH
17816: CALL_OW 266
17820: PUSH
17821: LD_INT 33
17823: EQUAL
17824: OR
17825: PUSH
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 266
17835: PUSH
17836: LD_INT 2
17838: EQUAL
17839: OR
17840: PUSH
17841: LD_VAR 0 1
17845: PPUSH
17846: CALL_OW 266
17850: PUSH
17851: LD_INT 4
17853: EQUAL
17854: OR
17855: IFFALSE 17941
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
17857: LD_ADDR_EXP 95
17861: PUSH
17862: LD_EXP 95
17866: PUSH
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL_OW 266
17876: ADD
17877: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17878: LD_ADDR_EXP 95
17882: PUSH
17883: LD_EXP 95
17887: PUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: CALL_OW 250
17897: ADD
17898: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17899: LD_ADDR_EXP 95
17903: PUSH
17904: LD_EXP 95
17908: PUSH
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 251
17918: ADD
17919: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
17920: LD_ADDR_EXP 95
17924: PUSH
17925: LD_EXP 95
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 254
17939: ADD
17940: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 266
17950: PUSH
17951: LD_INT 1
17953: EQUAL
17954: IFFALSE 18033
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
17956: LD_ADDR_EXP 95
17960: PUSH
17961: LD_EXP 95
17965: PUSH
17966: LD_INT 0
17968: ADD
17969: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
17970: LD_ADDR_EXP 95
17974: PUSH
17975: LD_EXP 95
17979: PUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 250
17989: ADD
17990: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
17991: LD_ADDR_EXP 95
17995: PUSH
17996: LD_EXP 95
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 251
18010: ADD
18011: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18012: LD_ADDR_EXP 95
18016: PUSH
18017: LD_EXP 95
18021: PUSH
18022: LD_VAR 0 1
18026: PPUSH
18027: CALL_OW 254
18031: ADD
18032: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18033: LD_VAR 0 1
18037: PPUSH
18038: CALL_OW 266
18042: PUSH
18043: LD_INT 3
18045: EQUAL
18046: IFFALSE 18125
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18048: LD_ADDR_EXP 95
18052: PUSH
18053: LD_EXP 95
18057: PUSH
18058: LD_INT 2
18060: ADD
18061: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18062: LD_ADDR_EXP 95
18066: PUSH
18067: LD_EXP 95
18071: PUSH
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 250
18081: ADD
18082: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18083: LD_ADDR_EXP 95
18087: PUSH
18088: LD_EXP 95
18092: PUSH
18093: LD_VAR 0 1
18097: PPUSH
18098: CALL_OW 251
18102: ADD
18103: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18104: LD_ADDR_EXP 95
18108: PUSH
18109: LD_EXP 95
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 254
18123: ADD
18124: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 266
18134: PUSH
18135: LD_INT 5
18137: EQUAL
18138: IFFALSE 18217
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18140: LD_ADDR_EXP 95
18144: PUSH
18145: LD_EXP 95
18149: PUSH
18150: LD_INT 4
18152: ADD
18153: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18154: LD_ADDR_EXP 95
18158: PUSH
18159: LD_EXP 95
18163: PUSH
18164: LD_VAR 0 1
18168: PPUSH
18169: CALL_OW 250
18173: ADD
18174: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18175: LD_ADDR_EXP 95
18179: PUSH
18180: LD_EXP 95
18184: PUSH
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 251
18194: ADD
18195: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18196: LD_ADDR_EXP 95
18200: PUSH
18201: LD_EXP 95
18205: PUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 254
18215: ADD
18216: ST_TO_ADDR
// end ; end ; end ;
18217: PPOPN 2
18219: END
// on UnitKamikazed ( unit ) do var i ;
18220: LD_INT 0
18222: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 255
18232: PUSH
18233: LD_INT 8
18235: EQUAL
18236: PUSH
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 247
18246: PUSH
18247: LD_INT 2
18249: EQUAL
18250: AND
18251: PUSH
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 248
18261: PUSH
18262: LD_INT 2
18264: EQUAL
18265: AND
18266: IFFALSE 18316
// begin for i in legionVehicles do
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: LD_EXP 55
18277: PUSH
18278: FOR_IN
18279: IFFALSE 18314
// if i = unit then
18281: LD_VAR 0 2
18285: PUSH
18286: LD_VAR 0 1
18290: EQUAL
18291: IFFALSE 18312
// legionVehicles = legionVehicles diff [ unit ] ;
18293: LD_ADDR_EXP 55
18297: PUSH
18298: LD_EXP 55
18302: PUSH
18303: LD_VAR 0 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: DIFF
18311: ST_TO_ADDR
18312: GO 18278
18314: POP
18315: POP
// end ; end ;
18316: PPOPN 2
18318: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18319: LD_VAR 0 2
18323: PPUSH
18324: LD_VAR 0 3
18328: PPUSH
18329: LD_INT 29
18331: PPUSH
18332: CALL_OW 309
18336: IFFALSE 18396
// begin if GetSide ( unit ) = 1 then
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 255
18347: PUSH
18348: LD_INT 1
18350: EQUAL
18351: IFFALSE 18367
// begin wait ( 0 0$6 ) ;
18353: LD_INT 210
18355: PPUSH
18356: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18360: LD_STRING Motherlode2
18362: PPUSH
18363: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18367: LD_VAR 0 1
18371: PPUSH
18372: CALL_OW 255
18376: PUSH
18377: LD_INT 8
18379: EQUAL
18380: IFFALSE 18396
// begin wait ( 0 0$6 ) ;
18382: LD_INT 210
18384: PPUSH
18385: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18389: LD_STRING Motherlode1
18391: PPUSH
18392: CALL_OW 104
// end ; end ; end ;
18396: PPOPN 3
18398: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 255
18408: PUSH
18409: LD_INT 2
18411: EQUAL
18412: IFFALSE 18421
// YouLost ( Motherlode3 ) ;
18414: LD_STRING Motherlode3
18416: PPUSH
18417: CALL_OW 104
// end ; end_of_file
18421: PPOPN 3
18423: END
// every 3 3$0 do
18424: GO 18426
18426: DISABLE
// begin enable ;
18427: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18428: LD_ADDR_EXP 87
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: LD_INT 3
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_INT 2
18448: PPUSH
18449: CALL_OW 12
18453: ARRAY
18454: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18455: LD_INT 22
18457: PUSH
18458: LD_INT 8
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 21
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PPUSH
18479: CALL_OW 69
18483: PUSH
18484: LD_INT 1
18486: GREATER
18487: IFFALSE 18518
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
18489: LD_ADDR_EXP 89
18493: PUSH
18494: LD_INT 1
18496: PUSH
18497: LD_INT 8
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: PPUSH
18507: LD_INT 2
18509: PPUSH
18510: CALL_OW 12
18514: ARRAY
18515: ST_TO_ADDR
18516: GO 18526
// RussianTarget = 1 ;
18518: LD_ADDR_EXP 89
18522: PUSH
18523: LD_INT 1
18525: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
18526: LD_INT 22
18528: PUSH
18529: LD_INT 8
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 21
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PPUSH
18550: CALL_OW 69
18554: PUSH
18555: LD_INT 1
18557: GREATER
18558: IFFALSE 18593
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
18560: LD_ADDR_EXP 88
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: LD_INT 3
18570: PUSH
18571: LD_INT 8
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_INT 3
18584: PPUSH
18585: CALL_OW 12
18589: ARRAY
18590: ST_TO_ADDR
18591: GO 18620
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
18593: LD_ADDR_EXP 88
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 3
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: PPUSH
18611: LD_INT 2
18613: PPUSH
18614: CALL_OW 12
18618: ARRAY
18619: ST_TO_ADDR
// end ;
18620: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople ;
18621: LD_EXP 68
18625: PUSH
18626: LD_INT 1
18628: EQUAL
18629: IFFALSE 19206
18631: GO 18633
18633: DISABLE
18634: LD_INT 0
18636: PPUSH
18637: PPUSH
// begin for i = 1 to 4 do
18638: LD_ADDR_VAR 0 1
18642: PUSH
18643: DOUBLE
18644: LD_INT 1
18646: DEC
18647: ST_TO_ADDR
18648: LD_INT 4
18650: PUSH
18651: FOR_TO
18652: IFFALSE 18692
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
18654: LD_EXP 66
18658: PUSH
18659: LD_VAR 0 1
18663: ARRAY
18664: PPUSH
18665: LD_INT 85
18667: PPUSH
18668: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
18672: LD_EXP 66
18676: PUSH
18677: LD_VAR 0 1
18681: ARRAY
18682: PPUSH
18683: LD_INT 3
18685: PPUSH
18686: CALL_OW 183
// end ;
18690: GO 18651
18692: POP
18693: POP
// wait ( 0 0$1 ) ;
18694: LD_INT 35
18696: PPUSH
18697: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
18701: LD_ADDR_VAR 0 2
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 4
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 21
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 56
18728: PUSH
18729: EMPTY
18730: LIST
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: LD_INT 60
18737: PUSH
18738: EMPTY
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: PPUSH
18751: CALL_OW 69
18755: PUSH
18756: LD_EXP 17
18760: PUSH
18761: EMPTY
18762: LIST
18763: DIFF
18764: ST_TO_ADDR
// ComEnterUnit ( powellPeople [ 1 ] , PowellCargo ) ;
18765: LD_VAR 0 2
18769: PUSH
18770: LD_INT 1
18772: ARRAY
18773: PPUSH
18774: LD_INT 235
18776: PPUSH
18777: CALL_OW 120
// SetClass ( powellPeople [ 2 ] , 2 ) ;
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 2
18788: ARRAY
18789: PPUSH
18790: LD_INT 2
18792: PPUSH
18793: CALL_OW 336
// SetClass ( powellPeople [ 3 ] , 2 ) ;
18797: LD_VAR 0 2
18801: PUSH
18802: LD_INT 3
18804: ARRAY
18805: PPUSH
18806: LD_INT 2
18808: PPUSH
18809: CALL_OW 336
// SetResourceVisibility ( 30 , 49 , 4 ) ;
18813: LD_INT 30
18815: PPUSH
18816: LD_INT 49
18818: PPUSH
18819: LD_INT 4
18821: PPUSH
18822: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
18826: LD_INT 91
18828: PPUSH
18829: LD_INT 10
18831: PPUSH
18832: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
18836: LD_INT 91
18838: PPUSH
18839: LD_INT 11
18841: PPUSH
18842: CALL_OW 207
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_mine , 30 , 49 , 1 ) ;
18846: LD_INT 22
18848: PUSH
18849: LD_INT 4
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 25
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PPUSH
18870: CALL_OW 69
18874: PPUSH
18875: LD_INT 30
18877: PPUSH
18878: LD_INT 30
18880: PPUSH
18881: LD_INT 49
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 145
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 55 , 56 , 4 ) ;
18891: LD_INT 22
18893: PUSH
18894: LD_INT 4
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 25
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PPUSH
18915: CALL_OW 69
18919: PPUSH
18920: LD_INT 32
18922: PPUSH
18923: LD_INT 55
18925: PPUSH
18926: LD_INT 56
18928: PPUSH
18929: LD_INT 4
18931: PPUSH
18932: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_bunker , 63 , 71 , 4 ) ;
18936: LD_INT 22
18938: PUSH
18939: LD_INT 4
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 25
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 69
18964: PPUSH
18965: LD_INT 32
18967: PPUSH
18968: LD_INT 63
18970: PPUSH
18971: LD_INT 71
18973: PPUSH
18974: LD_INT 4
18976: PPUSH
18977: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_siberite_power , 40 , 72 , 4 ) ;
18981: LD_INT 22
18983: PUSH
18984: LD_INT 4
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 25
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: PPUSH
19010: LD_INT 28
19012: PPUSH
19013: LD_INT 40
19015: PPUSH
19016: LD_INT 72
19018: PPUSH
19019: LD_INT 4
19021: PPUSH
19022: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_solar_power , 45 , 73 , 4 ) ;
19026: LD_INT 22
19028: PUSH
19029: LD_INT 4
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 25
19038: PUSH
19039: LD_INT 2
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PPUSH
19050: CALL_OW 69
19054: PPUSH
19055: LD_INT 27
19057: PPUSH
19058: LD_INT 45
19060: PPUSH
19061: LD_INT 73
19063: PPUSH
19064: LD_INT 4
19066: PPUSH
19067: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_rocket , 37 , 50 , 2 ) ;
19071: LD_INT 22
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 25
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: PPUSH
19100: LD_INT 18
19102: PPUSH
19103: LD_INT 37
19105: PPUSH
19106: LD_INT 50
19108: PPUSH
19109: LD_INT 2
19111: PPUSH
19112: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_gun , 41 , 51 , 3 ) ;
19116: LD_INT 22
19118: PUSH
19119: LD_INT 4
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 25
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PPUSH
19140: CALL_OW 69
19144: PPUSH
19145: LD_INT 17
19147: PPUSH
19148: LD_INT 41
19150: PPUSH
19151: LD_INT 51
19153: PPUSH
19154: LD_INT 3
19156: PPUSH
19157: CALL_OW 205
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_ext_siberium , 38 , 54 , 1 ) ;
19161: LD_INT 22
19163: PUSH
19164: LD_INT 4
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 25
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PPUSH
19185: CALL_OW 69
19189: PPUSH
19190: LD_INT 21
19192: PPUSH
19193: LD_INT 38
19195: PPUSH
19196: LD_INT 54
19198: PPUSH
19199: LD_INT 1
19201: PPUSH
19202: CALL_OW 205
// end ;
19206: PPOPN 2
19208: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19209: LD_INT 235
19211: PPUSH
19212: LD_INT 10
19214: PPUSH
19215: CALL_OW 308
19219: PUSH
19220: LD_EXP 70
19224: PUSH
19225: LD_INT 1
19227: EQUAL
19228: AND
19229: IFFALSE 19253
19231: GO 19233
19233: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19234: LD_INT 235
19236: PPUSH
19237: CALL_OW 313
19241: PPUSH
19242: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19246: LD_INT 84
19248: PPUSH
19249: CALL_OW 146
// end ;
19253: END
// every 0 0$1 trigger legionAI = 1 do
19254: LD_EXP 84
19258: PUSH
19259: LD_INT 1
19261: EQUAL
19262: IFFALSE 19325
19264: GO 19266
19266: DISABLE
// begin enable ;
19267: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19268: LD_INT 8
19270: PPUSH
19271: LD_INT 99
19273: PPUSH
19274: LD_INT 11
19276: PPUSH
19277: LD_EXP 93
19281: PPUSH
19282: CALL 9639 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19286: LD_INT 8
19288: PPUSH
19289: LD_INT 20
19291: PPUSH
19292: LD_INT 11
19294: PPUSH
19295: LD_INT 252
19297: PUSH
19298: EMPTY
19299: LIST
19300: PPUSH
19301: CALL 10048 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19305: LD_INT 8
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: CALL 11457 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19315: LD_INT 8
19317: PPUSH
19318: LD_INT 11
19320: PPUSH
19321: CALL 11029 0 2
// end ;
19325: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19326: LD_EXP 84
19330: PUSH
19331: LD_INT 1
19333: EQUAL
19334: PUSH
19335: LD_EXP 101
19339: PUSH
19340: LD_INT 1
19342: GREATEREQUAL
19343: AND
19344: PUSH
19345: LD_EXP 55
19349: PUSH
19350: EMPTY
19351: EQUAL
19352: AND
19353: PUSH
19354: LD_INT 117
19356: PPUSH
19357: CALL_OW 302
19361: AND
19362: PUSH
19363: LD_INT 117
19365: PPUSH
19366: CALL_OW 255
19370: PUSH
19371: LD_INT 8
19373: EQUAL
19374: AND
19375: IFFALSE 19438
19377: GO 19379
19379: DISABLE
// begin enable ;
19380: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19381: LD_INT 8
19383: PPUSH
19384: LD_INT 117
19386: PPUSH
19387: LD_INT 5
19389: PUSH
19390: LD_INT 6
19392: PUSH
19393: LD_INT 7
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: PUSH
19401: LD_OWVAR 67
19405: ARRAY
19406: PPUSH
19407: LD_INT 27
19409: PUSH
19410: LD_INT 28
19412: PUSH
19413: LD_INT 25
19415: PUSH
19416: LD_INT 29
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: PPUSH
19425: LD_INT 3
19427: PPUSH
19428: LD_INT 2
19430: PPUSH
19431: LD_INT 14
19433: PPUSH
19434: CALL 11687 0 7
// end ;
19438: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19439: LD_EXP 84
19443: PUSH
19444: LD_INT 1
19446: EQUAL
19447: PUSH
19448: LD_EXP 101
19452: PUSH
19453: LD_INT 1
19455: GREATEREQUAL
19456: AND
19457: PUSH
19458: LD_EXP 55
19462: PUSH
19463: LD_INT 5
19465: PUSH
19466: LD_INT 6
19468: PUSH
19469: LD_INT 7
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: PUSH
19477: LD_OWVAR 67
19481: ARRAY
19482: EQUAL
19483: AND
19484: IFFALSE 19502
19486: GO 19488
19488: DISABLE
// begin enable ;
19489: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
19490: LD_EXP 87
19494: PPUSH
19495: LD_INT 1
19497: PPUSH
19498: CALL 11761 0 2
// end ;
19502: END
// every 0 0$1 do
19503: GO 19505
19505: DISABLE
// begin enable ;
19506: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
19507: LD_INT 6
19509: PPUSH
19510: LD_INT 1
19512: PPUSH
19513: CALL 12696 0 2
// end ;
19517: END
// every 0 0$1 trigger RussianAI = 1 do
19518: LD_EXP 86
19522: PUSH
19523: LD_INT 1
19525: EQUAL
19526: IFFALSE 19620
19528: GO 19530
19530: DISABLE
// begin enable ;
19531: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
19532: LD_INT 3
19534: PPUSH
19535: LD_INT 26
19537: PPUSH
19538: LD_INT 21
19540: PPUSH
19541: LD_EXP 94
19545: PPUSH
19546: CALL 9639 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
19550: LD_INT 3
19552: PPUSH
19553: LD_INT 22
19555: PPUSH
19556: LD_INT 21
19558: PPUSH
19559: LD_INT 2
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PPUSH
19569: CALL 10048 0 4
// AttackNearBuildings ( 3 , 1 ) ;
19573: LD_INT 3
19575: PPUSH
19576: LD_INT 1
19578: PPUSH
19579: CALL 11457 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
19583: LD_INT 3
19585: PPUSH
19586: LD_EXP 89
19590: PPUSH
19591: CALL 12696 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
19595: LD_INT 3
19597: PPUSH
19598: LD_INT 21
19600: PPUSH
19601: CALL 11029 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
19605: LD_INT 3
19607: PPUSH
19608: LD_INT 21
19610: PPUSH
19611: LD_EXP 94
19615: PPUSH
19616: CALL 10774 0 3
// end ;
19620: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
19621: LD_EXP 86
19625: PUSH
19626: LD_INT 1
19628: EQUAL
19629: PUSH
19630: LD_EXP 101
19634: PUSH
19635: LD_INT 3
19637: GREATEREQUAL
19638: AND
19639: PUSH
19640: LD_EXP 61
19644: PUSH
19645: EMPTY
19646: EQUAL
19647: AND
19648: PUSH
19649: LD_INT 10
19651: PPUSH
19652: CALL_OW 302
19656: AND
19657: PUSH
19658: LD_INT 10
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: EQUAL
19669: AND
19670: PUSH
19671: LD_INT 4
19673: PPUSH
19674: CALL_OW 302
19678: AND
19679: PUSH
19680: LD_INT 4
19682: PPUSH
19683: CALL_OW 255
19687: PUSH
19688: LD_INT 3
19690: EQUAL
19691: AND
19692: IFFALSE 19812
19694: GO 19696
19696: DISABLE
// begin enable ;
19697: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19698: LD_INT 3
19700: PPUSH
19701: LD_INT 4
19703: PPUSH
19704: LD_INT 4
19706: PUSH
19707: LD_INT 5
19709: PUSH
19710: LD_INT 6
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: LD_OWVAR 67
19722: ARRAY
19723: PPUSH
19724: LD_INT 45
19726: PUSH
19727: LD_INT 46
19729: PUSH
19730: LD_INT 47
19732: PUSH
19733: LD_INT 49
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: PPUSH
19742: LD_INT 3
19744: PPUSH
19745: LD_INT 3
19747: PPUSH
19748: LD_INT 24
19750: PPUSH
19751: CALL 11687 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
19755: LD_INT 3
19757: PPUSH
19758: LD_INT 10
19760: PPUSH
19761: LD_INT 4
19763: PUSH
19764: LD_INT 5
19766: PUSH
19767: LD_INT 6
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: PUSH
19775: LD_OWVAR 67
19779: ARRAY
19780: PPUSH
19781: LD_INT 45
19783: PUSH
19784: LD_INT 46
19786: PUSH
19787: LD_INT 47
19789: PUSH
19790: LD_INT 49
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: PPUSH
19799: LD_INT 3
19801: PPUSH
19802: LD_INT 3
19804: PPUSH
19805: LD_INT 24
19807: PPUSH
19808: CALL 11687 0 7
// end ;
19812: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
19813: LD_EXP 86
19817: PUSH
19818: LD_INT 1
19820: EQUAL
19821: PUSH
19822: LD_EXP 101
19826: PUSH
19827: LD_INT 3
19829: GREATEREQUAL
19830: AND
19831: PUSH
19832: LD_EXP 61
19836: PUSH
19837: LD_INT 8
19839: PUSH
19840: LD_INT 10
19842: PUSH
19843: LD_INT 12
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PUSH
19851: LD_OWVAR 67
19855: ARRAY
19856: EQUAL
19857: AND
19858: IFFALSE 19970
19860: GO 19862
19862: DISABLE
// begin enable ;
19863: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
19864: LD_INT 22
19866: PUSH
19867: LD_INT 3
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 21
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 3
19886: PUSH
19887: LD_INT 34
19889: PUSH
19890: LD_INT 48
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: LD_INT 60
19906: PUSH
19907: EMPTY
19908: LIST
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: PPUSH
19920: CALL_OW 69
19924: PPUSH
19925: LD_INT 24
19927: PUSH
19928: LD_INT 25
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: PPUSH
19938: LD_INT 2
19940: PPUSH
19941: CALL_OW 12
19945: ARRAY
19946: PPUSH
19947: CALL_OW 120
// wait ( 0 0$20 ) ;
19951: LD_INT 700
19953: PPUSH
19954: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
19958: LD_EXP 89
19962: PPUSH
19963: LD_INT 2
19965: PPUSH
19966: CALL 11761 0 2
// end ;
19970: END
// every 0 0$1 trigger AllianceAI = 1 do
19971: LD_EXP 85
19975: PUSH
19976: LD_INT 1
19978: EQUAL
19979: IFFALSE 20062
19981: GO 19983
19983: DISABLE
// begin enable ;
19984: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
19985: LD_INT 7
19987: PPUSH
19988: LD_INT 45
19990: PPUSH
19991: LD_INT 23
19993: PPUSH
19994: LD_EXP 95
19998: PPUSH
19999: CALL 9639 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
20003: LD_INT 7
20005: PPUSH
20006: LD_INT 24
20008: PPUSH
20009: LD_INT 23
20011: PPUSH
20012: LD_INT 46
20014: PUSH
20015: LD_INT 39
20017: PUSH
20018: LD_INT 133
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL 10048 0 4
// AttackNearBuildings ( 7 , 1 ) ;
20030: LD_INT 7
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: CALL 11457 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20040: LD_INT 7
20042: PPUSH
20043: LD_EXP 88
20047: PPUSH
20048: CALL 12696 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20052: LD_INT 7
20054: PPUSH
20055: LD_INT 23
20057: PPUSH
20058: CALL 11029 0 2
// end ;
20062: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20063: LD_EXP 85
20067: PUSH
20068: LD_INT 1
20070: EQUAL
20071: PUSH
20072: LD_EXP 101
20076: PUSH
20077: LD_INT 4
20079: GREATEREQUAL
20080: AND
20081: PUSH
20082: LD_EXP 62
20086: PUSH
20087: EMPTY
20088: EQUAL
20089: AND
20090: PUSH
20091: LD_INT 156
20093: PPUSH
20094: CALL_OW 302
20098: AND
20099: PUSH
20100: LD_INT 156
20102: PPUSH
20103: CALL_OW 255
20107: PUSH
20108: LD_INT 7
20110: EQUAL
20111: AND
20112: PUSH
20113: LD_INT 162
20115: PPUSH
20116: CALL_OW 302
20120: AND
20121: PUSH
20122: LD_INT 162
20124: PPUSH
20125: CALL_OW 255
20129: PUSH
20130: LD_INT 7
20132: EQUAL
20133: AND
20134: IFFALSE 20250
20136: GO 20138
20138: DISABLE
// begin enable ;
20139: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20140: LD_INT 3
20142: PPUSH
20143: LD_INT 156
20145: PPUSH
20146: LD_INT 3
20148: PUSH
20149: LD_INT 3
20151: PUSH
20152: LD_INT 4
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_OWVAR 67
20164: ARRAY
20165: PPUSH
20166: LD_INT 9
20168: PUSH
20169: LD_INT 10
20171: PUSH
20172: LD_INT 7
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: PPUSH
20180: LD_INT 3
20182: PPUSH
20183: LD_INT 2
20185: PPUSH
20186: LD_INT 5
20188: PPUSH
20189: CALL 11687 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20193: LD_INT 3
20195: PPUSH
20196: LD_INT 162
20198: PPUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: PUSH
20213: LD_OWVAR 67
20217: ARRAY
20218: PPUSH
20219: LD_INT 45
20221: PUSH
20222: LD_INT 46
20224: PUSH
20225: LD_INT 47
20227: PUSH
20228: LD_INT 49
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: PPUSH
20237: LD_INT 3
20239: PPUSH
20240: LD_INT 3
20242: PPUSH
20243: LD_INT 24
20245: PPUSH
20246: CALL 11687 0 7
// end ;
20250: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20251: LD_EXP 85
20255: PUSH
20256: LD_INT 1
20258: EQUAL
20259: PUSH
20260: LD_EXP 101
20264: PUSH
20265: LD_INT 4
20267: GREATEREQUAL
20268: AND
20269: PUSH
20270: LD_EXP 62
20274: PUSH
20275: LD_INT 5
20277: PUSH
20278: LD_INT 5
20280: PUSH
20281: LD_INT 7
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: PUSH
20289: LD_OWVAR 67
20293: ARRAY
20294: EQUAL
20295: AND
20296: IFFALSE 20355
20298: GO 20300
20300: DISABLE
20301: LD_INT 0
20303: PPUSH
// begin for i in AllianceVehicles do
20304: LD_ADDR_VAR 0 1
20308: PUSH
20309: LD_EXP 62
20313: PUSH
20314: FOR_IN
20315: IFFALSE 20340
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20317: LD_VAR 0 1
20321: PPUSH
20322: LD_INT 117
20324: PPUSH
20325: LD_INT 112
20327: PPUSH
20328: LD_INT 10
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 483
20338: GO 20314
20340: POP
20341: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20342: LD_EXP 88
20346: PPUSH
20347: LD_INT 3
20349: PPUSH
20350: CALL 11761 0 2
// enable ;
20354: ENABLE
// end ;
20355: PPOPN 1
20357: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20358: LD_EXP 85
20362: PUSH
20363: LD_INT 1
20365: EQUAL
20366: PUSH
20367: LD_EXP 101
20371: PUSH
20372: LD_INT 4
20374: GREATEREQUAL
20375: AND
20376: IFFALSE 20557
20378: GO 20380
20380: DISABLE
20381: LD_INT 0
20383: PPUSH
// begin enable ;
20384: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20385: LD_ADDR_VAR 0 1
20389: PUSH
20390: LD_INT 22
20392: PUSH
20393: LD_INT 1
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 21
20402: PUSH
20403: LD_INT 3
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 30
20415: PUSH
20416: LD_INT 30
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 30
20425: PUSH
20426: LD_INT 28
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 30
20435: PUSH
20436: LD_INT 21
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: PPUSH
20454: CALL_OW 69
20458: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
20459: LD_ADDR_VAR 0 1
20463: PUSH
20464: LD_VAR 0 1
20468: PUSH
20469: LD_INT 22
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 21
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 32
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: PPUSH
20504: CALL_OW 69
20508: ADD
20509: ST_TO_ADDR
// if tmp = [ ] then
20510: LD_VAR 0 1
20514: PUSH
20515: EMPTY
20516: EQUAL
20517: IFFALSE 20521
// exit ;
20519: GO 20557
// if tmp > 0 then
20521: LD_VAR 0 1
20525: PUSH
20526: LD_INT 0
20528: GREATER
20529: IFFALSE 20557
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
20531: LD_VAR 0 1
20535: PUSH
20536: LD_INT 1
20538: PPUSH
20539: LD_VAR 0 1
20543: PPUSH
20544: CALL_OW 12
20548: ARRAY
20549: PPUSH
20550: LD_INT 0
20552: PPUSH
20553: CALL_OW 234
// end ;
20557: PPOPN 1
20559: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20560: LD_EXP 84
20564: PUSH
20565: LD_INT 1
20567: EQUAL
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 8
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 21
20581: PUSH
20582: LD_INT 2
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 3
20591: PUSH
20592: LD_INT 61
20594: PUSH
20595: EMPTY
20596: LIST
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: PUSH
20612: LD_INT 0
20614: GREATER
20615: AND
20616: IFFALSE 20698
20618: GO 20620
20620: DISABLE
20621: LD_INT 0
20623: PPUSH
// begin enable ;
20624: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20625: LD_ADDR_VAR 0 1
20629: PUSH
20630: LD_INT 22
20632: PUSH
20633: LD_INT 8
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 21
20642: PUSH
20643: LD_INT 2
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 3
20652: PUSH
20653: LD_INT 61
20655: PUSH
20656: EMPTY
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: PPUSH
20668: CALL_OW 69
20672: PUSH
20673: FOR_IN
20674: IFFALSE 20696
// ComLinkTo ( i , arControler [ 1 ] ) ;
20676: LD_VAR 0 1
20680: PPUSH
20681: LD_EXP 56
20685: PUSH
20686: LD_INT 1
20688: ARRAY
20689: PPUSH
20690: CALL_OW 135
20694: GO 20673
20696: POP
20697: POP
// end ;
20698: PPOPN 1
20700: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
20701: LD_EXP 85
20705: PUSH
20706: LD_INT 1
20708: EQUAL
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_INT 7
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 21
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 3
20732: PUSH
20733: LD_INT 61
20735: PUSH
20736: EMPTY
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 69
20752: PUSH
20753: LD_INT 0
20755: GREATER
20756: AND
20757: IFFALSE 20847
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
// begin enable ;
20765: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
20766: LD_ADDR_VAR 0 1
20770: PUSH
20771: LD_INT 22
20773: PUSH
20774: LD_INT 7
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 21
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 3
20793: PUSH
20794: LD_INT 61
20796: PUSH
20797: EMPTY
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: PPUSH
20809: CALL_OW 69
20813: PUSH
20814: FOR_IN
20815: IFFALSE 20845
// ComLinkTo ( i , allianceControler [ rand ( 1 , 3 ) ] ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_EXP 63
20826: PUSH
20827: LD_INT 1
20829: PPUSH
20830: LD_INT 3
20832: PPUSH
20833: CALL_OW 12
20837: ARRAY
20838: PPUSH
20839: CALL_OW 135
20843: GO 20814
20845: POP
20846: POP
// end ; end_of_file
20847: PPOPN 1
20849: END
// every 0 0$1 trigger timerStatus = 1 do
20850: LD_EXP 96
20854: PUSH
20855: LD_INT 1
20857: EQUAL
20858: IFFALSE 20895
20860: GO 20862
20862: DISABLE
// begin enable ;
20863: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
20864: LD_ADDR_OWVAR 47
20868: PUSH
20869: LD_STRING #Am15-1
20871: PUSH
20872: LD_EXP 97
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
20881: LD_ADDR_EXP 97
20885: PUSH
20886: LD_EXP 97
20890: PUSH
20891: LD_INT 35
20893: PLUS
20894: ST_TO_ADDR
// end ; end_of_file
20895: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
20896: LD_EXP 72
20900: PUSH
20901: LD_INT 1
20903: EQUAL
20904: PUSH
20905: LD_EXP 101
20909: PUSH
20910: LD_INT 0
20912: EQUAL
20913: AND
20914: PUSH
20915: LD_EXP 90
20919: PUSH
20920: LD_INT 0
20922: EQUAL
20923: AND
20924: IFFALSE 20984
20926: GO 20928
20928: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
20929: LD_INT 2
20931: PPUSH
20932: LD_INT 6
20934: PPUSH
20935: LD_INT 2
20937: PPUSH
20938: LD_INT 4
20940: PPUSH
20941: CALL_OW 12
20945: PPUSH
20946: LD_INT 10
20948: PPUSH
20949: LD_INT 3
20951: PPUSH
20952: LD_INT 3
20954: PPUSH
20955: LD_INT 3
20957: PPUSH
20958: LD_INT 42
20960: PUSH
20961: LD_INT 43
20963: PUSH
20964: LD_INT 44
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: PPUSH
20972: EMPTY
20973: PPUSH
20974: EMPTY
20975: PPUSH
20976: LD_INT 1
20978: PPUSH
20979: CALL 7869 0 11
// enable ;
20983: ENABLE
// end ;
20984: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
20985: LD_EXP 72
20989: PUSH
20990: LD_INT 1
20992: EQUAL
20993: PUSH
20994: LD_EXP 101
20998: PUSH
20999: LD_INT 1
21001: EQUAL
21002: AND
21003: PUSH
21004: LD_EXP 90
21008: PUSH
21009: LD_INT 0
21011: EQUAL
21012: AND
21013: IFFALSE 21073
21015: GO 21017
21017: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21018: LD_INT 2
21020: PPUSH
21021: LD_INT 6
21023: PPUSH
21024: LD_INT 4
21026: PPUSH
21027: LD_INT 6
21029: PPUSH
21030: CALL_OW 12
21034: PPUSH
21035: LD_INT 10
21037: PPUSH
21038: LD_INT 3
21040: PPUSH
21041: LD_INT 3
21043: PPUSH
21044: LD_INT 3
21046: PPUSH
21047: LD_INT 44
21049: PUSH
21050: LD_INT 45
21052: PUSH
21053: LD_INT 46
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: PPUSH
21061: EMPTY
21062: PPUSH
21063: EMPTY
21064: PPUSH
21065: LD_INT 1
21067: PPUSH
21068: CALL 7869 0 11
// enable ;
21072: ENABLE
// end ;
21073: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21074: LD_EXP 72
21078: PUSH
21079: LD_INT 1
21081: EQUAL
21082: PUSH
21083: LD_EXP 101
21087: PUSH
21088: LD_INT 3
21090: EQUAL
21091: AND
21092: PUSH
21093: LD_EXP 90
21097: PUSH
21098: LD_INT 0
21100: EQUAL
21101: AND
21102: IFFALSE 21166
21104: GO 21106
21106: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21107: LD_INT 2
21109: PPUSH
21110: LD_INT 6
21112: PPUSH
21113: LD_INT 4
21115: PPUSH
21116: LD_INT 8
21118: PPUSH
21119: CALL_OW 12
21123: PPUSH
21124: LD_INT 10
21126: PPUSH
21127: LD_INT 3
21129: PPUSH
21130: LD_INT 3
21132: PPUSH
21133: LD_INT 3
21135: PPUSH
21136: LD_INT 44
21138: PUSH
21139: LD_INT 45
21141: PUSH
21142: LD_INT 46
21144: PUSH
21145: LD_INT 47
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PPUSH
21154: EMPTY
21155: PPUSH
21156: EMPTY
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: CALL 7869 0 11
// enable ;
21165: ENABLE
// end ;
21166: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21167: LD_EXP 72
21171: PUSH
21172: LD_INT 1
21174: EQUAL
21175: PUSH
21176: LD_EXP 101
21180: PUSH
21181: LD_INT 4
21183: GREATEREQUAL
21184: AND
21185: PUSH
21186: LD_EXP 90
21190: PUSH
21191: LD_INT 0
21193: EQUAL
21194: AND
21195: IFFALSE 21255
21197: GO 21199
21199: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21200: LD_INT 2
21202: PPUSH
21203: LD_INT 6
21205: PPUSH
21206: LD_INT 4
21208: PPUSH
21209: LD_INT 8
21211: PPUSH
21212: CALL_OW 12
21216: PPUSH
21217: LD_INT 10
21219: PPUSH
21220: LD_INT 3
21222: PPUSH
21223: LD_INT 3
21225: PPUSH
21226: LD_INT 3
21228: PPUSH
21229: LD_INT 46
21231: PUSH
21232: LD_INT 47
21234: PUSH
21235: LD_INT 49
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: PPUSH
21243: EMPTY
21244: PPUSH
21245: EMPTY
21246: PPUSH
21247: LD_INT 1
21249: PPUSH
21250: CALL 7869 0 11
// enable ;
21254: ENABLE
// end ; end_of_file
21255: END
// every 1 do var i , dec1 , options , people ;
21256: GO 21258
21258: DISABLE
21259: LD_INT 0
21261: PPUSH
21262: PPUSH
21263: PPUSH
21264: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21265: LD_INT 24
21267: PPUSH
21268: LD_INT 92
21270: PPUSH
21271: LD_INT 172
21273: PPUSH
21274: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21278: LD_INT 25
21280: PPUSH
21281: LD_INT 103
21283: PPUSH
21284: LD_INT 74
21286: PPUSH
21287: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21291: LD_EXP 48
21295: PPUSH
21296: LD_INT 4
21298: PPUSH
21299: CALL_OW 336
// InGameOn ;
21303: CALL_OW 8
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21307: LD_EXP 24
21311: PUSH
21312: LD_EXP 25
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PPUSH
21321: LD_INT 60
21323: PPUSH
21324: LD_INT 75
21326: PPUSH
21327: CALL_OW 111
// if KappaStatus = 0 then
21331: LD_EXP 81
21335: PUSH
21336: LD_INT 0
21338: EQUAL
21339: IFFALSE 21628
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21341: LD_EXP 24
21345: PPUSH
21346: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21350: LD_EXP 1
21354: PPUSH
21355: LD_STRING D1T-JMM-1
21357: PPUSH
21358: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21362: LD_EXP 24
21366: PPUSH
21367: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21371: LD_EXP 17
21375: PPUSH
21376: LD_STRING D1T-Pow-1
21378: PPUSH
21379: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21383: LD_EXP 24
21387: PPUSH
21388: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21392: LD_EXP 1
21396: PPUSH
21397: LD_STRING D1T-JMM-2
21399: PPUSH
21400: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21404: LD_EXP 24
21408: PPUSH
21409: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21413: LD_EXP 17
21417: PPUSH
21418: LD_STRING D1T-Pow-2
21420: PPUSH
21421: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21425: LD_EXP 24
21429: PPUSH
21430: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21434: LD_EXP 1
21438: PPUSH
21439: LD_STRING D1T-JMM-3
21441: PPUSH
21442: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21446: LD_EXP 24
21450: PPUSH
21451: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
21455: LD_EXP 17
21459: PPUSH
21460: LD_STRING D1T-Pow-3
21462: PPUSH
21463: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21467: LD_EXP 24
21471: PPUSH
21472: CALL_OW 87
// if not JMMGirlVeh = [ ] then
21476: LD_EXP 79
21480: PUSH
21481: EMPTY
21482: EQUAL
21483: NOT
21484: IFFALSE 21584
// begin if JMMGirl = 1 then
21486: LD_EXP 80
21490: PUSH
21491: LD_INT 1
21493: EQUAL
21494: IFFALSE 21508
// Say ( Joan , D1T-Joan-3 ) ;
21496: LD_EXP 2
21500: PPUSH
21501: LD_STRING D1T-Joan-3
21503: PPUSH
21504: CALL_OW 88
// if JMMGirl = 2 then
21508: LD_EXP 80
21512: PUSH
21513: LD_INT 2
21515: EQUAL
21516: IFFALSE 21530
// Say ( Lisa , D1T-Lisa-3 ) ;
21518: LD_EXP 4
21522: PPUSH
21523: LD_STRING D1T-Lisa-3
21525: PPUSH
21526: CALL_OW 88
// if JMMGirl = 3 then
21530: LD_EXP 80
21534: PUSH
21535: LD_INT 3
21537: EQUAL
21538: IFFALSE 21552
// Say ( Connie , D1T-Con-3 ) ;
21540: LD_EXP 16
21544: PPUSH
21545: LD_STRING D1T-Con-3
21547: PPUSH
21548: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21552: LD_EXP 24
21556: PPUSH
21557: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
21561: LD_EXP 17
21565: PPUSH
21566: LD_STRING D1T-Pow-4
21568: PPUSH
21569: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21573: LD_EXP 24
21577: PPUSH
21578: CALL_OW 87
// end else
21582: GO 21626
// begin Say ( JMM , D1T-JMM-4 ) ;
21584: LD_EXP 1
21588: PPUSH
21589: LD_STRING D1T-JMM-4
21591: PPUSH
21592: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21596: LD_EXP 24
21600: PPUSH
21601: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
21605: LD_EXP 17
21609: PPUSH
21610: LD_STRING D1T-Pow-5
21612: PPUSH
21613: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21617: LD_EXP 24
21621: PPUSH
21622: CALL_OW 87
// end ; end else
21626: GO 21712
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21628: LD_EXP 24
21632: PPUSH
21633: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21637: LD_EXP 1
21641: PPUSH
21642: LD_STRING D1T-JMM-1
21644: PPUSH
21645: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21649: LD_EXP 24
21653: PPUSH
21654: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21658: LD_EXP 17
21662: PPUSH
21663: LD_STRING D1T-Pow-1
21665: PPUSH
21666: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21670: LD_EXP 24
21674: PPUSH
21675: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21679: LD_EXP 1
21683: PPUSH
21684: LD_STRING D1T-JMM-2
21686: PPUSH
21687: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21691: LD_EXP 24
21695: PPUSH
21696: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21700: LD_EXP 17
21704: PPUSH
21705: LD_STRING D1T-Pow-2
21707: PPUSH
21708: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
21712: LD_INT 35
21714: PPUSH
21715: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21719: LD_EXP 24
21723: PUSH
21724: LD_EXP 25
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PPUSH
21733: LD_INT 60
21735: PPUSH
21736: LD_INT 75
21738: PPUSH
21739: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
21743: LD_EXP 24
21747: PPUSH
21748: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
21752: LD_EXP 24
21756: PPUSH
21757: LD_EXP 17
21761: PPUSH
21762: CALL_OW 296
21766: PUSH
21767: LD_INT 20
21769: LESS
21770: PUSH
21771: LD_EXP 24
21775: PPUSH
21776: CALL_OW 314
21780: NOT
21781: OR
21782: IFFALSE 21712
// ComExitVehicle ( JMM ) ;
21784: LD_EXP 1
21788: PPUSH
21789: CALL_OW 121
// repeat wait ( 0 0$1 ) ;
21793: LD_INT 35
21795: PPUSH
21796: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
21800: LD_EXP 1
21804: PPUSH
21805: LD_EXP 17
21809: PPUSH
21810: CALL_OW 112
// CenterNowOnUnits ( JMM ) ;
21814: LD_EXP 1
21818: PPUSH
21819: CALL_OW 87
// until GetDistUnits ( JMM , Powell ) < 6 ;
21823: LD_EXP 1
21827: PPUSH
21828: LD_EXP 17
21832: PPUSH
21833: CALL_OW 296
21837: PUSH
21838: LD_INT 6
21840: LESS
21841: IFFALSE 21793
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
21843: LD_EXP 1
21847: PUSH
21848: LD_EXP 17
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PPUSH
21857: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
21861: LD_EXP 1
21865: PPUSH
21866: LD_EXP 17
21870: PPUSH
21871: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
21875: LD_EXP 17
21879: PPUSH
21880: LD_EXP 1
21884: PPUSH
21885: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
21889: LD_EXP 1
21893: PPUSH
21894: LD_STRING D1-JMM-1
21896: PPUSH
21897: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
21901: LD_EXP 17
21905: PPUSH
21906: LD_STRING D1-Pow-1
21908: PPUSH
21909: CALL_OW 88
// RevealFogArea ( 1 , RevealArea1 ) ;
21913: LD_INT 1
21915: PPUSH
21916: LD_INT 3
21918: PPUSH
21919: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
21923: LD_INT 1
21925: PPUSH
21926: LD_INT 4
21928: PPUSH
21929: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
21933: LD_INT 1
21935: PPUSH
21936: LD_INT 5
21938: PPUSH
21939: CALL_OW 332
// CenterOnXY ( 171 , 81 ) ;
21943: LD_INT 171
21945: PPUSH
21946: LD_INT 81
21948: PPUSH
21949: CALL_OW 84
// wait ( 0 0$4 ) ;
21953: LD_INT 140
21955: PPUSH
21956: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
21960: LD_INT 162
21962: PPUSH
21963: LD_INT 36
21965: PPUSH
21966: CALL_OW 84
// wait ( 0 0$4 ) ;
21970: LD_INT 140
21972: PPUSH
21973: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
21977: LD_INT 75
21979: PPUSH
21980: LD_INT 16
21982: PPUSH
21983: CALL_OW 84
// wait ( 0 0$4 ) ;
21987: LD_INT 140
21989: PPUSH
21990: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
21994: LD_EXP 17
21998: PUSH
21999: LD_EXP 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PPUSH
22008: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
22012: LD_EXP 1
22016: PPUSH
22017: LD_STRING D1-JMM-2
22019: PPUSH
22020: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
22024: LD_EXP 17
22028: PPUSH
22029: LD_STRING D1-Pow-2
22031: PPUSH
22032: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22036: LD_EXP 1
22040: PPUSH
22041: LD_STRING D1-JMM-3
22043: PPUSH
22044: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22048: LD_EXP 17
22052: PPUSH
22053: LD_STRING D1-Pow-3
22055: PPUSH
22056: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22060: LD_EXP 1
22064: PPUSH
22065: LD_STRING D1-JMM-4
22067: PPUSH
22068: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22072: LD_EXP 17
22076: PPUSH
22077: LD_STRING D1-Pow-4
22079: PPUSH
22080: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22084: LD_EXP 1
22088: PPUSH
22089: LD_STRING D1-JMM-5
22091: PPUSH
22092: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
22096: LD_EXP 17
22100: PPUSH
22101: LD_STRING D1-Pow-5
22103: PPUSH
22104: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22108: LD_ADDR_VAR 0 3
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 4
22124: PUSH
22125: LD_INT 5
22127: PUSH
22128: LD_INT 6
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22139: LD_ADDR_VAR 0 2
22143: PUSH
22144: LD_STRING Q1
22146: PPUSH
22147: LD_VAR 0 3
22151: PPUSH
22152: CALL_OW 98
22156: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22157: LD_ADDR_VAR 0 2
22161: PUSH
22162: LD_STRING Q1
22164: PPUSH
22165: LD_VAR 0 3
22169: PPUSH
22170: CALL_OW 98
22174: ST_TO_ADDR
// options = options diff dec1 ;
22175: LD_ADDR_VAR 0 3
22179: PUSH
22180: LD_VAR 0 3
22184: PUSH
22185: LD_VAR 0 2
22189: DIFF
22190: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22191: LD_VAR 0 2
22195: PPUSH
22196: LD_VAR 0 3
22200: PPUSH
22201: CALL 23735 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22205: LD_VAR 0 2
22209: PUSH
22210: LD_INT 5
22212: PUSH
22213: LD_INT 6
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: IN
22220: PUSH
22221: LD_VAR 0 3
22225: PUSH
22226: LD_INT 2
22228: EQUAL
22229: OR
22230: IFFALSE 22157
// if not ( dec1 in [ 5 , 6 ] ) then
22232: LD_VAR 0 2
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 6
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: IN
22247: NOT
22248: IFFALSE 22291
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22250: LD_ADDR_VAR 0 2
22254: PUSH
22255: LD_STRING Q1a
22257: PPUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PPUSH
22268: CALL_OW 98
22272: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22273: LD_VAR 0 2
22277: PUSH
22278: LD_INT 4
22280: PLUS
22281: PPUSH
22282: LD_VAR 0 3
22286: PPUSH
22287: CALL 23735 0 2
// end ; if not JMMGirlVeh = [ ] then
22291: LD_EXP 79
22295: PUSH
22296: EMPTY
22297: EQUAL
22298: NOT
22299: IFFALSE 22665
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22301: LD_EXP 25
22305: PPUSH
22306: CALL_OW 313
22310: PPUSH
22311: CALL_OW 121
// wait ( 0 0$1 ) ;
22315: LD_INT 35
22317: PPUSH
22318: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22322: LD_INT 35
22324: PPUSH
22325: CALL_OW 67
// if JMMGirl = 1 then
22329: LD_EXP 80
22333: PUSH
22334: LD_INT 1
22336: EQUAL
22337: IFFALSE 22353
// ComMoveUnit ( JMM , Joan ) ;
22339: LD_EXP 1
22343: PPUSH
22344: LD_EXP 2
22348: PPUSH
22349: CALL_OW 112
// if JMMGirl = 2 then
22353: LD_EXP 80
22357: PUSH
22358: LD_INT 2
22360: EQUAL
22361: IFFALSE 22377
// ComMoveUnit ( JMM , Lisa ) ;
22363: LD_EXP 1
22367: PPUSH
22368: LD_EXP 4
22372: PPUSH
22373: CALL_OW 112
// if JMMGirl = 3 then
22377: LD_EXP 80
22381: PUSH
22382: LD_INT 3
22384: EQUAL
22385: IFFALSE 22401
// ComMoveUnit ( JMM , Connie ) ;
22387: LD_EXP 1
22391: PPUSH
22392: LD_EXP 16
22396: PPUSH
22397: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22401: LD_EXP 1
22405: PPUSH
22406: LD_EXP 2
22410: PPUSH
22411: CALL_OW 296
22415: PUSH
22416: LD_INT 6
22418: LESS
22419: PUSH
22420: LD_EXP 1
22424: PPUSH
22425: LD_EXP 4
22429: PPUSH
22430: CALL_OW 296
22434: PUSH
22435: LD_INT 6
22437: LESS
22438: OR
22439: PUSH
22440: LD_EXP 1
22444: PPUSH
22445: LD_EXP 16
22449: PPUSH
22450: CALL_OW 296
22454: PUSH
22455: LD_INT 6
22457: LESS
22458: OR
22459: IFFALSE 22322
// CenterNowOnUnits ( JMM ) ;
22461: LD_EXP 1
22465: PPUSH
22466: CALL_OW 87
// case JMMGirl of 1 :
22470: LD_EXP 80
22474: PUSH
22475: LD_INT 1
22477: DOUBLE
22478: EQUAL
22479: IFTRUE 22483
22481: GO 22538
22483: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22484: LD_EXP 1
22488: PPUSH
22489: LD_EXP 2
22493: PPUSH
22494: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22498: LD_EXP 2
22502: PPUSH
22503: LD_EXP 1
22507: PPUSH
22508: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22512: LD_EXP 2
22516: PPUSH
22517: LD_STRING D3W-Joan-1
22519: PPUSH
22520: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22524: LD_EXP 1
22528: PPUSH
22529: LD_STRING D3W-JMM-1
22531: PPUSH
22532: CALL_OW 88
// end ; 2 :
22536: GO 22665
22538: LD_INT 2
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22601
22546: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
22547: LD_EXP 1
22551: PPUSH
22552: LD_EXP 4
22556: PPUSH
22557: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
22561: LD_EXP 4
22565: PPUSH
22566: LD_EXP 1
22570: PPUSH
22571: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
22575: LD_EXP 4
22579: PPUSH
22580: LD_STRING D3W-Lisa-1
22582: PPUSH
22583: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22587: LD_EXP 1
22591: PPUSH
22592: LD_STRING D3W-JMM-1
22594: PPUSH
22595: CALL_OW 88
// end ; 3 :
22599: GO 22665
22601: LD_INT 3
22603: DOUBLE
22604: EQUAL
22605: IFTRUE 22609
22607: GO 22664
22609: POP
// begin ComTurnUnit ( JMM , Connie ) ;
22610: LD_EXP 1
22614: PPUSH
22615: LD_EXP 16
22619: PPUSH
22620: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
22624: LD_EXP 16
22628: PPUSH
22629: LD_EXP 1
22633: PPUSH
22634: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
22638: LD_EXP 16
22642: PPUSH
22643: LD_STRING D3W-Con-1
22645: PPUSH
22646: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
22650: LD_EXP 1
22654: PPUSH
22655: LD_STRING D3W-JMM-1
22657: PPUSH
22658: CALL_OW 88
// end ; end ;
22662: GO 22665
22664: POP
// end ; people = 0 ;
22665: LD_ADDR_VAR 0 4
22669: PUSH
22670: LD_INT 0
22672: ST_TO_ADDR
// if Lisa and people < 5 then
22673: LD_EXP 4
22677: PUSH
22678: LD_VAR 0 4
22682: PUSH
22683: LD_INT 5
22685: LESS
22686: AND
22687: IFFALSE 22719
// begin people = people + 1 ;
22689: LD_ADDR_VAR 0 4
22693: PUSH
22694: LD_VAR 0 4
22698: PUSH
22699: LD_INT 1
22701: PLUS
22702: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
22703: LD_ADDR_EXP 67
22707: PUSH
22708: LD_EXP 67
22712: PUSH
22713: LD_EXP 4
22717: ADD
22718: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
22719: LD_EXP 5
22723: PUSH
22724: LD_VAR 0 4
22728: PUSH
22729: LD_INT 5
22731: LESS
22732: AND
22733: IFFALSE 22765
// begin people = people + 1 ;
22735: LD_ADDR_VAR 0 4
22739: PUSH
22740: LD_VAR 0 4
22744: PUSH
22745: LD_INT 1
22747: PLUS
22748: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
22749: LD_ADDR_EXP 67
22753: PUSH
22754: LD_EXP 67
22758: PUSH
22759: LD_EXP 5
22763: ADD
22764: ST_TO_ADDR
// end ; if Bobby and people < 5 then
22765: LD_EXP 6
22769: PUSH
22770: LD_VAR 0 4
22774: PUSH
22775: LD_INT 5
22777: LESS
22778: AND
22779: IFFALSE 22811
// begin people = people + 1 ;
22781: LD_ADDR_VAR 0 4
22785: PUSH
22786: LD_VAR 0 4
22790: PUSH
22791: LD_INT 1
22793: PLUS
22794: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
22795: LD_ADDR_EXP 67
22799: PUSH
22800: LD_EXP 67
22804: PUSH
22805: LD_EXP 6
22809: ADD
22810: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
22811: LD_EXP 7
22815: PUSH
22816: LD_VAR 0 4
22820: PUSH
22821: LD_INT 5
22823: LESS
22824: AND
22825: IFFALSE 22857
// begin people = people + 1 ;
22827: LD_ADDR_VAR 0 4
22831: PUSH
22832: LD_VAR 0 4
22836: PUSH
22837: LD_INT 1
22839: PLUS
22840: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
22841: LD_ADDR_EXP 67
22845: PUSH
22846: LD_EXP 67
22850: PUSH
22851: LD_EXP 7
22855: ADD
22856: ST_TO_ADDR
// end ; if Denis and people < 5 then
22857: LD_EXP 8
22861: PUSH
22862: LD_VAR 0 4
22866: PUSH
22867: LD_INT 5
22869: LESS
22870: AND
22871: IFFALSE 22903
// begin people = people + 1 ;
22873: LD_ADDR_VAR 0 4
22877: PUSH
22878: LD_VAR 0 4
22882: PUSH
22883: LD_INT 1
22885: PLUS
22886: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
22887: LD_ADDR_EXP 67
22891: PUSH
22892: LD_EXP 67
22896: PUSH
22897: LD_EXP 8
22901: ADD
22902: ST_TO_ADDR
// end ; if Brown and people < 5 then
22903: LD_EXP 9
22907: PUSH
22908: LD_VAR 0 4
22912: PUSH
22913: LD_INT 5
22915: LESS
22916: AND
22917: IFFALSE 22949
// begin people = people + 1 ;
22919: LD_ADDR_VAR 0 4
22923: PUSH
22924: LD_VAR 0 4
22928: PUSH
22929: LD_INT 1
22931: PLUS
22932: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
22933: LD_ADDR_EXP 67
22937: PUSH
22938: LD_EXP 67
22942: PUSH
22943: LD_EXP 9
22947: ADD
22948: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
22949: LD_EXP 10
22953: PUSH
22954: LD_VAR 0 4
22958: PUSH
22959: LD_INT 5
22961: LESS
22962: AND
22963: IFFALSE 22995
// begin people = people + 1 ;
22965: LD_ADDR_VAR 0 4
22969: PUSH
22970: LD_VAR 0 4
22974: PUSH
22975: LD_INT 1
22977: PLUS
22978: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
22979: LD_ADDR_EXP 67
22983: PUSH
22984: LD_EXP 67
22988: PUSH
22989: LD_EXP 10
22993: ADD
22994: ST_TO_ADDR
// end ; if Houten and people < 5 then
22995: LD_EXP 11
22999: PUSH
23000: LD_VAR 0 4
23004: PUSH
23005: LD_INT 5
23007: LESS
23008: AND
23009: IFFALSE 23041
// begin people = people + 1 ;
23011: LD_ADDR_VAR 0 4
23015: PUSH
23016: LD_VAR 0 4
23020: PUSH
23021: LD_INT 1
23023: PLUS
23024: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
23025: LD_ADDR_EXP 67
23029: PUSH
23030: LD_EXP 67
23034: PUSH
23035: LD_EXP 11
23039: ADD
23040: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23041: LD_EXP 12
23045: PUSH
23046: LD_VAR 0 4
23050: PUSH
23051: LD_INT 5
23053: LESS
23054: AND
23055: IFFALSE 23087
// begin people = people + 1 ;
23057: LD_ADDR_VAR 0 4
23061: PUSH
23062: LD_VAR 0 4
23066: PUSH
23067: LD_INT 1
23069: PLUS
23070: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23071: LD_ADDR_EXP 67
23075: PUSH
23076: LD_EXP 67
23080: PUSH
23081: LD_EXP 12
23085: ADD
23086: ST_TO_ADDR
// end ; if Gary and people < 5 then
23087: LD_EXP 13
23091: PUSH
23092: LD_VAR 0 4
23096: PUSH
23097: LD_INT 5
23099: LESS
23100: AND
23101: IFFALSE 23133
// begin people = people + 1 ;
23103: LD_ADDR_VAR 0 4
23107: PUSH
23108: LD_VAR 0 4
23112: PUSH
23113: LD_INT 1
23115: PLUS
23116: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23117: LD_ADDR_EXP 67
23121: PUSH
23122: LD_EXP 67
23126: PUSH
23127: LD_EXP 13
23131: ADD
23132: ST_TO_ADDR
// end ; if Frank and people < 5 then
23133: LD_EXP 14
23137: PUSH
23138: LD_VAR 0 4
23142: PUSH
23143: LD_INT 5
23145: LESS
23146: AND
23147: IFFALSE 23179
// begin people = people + 1 ;
23149: LD_ADDR_VAR 0 4
23153: PUSH
23154: LD_VAR 0 4
23158: PUSH
23159: LD_INT 1
23161: PLUS
23162: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23163: LD_ADDR_EXP 67
23167: PUSH
23168: LD_EXP 67
23172: PUSH
23173: LD_EXP 14
23177: ADD
23178: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23179: LD_EXP 15
23183: PUSH
23184: LD_VAR 0 4
23188: PUSH
23189: LD_INT 5
23191: LESS
23192: AND
23193: IFFALSE 23225
// begin people = people + 1 ;
23195: LD_ADDR_VAR 0 4
23199: PUSH
23200: LD_VAR 0 4
23204: PUSH
23205: LD_INT 1
23207: PLUS
23208: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23209: LD_ADDR_EXP 67
23213: PUSH
23214: LD_EXP 67
23218: PUSH
23219: LD_EXP 15
23223: ADD
23224: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23225: LD_EXP 67
23229: PPUSH
23230: LD_INT 25
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PPUSH
23240: CALL_OW 72
23244: PUSH
23245: LD_INT 0
23247: EQUAL
23248: IFFALSE 23266
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23250: LD_EXP 67
23254: PUSH
23255: LD_INT 1
23257: ARRAY
23258: PPUSH
23259: LD_INT 2
23261: PPUSH
23262: CALL_OW 336
// for i = 1 to 5 do
23266: LD_ADDR_VAR 0 1
23270: PUSH
23271: DOUBLE
23272: LD_INT 1
23274: DEC
23275: ST_TO_ADDR
23276: LD_INT 5
23278: PUSH
23279: FOR_TO
23280: IFFALSE 23331
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23282: LD_EXP 67
23286: PUSH
23287: LD_VAR 0 1
23291: ARRAY
23292: PPUSH
23293: LD_INT 62
23295: PUSH
23296: LD_VAR 0 1
23300: PLUS
23301: PPUSH
23302: LD_INT 95
23304: PPUSH
23305: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23309: LD_EXP 67
23313: PUSH
23314: LD_VAR 0 1
23318: ARRAY
23319: PPUSH
23320: LD_EXP 1
23324: PPUSH
23325: CALL_OW 179
// end ;
23329: GO 23279
23331: POP
23332: POP
// repeat wait ( 0 0$1 ) ;
23333: LD_INT 35
23335: PPUSH
23336: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23340: LD_EXP 1
23344: PPUSH
23345: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23349: LD_EXP 1
23353: PPUSH
23354: LD_INT 66
23356: PPUSH
23357: LD_INT 98
23359: PPUSH
23360: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23364: LD_EXP 2
23368: PUSH
23369: LD_EXP 4
23373: PUSH
23374: LD_EXP 16
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: PPUSH
23384: LD_INT 67
23386: PPUSH
23387: LD_INT 98
23389: PPUSH
23390: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23394: LD_EXP 1
23398: PUSH
23399: LD_EXP 2
23403: PUSH
23404: LD_EXP 4
23408: PUSH
23409: LD_EXP 16
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: PPUSH
23420: LD_INT 63
23422: PPUSH
23423: LD_INT 95
23425: PPUSH
23426: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23430: LD_EXP 1
23434: PPUSH
23435: LD_INT 9
23437: PPUSH
23438: CALL_OW 308
23442: PUSH
23443: LD_INT 9
23445: PPUSH
23446: LD_INT 22
23448: PUSH
23449: LD_INT 4
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PPUSH
23470: CALL_OW 70
23474: PUSH
23475: LD_INT 5
23477: EQUAL
23478: AND
23479: IFFALSE 23333
// wait ( 0 0$2 ) ;
23481: LD_INT 70
23483: PPUSH
23484: CALL_OW 67
// if IsInArea ( Lisa , PowellHillArea ) then
23488: LD_EXP 4
23492: PPUSH
23493: LD_INT 9
23495: PPUSH
23496: CALL_OW 308
23500: IFFALSE 23514
// Say ( Lisa , D3nW-Lisa-1 ) ;
23502: LD_EXP 4
23506: PPUSH
23507: LD_STRING D3nW-Lisa-1
23509: PPUSH
23510: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
23514: LD_EXP 7
23518: PPUSH
23519: LD_INT 9
23521: PPUSH
23522: CALL_OW 308
23526: IFFALSE 23540
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
23528: LD_EXP 7
23532: PPUSH
23533: LD_STRING D3nW-Cyrus-1
23535: PPUSH
23536: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
23540: LD_EXP 6
23544: PPUSH
23545: LD_INT 9
23547: PPUSH
23548: CALL_OW 308
23552: IFFALSE 23566
// Say ( Bobby , D3nW-Bobby-1 ) ;
23554: LD_EXP 6
23558: PPUSH
23559: LD_STRING D3nW-Bobby-1
23561: PPUSH
23562: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
23566: LD_EXP 13
23570: PPUSH
23571: LD_INT 9
23573: PPUSH
23574: CALL_OW 308
23578: IFFALSE 23592
// Say ( Gary , D3nW-Gary-1 ) ;
23580: LD_EXP 13
23584: PPUSH
23585: LD_STRING D3nW-Gary-1
23587: PPUSH
23588: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
23592: LD_EXP 5
23596: PPUSH
23597: LD_INT 9
23599: PPUSH
23600: CALL_OW 308
23604: IFFALSE 23618
// Say ( Donaldson , D3nW-Don-1 ) ;
23606: LD_EXP 5
23610: PPUSH
23611: LD_STRING D3nW-Don-1
23613: PPUSH
23614: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
23618: LD_EXP 12
23622: PPUSH
23623: LD_INT 9
23625: PPUSH
23626: CALL_OW 308
23630: IFFALSE 23644
// Say ( Cornel , D3nW-Corn-1 ) ;
23632: LD_EXP 12
23636: PPUSH
23637: LD_STRING D3nW-Corn-1
23639: PPUSH
23640: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
23644: LD_EXP 14
23648: PPUSH
23649: LD_INT 9
23651: PPUSH
23652: CALL_OW 308
23656: IFFALSE 23670
// Say ( Frank , D3nW-Frank-1 ) ;
23658: LD_EXP 14
23662: PPUSH
23663: LD_STRING D3nW-Frank-1
23665: PPUSH
23666: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
23670: LD_EXP 1
23674: PPUSH
23675: LD_STRING D3nW-JMM-1
23677: PPUSH
23678: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
23682: LD_EXP 1
23686: PPUSH
23687: LD_STRING D3nW-JMM-1a
23689: PPUSH
23690: CALL_OW 88
// InGameOff ;
23694: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23698: LD_STRING M1
23700: PPUSH
23701: CALL_OW 337
// SaveForQuickRestart ;
23705: CALL_OW 22
// startAttacks = 1 ;
23709: LD_ADDR_EXP 72
23713: PUSH
23714: LD_INT 1
23716: ST_TO_ADDR
// wait ( 0 0$5 ) ;
23717: LD_INT 175
23719: PPUSH
23720: CALL_OW 67
// powellBuildBase = 1 ;
23724: LD_ADDR_EXP 68
23728: PUSH
23729: LD_INT 1
23731: ST_TO_ADDR
// end ;
23732: PPOPN 4
23734: END
// function ResolveQuery ( question , list_of_q ) ; begin
23735: LD_INT 0
23737: PPUSH
// case question of 1 :
23738: LD_VAR 0 1
23742: PUSH
23743: LD_INT 1
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23802
23751: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
23752: LD_EXP 1
23756: PPUSH
23757: LD_STRING D2Mot-JMM-1
23759: PPUSH
23760: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
23764: LD_EXP 17
23768: PPUSH
23769: LD_STRING D2Mot-Pow-1
23771: PPUSH
23772: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
23776: LD_EXP 1
23780: PPUSH
23781: LD_STRING D2Mot-JMM-2
23783: PPUSH
23784: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
23788: LD_EXP 17
23792: PPUSH
23793: LD_STRING D2Mot-Pow-2
23795: PPUSH
23796: CALL_OW 88
// end ; 2 :
23800: GO 24145
23802: LD_INT 2
23804: DOUBLE
23805: EQUAL
23806: IFTRUE 23810
23808: GO 23886
23810: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
23811: LD_EXP 1
23815: PPUSH
23816: LD_STRING D2Rus-JMM-1
23818: PPUSH
23819: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
23823: LD_EXP 17
23827: PPUSH
23828: LD_STRING D2Rus-Pow-1
23830: PPUSH
23831: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
23835: LD_EXP 1
23839: PPUSH
23840: LD_STRING D2Rus-JMM-2
23842: PPUSH
23843: CALL_OW 88
// if not ( 3 in list_of_q ) then
23847: LD_INT 3
23849: PUSH
23850: LD_VAR 0 2
23854: IN
23855: NOT
23856: IFFALSE 23872
// Say ( Powell , D2Rus-Pow-2 ) else
23858: LD_EXP 17
23862: PPUSH
23863: LD_STRING D2Rus-Pow-2
23865: PPUSH
23866: CALL_OW 88
23870: GO 23884
// Say ( Powell , D2Rus-Pow-2a ) ;
23872: LD_EXP 17
23876: PPUSH
23877: LD_STRING D2Rus-Pow-2a
23879: PPUSH
23880: CALL_OW 88
// end ; 3 :
23884: GO 24145
23886: LD_INT 3
23888: DOUBLE
23889: EQUAL
23890: IFTRUE 23894
23892: GO 23979
23894: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
23895: LD_EXP 1
23899: PPUSH
23900: LD_STRING D2Leg-JMM-1
23902: PPUSH
23903: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
23907: LD_EXP 17
23911: PPUSH
23912: LD_STRING D2Leg-Pow-1
23914: PPUSH
23915: CALL_OW 88
// if ( 2 in list_of_q ) then
23919: LD_INT 2
23921: PUSH
23922: LD_VAR 0 2
23926: IN
23927: IFFALSE 23953
// begin Say ( JMM , D2Leg-JMM-2 ) ;
23929: LD_EXP 1
23933: PPUSH
23934: LD_STRING D2Leg-JMM-2
23936: PPUSH
23937: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
23941: LD_EXP 17
23945: PPUSH
23946: LD_STRING D2Leg-Pow-2
23948: PPUSH
23949: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
23953: LD_EXP 1
23957: PPUSH
23958: LD_STRING D2Leg-JMM-3
23960: PPUSH
23961: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
23965: LD_EXP 17
23969: PPUSH
23970: LD_STRING D2Leg-Pow-3
23972: PPUSH
23973: CALL_OW 88
// end ; 4 :
23977: GO 24145
23979: LD_INT 4
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 24062
23987: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
23988: LD_EXP 1
23992: PPUSH
23993: LD_STRING D2Ar-JMM-1
23995: PPUSH
23996: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
24000: LD_EXP 17
24004: PPUSH
24005: LD_STRING D2Ar-Pow-1
24007: PPUSH
24008: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
24012: LD_EXP 1
24016: PPUSH
24017: LD_STRING D2Ar-JMM-2
24019: PPUSH
24020: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
24024: LD_EXP 17
24028: PPUSH
24029: LD_STRING D2Ar-Pow-2
24031: PPUSH
24032: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24036: LD_EXP 1
24040: PPUSH
24041: LD_STRING D2Ar-JMM-3
24043: PPUSH
24044: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24048: LD_EXP 17
24052: PPUSH
24053: LD_STRING D2Ar-Pow-3
24055: PPUSH
24056: CALL_OW 88
// end ; 5 :
24060: GO 24145
24062: LD_INT 5
24064: DOUBLE
24065: EQUAL
24066: IFTRUE 24070
24068: GO 24085
24070: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24071: LD_EXP 1
24075: PPUSH
24076: LD_STRING D2Conf-JMM-1
24078: PPUSH
24079: CALL_OW 88
// end ; 6 :
24083: GO 24145
24085: LD_INT 6
24087: DOUBLE
24088: EQUAL
24089: IFTRUE 24093
24091: GO 24144
24093: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24094: LD_EXP 1
24098: PPUSH
24099: LD_STRING D2Com-JMM-1
24101: PPUSH
24102: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24106: LD_EXP 17
24110: PPUSH
24111: LD_STRING D2Com-Pow-1
24113: PPUSH
24114: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24118: LD_EXP 1
24122: PPUSH
24123: LD_STRING D2Com-JMM-2
24125: PPUSH
24126: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24130: LD_EXP 17
24134: PPUSH
24135: LD_STRING D2Com-Pow-2
24137: PPUSH
24138: CALL_OW 88
// end ; end ;
24142: GO 24145
24144: POP
// end ;
24145: LD_VAR 0 3
24149: RET
// every 0 0$1 trigger FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
24150: LD_INT 9
24152: PPUSH
24153: LD_INT 22
24155: PUSH
24156: LD_INT 4
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 21
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PPUSH
24177: CALL_OW 70
24181: IFFALSE 24226
24183: GO 24185
24185: DISABLE
// begin enable ;
24186: ENABLE
// SetSide ( FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
24187: LD_INT 9
24189: PPUSH
24190: LD_INT 22
24192: PUSH
24193: LD_INT 4
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 21
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PPUSH
24214: CALL_OW 70
24218: PPUSH
24219: LD_INT 1
24221: PPUSH
24222: CALL_OW 235
// end ;
24226: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24227: LD_INT 22
24229: PUSH
24230: LD_INT 4
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 21
24239: PUSH
24240: LD_INT 2
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 3
24249: PUSH
24250: LD_INT 58
24252: PUSH
24253: EMPTY
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 69
24269: PUSH
24270: LD_INT 4
24272: EQUAL
24273: PUSH
24274: LD_EXP 72
24278: PUSH
24279: LD_INT 1
24281: EQUAL
24282: AND
24283: IFFALSE 24296
24285: GO 24287
24287: DISABLE
// startAttacks = 0 ;
24288: LD_ADDR_EXP 72
24292: PUSH
24293: LD_INT 0
24295: ST_TO_ADDR
24296: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24297: LD_INT 22
24299: PUSH
24300: LD_INT 4
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 21
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 3
24319: PUSH
24320: LD_INT 58
24322: PUSH
24323: EMPTY
24324: LIST
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 69
24339: PUSH
24340: LD_INT 4
24342: EQUAL
24343: PUSH
24344: LD_INT 22
24346: PUSH
24347: LD_INT 6
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 21
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 24
24366: PUSH
24367: LD_INT 250
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: PPUSH
24379: CALL_OW 69
24383: PUSH
24384: LD_INT 0
24386: EQUAL
24387: AND
24388: PUSH
24389: LD_EXP 72
24393: PUSH
24394: LD_INT 0
24396: EQUAL
24397: AND
24398: PUSH
24399: LD_EXP 69
24403: PUSH
24404: LD_INT 0
24406: EQUAL
24407: AND
24408: IFFALSE 24596
24410: GO 24412
24412: DISABLE
24413: LD_INT 0
24415: PPUSH
// begin powellAttacks = 1 ;
24416: LD_ADDR_EXP 69
24420: PUSH
24421: LD_INT 1
24423: ST_TO_ADDR
// InGameOn ;
24424: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24428: LD_EXP 17
24432: PPUSH
24433: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24437: LD_EXP 17
24441: PPUSH
24442: LD_INT 47
24444: PPUSH
24445: LD_INT 60
24447: PPUSH
24448: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24452: LD_EXP 17
24456: PPUSH
24457: LD_STRING D4-Pow-1
24459: PPUSH
24460: CALL_OW 88
// for i = 1 to amUnitsAttack do
24464: LD_ADDR_VAR 0 1
24468: PUSH
24469: DOUBLE
24470: LD_INT 1
24472: DEC
24473: ST_TO_ADDR
24474: LD_EXP 66
24478: PUSH
24479: FOR_TO
24480: IFFALSE 24525
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24482: LD_EXP 66
24486: PUSH
24487: LD_VAR 0 1
24491: ARRAY
24492: PPUSH
24493: CALL_OW 258
24497: PUSH
24498: LD_INT 1
24500: EQUAL
24501: IFFALSE 24523
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24503: LD_EXP 66
24507: PUSH
24508: LD_VAR 0 1
24512: ARRAY
24513: PPUSH
24514: LD_STRING D4-Sol1-1
24516: PPUSH
24517: CALL_OW 88
// break ;
24521: GO 24525
// end ;
24523: GO 24479
24525: POP
24526: POP
// Say ( Powell , D4-Pow-2 ) ;
24527: LD_EXP 17
24531: PPUSH
24532: LD_STRING D4-Pow-2
24534: PPUSH
24535: CALL_OW 88
// InGameOff ;
24539: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
24543: LD_INT 22
24545: PUSH
24546: LD_INT 4
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 21
24555: PUSH
24556: LD_INT 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: LD_INT 58
24568: PUSH
24569: EMPTY
24570: LIST
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: PPUSH
24581: CALL_OW 69
24585: PPUSH
24586: LD_INT 59
24588: PPUSH
24589: LD_INT 21
24591: PPUSH
24592: CALL_OW 114
// end ;
24596: PPOPN 1
24598: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
24599: LD_INT 7
24601: PPUSH
24602: LD_INT 22
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 21
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PPUSH
24626: CALL_OW 70
24630: PUSH
24631: LD_INT 0
24633: GREATER
24634: PUSH
24635: LD_EXP 17
24639: PPUSH
24640: CALL_OW 302
24644: AND
24645: PUSH
24646: LD_EXP 71
24650: PUSH
24651: LD_INT 0
24653: EQUAL
24654: AND
24655: IFFALSE 24779
24657: GO 24659
24659: DISABLE
// begin InGameOn ;
24660: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24664: LD_INT 22
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 21
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PPUSH
24688: CALL_OW 69
24692: PPUSH
24693: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24697: LD_INT 7
24699: PPUSH
24700: LD_INT 22
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 21
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PPUSH
24724: CALL_OW 70
24728: PPUSH
24729: LD_INT 70
24731: PPUSH
24732: LD_INT 104
24734: PPUSH
24735: CALL_OW 111
// if powellWarm = 0 then
24739: LD_EXP 71
24743: PUSH
24744: LD_INT 0
24746: EQUAL
24747: IFFALSE 24775
// begin Say ( Powell , DBack1-Pow-1 ) ;
24749: LD_EXP 17
24753: PPUSH
24754: LD_STRING DBack1-Pow-1
24756: PPUSH
24757: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24761: LD_ADDR_EXP 71
24765: PUSH
24766: LD_EXP 71
24770: PUSH
24771: LD_INT 1
24773: PLUS
24774: ST_TO_ADDR
// end ; InGameOff ;
24775: CALL_OW 9
// end ;
24779: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
24780: LD_INT 7
24782: PPUSH
24783: LD_INT 22
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 21
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PPUSH
24807: CALL_OW 70
24811: PUSH
24812: LD_INT 0
24814: GREATER
24815: PUSH
24816: LD_EXP 17
24820: PPUSH
24821: CALL_OW 302
24825: AND
24826: PUSH
24827: LD_EXP 71
24831: PUSH
24832: LD_INT 1
24834: EQUAL
24835: AND
24836: IFFALSE 24960
24838: GO 24840
24840: DISABLE
// begin InGameOn ;
24841: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
24845: LD_INT 22
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 21
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PPUSH
24869: CALL_OW 69
24873: PPUSH
24874: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
24878: LD_INT 7
24880: PPUSH
24881: LD_INT 22
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 21
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PPUSH
24905: CALL_OW 70
24909: PPUSH
24910: LD_INT 70
24912: PPUSH
24913: LD_INT 104
24915: PPUSH
24916: CALL_OW 111
// if powellWarm = 1 then
24920: LD_EXP 71
24924: PUSH
24925: LD_INT 1
24927: EQUAL
24928: IFFALSE 24956
// begin Say ( Powell , DBack2-Pow-1 ) ;
24930: LD_EXP 17
24934: PPUSH
24935: LD_STRING DBack2-Pow-1
24937: PPUSH
24938: CALL_OW 88
// powellWarm = powellWarm + 1 ;
24942: LD_ADDR_EXP 71
24946: PUSH
24947: LD_EXP 71
24951: PUSH
24952: LD_INT 1
24954: PLUS
24955: ST_TO_ADDR
// end ; InGameOff ;
24956: CALL_OW 9
// end ;
24960: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
24961: LD_INT 7
24963: PPUSH
24964: LD_INT 22
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 21
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PPUSH
24988: CALL_OW 70
24992: PUSH
24993: LD_INT 0
24995: GREATER
24996: PUSH
24997: LD_EXP 17
25001: PPUSH
25002: CALL_OW 302
25006: AND
25007: PUSH
25008: LD_EXP 71
25012: PUSH
25013: LD_INT 2
25015: EQUAL
25016: AND
25017: IFFALSE 25134
25019: GO 25021
25021: DISABLE
// begin InGameOn ;
25022: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25026: LD_INT 22
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 21
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 69
25054: PPUSH
25055: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25059: LD_INT 7
25061: PPUSH
25062: LD_INT 22
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 21
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PPUSH
25086: CALL_OW 70
25090: PPUSH
25091: LD_INT 70
25093: PPUSH
25094: LD_INT 104
25096: PPUSH
25097: CALL_OW 111
// if powellWarm = 2 then
25101: LD_EXP 71
25105: PUSH
25106: LD_INT 2
25108: EQUAL
25109: IFFALSE 25130
// begin Say ( Powell , DBack3-Pow-1 ) ;
25111: LD_EXP 17
25115: PPUSH
25116: LD_STRING DBack3-Pow-1
25118: PPUSH
25119: CALL_OW 88
// YouLost ( Dismissed ) ;
25123: LD_STRING Dismissed
25125: PPUSH
25126: CALL_OW 104
// end ; InGameOff ;
25130: CALL_OW 9
// end ;
25134: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25135: LD_INT 8
25137: PPUSH
25138: LD_INT 22
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 21
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PPUSH
25162: CALL_OW 70
25166: PUSH
25167: LD_INT 0
25169: GREATER
25170: PUSH
25171: LD_EXP 17
25175: PPUSH
25176: CALL_OW 302
25180: AND
25181: PUSH
25182: LD_EXP 71
25186: PUSH
25187: LD_INT 0
25189: EQUAL
25190: AND
25191: IFFALSE 25315
25193: GO 25195
25195: DISABLE
// begin InGameOn ;
25196: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25200: LD_INT 22
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 21
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PPUSH
25224: CALL_OW 69
25228: PPUSH
25229: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25233: LD_INT 8
25235: PPUSH
25236: LD_INT 22
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 21
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PPUSH
25260: CALL_OW 70
25264: PPUSH
25265: LD_INT 71
25267: PPUSH
25268: LD_INT 63
25270: PPUSH
25271: CALL_OW 111
// if powellWarm = 0 then
25275: LD_EXP 71
25279: PUSH
25280: LD_INT 0
25282: EQUAL
25283: IFFALSE 25311
// begin Say ( Powell , DBack1-Pow-1 ) ;
25285: LD_EXP 17
25289: PPUSH
25290: LD_STRING DBack1-Pow-1
25292: PPUSH
25293: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25297: LD_ADDR_EXP 71
25301: PUSH
25302: LD_EXP 71
25306: PUSH
25307: LD_INT 1
25309: PLUS
25310: ST_TO_ADDR
// end ; InGameOff ;
25311: CALL_OW 9
// end ;
25315: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25316: LD_INT 8
25318: PPUSH
25319: LD_INT 22
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 21
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PPUSH
25343: CALL_OW 70
25347: PUSH
25348: LD_INT 0
25350: GREATER
25351: PUSH
25352: LD_EXP 17
25356: PPUSH
25357: CALL_OW 302
25361: AND
25362: PUSH
25363: LD_EXP 71
25367: PUSH
25368: LD_INT 1
25370: EQUAL
25371: AND
25372: IFFALSE 25496
25374: GO 25376
25376: DISABLE
// begin InGameOn ;
25377: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25381: LD_INT 22
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 21
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PPUSH
25405: CALL_OW 69
25409: PPUSH
25410: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25414: LD_INT 8
25416: PPUSH
25417: LD_INT 22
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 21
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PPUSH
25441: CALL_OW 70
25445: PPUSH
25446: LD_INT 71
25448: PPUSH
25449: LD_INT 63
25451: PPUSH
25452: CALL_OW 111
// if powellWarm = 1 then
25456: LD_EXP 71
25460: PUSH
25461: LD_INT 1
25463: EQUAL
25464: IFFALSE 25492
// begin Say ( Powell , DBack2-Pow-1 ) ;
25466: LD_EXP 17
25470: PPUSH
25471: LD_STRING DBack2-Pow-1
25473: PPUSH
25474: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25478: LD_ADDR_EXP 71
25482: PUSH
25483: LD_EXP 71
25487: PUSH
25488: LD_INT 1
25490: PLUS
25491: ST_TO_ADDR
// end ; InGameOff ;
25492: CALL_OW 9
// end ;
25496: END
// every 1 trigger FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25497: LD_INT 8
25499: PPUSH
25500: LD_INT 22
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 21
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 70
25528: PUSH
25529: LD_INT 0
25531: GREATER
25532: PUSH
25533: LD_EXP 17
25537: PPUSH
25538: CALL_OW 302
25542: AND
25543: PUSH
25544: LD_EXP 71
25548: PUSH
25549: LD_INT 2
25551: EQUAL
25552: AND
25553: IFFALSE 25670
25555: GO 25557
25557: DISABLE
// begin InGameOn ;
25558: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25562: LD_INT 22
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 21
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PPUSH
25586: CALL_OW 69
25590: PPUSH
25591: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25595: LD_INT 8
25597: PPUSH
25598: LD_INT 22
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 21
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PPUSH
25622: CALL_OW 70
25626: PPUSH
25627: LD_INT 71
25629: PPUSH
25630: LD_INT 63
25632: PPUSH
25633: CALL_OW 111
// if powellWarm = 2 then
25637: LD_EXP 71
25641: PUSH
25642: LD_INT 2
25644: EQUAL
25645: IFFALSE 25666
// begin Say ( Powell , DBack3-Pow-1 ) ;
25647: LD_EXP 17
25651: PPUSH
25652: LD_STRING DBack3-Pow-1
25654: PPUSH
25655: CALL_OW 88
// YouLost ( Dismissed ) ;
25659: LD_STRING Dismissed
25661: PPUSH
25662: CALL_OW 104
// end ; InGameOff ;
25666: CALL_OW 9
// end ;
25670: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
25671: LD_EXP 69
25675: PUSH
25676: LD_INT 1
25678: EQUAL
25679: IFFALSE 25728
25681: GO 25683
25683: DISABLE
25684: LD_INT 0
25686: PPUSH
// begin enable ;
25687: ENABLE
// for i = 1 to amUnitsAttack do
25688: LD_ADDR_VAR 0 1
25692: PUSH
25693: DOUBLE
25694: LD_INT 1
25696: DEC
25697: ST_TO_ADDR
25698: LD_EXP 66
25702: PUSH
25703: FOR_TO
25704: IFFALSE 25726
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
25706: LD_INT 8
25708: PPUSH
25709: LD_EXP 66
25713: PUSH
25714: LD_VAR 0 1
25718: ARRAY
25719: PPUSH
25720: CALL_OW 471
25724: GO 25703
25726: POP
25727: POP
// end ;
25728: PPOPN 1
25730: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
25731: LD_INT 22
25733: PUSH
25734: LD_INT 4
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 21
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 3
25753: PUSH
25754: LD_INT 58
25756: PUSH
25757: EMPTY
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: PPUSH
25769: CALL_OW 69
25773: PUSH
25774: LD_INT 0
25776: EQUAL
25777: PUSH
25778: LD_EXP 69
25782: PUSH
25783: LD_INT 1
25785: EQUAL
25786: AND
25787: IFFALSE 25958
25789: GO 25791
25791: DISABLE
// begin powellAttacks = 2 ;
25792: LD_ADDR_EXP 69
25796: PUSH
25797: LD_INT 2
25799: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25800: LD_INT 85
25802: PPUSH
25803: LD_INT 3
25805: PPUSH
25806: LD_INT 3
25808: PPUSH
25809: LD_INT 1
25811: PPUSH
25812: LD_INT 5
25814: PUSH
25815: LD_INT 7
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PPUSH
25825: LD_INT 2
25827: PPUSH
25828: CALL_OW 12
25832: ARRAY
25833: PPUSH
25834: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25838: LD_INT 85
25840: PPUSH
25841: LD_INT 3
25843: PPUSH
25844: LD_INT 3
25846: PPUSH
25847: LD_INT 1
25849: PPUSH
25850: LD_INT 5
25852: PUSH
25853: LD_INT 7
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PPUSH
25863: LD_INT 2
25865: PPUSH
25866: CALL_OW 12
25870: ARRAY
25871: PPUSH
25872: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
25876: LD_INT 85
25878: PPUSH
25879: LD_INT 3
25881: PPUSH
25882: LD_INT 3
25884: PPUSH
25885: LD_INT 1
25887: PPUSH
25888: LD_INT 5
25890: PUSH
25891: LD_INT 7
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PPUSH
25901: LD_INT 2
25903: PPUSH
25904: CALL_OW 12
25908: ARRAY
25909: PPUSH
25910: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
25914: LD_INT 85
25916: PPUSH
25917: LD_INT 5
25919: PPUSH
25920: LD_INT 3
25922: PPUSH
25923: LD_INT 1
25925: PPUSH
25926: LD_INT 6
25928: PPUSH
25929: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
25933: LD_ADDR_EXP 73
25937: PUSH
25938: LD_INT 85
25940: PPUSH
25941: LD_INT 3
25943: PPUSH
25944: LD_INT 3
25946: PPUSH
25947: LD_INT 1
25949: PPUSH
25950: LD_INT 3
25952: PPUSH
25953: CALL_OW 185
25957: ST_TO_ADDR
// end ;
25958: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
25959: LD_INT 22
25961: PUSH
25962: LD_INT 4
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 21
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: LD_INT 58
25984: PUSH
25985: EMPTY
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: PPUSH
25997: CALL_OW 69
26001: PUSH
26002: LD_INT 5
26004: GREATEREQUAL
26005: PUSH
26006: LD_EXP 72
26010: PUSH
26011: LD_INT 1
26013: EQUAL
26014: AND
26015: IFFALSE 26028
26017: GO 26019
26019: DISABLE
// startAttacks = 0 ;
26020: LD_ADDR_EXP 72
26024: PUSH
26025: LD_INT 0
26027: ST_TO_ADDR
26028: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
26029: LD_INT 22
26031: PUSH
26032: LD_INT 4
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 21
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 3
26051: PUSH
26052: LD_INT 58
26054: PUSH
26055: EMPTY
26056: LIST
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: PPUSH
26067: CALL_OW 69
26071: PUSH
26072: LD_INT 5
26074: GREATEREQUAL
26075: PUSH
26076: LD_INT 22
26078: PUSH
26079: LD_INT 6
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 21
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PPUSH
26100: CALL_OW 69
26104: PUSH
26105: LD_INT 0
26107: EQUAL
26108: AND
26109: PUSH
26110: LD_EXP 72
26114: PUSH
26115: LD_INT 0
26117: EQUAL
26118: AND
26119: PUSH
26120: LD_EXP 69
26124: PUSH
26125: LD_INT 2
26127: EQUAL
26128: AND
26129: IFFALSE 27064
26131: GO 26133
26133: DISABLE
26134: LD_INT 0
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
// begin powellAttacks = 3 ;
26140: LD_ADDR_EXP 69
26144: PUSH
26145: LD_INT 3
26147: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26148: LD_ADDR_VAR 0 1
26152: PUSH
26153: DOUBLE
26154: LD_INT 1
26156: DEC
26157: ST_TO_ADDR
26158: LD_EXP 66
26162: PUSH
26163: FOR_TO
26164: IFFALSE 26186
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26166: LD_INT 8
26168: PPUSH
26169: LD_EXP 66
26173: PUSH
26174: LD_VAR 0 1
26178: ARRAY
26179: PPUSH
26180: CALL_OW 472
26184: GO 26163
26186: POP
26187: POP
// wait ( 0 0$5 ) ;
26188: LD_INT 175
26190: PPUSH
26191: CALL_OW 67
// Video ( true ) ;
26195: LD_INT 1
26197: PPUSH
26198: CALL 6868 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26202: LD_INT 22
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PPUSH
26212: CALL_OW 69
26216: PPUSH
26217: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26221: LD_EXP 17
26225: PPUSH
26226: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26230: LD_EXP 17
26234: PPUSH
26235: LD_INT 45
26237: PPUSH
26238: LD_INT 64
26240: PPUSH
26241: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26245: LD_EXP 17
26249: PPUSH
26250: LD_INT 46
26252: PPUSH
26253: LD_INT 66
26255: PPUSH
26256: CALL_OW 178
// for i = 5 to 8 do
26260: LD_ADDR_VAR 0 1
26264: PUSH
26265: DOUBLE
26266: LD_INT 5
26268: DEC
26269: ST_TO_ADDR
26270: LD_INT 8
26272: PUSH
26273: FOR_TO
26274: IFFALSE 26420
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26276: LD_EXP 66
26280: PUSH
26281: LD_VAR 0 1
26285: ARRAY
26286: PPUSH
26287: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26291: LD_EXP 66
26295: PUSH
26296: LD_VAR 0 1
26300: ARRAY
26301: PPUSH
26302: CALL_OW 121
// wait ( 0 0$1 ) ;
26306: LD_INT 35
26308: PPUSH
26309: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26313: LD_EXP 66
26317: PUSH
26318: LD_VAR 0 1
26322: ARRAY
26323: PPUSH
26324: LD_INT 92
26326: PPUSH
26327: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26331: LD_EXP 66
26335: PUSH
26336: LD_VAR 0 1
26340: ARRAY
26341: PPUSH
26342: LD_INT 1
26344: PPUSH
26345: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26349: LD_EXP 66
26353: PUSH
26354: LD_VAR 0 1
26358: ARRAY
26359: PPUSH
26360: CALL_OW 182
// wait ( 0 0$1 ) ;
26364: LD_INT 35
26366: PPUSH
26367: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26371: LD_EXP 66
26375: PUSH
26376: LD_VAR 0 1
26380: ARRAY
26381: PPUSH
26382: LD_INT 43
26384: PUSH
26385: LD_VAR 0 1
26389: PLUS
26390: PPUSH
26391: LD_INT 66
26393: PPUSH
26394: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26398: LD_EXP 66
26402: PUSH
26403: LD_VAR 0 1
26407: ARRAY
26408: PPUSH
26409: LD_EXP 17
26413: PPUSH
26414: CALL_OW 179
// end ;
26418: GO 26273
26420: POP
26421: POP
// wait ( 0 0$10 ) ;
26422: LD_INT 350
26424: PPUSH
26425: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26429: LD_ADDR_VAR 0 3
26433: PUSH
26434: LD_INT 22
26436: PUSH
26437: LD_INT 4
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 21
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 56
26456: PUSH
26457: EMPTY
26458: LIST
26459: PUSH
26460: LD_INT 3
26462: PUSH
26463: LD_INT 60
26465: PUSH
26466: EMPTY
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: PPUSH
26479: CALL_OW 69
26483: PUSH
26484: LD_EXP 17
26488: PUSH
26489: EMPTY
26490: LIST
26491: DIFF
26492: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26493: LD_VAR 0 3
26497: PPUSH
26498: LD_INT 92
26500: PPUSH
26501: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
26505: LD_VAR 0 3
26509: PPUSH
26510: LD_INT 1
26512: PPUSH
26513: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
26517: LD_EXP 17
26521: PPUSH
26522: LD_STRING D5-Pow-1
26524: PPUSH
26525: CALL_OW 88
// for i = 1 to amUnitsAttack do
26529: LD_ADDR_VAR 0 1
26533: PUSH
26534: DOUBLE
26535: LD_INT 1
26537: DEC
26538: ST_TO_ADDR
26539: LD_EXP 66
26543: PUSH
26544: FOR_TO
26545: IFFALSE 26590
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26547: LD_EXP 66
26551: PUSH
26552: LD_VAR 0 1
26556: ARRAY
26557: PPUSH
26558: CALL_OW 258
26562: PUSH
26563: LD_INT 1
26565: EQUAL
26566: IFFALSE 26588
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
26568: LD_EXP 66
26572: PUSH
26573: LD_VAR 0 1
26577: ARRAY
26578: PPUSH
26579: LD_STRING D5-Sol2-1
26581: PPUSH
26582: CALL_OW 88
// break ;
26586: GO 26590
// end ;
26588: GO 26544
26590: POP
26591: POP
// Say ( Powell , D5-Pow-2 ) ;
26592: LD_EXP 17
26596: PPUSH
26597: LD_STRING D5-Pow-2
26599: PPUSH
26600: CALL_OW 88
// for i = 1 to amUnitsAttack do
26604: LD_ADDR_VAR 0 1
26608: PUSH
26609: DOUBLE
26610: LD_INT 1
26612: DEC
26613: ST_TO_ADDR
26614: LD_EXP 66
26618: PUSH
26619: FOR_TO
26620: IFFALSE 26665
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
26622: LD_EXP 66
26626: PUSH
26627: LD_VAR 0 1
26631: ARRAY
26632: PPUSH
26633: CALL_OW 258
26637: PUSH
26638: LD_INT 1
26640: EQUAL
26641: IFFALSE 26663
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
26643: LD_EXP 66
26647: PUSH
26648: LD_VAR 0 1
26652: ARRAY
26653: PPUSH
26654: LD_STRING D5-Sol2-2
26656: PPUSH
26657: CALL_OW 88
// break ;
26661: GO 26665
// end ;
26663: GO 26619
26665: POP
26666: POP
// Say ( Powell , D5-Pow-3 ) ;
26667: LD_EXP 17
26671: PPUSH
26672: LD_STRING D5-Pow-3
26674: PPUSH
26675: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26679: LD_INT 22
26681: PUSH
26682: LD_INT 4
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 21
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: LD_INT 58
26704: PUSH
26705: EMPTY
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: PPUSH
26717: CALL_OW 69
26721: PPUSH
26722: LD_INT 59
26724: PPUSH
26725: LD_INT 21
26727: PPUSH
26728: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26732: LD_EXP 66
26736: PPUSH
26737: LD_INT 59
26739: PPUSH
26740: LD_INT 21
26742: PPUSH
26743: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
26747: LD_INT 61
26749: PPUSH
26750: LD_INT 35
26752: PPUSH
26753: CALL_OW 84
// wait ( 0 0$15 ) ;
26757: LD_INT 525
26759: PPUSH
26760: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
26764: LD_EXP 17
26768: PPUSH
26769: LD_STRING D5a-Pow-1
26771: PPUSH
26772: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
26776: LD_EXP 17
26780: PPUSH
26781: LD_STRING D5a-Pow-1a
26783: PPUSH
26784: CALL_OW 88
// wait ( 0 0$2 ) ;
26788: LD_INT 70
26790: PPUSH
26791: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
26795: LD_EXP 17
26799: PPUSH
26800: LD_STRING D5a-Pow-1b
26802: PPUSH
26803: CALL_OW 88
// wait ( 0 0$3 ) ;
26807: LD_INT 105
26809: PPUSH
26810: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
26814: LD_EXP 17
26818: PPUSH
26819: LD_STRING D5a-Pow-1c
26821: PPUSH
26822: CALL_OW 88
// wait ( 0 0$1 ) ;
26826: LD_INT 35
26828: PPUSH
26829: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
26833: LD_EXP 17
26837: PPUSH
26838: LD_STRING D5a-Pow-1d
26840: PPUSH
26841: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26845: LD_INT 35
26847: PPUSH
26848: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
26852: LD_INT 22
26854: PUSH
26855: LD_INT 4
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 21
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 3
26874: PUSH
26875: LD_INT 58
26877: PUSH
26878: EMPTY
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: PPUSH
26890: CALL_OW 69
26894: PPUSH
26895: LD_INT 59
26897: PPUSH
26898: LD_INT 21
26900: PPUSH
26901: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
26905: LD_EXP 66
26909: PPUSH
26910: LD_INT 59
26912: PPUSH
26913: LD_INT 21
26915: PPUSH
26916: CALL_OW 114
// until amUnitsAttack = [ ] ;
26920: LD_EXP 66
26924: PUSH
26925: EMPTY
26926: EQUAL
26927: IFFALSE 26845
// CenterNowOnUnits ( Powell ) ;
26929: LD_EXP 17
26933: PPUSH
26934: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
26938: LD_ADDR_VAR 0 3
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_INT 4
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 21
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PPUSH
26967: CALL_OW 69
26971: PUSH
26972: LD_EXP 17
26976: PUSH
26977: EMPTY
26978: LIST
26979: DIFF
26980: ST_TO_ADDR
// for i in powellPeople do
26981: LD_ADDR_VAR 0 1
26985: PUSH
26986: LD_VAR 0 3
26990: PUSH
26991: FOR_IN
26992: IFFALSE 27021
// if GetSex ( i ) = sex_male then
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 258
27003: PUSH
27004: LD_INT 1
27006: EQUAL
27007: IFFALSE 27019
// sold = i ;
27009: LD_ADDR_VAR 0 2
27013: PUSH
27014: LD_VAR 0 1
27018: ST_TO_ADDR
27019: GO 26991
27021: POP
27022: POP
// Say ( sold , D6-Sol3-1 ) ;
27023: LD_VAR 0 2
27027: PPUSH
27028: LD_STRING D6-Sol3-1
27030: PPUSH
27031: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27035: LD_EXP 17
27039: PPUSH
27040: LD_STRING D6-Pow-1
27042: PPUSH
27043: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27047: LD_INT 139
27049: PUSH
27050: LD_INT 138
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PPUSH
27057: LD_INT 12
27059: PPUSH
27060: CALL_OW 113
// end ;
27064: PPOPN 4
27066: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27067: LD_EXP 69
27071: PUSH
27072: LD_INT 3
27074: EQUAL
27075: PUSH
27076: LD_INT 12
27078: PPUSH
27079: LD_INT 22
27081: PUSH
27082: LD_INT 8
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 21
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PPUSH
27103: CALL_OW 70
27107: PUSH
27108: LD_INT 2
27110: EQUAL
27111: AND
27112: IFFALSE 27273
27114: GO 27116
27116: DISABLE
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27121: LD_INT 8
27123: PPUSH
27124: LD_INT 1
27126: PPUSH
27127: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27131: LD_INT 4
27133: PPUSH
27134: LD_INT 8
27136: PPUSH
27137: LD_INT 1
27139: PPUSH
27140: LD_INT 1
27142: PPUSH
27143: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27147: LD_ADDR_VAR 0 1
27151: PUSH
27152: LD_INT 92
27154: PPUSH
27155: CALL_OW 313
27159: PUSH
27160: FOR_IN
27161: IFFALSE 27192
// if GetSex ( i ) = sex_male then
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 258
27172: PUSH
27173: LD_INT 1
27175: EQUAL
27176: IFFALSE 27190
// begin tmp = i ;
27178: LD_ADDR_VAR 0 2
27182: PUSH
27183: LD_VAR 0 1
27187: ST_TO_ADDR
// break ;
27188: GO 27192
// end ;
27190: GO 27160
27192: POP
27193: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27194: LD_INT 92
27196: PPUSH
27197: CALL_OW 313
27201: PPUSH
27202: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27206: LD_VAR 0 2
27210: PPUSH
27211: LD_STRING D6-Sol3-2
27213: PPUSH
27214: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27218: LD_INT 139
27220: PUSH
27221: LD_INT 138
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PPUSH
27228: LD_INT 85
27230: PPUSH
27231: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27235: LD_INT 4
27237: PPUSH
27238: LD_INT 8
27240: PPUSH
27241: LD_INT 2
27243: PPUSH
27244: LD_INT 1
27246: PPUSH
27247: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27251: LD_INT 8
27253: PPUSH
27254: LD_INT 8
27256: PPUSH
27257: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27261: LD_EXP 17
27265: PPUSH
27266: LD_STRING D6-Pow-2
27268: PPUSH
27269: CALL_OW 88
// end ;
27273: PPOPN 2
27275: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27276: LD_INT 85
27278: PPUSH
27279: CALL_OW 301
27283: IFFALSE 27747
27285: GO 27287
27287: DISABLE
27288: LD_INT 0
27290: PPUSH
27291: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27292: LD_INT 22
27294: PUSH
27295: LD_INT 8
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 21
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 33
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 34
27324: PUSH
27325: LD_INT 29
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 50
27334: PUSH
27335: EMPTY
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 69
27349: PUSH
27350: LD_INT 1
27352: EQUAL
27353: IFFALSE 27464
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27355: LD_INT 22
27357: PUSH
27358: LD_INT 8
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 21
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 33
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 34
27387: PUSH
27388: LD_INT 29
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 50
27397: PUSH
27398: EMPTY
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: PPUSH
27408: CALL_OW 69
27412: PPUSH
27413: LD_INT 34
27415: PPUSH
27416: LD_INT 22
27418: PUSH
27419: LD_INT 4
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 21
27428: PUSH
27429: LD_INT 3
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 30
27438: PUSH
27439: LD_INT 32
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 70
27455: PUSH
27456: LD_INT 1
27458: ARRAY
27459: PPUSH
27460: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27464: LD_ADDR_VAR 0 1
27468: PUSH
27469: LD_INT 22
27471: PUSH
27472: LD_INT 4
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 21
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 56
27491: PUSH
27492: EMPTY
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: PPUSH
27500: CALL_OW 69
27504: PUSH
27505: LD_EXP 17
27509: PUSH
27510: EMPTY
27511: LIST
27512: DIFF
27513: PUSH
27514: FOR_IN
27515: IFFALSE 27546
// if GetSex ( i ) = sex_male then
27517: LD_VAR 0 1
27521: PPUSH
27522: CALL_OW 258
27526: PUSH
27527: LD_INT 1
27529: EQUAL
27530: IFFALSE 27544
// begin tmp = i ;
27532: LD_ADDR_VAR 0 2
27536: PUSH
27537: LD_VAR 0 1
27541: ST_TO_ADDR
// break ;
27542: GO 27546
// end ;
27544: GO 27514
27546: POP
27547: POP
// Say ( Powell , D6a-Pow-1 ) ;
27548: LD_EXP 17
27552: PPUSH
27553: LD_STRING D6a-Pow-1
27555: PPUSH
27556: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
27560: LD_VAR 0 2
27564: PPUSH
27565: LD_STRING D6a-Sol3-1
27567: PPUSH
27568: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
27572: LD_EXP 17
27576: PPUSH
27577: LD_VAR 0 2
27581: PPUSH
27582: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
27586: LD_EXP 17
27590: PPUSH
27591: LD_STRING D6a-Pow-2
27593: PPUSH
27594: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
27598: LD_VAR 0 2
27602: PPUSH
27603: LD_STRING D6a-Sol3-2
27605: PPUSH
27606: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
27610: LD_EXP 17
27614: PPUSH
27615: LD_STRING D6a-Pow-3
27617: PPUSH
27618: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
27622: LD_EXP 17
27626: PPUSH
27627: LD_EXP 73
27631: PPUSH
27632: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
27636: LD_INT 35
27638: PPUSH
27639: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
27643: LD_EXP 17
27647: PPUSH
27648: LD_EXP 73
27652: PPUSH
27653: CALL_OW 120
// until IsInUnit ( Powell ) ;
27657: LD_EXP 17
27661: PPUSH
27662: CALL_OW 310
27666: IFFALSE 27636
// wait ( 0 0$1 ) ;
27668: LD_INT 35
27670: PPUSH
27671: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
27675: LD_EXP 73
27679: PPUSH
27680: LD_INT 77
27682: PPUSH
27683: LD_INT 64
27685: PPUSH
27686: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
27690: LD_EXP 73
27694: PPUSH
27695: LD_INT 91
27697: PPUSH
27698: LD_INT 61
27700: PPUSH
27701: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
27705: LD_EXP 73
27709: PPUSH
27710: LD_INT 74
27712: PPUSH
27713: LD_INT 25
27715: PPUSH
27716: CALL_OW 171
// centerPowell = 1 ;
27720: LD_ADDR_EXP 74
27724: PUSH
27725: LD_INT 1
27727: ST_TO_ADDR
// wait ( 0 0$15 ) ;
27728: LD_INT 525
27730: PPUSH
27731: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
27735: LD_EXP 17
27739: PPUSH
27740: LD_STRING D6b-Pow-1
27742: PPUSH
27743: CALL_OW 88
// end ;
27747: PPOPN 2
27749: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
27750: LD_EXP 73
27754: PPUSH
27755: LD_INT 13
27757: PPUSH
27758: CALL_OW 308
27762: PUSH
27763: LD_EXP 69
27767: PUSH
27768: LD_INT 3
27770: EQUAL
27771: AND
27772: IFFALSE 27914
27774: GO 27776
27776: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
27777: LD_EXP 73
27781: PPUSH
27782: LD_INT 250
27784: PPUSH
27785: CALL_OW 234
// DialogueOn ;
27789: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
27793: LD_EXP 17
27797: PPUSH
27798: LD_STRING D6b-Pow-1a
27800: PPUSH
27801: CALL_OW 88
// DialogueOff ;
27805: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27809: LD_EXP 17
27813: PPUSH
27814: LD_INT 22
27816: PUSH
27817: LD_INT 8
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 34
27826: PUSH
27827: LD_INT 29
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 50
27836: PUSH
27837: EMPTY
27838: LIST
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: PPUSH
27845: CALL_OW 69
27849: PUSH
27850: LD_INT 1
27852: ARRAY
27853: PPUSH
27854: CALL_OW 120
// wait ( 0 0$1 ) ;
27858: LD_INT 35
27860: PPUSH
27861: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
27865: LD_EXP 17
27869: PPUSH
27870: LD_INT 22
27872: PUSH
27873: LD_INT 8
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 34
27882: PUSH
27883: LD_INT 29
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 50
27892: PUSH
27893: EMPTY
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: PPUSH
27901: CALL_OW 69
27905: PUSH
27906: LD_INT 1
27908: ARRAY
27909: PPUSH
27910: CALL_OW 120
// end ;
27914: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
27915: LD_INT 22
27917: PUSH
27918: LD_INT 4
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 34
27927: PUSH
27928: LD_INT 29
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PPUSH
27939: CALL_OW 69
27943: IFFALSE 28375
27945: GO 27947
27947: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
27948: LD_ADDR_EXP 75
27952: PUSH
27953: LD_INT 22
27955: PUSH
27956: LD_INT 4
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 34
27965: PUSH
27966: LD_INT 29
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 69
27981: PUSH
27982: LD_INT 1
27984: ARRAY
27985: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
27986: LD_INT 8
27988: PPUSH
27989: LD_INT 4
27991: PPUSH
27992: LD_INT 1
27994: PPUSH
27995: LD_INT 1
27997: PPUSH
27998: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
28002: LD_EXP 75
28006: PPUSH
28007: LD_INT 80
28009: PPUSH
28010: LD_INT 19
28012: PPUSH
28013: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28017: LD_EXP 75
28021: PPUSH
28022: LD_INT 74
28024: PPUSH
28025: LD_INT 15
28027: PPUSH
28028: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28032: LD_EXP 75
28036: PPUSH
28037: LD_INT 72
28039: PPUSH
28040: LD_INT 19
28042: PPUSH
28043: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28047: LD_EXP 75
28051: PPUSH
28052: LD_INT 78
28054: PPUSH
28055: LD_INT 24
28057: PPUSH
28058: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28062: LD_EXP 75
28066: PPUSH
28067: LD_INT 77
28069: PPUSH
28070: LD_INT 20
28072: PPUSH
28073: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28077: LD_EXP 75
28081: PPUSH
28082: LD_INT 74
28084: PPUSH
28085: LD_INT 15
28087: PPUSH
28088: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28092: LD_EXP 75
28096: PPUSH
28097: LD_INT 72
28099: PPUSH
28100: LD_INT 19
28102: PPUSH
28103: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28107: LD_EXP 75
28111: PPUSH
28112: LD_INT 78
28114: PPUSH
28115: LD_INT 24
28117: PPUSH
28118: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28122: LD_EXP 75
28126: PPUSH
28127: LD_INT 77
28129: PPUSH
28130: LD_INT 20
28132: PPUSH
28133: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28137: LD_EXP 75
28141: PPUSH
28142: LD_INT 78
28144: PPUSH
28145: LD_INT 15
28147: PPUSH
28148: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28152: LD_EXP 17
28156: PPUSH
28157: LD_STRING D6b-Pow-1b
28159: PPUSH
28160: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28164: LD_INT 22
28166: PUSH
28167: LD_INT 8
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 21
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 25
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 26
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: PPUSH
28210: CALL_OW 69
28214: PUSH
28215: LD_INT 1
28217: ARRAY
28218: PPUSH
28219: LD_STRING D6b-ArSol1-1
28221: PPUSH
28222: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28226: LD_INT 22
28228: PUSH
28229: LD_INT 8
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 21
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 25
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 26
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: PPUSH
28272: CALL_OW 69
28276: PUSH
28277: LD_INT 2
28279: ARRAY
28280: PPUSH
28281: LD_STRING D6b-ArSol2-1
28283: PPUSH
28284: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28288: LD_EXP 17
28292: PPUSH
28293: LD_STRING D6b-Pow-2
28295: PPUSH
28296: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28300: LD_INT 35
28302: PPUSH
28303: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28307: LD_EXP 75
28311: PPUSH
28312: LD_INT 78
28314: PPUSH
28315: LD_INT 15
28317: PPUSH
28318: CALL_OW 297
28322: PUSH
28323: LD_INT 2
28325: LESS
28326: IFFALSE 28300
// wait ( 0 0$1 ) ;
28328: LD_INT 35
28330: PPUSH
28331: CALL_OW 67
// DialogueOn ;
28335: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28339: LD_EXP 17
28343: PPUSH
28344: LD_STRING D6b-Pow-2a
28346: PPUSH
28347: CALL_OW 88
// DialogueOff ;
28351: CALL_OW 7
// centerPowell = 0 ;
28355: LD_ADDR_EXP 74
28359: PUSH
28360: LD_INT 0
28362: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28363: LD_EXP 75
28367: PPUSH
28368: LD_INT 105
28370: PPUSH
28371: CALL_OW 115
// end ;
28375: END
// every 0 0$3 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28376: LD_INT 105
28378: PPUSH
28379: CALL_OW 301
28383: PUSH
28384: LD_EXP 69
28388: PUSH
28389: LD_INT 3
28391: EQUAL
28392: AND
28393: IFFALSE 29227
28395: GO 28397
28397: DISABLE
28398: LD_INT 0
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28404: LD_ADDR_VAR 0 2
28408: PUSH
28409: LD_INT 22
28411: PUSH
28412: LD_INT 4
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 21
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 26
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: PPUSH
28444: CALL_OW 69
28448: PUSH
28449: LD_EXP 1
28453: PUSH
28454: LD_EXP 3
28458: PUSH
28459: LD_EXP 21
28463: PUSH
28464: LD_EXP 22
28468: PUSH
28469: LD_EXP 23
28473: PUSH
28474: LD_EXP 4
28478: PUSH
28479: LD_EXP 5
28483: PUSH
28484: LD_EXP 6
28488: PUSH
28489: LD_EXP 7
28493: PUSH
28494: LD_EXP 8
28498: PUSH
28499: LD_EXP 9
28503: PUSH
28504: LD_EXP 10
28508: PUSH
28509: LD_EXP 11
28513: PUSH
28514: LD_EXP 12
28518: PUSH
28519: LD_EXP 13
28523: PUSH
28524: LD_EXP 14
28528: PUSH
28529: LD_EXP 15
28533: PUSH
28534: LD_EXP 17
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: DIFF
28559: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
28560: LD_INT 49
28562: PPUSH
28563: LD_INT 66
28565: PPUSH
28566: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
28570: LD_VAR 0 2
28574: PUSH
28575: LD_INT 1
28577: ARRAY
28578: PPUSH
28579: LD_STRING D6c-Sol3-1
28581: PPUSH
28582: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
28586: LD_EXP 1
28590: PPUSH
28591: LD_STRING D6c-JMM-1
28593: PPUSH
28594: CALL_OW 88
// if IsOk ( Cyrus ) then
28598: LD_EXP 7
28602: PPUSH
28603: CALL_OW 302
28607: IFFALSE 28621
// Say ( Cyrus , D6c-Cyrus-1 ) ;
28609: LD_EXP 7
28613: PPUSH
28614: LD_STRING D6c-Cyrus-1
28616: PPUSH
28617: CALL_OW 88
// if IsOk ( Bobby ) then
28621: LD_EXP 6
28625: PPUSH
28626: CALL_OW 302
28630: IFFALSE 28644
// Say ( Bobby , D6c-Bobby-1 ) ;
28632: LD_EXP 6
28636: PPUSH
28637: LD_STRING D6c-Bobby-1
28639: PPUSH
28640: CALL_OW 88
// if IsOk ( Cornel ) then
28644: LD_EXP 12
28648: PPUSH
28649: CALL_OW 302
28653: IFFALSE 28667
// Say ( Cornel , D6c-Corn-1 ) ;
28655: LD_EXP 12
28659: PPUSH
28660: LD_STRING D6c-Corn-1
28662: PPUSH
28663: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
28667: LD_VAR 0 2
28671: PUSH
28672: LD_INT 2
28674: ARRAY
28675: PPUSH
28676: LD_STRING D6c-Sol1-1
28678: PPUSH
28679: CALL_OW 88
// if IsOk ( Lisa ) then
28683: LD_EXP 4
28687: PPUSH
28688: CALL_OW 302
28692: IFFALSE 28706
// Say ( Lisa , D6c-Lisa-1 ) ;
28694: LD_EXP 4
28698: PPUSH
28699: LD_STRING D6c-Lisa-1
28701: PPUSH
28702: CALL_OW 88
// if IsOk ( Gary ) then
28706: LD_EXP 13
28710: PPUSH
28711: CALL_OW 302
28715: IFFALSE 28729
// Say ( Gary , D6c-Gary-1 ) ;
28717: LD_EXP 13
28721: PPUSH
28722: LD_STRING D6c-Gary-1
28724: PPUSH
28725: CALL_OW 88
// if IsOK ( Donaldson ) then
28729: LD_EXP 5
28733: PPUSH
28734: CALL_OW 302
28738: IFFALSE 28752
// Say ( Donaldson , D6c-Don-1 ) ;
28740: LD_EXP 5
28744: PPUSH
28745: LD_STRING D6c-Don-1
28747: PPUSH
28748: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
28752: LD_VAR 0 2
28756: PUSH
28757: LD_INT 3
28759: ARRAY
28760: PPUSH
28761: LD_STRING D6c-Sol2-1
28763: PPUSH
28764: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
28768: LD_INT 22
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 21
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PPUSH
28792: CALL_OW 69
28796: PPUSH
28797: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
28801: LD_INT 22
28803: PUSH
28804: LD_INT 4
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 21
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PPUSH
28825: CALL_OW 69
28829: PPUSH
28830: CALL_OW 122
// wait ( 0 0$1 ) ;
28834: LD_INT 35
28836: PPUSH
28837: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_INT 22
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 21
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 69
28874: PUSH
28875: LD_EXP 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: DIFF
28883: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
28884: LD_ADDR_VAR 0 4
28888: PUSH
28889: LD_INT 22
28891: PUSH
28892: LD_INT 4
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 21
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PPUSH
28913: CALL_OW 69
28917: ST_TO_ADDR
// for i := 1 to tmp2 do
28918: LD_ADDR_VAR 0 1
28922: PUSH
28923: DOUBLE
28924: LD_INT 1
28926: DEC
28927: ST_TO_ADDR
28928: LD_VAR 0 4
28932: PUSH
28933: FOR_TO
28934: IFFALSE 28985
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
28936: LD_VAR 0 4
28940: PUSH
28941: LD_VAR 0 1
28945: ARRAY
28946: PPUSH
28947: LD_INT 43
28949: PUSH
28950: LD_VAR 0 1
28954: PLUS
28955: PPUSH
28956: LD_INT 64
28958: PPUSH
28959: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
28963: LD_VAR 0 4
28967: PUSH
28968: LD_VAR 0 1
28972: ARRAY
28973: PPUSH
28974: LD_EXP 1
28978: PPUSH
28979: CALL_OW 179
// end ;
28983: GO 28933
28985: POP
28986: POP
// for i := 1 to tmp1 do
28987: LD_ADDR_VAR 0 1
28991: PUSH
28992: DOUBLE
28993: LD_INT 1
28995: DEC
28996: ST_TO_ADDR
28997: LD_VAR 0 3
29001: PUSH
29002: FOR_TO
29003: IFFALSE 29054
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
29005: LD_VAR 0 3
29009: PUSH
29010: LD_VAR 0 1
29014: ARRAY
29015: PPUSH
29016: LD_INT 43
29018: PUSH
29019: LD_VAR 0 1
29023: PLUS
29024: PPUSH
29025: LD_INT 65
29027: PPUSH
29028: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
29032: LD_VAR 0 3
29036: PUSH
29037: LD_VAR 0 1
29041: ARRAY
29042: PPUSH
29043: LD_EXP 1
29047: PPUSH
29048: CALL_OW 179
// end ;
29052: GO 29002
29054: POP
29055: POP
// repeat wait ( 0 0$1 ) ;
29056: LD_INT 35
29058: PPUSH
29059: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29063: LD_EXP 1
29067: PPUSH
29068: LD_INT 48
29070: PPUSH
29071: LD_INT 68
29073: PPUSH
29074: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29078: LD_EXP 1
29082: PPUSH
29083: LD_INT 48
29085: PPUSH
29086: LD_INT 68
29088: PPUSH
29089: CALL_OW 297
29093: PUSH
29094: LD_INT 2
29096: LESS
29097: IFFALSE 29056
// AddComTurnXY ( JMM , 47 , 65 ) ;
29099: LD_EXP 1
29103: PPUSH
29104: LD_INT 47
29106: PPUSH
29107: LD_INT 65
29109: PPUSH
29110: CALL_OW 178
// wait ( 0 0$2 ) ;
29114: LD_INT 70
29116: PPUSH
29117: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29121: LD_VAR 0 2
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: LD_STRING D6c-Sol3-2
29132: PPUSH
29133: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29137: LD_EXP 1
29141: PPUSH
29142: LD_STRING D6c-JMM-2
29144: PPUSH
29145: CALL_OW 88
// Video ( false ) ;
29149: LD_INT 0
29151: PPUSH
29152: CALL 6868 0 1
// centerPowell = 0 ;
29156: LD_ADDR_EXP 74
29160: PUSH
29161: LD_INT 0
29163: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29164: LD_INT 22
29166: PUSH
29167: LD_INT 4
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PPUSH
29174: CALL_OW 69
29178: PPUSH
29179: LD_INT 1
29181: PPUSH
29182: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29186: LD_STRING M2
29188: PPUSH
29189: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29193: LD_INT 4
29195: PPUSH
29196: LD_INT 4
29198: PPUSH
29199: CALL_OW 343
// timerStatus = 1 ;
29203: LD_ADDR_EXP 96
29207: PUSH
29208: LD_INT 1
29210: ST_TO_ADDR
// missionStage = 1 ;
29211: LD_ADDR_EXP 101
29215: PUSH
29216: LD_INT 1
29218: ST_TO_ADDR
// startAttacks = 1 ;
29219: LD_ADDR_EXP 72
29223: PUSH
29224: LD_INT 1
29226: ST_TO_ADDR
// end ;
29227: PPOPN 4
29229: END
// every 0 0$1 trigger centerPowell = 1 do
29230: LD_EXP 74
29234: PUSH
29235: LD_INT 1
29237: EQUAL
29238: IFFALSE 29521
29240: GO 29242
29242: DISABLE
// begin enable ;
29243: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29244: LD_EXP 17
29248: PUSH
29249: LD_EXP 75
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PPUSH
29258: LD_INT 1000
29260: PPUSH
29261: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29265: LD_INT 22
29267: PUSH
29268: LD_INT 4
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 34
29277: PUSH
29278: LD_INT 29
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 33
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 69
29304: PUSH
29305: LD_INT 0
29307: GREATER
29308: IFFALSE 29361
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29310: LD_INT 22
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 34
29322: PUSH
29323: LD_INT 29
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 33
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: PPUSH
29345: CALL_OW 69
29349: PUSH
29350: LD_INT 1
29352: ARRAY
29353: PPUSH
29354: LD_INT 1000
29356: PPUSH
29357: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29361: LD_INT 22
29363: PUSH
29364: LD_INT 8
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 34
29373: PUSH
29374: LD_INT 29
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 33
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: LIST
29395: PPUSH
29396: CALL_OW 69
29400: PUSH
29401: LD_INT 0
29403: GREATER
29404: IFFALSE 29457
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29406: LD_INT 22
29408: PUSH
29409: LD_INT 8
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 34
29418: PUSH
29419: LD_INT 29
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 33
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: PPUSH
29441: CALL_OW 69
29445: PUSH
29446: LD_INT 1
29448: ARRAY
29449: PPUSH
29450: LD_INT 1000
29452: PPUSH
29453: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29457: LD_EXP 73
29461: PPUSH
29462: LD_INT 13
29464: PPUSH
29465: CALL_OW 308
29469: NOT
29470: IFFALSE 29484
// SetLives ( powellVeh , 1000 ) ;
29472: LD_EXP 73
29476: PPUSH
29477: LD_INT 1000
29479: PPUSH
29480: CALL_OW 234
// if not IsInUnit ( Powell ) then
29484: LD_EXP 17
29488: PPUSH
29489: CALL_OW 310
29493: NOT
29494: IFFALSE 29507
// CenterNowOnUnits ( Powell ) else
29496: LD_EXP 17
29500: PPUSH
29501: CALL_OW 87
29505: GO 29521
// CenterNowOnUnits ( IsInUnit ( Powell ) ) ;
29507: LD_EXP 17
29511: PPUSH
29512: CALL_OW 310
29516: PPUSH
29517: CALL_OW 87
// end ;
29521: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
29522: LD_EXP 97
29526: PUSH
29527: LD_INT 560
29529: GREATEREQUAL
29530: IFFALSE 29742
29532: GO 29534
29534: DISABLE
// begin DialogueOn ;
29535: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
29539: LD_EXP 53
29543: PPUSH
29544: LD_STRING D7-Friend-1
29546: PPUSH
29547: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
29551: LD_EXP 1
29555: PPUSH
29556: LD_STRING D7-JMM-1
29558: PPUSH
29559: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
29563: LD_EXP 53
29567: PPUSH
29568: LD_STRING D7-Friend-2
29570: PPUSH
29571: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
29575: LD_EXP 1
29579: PPUSH
29580: LD_STRING D7-JMM-2
29582: PPUSH
29583: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
29587: LD_EXP 53
29591: PPUSH
29592: LD_STRING D7-Friend-3
29594: PPUSH
29595: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
29599: LD_EXP 1
29603: PPUSH
29604: LD_STRING D7-JMM-3
29606: PPUSH
29607: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
29611: LD_EXP 53
29615: PPUSH
29616: LD_STRING D7-Friend-4
29618: PPUSH
29619: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
29623: LD_EXP 1
29627: PPUSH
29628: LD_STRING D7-JMM-4
29630: PPUSH
29631: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
29635: LD_EXP 53
29639: PPUSH
29640: LD_STRING D7-Friend-5
29642: PPUSH
29643: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
29647: LD_EXP 1
29651: PPUSH
29652: LD_STRING D7-JMM-5
29654: PPUSH
29655: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
29659: LD_EXP 53
29663: PPUSH
29664: LD_STRING D7-Friend-6
29666: PPUSH
29667: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
29671: LD_EXP 1
29675: PPUSH
29676: LD_STRING D7-JMM-6
29678: PPUSH
29679: CALL_OW 88
// DialogueOff ;
29683: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
29687: LD_EXP 36
29691: PPUSH
29692: LD_INT 15
29694: PPUSH
29695: LD_INT 0
29697: PPUSH
29698: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
29702: LD_EXP 36
29706: PPUSH
29707: LD_INT 2
29709: PPUSH
29710: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
29714: LD_EXP 36
29718: PPUSH
29719: LD_INT 2
29721: PPUSH
29722: LD_INT 78
29724: PPUSH
29725: LD_INT 12
29727: PPUSH
29728: LD_INT 3
29730: PPUSH
29731: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
29735: LD_STRING Mlegion
29737: PPUSH
29738: CALL_OW 337
// end ;
29742: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 5 , 4 ] [ Difficulty ] do
29743: LD_INT 22
29745: PUSH
29746: LD_INT 8
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 21
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 23
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: PPUSH
29778: CALL_OW 69
29782: PUSH
29783: LD_INT 6
29785: PUSH
29786: LD_INT 5
29788: PUSH
29789: LD_INT 4
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: PUSH
29797: LD_OWVAR 67
29801: ARRAY
29802: LESSEQUAL
29803: IFFALSE 30117
29805: GO 29807
29807: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
29808: LD_EXP 30
29812: PPUSH
29813: LD_INT 19
29815: PPUSH
29816: LD_INT 0
29818: PPUSH
29819: CALL_OW 49
// KillUnit ( Kozlov ) ;
29823: LD_EXP 36
29827: PPUSH
29828: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
29832: LD_INT 22
29834: PUSH
29835: LD_INT 8
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 21
29844: PUSH
29845: LD_INT 3
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 23
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 30
29864: PUSH
29865: LD_INT 3
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: PPUSH
29878: CALL_OW 69
29882: PUSH
29883: LD_INT 1
29885: ARRAY
29886: PPUSH
29887: CALL_OW 66
// DialogueOn ;
29891: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
29895: LD_EXP 1
29899: PPUSH
29900: LD_STRING D13-JMM-1
29902: PPUSH
29903: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
29907: LD_EXP 30
29911: PPUSH
29912: LD_STRING D13-Kurt-1
29914: PPUSH
29915: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
29919: LD_EXP 1
29923: PPUSH
29924: LD_STRING D13-JMM-2
29926: PPUSH
29927: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
29931: LD_EXP 30
29935: PPUSH
29936: LD_STRING D13-Kurt-2a
29938: PPUSH
29939: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
29943: LD_EXP 1
29947: PPUSH
29948: LD_STRING D13-JMM-3
29950: PPUSH
29951: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
29955: LD_EXP 30
29959: PPUSH
29960: LD_STRING D13-Kurt-3
29962: PPUSH
29963: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
29967: LD_EXP 1
29971: PPUSH
29972: LD_STRING D13-JMM-4
29974: PPUSH
29975: CALL_OW 88
// DialogueOff ;
29979: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
29983: LD_INT 22
29985: PUSH
29986: LD_INT 8
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 50
29995: PUSH
29996: EMPTY
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PPUSH
30003: CALL_OW 69
30007: PPUSH
30008: LD_INT 1
30010: PPUSH
30011: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
30015: LD_INT 22
30017: PUSH
30018: LD_INT 8
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 3
30027: PUSH
30028: LD_INT 24
30030: PUSH
30031: LD_INT 250
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PPUSH
30046: CALL_OW 69
30050: PPUSH
30051: LD_INT 0
30053: PPUSH
30054: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30058: LD_STRING MlegionOut
30060: PPUSH
30061: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30065: LD_INT 8
30067: PPUSH
30068: LD_INT 1
30070: PPUSH
30071: LD_INT 1
30073: PPUSH
30074: LD_INT 1
30076: PPUSH
30077: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30081: LD_EXP 53
30085: PPUSH
30086: LD_INT 30
30088: PPUSH
30089: LD_INT 0
30091: PPUSH
30092: CALL_OW 49
// wait ( 0 0$1 ) ;
30096: LD_INT 35
30098: PPUSH
30099: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30103: LD_EXP 53
30107: PPUSH
30108: LD_EXP 1
30112: PPUSH
30113: CALL_OW 112
// end ;
30117: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30118: LD_INT 1
30120: PPUSH
30121: LD_EXP 53
30125: PPUSH
30126: CALL_OW 292
30130: IFFALSE 30406
30132: GO 30134
30134: DISABLE
30135: LD_INT 0
30137: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30138: LD_EXP 53
30142: PPUSH
30143: CALL_OW 87
// DialogueOn ;
30147: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30151: LD_EXP 1
30155: PPUSH
30156: LD_STRING D14-JMM-1
30158: PPUSH
30159: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30163: LD_EXP 53
30167: PPUSH
30168: LD_STRING D14-Friend-1
30170: PPUSH
30171: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30175: LD_EXP 1
30179: PPUSH
30180: LD_STRING D14-JMM-2
30182: PPUSH
30183: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30187: LD_EXP 53
30191: PPUSH
30192: LD_STRING D14-Friend-2
30194: PPUSH
30195: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30199: LD_EXP 1
30203: PPUSH
30204: LD_STRING D14-JMM-3
30206: PPUSH
30207: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30211: LD_EXP 53
30215: PPUSH
30216: LD_STRING D14-Friend-3
30218: PPUSH
30219: CALL_OW 88
// DialogueOff ;
30223: CALL_OW 7
// dec = Query ( Q14 ) ;
30227: LD_ADDR_VAR 0 1
30231: PUSH
30232: LD_STRING Q14
30234: PPUSH
30235: CALL_OW 97
30239: ST_TO_ADDR
// if dec = 1 then
30240: LD_VAR 0 1
30244: PUSH
30245: LD_INT 1
30247: EQUAL
30248: IFFALSE 30282
// begin DialogueOn ;
30250: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30254: LD_EXP 1
30258: PPUSH
30259: LD_STRING D14a-JMM-1
30261: PPUSH
30262: CALL_OW 88
// DialogueOff ;
30266: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30270: LD_EXP 53
30274: PPUSH
30275: LD_INT 1
30277: PPUSH
30278: CALL_OW 235
// end ; if dec = 2 then
30282: LD_VAR 0 1
30286: PUSH
30287: LD_INT 2
30289: EQUAL
30290: IFFALSE 30324
// begin DialogueOn ;
30292: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30296: LD_EXP 1
30300: PPUSH
30301: LD_STRING D14b-JMM-1
30303: PPUSH
30304: CALL_OW 88
// DialogueOff ;
30308: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30312: LD_EXP 53
30316: PPUSH
30317: LD_INT 18
30319: PPUSH
30320: CALL_OW 113
// end ; if dec = 3 then
30324: LD_VAR 0 1
30328: PUSH
30329: LD_INT 3
30331: EQUAL
30332: IFFALSE 30406
// begin DialogueOn ;
30334: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30338: LD_EXP 1
30342: PPUSH
30343: LD_STRING D14c-JMM-1
30345: PPUSH
30346: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30350: LD_EXP 53
30354: PPUSH
30355: LD_STRING D14c-Friend-1
30357: PPUSH
30358: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30362: LD_EXP 1
30366: PPUSH
30367: LD_STRING D14c-JMM-2
30369: PPUSH
30370: CALL_OW 88
// DialogueOff ;
30374: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30378: LD_INT 8
30380: PPUSH
30381: LD_INT 1
30383: PPUSH
30384: LD_INT 2
30386: PPUSH
30387: LD_INT 1
30389: PPUSH
30390: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30394: LD_EXP 53
30398: PPUSH
30399: LD_INT 18
30401: PPUSH
30402: CALL_OW 113
// end ; end ;
30406: PPOPN 1
30408: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30409: LD_EXP 53
30413: PPUSH
30414: LD_INT 18
30416: PPUSH
30417: CALL_OW 308
30421: PUSH
30422: LD_EXP 53
30426: PPUSH
30427: CALL_OW 255
30431: PUSH
30432: LD_INT 8
30434: EQUAL
30435: AND
30436: IFFALSE 30450
30438: GO 30440
30440: DISABLE
// RemoveUnit ( LegionFriend ) ;
30441: LD_EXP 53
30445: PPUSH
30446: CALL_OW 64
30450: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30451: LD_EXP 97
30455: PUSH
30456: LD_INT 31570
30458: GREATEREQUAL
30459: IFFALSE 30535
30461: GO 30463
30463: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30464: LD_EXP 81
30468: PUSH
30469: LD_INT 1
30471: EQUAL
30472: PUSH
30473: LD_EXP 79
30477: PUSH
30478: EMPTY
30479: EQUAL
30480: AND
30481: IFFALSE 30487
// PrepareSupportFromKappa ;
30483: CALL 2400 0 0
// if KappaStatus = 0 and JMMGirlStatus = 1 then
30487: LD_EXP 81
30491: PUSH
30492: LD_INT 0
30494: EQUAL
30495: PUSH
30496: LD_EXP 82
30500: PUSH
30501: LD_INT 1
30503: EQUAL
30504: AND
30505: IFFALSE 30511
// PrepareAttackFromKappa ;
30507: CALL 5252 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
30511: LD_EXP 81
30515: PUSH
30516: LD_INT 0
30518: EQUAL
30519: PUSH
30520: LD_EXP 82
30524: PUSH
30525: LD_INT 0
30527: EQUAL
30528: AND
30529: IFFALSE 30535
// PrepareAttackFromKappa ;
30531: CALL 5252 0 0
// end ;
30535: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
30536: LD_INT 1
30538: PPUSH
30539: LD_EXP 35
30543: PPUSH
30544: CALL_OW 292
30548: IFFALSE 30816
30550: GO 30552
30552: DISABLE
// begin missionStage = 2 ;
30553: LD_ADDR_EXP 101
30557: PUSH
30558: LD_INT 2
30560: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
30561: LD_EXP 35
30565: PPUSH
30566: CALL_OW 87
// DialogueOn ;
30570: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
30574: LD_EXP 1
30578: PPUSH
30579: LD_STRING D10nB-JMM-1
30581: PPUSH
30582: CALL_OW 88
// if BurlakStatus = 1 then
30586: LD_EXP 76
30590: PUSH
30591: LD_INT 1
30593: EQUAL
30594: IFFALSE 30608
// Say ( Vsevolod , D10nB-Vse-1a ) ;
30596: LD_EXP 34
30600: PPUSH
30601: LD_STRING D10nB-Vse-1a
30603: PPUSH
30604: CALL_OW 88
// if BurlakStatus = 0 then
30608: LD_EXP 76
30612: PUSH
30613: LD_INT 0
30615: EQUAL
30616: IFFALSE 30630
// Say ( Vsevolod , D10nB-Vse-1 ) ;
30618: LD_EXP 34
30622: PPUSH
30623: LD_STRING D10nB-Vse-1
30625: PPUSH
30626: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
30630: LD_EXP 1
30634: PPUSH
30635: LD_STRING D10nB-JMM-2
30637: PPUSH
30638: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
30642: LD_EXP 81
30646: PUSH
30647: LD_EXP 82
30651: PUSH
30652: LD_INT 1
30654: EQUAL
30655: AND
30656: IFFALSE 30670
// Say ( Vsevolod , D10nB-Vse-5 ) ;
30658: LD_EXP 34
30662: PPUSH
30663: LD_STRING D10nB-Vse-5
30665: PPUSH
30666: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 0 then
30670: LD_EXP 81
30674: PUSH
30675: LD_EXP 82
30679: PUSH
30680: LD_INT 0
30682: EQUAL
30683: AND
30684: IFFALSE 30812
// begin if JMMGirl = 1 then
30686: LD_EXP 80
30690: PUSH
30691: LD_INT 1
30693: EQUAL
30694: IFFALSE 30744
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
30696: LD_EXP 34
30700: PPUSH
30701: LD_STRING D10nB-Vse-2
30703: PPUSH
30704: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
30708: LD_EXP 1
30712: PPUSH
30713: LD_STRING D10nB-JMM-3
30715: PPUSH
30716: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
30720: LD_EXP 34
30724: PPUSH
30725: LD_STRING D10nB-Vse-3
30727: PPUSH
30728: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
30732: LD_EXP 1
30736: PPUSH
30737: LD_STRING D10nB-JMM-4
30739: PPUSH
30740: CALL_OW 88
// end ; if JMMGirl = 2 then
30744: LD_EXP 80
30748: PUSH
30749: LD_INT 2
30751: EQUAL
30752: IFFALSE 30778
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
30754: LD_EXP 34
30758: PPUSH
30759: LD_STRING D10nB-Vse-4
30761: PPUSH
30762: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
30766: LD_EXP 1
30770: PPUSH
30771: LD_STRING D10nB-JMM-5
30773: PPUSH
30774: CALL_OW 88
// end ; if JMMGirl = 3 then
30778: LD_EXP 80
30782: PUSH
30783: LD_INT 3
30785: EQUAL
30786: IFFALSE 30812
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
30788: LD_EXP 34
30792: PPUSH
30793: LD_STRING D10nB-Vse-5
30795: PPUSH
30796: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
30800: LD_EXP 1
30804: PPUSH
30805: LD_STRING D10nB-JMM-6
30807: PPUSH
30808: CALL_OW 88
// end ; end ; DialogueOff ;
30812: CALL_OW 7
// end ;
30816: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
30817: LD_EXP 97
30821: PUSH
30822: LD_INT 63070
30824: GREATEREQUAL
30825: IFFALSE 31103
30827: GO 30829
30829: DISABLE
// begin PrepareOmegaTeam ;
30830: CALL 2789 0 0
// missionStage = 3 ;
30834: LD_ADDR_EXP 101
30838: PUSH
30839: LD_INT 3
30841: ST_TO_ADDR
// DialogueOn ;
30842: CALL_OW 6
// if StevensStatus = 1 then
30846: LD_EXP 77
30850: PUSH
30851: LD_INT 1
30853: EQUAL
30854: IFFALSE 30966
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
30856: LD_EXP 3
30860: PPUSH
30861: CALL_OW 310
30865: PPUSH
30866: CALL_OW 87
// Say ( Stevens , D8-Huck-1 ) ;
30870: LD_EXP 3
30874: PPUSH
30875: LD_STRING D8-Huck-1
30877: PPUSH
30878: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
30882: LD_EXP 1
30886: PPUSH
30887: LD_STRING D8-JMM-1
30889: PPUSH
30890: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
30894: LD_EXP 3
30898: PPUSH
30899: LD_STRING D8-Huck-2
30901: PPUSH
30902: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
30906: LD_EXP 1
30910: PPUSH
30911: LD_STRING D8-JMM-2
30913: PPUSH
30914: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
30918: LD_EXP 3
30922: PPUSH
30923: LD_STRING D8-Huck-3
30925: PPUSH
30926: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
30930: LD_EXP 1
30934: PPUSH
30935: LD_STRING D8-JMM-3
30937: PPUSH
30938: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
30942: LD_EXP 3
30946: PPUSH
30947: LD_STRING D8-Huck-4
30949: PPUSH
30950: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
30954: LD_EXP 1
30958: PPUSH
30959: LD_STRING D8-JMM-4
30961: PPUSH
30962: CALL_OW 88
// end ; if StevensStatus = 0 then
30966: LD_EXP 77
30970: PUSH
30971: LD_INT 0
30973: EQUAL
30974: IFFALSE 31086
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
30976: LD_EXP 21
30980: PPUSH
30981: CALL_OW 310
30985: PPUSH
30986: CALL_OW 87
// Say ( Baker , D8-Huck-1 ) ;
30990: LD_EXP 21
30994: PPUSH
30995: LD_STRING D8-Huck-1
30997: PPUSH
30998: CALL_OW 88
// Say ( JMM , D8-JMM-1a ) ;
31002: LD_EXP 1
31006: PPUSH
31007: LD_STRING D8-JMM-1a
31009: PPUSH
31010: CALL_OW 88
// Say ( Baker , D8-Huck-2 ) ;
31014: LD_EXP 21
31018: PPUSH
31019: LD_STRING D8-Huck-2
31021: PPUSH
31022: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
31026: LD_EXP 1
31030: PPUSH
31031: LD_STRING D8-JMM-2
31033: PPUSH
31034: CALL_OW 88
// Say ( Baker , D8-Huck-3 ) ;
31038: LD_EXP 21
31042: PPUSH
31043: LD_STRING D8-Huck-3
31045: PPUSH
31046: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
31050: LD_EXP 1
31054: PPUSH
31055: LD_STRING D8-JMM-3
31057: PPUSH
31058: CALL_OW 88
// Say ( Baker , D8-Huck-4 ) ;
31062: LD_EXP 21
31066: PPUSH
31067: LD_STRING D8-Huck-4
31069: PPUSH
31070: CALL_OW 88
// Say ( JMM , D8-JMM-4 ) ;
31074: LD_EXP 1
31078: PPUSH
31079: LD_STRING D8-JMM-4
31081: PPUSH
31082: CALL_OW 88
// end ; DialogueOff ;
31086: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31090: LD_INT 25
31092: PPUSH
31093: LD_INT 1
31095: PPUSH
31096: LD_INT 1
31098: PPUSH
31099: CALL_OW 322
// end ;
31103: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31104: LD_EXP 97
31108: PUSH
31109: LD_INT 73570
31111: GREATEREQUAL
31112: IFFALSE 31462
31114: GO 31116
31116: DISABLE
31117: LD_INT 0
31119: PPUSH
// begin missionStage = 4 ;
31120: LD_ADDR_EXP 101
31124: PUSH
31125: LD_INT 4
31127: ST_TO_ADDR
// DialogueOn ;
31128: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31132: LD_EXP 28
31136: PPUSH
31137: LD_STRING D9-Roth-1
31139: PPUSH
31140: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31144: LD_EXP 1
31148: PPUSH
31149: LD_STRING D9-JMM-1
31151: PPUSH
31152: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31156: LD_EXP 28
31160: PPUSH
31161: LD_STRING D9-Roth-2
31163: PPUSH
31164: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31168: LD_EXP 28
31172: PPUSH
31173: LD_STRING D9-Roth-2a
31175: PPUSH
31176: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31180: LD_EXP 26
31184: PPUSH
31185: LD_STRING D9-Pla-2
31187: PPUSH
31188: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31192: LD_EXP 28
31196: PPUSH
31197: LD_STRING D9-Roth-3
31199: PPUSH
31200: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31204: LD_EXP 26
31208: PPUSH
31209: LD_STRING D9-Pla-3
31211: PPUSH
31212: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31216: LD_EXP 28
31220: PPUSH
31221: LD_STRING D9-Roth-4
31223: PPUSH
31224: CALL_OW 94
// dec = Query ( Q9 ) ;
31228: LD_ADDR_VAR 0 1
31232: PUSH
31233: LD_STRING Q9
31235: PPUSH
31236: CALL_OW 97
31240: ST_TO_ADDR
// if dec = 1 then
31241: LD_VAR 0 1
31245: PUSH
31246: LD_INT 1
31248: EQUAL
31249: IFFALSE 31263
// SayRadio ( Roth , D9a-Roth-1 ) ;
31251: LD_EXP 28
31255: PPUSH
31256: LD_STRING D9a-Roth-1
31258: PPUSH
31259: CALL_OW 94
// if dec = 2 then
31263: LD_VAR 0 1
31267: PUSH
31268: LD_INT 2
31270: EQUAL
31271: IFFALSE 31297
// begin Say ( JMM , D9b-JMM-1 ) ;
31273: LD_EXP 1
31277: PPUSH
31278: LD_STRING D9b-JMM-1
31280: PPUSH
31281: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31285: LD_EXP 28
31289: PPUSH
31290: LD_STRING D9b-Roth-1
31292: PPUSH
31293: CALL_OW 94
// end ; if dec = 3 then
31297: LD_VAR 0 1
31301: PUSH
31302: LD_INT 3
31304: EQUAL
31305: IFFALSE 31367
// begin Say ( JMM , D9c-JMM-1 ) ;
31307: LD_EXP 1
31311: PPUSH
31312: LD_STRING D9c-JMM-1
31314: PPUSH
31315: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31319: LD_EXP 28
31323: PPUSH
31324: LD_STRING D9c-Roth-1
31326: PPUSH
31327: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31331: LD_EXP 1
31335: PPUSH
31336: LD_STRING D9c-JMM-2
31338: PPUSH
31339: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31343: LD_EXP 28
31347: PPUSH
31348: LD_STRING D9c-Roth-2
31350: PPUSH
31351: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31355: LD_EXP 1
31359: PPUSH
31360: LD_STRING D9c-JMM-3
31362: PPUSH
31363: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31367: LD_EXP 28
31371: PPUSH
31372: LD_STRING D9c-Roth-3
31374: PPUSH
31375: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31379: LD_EXP 28
31383: PPUSH
31384: LD_STRING D9cont-Roth-1
31386: PPUSH
31387: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31391: LD_EXP 1
31395: PPUSH
31396: LD_STRING D9cont-JMM-1
31398: PPUSH
31399: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31403: LD_EXP 28
31407: PPUSH
31408: LD_STRING D9cont-Roth-2
31410: PPUSH
31411: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31415: LD_EXP 1
31419: PPUSH
31420: LD_STRING D9cont-JMM-2
31422: PPUSH
31423: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31427: LD_EXP 28
31431: PPUSH
31432: LD_STRING D9cont-Roth-3
31434: PPUSH
31435: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31439: LD_EXP 1
31443: PPUSH
31444: LD_STRING D9cont-JMM-3
31446: PPUSH
31447: CALL_OW 88
// DialogueOff ;
31451: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31455: LD_STRING M3
31457: PPUSH
31458: CALL_OW 337
// end ;
31462: PPOPN 1
31464: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
31465: LD_INT 22
31467: PUSH
31468: LD_INT 7
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 21
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PPUSH
31489: CALL_OW 69
31493: PUSH
31494: LD_INT 20
31496: PUSH
31497: LD_INT 18
31499: PUSH
31500: LD_INT 15
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: PUSH
31508: LD_OWVAR 67
31512: ARRAY
31513: LESSEQUAL
31514: IFFALSE 32000
31516: GO 31518
31518: DISABLE
31519: LD_INT 0
31521: PPUSH
31522: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
31523: LD_ADDR_VAR 0 1
31527: PUSH
31528: LD_INT 22
31530: PUSH
31531: LD_INT 7
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 21
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 23
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 24
31560: PUSH
31561: LD_INT 900
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: PPUSH
31574: CALL_OW 69
31578: PUSH
31579: FOR_IN
31580: IFFALSE 31611
// if GetSex ( i ) = sex_male then
31582: LD_VAR 0 1
31586: PPUSH
31587: CALL_OW 258
31591: PUSH
31592: LD_INT 1
31594: EQUAL
31595: IFFALSE 31609
// begin tmp = i ;
31597: LD_ADDR_VAR 0 2
31601: PUSH
31602: LD_VAR 0 1
31606: ST_TO_ADDR
// break ;
31607: GO 31611
// end ;
31609: GO 31579
31611: POP
31612: POP
// if tmp = 0 then
31613: LD_VAR 0 2
31617: PUSH
31618: LD_INT 0
31620: EQUAL
31621: IFFALSE 31675
// begin uc_side = 7 ;
31623: LD_ADDR_OWVAR 20
31627: PUSH
31628: LD_INT 7
31630: ST_TO_ADDR
// uc_nation = 3 ;
31631: LD_ADDR_OWVAR 21
31635: PUSH
31636: LD_INT 3
31638: ST_TO_ADDR
// hc_name =  ;
31639: LD_ADDR_OWVAR 26
31643: PUSH
31644: LD_STRING 
31646: ST_TO_ADDR
// hc_gallery =  ;
31647: LD_ADDR_OWVAR 33
31651: PUSH
31652: LD_STRING 
31654: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
31655: LD_INT 1
31657: PPUSH
31658: LD_INT 10
31660: PPUSH
31661: CALL_OW 381
// tmp = CreateHuman ;
31665: LD_ADDR_VAR 0 2
31669: PUSH
31670: CALL_OW 44
31674: ST_TO_ADDR
// end ; AllianceAI = 0 ;
31675: LD_ADDR_EXP 85
31679: PUSH
31680: LD_INT 0
31682: ST_TO_ADDR
// AllianceEscape = 1 ;
31683: LD_ADDR_EXP 91
31687: PUSH
31688: LD_INT 1
31690: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
31691: LD_INT 7
31693: PPUSH
31694: LD_INT 1
31696: PPUSH
31697: LD_INT 1
31699: PPUSH
31700: LD_INT 1
31702: PPUSH
31703: CALL_OW 80
// DialogueOn ;
31707: CALL_OW 6
// if IsOK ( Roth ) then
31711: LD_EXP 28
31715: PPUSH
31716: CALL_OW 302
31720: IFFALSE 31734
// Say ( JMM , DAb-JMM-1 ) ;
31722: LD_EXP 1
31726: PPUSH
31727: LD_STRING DAb-JMM-1
31729: PPUSH
31730: CALL_OW 88
// if IsOK ( Roth ) then
31734: LD_EXP 28
31738: PPUSH
31739: CALL_OW 302
31743: IFFALSE 31759
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
31745: LD_EXP 28
31749: PPUSH
31750: LD_STRING DSurrenderAlliance-Roth-1
31752: PPUSH
31753: CALL_OW 88
31757: GO 31771
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
31759: LD_VAR 0 2
31763: PPUSH
31764: LD_STRING DSurrenderAlliance-Sci1-1
31766: PPUSH
31767: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
31771: LD_INT 23
31773: PPUSH
31774: LD_INT 22
31776: PUSH
31777: LD_INT 4
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PPUSH
31784: CALL_OW 70
31788: PUSH
31789: LD_INT 1
31791: EQUAL
31792: IFFALSE 31806
// Say ( JMM , DAb-JMM-1a ) ;
31794: LD_EXP 1
31798: PPUSH
31799: LD_STRING DAb-JMM-1a
31801: PPUSH
31802: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
31806: LD_INT 23
31808: PPUSH
31809: LD_INT 22
31811: PUSH
31812: LD_INT 4
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PPUSH
31819: CALL_OW 70
31823: PUSH
31824: LD_INT 1
31826: GREATER
31827: IFFALSE 31841
// Say ( JMM , DAb-JMM-1b ) ;
31829: LD_EXP 1
31833: PPUSH
31834: LD_STRING DAb-JMM-1b
31836: PPUSH
31837: CALL_OW 88
// DialogueOff ;
31841: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
31845: LD_INT 23
31847: PPUSH
31848: LD_INT 22
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PPUSH
31858: CALL_OW 70
31862: PUSH
31863: LD_INT 0
31865: GREATER
31866: IFFALSE 31893
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
31868: LD_INT 23
31870: PPUSH
31871: LD_INT 22
31873: PUSH
31874: LD_INT 4
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PPUSH
31881: CALL_OW 70
31885: PPUSH
31886: LD_INT 1
31888: PPUSH
31889: CALL_OW 235
// if IsDying ( Roth ) then
31893: LD_EXP 28
31897: PPUSH
31898: CALL_OW 303
31902: IFFALSE 31924
// begin RothStatus = 0 ;
31904: LD_ADDR_EXP 92
31908: PUSH
31909: LD_INT 0
31911: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
31912: LD_EXP 28
31916: PPUSH
31917: LD_INT 0
31919: PPUSH
31920: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
31924: LD_INT 22
31926: PUSH
31927: LD_INT 7
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 21
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PPUSH
31948: CALL_OW 69
31952: PPUSH
31953: CALL_OW 122
// wait ( 0 0$1 ) ;
31957: LD_INT 35
31959: PPUSH
31960: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
31964: LD_INT 22
31966: PUSH
31967: LD_INT 7
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 21
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PPUSH
31988: CALL_OW 69
31992: PPUSH
31993: LD_INT 28
31995: PPUSH
31996: CALL_OW 113
// end ;
32000: PPOPN 2
32002: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
32003: LD_EXP 91
32007: PUSH
32008: LD_INT 1
32010: EQUAL
32011: PUSH
32012: LD_INT 28
32014: PPUSH
32015: LD_INT 22
32017: PUSH
32018: LD_INT 7
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 21
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PPUSH
32039: CALL_OW 70
32043: AND
32044: IFFALSE 32106
32046: GO 32048
32048: DISABLE
32049: LD_INT 0
32051: PPUSH
// begin enable ;
32052: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32053: LD_ADDR_VAR 0 1
32057: PUSH
32058: LD_INT 28
32060: PPUSH
32061: LD_INT 22
32063: PUSH
32064: LD_INT 7
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 21
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PPUSH
32085: CALL_OW 70
32089: PUSH
32090: FOR_IN
32091: IFFALSE 32104
// RemoveUnit ( i ) ;
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 64
32102: GO 32090
32104: POP
32105: POP
// end ;
32106: PPOPN 1
32108: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 and IsOK ( Roth ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32109: LD_INT 33
32111: PPUSH
32112: LD_INT 22
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 21
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PPUSH
32136: CALL_OW 70
32140: PUSH
32141: LD_INT 0
32143: GREATER
32144: PUSH
32145: LD_INT 33
32147: PPUSH
32148: LD_INT 22
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 21
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 33
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 3
32180: PUSH
32181: LD_INT 58
32183: PUSH
32184: EMPTY
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: PPUSH
32197: CALL_OW 70
32201: PUSH
32202: LD_INT 0
32204: GREATER
32205: PUSH
32206: LD_EXP 28
32210: PPUSH
32211: CALL_OW 302
32215: AND
32216: PUSH
32217: LD_EXP 85
32221: PUSH
32222: LD_INT 1
32224: EQUAL
32225: AND
32226: OR
32227: IFFALSE 34597
32229: GO 32231
32231: DISABLE
32232: LD_INT 0
32234: PPUSH
32235: PPUSH
32236: PPUSH
// begin tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32237: LD_ADDR_VAR 0 1
32241: PUSH
32242: LD_INT 33
32244: PPUSH
32245: LD_INT 22
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: LD_INT 21
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 33
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PPUSH
32287: CALL_OW 70
32291: PUSH
32292: LD_INT 1
32294: ARRAY
32295: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32296: LD_ADDR_VAR 0 2
32300: PUSH
32301: LD_EXP 1
32305: PUSH
32306: LD_EXP 2
32310: PUSH
32311: LD_EXP 3
32315: PUSH
32316: LD_EXP 21
32320: PUSH
32321: LD_EXP 4
32325: PUSH
32326: LD_EXP 5
32330: PUSH
32331: LD_EXP 6
32335: PUSH
32336: LD_EXP 7
32340: PUSH
32341: LD_EXP 8
32345: PUSH
32346: LD_EXP 9
32350: PUSH
32351: LD_EXP 10
32355: PUSH
32356: LD_EXP 11
32360: PUSH
32361: LD_EXP 12
32365: PUSH
32366: LD_EXP 13
32370: PUSH
32371: LD_EXP 14
32375: PUSH
32376: LD_EXP 15
32380: PUSH
32381: LD_EXP 16
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: ST_TO_ADDR
// InGameOn ;
32405: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32409: LD_INT 1
32411: PPUSH
32412: LD_INT 7
32414: PPUSH
32415: LD_INT 1
32417: PPUSH
32418: LD_INT 1
32420: PPUSH
32421: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
32425: LD_VAR 0 1
32429: PPUSH
32430: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
32434: LD_VAR 0 1
32438: PPUSH
32439: CALL_OW 247
32443: PUSH
32444: LD_INT 2
32446: EQUAL
32447: IFFALSE 32468
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
32449: LD_ADDR_VAR 0 1
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: CALL_OW 313
32463: PUSH
32464: LD_INT 1
32466: ARRAY
32467: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 121
// wait ( 0 0$1 ) ;
32477: LD_INT 35
32479: PPUSH
32480: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
32484: LD_VAR 0 1
32488: PPUSH
32489: LD_INT 248
32491: PPUSH
32492: LD_INT 186
32494: PPUSH
32495: LD_INT 4
32497: PPUSH
32498: LD_INT 1
32500: PPUSH
32501: CALL_OW 483
// wait ( 0 0$2 ) ;
32505: LD_INT 70
32507: PPUSH
32508: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
32512: LD_VAR 0 1
32516: PPUSH
32517: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
32521: LD_VAR 0 1
32525: PPUSH
32526: LD_EXP 28
32530: PPUSH
32531: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
32535: LD_EXP 28
32539: PUSH
32540: LD_EXP 48
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PPUSH
32549: LD_VAR 0 1
32553: PPUSH
32554: CALL_OW 119
// if tpUnit = JMM then
32558: LD_VAR 0 1
32562: PUSH
32563: LD_EXP 1
32567: EQUAL
32568: IFFALSE 32582
// Say ( JMM , DA1-JMM-1 ) ;
32570: LD_EXP 1
32574: PPUSH
32575: LD_STRING DA1-JMM-1
32577: PPUSH
32578: CALL_OW 88
// if tpUnit = Joan then
32582: LD_VAR 0 1
32586: PUSH
32587: LD_EXP 2
32591: EQUAL
32592: IFFALSE 32606
// Say ( Joan , DA1-Joan-1 ) ;
32594: LD_EXP 2
32598: PPUSH
32599: LD_STRING DA1-Joan-1
32601: PPUSH
32602: CALL_OW 88
// if tpUnit = Lisa then
32606: LD_VAR 0 1
32610: PUSH
32611: LD_EXP 4
32615: EQUAL
32616: IFFALSE 32630
// Say ( Lisa , DA1-Lisa-1 ) ;
32618: LD_EXP 4
32622: PPUSH
32623: LD_STRING DA1-Lisa-1
32625: PPUSH
32626: CALL_OW 88
// if tpUnit = Donaldson then
32630: LD_VAR 0 1
32634: PUSH
32635: LD_EXP 5
32639: EQUAL
32640: IFFALSE 32654
// Say ( Donaldson , DA1-Don-1 ) ;
32642: LD_EXP 5
32646: PPUSH
32647: LD_STRING DA1-Don-1
32649: PPUSH
32650: CALL_OW 88
// if tpUnit = Cornel then
32654: LD_VAR 0 1
32658: PUSH
32659: LD_EXP 12
32663: EQUAL
32664: IFFALSE 32678
// Say ( Cornel , DA1-Corn-1 ) ;
32666: LD_EXP 12
32670: PPUSH
32671: LD_STRING DA1-Corn-1
32673: PPUSH
32674: CALL_OW 88
// if tpUnit = Denis then
32678: LD_VAR 0 1
32682: PUSH
32683: LD_EXP 8
32687: EQUAL
32688: IFFALSE 32702
// Say ( Denis , DA1-Den-1 ) ;
32690: LD_EXP 8
32694: PPUSH
32695: LD_STRING DA1-Den-1
32697: PPUSH
32698: CALL_OW 88
// if tpUnit = Bobby then
32702: LD_VAR 0 1
32706: PUSH
32707: LD_EXP 6
32711: EQUAL
32712: IFFALSE 32726
// Say ( Bobby , DA1-Bobby-1 ) ;
32714: LD_EXP 6
32718: PPUSH
32719: LD_STRING DA1-Bobby-1
32721: PPUSH
32722: CALL_OW 88
// if tpUnit = Gladstone then
32726: LD_VAR 0 1
32730: PUSH
32731: LD_EXP 10
32735: EQUAL
32736: IFFALSE 32750
// Say ( Gladstone , DA1-Glad-1 ) ;
32738: LD_EXP 10
32742: PPUSH
32743: LD_STRING DA1-Glad-1
32745: PPUSH
32746: CALL_OW 88
// if tpUnit = Cyrus then
32750: LD_VAR 0 1
32754: PUSH
32755: LD_EXP 7
32759: EQUAL
32760: IFFALSE 32774
// Say ( Cyrus , DA1-Cyrus-1 ) ;
32762: LD_EXP 7
32766: PPUSH
32767: LD_STRING DA1-Cyrus-1
32769: PPUSH
32770: CALL_OW 88
// if tpUnit = Stevens then
32774: LD_VAR 0 1
32778: PUSH
32779: LD_EXP 3
32783: EQUAL
32784: IFFALSE 32798
// Say ( Stevens , DA1-Huck-1 ) ;
32786: LD_EXP 3
32790: PPUSH
32791: LD_STRING DA1-Huck-1
32793: PPUSH
32794: CALL_OW 88
// if tpUnit = Baker then
32798: LD_VAR 0 1
32802: PUSH
32803: LD_EXP 21
32807: EQUAL
32808: IFFALSE 32822
// Say ( Baker , DA1-Huck-1 ) ;
32810: LD_EXP 21
32814: PPUSH
32815: LD_STRING DA1-Huck-1
32817: PPUSH
32818: CALL_OW 88
// if tpUnit = Brown then
32822: LD_VAR 0 1
32826: PUSH
32827: LD_EXP 9
32831: EQUAL
32832: IFFALSE 32846
// Say ( Brown , DA1-Brown-1 ) ;
32834: LD_EXP 9
32838: PPUSH
32839: LD_STRING DA1-Brown-1
32841: PPUSH
32842: CALL_OW 88
// if tpUnit = Gary then
32846: LD_VAR 0 1
32850: PUSH
32851: LD_EXP 13
32855: EQUAL
32856: IFFALSE 32870
// Say ( Gary , DA1-Gary-1 ) ;
32858: LD_EXP 13
32862: PPUSH
32863: LD_STRING DA1-Gary-1
32865: PPUSH
32866: CALL_OW 88
// if tpUnit = Connie then
32870: LD_VAR 0 1
32874: PUSH
32875: LD_EXP 16
32879: EQUAL
32880: IFFALSE 32894
// Say ( Connie , DA1-Con-1 ) ;
32882: LD_EXP 16
32886: PPUSH
32887: LD_STRING DA1-Con-1
32889: PPUSH
32890: CALL_OW 88
// if tpUnit = Kurt then
32894: LD_VAR 0 1
32898: PUSH
32899: LD_EXP 30
32903: EQUAL
32904: IFFALSE 32918
// Say ( Kurt , DA1-Kurt-1 ) ;
32906: LD_EXP 30
32910: PPUSH
32911: LD_STRING DA1-Kurt-1
32913: PPUSH
32914: CALL_OW 88
// if tpUnit = Kikuchi then
32918: LD_VAR 0 1
32922: PUSH
32923: LD_EXP 15
32927: EQUAL
32928: IFFALSE 32942
// Say ( Kikuchi , DA1-Yam-1 ) ;
32930: LD_EXP 15
32934: PPUSH
32935: LD_STRING DA1-Yam-1
32937: PPUSH
32938: CALL_OW 88
// if tpUnit = Frank then
32942: LD_VAR 0 1
32946: PUSH
32947: LD_EXP 14
32951: EQUAL
32952: IFFALSE 32966
// Say ( Frank , DA1-Frank-1 ) ;
32954: LD_EXP 14
32958: PPUSH
32959: LD_STRING DA1-Frank-1
32961: PPUSH
32962: CALL_OW 88
// if not tpUnit in heroes then
32966: LD_VAR 0 1
32970: PUSH
32971: LD_VAR 0 2
32975: IN
32976: NOT
32977: IFFALSE 33033
// begin if GetSex ( tpUnit ) = 1 then
32979: LD_VAR 0 1
32983: PPUSH
32984: CALL_OW 258
32988: PUSH
32989: LD_INT 1
32991: EQUAL
32992: IFFALSE 33006
// Say ( tpUnit , DA1-Sol1-1 ) ;
32994: LD_VAR 0 1
32998: PPUSH
32999: LD_STRING DA1-Sol1-1
33001: PPUSH
33002: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
33006: LD_VAR 0 1
33010: PPUSH
33011: CALL_OW 258
33015: PUSH
33016: LD_INT 2
33018: EQUAL
33019: IFFALSE 33033
// Say ( tpUnit , DA1-FSol1-1 ) ;
33021: LD_VAR 0 1
33025: PPUSH
33026: LD_STRING DA1-FSol1-1
33028: PPUSH
33029: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33033: LD_EXP 28
33037: PPUSH
33038: LD_STRING DA-Roth-1
33040: PPUSH
33041: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33045: LD_EXP 48
33049: PPUSH
33050: LD_STRING DA-Sim-1
33052: PPUSH
33053: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33057: LD_EXP 28
33061: PPUSH
33062: LD_STRING DA-Roth-2
33064: PPUSH
33065: CALL_OW 88
// if tpUnit = JMM then
33069: LD_VAR 0 1
33073: PUSH
33074: LD_EXP 1
33078: EQUAL
33079: IFFALSE 33112
// begin Say ( JMM , DA1-JMM-1a ) ;
33081: LD_EXP 1
33085: PPUSH
33086: LD_STRING DA1-JMM-1a
33088: PPUSH
33089: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33093: LD_EXP 28
33097: PPUSH
33098: LD_STRING DA-Roth-3a
33100: PPUSH
33101: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33105: LD_STRING JMMCaptured
33107: PPUSH
33108: CALL_OW 104
// end ; if tpUnit = Joan then
33112: LD_VAR 0 1
33116: PUSH
33117: LD_EXP 2
33121: EQUAL
33122: IFFALSE 33184
// begin Say ( Joan , DA1-Joan-1a ) ;
33124: LD_EXP 2
33128: PPUSH
33129: LD_STRING DA1-Joan-1a
33131: PPUSH
33132: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33136: LD_EXP 28
33140: PPUSH
33141: LD_STRING DA-Roth-3a
33143: PPUSH
33144: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33148: LD_EXP 2
33152: PPUSH
33153: LD_INT 4
33155: PPUSH
33156: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33160: LD_EXP 2
33164: PPUSH
33165: LD_INT 257
33167: PPUSH
33168: LD_INT 198
33170: PPUSH
33171: CALL_OW 111
// AddComHold ( Joan ) ;
33175: LD_EXP 2
33179: PPUSH
33180: CALL_OW 200
// end ; if tpUnit = Donaldson then
33184: LD_VAR 0 1
33188: PUSH
33189: LD_EXP 5
33193: EQUAL
33194: IFFALSE 33247
// begin Say ( Donaldson , DA1-Don-1a ) ;
33196: LD_EXP 5
33200: PPUSH
33201: LD_STRING DA1-Don-1a
33203: PPUSH
33204: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33208: LD_EXP 28
33212: PPUSH
33213: LD_STRING DA-Roth-3
33215: PPUSH
33216: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33220: LD_EXP 5
33224: PPUSH
33225: LD_INT 7
33227: PPUSH
33228: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33232: LD_EXP 5
33236: PPUSH
33237: LD_INT 240
33239: PPUSH
33240: LD_INT 188
33242: PPUSH
33243: CALL_OW 111
// end ; if tpUnit = Cornel then
33247: LD_VAR 0 1
33251: PUSH
33252: LD_EXP 12
33256: EQUAL
33257: IFFALSE 33319
// begin Say ( Cornel , DA1-Corn-1a ) ;
33259: LD_EXP 12
33263: PPUSH
33264: LD_STRING DA1-Corn-1a
33266: PPUSH
33267: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33271: LD_EXP 28
33275: PPUSH
33276: LD_STRING DA-Roth-3a
33278: PPUSH
33279: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33283: LD_EXP 12
33287: PPUSH
33288: LD_INT 4
33290: PPUSH
33291: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33295: LD_EXP 12
33299: PPUSH
33300: LD_INT 257
33302: PPUSH
33303: LD_INT 198
33305: PPUSH
33306: CALL_OW 111
// AddComHold ( Cornel ) ;
33310: LD_EXP 12
33314: PPUSH
33315: CALL_OW 200
// end ; if tpUnit = Denis then
33319: LD_VAR 0 1
33323: PUSH
33324: LD_EXP 8
33328: EQUAL
33329: IFFALSE 33382
// begin Say ( Denis , DA1-Den-1a ) ;
33331: LD_EXP 8
33335: PPUSH
33336: LD_STRING DA1-Den-1a
33338: PPUSH
33339: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33343: LD_EXP 28
33347: PPUSH
33348: LD_STRING DA-Roth-3
33350: PPUSH
33351: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33355: LD_EXP 8
33359: PPUSH
33360: LD_INT 7
33362: PPUSH
33363: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33367: LD_EXP 8
33371: PPUSH
33372: LD_INT 240
33374: PPUSH
33375: LD_INT 188
33377: PPUSH
33378: CALL_OW 111
// end ; if tpUnit = Bobby then
33382: LD_VAR 0 1
33386: PUSH
33387: LD_EXP 6
33391: EQUAL
33392: IFFALSE 33445
// begin Say ( Joan , DA1-Bobby-1a ) ;
33394: LD_EXP 2
33398: PPUSH
33399: LD_STRING DA1-Bobby-1a
33401: PPUSH
33402: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33406: LD_EXP 28
33410: PPUSH
33411: LD_STRING DA-Roth-3
33413: PPUSH
33414: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
33418: LD_EXP 6
33422: PPUSH
33423: LD_INT 7
33425: PPUSH
33426: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
33430: LD_EXP 6
33434: PPUSH
33435: LD_INT 240
33437: PPUSH
33438: LD_INT 188
33440: PPUSH
33441: CALL_OW 111
// end ; if tpUnit = Gladstone then
33445: LD_VAR 0 1
33449: PUSH
33450: LD_EXP 10
33454: EQUAL
33455: IFFALSE 33517
// begin Say ( Gladstone , DA1-Glad-1a ) ;
33457: LD_EXP 10
33461: PPUSH
33462: LD_STRING DA1-Glad-1a
33464: PPUSH
33465: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33469: LD_EXP 28
33473: PPUSH
33474: LD_STRING DA-Roth-3a
33476: PPUSH
33477: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
33481: LD_EXP 10
33485: PPUSH
33486: LD_INT 4
33488: PPUSH
33489: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
33493: LD_EXP 10
33497: PPUSH
33498: LD_INT 257
33500: PPUSH
33501: LD_INT 198
33503: PPUSH
33504: CALL_OW 111
// AddComHold ( Gladstone ) ;
33508: LD_EXP 10
33512: PPUSH
33513: CALL_OW 200
// end ; if tpUnit = Cyrus then
33517: LD_VAR 0 1
33521: PUSH
33522: LD_EXP 7
33526: EQUAL
33527: IFFALSE 33589
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33529: LD_EXP 7
33533: PPUSH
33534: LD_STRING DA1-Cyrus-1a
33536: PPUSH
33537: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33541: LD_EXP 28
33545: PPUSH
33546: LD_STRING DA-Roth-3a
33548: PPUSH
33549: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33553: LD_EXP 7
33557: PPUSH
33558: LD_INT 4
33560: PPUSH
33561: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33565: LD_EXP 7
33569: PPUSH
33570: LD_INT 257
33572: PPUSH
33573: LD_INT 198
33575: PPUSH
33576: CALL_OW 111
// AddComHold ( Cyrus ) ;
33580: LD_EXP 7
33584: PPUSH
33585: CALL_OW 200
// end ; if tpUnit = Stevens then
33589: LD_VAR 0 1
33593: PUSH
33594: LD_EXP 3
33598: EQUAL
33599: IFFALSE 33652
// begin Say ( Stevens , DA1-Huck-1a ) ;
33601: LD_EXP 3
33605: PPUSH
33606: LD_STRING DA1-Huck-1a
33608: PPUSH
33609: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33613: LD_EXP 28
33617: PPUSH
33618: LD_STRING DA-Roth-3
33620: PPUSH
33621: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
33625: LD_EXP 3
33629: PPUSH
33630: LD_INT 7
33632: PPUSH
33633: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
33637: LD_EXP 3
33641: PPUSH
33642: LD_INT 240
33644: PPUSH
33645: LD_INT 188
33647: PPUSH
33648: CALL_OW 111
// end ; if tpUnit = Baker then
33652: LD_VAR 0 1
33656: PUSH
33657: LD_EXP 21
33661: EQUAL
33662: IFFALSE 33715
// begin Say ( Baker , DA1-Huck-1a ) ;
33664: LD_EXP 21
33668: PPUSH
33669: LD_STRING DA1-Huck-1a
33671: PPUSH
33672: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33676: LD_EXP 28
33680: PPUSH
33681: LD_STRING DA-Roth-3
33683: PPUSH
33684: CALL_OW 88
// SetSide ( Baker , 7 ) ;
33688: LD_EXP 21
33692: PPUSH
33693: LD_INT 7
33695: PPUSH
33696: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
33700: LD_EXP 21
33704: PPUSH
33705: LD_INT 240
33707: PPUSH
33708: LD_INT 188
33710: PPUSH
33711: CALL_OW 111
// end ; if tpUnit = Brown then
33715: LD_VAR 0 1
33719: PUSH
33720: LD_EXP 9
33724: EQUAL
33725: IFFALSE 33778
// begin Say ( Cyrus , DA1-Brown-1a ) ;
33727: LD_EXP 7
33731: PPUSH
33732: LD_STRING DA1-Brown-1a
33734: PPUSH
33735: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33739: LD_EXP 28
33743: PPUSH
33744: LD_STRING DA-Roth-3
33746: PPUSH
33747: CALL_OW 88
// SetSide ( Brown , 7 ) ;
33751: LD_EXP 9
33755: PPUSH
33756: LD_INT 7
33758: PPUSH
33759: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
33763: LD_EXP 9
33767: PPUSH
33768: LD_INT 240
33770: PPUSH
33771: LD_INT 188
33773: PPUSH
33774: CALL_OW 111
// end ; if tpUnit = Gary then
33778: LD_VAR 0 1
33782: PUSH
33783: LD_EXP 13
33787: EQUAL
33788: IFFALSE 33850
// begin Say ( Gary , DA1-Gary-1a ) ;
33790: LD_EXP 13
33794: PPUSH
33795: LD_STRING DA1-Gary-1a
33797: PPUSH
33798: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33802: LD_EXP 28
33806: PPUSH
33807: LD_STRING DA-Roth-3a
33809: PPUSH
33810: CALL_OW 88
// SetSide ( Gary , 4 ) ;
33814: LD_EXP 13
33818: PPUSH
33819: LD_INT 4
33821: PPUSH
33822: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
33826: LD_EXP 13
33830: PPUSH
33831: LD_INT 257
33833: PPUSH
33834: LD_INT 198
33836: PPUSH
33837: CALL_OW 111
// AddComHold ( Gary ) ;
33841: LD_EXP 13
33845: PPUSH
33846: CALL_OW 200
// end ; if tpUnit = Cyrus then
33850: LD_VAR 0 1
33854: PUSH
33855: LD_EXP 7
33859: EQUAL
33860: IFFALSE 33922
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
33862: LD_EXP 7
33866: PPUSH
33867: LD_STRING DA1-Cyrus-1a
33869: PPUSH
33870: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33874: LD_EXP 28
33878: PPUSH
33879: LD_STRING DA-Roth-3a
33881: PPUSH
33882: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
33886: LD_EXP 7
33890: PPUSH
33891: LD_INT 4
33893: PPUSH
33894: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
33898: LD_EXP 7
33902: PPUSH
33903: LD_INT 257
33905: PPUSH
33906: LD_INT 198
33908: PPUSH
33909: CALL_OW 111
// AddComHold ( Cyrus ) ;
33913: LD_EXP 7
33917: PPUSH
33918: CALL_OW 200
// end ; if tpUnit = Connie then
33922: LD_VAR 0 1
33926: PUSH
33927: LD_EXP 16
33931: EQUAL
33932: IFFALSE 33994
// begin Say ( Connie , DA1-Con-1a ) ;
33934: LD_EXP 16
33938: PPUSH
33939: LD_STRING DA1-Con-1a
33941: PPUSH
33942: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33946: LD_EXP 28
33950: PPUSH
33951: LD_STRING DA-Roth-3a
33953: PPUSH
33954: CALL_OW 88
// SetSide ( Connie , 4 ) ;
33958: LD_EXP 16
33962: PPUSH
33963: LD_INT 4
33965: PPUSH
33966: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
33970: LD_EXP 16
33974: PPUSH
33975: LD_INT 257
33977: PPUSH
33978: LD_INT 198
33980: PPUSH
33981: CALL_OW 111
// AddComHold ( Connie ) ;
33985: LD_EXP 16
33989: PPUSH
33990: CALL_OW 200
// end ; if tpUnit = Kurt then
33994: LD_VAR 0 1
33998: PUSH
33999: LD_EXP 30
34003: EQUAL
34004: IFFALSE 34066
// begin Say ( Kurt , DA1-Kurt-1a ) ;
34006: LD_EXP 30
34010: PPUSH
34011: LD_STRING DA1-Kurt-1a
34013: PPUSH
34014: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34018: LD_EXP 28
34022: PPUSH
34023: LD_STRING DA-Roth-3a
34025: PPUSH
34026: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
34030: LD_EXP 30
34034: PPUSH
34035: LD_INT 4
34037: PPUSH
34038: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34042: LD_EXP 30
34046: PPUSH
34047: LD_INT 257
34049: PPUSH
34050: LD_INT 198
34052: PPUSH
34053: CALL_OW 111
// AddComHold ( Kurt ) ;
34057: LD_EXP 30
34061: PPUSH
34062: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34066: LD_VAR 0 1
34070: PUSH
34071: LD_EXP 15
34075: EQUAL
34076: IFFALSE 34129
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34078: LD_EXP 15
34082: PPUSH
34083: LD_STRING DA1-Yam-1a
34085: PPUSH
34086: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34090: LD_EXP 28
34094: PPUSH
34095: LD_STRING DA-Roth-3
34097: PPUSH
34098: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34102: LD_EXP 15
34106: PPUSH
34107: LD_INT 7
34109: PPUSH
34110: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34114: LD_EXP 15
34118: PPUSH
34119: LD_INT 240
34121: PPUSH
34122: LD_INT 188
34124: PPUSH
34125: CALL_OW 111
// end ; if tpUnit = Frank then
34129: LD_VAR 0 1
34133: PUSH
34134: LD_EXP 14
34138: EQUAL
34139: IFFALSE 34201
// begin Say ( Frank , DA1-Frank-1a ) ;
34141: LD_EXP 14
34145: PPUSH
34146: LD_STRING DA1-Frank-1a
34148: PPUSH
34149: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34153: LD_EXP 28
34157: PPUSH
34158: LD_STRING DA-Roth-3a
34160: PPUSH
34161: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34165: LD_EXP 14
34169: PPUSH
34170: LD_INT 4
34172: PPUSH
34173: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34177: LD_EXP 14
34181: PPUSH
34182: LD_INT 257
34184: PPUSH
34185: LD_INT 198
34187: PPUSH
34188: CALL_OW 111
// AddComHold ( Frank ) ;
34192: LD_EXP 14
34196: PPUSH
34197: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34201: LD_EXP 64
34205: PUSH
34206: LD_INT 0
34208: EQUAL
34209: IFFALSE 34255
// begin Say ( JMM , DAa-JMM-1 ) ;
34211: LD_EXP 1
34215: PPUSH
34216: LD_STRING DAa-JMM-1
34218: PPUSH
34219: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34223: LD_EXP 1
34227: PPUSH
34228: LD_STRING DAa-JMM-1a
34230: PPUSH
34231: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34235: LD_EXP 1
34239: PPUSH
34240: LD_STRING DAa-JMM-1b
34242: PPUSH
34243: CALL_OW 88
// allianceFirstContact = 1 ;
34247: LD_ADDR_EXP 64
34251: PUSH
34252: LD_INT 1
34254: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34255: LD_VAR 0 1
34259: PUSH
34260: LD_VAR 0 2
34264: IN
34265: NOT
34266: IFFALSE 34576
// begin rnd = Rand ( 1 , 2 ) ;
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_INT 1
34275: PPUSH
34276: LD_INT 2
34278: PPUSH
34279: CALL_OW 12
34283: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34284: LD_VAR 0 1
34288: PPUSH
34289: CALL_OW 258
34293: PUSH
34294: LD_INT 1
34296: EQUAL
34297: IFFALSE 34430
// begin if rnd = 1 then
34299: LD_VAR 0 3
34303: PUSH
34304: LD_INT 1
34306: EQUAL
34307: IFFALSE 34369
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34309: LD_VAR 0 1
34313: PPUSH
34314: LD_STRING DA1-Sol1-1a
34316: PPUSH
34317: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34321: LD_EXP 28
34325: PPUSH
34326: LD_STRING DA-Roth-3a
34328: PPUSH
34329: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34333: LD_VAR 0 1
34337: PPUSH
34338: LD_INT 4
34340: PPUSH
34341: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34345: LD_VAR 0 1
34349: PPUSH
34350: LD_INT 257
34352: PPUSH
34353: LD_INT 198
34355: PPUSH
34356: CALL_OW 111
// AddComHold ( tpUnit ) ;
34360: LD_VAR 0 1
34364: PPUSH
34365: CALL_OW 200
// end ; if rnd = 2 then
34369: LD_VAR 0 3
34373: PUSH
34374: LD_INT 2
34376: EQUAL
34377: IFFALSE 34430
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34379: LD_VAR 0 1
34383: PPUSH
34384: LD_STRING DA1-Sol1-1b
34386: PPUSH
34387: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34391: LD_EXP 28
34395: PPUSH
34396: LD_STRING DA-Roth-3
34398: PPUSH
34399: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34403: LD_VAR 0 1
34407: PPUSH
34408: LD_INT 7
34410: PPUSH
34411: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34415: LD_VAR 0 1
34419: PPUSH
34420: LD_INT 240
34422: PPUSH
34423: LD_INT 188
34425: PPUSH
34426: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
34430: LD_VAR 0 1
34434: PPUSH
34435: CALL_OW 258
34439: PUSH
34440: LD_INT 2
34442: EQUAL
34443: IFFALSE 34576
// begin if rnd = 1 then
34445: LD_VAR 0 3
34449: PUSH
34450: LD_INT 1
34452: EQUAL
34453: IFFALSE 34515
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
34455: LD_VAR 0 1
34459: PPUSH
34460: LD_STRING DA1-FSol1-1a
34462: PPUSH
34463: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34467: LD_EXP 28
34471: PPUSH
34472: LD_STRING DA-Roth-3a
34474: PPUSH
34475: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34479: LD_VAR 0 1
34483: PPUSH
34484: LD_INT 4
34486: PPUSH
34487: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34491: LD_VAR 0 1
34495: PPUSH
34496: LD_INT 257
34498: PPUSH
34499: LD_INT 198
34501: PPUSH
34502: CALL_OW 111
// AddComHold ( tpUnit ) ;
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 200
// end ; if rnd = 2 then
34515: LD_VAR 0 3
34519: PUSH
34520: LD_INT 2
34522: EQUAL
34523: IFFALSE 34576
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
34525: LD_VAR 0 1
34529: PPUSH
34530: LD_STRING DA1-FSol1-1b
34532: PPUSH
34533: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34537: LD_EXP 28
34541: PPUSH
34542: LD_STRING DA-Roth-3
34544: PPUSH
34545: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34549: LD_VAR 0 1
34553: PPUSH
34554: LD_INT 7
34556: PPUSH
34557: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34561: LD_VAR 0 1
34565: PPUSH
34566: LD_INT 240
34568: PPUSH
34569: LD_INT 188
34571: PPUSH
34572: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
34576: LD_INT 1
34578: PPUSH
34579: LD_INT 7
34581: PPUSH
34582: LD_INT 2
34584: PPUSH
34585: LD_INT 1
34587: PPUSH
34588: CALL_OW 80
// InGameOff ;
34592: CALL_OW 9
// enable ;
34596: ENABLE
// end ;
34597: PPOPN 3
34599: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
34600: LD_EXP 97
34604: PUSH
34605: LD_INT 94570
34607: GREATEREQUAL
34608: IFFALSE 34927
34610: GO 34612
34612: DISABLE
// begin DialogueOn ;
34613: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
34617: LD_INT 22
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 23
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 26
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 25
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 25
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 25
34672: PUSH
34673: LD_INT 3
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 25
34682: PUSH
34683: LD_INT 4
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 25
34692: PUSH
34693: LD_INT 5
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 25
34702: PUSH
34703: LD_INT 8
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: PPUSH
34725: CALL_OW 69
34729: PPUSH
34730: LD_STRING D11-Sol1-1
34732: PPUSH
34733: LD_STRING D5-FSol1-1
34735: PPUSH
34736: CALL 6920 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
34740: LD_EXP 26
34744: PPUSH
34745: LD_STRING D11-Pla-1
34747: PPUSH
34748: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
34752: LD_EXP 37
34756: PPUSH
34757: LD_STRING D11-Kov-1
34759: PPUSH
34760: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
34764: LD_EXP 26
34768: PPUSH
34769: LD_STRING D11-Pla-2
34771: PPUSH
34772: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
34776: LD_INT 22
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 23
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 26
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 25
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 25
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 25
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 25
34841: PUSH
34842: LD_INT 4
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 25
34851: PUSH
34852: LD_INT 5
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 25
34861: PUSH
34862: LD_INT 8
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: PPUSH
34884: CALL_OW 69
34888: PPUSH
34889: LD_STRING D11-Sol1-2
34891: PPUSH
34892: LD_STRING D5-FSol1-1
34894: PPUSH
34895: CALL 6920 0 3
// Say ( JMM , D11-JMM-2 ) ;
34899: LD_EXP 1
34903: PPUSH
34904: LD_STRING D11-JMM-2
34906: PPUSH
34907: CALL_OW 88
// DialogueOff ;
34911: CALL_OW 7
// PreapreMehBehs ;
34915: CALL 5745 0 0
// missionStage = 5 ;
34919: LD_ADDR_EXP 101
34923: PUSH
34924: LD_INT 5
34926: ST_TO_ADDR
// end ;
34927: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
34928: LD_EXP 97
34932: PUSH
34933: LD_INT 105070
34935: GREATEREQUAL
34936: IFFALSE 35330
34938: GO 34940
34940: DISABLE
34941: LD_INT 0
34943: PPUSH
34944: PPUSH
// begin time = 0 0$00 ;
34945: LD_ADDR_VAR 0 2
34949: PUSH
34950: LD_INT 0
34952: ST_TO_ADDR
// DialogueOn ;
34953: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
34957: LD_EXP 26
34961: PPUSH
34962: LD_STRING D15-Pla-1
34964: PPUSH
34965: CALL_OW 94
// dec = Query ( Q15a ) ;
34969: LD_ADDR_VAR 0 1
34973: PUSH
34974: LD_STRING Q15a
34976: PPUSH
34977: CALL_OW 97
34981: ST_TO_ADDR
// if dec = 1 then
34982: LD_VAR 0 1
34986: PUSH
34987: LD_INT 1
34989: EQUAL
34990: IFFALSE 35011
// begin Say ( JMM , D15a-JMM-1 ) ;
34992: LD_EXP 1
34996: PPUSH
34997: LD_STRING D15a-JMM-1
34999: PPUSH
35000: CALL_OW 88
// YouLost ( Surrender ) ;
35004: LD_STRING Surrender
35006: PPUSH
35007: CALL_OW 104
// end ; if dec = 2 then
35011: LD_VAR 0 1
35015: PUSH
35016: LD_INT 2
35018: EQUAL
35019: IFFALSE 35049
// begin Say ( JMM , D15b-JMM-1 ) ;
35021: LD_EXP 1
35025: PPUSH
35026: LD_STRING D15b-JMM-1
35028: PPUSH
35029: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35033: LD_EXP 26
35037: PPUSH
35038: LD_STRING D15b-Pla-1
35040: PPUSH
35041: CALL_OW 94
// DialogueOff ;
35045: CALL_OW 7
// end ; if dec = 3 then
35049: LD_VAR 0 1
35053: PUSH
35054: LD_INT 3
35056: EQUAL
35057: IFFALSE 35133
// begin Say ( JMM , D15c-JMM-1 ) ;
35059: LD_EXP 1
35063: PPUSH
35064: LD_STRING D15c-JMM-1
35066: PPUSH
35067: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35071: LD_EXP 26
35075: PPUSH
35076: LD_STRING D15c-Pla-1
35078: PPUSH
35079: CALL_OW 94
// DialogueOff ;
35083: CALL_OW 7
// wait ( 0 0$15 ) ;
35087: LD_INT 525
35089: PPUSH
35090: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35094: LD_EXP 26
35098: PPUSH
35099: LD_STRING D18-Pla-1
35101: PPUSH
35102: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35106: LD_INT 273
35108: PPUSH
35109: LD_EXP 1
35113: PPUSH
35114: CALL_OW 250
35118: PPUSH
35119: LD_EXP 1
35123: PPUSH
35124: CALL_OW 251
35128: PPUSH
35129: CALL_OW 116
// end ; if dec = 4 then
35133: LD_VAR 0 1
35137: PUSH
35138: LD_INT 4
35140: EQUAL
35141: IFFALSE 35179
// begin Say ( JMM , D15d-JMM-1 ) ;
35143: LD_EXP 1
35147: PPUSH
35148: LD_STRING D15d-JMM-1
35150: PPUSH
35151: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35155: LD_EXP 26
35159: PPUSH
35160: LD_STRING D15d-Pla-1
35162: PPUSH
35163: CALL_OW 94
// DialogueOff ;
35167: CALL_OW 7
// missionStage = 6 ;
35171: LD_ADDR_EXP 101
35175: PUSH
35176: LD_INT 6
35178: ST_TO_ADDR
// end ; if dec = 2 then
35179: LD_VAR 0 1
35183: PUSH
35184: LD_INT 2
35186: EQUAL
35187: IFFALSE 35260
// begin repeat wait ( 0 0$01 ) ;
35189: LD_INT 35
35191: PPUSH
35192: CALL_OW 67
// time = time + 0 0$01 ;
35196: LD_ADDR_VAR 0 2
35200: PUSH
35201: LD_VAR 0 2
35205: PUSH
35206: LD_INT 35
35208: PLUS
35209: ST_TO_ADDR
// until time >= 3 3$00 ;
35210: LD_VAR 0 2
35214: PUSH
35215: LD_INT 6300
35217: GREATEREQUAL
35218: IFFALSE 35189
// DialogueOn ;
35220: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35224: LD_EXP 1
35228: PPUSH
35229: LD_STRING D15d-JMM-1a
35231: PPUSH
35232: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35236: LD_EXP 26
35240: PPUSH
35241: LD_STRING D15d-Pla-1
35243: PPUSH
35244: CALL_OW 94
// DialogueOff ;
35248: CALL_OW 7
// missionStage = 6 ;
35252: LD_ADDR_EXP 101
35256: PUSH
35257: LD_INT 6
35259: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35260: LD_EXP 53
35264: PPUSH
35265: CALL_OW 302
35269: PUSH
35270: LD_EXP 53
35274: PPUSH
35275: CALL_OW 255
35279: PUSH
35280: LD_INT 1
35282: EQUAL
35283: AND
35284: IFFALSE 35330
// begin DialogueOn ;
35286: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35290: LD_EXP 1
35294: PPUSH
35295: LD_STRING D16-JMM-1
35297: PPUSH
35298: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35302: LD_EXP 53
35306: PPUSH
35307: LD_STRING D16-Friend-1
35309: PPUSH
35310: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35314: LD_EXP 1
35318: PPUSH
35319: LD_STRING D16-JMM-2
35321: PPUSH
35322: CALL_OW 88
// DialogueOff ;
35326: CALL_OW 7
// end ; end ;
35330: PPOPN 2
35332: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35333: LD_EXP 101
35337: PUSH
35338: LD_INT 6
35340: EQUAL
35341: PUSH
35342: LD_EXP 53
35346: PPUSH
35347: CALL_OW 302
35351: AND
35352: PUSH
35353: LD_EXP 53
35357: PPUSH
35358: CALL_OW 255
35362: PUSH
35363: LD_INT 1
35365: EQUAL
35366: AND
35367: IFFALSE 36004
35369: GO 35371
35371: DISABLE
35372: LD_INT 0
35374: PPUSH
// begin DialogueOn ;
35375: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35379: LD_INT 22
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: PUSH
35392: LD_INT 34
35394: PUSH
35395: LD_INT 8
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 35
35404: PUSH
35405: LD_INT 8
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PPUSH
35421: CALL_OW 69
35425: PUSH
35426: LD_INT 0
35428: GREATER
35429: IFFALSE 35453
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
35431: LD_EXP 26
35435: PPUSH
35436: LD_STRING D16c-Pla-1
35438: PPUSH
35439: CALL_OW 94
// playerHaveRocket = 1 ;
35443: LD_ADDR_EXP 100
35447: PUSH
35448: LD_INT 1
35450: ST_TO_ADDR
// end else
35451: GO 35912
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
35453: LD_EXP 26
35457: PPUSH
35458: LD_STRING D16a-Pla-1
35460: PPUSH
35461: CALL_OW 94
// if IsOK ( Stevens ) then
35465: LD_EXP 3
35469: PPUSH
35470: CALL_OW 302
35474: IFFALSE 35490
// begin Say ( Stevens , D16a-Huck-1 ) ;
35476: LD_EXP 3
35480: PPUSH
35481: LD_STRING D16a-Huck-1
35483: PPUSH
35484: CALL_OW 88
// end else
35488: GO 35638
// begin if IsOk ( Baker ) then
35490: LD_EXP 21
35494: PPUSH
35495: CALL_OW 302
35499: IFFALSE 35515
// begin Say ( Baker , D16a-Huck-1 ) ;
35501: LD_EXP 21
35505: PPUSH
35506: LD_STRING D16a-Huck-1
35508: PPUSH
35509: CALL_OW 88
// end else
35513: GO 35638
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
35515: LD_INT 22
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 23
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 26
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 25
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 25
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 25
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 25
35580: PUSH
35581: LD_INT 4
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 25
35590: PUSH
35591: LD_INT 5
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 25
35600: PUSH
35601: LD_INT 8
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: PPUSH
35623: CALL_OW 69
35627: PPUSH
35628: LD_STRING D16a-Sol1-1
35630: PPUSH
35631: LD_STRING D5-FSol1-1
35633: PPUSH
35634: CALL 6920 0 3
// end ; end ; wait ( 0 0$30 ) ;
35638: LD_INT 1050
35640: PPUSH
35641: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35645: LD_EXP 26
35649: PPUSH
35650: LD_STRING D18-Pla-1
35652: PPUSH
35653: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35657: LD_ADDR_VAR 0 1
35661: PUSH
35662: LD_INT 22
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 21
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 23
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: LD_INT 30
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 30
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: LIST
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: PPUSH
35726: CALL_OW 69
35730: ST_TO_ADDR
// if rocketTarget = 0 then
35731: LD_VAR 0 1
35735: PUSH
35736: LD_INT 0
35738: EQUAL
35739: IFFALSE 35815
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
35741: LD_ADDR_VAR 0 1
35745: PUSH
35746: LD_INT 22
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 21
35758: PUSH
35759: LD_INT 3
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 23
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: LD_INT 30
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 30
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: PPUSH
35810: CALL_OW 69
35814: ST_TO_ADDR
// if rocketTarget = 0 then
35815: LD_VAR 0 1
35819: PUSH
35820: LD_INT 0
35822: EQUAL
35823: IFFALSE 35877
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
35825: LD_ADDR_VAR 0 1
35829: PUSH
35830: LD_INT 22
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 21
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 23
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 50
35862: PUSH
35863: EMPTY
35864: LIST
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: PPUSH
35872: CALL_OW 69
35876: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
35877: LD_INT 273
35879: PPUSH
35880: LD_VAR 0 1
35884: PUSH
35885: LD_INT 1
35887: ARRAY
35888: PPUSH
35889: CALL_OW 250
35893: PPUSH
35894: LD_VAR 0 1
35898: PUSH
35899: LD_INT 1
35901: ARRAY
35902: PPUSH
35903: CALL_OW 251
35907: PPUSH
35908: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
35912: LD_EXP 1
35916: PPUSH
35917: LD_STRING D16a-JMM-1a
35919: PPUSH
35920: CALL_OW 88
// DialogueOff ;
35924: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
35928: LD_EXP 53
35932: PPUSH
35933: LD_INT 3
35935: PPUSH
35936: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
35940: LD_EXP 53
35944: PPUSH
35945: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
35949: LD_EXP 53
35953: PPUSH
35954: CALL_OW 121
// wait ( 0 0$1 ) ;
35958: LD_INT 35
35960: PPUSH
35961: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
35965: LD_EXP 53
35969: PPUSH
35970: LD_INT 18
35972: PPUSH
35973: CALL_OW 113
// wait ( 0 0$3 ) ;
35977: LD_INT 105
35979: PPUSH
35980: CALL_OW 67
// DialogueOn ;
35984: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
35988: LD_EXP 1
35992: PPUSH
35993: LD_STRING D16a-JMM-1
35995: PPUSH
35996: CALL_OW 88
// DialogueOff ;
36000: CALL_OW 7
// end ;
36004: PPOPN 1
36006: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
36007: LD_EXP 53
36011: PPUSH
36012: CALL_OW 255
36016: PUSH
36017: LD_INT 3
36019: EQUAL
36020: IFFALSE 36127
36022: GO 36024
36024: DISABLE
36025: LD_INT 0
36027: PPUSH
// begin enable ;
36028: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
36029: LD_ADDR_VAR 0 1
36033: PUSH
36034: LD_INT 22
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 21
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 56
36056: PUSH
36057: EMPTY
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: PPUSH
36065: CALL_OW 69
36069: PUSH
36070: FOR_IN
36071: IFFALSE 36125
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36073: LD_VAR 0 1
36077: PPUSH
36078: LD_EXP 53
36082: PPUSH
36083: CALL_OW 296
36087: PUSH
36088: LD_INT 8
36090: LESS
36091: IFFALSE 36123
// begin disable ;
36093: DISABLE
// DialogueOn ;
36094: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36098: LD_EXP 53
36102: PPUSH
36103: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36107: LD_EXP 53
36111: PPUSH
36112: LD_STRING D16a-Friend-1
36114: PPUSH
36115: CALL_OW 88
// DialogueOff ;
36119: CALL_OW 7
// end ; end ;
36123: GO 36070
36125: POP
36126: POP
// end ;
36127: PPOPN 1
36129: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36130: LD_EXP 101
36134: PUSH
36135: LD_INT 6
36137: EQUAL
36138: PUSH
36139: LD_EXP 53
36143: PPUSH
36144: CALL_OW 255
36148: PUSH
36149: LD_INT 1
36151: EQUAL
36152: NOT
36153: AND
36154: IFFALSE 36534
36156: GO 36158
36158: DISABLE
36159: LD_INT 0
36161: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36162: LD_INT 22
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 34
36177: PUSH
36178: LD_INT 8
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 35
36187: PUSH
36188: LD_INT 8
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PPUSH
36204: CALL_OW 69
36208: PUSH
36209: LD_INT 0
36211: GREATER
36212: IFFALSE 36236
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36214: LD_EXP 26
36218: PPUSH
36219: LD_STRING D16c-Pla-1
36221: PPUSH
36222: CALL_OW 94
// playerHaveRocket = 1 ;
36226: LD_ADDR_EXP 100
36230: PUSH
36231: LD_INT 1
36233: ST_TO_ADDR
// end else
36234: GO 36534
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36236: LD_EXP 26
36240: PPUSH
36241: LD_STRING D16b-Pla-1
36243: PPUSH
36244: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36248: LD_EXP 1
36252: PPUSH
36253: LD_STRING D16b-JMM-1
36255: PPUSH
36256: CALL_OW 88
// wait ( 0 0$15 ) ;
36260: LD_INT 525
36262: PPUSH
36263: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36267: LD_EXP 26
36271: PPUSH
36272: LD_STRING D18-Pla-1
36274: PPUSH
36275: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36279: LD_ADDR_VAR 0 1
36283: PUSH
36284: LD_INT 22
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 21
36296: PUSH
36297: LD_INT 3
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 23
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 30
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 30
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: PPUSH
36348: CALL_OW 69
36352: ST_TO_ADDR
// if rocketTarget = 0 then
36353: LD_VAR 0 1
36357: PUSH
36358: LD_INT 0
36360: EQUAL
36361: IFFALSE 36437
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36363: LD_ADDR_VAR 0 1
36367: PUSH
36368: LD_INT 22
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 21
36380: PUSH
36381: LD_INT 3
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 23
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 30
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 30
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: LIST
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: PPUSH
36432: CALL_OW 69
36436: ST_TO_ADDR
// if rocketTarget = 0 then
36437: LD_VAR 0 1
36441: PUSH
36442: LD_INT 0
36444: EQUAL
36445: IFFALSE 36499
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36447: LD_ADDR_VAR 0 1
36451: PUSH
36452: LD_INT 22
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 21
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 23
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 50
36484: PUSH
36485: EMPTY
36486: LIST
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: PPUSH
36494: CALL_OW 69
36498: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36499: LD_INT 273
36501: PPUSH
36502: LD_VAR 0 1
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: CALL_OW 250
36515: PPUSH
36516: LD_VAR 0 1
36520: PUSH
36521: LD_INT 1
36523: ARRAY
36524: PPUSH
36525: CALL_OW 251
36529: PPUSH
36530: CALL_OW 116
// end ; end ;
36534: PPOPN 1
36536: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
36537: LD_EXP 97
36541: PUSH
36542: LD_INT 168070
36544: GREATEREQUAL
36545: PUSH
36546: LD_EXP 101
36550: PUSH
36551: LD_INT 6
36553: GREATEREQUAL
36554: AND
36555: PUSH
36556: LD_EXP 85
36560: PUSH
36561: LD_INT 1
36563: EQUAL
36564: AND
36565: IFFALSE 36595
36567: GO 36569
36569: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
36570: LD_EXP 26
36574: PPUSH
36575: LD_STRING D18-Pla-1
36577: PPUSH
36578: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
36582: LD_INT 273
36584: PPUSH
36585: LD_INT 244
36587: PPUSH
36588: LD_INT 187
36590: PPUSH
36591: CALL_OW 116
// end ;
36595: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
36596: LD_EXP 101
36600: PUSH
36601: LD_INT 5
36603: GREATEREQUAL
36604: IFFALSE 36797
36606: GO 36608
36608: DISABLE
36609: LD_INT 0
36611: PPUSH
// begin enable ;
36612: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
36613: LD_ADDR_VAR 0 1
36617: PUSH
36618: LD_INT 22
36620: PUSH
36621: LD_INT 6
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 30
36630: PUSH
36631: LD_INT 37
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 57
36640: PUSH
36641: EMPTY
36642: LIST
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: PPUSH
36649: CALL_OW 69
36653: PUSH
36654: FOR_IN
36655: IFFALSE 36709
// begin if See ( 1 , i ) then
36657: LD_INT 1
36659: PPUSH
36660: LD_VAR 0 1
36664: PPUSH
36665: CALL_OW 292
36669: IFFALSE 36707
// begin disable ;
36671: DISABLE
// DialogueOn ;
36672: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
36676: LD_EXP 1
36680: PPUSH
36681: LD_STRING D17a-JMM-1
36683: PPUSH
36684: CALL_OW 88
// DialogueOff ;
36688: CALL_OW 7
// behemothStatus = 1 ;
36692: LD_ADDR_EXP 60
36696: PUSH
36697: LD_INT 1
36699: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
36700: LD_STRING M4a
36702: PPUSH
36703: CALL_OW 337
// end ; end ;
36707: GO 36654
36709: POP
36710: POP
// for i in ruBehs do
36711: LD_ADDR_VAR 0 1
36715: PUSH
36716: LD_EXP 59
36720: PUSH
36721: FOR_IN
36722: IFFALSE 36795
// begin if See ( 1 , i ) then
36724: LD_INT 1
36726: PPUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 292
36736: IFFALSE 36793
// begin disable ;
36738: DISABLE
// DialogueOn ;
36739: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
36743: LD_EXP 1
36747: PPUSH
36748: LD_STRING D17b-JMM-1
36750: PPUSH
36751: CALL_OW 88
// DialogueOff ;
36755: CALL_OW 7
// behemothStatus = 0 ;
36759: LD_ADDR_EXP 60
36763: PUSH
36764: LD_INT 0
36766: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
36767: LD_STRING M4b
36769: PPUSH
36770: CALL_OW 337
// wait ( 0 0$2 ) ;
36774: LD_INT 70
36776: PPUSH
36777: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36781: LD_EXP 26
36785: PPUSH
36786: LD_STRING D18-Pla-1
36788: PPUSH
36789: CALL_OW 88
// end ; end ;
36793: GO 36721
36795: POP
36796: POP
// end ;
36797: PPOPN 1
36799: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
36800: LD_EXP 26
36804: PPUSH
36805: CALL_OW 301
36809: PUSH
36810: LD_EXP 27
36814: PPUSH
36815: CALL_OW 301
36819: AND
36820: PUSH
36821: LD_INT 22
36823: PUSH
36824: LD_INT 3
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 21
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 50
36843: PUSH
36844: EMPTY
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: PPUSH
36852: CALL_OW 69
36856: PUSH
36857: LD_INT 7
36859: PUSH
36860: LD_INT 8
36862: PUSH
36863: LD_INT 9
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: PUSH
36871: LD_OWVAR 67
36875: ARRAY
36876: LESS
36877: AND
36878: IFFALSE 37554
36880: GO 36882
36882: DISABLE
36883: LD_INT 0
36885: PPUSH
36886: PPUSH
36887: PPUSH
// begin russianAI = 0 ;
36888: LD_ADDR_EXP 86
36892: PUSH
36893: LD_INT 0
36895: ST_TO_ADDR
// russianEscape = 1 ;
36896: LD_ADDR_EXP 90
36900: PUSH
36901: LD_INT 1
36903: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
36904: LD_INT 1
36906: PPUSH
36907: LD_INT 3
36909: PPUSH
36910: LD_INT 1
36912: PPUSH
36913: LD_INT 1
36915: PPUSH
36916: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
36920: LD_ADDR_VAR 0 1
36924: PUSH
36925: LD_INT 22
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 21
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 24
36947: PUSH
36948: LD_INT 900
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: PPUSH
36960: CALL_OW 69
36964: PUSH
36965: FOR_IN
36966: IFFALSE 36997
// if GetSex ( i ) = sex_male then
36968: LD_VAR 0 1
36972: PPUSH
36973: CALL_OW 258
36977: PUSH
36978: LD_INT 1
36980: EQUAL
36981: IFFALSE 36995
// begin tmp = i ;
36983: LD_ADDR_VAR 0 2
36987: PUSH
36988: LD_VAR 0 1
36992: ST_TO_ADDR
// break ;
36993: GO 36997
// end ;
36995: GO 36965
36997: POP
36998: POP
// if tmp = 0 then
36999: LD_VAR 0 2
37003: PUSH
37004: LD_INT 0
37006: EQUAL
37007: IFFALSE 37061
// begin uc_side = 3 ;
37009: LD_ADDR_OWVAR 20
37013: PUSH
37014: LD_INT 3
37016: ST_TO_ADDR
// uc_nation = 3 ;
37017: LD_ADDR_OWVAR 21
37021: PUSH
37022: LD_INT 3
37024: ST_TO_ADDR
// hc_name =  ;
37025: LD_ADDR_OWVAR 26
37029: PUSH
37030: LD_STRING 
37032: ST_TO_ADDR
// hc_gallery =  ;
37033: LD_ADDR_OWVAR 33
37037: PUSH
37038: LD_STRING 
37040: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37041: LD_INT 1
37043: PPUSH
37044: LD_INT 10
37046: PPUSH
37047: CALL_OW 381
// tmp = CreateHuman ;
37051: LD_ADDR_VAR 0 2
37055: PUSH
37056: CALL_OW 44
37060: ST_TO_ADDR
// end ; DialogueOn ;
37061: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37065: LD_VAR 0 2
37069: PPUSH
37070: LD_STRING DSurrenderRussians-RSol1-1a
37072: PPUSH
37073: CALL_OW 88
// DialogueOff ;
37077: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37081: LD_INT 22
37083: PUSH
37084: LD_INT 3
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 21
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PPUSH
37105: CALL_OW 69
37109: PPUSH
37110: CALL_OW 122
// wait ( 0 0$1 ) ;
37114: LD_INT 35
37116: PPUSH
37117: CALL_OW 67
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37121: LD_INT 22
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 21
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PPUSH
37145: CALL_OW 69
37149: PPUSH
37150: LD_INT 25
37152: PPUSH
37153: CALL_OW 113
// wait ( 0 0$10 ) ;
37157: LD_INT 350
37159: PPUSH
37160: CALL_OW 67
// PrepareOmarArmy ;
37164: CALL 38174 0 0
// missionStage = 7 ;
37168: LD_ADDR_EXP 101
37172: PUSH
37173: LD_INT 7
37175: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37176: LD_INT 157
37178: PPUSH
37179: LD_INT 8
37181: PPUSH
37182: LD_INT 1
37184: PPUSH
37185: LD_INT 8
37187: NEG
37188: PPUSH
37189: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37193: LD_INT 157
37195: PPUSH
37196: LD_INT 8
37198: PPUSH
37199: CALL_OW 84
// DialogueOn ;
37203: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37207: LD_EXP 32
37211: PPUSH
37212: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37216: LD_EXP 1
37220: PPUSH
37221: LD_STRING D19-JMM-1
37223: PPUSH
37224: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37228: LD_INT 22
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 26
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: LD_INT 25
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 25
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 25
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 25
37283: PUSH
37284: LD_INT 4
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 25
37293: PUSH
37294: LD_INT 5
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 25
37303: PUSH
37304: LD_INT 8
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: PPUSH
37325: CALL_OW 69
37329: PPUSH
37330: LD_STRING D19-Sol1-1
37332: PPUSH
37333: LD_STRING D5-FSol1-1
37335: PPUSH
37336: CALL 6920 0 3
// Say ( JMM , D19-JMM-2 ) ;
37340: LD_EXP 1
37344: PPUSH
37345: LD_STRING D19-JMM-2
37347: PPUSH
37348: CALL_OW 88
// DialogueOff ;
37352: CALL_OW 7
// LaunchMines ;
37356: CALL 37663 0 0
// wait ( 0 0$3 ) ;
37360: LD_INT 105
37362: PPUSH
37363: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37367: LD_ADDR_VAR 0 3
37371: PUSH
37372: LD_INT 22
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 21
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PPUSH
37396: CALL_OW 69
37400: PUSH
37401: LD_INT 22
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 21
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 25
37423: PUSH
37424: LD_INT 4
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: PPUSH
37436: CALL_OW 69
37440: DIFF
37441: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
37442: LD_ADDR_VAR 0 3
37446: PUSH
37447: LD_VAR 0 3
37451: PUSH
37452: LD_INT 22
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 21
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PPUSH
37476: CALL_OW 69
37480: ADD
37481: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
37482: LD_VAR 0 3
37486: PPUSH
37487: LD_INT 178
37489: PPUSH
37490: LD_INT 66
37492: PPUSH
37493: CALL_OW 114
// wait ( 0 0$10 ) ;
37497: LD_INT 350
37499: PPUSH
37500: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
37504: LD_INT 22
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 21
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 25
37526: PUSH
37527: LD_INT 4
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: PPUSH
37539: CALL_OW 69
37543: PPUSH
37544: LD_INT 177
37546: PPUSH
37547: LD_INT 69
37549: PPUSH
37550: CALL_OW 158
// end ;
37554: PPOPN 3
37556: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
37557: LD_EXP 90
37561: PUSH
37562: LD_INT 1
37564: EQUAL
37565: PUSH
37566: LD_INT 25
37568: PPUSH
37569: LD_INT 22
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 21
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PPUSH
37593: CALL_OW 70
37597: AND
37598: IFFALSE 37660
37600: GO 37602
37602: DISABLE
37603: LD_INT 0
37605: PPUSH
// begin enable ;
37606: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
37607: LD_ADDR_VAR 0 1
37611: PUSH
37612: LD_INT 25
37614: PPUSH
37615: LD_INT 22
37617: PUSH
37618: LD_INT 3
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 21
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PPUSH
37639: CALL_OW 70
37643: PUSH
37644: FOR_IN
37645: IFFALSE 37658
// RemoveUnit ( i ) ;
37647: LD_VAR 0 1
37651: PPUSH
37652: CALL_OW 64
37656: GO 37644
37658: POP
37659: POP
// end ;
37660: PPOPN 1
37662: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
37663: LD_INT 0
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
37670: LD_ADDR_VAR 0 2
37674: PUSH
37675: LD_INT 168
37677: PUSH
37678: LD_INT 18
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 169
37687: PUSH
37688: LD_INT 20
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 167
37697: PUSH
37698: LD_INT 20
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 164
37707: PUSH
37708: LD_INT 18
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 164
37717: PUSH
37718: LD_INT 19
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 163
37727: PUSH
37728: LD_INT 19
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 164
37737: PUSH
37738: LD_INT 21
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 165
37747: PUSH
37748: LD_INT 21
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 163
37757: PUSH
37758: LD_INT 20
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 164
37767: PUSH
37768: LD_INT 22
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 162
37777: PUSH
37778: LD_INT 20
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
37798: LD_ADDR_VAR 0 3
37802: PUSH
37803: LD_INT 169
37805: PUSH
37806: LD_INT 34
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 169
37815: PUSH
37816: LD_INT 35
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 167
37825: PUSH
37826: LD_INT 32
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 170
37835: PUSH
37836: LD_INT 31
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 173
37845: PUSH
37846: LD_INT 35
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 174
37855: PUSH
37856: LD_INT 39
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// for i = 1 to mines_pos do
37871: LD_ADDR_VAR 0 4
37875: PUSH
37876: DOUBLE
37877: LD_INT 1
37879: DEC
37880: ST_TO_ADDR
37881: LD_VAR 0 2
37885: PUSH
37886: FOR_TO
37887: IFFALSE 38099
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
37889: LD_VAR 0 2
37893: PUSH
37894: LD_VAR 0 4
37898: ARRAY
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PPUSH
37904: LD_VAR 0 2
37908: PUSH
37909: LD_VAR 0 4
37913: ARRAY
37914: PUSH
37915: LD_INT 2
37917: ARRAY
37918: PPUSH
37919: LD_INT 1
37921: PPUSH
37922: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
37926: LD_INT 1
37928: PPUSH
37929: LD_INT 3
37931: PPUSH
37932: CALL_OW 12
37936: PPUSH
37937: CALL_OW 67
// if i < mines_pos then
37941: LD_VAR 0 4
37945: PUSH
37946: LD_VAR 0 2
37950: LESS
37951: IFFALSE 37989
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
37953: LD_VAR 0 2
37957: PUSH
37958: LD_VAR 0 4
37962: ARRAY
37963: PUSH
37964: LD_INT 1
37966: ARRAY
37967: PPUSH
37968: LD_VAR 0 2
37972: PUSH
37973: LD_VAR 0 4
37977: ARRAY
37978: PUSH
37979: LD_INT 2
37981: ARRAY
37982: PPUSH
37983: CALL_OW 348
37987: GO 38097
// begin for j = 1 to mines_pos1 do
37989: LD_ADDR_VAR 0 5
37993: PUSH
37994: DOUBLE
37995: LD_INT 1
37997: DEC
37998: ST_TO_ADDR
37999: LD_VAR 0 3
38003: PUSH
38004: FOR_TO
38005: IFFALSE 38061
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
38007: LD_VAR 0 3
38011: PUSH
38012: LD_VAR 0 5
38016: ARRAY
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: PPUSH
38022: LD_VAR 0 3
38026: PUSH
38027: LD_VAR 0 5
38031: ARRAY
38032: PUSH
38033: LD_INT 2
38035: ARRAY
38036: PPUSH
38037: LD_INT 1
38039: PPUSH
38040: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38044: LD_INT 1
38046: PPUSH
38047: LD_INT 3
38049: PPUSH
38050: CALL_OW 12
38054: PPUSH
38055: CALL_OW 67
// end ;
38059: GO 38004
38061: POP
38062: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38063: LD_VAR 0 2
38067: PUSH
38068: LD_VAR 0 4
38072: ARRAY
38073: PUSH
38074: LD_INT 1
38076: ARRAY
38077: PPUSH
38078: LD_VAR 0 2
38082: PUSH
38083: LD_VAR 0 4
38087: ARRAY
38088: PUSH
38089: LD_INT 2
38091: ARRAY
38092: PPUSH
38093: CALL_OW 347
// end ; end ;
38097: GO 37886
38099: POP
38100: POP
// end ;
38101: LD_VAR 0 1
38105: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38106: LD_EXP 101
38110: PUSH
38111: LD_INT 7
38113: EQUAL
38114: PUSH
38115: LD_EXP 31
38119: PPUSH
38120: CALL_OW 301
38124: AND
38125: PUSH
38126: LD_EXP 32
38130: PPUSH
38131: CALL_OW 302
38135: AND
38136: IFFALSE 38173
38138: GO 38140
38140: DISABLE
// begin DialogueOn ;
38141: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38145: LD_EXP 1
38149: PPUSH
38150: LD_STRING D19a-JMM-1
38152: PPUSH
38153: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38157: LD_EXP 32
38161: PPUSH
38162: LD_STRING D19a-Hke-1
38164: PPUSH
38165: CALL_OW 88
// DialogueOff ;
38169: CALL_OW 7
// end ; end_of_file
38173: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38174: LD_INT 0
38176: PPUSH
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
// uc_side = 2 ;
38181: LD_ADDR_OWVAR 20
38185: PUSH
38186: LD_INT 2
38188: ST_TO_ADDR
// uc_nation = 2 ;
38189: LD_ADDR_OWVAR 21
38193: PUSH
38194: LD_INT 2
38196: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38197: LD_ADDR_EXP 31
38201: PUSH
38202: LD_STRING Omar
38204: PPUSH
38205: LD_INT 0
38207: PPUSH
38208: CALL 6640 0 2
38212: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38213: LD_ADDR_EXP 32
38217: PUSH
38218: LD_STRING Heike
38220: PPUSH
38221: LD_INT 0
38223: PPUSH
38224: CALL 6640 0 2
38228: ST_TO_ADDR
// if KhatamStatus = 1 then
38229: LD_EXP 83
38233: PUSH
38234: LD_INT 1
38236: EQUAL
38237: IFFALSE 38252
// Khatam = NewCharacter ( Khatam ) ;
38239: LD_ADDR_EXP 33
38243: PUSH
38244: LD_STRING Khatam
38246: PPUSH
38247: CALL_OW 25
38251: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38252: LD_EXP 32
38256: PPUSH
38257: LD_INT 26
38259: PPUSH
38260: LD_INT 0
38262: PPUSH
38263: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38267: LD_EXP 33
38271: PPUSH
38272: LD_INT 26
38274: PPUSH
38275: LD_INT 0
38277: PPUSH
38278: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38282: LD_ADDR_VAR 0 2
38286: PUSH
38287: DOUBLE
38288: LD_INT 1
38290: DEC
38291: ST_TO_ADDR
38292: LD_INT 5
38294: PUSH
38295: LD_INT 6
38297: PUSH
38298: LD_INT 7
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: PUSH
38306: LD_OWVAR 67
38310: ARRAY
38311: PUSH
38312: FOR_TO
38313: IFFALSE 38368
// begin hc_name =  ;
38315: LD_ADDR_OWVAR 26
38319: PUSH
38320: LD_STRING 
38322: ST_TO_ADDR
// hc_gallery =  ;
38323: LD_ADDR_OWVAR 33
38327: PUSH
38328: LD_STRING 
38330: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38331: LD_INT 0
38333: PPUSH
38334: LD_INT 8
38336: PPUSH
38337: CALL_OW 381
// un = CreateHuman ;
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: CALL_OW 44
38350: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38351: LD_VAR 0 3
38355: PPUSH
38356: LD_INT 26
38358: PPUSH
38359: LD_INT 0
38361: PPUSH
38362: CALL_OW 49
// end ;
38366: GO 38312
38368: POP
38369: POP
// for i := 1 to 4 do
38370: LD_ADDR_VAR 0 2
38374: PUSH
38375: DOUBLE
38376: LD_INT 1
38378: DEC
38379: ST_TO_ADDR
38380: LD_INT 4
38382: PUSH
38383: FOR_TO
38384: IFFALSE 38439
// begin hc_name =  ;
38386: LD_ADDR_OWVAR 26
38390: PUSH
38391: LD_STRING 
38393: ST_TO_ADDR
// hc_gallery =  ;
38394: LD_ADDR_OWVAR 33
38398: PUSH
38399: LD_STRING 
38401: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38402: LD_INT 0
38404: PPUSH
38405: LD_INT 8
38407: PPUSH
38408: CALL_OW 384
// un = CreateHuman ;
38412: LD_ADDR_VAR 0 3
38416: PUSH
38417: CALL_OW 44
38421: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38422: LD_VAR 0 3
38426: PPUSH
38427: LD_INT 26
38429: PPUSH
38430: LD_INT 0
38432: PPUSH
38433: CALL_OW 49
// end ;
38437: GO 38383
38439: POP
38440: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
38441: LD_ADDR_VAR 0 2
38445: PUSH
38446: DOUBLE
38447: LD_INT 1
38449: DEC
38450: ST_TO_ADDR
38451: LD_INT 8
38453: PUSH
38454: LD_INT 9
38456: PUSH
38457: LD_INT 10
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: LD_OWVAR 67
38469: ARRAY
38470: PUSH
38471: FOR_TO
38472: IFFALSE 38560
// begin vc_engine = 3 ;
38474: LD_ADDR_OWVAR 39
38478: PUSH
38479: LD_INT 3
38481: ST_TO_ADDR
// vc_control = 5 ;
38482: LD_ADDR_OWVAR 38
38486: PUSH
38487: LD_INT 5
38489: ST_TO_ADDR
// vc_chassis = 14 ;
38490: LD_ADDR_OWVAR 37
38494: PUSH
38495: LD_INT 14
38497: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
38498: LD_ADDR_OWVAR 40
38502: PUSH
38503: LD_INT 27
38505: PUSH
38506: LD_INT 26
38508: PUSH
38509: LD_INT 28
38511: PUSH
38512: LD_INT 25
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PPUSH
38524: LD_INT 3
38526: PPUSH
38527: CALL_OW 12
38531: ARRAY
38532: ST_TO_ADDR
// veh = CreateVehicle ;
38533: LD_ADDR_VAR 0 4
38537: PUSH
38538: CALL_OW 45
38542: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
38543: LD_VAR 0 4
38547: PPUSH
38548: LD_INT 26
38550: PPUSH
38551: LD_INT 0
38553: PPUSH
38554: CALL_OW 49
// end ;
38558: GO 38471
38560: POP
38561: POP
// vc_chassis := 31 ;
38562: LD_ADDR_OWVAR 37
38566: PUSH
38567: LD_INT 31
38569: ST_TO_ADDR
// vc_control := control_rider ;
38570: LD_ADDR_OWVAR 38
38574: PUSH
38575: LD_INT 4
38577: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
38578: LD_ADDR_VAR 0 5
38582: PUSH
38583: CALL_OW 45
38587: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
38588: LD_VAR 0 5
38592: PPUSH
38593: LD_INT 26
38595: PPUSH
38596: LD_INT 0
38598: PPUSH
38599: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
38603: LD_EXP 31
38607: PPUSH
38608: LD_VAR 0 5
38612: PPUSH
38613: CALL_OW 52
// end ; end_of_file
38617: LD_VAR 0 1
38621: RET
// every 1 1$30 trigger missionStage > 0 do
38622: LD_EXP 101
38626: PUSH
38627: LD_INT 0
38629: GREATER
38630: IFFALSE 38657
38632: GO 38634
38634: DISABLE
// begin enable ;
38635: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
38636: LD_INT 3
38638: PPUSH
38639: LD_INT 5
38641: PPUSH
38642: CALL_OW 12
38646: PPUSH
38647: LD_INT 27
38649: PPUSH
38650: LD_INT 1
38652: PPUSH
38653: CALL_OW 55
// end ; end_of_file
38657: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
38658: LD_EXP 101
38662: PUSH
38663: LD_INT 7
38665: EQUAL
38666: PUSH
38667: LD_INT 22
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 21
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PPUSH
38691: CALL_OW 69
38695: PUSH
38696: LD_INT 0
38698: EQUAL
38699: AND
38700: PUSH
38701: LD_INT 22
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 21
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 50
38723: PUSH
38724: EMPTY
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: PPUSH
38732: CALL_OW 69
38736: PUSH
38737: LD_INT 0
38739: EQUAL
38740: AND
38741: IFFALSE 39230
38743: GO 38745
38745: DISABLE
// begin DialogueOn ;
38746: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
38750: LD_EXP 1
38754: PPUSH
38755: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
38759: LD_EXP 1
38763: PPUSH
38764: LD_STRING D20-JMM-1
38766: PPUSH
38767: CALL_OW 88
// if IsOK ( Joan ) then
38771: LD_EXP 2
38775: PPUSH
38776: CALL_OW 302
38780: IFFALSE 38794
// Say ( Joan , D20-Joan-1 ) ;
38782: LD_EXP 2
38786: PPUSH
38787: LD_STRING D20-Joan-1
38789: PPUSH
38790: CALL_OW 88
// if IsOk ( Lisa ) then
38794: LD_EXP 4
38798: PPUSH
38799: CALL_OW 302
38803: IFFALSE 38817
// Say ( Lisa , D20-Lisa-1 ) ;
38805: LD_EXP 4
38809: PPUSH
38810: LD_STRING D20-Lisa-1
38812: PPUSH
38813: CALL_OW 88
// if IsOk ( Donaldson ) then
38817: LD_EXP 5
38821: PPUSH
38822: CALL_OW 302
38826: IFFALSE 38840
// Say ( Donaldson , D20-Don-1 ) ;
38828: LD_EXP 5
38832: PPUSH
38833: LD_STRING D20-Don-1
38835: PPUSH
38836: CALL_OW 88
// if IsOK ( Cornel ) then
38840: LD_EXP 12
38844: PPUSH
38845: CALL_OW 302
38849: IFFALSE 38863
// Say ( Cornel , D20-Corn-1 ) ;
38851: LD_EXP 12
38855: PPUSH
38856: LD_STRING D20-Corn-1
38858: PPUSH
38859: CALL_OW 88
// if IsOk ( Denis ) then
38863: LD_EXP 8
38867: PPUSH
38868: CALL_OW 302
38872: IFFALSE 38886
// Say ( Denis , D20-Den-1 ) ;
38874: LD_EXP 8
38878: PPUSH
38879: LD_STRING D20-Den-1
38881: PPUSH
38882: CALL_OW 88
// if IsOk ( Bobby ) then
38886: LD_EXP 6
38890: PPUSH
38891: CALL_OW 302
38895: IFFALSE 38909
// Say ( Bobby , D20-Bobby-1 ) ;
38897: LD_EXP 6
38901: PPUSH
38902: LD_STRING D20-Bobby-1
38904: PPUSH
38905: CALL_OW 88
// if IsOk ( Gladstone ) then
38909: LD_EXP 10
38913: PPUSH
38914: CALL_OW 302
38918: IFFALSE 38932
// Say ( Gladstone , D20-Glad-1 ) ;
38920: LD_EXP 10
38924: PPUSH
38925: LD_STRING D20-Glad-1
38927: PPUSH
38928: CALL_OW 88
// if IsOk ( Cyrus ) then
38932: LD_EXP 7
38936: PPUSH
38937: CALL_OW 302
38941: IFFALSE 38955
// Say ( Cyrus , D20-Cyrus-1 ) ;
38943: LD_EXP 7
38947: PPUSH
38948: LD_STRING D20-Cyrus-1
38950: PPUSH
38951: CALL_OW 88
// if IsOk ( Stevens ) then
38955: LD_EXP 3
38959: PPUSH
38960: CALL_OW 302
38964: IFFALSE 38978
// Say ( Stevens , D20-Huck-1 ) ;
38966: LD_EXP 3
38970: PPUSH
38971: LD_STRING D20-Huck-1
38973: PPUSH
38974: CALL_OW 88
// if IsOk ( Brown ) then
38978: LD_EXP 9
38982: PPUSH
38983: CALL_OW 302
38987: IFFALSE 39001
// Say ( Brown , D20-Brown-1 ) ;
38989: LD_EXP 9
38993: PPUSH
38994: LD_STRING D20-Brown-1
38996: PPUSH
38997: CALL_OW 88
// if IsOk ( Gary ) then
39001: LD_EXP 13
39005: PPUSH
39006: CALL_OW 302
39010: IFFALSE 39024
// Say ( Gary , D20-Gary-1 ) ;
39012: LD_EXP 13
39016: PPUSH
39017: LD_STRING D20-Gary-1
39019: PPUSH
39020: CALL_OW 88
// if IsOk ( Connie ) then
39024: LD_EXP 16
39028: PPUSH
39029: CALL_OW 302
39033: IFFALSE 39047
// Say ( Connie , D20-Con-1 ) ;
39035: LD_EXP 16
39039: PPUSH
39040: LD_STRING D20-Con-1
39042: PPUSH
39043: CALL_OW 88
// if IsOk ( Kurt ) then
39047: LD_EXP 30
39051: PPUSH
39052: CALL_OW 302
39056: IFFALSE 39070
// Say ( Kurt , D20-Kurt-1 ) ;
39058: LD_EXP 30
39062: PPUSH
39063: LD_STRING D20-Kurt-1
39065: PPUSH
39066: CALL_OW 88
// if IsOk ( Kikuchi ) then
39070: LD_EXP 15
39074: PPUSH
39075: CALL_OW 302
39079: IFFALSE 39093
// Say ( Kikuchi , D20-Yam-1 ) ;
39081: LD_EXP 15
39085: PPUSH
39086: LD_STRING D20-Yam-1
39088: PPUSH
39089: CALL_OW 88
// if IsOk ( Frank ) then
39093: LD_EXP 14
39097: PPUSH
39098: CALL_OW 302
39102: IFFALSE 39116
// Say ( Frank , D20-Frank-1 ) ;
39104: LD_EXP 14
39108: PPUSH
39109: LD_STRING D20-Frank-1
39111: PPUSH
39112: CALL_OW 88
// DialogueOff ;
39116: CALL_OW 7
// if AllianceEscape = 1 then
39120: LD_EXP 91
39124: PUSH
39125: LD_INT 1
39127: EQUAL
39128: IFFALSE 39142
// AddMedal ( Roth , 1 ) else
39130: LD_STRING Roth
39132: PPUSH
39133: LD_INT 1
39135: PPUSH
39136: CALL_OW 101
39140: GO 39153
// AddMedal ( Roth , - 1 ) ;
39142: LD_STRING Roth
39144: PPUSH
39145: LD_INT 1
39147: NEG
39148: PPUSH
39149: CALL_OW 101
// if behemothStatus = 1 then
39153: LD_EXP 60
39157: PUSH
39158: LD_INT 1
39160: EQUAL
39161: IFFALSE 39175
// AddMedal ( Project , 1 ) else
39163: LD_STRING Project
39165: PPUSH
39166: LD_INT 1
39168: PPUSH
39169: CALL_OW 101
39173: GO 39186
// AddMedal ( Project , - 1 ) ;
39175: LD_STRING Project
39177: PPUSH
39178: LD_INT 1
39180: NEG
39181: PPUSH
39182: CALL_OW 101
// if unitLost = 0 then
39186: LD_EXP 98
39190: PUSH
39191: LD_INT 0
39193: EQUAL
39194: IFFALSE 39208
// AddMedal ( NoLosses , 1 ) else
39196: LD_STRING NoLosses
39198: PPUSH
39199: LD_INT 1
39201: PPUSH
39202: CALL_OW 101
39206: GO 39219
// AddMedal ( NoLosses , - 1 ) ;
39208: LD_STRING NoLosses
39210: PPUSH
39211: LD_INT 1
39213: NEG
39214: PPUSH
39215: CALL_OW 101
// GiveMedals ( MAIN ) ;
39219: LD_STRING MAIN
39221: PPUSH
39222: CALL_OW 102
// YouWin ;
39226: CALL_OW 103
// end ; end_of_file
39230: END
// every 0 0$1 trigger IsDead ( JMM ) do
39231: LD_EXP 1
39235: PPUSH
39236: CALL_OW 301
39240: IFFALSE 39252
39242: GO 39244
39244: DISABLE
// YouLost ( JMM ) ;
39245: LD_STRING JMM
39247: PPUSH
39248: CALL_OW 104
39252: END
