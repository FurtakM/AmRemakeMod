Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

    if exist_mode then
    unit := CreateCharacter(ident)
    else
    unit := NewCharacter(ident);

    result := unit;
End;

Export Function PrepareUnitEpsilon(ident);
var unit;
begin

    if TestCharacters('13s_'&ident) = true then
        unit = CreateCharacter('13s_'&ident);

    result := unit;
End;

Export Function PrepareUnitOmega(ident);
var unit;
begin

    if TestCharacters('13f_'&ident) = true then
    begin
        unit = CreateCharacter('13f_'&ident);
        heroesFromOmega = heroesFromOmega ^ unit;
    end;    

    result := unit;
End;

Export function TabLenght(tab);
var i;
begin
     for i = 1 to tab do result = i;
end;

Export  function Video(mode);
begin
    if mode = true then
    begin
        ingame_video=true;
        interface_hidden=true;
    end else
    begin
        ingame_video=false;
        interface_hidden=false;
    end;
end;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin

    characters := characters diff [JMM, Stevens, Baker,  Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Cornel, Gary, Frank, Kikuchi, Powell];
    rnd = rand(1, characters);  

    for i = 1 to characters do
    begin

        if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
        if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);

    end;

end;
Export Function SortBySkill(list, asc);
var i, j, tmp;
begin
if not list then
   exit;

result := [];

for i in list do
    begin
    tmp := ((GetSkill(i, 1) + GetSkill(i, 2) + GetSkill(i, 3) + GetSkill(i, 4)) div 4);

    if not result then
       result := [[i, tmp]]
     else
      begin
       if result[result][2] <= tmp then
          result := Insert(result, result+1, [i, tmp])
       else
       for j = 1 to result do
           begin
           if tmp < result[j][2] then
              begin
              result := Insert(result, j, [i, tmp]);
              break;
              end;
           end;
      end;
    end;

if result and not asc then
   begin
   tmp := result;

   for i = tmp downto 1 do
       result := Replace(result, tmp - i + 1, tmp[i]);
   end;
End;

Export function PrepareDifficulty;
begin
    if difficulty = 1 then
    begin
        SetTech(tech_Weap1, 6, state_researched);
        SetTech(tech_Comp1, 6, state_researched);
    end;

    if difficulty = 2 then
    begin
        SetTech(tech_Weap1, 6, state_researched);
        SetTech(tech_Comp1, 6, state_researched);
        SetTech(tech_Weap2, 6, state_researched);
        SetTech(tech_Comp2, 6, state_researched);
    end;

    if difficulty = 3 then
    begin
        SetTech(tech_Weap1, 6, state_researched);
        SetTech(tech_Comp1, 6, state_researched);
        SetTech(tech_Weap2, 6, state_researched);
        SetTech(tech_Comp2, 6, state_researched);
        SetTech(tech_Weap3, 6, state_researched);
        SetTech(tech_Comp3, 6, state_researched);
    end;
end;


Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un, tmp;
begin

   for i = 1 to count do
   begin

      uc_side = side;
      uc_nation = nation;

      hc_gallery = '';
      hc_name = '';
      PrepareHuman(false, class, skill);

      un = CreateHuman;
      PlaceHumanInUnit(un,build);

   end;

END;

export function RespawnAttackVehicle(area, side, vehCount, mehskill, nation, vehEngine, vehControl, RUWeapons, ARWeapons, AMWeapon, targetSide);
var i, j, un, veh, ruChassisTab, arChassisTab, amChassisTab, vehicleOK_list, target1, target2;
begin

  wait([1$0, 1$30, 2$0, 2$30, 3$0, 3$30, 4$0, 4$30][Rand(1, 8)]);

  amChassisTab = [];
  arChassisTab = [];
  ruChassisTab = [];

  repeat

  wait(0$01);

  IF nation = 1 then
  begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = AMWeapon[Rand(1, AMWeapon)];

            for j = 1 to AMWeapon do
            begin
                 IF AMWeapon[j] = 2 or AMWeapon[j] = 3 then
                 begin
                      amChassisTab = [1,2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1,amChassisTab)];
                 end;

                 IF AMWeapon[j] = 4 or AMWeapon[j] = 5 or AMWeapon[j] = 9 or AMWeapon[j] = 11 or AMWeapon[j] = 7 then
                 begin
                      amChassisTab = [2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1, amChassisTab)];
                 end;

                 IF AMWeapon[j] = 8 or AMWeapon[j] = 6 or AMWeapon[j] = 10 then
                 begin
                      amChassisTab = [4,5];
                      vc_chassis = amChassisTab[Rand(1, amChassisTab)];
                 end;

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vc_control = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;

    IF nation = 2 then
    begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = ARWeapons[Rand(1, ARWeapons)];

            for j = 1 to ARWeapons do
            begin

                 IF ARWeapons[j] = 24 or ARWeapons[j] = 22 or ARWeapons[j] = 23 or ARWeapons[j] = 30 then
                 begin
                      arChassisTab = [11, 12, 13, 14];
                      vc_chassis = arChassisTab[Rand(1, arChassisTab)];
                 end;

                 IF ARWeapons[j] = 29 or ARWeapons[j] = 28 or ARWeapons[j] = 27 or ARWeapons[j] = 26 or ARWeapons[j] = 25 then
                 begin
                      arChassisTab = [13, 14];
                      vc_chassis = arChassisTab[Rand(1, arChassisTab)];
                 end;

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vc_control = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;

    IF nation = 3 then
    begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = RUWeapons[Rand(1, RUWeapons)];


            for j = 1 to RuWeapons do
            begin

                IF RUWeapons[j] = 42 or RUWeapons[j] = 43 or RUWeapons[j] = 44 or RUWeapons[j] = 45 or RUWeapons[j] = 49 then
                begin
                    ruChassisTab = [24];
                    vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
                end;

                IF RUWeapons[j] = 46 or RUWeapons[j] = 47 then
                begin
                    ruChassisTab = [24];
                    vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
                end;

           end;


            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vc_control = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;

  until i = vehCount;

    repeat
        wait(0$1);
        vehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]);

        IF vehicleOK_list > 0 then
        begin

            for i in vehicleOK_list  do
            begin

            target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
            target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

            If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
            begin
                ComAttackUnit(i, target1);
            end
            else
            begin
                ComAttackUnit(i, target2);
            end;
        end;
      end;
    until vehicleOK_list = [];
END;



// AI

Export function ResAllTechs(side, lab, nation);
var i, tech, cout;
begin

For i = 1 to 72 do
If GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) = true then AddComResearch(lab, i);

end;


Export function RepairBuilding(side, building, area);
var buildings_list, i,engineerOkInside, engineerOkOutside, j;
begin


  engineerOkInside = UnitFilter(UnitsInside(building), [f_class, 2]);
  engineerOkOutside = FilterUnitsInArea(area,[[f_side, side], [f_class, 2], [f_lives, 750], [f_not, [f_inside]]]) diff [Kozlov];
  buildings_list = FilterUnitsInArea(area,[[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

  if not buildings_list and not FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 250]]) then exit;

  if buildings_list > 0 and engineerOkInside then ComExitBuilding(UnitFilter(engineerOkInside, [f_class, 2]));

  if buildings_list > 0  and engineerOkOutside > 0 then ComRepairBuilding(engineerOkOutside, buildings_list[1]);

  if buildings_list = 0 and engineerOkOutside > 0 then ComEnterUnit(engineerOkOutside, building);
END;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list, sci_listOutside,  i, j, damageUnits, unitsToHeal, tmp, rnd;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_nation ,2], [f_lives, 251]]) diff [Kozlov];
  sci_listOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_nation, 2], [f_class, 4], [f_ok]]) diff [Kozlov];
  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 750]]]);
  unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 1000]]]);

  if not damageUnits and not unitsToHeal and not sci_list then exit;

  if damageUnits > 0 and sci_list > 0 then ComMoveToArea(damageUnits, healArea);

  if unitsToHeal > 0 and sci_list > 0 then ComExitBuilding(sci_list);

  if unitsToHeal > 0 and sci_listOutside > 0 then ComHeal(sci_listOutside, unitsToHeal[1]);

  if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
  begin
          tmp = FilterAllUnits([[f_side, side], [f_type, unit_building], [f_btype, b_lab_full]]);
          rnd = rand(1, tmp);
          ComEnterUnit(UnitFilter(sci_listOutside, [f_not, [f_hastask]]), tmp[rnd]);
  end;

END;

Export function DefendDepot(side, build);
var i, j, tmpTab;
begin
     tmpTab = [];

     if FilterAllUnits([[f_side, side], [f_btype, b_bunker]]) > 0 then
     begin
       for i in FilterAllUnits([[f_side, side], [f_btype, b_bunker]]) do
       begin
            for j in UnitsInside(i) do tmpTab = tmpTab ^ j;
       end;
     end;

     ComAgressiveMove(tmpTab, GetX(build), GetY(build));
end;

Export function AttackNearBuildings(side, enemySide);
var i, j, turretsList, enemyBuildings;
begin
    turretsList = FilterAllUnits([[f_side, side], [f_or, [f_btype, 31], [f_btype, 32], [f_btype, 33], [f_btype, 4], [f_btype, 5]]]);
    enemyBuildings = FilterAllUnits([[f_side, enemySide], [f_type, unit_building], [f_empty]]);

    if turretsList > 0 and enemyBuildings > 0 then
    begin
        for i in turretsList do
        begin
            for j in enemyBuildings do
            begin
                if GetDistUnits(i, j) < 20 then
                begin
                    ComAttackUnit(i, j);
                end;
            end;
        end;
    end;

END;

Export function BuildingVehicle(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i;
begin

        for i = 1 to vehCount do AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);

END;

Export function AttackVehicles(enemySide, vehTab);
var i, j, vehiclesOK, target1, target2;
begin
    repeat
        wait(0$1);
            for j in vehTab do
            begin
                target1 := NearestUnitToUnit(FilterAllUnits([f_side, enemySide]), j);
                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, enemySide], [f_btype, b_bunker], [f_occupied]]]), j);

                If GetDistUnits(j, target1)+8 < GetDistUnits(j, target2) then ComAttackUnit(j, target1)
                else ComAttackUnit(j, target2);
            end;

    until vehTab = 0;
end;

Export Function IntBazooka(side);
var ta, c, i, list, filter;
begin

    list   := FilterAllUnits([[f_side, side], [f_class, class_bazooker]]);
    filter := FilterAllUnits([[f_enemy, side], [f_not, [f_type, unit_building]]]);

    c := Rand(1, 3);

    for i = 1 to list do
    for ta in filter do
        begin

        if GetDistUnits(list[i], ta) <= 15 then
            begin
                Case c of
                1: ComTimeShift(list[i], GetX(ta), GetY(ta));
                2: ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                3: ComAttackUnit(list[i], ta);
                end;

            end;
        end;
End;

{Export function TimeLapsersAI(side);
var j, nearUnit;
begin
    if russianTanks >= 1 and russianTimeLapsers >= [1, 2, 2][Difficulty] then
    repeat
        wait(0$3);
        if russianTimeLapsers > 0 then
            for j in UnitFilter(russianTimeLapsers, [f_not, [f_hastask]]) do
            begin
                nearUnit := NearestUnitToUnit(FilterAllUnits([[f_enemy, side], [f_see, 1]]), j);
                ComMoveXY(j, GetX(nearUnit), GetY(nearUnit));
            end;

    until russianTimeLapsers = 0;
end;}