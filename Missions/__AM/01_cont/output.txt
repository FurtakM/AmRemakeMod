// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 900 0 0
// InitRussian ;
  12: CALL 1139 0 0
// DebugMode ;
  16: CALL 137 0 0
// Action ;
  20: CALL 2556 0 0
// end ;
  24: END
// export debug ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// active_russian_dialog := false ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// bobby_in_squad := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// cyrus_in_squad := false ;
  52: LD_ADDR_EXP 6
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// powell_contact := false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// macmilan_use_radio := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// active_road_patrol := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// macmilan_in_trap := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meta_action := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end_mission := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// bobby_saved := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// cyrus_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// send_troops_to_forest := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// end ;
 132: LD_VAR 0 1
 136: RET
// function DebugMode ; var i ; begin
 137: LD_INT 0
 139: PPUSH
 140: PPUSH
// if not debug then
 141: LD_EXP 1
 145: NOT
 146: IFFALSE 150
// exit ;
 148: GO 169
// Difficulty := 3 ;
 150: LD_ADDR_OWVAR 67
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// TurnFogOff ( ) ;
 158: CALL_OW 537
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// end ; end_of_file
 169: LD_VAR 0 1
 173: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// if exist_mode then
 178: LD_VAR 0 2
 182: IFFALSE 201
// unit := CreateCharacter ( ident ) else
 184: LD_ADDR_VAR 0 4
 188: PUSH
 189: LD_VAR 0 1
 193: PPUSH
 194: CALL_OW 34
 198: ST_TO_ADDR
 199: GO 216
// unit := NewCharacter ( ident ) ;
 201: LD_ADDR_VAR 0 4
 205: PUSH
 206: LD_VAR 0 1
 210: PPUSH
 211: CALL_OW 25
 215: ST_TO_ADDR
// result := unit ;
 216: LD_ADDR_VAR 0 3
 220: PUSH
 221: LD_VAR 0 4
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 3
 230: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 231: LD_INT 0
 233: PPUSH
 234: PPUSH
 235: PPUSH
// uc_side := GetSide ( b ) ;
 236: LD_ADDR_OWVAR 20
 240: PUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 255
 250: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 251: LD_ADDR_OWVAR 21
 255: PUSH
 256: LD_VAR 0 2
 260: PPUSH
 261: CALL_OW 248
 265: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 266: LD_INT 0
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_VAR 0 1
 276: PPUSH
 277: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 281: LD_ADDR_VAR 0 5
 285: PUSH
 286: LD_VAR 0 2
 290: PPUSH
 291: CALL_OW 254
 295: PUSH
 296: LD_INT 3
 298: MINUS
 299: ST_TO_ADDR
// if dir < 0 then
 300: LD_VAR 0 5
 304: PUSH
 305: LD_INT 0
 307: LESS
 308: IFFALSE 324
// dir := 6 + dir ;
 310: LD_ADDR_VAR 0 5
 314: PUSH
 315: LD_INT 6
 317: PUSH
 318: LD_VAR 0 5
 322: PLUS
 323: ST_TO_ADDR
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 4
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// SetDir ( un , dir ) ;
 334: LD_VAR 0 4
 338: PPUSH
 339: LD_VAR 0 5
 343: PPUSH
 344: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 348: LD_VAR 0 4
 352: PPUSH
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 52
// end ;
 362: LD_VAR 0 3
 366: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 367: LD_INT 0
 369: PPUSH
// uc_side := side ;
 370: LD_ADDR_OWVAR 20
 374: PUSH
 375: LD_VAR 0 1
 379: ST_TO_ADDR
// uc_nation := nation ;
 380: LD_ADDR_OWVAR 21
 384: PUSH
 385: LD_VAR 0 2
 389: ST_TO_ADDR
// vc_chassis := chassis ;
 390: LD_ADDR_OWVAR 37
 394: PUSH
 395: LD_VAR 0 3
 399: ST_TO_ADDR
// vc_engine := engine ;
 400: LD_ADDR_OWVAR 39
 404: PUSH
 405: LD_VAR 0 4
 409: ST_TO_ADDR
// vc_control := control ;
 410: LD_ADDR_OWVAR 38
 414: PUSH
 415: LD_VAR 0 5
 419: ST_TO_ADDR
// vc_weapon := weapon ;
 420: LD_ADDR_OWVAR 40
 424: PUSH
 425: LD_VAR 0 6
 429: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 430: LD_ADDR_OWVAR 41
 434: PUSH
 435: LD_VAR 0 7
 439: ST_TO_ADDR
// result := CreateVehicle ;
 440: LD_ADDR_VAR 0 8
 444: PUSH
 445: CALL_OW 45
 449: ST_TO_ADDR
// end ;
 450: LD_VAR 0 8
 454: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 455: LD_INT 0
 457: PPUSH
 458: PPUSH
// while ( active_road_patrol ) do
 459: LD_EXP 7
 463: IFFALSE 817
// begin Wait ( 0 0$01 ) ;
 465: LD_INT 35
 467: PPUSH
 468: CALL_OW 67
// if not unit then
 472: LD_VAR 0 1
 476: NOT
 477: IFFALSE 481
// exit ;
 479: GO 817
// if mode = road then
 481: LD_VAR 0 2
 485: PUSH
 486: LD_STRING road
 488: EQUAL
 489: IFFALSE 545
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 491: LD_VAR 0 1
 495: PPUSH
 496: CALL_OW 261
 500: PUSH
 501: LD_INT 50
 503: LESS
 504: PUSH
 505: LD_INT 1
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: CALL_OW 292
 517: NOT
 518: AND
 519: PUSH
 520: LD_VAR 0 1
 524: PPUSH
 525: CALL_OW 314
 529: NOT
 530: AND
 531: IFFALSE 545
// SetFuel ( unit , 100 ) ;
 533: LD_VAR 0 1
 537: PPUSH
 538: LD_INT 100
 540: PPUSH
 541: CALL_OW 240
// if mode = forest then
 545: LD_VAR 0 2
 549: PUSH
 550: LD_STRING forest
 552: EQUAL
 553: IFFALSE 633
// if GetLives ( unit ) < 600 then
 555: LD_VAR 0 1
 559: PPUSH
 560: CALL_OW 256
 564: PUSH
 565: LD_INT 600
 567: LESS
 568: IFFALSE 633
// begin ComMoveXY ( unit , 42 , 3 ) ;
 570: LD_VAR 0 1
 574: PPUSH
 575: LD_INT 42
 577: PPUSH
 578: LD_INT 3
 580: PPUSH
 581: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_VAR 0 1
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 1
 613: PPUSH
 614: CALL_OW 251
 618: PPUSH
 619: CALL_OW 232
// send_troops_to_forest := true ;
 623: LD_ADDR_EXP 13
 627: PUSH
 628: LD_INT 1
 630: ST_TO_ADDR
// break ;
 631: GO 817
// end ; if not HasTask ( unit ) then
 633: LD_VAR 0 1
 637: PPUSH
 638: CALL_OW 314
 642: NOT
 643: IFFALSE 815
// begin for i = 1 to coords do
 645: LD_ADDR_VAR 0 6
 649: PUSH
 650: DOUBLE
 651: LD_INT 1
 653: DEC
 654: ST_TO_ADDR
 655: LD_VAR 0 4
 659: PUSH
 660: FOR_TO
 661: IFFALSE 728
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 663: LD_VAR 0 1
 667: PPUSH
 668: LD_VAR 0 4
 672: PUSH
 673: LD_VAR 0 6
 677: ARRAY
 678: PPUSH
 679: LD_VAR 0 4
 683: PUSH
 684: LD_VAR 0 6
 688: PUSH
 689: LD_INT 1
 691: PLUS
 692: ARRAY
 693: PPUSH
 694: CALL_OW 174
// AddComWait ( unit , pause ) ;
 698: LD_VAR 0 1
 702: PPUSH
 703: LD_VAR 0 3
 707: PPUSH
 708: CALL_OW 202
// i := i + 1 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_VAR 0 6
 721: PUSH
 722: LD_INT 1
 724: PLUS
 725: ST_TO_ADDR
// end ;
 726: GO 660
 728: POP
 729: POP
// for i = coords downto 1 do
 730: LD_ADDR_VAR 0 6
 734: PUSH
 735: DOUBLE
 736: LD_VAR 0 4
 740: INC
 741: ST_TO_ADDR
 742: LD_INT 1
 744: PUSH
 745: FOR_DOWNTO
 746: IFFALSE 813
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 748: LD_VAR 0 1
 752: PPUSH
 753: LD_VAR 0 4
 757: PUSH
 758: LD_VAR 0 6
 762: PUSH
 763: LD_INT 1
 765: MINUS
 766: ARRAY
 767: PPUSH
 768: LD_VAR 0 4
 772: PUSH
 773: LD_VAR 0 6
 777: ARRAY
 778: PPUSH
 779: CALL_OW 174
// AddComWait ( unit , pause ) ;
 783: LD_VAR 0 1
 787: PPUSH
 788: LD_VAR 0 3
 792: PPUSH
 793: CALL_OW 202
// i := i - 1 ;
 797: LD_ADDR_VAR 0 6
 801: PUSH
 802: LD_VAR 0 6
 806: PUSH
 807: LD_INT 1
 809: MINUS
 810: ST_TO_ADDR
// end ;
 811: GO 745
 813: POP
 814: POP
// end ; end ;
 815: GO 459
// end ;
 817: LD_VAR 0 5
 821: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
// uc_nation := 1 ;
 826: LD_ADDR_OWVAR 21
 830: PUSH
 831: LD_INT 1
 833: ST_TO_ADDR
// uc_side := 0 ;
 834: LD_ADDR_OWVAR 20
 838: PUSH
 839: LD_INT 0
 841: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 842: LD_INT 0
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_INT 0
 850: PPUSH
 851: CALL_OW 380
// hc_name := speaker ;
 855: LD_ADDR_OWVAR 26
 859: PUSH
 860: LD_STRING speaker
 862: ST_TO_ADDR
// hc_gallery :=  ;
 863: LD_ADDR_OWVAR 33
 867: PUSH
 868: LD_STRING 
 870: ST_TO_ADDR
// speaker := CreateHuman ;
 871: LD_ADDR_VAR 0 3
 875: PUSH
 876: CALL_OW 44
 880: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 881: LD_VAR 0 3
 885: PPUSH
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 88
// end ; end_of_file
 895: LD_VAR 0 2
 899: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 900: LD_INT 0
 902: PPUSH
// uc_nation := 1 ;
 903: LD_ADDR_OWVAR 21
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 911: LD_ADDR_EXP 14
 915: PUSH
 916: LD_STRING JMM
 918: PPUSH
 919: LD_INT 0
 921: PPUSH
 922: CALL 174 0 2
 926: ST_TO_ADDR
// uc_side := 4 ;
 927: LD_ADDR_OWVAR 20
 931: PUSH
 932: LD_INT 4
 934: ST_TO_ADDR
// hc_gallery := us ;
 935: LD_ADDR_OWVAR 33
 939: PUSH
 940: LD_STRING us
 942: ST_TO_ADDR
// hc_face_number := 7 ;
 943: LD_ADDR_OWVAR 34
 947: PUSH
 948: LD_INT 7
 950: ST_TO_ADDR
// hc_sex := sex_male ;
 951: LD_ADDR_OWVAR 27
 955: PUSH
 956: LD_INT 1
 958: ST_TO_ADDR
// hc_name :=   ;
 959: LD_ADDR_OWVAR 26
 963: PUSH
 964: LD_STRING  
 966: ST_TO_ADDR
// hc_class := 1 ;
 967: LD_ADDR_OWVAR 28
 971: PUSH
 972: LD_INT 1
 974: ST_TO_ADDR
// Powell := CreateHuman ;
 975: LD_ADDR_EXP 17
 979: PUSH
 980: CALL_OW 44
 984: ST_TO_ADDR
// hc_name :=   ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING  
 992: ST_TO_ADDR
// hc_gallery := ru ;
 993: LD_ADDR_OWVAR 33
 997: PUSH
 998: LD_STRING ru
1000: ST_TO_ADDR
// hc_face_number := 4 ;
1001: LD_ADDR_OWVAR 34
1005: PUSH
1006: LD_INT 4
1008: ST_TO_ADDR
// hc_sex := sex_male ;
1009: LD_ADDR_OWVAR 27
1013: PUSH
1014: LD_INT 1
1016: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1017: LD_ADDR_EXP 18
1021: PUSH
1022: CALL_OW 44
1026: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1027: LD_ADDR_EXP 15
1031: PUSH
1032: LD_STRING Bobby
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: CALL 174 0 2
1042: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1043: LD_ADDR_EXP 16
1047: PUSH
1048: LD_STRING Cyrus
1050: PPUSH
1051: LD_INT 0
1053: PPUSH
1054: CALL 174 0 2
1058: ST_TO_ADDR
// case Difficulty of 1 :
1059: LD_OWVAR 67
1063: PUSH
1064: LD_INT 1
1066: DOUBLE
1067: EQUAL
1068: IFTRUE 1072
1070: GO 1087
1072: POP
// SetLives ( Bobby , 500 ) ; 2 :
1073: LD_EXP 15
1077: PPUSH
1078: LD_INT 500
1080: PPUSH
1081: CALL_OW 234
1085: GO 1134
1087: LD_INT 2
1089: DOUBLE
1090: EQUAL
1091: IFTRUE 1095
1093: GO 1110
1095: POP
// SetLives ( Bobby , 450 ) ; 3 :
1096: LD_EXP 15
1100: PPUSH
1101: LD_INT 450
1103: PPUSH
1104: CALL_OW 234
1108: GO 1134
1110: LD_INT 3
1112: DOUBLE
1113: EQUAL
1114: IFTRUE 1118
1116: GO 1133
1118: POP
// SetLives ( Bobby , 400 ) ; end ;
1119: LD_EXP 15
1123: PPUSH
1124: LD_INT 400
1126: PPUSH
1127: CALL_OW 234
1131: GO 1134
1133: POP
// end ; end_of_file
1134: LD_VAR 0 1
1138: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1139: LD_INT 0
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1145: LD_ADDR_VAR 0 2
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 2
1155: PUSH
1156: LD_INT 3
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_OWVAR 67
1168: ARRAY
1169: ST_TO_ADDR
// uc_side := 3 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 3
1177: ST_TO_ADDR
// uc_nation := 3 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1186: LD_ADDR_EXP 24
1190: PUSH
1191: LD_STRING Pokryshkin
1193: PPUSH
1194: LD_INT 0
1196: PPUSH
1197: CALL 174 0 2
1201: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1202: LD_EXP 24
1206: PPUSH
1207: LD_INT 44
1209: PPUSH
1210: LD_INT 5
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// hc_importance := 0 ;
1220: LD_ADDR_OWVAR 32
1224: PUSH
1225: LD_INT 0
1227: ST_TO_ADDR
// hc_gallery :=  ;
1228: LD_ADDR_OWVAR 33
1232: PUSH
1233: LD_STRING 
1235: ST_TO_ADDR
// hc_name :=  ;
1236: LD_ADDR_OWVAR 26
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1244: LD_INT 1
1246: PPUSH
1247: LD_INT 1
1249: PPUSH
1250: LD_VAR 0 2
1254: PPUSH
1255: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1259: LD_ADDR_OWVAR 33
1263: PUSH
1264: LD_STRING SecondCharsGal
1266: ST_TO_ADDR
// hc_face_number := 69 ;
1267: LD_ADDR_OWVAR 34
1271: PUSH
1272: LD_INT 69
1274: ST_TO_ADDR
// hc_sex := sex_male ;
1275: LD_ADDR_OWVAR 27
1279: PUSH
1280: LD_INT 1
1282: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1283: LD_ADDR_OWVAR 26
1287: PUSH
1288: LD_STRING Ilja Ivanov
1290: ST_TO_ADDR
// un := CreateHuman ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: CALL_OW 44
1300: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1301: LD_ADDR_EXP 19
1305: PUSH
1306: LD_EXP 19
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: LD_VAR 0 4
1318: PPUSH
1319: CALL_OW 2
1323: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1324: LD_VAR 0 4
1328: PPUSH
1329: LD_INT 3
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 1
1344: PPUSH
1345: LD_VAR 0 2
1349: PPUSH
1350: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1354: LD_ADDR_OWVAR 33
1358: PUSH
1359: LD_STRING SecondCharsGal
1361: ST_TO_ADDR
// hc_face_number := 70 ;
1362: LD_ADDR_OWVAR 34
1366: PUSH
1367: LD_INT 70
1369: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1370: LD_ADDR_OWVAR 26
1374: PUSH
1375: LD_STRING Pavel Starczy
1377: ST_TO_ADDR
// un := CreateHuman ;
1378: LD_ADDR_VAR 0 4
1382: PUSH
1383: CALL_OW 44
1387: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1388: LD_ADDR_EXP 19
1392: PUSH
1393: LD_EXP 19
1397: PPUSH
1398: LD_INT 2
1400: PPUSH
1401: LD_VAR 0 4
1405: PPUSH
1406: CALL_OW 2
1410: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1411: LD_VAR 0 4
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL_OW 49
// InitHc ;
1426: CALL_OW 19
// for i = 1 to 7 do
1430: LD_ADDR_VAR 0 3
1434: PUSH
1435: DOUBLE
1436: LD_INT 1
1438: DEC
1439: ST_TO_ADDR
1440: LD_INT 7
1442: PUSH
1443: FOR_TO
1444: IFFALSE 1577
// begin PrepareHuman ( false , 1 , skill ) ;
1446: LD_INT 0
1448: PPUSH
1449: LD_INT 1
1451: PPUSH
1452: LD_VAR 0 2
1456: PPUSH
1457: CALL_OW 380
// un := CreateHuman ;
1461: LD_ADDR_VAR 0 4
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// if i mod 2 = 0 then
1471: LD_VAR 0 3
1475: PUSH
1476: LD_INT 2
1478: MOD
1479: PUSH
1480: LD_INT 0
1482: EQUAL
1483: IFFALSE 1531
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1485: LD_ADDR_EXP 19
1489: PUSH
1490: LD_EXP 19
1494: PPUSH
1495: LD_EXP 19
1499: PUSH
1500: LD_INT 1
1502: PLUS
1503: PPUSH
1504: LD_VAR 0 4
1508: PPUSH
1509: CALL_OW 2
1513: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1514: LD_VAR 0 4
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 49
// end else
1529: GO 1575
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1531: LD_ADDR_EXP 20
1535: PUSH
1536: LD_EXP 20
1540: PPUSH
1541: LD_EXP 20
1545: PUSH
1546: LD_INT 1
1548: PLUS
1549: PPUSH
1550: LD_VAR 0 4
1554: PPUSH
1555: CALL_OW 2
1559: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1560: LD_VAR 0 4
1564: PPUSH
1565: LD_INT 4
1567: PPUSH
1568: LD_INT 0
1570: PPUSH
1571: CALL_OW 49
// end ; end ;
1575: GO 1443
1577: POP
1578: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1579: LD_ADDR_VAR 0 3
1583: PUSH
1584: LD_INT 22
1586: PUSH
1587: LD_INT 3
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 30
1596: PUSH
1597: LD_INT 31
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PPUSH
1608: CALL_OW 69
1612: PUSH
1613: FOR_IN
1614: IFFALSE 1632
// PrepareSolBun ( skill , i ) ;
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 3
1625: PPUSH
1626: CALL 231 0 2
1630: GO 1613
1632: POP
1633: POP
// for i = 1 to 2 do
1634: LD_ADDR_VAR 0 3
1638: PUSH
1639: DOUBLE
1640: LD_INT 1
1642: DEC
1643: ST_TO_ADDR
1644: LD_INT 2
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1779
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1650: LD_ADDR_VAR 0 4
1654: PUSH
1655: LD_INT 3
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: LD_INT 22
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 42
1672: PPUSH
1673: LD_INT 100
1675: PPUSH
1676: CALL 367 0 7
1680: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1681: LD_INT 0
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_VAR 0 2
1691: PPUSH
1692: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1696: CALL_OW 44
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 131
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_VAR 0 3
1729: ARRAY
1730: PPUSH
1731: LD_INT 14
1733: PUSH
1734: LD_INT 87
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_VAR 0 3
1745: ARRAY
1746: PPUSH
1747: LD_INT 0
1749: PPUSH
1750: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1754: LD_ADDR_EXP 21
1758: PUSH
1759: LD_EXP 21
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: LD_VAR 0 4
1771: PPUSH
1772: CALL_OW 2
1776: ST_TO_ADDR
// end ;
1777: GO 1647
1779: POP
1780: POP
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
1781: LD_ADDR_VAR 0 3
1785: PUSH
1786: DOUBLE
1787: LD_INT 1
1789: DEC
1790: ST_TO_ADDR
1791: LD_INT 2
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 3
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_OWVAR 67
1809: ARRAY
1810: PUSH
1811: FOR_TO
1812: IFFALSE 1903
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1814: LD_INT 2
1816: PUSH
1817: LD_INT 1
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_VAR 0 3
1832: ARRAY
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: LD_INT 1
1839: PPUSH
1840: CALL_OW 380
// un := CreateHuman ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: CALL_OW 44
1853: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1854: LD_ADDR_EXP 22
1858: PUSH
1859: LD_EXP 22
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: LD_VAR 0 4
1871: PPUSH
1872: CALL_OW 2
1876: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1877: LD_VAR 0 4
1881: PPUSH
1882: LD_INT 10
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL_OW 49
// ComHold ( un ) ;
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL_OW 140
// end ;
1901: GO 1811
1903: POP
1904: POP
// if Difficulty < 3 then
1905: LD_OWVAR 67
1909: PUSH
1910: LD_INT 3
1912: LESS
1913: IFFALSE 1917
// exit ;
1915: GO 1960
// PrepareHuman ( false , 1 , skill ) ;
1917: LD_INT 0
1919: PPUSH
1920: LD_INT 1
1922: PPUSH
1923: LD_VAR 0 2
1927: PPUSH
1928: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1932: LD_ADDR_EXP 23
1936: PUSH
1937: CALL_OW 44
1941: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1942: LD_EXP 23
1946: PPUSH
1947: LD_INT 82
1949: PPUSH
1950: LD_INT 2
1952: PPUSH
1953: LD_INT 0
1955: PPUSH
1956: CALL_OW 48
// end ;
1960: LD_VAR 0 1
1964: RET
// every 0 0$01 trigger active_road_patrol do
1965: LD_EXP 7
1969: IFFALSE 2035
1971: GO 1973
1973: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1974: LD_EXP 21
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PPUSH
1983: LD_STRING road
1985: PPUSH
1986: LD_INT 70
1988: PPUSH
1989: LD_INT 131
1991: PUSH
1992: LD_INT 87
1994: PUSH
1995: LD_INT 107
1997: PUSH
1998: LD_INT 75
2000: PUSH
2001: LD_INT 107
2003: PUSH
2004: LD_INT 66
2006: PUSH
2007: LD_INT 114
2009: PUSH
2010: LD_INT 61
2012: PUSH
2013: LD_INT 107
2015: PUSH
2016: LD_INT 34
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: PPUSH
2031: CALL 455 0 4
2035: END
// every 0 0$01 trigger active_road_patrol do
2036: LD_EXP 7
2040: IFFALSE 2098
2042: GO 2044
2044: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2045: LD_EXP 21
2049: PUSH
2050: LD_INT 2
2052: ARRAY
2053: PPUSH
2054: LD_STRING road
2056: PPUSH
2057: LD_INT 70
2059: PPUSH
2060: LD_INT 21
2062: PUSH
2063: LD_INT 12
2065: PUSH
2066: LD_INT 37
2068: PUSH
2069: LD_INT 30
2071: PUSH
2072: LD_INT 65
2074: PUSH
2075: LD_INT 62
2077: PUSH
2078: LD_INT 107
2080: PUSH
2081: LD_INT 76
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL 455 0 4
2098: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2099: LD_EXP 23
2103: PPUSH
2104: CALL_OW 302
2108: IFFALSE 2170
2110: GO 2112
2112: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2113: LD_EXP 23
2117: PPUSH
2118: LD_STRING forest
2120: PPUSH
2121: LD_INT 35
2123: PPUSH
2124: LD_INT 52
2126: PUSH
2127: LD_INT 15
2129: PUSH
2130: LD_INT 81
2132: PUSH
2133: LD_INT 9
2135: PUSH
2136: LD_INT 120
2138: PUSH
2139: LD_INT 52
2141: PUSH
2142: LD_INT 135
2144: PUSH
2145: LD_INT 80
2147: PUSH
2148: LD_INT 122
2150: PUSH
2151: LD_INT 95
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: PPUSH
2166: CALL 455 0 4
2170: END
// every 0 0$01 trigger macmilan_use_radio do
2171: LD_EXP 5
2175: IFFALSE 2236
2177: GO 2179
2179: DISABLE
// begin active_road_patrol := false ;
2180: LD_ADDR_EXP 7
2184: PUSH
2185: LD_INT 0
2187: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2188: LD_EXP 21
2192: PPUSH
2193: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2197: LD_EXP 21
2201: PPUSH
2202: LD_INT 72
2204: PPUSH
2205: LD_INT 41
2207: PPUSH
2208: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2212: LD_EXP 20
2216: PPUSH
2217: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2221: LD_EXP 20
2225: PPUSH
2226: LD_INT 72
2228: PPUSH
2229: LD_INT 41
2231: PPUSH
2232: CALL_OW 174
// end ;
2236: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2237: LD_INT 9
2239: PPUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 70
2254: IFFALSE 2328
2256: GO 2258
2258: DISABLE
2259: LD_INT 0
2261: PPUSH
// begin enable ;
2262: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2263: LD_ADDR_VAR 0 1
2267: PUSH
2268: LD_INT 9
2270: PPUSH
2271: LD_INT 22
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL_OW 70
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2290: LD_EXP 20
2294: PPUSH
2295: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2299: LD_EXP 20
2303: PPUSH
2304: LD_VAR 0 1
2308: PPUSH
2309: CALL_OW 250
2313: PPUSH
2314: LD_VAR 0 1
2318: PPUSH
2319: CALL_OW 251
2323: PPUSH
2324: CALL_OW 174
// end ;
2328: PPOPN 1
2330: END
// every 0 0$01 trigger GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 do
2331: LD_EXP 21
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: CALL_OW 256
2344: PUSH
2345: LD_INT 999
2347: LESS
2348: PUSH
2349: LD_EXP 21
2353: PUSH
2354: LD_INT 2
2356: ARRAY
2357: PPUSH
2358: CALL_OW 256
2362: PUSH
2363: LD_INT 999
2365: LESS
2366: OR
2367: IFFALSE 2394
2369: GO 2371
2371: DISABLE
// begin active_road_patrol := false ;
2372: LD_ADDR_EXP 7
2376: PUSH
2377: LD_INT 0
2379: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2380: LD_EXP 21
2384: PPUSH
2385: LD_EXP 14
2389: PPUSH
2390: CALL_OW 115
// end ;
2394: END
// every 0 0$01 trigger macmilan_in_trap do
2395: LD_EXP 8
2399: IFFALSE 2445
2401: GO 2403
2403: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2404: LD_EXP 20
2408: PPUSH
2409: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2413: LD_EXP 19
2417: PUSH
2418: LD_EXP 20
2422: ADD
2423: PUSH
2424: LD_EXP 24
2428: ADD
2429: PUSH
2430: LD_EXP 21
2434: ADD
2435: PPUSH
2436: LD_EXP 14
2440: PPUSH
2441: CALL_OW 115
// end ;
2445: END
// every 0 0$01 trigger meta_action do
2446: LD_EXP 9
2450: IFFALSE 2496
2452: GO 2454
2454: DISABLE
// begin active_road_patrol := false ;
2455: LD_ADDR_EXP 7
2459: PUSH
2460: LD_INT 0
2462: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2463: LD_EXP 19
2467: PUSH
2468: LD_EXP 20
2472: ADD
2473: PUSH
2474: LD_EXP 24
2478: ADD
2479: PUSH
2480: LD_EXP 21
2484: ADD
2485: PPUSH
2486: LD_INT 93
2488: PPUSH
2489: LD_INT 1
2491: PPUSH
2492: CALL_OW 114
// end ;
2496: END
// every 0 0$20 trigger send_troops_to_forest do
2497: LD_EXP 13
2501: IFFALSE 2555
2503: GO 2505
2505: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2506: LD_EXP 23
2510: PPUSH
2511: CALL_OW 302
2515: NOT
2516: IFFALSE 2520
// exit ;
2518: GO 2555
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2520: LD_EXP 19
2524: PUSH
2525: LD_EXP 24
2529: ADD
2530: PPUSH
2531: LD_EXP 23
2535: PPUSH
2536: CALL_OW 252
2540: PPUSH
2541: LD_EXP 23
2545: PPUSH
2546: CALL_OW 253
2550: PPUSH
2551: CALL_OW 114
// end ; end_of_file
2555: END
// export function Action ; begin
2556: LD_INT 0
2558: PPUSH
// InGameOn ;
2559: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2563: LD_INT 79
2565: PPUSH
2566: LD_INT 76
2568: PPUSH
2569: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2573: LD_INT 10
2575: PPUSH
2576: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2580: LD_EXP 14
2584: PPUSH
2585: LD_INT 80
2587: PPUSH
2588: LD_INT 79
2590: PPUSH
2591: LD_INT 1
2593: PPUSH
2594: CALL_OW 48
// Wait ( 0 0$03 ) ;
2598: LD_INT 105
2600: PPUSH
2601: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2605: LD_EXP 14
2609: PPUSH
2610: LD_INT 80
2612: PPUSH
2613: LD_INT 76
2615: PPUSH
2616: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2620: LD_EXP 14
2624: PPUSH
2625: LD_STRING D1-JMM-1
2627: PPUSH
2628: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2632: LD_INT 10
2634: PPUSH
2635: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2639: LD_EXP 14
2643: PPUSH
2644: LD_INT 76
2646: PPUSH
2647: LD_INT 76
2649: PPUSH
2650: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2654: LD_EXP 14
2658: PPUSH
2659: LD_STRING D1-JMM-1a
2661: PPUSH
2662: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2666: LD_INT 10
2668: PPUSH
2669: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2673: LD_EXP 14
2677: PPUSH
2678: LD_INT 83
2680: PPUSH
2681: LD_INT 66
2683: PPUSH
2684: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2688: LD_EXP 14
2692: PPUSH
2693: LD_STRING D1-JMM-1b
2695: PPUSH
2696: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2700: LD_INT 18
2702: PPUSH
2703: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2707: LD_EXP 14
2711: PPUSH
2712: LD_STRING D1-JMM-1c
2714: PPUSH
2715: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2719: LD_INT 7
2721: PPUSH
2722: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2726: LD_EXP 17
2730: PPUSH
2731: LD_STRING D1-Pow-1
2733: PPUSH
2734: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2738: LD_EXP 14
2742: PPUSH
2743: LD_STRING D1-JMM-2
2745: PPUSH
2746: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2750: LD_EXP 17
2754: PPUSH
2755: LD_STRING D1-Pow-2
2757: PPUSH
2758: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2762: LD_EXP 14
2766: PPUSH
2767: LD_STRING D1-JMM-3
2769: PPUSH
2770: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2774: LD_EXP 17
2778: PPUSH
2779: LD_STRING D1-Pow-3
2781: PPUSH
2782: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2786: LD_EXP 14
2790: PPUSH
2791: LD_STRING D1-JMM-4
2793: PPUSH
2794: CALL_OW 88
// ComFree ( JMM ) ;
2798: LD_EXP 14
2802: PPUSH
2803: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2807: LD_INT 10
2809: PPUSH
2810: CALL_OW 67
// InGameOff ;
2814: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2818: LD_STRING M1
2820: PPUSH
2821: CALL_OW 337
// active_russian_dialog := true ;
2825: LD_ADDR_EXP 2
2829: PUSH
2830: LD_INT 1
2832: ST_TO_ADDR
// active_road_patrol := true ;
2833: LD_ADDR_EXP 7
2837: PUSH
2838: LD_INT 1
2840: ST_TO_ADDR
// PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2841: LD_EXP 15
2845: PPUSH
2846: LD_INT 41
2848: PPUSH
2849: LD_INT 71
2851: PPUSH
2852: LD_INT 0
2854: PPUSH
2855: CALL_OW 48
// ComHold ( Bobby ) ;
2859: LD_EXP 15
2863: PPUSH
2864: CALL_OW 140
// PlaceUnitXY ( Cyrus , 98 , 51 , false ) ;
2868: LD_EXP 16
2872: PPUSH
2873: LD_INT 98
2875: PPUSH
2876: LD_INT 51
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
2886: LD_EXP 16
2890: PPUSH
2891: LD_INT 79
2893: PPUSH
2894: LD_INT 34
2896: PPUSH
2897: CALL_OW 111
// ComCrawl ( Cyrus ) ;
2901: LD_EXP 16
2905: PPUSH
2906: CALL_OW 137
// SaveForQuickRestart ;
2910: CALL_OW 22
// end ;
2914: LD_VAR 0 1
2918: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
2919: LD_EXP 2
2923: IFFALSE 3495
2925: GO 2927
2927: DISABLE
2928: LD_INT 0
2930: PPUSH
// begin wait_points := 0 ;
2931: LD_ADDR_VAR 0 1
2935: PUSH
2936: LD_INT 0
2938: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
2939: LD_INT 70
2941: PPUSH
2942: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
2946: LD_EXP 19
2950: PPUSH
2951: LD_INT 79
2953: PPUSH
2954: LD_INT 83
2956: PPUSH
2957: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
2961: LD_EXP 19
2965: PUSH
2966: LD_INT 2
2968: ARRAY
2969: PPUSH
2970: LD_STRING D1R-Rus1-1
2972: PPUSH
2973: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
2977: LD_EXP 19
2981: PUSH
2982: LD_INT 1
2984: ARRAY
2985: PPUSH
2986: LD_STRING D1R-Rus2-1
2988: PPUSH
2989: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
2993: LD_EXP 20
2997: PPUSH
2998: LD_INT 79
3000: PPUSH
3001: LD_INT 83
3003: PPUSH
3004: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3008: LD_INT 35
3010: PPUSH
3011: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3015: LD_EXP 19
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 79
3026: PPUSH
3027: LD_INT 82
3029: PPUSH
3030: CALL_OW 297
3034: PUSH
3035: LD_INT 5
3037: LESS
3038: IFFALSE 3008
// if not IsInArea ( JMM , jmm_spot ) then
3040: LD_EXP 14
3044: PPUSH
3045: LD_INT 5
3047: PPUSH
3048: CALL_OW 308
3052: NOT
3053: IFFALSE 3073
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3055: LD_EXP 19
3059: PUSH
3060: LD_INT 1
3062: ARRAY
3063: PPUSH
3064: LD_STRING D1Ra-Rus2-1
3066: PPUSH
3067: CALL_OW 88
3071: GO 3209
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3073: LD_EXP 19
3077: PUSH
3078: LD_INT 2
3080: ARRAY
3081: PPUSH
3082: LD_STRING D1Rb-Rus1-1
3084: PPUSH
3085: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3089: LD_EXP 19
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PPUSH
3098: LD_STRING D1Rb-Rus2-1
3100: PPUSH
3101: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3105: LD_EXP 19
3109: PUSH
3110: LD_EXP 20
3114: ADD
3115: PPUSH
3116: LD_EXP 14
3120: PPUSH
3121: CALL_OW 250
3125: PPUSH
3126: LD_EXP 14
3130: PPUSH
3131: CALL_OW 251
3135: PPUSH
3136: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3140: LD_INT 35
3142: PPUSH
3143: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3147: LD_EXP 14
3151: PPUSH
3152: LD_INT 5
3154: PPUSH
3155: CALL_OW 308
3159: NOT
3160: PUSH
3161: LD_INT 3
3163: PPUSH
3164: LD_EXP 14
3168: PPUSH
3169: CALL_OW 292
3173: NOT
3174: AND
3175: IFFALSE 3140
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3177: LD_EXP 19
3181: PUSH
3182: LD_INT 2
3184: ARRAY
3185: PPUSH
3186: LD_STRING D1Rc-Rus1-1
3188: PPUSH
3189: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3193: LD_EXP 19
3197: PUSH
3198: LD_INT 1
3200: ARRAY
3201: PPUSH
3202: LD_STRING D1Ra-Rus2-1a
3204: PPUSH
3205: CALL_OW 88
// end ; wait_points := 10 ;
3209: LD_ADDR_VAR 0 1
3213: PUSH
3214: LD_INT 10
3216: ST_TO_ADDR
// if Difficulty > 1 then
3217: LD_OWVAR 67
3221: PUSH
3222: LD_INT 1
3224: GREATER
3225: IFFALSE 3256
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3227: LD_EXP 19
3231: PPUSH
3232: LD_INT 78
3234: PPUSH
3235: LD_INT 95
3237: PPUSH
3238: CALL_OW 114
// wait_points := wait_points + 15 ;
3242: LD_ADDR_VAR 0 1
3246: PUSH
3247: LD_VAR 0 1
3251: PUSH
3252: LD_INT 15
3254: PLUS
3255: ST_TO_ADDR
// end ; repeat wait ( 0 0$01 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// wait_points := wait_points - 1 ;
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: LD_VAR 0 1
3272: PUSH
3273: LD_INT 1
3275: MINUS
3276: ST_TO_ADDR
// if See ( 3 , JMM ) then
3277: LD_INT 3
3279: PPUSH
3280: LD_EXP 14
3284: PPUSH
3285: CALL_OW 292
3289: IFFALSE 3343
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3291: LD_EXP 19
3295: PUSH
3296: LD_INT 2
3298: ARRAY
3299: PPUSH
3300: LD_STRING D1Rb-Rus1-1
3302: PPUSH
3303: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3307: LD_EXP 19
3311: PPUSH
3312: LD_EXP 14
3316: PPUSH
3317: CALL_OW 250
3321: PPUSH
3322: LD_EXP 14
3326: PPUSH
3327: CALL_OW 251
3331: PPUSH
3332: CALL_OW 114
// Wait ( 0 0$03 ) ;
3336: LD_INT 105
3338: PPUSH
3339: CALL_OW 67
// end ; until wait_points = 0 ;
3343: LD_VAR 0 1
3347: PUSH
3348: LD_INT 0
3350: EQUAL
3351: IFFALSE 3256
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3353: LD_EXP 19
3357: PPUSH
3358: LD_INT 45
3360: PPUSH
3361: LD_INT 5
3363: PPUSH
3364: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3368: LD_EXP 20
3372: PPUSH
3373: LD_INT 26
3375: PPUSH
3376: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3380: LD_INT 35
3382: PPUSH
3383: CALL_OW 67
// if See ( 3 , JMM ) then
3387: LD_INT 3
3389: PPUSH
3390: LD_EXP 14
3394: PPUSH
3395: CALL_OW 292
3399: IFFALSE 3455
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3401: LD_EXP 19
3405: PUSH
3406: LD_INT 2
3408: ARRAY
3409: PPUSH
3410: LD_STRING D1Rb-Rus1-1
3412: PPUSH
3413: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3417: LD_EXP 19
3421: PPUSH
3422: LD_EXP 14
3426: PPUSH
3427: CALL_OW 250
3431: PPUSH
3432: LD_EXP 14
3436: PPUSH
3437: CALL_OW 251
3441: PPUSH
3442: CALL_OW 114
// Wait ( 0 0$50 ) ;
3446: LD_INT 1750
3448: PPUSH
3449: CALL_OW 67
// end else
3453: GO 3470
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3455: LD_EXP 19
3459: PPUSH
3460: LD_INT 45
3462: PPUSH
3463: LD_INT 5
3465: PPUSH
3466: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3470: LD_EXP 19
3474: PUSH
3475: LD_INT 1
3477: ARRAY
3478: PPUSH
3479: LD_INT 45
3481: PPUSH
3482: LD_INT 5
3484: PPUSH
3485: CALL_OW 297
3489: PUSH
3490: LD_INT 10
3492: LESS
3493: IFFALSE 3380
// end ;
3495: PPOPN 1
3497: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3498: LD_EXP 14
3502: PPUSH
3503: LD_EXP 15
3507: PPUSH
3508: CALL_OW 296
3512: PUSH
3513: LD_INT 9
3515: LESS
3516: IFFALSE 3967
3518: GO 3520
3520: DISABLE
// begin ComWalk ( Bobby ) ;
3521: LD_EXP 15
3525: PPUSH
3526: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3530: LD_EXP 15
3534: PPUSH
3535: LD_EXP 14
3539: PPUSH
3540: CALL_OW 250
3544: PPUSH
3545: LD_EXP 14
3549: PPUSH
3550: CALL_OW 251
3554: PPUSH
3555: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// until See ( 4 , JMM ) ;
3566: LD_INT 4
3568: PPUSH
3569: LD_EXP 14
3573: PPUSH
3574: CALL_OW 292
3578: IFFALSE 3559
// InGameOn ;
3580: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3584: LD_EXP 14
3588: PPUSH
3589: LD_EXP 15
3593: PPUSH
3594: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3598: LD_EXP 6
3602: PUSH
3603: LD_EXP 16
3607: PPUSH
3608: CALL_OW 302
3612: AND
3613: PUSH
3614: LD_EXP 14
3618: PPUSH
3619: LD_EXP 16
3623: PPUSH
3624: CALL_OW 296
3628: PUSH
3629: LD_INT 10
3631: LESS
3632: AND
3633: IFFALSE 3678
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
3635: LD_EXP 16
3639: PPUSH
3640: LD_EXP 14
3644: PPUSH
3645: CALL_OW 250
3649: PPUSH
3650: LD_EXP 14
3654: PPUSH
3655: CALL_OW 251
3659: PPUSH
3660: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
3664: LD_EXP 16
3668: PPUSH
3669: LD_EXP 15
3673: PPUSH
3674: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
3678: LD_EXP 14
3682: PPUSH
3683: LD_STRING D2-JMM-1
3685: PPUSH
3686: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3690: LD_INT 10
3692: PPUSH
3693: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_EXP 14
3706: PPUSH
3707: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
3711: LD_EXP 15
3715: PPUSH
3716: LD_STRING D2-Bobby-1
3718: PPUSH
3719: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3723: LD_EXP 14
3727: PPUSH
3728: LD_STRING D2-JMM-2
3730: PPUSH
3731: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3735: LD_EXP 15
3739: PPUSH
3740: LD_EXP 14
3744: PPUSH
3745: CALL_OW 250
3749: PPUSH
3750: LD_EXP 14
3754: PPUSH
3755: CALL_OW 251
3759: PPUSH
3760: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
3764: LD_EXP 15
3768: PPUSH
3769: LD_STRING D2-Bobby-2
3771: PPUSH
3772: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3776: LD_EXP 14
3780: PPUSH
3781: LD_STRING D2-JMM-3
3783: PPUSH
3784: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
3788: LD_EXP 15
3792: PPUSH
3793: LD_EXP 14
3797: PPUSH
3798: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
3802: LD_EXP 15
3806: PPUSH
3807: LD_STRING D2-Bobby-3
3809: PPUSH
3810: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3814: LD_EXP 14
3818: PPUSH
3819: LD_STRING D2-JMM-4
3821: PPUSH
3822: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
3826: LD_EXP 15
3830: PPUSH
3831: LD_STRING D2-Bobby-4
3833: PPUSH
3834: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
3838: LD_EXP 14
3842: PPUSH
3843: LD_STRING D2-JMM-5
3845: PPUSH
3846: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
3850: LD_EXP 15
3854: PPUSH
3855: LD_STRING D2-Bobby-5
3857: PPUSH
3858: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3862: LD_EXP 14
3866: PPUSH
3867: LD_STRING D2-JMM-6
3869: PPUSH
3870: CALL_OW 88
// if not powell_contact then
3874: LD_EXP 4
3878: NOT
3879: IFFALSE 3905
// begin Say ( Bobby , D2-Bobby-6 ) ;
3881: LD_EXP 15
3885: PPUSH
3886: LD_STRING D2-Bobby-6
3888: PPUSH
3889: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
3893: LD_EXP 14
3897: PPUSH
3898: LD_STRING D2-JMM-7
3900: PPUSH
3901: CALL_OW 88
// end ; InGameOff ;
3905: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
3909: LD_EXP 15
3913: PPUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
3921: LD_EXP 14
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 139
// bobby_in_squad := true ;
3939: LD_ADDR_EXP 3
3943: PUSH
3944: LD_INT 1
3946: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
3947: LD_EXP 4
3951: PUSH
3952: LD_EXP 6
3956: NOT
3957: AND
3958: IFFALSE 3967
// ChangeMissionObjectives ( M2b ) ;
3960: LD_STRING M2b
3962: PPUSH
3963: CALL_OW 337
// end ;
3967: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad do
3968: LD_EXP 2
3972: PUSH
3973: LD_EXP 3
3977: NOT
3978: AND
3979: IFFALSE 3999
3981: GO 3983
3983: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
3984: LD_EXP 15
3988: PPUSH
3989: LD_INT 75
3991: PPUSH
3992: LD_INT 83
3994: PPUSH
3995: CALL_OW 111
3999: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4000: LD_EXP 6
4004: PUSH
4005: LD_EXP 3
4009: NOT
4010: AND
4011: IFFALSE 4040
4013: GO 4015
4015: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4016: LD_EXP 15
4020: PPUSH
4021: LD_INT 105
4023: PPUSH
4024: LD_INT 97
4026: PPUSH
4027: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4031: LD_EXP 15
4035: PPUSH
4036: CALL_OW 197
// end ;
4040: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4041: LD_EXP 14
4045: PPUSH
4046: LD_INT 6
4048: PPUSH
4049: CALL_OW 308
4053: PUSH
4054: LD_EXP 14
4058: PPUSH
4059: LD_EXP 15
4063: PPUSH
4064: CALL_OW 296
4068: PUSH
4069: LD_INT 7
4071: LESS
4072: AND
4073: PUSH
4074: LD_EXP 3
4078: AND
4079: IFFALSE 4126
4081: GO 4083
4083: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4084: LD_EXP 14
4088: PUSH
4089: LD_EXP 15
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PPUSH
4098: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4102: LD_EXP 14
4106: PPUSH
4107: LD_STRING D2a-JMM-1
4109: PPUSH
4110: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4114: LD_EXP 15
4118: PPUSH
4119: LD_STRING D2a-Bobby-1
4121: PPUSH
4122: CALL_OW 88
// end ;
4126: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4127: LD_EXP 2
4131: PUSH
4132: LD_INT 3
4134: PPUSH
4135: LD_EXP 14
4139: PPUSH
4140: CALL_OW 292
4144: NOT
4145: AND
4146: IFFALSE 4322
4148: GO 4150
4150: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4151: LD_INT 350
4153: PPUSH
4154: LD_INT 700
4156: PPUSH
4157: CALL_OW 12
4161: PPUSH
4162: CALL_OW 67
// InGameOn ;
4166: CALL_OW 8
// DialogueOn ;
4170: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4174: LD_EXP 17
4178: PPUSH
4179: LD_STRING D3-Pow-1
4181: PPUSH
4182: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4186: LD_EXP 14
4190: PPUSH
4191: LD_STRING D3-JMM-1
4193: PPUSH
4194: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4198: LD_EXP 17
4202: PPUSH
4203: LD_STRING D3-Pow-2
4205: PPUSH
4206: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4210: LD_EXP 14
4214: PPUSH
4215: LD_STRING D3-JMM-2
4217: PPUSH
4218: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4222: LD_EXP 17
4226: PPUSH
4227: LD_STRING D3-Pow-3
4229: PPUSH
4230: CALL_OW 94
// DialogueOff ;
4234: CALL_OW 7
// InGameOff ;
4238: CALL_OW 9
// powell_contact := true ;
4242: LD_ADDR_EXP 4
4246: PUSH
4247: LD_INT 1
4249: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4250: LD_INT 10
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: CALL_OW 424
// uc_side := 4 ;
4260: LD_ADDR_OWVAR 20
4264: PUSH
4265: LD_INT 4
4267: ST_TO_ADDR
// uc_nation := 1 ;
4268: LD_ADDR_OWVAR 21
4272: PUSH
4273: LD_INT 1
4275: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4276: LD_ADDR_EXP 17
4280: PUSH
4281: LD_STRING Powell
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL 174 0 2
4291: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4292: LD_STRING M2
4294: PPUSH
4295: CALL_OW 337
// if not bobby_in_squad then
4299: LD_EXP 3
4303: NOT
4304: IFFALSE 4315
// ChangeMissionObjectives ( M2a ) else
4306: LD_STRING M2a
4308: PPUSH
4309: CALL_OW 337
4313: GO 4322
// ChangeMissionObjectives ( M2b ) ;
4315: LD_STRING M2b
4317: PPUSH
4318: CALL_OW 337
// end ;
4322: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4323: LD_EXP 14
4327: PPUSH
4328: LD_INT 7
4330: PPUSH
4331: CALL_OW 308
4335: IFFALSE 4470
4337: GO 4339
4339: DISABLE
// begin DialogueOn ;
4340: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4344: LD_EXP 18
4348: PPUSH
4349: LD_STRING D4-Rus3-1
4351: PPUSH
4352: CALL_OW 94
// DialogueOff ;
4356: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4360: LD_STRING M3a
4362: PPUSH
4363: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4367: LD_INT 11
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: CALL_OW 424
// Wait ( 0 0$02 ) ;
4377: LD_INT 70
4379: PPUSH
4380: CALL_OW 67
// DialogueOn ;
4384: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4388: LD_EXP 17
4392: PPUSH
4393: LD_STRING D4-Pow-1
4395: PPUSH
4396: CALL_OW 94
// DialogueOff ;
4400: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4404: LD_STRING M3b
4406: PPUSH
4407: CALL_OW 337
// case Query ( Q1 ) of 1 :
4411: LD_STRING Q1
4413: PPUSH
4414: CALL_OW 97
4418: PUSH
4419: LD_INT 1
4421: DOUBLE
4422: EQUAL
4423: IFTRUE 4427
4425: GO 4458
4427: POP
// begin macmilan_use_radio := true ;
4428: LD_ADDR_EXP 5
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// DialogueOn ;
4436: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4440: LD_EXP 14
4444: PPUSH
4445: LD_STRING D4a-JMM-1
4447: PPUSH
4448: CALL_OW 88
// DialogueOff ;
4452: CALL_OW 7
// end ; 2 :
4456: GO 4470
4458: LD_INT 2
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4469
4466: POP
// ; end ;
4467: GO 4470
4469: POP
// end ;
4470: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4471: LD_EXP 14
4475: PPUSH
4476: LD_EXP 16
4480: PPUSH
4481: CALL_OW 296
4485: PUSH
4486: LD_INT 8
4488: LESS
4489: IFFALSE 4740
4491: GO 4493
4493: DISABLE
// begin InGameOn ;
4494: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4498: LD_EXP 14
4502: PPUSH
4503: LD_EXP 16
4507: PPUSH
4508: CALL_OW 250
4512: PPUSH
4513: LD_EXP 16
4517: PPUSH
4518: CALL_OW 251
4522: PPUSH
4523: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4527: LD_EXP 15
4531: PPUSH
4532: CALL_OW 302
4536: PUSH
4537: LD_EXP 3
4541: AND
4542: IFFALSE 4573
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4544: LD_EXP 15
4548: PPUSH
4549: LD_EXP 14
4553: PPUSH
4554: CALL_OW 250
4558: PPUSH
4559: LD_EXP 14
4563: PPUSH
4564: CALL_OW 251
4568: PPUSH
4569: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4573: LD_EXP 14
4577: PPUSH
4578: LD_STRING D5-JMM-1
4580: PPUSH
4581: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4585: LD_INT 10
4587: PPUSH
4588: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4592: LD_EXP 14
4596: PPUSH
4597: LD_EXP 16
4601: PPUSH
4602: CALL_OW 119
// ComWalk ( Cyrus ) ;
4606: LD_EXP 16
4610: PPUSH
4611: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4615: LD_EXP 16
4619: PPUSH
4620: LD_EXP 14
4624: PPUSH
4625: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
4629: LD_EXP 16
4633: PPUSH
4634: LD_STRING D5-Cyrus-1
4636: PPUSH
4637: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
4641: LD_EXP 15
4645: PPUSH
4646: CALL_OW 302
4650: PUSH
4651: LD_EXP 3
4655: AND
4656: IFFALSE 4696
// begin ComTurnUnit ( Bobby , Cyrus ) ;
4658: LD_EXP 15
4662: PPUSH
4663: LD_EXP 16
4667: PPUSH
4668: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
4672: LD_EXP 15
4676: PPUSH
4677: LD_STRING D5-Bobby-1
4679: PPUSH
4680: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
4684: LD_EXP 14
4688: PPUSH
4689: LD_STRING D5-JMM-2
4691: PPUSH
4692: CALL_OW 88
// end ; InGameOff ;
4696: CALL_OW 9
// cyrus_in_squad := true ;
4700: LD_ADDR_EXP 6
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
4708: LD_EXP 16
4712: PPUSH
4713: LD_INT 1
4715: PPUSH
4716: CALL_OW 235
// if powell_contact and not bobby_in_squad then
4720: LD_EXP 4
4724: PUSH
4725: LD_EXP 3
4729: NOT
4730: AND
4731: IFFALSE 4740
// ChangeMissionObjectives ( M2b ) ;
4733: LD_STRING M2b
4735: PPUSH
4736: CALL_OW 337
// end ;
4740: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
4741: LD_EXP 3
4745: PUSH
4746: LD_EXP 6
4750: AND
4751: IFFALSE 4763
4753: GO 4755
4755: DISABLE
// ChangeMissionObjectives ( M2c ) ;
4756: LD_STRING M2c
4758: PPUSH
4759: CALL_OW 337
4763: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
4764: LD_EXP 14
4768: PPUSH
4769: LD_INT 8
4771: PPUSH
4772: CALL_OW 308
4776: IFFALSE 4808
4778: GO 4780
4780: DISABLE
// begin macmilan_in_trap := true ;
4781: LD_ADDR_EXP 8
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4789: LD_INT 35
4791: PPUSH
4792: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
4796: LD_EXP 14
4800: PPUSH
4801: LD_STRING D4b-JMM-1
4803: PPUSH
4804: CALL_OW 88
// end ;
4808: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or GetLives ( russian_meta_guards [ russian_meta_guards ] ) < 999 do var i , hp ;
4809: LD_EXP 14
4813: PPUSH
4814: LD_EXP 22
4818: PUSH
4819: LD_EXP 22
4823: ARRAY
4824: PPUSH
4825: CALL_OW 296
4829: PUSH
4830: LD_INT 12
4832: LESS
4833: PUSH
4834: LD_EXP 22
4838: PUSH
4839: LD_EXP 22
4843: ARRAY
4844: PPUSH
4845: CALL_OW 256
4849: PUSH
4850: LD_INT 999
4852: LESS
4853: OR
4854: IFFALSE 5069
4856: GO 4858
4858: DISABLE
4859: LD_INT 0
4861: PPUSH
4862: PPUSH
// begin hp := [ 200 , 150 , 100 ] [ Difficulty ] ;
4863: LD_ADDR_VAR 0 2
4867: PUSH
4868: LD_INT 200
4870: PUSH
4871: LD_INT 150
4873: PUSH
4874: LD_INT 100
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: LD_OWVAR 67
4886: ARRAY
4887: ST_TO_ADDR
// for i in russian_meta_guards do
4888: LD_ADDR_VAR 0 1
4892: PUSH
4893: LD_EXP 22
4897: PUSH
4898: FOR_IN
4899: IFFALSE 4939
// if IsOk ( i ) then
4901: LD_VAR 0 1
4905: PPUSH
4906: CALL_OW 302
4910: IFFALSE 4937
// SetLives ( i , GetLives ( i ) - hp ) ;
4912: LD_VAR 0 1
4916: PPUSH
4917: LD_VAR 0 1
4921: PPUSH
4922: CALL_OW 256
4926: PUSH
4927: LD_VAR 0 2
4931: MINUS
4932: PPUSH
4933: CALL_OW 234
4937: GO 4898
4939: POP
4940: POP
// DialogueOn ;
4941: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
4945: LD_EXP 22
4949: PUSH
4950: LD_EXP 22
4954: ARRAY
4955: PPUSH
4956: LD_STRING D6-FRus1-1
4958: PPUSH
4959: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
4963: LD_EXP 14
4967: PPUSH
4968: LD_STRING D6-JMM-1
4970: PPUSH
4971: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
4975: LD_EXP 16
4979: PPUSH
4980: CALL_OW 302
4984: PUSH
4985: LD_EXP 6
4989: AND
4990: IFFALSE 5004
// Say ( Cyrus , D6-Cyrus-1 ) ;
4992: LD_EXP 16
4996: PPUSH
4997: LD_STRING D6-Cyrus-1
4999: PPUSH
5000: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5004: LD_EXP 15
5008: PPUSH
5009: CALL_OW 302
5013: PUSH
5014: LD_EXP 3
5018: AND
5019: IFFALSE 5033
// Say ( Bobby , D6-Bobby-1 ) ;
5021: LD_EXP 15
5025: PPUSH
5026: LD_STRING D6-Bobby-1
5028: PPUSH
5029: CALL_OW 88
// DialogueOff ;
5033: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5037: LD_INT 140
5039: PUSH
5040: LD_INT 105
5042: PUSH
5043: LD_INT 70
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_OWVAR 67
5055: ARRAY
5056: PPUSH
5057: CALL_OW 67
// meta_action := true ;
5061: LD_ADDR_EXP 9
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5072: LD_EXP 14
5076: PPUSH
5077: LD_INT 93
5079: PPUSH
5080: LD_INT 1
5082: PPUSH
5083: CALL_OW 297
5087: PUSH
5088: LD_INT 5
5090: LESS
5091: PUSH
5092: LD_INT 22
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 69
5106: PUSH
5107: LD_INT 1
5109: GREATER
5110: AND
5111: IFFALSE 5128
5113: GO 5115
5115: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5116: LD_EXP 14
5120: PPUSH
5121: LD_STRING D6a-JMM-1
5123: PPUSH
5124: CALL_OW 88
5128: END
// every 0 0$01 trigger IsDying ( JMM ) do
5129: LD_EXP 14
5133: PPUSH
5134: CALL_OW 303
5138: IFFALSE 5150
5140: GO 5142
5142: DISABLE
// YouLost ( JMM ) ;
5143: LD_STRING JMM
5145: PPUSH
5146: CALL_OW 104
5150: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5151: LD_EXP 15
5155: PPUSH
5156: LD_INT 10
5158: PPUSH
5159: CALL_OW 308
5163: IFFALSE 5212
5165: GO 5167
5167: DISABLE
// begin bobby_saved := true ;
5168: LD_ADDR_EXP 11
5172: PUSH
5173: LD_INT 1
5175: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5176: LD_EXP 15
5180: PPUSH
5181: CALL_OW 256
5185: PPUSH
5186: LD_STRING 01_BobbyLifePoints_1
5188: PPUSH
5189: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5193: LD_EXP 15
5197: PPUSH
5198: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5202: LD_STRING Bobby
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL_OW 101
// end ;
5212: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5213: LD_EXP 16
5217: PPUSH
5218: LD_INT 10
5220: PPUSH
5221: CALL_OW 308
5225: IFFALSE 5274
5227: GO 5229
5229: DISABLE
// begin cyrus_saved := true ;
5230: LD_ADDR_EXP 12
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5238: LD_EXP 16
5242: PPUSH
5243: CALL_OW 256
5247: PPUSH
5248: LD_STRING 01_CyrusLifePoints_1
5250: PPUSH
5251: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5255: LD_EXP 16
5259: PPUSH
5260: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5264: LD_STRING Cyrus
5266: PPUSH
5267: LD_INT 1
5269: PPUSH
5270: CALL_OW 101
// end ;
5274: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5275: LD_EXP 14
5279: PPUSH
5280: LD_INT 10
5282: PPUSH
5283: CALL_OW 308
5287: IFFALSE 5781
5289: GO 5291
5291: DISABLE
5292: LD_INT 0
5294: PPUSH
5295: PPUSH
5296: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5297: LD_EXP 12
5301: NOT
5302: PUSH
5303: LD_EXP 6
5307: AND
5308: PUSH
5309: LD_EXP 16
5313: PPUSH
5314: CALL_OW 302
5318: AND
5319: PUSH
5320: LD_EXP 11
5324: NOT
5325: PUSH
5326: LD_EXP 3
5330: AND
5331: PUSH
5332: LD_EXP 15
5336: PPUSH
5337: CALL_OW 302
5341: AND
5342: OR
5343: IFFALSE 5384
// case Query ( Q2 ) of 1 :
5345: LD_STRING Q2
5347: PPUSH
5348: CALL_OW 97
5352: PUSH
5353: LD_INT 1
5355: DOUBLE
5356: EQUAL
5357: IFTRUE 5361
5359: GO 5372
5361: POP
// wait_for_them := true ; 2 :
5362: LD_ADDR_VAR 0 3
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
5370: GO 5384
5372: LD_INT 2
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5383
5380: POP
// ; end ;
5381: GO 5384
5383: POP
// if wait_for_them then
5384: LD_VAR 0 3
5388: IFFALSE 5501
// repeat wait ( 0 0$01 ) ;
5390: LD_INT 35
5392: PPUSH
5393: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5397: LD_EXP 12
5401: PUSH
5402: LD_EXP 11
5406: AND
5407: PUSH
5408: LD_EXP 12
5412: PUSH
5413: LD_EXP 3
5417: NOT
5418: PUSH
5419: LD_EXP 15
5423: PPUSH
5424: CALL_OW 303
5428: OR
5429: PUSH
5430: LD_EXP 15
5434: PPUSH
5435: CALL_OW 301
5439: OR
5440: AND
5441: OR
5442: PUSH
5443: LD_EXP 11
5447: PUSH
5448: LD_EXP 6
5452: NOT
5453: PUSH
5454: LD_EXP 16
5458: PPUSH
5459: CALL_OW 303
5463: OR
5464: PUSH
5465: LD_EXP 16
5469: PPUSH
5470: CALL_OW 301
5474: OR
5475: AND
5476: OR
5477: PUSH
5478: LD_EXP 15
5482: PPUSH
5483: CALL_OW 301
5487: PUSH
5488: LD_EXP 16
5492: PPUSH
5493: CALL_OW 301
5497: AND
5498: OR
5499: IFFALSE 5390
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5501: LD_EXP 14
5505: PPUSH
5506: CALL_OW 256
5510: PPUSH
5511: LD_STRING 01_JMMLifePoints_1
5513: PPUSH
5514: CALL_OW 39
// RemoveUnit ( JMM ) ;
5518: LD_EXP 14
5522: PPUSH
5523: CALL_OW 64
// to_reward := [ JMM ] ;
5527: LD_ADDR_VAR 0 2
5531: PUSH
5532: LD_EXP 14
5536: PUSH
5537: EMPTY
5538: LIST
5539: ST_TO_ADDR
// if bobby_saved then
5540: LD_EXP 11
5544: IFFALSE 5562
// to_reward := to_reward ^ Bobby ;
5546: LD_ADDR_VAR 0 2
5550: PUSH
5551: LD_VAR 0 2
5555: PUSH
5556: LD_EXP 15
5560: ADD
5561: ST_TO_ADDR
// if cyrus_saved then
5562: LD_EXP 12
5566: IFFALSE 5584
// to_reward := to_reward ^ Cyrus ;
5568: LD_ADDR_VAR 0 2
5572: PUSH
5573: LD_VAR 0 2
5577: PUSH
5578: LD_EXP 16
5582: ADD
5583: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
5584: LD_STRING JMM
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: CALL_OW 101
// if not bobby_in_squad then
5594: LD_EXP 3
5598: NOT
5599: IFFALSE 5612
// AddMedal ( Bobby , - 1 ) ;
5601: LD_STRING Bobby
5603: PPUSH
5604: LD_INT 1
5606: NEG
5607: PPUSH
5608: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
5612: LD_EXP 11
5616: NOT
5617: PUSH
5618: LD_EXP 15
5622: PPUSH
5623: CALL_OW 303
5627: PUSH
5628: LD_EXP 15
5632: PPUSH
5633: CALL_OW 301
5637: OR
5638: AND
5639: IFFALSE 5652
// AddMedal ( Bobby , - 2 ) ;
5641: LD_STRING Bobby
5643: PPUSH
5644: LD_INT 2
5646: NEG
5647: PPUSH
5648: CALL_OW 101
// if not cyrus_in_squad then
5652: LD_EXP 6
5656: NOT
5657: IFFALSE 5670
// AddMedal ( Cyrus , - 1 ) ;
5659: LD_STRING Cyrus
5661: PPUSH
5662: LD_INT 1
5664: NEG
5665: PPUSH
5666: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
5670: LD_EXP 12
5674: NOT
5675: PUSH
5676: LD_EXP 16
5680: PPUSH
5681: CALL_OW 303
5685: PUSH
5686: LD_EXP 16
5690: PPUSH
5691: CALL_OW 301
5695: OR
5696: AND
5697: IFFALSE 5710
// AddMedal ( Cyrus , - 2 ) ;
5699: LD_STRING Cyrus
5701: PPUSH
5702: LD_INT 2
5704: NEG
5705: PPUSH
5706: CALL_OW 101
// GiveMedals ( MAIN ) ;
5710: LD_STRING MAIN
5712: PPUSH
5713: CALL_OW 102
// RewardPeople ( to_reward ) ;
5717: LD_VAR 0 2
5721: PPUSH
5722: CALL_OW 43
// if bobby_saved then
5726: LD_EXP 11
5730: IFFALSE 5744
// SaveCharacters ( Bobby , Bobby ) ;
5732: LD_EXP 15
5736: PPUSH
5737: LD_STRING Bobby
5739: PPUSH
5740: CALL_OW 38
// if cyrus_saved then
5744: LD_EXP 12
5748: IFFALSE 5762
// SaveCharacters ( Cyrus , Cyrus ) ;
5750: LD_EXP 16
5754: PPUSH
5755: LD_STRING Cyrus
5757: PPUSH
5758: CALL_OW 38
// SaveCharacters ( JMM , JMM ) ;
5762: LD_EXP 14
5766: PPUSH
5767: LD_STRING JMM
5769: PPUSH
5770: CALL_OW 38
// SetNextMission ( 1 ) ;
5774: LD_INT 1
5776: PPUSH
5777: CALL_OW 536
// end ;
5781: PPOPN 3
5783: END
