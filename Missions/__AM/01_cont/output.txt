// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 908 0 0
// InitRussian ;
  12: CALL 1147 0 0
// DebugMode ;
  16: CALL 145 0 0
// Action ;
  20: CALL 2596 0 0
// end ;
  24: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// mission_prefix := 01_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 01_
  35: ST_TO_ADDR
// debug := false ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// active_russian_dialog := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// bobby_in_squad := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// cyrus_in_squad := false ;
  60: LD_ADDR_EXP 7
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// powell_contact := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// macmilan_use_radio := false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// active_road_patrol := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// macmilan_in_trap := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// meta_action := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// end_mission := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bobby_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// cyrus_saved := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// send_troops_to_forest := false ;
 132: LD_ADDR_EXP 14
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// end ;
 140: LD_VAR 0 1
 144: RET
// function DebugMode ; var i ; begin
 145: LD_INT 0
 147: PPUSH
 148: PPUSH
// if not debug then
 149: LD_EXP 1
 153: NOT
 154: IFFALSE 158
// exit ;
 156: GO 177
// Difficulty := 3 ;
 158: LD_ADDR_OWVAR 67
 162: PUSH
 163: LD_INT 3
 165: ST_TO_ADDR
// TurnFogOff ( ) ;
 166: CALL_OW 537
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// end ; end_of_file
 177: LD_VAR 0 1
 181: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 182: LD_INT 0
 184: PPUSH
 185: PPUSH
// if exist_mode then
 186: LD_VAR 0 2
 190: IFFALSE 209
// unit := CreateCharacter ( ident ) else
 192: LD_ADDR_VAR 0 4
 196: PUSH
 197: LD_VAR 0 1
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_VAR 0 4
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 3
 238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 239: LD_INT 0
 241: PPUSH
 242: PPUSH
 243: PPUSH
// uc_side := GetSide ( b ) ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 2
 253: PPUSH
 254: CALL_OW 255
 258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 248
 273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 274: LD_INT 0
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 254
 303: PUSH
 304: LD_INT 3
 306: MINUS
 307: ST_TO_ADDR
// if dir < 0 then
 308: LD_VAR 0 5
 312: PUSH
 313: LD_INT 0
 315: LESS
 316: IFFALSE 332
// dir := 6 + dir ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_INT 6
 325: PUSH
 326: LD_VAR 0 5
 330: PLUS
 331: ST_TO_ADDR
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// SetDir ( un , dir ) ;
 342: LD_VAR 0 4
 346: PPUSH
 347: LD_VAR 0 5
 351: PPUSH
 352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 356: LD_VAR 0 4
 360: PPUSH
 361: LD_VAR 0 2
 365: PPUSH
 366: CALL_OW 52
// end ;
 370: LD_VAR 0 3
 374: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 375: LD_INT 0
 377: PPUSH
// uc_side := side ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_VAR 0 1
 387: ST_TO_ADDR
// uc_nation := nation ;
 388: LD_ADDR_OWVAR 21
 392: PUSH
 393: LD_VAR 0 2
 397: ST_TO_ADDR
// vc_chassis := chassis ;
 398: LD_ADDR_OWVAR 37
 402: PUSH
 403: LD_VAR 0 3
 407: ST_TO_ADDR
// vc_engine := engine ;
 408: LD_ADDR_OWVAR 39
 412: PUSH
 413: LD_VAR 0 4
 417: ST_TO_ADDR
// vc_control := control ;
 418: LD_ADDR_OWVAR 38
 422: PUSH
 423: LD_VAR 0 5
 427: ST_TO_ADDR
// vc_weapon := weapon ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_VAR 0 6
 437: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 438: LD_ADDR_OWVAR 41
 442: PUSH
 443: LD_VAR 0 7
 447: ST_TO_ADDR
// result := CreateVehicle ;
 448: LD_ADDR_VAR 0 8
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// end ;
 458: LD_VAR 0 8
 462: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 463: LD_INT 0
 465: PPUSH
 466: PPUSH
// while ( active_road_patrol ) do
 467: LD_EXP 8
 471: IFFALSE 825
// begin Wait ( 0 0$01 ) ;
 473: LD_INT 35
 475: PPUSH
 476: CALL_OW 67
// if not unit then
 480: LD_VAR 0 1
 484: NOT
 485: IFFALSE 489
// exit ;
 487: GO 825
// if mode = road then
 489: LD_VAR 0 2
 493: PUSH
 494: LD_STRING road
 496: EQUAL
 497: IFFALSE 553
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 261
 508: PUSH
 509: LD_INT 50
 511: LESS
 512: PUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 292
 525: NOT
 526: AND
 527: PUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: CALL_OW 314
 537: NOT
 538: AND
 539: IFFALSE 553
// SetFuel ( unit , 100 ) ;
 541: LD_VAR 0 1
 545: PPUSH
 546: LD_INT 100
 548: PPUSH
 549: CALL_OW 240
// if mode = forest then
 553: LD_VAR 0 2
 557: PUSH
 558: LD_STRING forest
 560: EQUAL
 561: IFFALSE 641
// if GetLives ( unit ) < 600 then
 563: LD_VAR 0 1
 567: PPUSH
 568: CALL_OW 256
 572: PUSH
 573: LD_INT 600
 575: LESS
 576: IFFALSE 641
// begin ComMoveXY ( unit , 42 , 3 ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_INT 42
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 250
 607: PPUSH
 608: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: CALL_OW 232
// send_troops_to_forest := true ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// break ;
 639: GO 825
// end ; if not HasTask ( unit ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 314
 650: NOT
 651: IFFALSE 823
// begin for i = 1 to coords do
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_VAR 0 4
 667: PUSH
 668: FOR_TO
 669: IFFALSE 736
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 671: LD_VAR 0 1
 675: PPUSH
 676: LD_VAR 0 4
 680: PUSH
 681: LD_VAR 0 6
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 6
 696: PUSH
 697: LD_INT 1
 699: PLUS
 700: ARRAY
 701: PPUSH
 702: CALL_OW 174
// AddComWait ( unit , pause ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 202
// i := i + 1 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_INT 1
 732: PLUS
 733: ST_TO_ADDR
// end ;
 734: GO 668
 736: POP
 737: POP
// for i = coords downto 1 do
 738: LD_ADDR_VAR 0 6
 742: PUSH
 743: DOUBLE
 744: LD_VAR 0 4
 748: INC
 749: ST_TO_ADDR
 750: LD_INT 1
 752: PUSH
 753: FOR_DOWNTO
 754: IFFALSE 821
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 4
 765: PUSH
 766: LD_VAR 0 6
 770: PUSH
 771: LD_INT 1
 773: MINUS
 774: ARRAY
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: ARRAY
 786: PPUSH
 787: CALL_OW 174
// AddComWait ( unit , pause ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 3
 800: PPUSH
 801: CALL_OW 202
// i := i - 1 ;
 805: LD_ADDR_VAR 0 6
 809: PUSH
 810: LD_VAR 0 6
 814: PUSH
 815: LD_INT 1
 817: MINUS
 818: ST_TO_ADDR
// end ;
 819: GO 753
 821: POP
 822: POP
// end ; end ;
 823: GO 467
// end ;
 825: LD_VAR 0 5
 829: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
// uc_nation := 1 ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// uc_side := 0 ;
 842: LD_ADDR_OWVAR 20
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 380
// hc_name := speaker ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING speaker
 870: ST_TO_ADDR
// hc_gallery :=  ;
 871: LD_ADDR_OWVAR 33
 875: PUSH
 876: LD_STRING 
 878: ST_TO_ADDR
// speaker := CreateHuman ;
 879: LD_ADDR_VAR 0 3
 883: PUSH
 884: CALL_OW 44
 888: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 88
// end ; end_of_file
 903: LD_VAR 0 2
 907: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 908: LD_INT 0
 910: PPUSH
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 919: LD_ADDR_EXP 15
 923: PUSH
 924: LD_STRING JMM
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL 182 0 2
 934: ST_TO_ADDR
// uc_side := 4 ;
 935: LD_ADDR_OWVAR 20
 939: PUSH
 940: LD_INT 4
 942: ST_TO_ADDR
// hc_gallery := us ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING us
 950: ST_TO_ADDR
// hc_face_number := 7 ;
 951: LD_ADDR_OWVAR 34
 955: PUSH
 956: LD_INT 7
 958: ST_TO_ADDR
// hc_sex := sex_male ;
 959: LD_ADDR_OWVAR 27
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// hc_name := ... ;
 967: LD_ADDR_OWVAR 26
 971: PUSH
 972: LD_STRING ...
 974: ST_TO_ADDR
// hc_class := 1 ;
 975: LD_ADDR_OWVAR 28
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// Powell := CreateHuman ;
 983: LD_ADDR_EXP 18
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// hc_name := ... ;
 993: LD_ADDR_OWVAR 26
 997: PUSH
 998: LD_STRING ...
1000: ST_TO_ADDR
// hc_gallery := ru ;
1001: LD_ADDR_OWVAR 33
1005: PUSH
1006: LD_STRING ru
1008: ST_TO_ADDR
// hc_face_number := 4 ;
1009: LD_ADDR_OWVAR 34
1013: PUSH
1014: LD_INT 4
1016: ST_TO_ADDR
// hc_sex := sex_male ;
1017: LD_ADDR_OWVAR 27
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1025: LD_ADDR_EXP 19
1029: PUSH
1030: CALL_OW 44
1034: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1035: LD_ADDR_EXP 16
1039: PUSH
1040: LD_STRING Bobby
1042: PPUSH
1043: LD_INT 0
1045: PPUSH
1046: CALL 182 0 2
1050: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1051: LD_ADDR_EXP 17
1055: PUSH
1056: LD_STRING Cyrus
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL 182 0 2
1066: ST_TO_ADDR
// case Difficulty of 1 :
1067: LD_OWVAR 67
1071: PUSH
1072: LD_INT 1
1074: DOUBLE
1075: EQUAL
1076: IFTRUE 1080
1078: GO 1095
1080: POP
// SetLives ( Bobby , 500 ) ; 2 :
1081: LD_EXP 16
1085: PPUSH
1086: LD_INT 500
1088: PPUSH
1089: CALL_OW 234
1093: GO 1142
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1118
1103: POP
// SetLives ( Bobby , 450 ) ; 3 :
1104: LD_EXP 16
1108: PPUSH
1109: LD_INT 450
1111: PPUSH
1112: CALL_OW 234
1116: GO 1142
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1141
1126: POP
// SetLives ( Bobby , 400 ) ; end ;
1127: LD_EXP 16
1131: PPUSH
1132: LD_INT 400
1134: PPUSH
1135: CALL_OW 234
1139: GO 1142
1141: POP
// end ; end_of_file
1142: LD_VAR 0 1
1146: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1153: LD_ADDR_VAR 0 2
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_OWVAR 67
1176: ARRAY
1177: ST_TO_ADDR
// uc_side := 3 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// uc_nation := 3 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 3
1193: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1194: LD_ADDR_EXP 25
1198: PUSH
1199: LD_STRING Pokryshkin
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL 182 0 2
1209: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1210: LD_EXP 25
1214: PPUSH
1215: LD_INT 44
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 48
// hc_importance := 0 ;
1228: LD_ADDR_OWVAR 32
1232: PUSH
1233: LD_INT 0
1235: ST_TO_ADDR
// hc_gallery :=  ;
1236: LD_ADDR_OWVAR 33
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// hc_name :=  ;
1244: LD_ADDR_OWVAR 26
1248: PUSH
1249: LD_STRING 
1251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1252: LD_INT 1
1254: PPUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1267: LD_ADDR_OWVAR 33
1271: PUSH
1272: LD_STRING SecondCharsGal
1274: ST_TO_ADDR
// hc_face_number := 69 ;
1275: LD_ADDR_OWVAR 34
1279: PUSH
1280: LD_INT 69
1282: ST_TO_ADDR
// hc_sex := sex_male ;
1283: LD_ADDR_OWVAR 27
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1291: LD_ADDR_OWVAR 26
1295: PUSH
1296: LD_STRING Ilja Ivanov
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_EXP 20
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_VAR 0 4
1326: PPUSH
1327: CALL_OW 2
1331: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 70 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 70
1377: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Pavel Starczy
1385: ST_TO_ADDR
// un := CreateHuman ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: CALL_OW 44
1395: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1396: LD_ADDR_EXP 20
1400: PUSH
1401: LD_EXP 20
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL_OW 2
1418: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// InitHc ;
1434: CALL_OW 19
// for i = 1 to 7 do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1603
// begin PrepareHuman ( false , 1 , skill ) ;
1454: LD_INT 0
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 380
// un := CreateHuman ;
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// if i mod 2 = 0 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 2
1486: MOD
1487: PUSH
1488: LD_INT 0
1490: EQUAL
1491: IFFALSE 1548
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1493: LD_ADDR_EXP 20
1497: PUSH
1498: LD_EXP 20
1502: PPUSH
1503: LD_EXP 20
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_VAR 0 4
1516: PPUSH
1517: CALL_OW 2
1521: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// ComHold ( un ) ;
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 140
// end else
1546: GO 1601
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_EXP 21
1557: PPUSH
1558: LD_EXP 21
1562: PUSH
1563: LD_INT 1
1565: PLUS
1566: PPUSH
1567: LD_VAR 0 4
1571: PPUSH
1572: CALL_OW 2
1576: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1577: LD_VAR 0 4
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 49
// ComHold ( un ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL_OW 140
// end ; end ;
1601: GO 1451
1603: POP
1604: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: LD_INT 22
1612: PUSH
1613: LD_INT 3
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 30
1622: PUSH
1623: LD_INT 31
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 69
1638: PUSH
1639: FOR_IN
1640: IFFALSE 1658
// PrepareSolBun ( skill , i ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: CALL 239 0 2
1656: GO 1639
1658: POP
1659: POP
// for i = 1 to 2 do
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: DOUBLE
1666: LD_INT 1
1668: DEC
1669: ST_TO_ADDR
1670: LD_INT 2
1672: PUSH
1673: FOR_TO
1674: IFFALSE 1805
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1676: LD_ADDR_VAR 0 4
1680: PUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_INT 22
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: LD_INT 42
1698: PPUSH
1699: LD_INT 100
1701: PPUSH
1702: CALL 375 0 7
1706: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1707: LD_INT 0
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1722: CALL_OW 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1736: LD_VAR 0 4
1740: PPUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 131
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_VAR 0 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 14
1759: PUSH
1760: LD_INT 87
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_VAR 0 3
1771: ARRAY
1772: PPUSH
1773: LD_INT 0
1775: PPUSH
1776: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1780: LD_ADDR_EXP 22
1784: PUSH
1785: LD_EXP 22
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: CALL_OW 2
1802: ST_TO_ADDR
// end ;
1803: GO 1673
1805: POP
1806: POP
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
1807: LD_ADDR_VAR 0 3
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 2
1819: PUSH
1820: LD_INT 2
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: PUSH
1831: LD_OWVAR 67
1835: ARRAY
1836: PUSH
1837: FOR_TO
1838: IFFALSE 1929
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1840: LD_INT 2
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_VAR 0 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: CALL_OW 380
// un := CreateHuman ;
1870: LD_ADDR_VAR 0 4
1874: PUSH
1875: CALL_OW 44
1879: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1880: LD_ADDR_EXP 23
1884: PUSH
1885: LD_EXP 23
1889: PPUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_VAR 0 4
1897: PPUSH
1898: CALL_OW 2
1902: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 10
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// ComHold ( un ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: CALL_OW 140
// end ;
1927: GO 1837
1929: POP
1930: POP
// if Difficulty < 3 then
1931: LD_OWVAR 67
1935: PUSH
1936: LD_INT 3
1938: LESS
1939: IFFALSE 1943
// exit ;
1941: GO 1986
// PrepareHuman ( false , 1 , skill ) ;
1943: LD_INT 0
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: LD_VAR 0 2
1953: PPUSH
1954: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1958: LD_ADDR_EXP 24
1962: PUSH
1963: CALL_OW 44
1967: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1968: LD_EXP 24
1972: PPUSH
1973: LD_INT 82
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 48
// end ;
1986: LD_VAR 0 1
1990: RET
// every 0 0$01 trigger active_road_patrol do
1991: LD_EXP 8
1995: IFFALSE 2061
1997: GO 1999
1999: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
2000: LD_EXP 22
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PPUSH
2009: LD_STRING road
2011: PPUSH
2012: LD_INT 70
2014: PPUSH
2015: LD_INT 131
2017: PUSH
2018: LD_INT 87
2020: PUSH
2021: LD_INT 107
2023: PUSH
2024: LD_INT 75
2026: PUSH
2027: LD_INT 107
2029: PUSH
2030: LD_INT 66
2032: PUSH
2033: LD_INT 114
2035: PUSH
2036: LD_INT 61
2038: PUSH
2039: LD_INT 107
2041: PUSH
2042: LD_INT 34
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: PPUSH
2057: CALL 463 0 4
2061: END
// every 0 0$01 trigger active_road_patrol do
2062: LD_EXP 8
2066: IFFALSE 2124
2068: GO 2070
2070: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2071: LD_EXP 22
2075: PUSH
2076: LD_INT 2
2078: ARRAY
2079: PPUSH
2080: LD_STRING road
2082: PPUSH
2083: LD_INT 70
2085: PPUSH
2086: LD_INT 21
2088: PUSH
2089: LD_INT 12
2091: PUSH
2092: LD_INT 37
2094: PUSH
2095: LD_INT 30
2097: PUSH
2098: LD_INT 65
2100: PUSH
2101: LD_INT 62
2103: PUSH
2104: LD_INT 107
2106: PUSH
2107: LD_INT 76
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: PPUSH
2120: CALL 463 0 4
2124: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2125: LD_EXP 24
2129: PPUSH
2130: CALL_OW 302
2134: IFFALSE 2196
2136: GO 2138
2138: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2139: LD_EXP 24
2143: PPUSH
2144: LD_STRING forest
2146: PPUSH
2147: LD_INT 35
2149: PPUSH
2150: LD_INT 52
2152: PUSH
2153: LD_INT 15
2155: PUSH
2156: LD_INT 81
2158: PUSH
2159: LD_INT 9
2161: PUSH
2162: LD_INT 120
2164: PUSH
2165: LD_INT 52
2167: PUSH
2168: LD_INT 135
2170: PUSH
2171: LD_INT 80
2173: PUSH
2174: LD_INT 122
2176: PUSH
2177: LD_INT 95
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PPUSH
2192: CALL 463 0 4
2196: END
// every 0 0$01 trigger macmilan_use_radio do
2197: LD_EXP 6
2201: IFFALSE 2262
2203: GO 2205
2205: DISABLE
// begin active_road_patrol := false ;
2206: LD_ADDR_EXP 8
2210: PUSH
2211: LD_INT 0
2213: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2214: LD_EXP 22
2218: PPUSH
2219: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2223: LD_EXP 22
2227: PPUSH
2228: LD_INT 72
2230: PPUSH
2231: LD_INT 41
2233: PPUSH
2234: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2238: LD_EXP 21
2242: PPUSH
2243: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2247: LD_EXP 21
2251: PPUSH
2252: LD_INT 72
2254: PPUSH
2255: LD_INT 41
2257: PPUSH
2258: CALL_OW 174
// end ;
2262: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2263: LD_INT 9
2265: PPUSH
2266: LD_INT 22
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL_OW 70
2280: IFFALSE 2354
2282: GO 2284
2284: DISABLE
2285: LD_INT 0
2287: PPUSH
// begin enable ;
2288: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2289: LD_ADDR_VAR 0 1
2293: PUSH
2294: LD_INT 9
2296: PPUSH
2297: LD_INT 22
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PPUSH
2307: CALL_OW 70
2311: PUSH
2312: LD_INT 1
2314: ARRAY
2315: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2316: LD_EXP 21
2320: PPUSH
2321: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2325: LD_EXP 21
2329: PPUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 250
2339: PPUSH
2340: LD_VAR 0 1
2344: PPUSH
2345: CALL_OW 251
2349: PPUSH
2350: CALL_OW 174
// end ;
2354: PPOPN 1
2356: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2357: LD_EXP 22
2361: PUSH
2362: LD_INT 1
2364: ARRAY
2365: PPUSH
2366: CALL_OW 256
2370: PUSH
2371: LD_INT 999
2373: LESS
2374: PUSH
2375: LD_EXP 22
2379: PUSH
2380: LD_INT 2
2382: ARRAY
2383: PPUSH
2384: CALL_OW 256
2388: PUSH
2389: LD_INT 999
2391: LESS
2392: OR
2393: PUSH
2394: LD_INT 3
2396: PPUSH
2397: LD_EXP 15
2401: PPUSH
2402: CALL_OW 292
2406: AND
2407: IFFALSE 2434
2409: GO 2411
2411: DISABLE
// begin active_road_patrol := false ;
2412: LD_ADDR_EXP 8
2416: PUSH
2417: LD_INT 0
2419: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2420: LD_EXP 22
2424: PPUSH
2425: LD_EXP 15
2429: PPUSH
2430: CALL_OW 115
// end ;
2434: END
// every 0 0$01 trigger macmilan_in_trap do
2435: LD_EXP 9
2439: IFFALSE 2485
2441: GO 2443
2443: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2444: LD_EXP 21
2448: PPUSH
2449: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2453: LD_EXP 20
2457: PUSH
2458: LD_EXP 21
2462: ADD
2463: PUSH
2464: LD_EXP 25
2468: ADD
2469: PUSH
2470: LD_EXP 22
2474: ADD
2475: PPUSH
2476: LD_EXP 15
2480: PPUSH
2481: CALL_OW 115
// end ;
2485: END
// every 0 0$01 trigger meta_action do
2486: LD_EXP 10
2490: IFFALSE 2536
2492: GO 2494
2494: DISABLE
// begin active_road_patrol := false ;
2495: LD_ADDR_EXP 8
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2503: LD_EXP 20
2507: PUSH
2508: LD_EXP 21
2512: ADD
2513: PUSH
2514: LD_EXP 25
2518: ADD
2519: PUSH
2520: LD_EXP 22
2524: ADD
2525: PPUSH
2526: LD_INT 93
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 114
// end ;
2536: END
// every 0 0$20 trigger send_troops_to_forest do
2537: LD_EXP 14
2541: IFFALSE 2595
2543: GO 2545
2545: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2546: LD_EXP 24
2550: PPUSH
2551: CALL_OW 302
2555: NOT
2556: IFFALSE 2560
// exit ;
2558: GO 2595
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2560: LD_EXP 20
2564: PUSH
2565: LD_EXP 25
2569: ADD
2570: PPUSH
2571: LD_EXP 24
2575: PPUSH
2576: CALL_OW 252
2580: PPUSH
2581: LD_EXP 24
2585: PPUSH
2586: CALL_OW 253
2590: PPUSH
2591: CALL_OW 114
// end ; end_of_file
2595: END
// export function Action ; var i ; begin
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2600: LD_ADDR_VAR 0 2
2604: PUSH
2605: LD_INT 22
2607: PUSH
2608: LD_INT 3
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: LD_INT 25
2617: PUSH
2618: LD_INT 1
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PPUSH
2629: CALL_OW 69
2633: PUSH
2634: FOR_IN
2635: IFFALSE 2648
// ComHold ( i ) ;
2637: LD_VAR 0 2
2641: PPUSH
2642: CALL_OW 140
2646: GO 2634
2648: POP
2649: POP
// InGameOn ;
2650: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2654: LD_INT 79
2656: PPUSH
2657: LD_INT 76
2659: PPUSH
2660: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2664: LD_INT 10
2666: PPUSH
2667: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2671: LD_EXP 15
2675: PPUSH
2676: LD_INT 80
2678: PPUSH
2679: LD_INT 79
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: CALL_OW 48
// Wait ( 0 0$03 ) ;
2689: LD_INT 105
2691: PPUSH
2692: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2696: LD_EXP 15
2700: PPUSH
2701: LD_INT 80
2703: PPUSH
2704: LD_INT 76
2706: PPUSH
2707: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2711: LD_EXP 15
2715: PPUSH
2716: LD_STRING D1-JMM-1
2718: PPUSH
2719: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2723: LD_INT 10
2725: PPUSH
2726: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2730: LD_EXP 15
2734: PPUSH
2735: LD_INT 76
2737: PPUSH
2738: LD_INT 76
2740: PPUSH
2741: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2745: LD_EXP 15
2749: PPUSH
2750: LD_STRING D1-JMM-1a
2752: PPUSH
2753: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2757: LD_INT 10
2759: PPUSH
2760: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2764: LD_EXP 15
2768: PPUSH
2769: LD_INT 83
2771: PPUSH
2772: LD_INT 66
2774: PPUSH
2775: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2779: LD_EXP 15
2783: PPUSH
2784: LD_STRING D1-JMM-1b
2786: PPUSH
2787: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2791: LD_INT 18
2793: PPUSH
2794: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2798: LD_EXP 15
2802: PPUSH
2803: LD_STRING D1-JMM-1c
2805: PPUSH
2806: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2810: LD_INT 7
2812: PPUSH
2813: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2817: LD_EXP 18
2821: PPUSH
2822: LD_STRING D1-Pow-1
2824: PPUSH
2825: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2829: LD_EXP 15
2833: PPUSH
2834: LD_STRING D1-JMM-2
2836: PPUSH
2837: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2841: LD_EXP 18
2845: PPUSH
2846: LD_STRING D1-Pow-2
2848: PPUSH
2849: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2853: LD_EXP 15
2857: PPUSH
2858: LD_STRING D1-JMM-3
2860: PPUSH
2861: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2865: LD_EXP 18
2869: PPUSH
2870: LD_STRING D1-Pow-3
2872: PPUSH
2873: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2877: LD_EXP 15
2881: PPUSH
2882: LD_STRING D1-JMM-4
2884: PPUSH
2885: CALL_OW 88
// ComFree ( JMM ) ;
2889: LD_EXP 15
2893: PPUSH
2894: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2898: LD_INT 10
2900: PPUSH
2901: CALL_OW 67
// InGameOff ;
2905: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2909: LD_STRING M1
2911: PPUSH
2912: CALL_OW 337
// active_russian_dialog := true ;
2916: LD_ADDR_EXP 3
2920: PUSH
2921: LD_INT 1
2923: ST_TO_ADDR
// active_road_patrol := true ;
2924: LD_ADDR_EXP 8
2928: PUSH
2929: LD_INT 1
2931: ST_TO_ADDR
// PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2932: LD_EXP 16
2936: PPUSH
2937: LD_INT 41
2939: PPUSH
2940: LD_INT 71
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 48
// ComHold ( Bobby ) ;
2950: LD_EXP 16
2954: PPUSH
2955: CALL_OW 140
// PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
2959: LD_EXP 17
2963: PPUSH
2964: LD_INT 90
2966: PPUSH
2967: LD_INT 42
2969: PPUSH
2970: LD_INT 0
2972: PPUSH
2973: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
2977: LD_EXP 17
2981: PPUSH
2982: LD_INT 79
2984: PPUSH
2985: LD_INT 34
2987: PPUSH
2988: CALL_OW 111
// ComCrawl ( Cyrus ) ;
2992: LD_EXP 17
2996: PPUSH
2997: CALL_OW 137
// SaveForQuickRestart ;
3001: CALL_OW 22
// end ;
3005: LD_VAR 0 1
3009: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3010: LD_EXP 3
3014: IFFALSE 3637
3016: GO 3018
3018: DISABLE
3019: LD_INT 0
3021: PPUSH
// begin wait_points := 0 ;
3022: LD_ADDR_VAR 0 1
3026: PUSH
3027: LD_INT 0
3029: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3030: LD_INT 70
3032: PPUSH
3033: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3037: LD_EXP 20
3041: PPUSH
3042: LD_INT 79
3044: PPUSH
3045: LD_INT 83
3047: PPUSH
3048: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3052: LD_EXP 20
3056: PUSH
3057: LD_INT 2
3059: ARRAY
3060: PPUSH
3061: LD_STRING D1R-Rus1-1
3063: PPUSH
3064: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3068: LD_EXP 20
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PPUSH
3077: LD_STRING D1R-Rus2-1
3079: PPUSH
3080: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
3084: LD_EXP 21
3088: PPUSH
3089: LD_INT 79
3091: PPUSH
3092: LD_INT 83
3094: PPUSH
3095: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3099: LD_INT 35
3101: PPUSH
3102: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3106: LD_EXP 20
3110: PUSH
3111: LD_INT 1
3113: ARRAY
3114: PPUSH
3115: LD_INT 79
3117: PPUSH
3118: LD_INT 82
3120: PPUSH
3121: CALL_OW 297
3125: PUSH
3126: LD_INT 5
3128: LESS
3129: IFFALSE 3099
// if not IsInArea ( JMM , jmm_spot ) then
3131: LD_EXP 15
3135: PPUSH
3136: LD_INT 5
3138: PPUSH
3139: CALL_OW 308
3143: NOT
3144: IFFALSE 3164
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3146: LD_EXP 20
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_STRING D1Ra-Rus2-1
3157: PPUSH
3158: CALL_OW 88
3162: GO 3300
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3164: LD_EXP 20
3168: PUSH
3169: LD_INT 2
3171: ARRAY
3172: PPUSH
3173: LD_STRING D1Rb-Rus1-1
3175: PPUSH
3176: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3180: LD_EXP 20
3184: PUSH
3185: LD_INT 1
3187: ARRAY
3188: PPUSH
3189: LD_STRING D1Rb-Rus2-1
3191: PPUSH
3192: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3196: LD_EXP 20
3200: PUSH
3201: LD_EXP 21
3205: ADD
3206: PPUSH
3207: LD_EXP 15
3211: PPUSH
3212: CALL_OW 250
3216: PPUSH
3217: LD_EXP 15
3221: PPUSH
3222: CALL_OW 251
3226: PPUSH
3227: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3231: LD_INT 35
3233: PPUSH
3234: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3238: LD_EXP 15
3242: PPUSH
3243: LD_INT 5
3245: PPUSH
3246: CALL_OW 308
3250: NOT
3251: PUSH
3252: LD_INT 3
3254: PPUSH
3255: LD_EXP 15
3259: PPUSH
3260: CALL_OW 292
3264: NOT
3265: AND
3266: IFFALSE 3231
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3268: LD_EXP 20
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: LD_STRING D1Rc-Rus1-1
3279: PPUSH
3280: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3284: LD_EXP 20
3288: PUSH
3289: LD_INT 1
3291: ARRAY
3292: PPUSH
3293: LD_STRING D1Ra-Rus2-1a
3295: PPUSH
3296: CALL_OW 88
// end ; wait_points := 10 ;
3300: LD_ADDR_VAR 0 1
3304: PUSH
3305: LD_INT 10
3307: ST_TO_ADDR
// if Difficulty > 1 then
3308: LD_OWVAR 67
3312: PUSH
3313: LD_INT 1
3315: GREATER
3316: IFFALSE 3398
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3318: LD_EXP 20
3322: PPUSH
3323: LD_INT 78
3325: PPUSH
3326: LD_INT 95
3328: PPUSH
3329: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3333: LD_EXP 20
3337: PPUSH
3338: LD_INT 175
3340: PPUSH
3341: CALL_OW 202
// wait_points := wait_points + 15 ;
3345: LD_ADDR_VAR 0 1
3349: PUSH
3350: LD_VAR 0 1
3354: PUSH
3355: LD_INT 15
3357: PLUS
3358: ST_TO_ADDR
// if Difficulty > 2 then
3359: LD_OWVAR 67
3363: PUSH
3364: LD_INT 2
3366: GREATER
3367: IFFALSE 3398
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3369: LD_EXP 20
3373: PPUSH
3374: LD_INT 65
3376: PPUSH
3377: LD_INT 79
3379: PPUSH
3380: CALL_OW 174
// wait_points := wait_points + 5 ;
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_VAR 0 1
3393: PUSH
3394: LD_INT 5
3396: PLUS
3397: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3398: LD_INT 35
3400: PPUSH
3401: CALL_OW 67
// wait_points := wait_points - 1 ;
3405: LD_ADDR_VAR 0 1
3409: PUSH
3410: LD_VAR 0 1
3414: PUSH
3415: LD_INT 1
3417: MINUS
3418: ST_TO_ADDR
// if See ( 3 , JMM ) then
3419: LD_INT 3
3421: PPUSH
3422: LD_EXP 15
3426: PPUSH
3427: CALL_OW 292
3431: IFFALSE 3485
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3433: LD_EXP 20
3437: PUSH
3438: LD_INT 2
3440: ARRAY
3441: PPUSH
3442: LD_STRING D1Rb-Rus1-1
3444: PPUSH
3445: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3449: LD_EXP 20
3453: PPUSH
3454: LD_EXP 15
3458: PPUSH
3459: CALL_OW 250
3463: PPUSH
3464: LD_EXP 15
3468: PPUSH
3469: CALL_OW 251
3473: PPUSH
3474: CALL_OW 114
// Wait ( 0 0$03 ) ;
3478: LD_INT 105
3480: PPUSH
3481: CALL_OW 67
// end ; until wait_points = 0 ;
3485: LD_VAR 0 1
3489: PUSH
3490: LD_INT 0
3492: EQUAL
3493: IFFALSE 3398
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3495: LD_EXP 20
3499: PPUSH
3500: LD_INT 45
3502: PPUSH
3503: LD_INT 5
3505: PPUSH
3506: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3510: LD_EXP 21
3514: PPUSH
3515: LD_INT 26
3517: PPUSH
3518: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3522: LD_INT 35
3524: PPUSH
3525: CALL_OW 67
// if See ( 3 , JMM ) then
3529: LD_INT 3
3531: PPUSH
3532: LD_EXP 15
3536: PPUSH
3537: CALL_OW 292
3541: IFFALSE 3597
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3543: LD_EXP 20
3547: PUSH
3548: LD_INT 2
3550: ARRAY
3551: PPUSH
3552: LD_STRING D1Rb-Rus1-1
3554: PPUSH
3555: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3559: LD_EXP 20
3563: PPUSH
3564: LD_EXP 15
3568: PPUSH
3569: CALL_OW 250
3573: PPUSH
3574: LD_EXP 15
3578: PPUSH
3579: CALL_OW 251
3583: PPUSH
3584: CALL_OW 114
// Wait ( 0 0$50 ) ;
3588: LD_INT 1750
3590: PPUSH
3591: CALL_OW 67
// end else
3595: GO 3612
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3597: LD_EXP 20
3601: PPUSH
3602: LD_INT 45
3604: PPUSH
3605: LD_INT 5
3607: PPUSH
3608: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3612: LD_EXP 20
3616: PUSH
3617: LD_INT 1
3619: ARRAY
3620: PPUSH
3621: LD_INT 45
3623: PPUSH
3624: LD_INT 5
3626: PPUSH
3627: CALL_OW 297
3631: PUSH
3632: LD_INT 10
3634: LESS
3635: IFFALSE 3522
// end ;
3637: PPOPN 1
3639: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3640: LD_EXP 15
3644: PPUSH
3645: LD_EXP 16
3649: PPUSH
3650: CALL_OW 296
3654: PUSH
3655: LD_INT 9
3657: LESS
3658: IFFALSE 4109
3660: GO 3662
3662: DISABLE
// begin ComWalk ( Bobby ) ;
3663: LD_EXP 16
3667: PPUSH
3668: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3672: LD_EXP 16
3676: PPUSH
3677: LD_EXP 15
3681: PPUSH
3682: CALL_OW 250
3686: PPUSH
3687: LD_EXP 15
3691: PPUSH
3692: CALL_OW 251
3696: PPUSH
3697: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3701: LD_INT 35
3703: PPUSH
3704: CALL_OW 67
// until See ( 4 , JMM ) ;
3708: LD_INT 4
3710: PPUSH
3711: LD_EXP 15
3715: PPUSH
3716: CALL_OW 292
3720: IFFALSE 3701
// InGameOn ;
3722: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3726: LD_EXP 15
3730: PPUSH
3731: LD_EXP 16
3735: PPUSH
3736: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3740: LD_EXP 7
3744: PUSH
3745: LD_EXP 17
3749: PPUSH
3750: CALL_OW 302
3754: AND
3755: PUSH
3756: LD_EXP 15
3760: PPUSH
3761: LD_EXP 17
3765: PPUSH
3766: CALL_OW 296
3770: PUSH
3771: LD_INT 10
3773: LESS
3774: AND
3775: IFFALSE 3820
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
3777: LD_EXP 17
3781: PPUSH
3782: LD_EXP 15
3786: PPUSH
3787: CALL_OW 250
3791: PPUSH
3792: LD_EXP 15
3796: PPUSH
3797: CALL_OW 251
3801: PPUSH
3802: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
3806: LD_EXP 17
3810: PPUSH
3811: LD_EXP 16
3815: PPUSH
3816: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
3820: LD_EXP 15
3824: PPUSH
3825: LD_STRING D2-JMM-1
3827: PPUSH
3828: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
3839: LD_EXP 16
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
3853: LD_EXP 16
3857: PPUSH
3858: LD_STRING D2-Bobby-1
3860: PPUSH
3861: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3865: LD_EXP 15
3869: PPUSH
3870: LD_STRING D2-JMM-2
3872: PPUSH
3873: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3877: LD_EXP 16
3881: PPUSH
3882: LD_EXP 15
3886: PPUSH
3887: CALL_OW 250
3891: PPUSH
3892: LD_EXP 15
3896: PPUSH
3897: CALL_OW 251
3901: PPUSH
3902: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
3906: LD_EXP 16
3910: PPUSH
3911: LD_STRING D2-Bobby-2
3913: PPUSH
3914: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3918: LD_EXP 15
3922: PPUSH
3923: LD_STRING D2-JMM-3
3925: PPUSH
3926: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
3930: LD_EXP 16
3934: PPUSH
3935: LD_EXP 15
3939: PPUSH
3940: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
3944: LD_EXP 16
3948: PPUSH
3949: LD_STRING D2-Bobby-3
3951: PPUSH
3952: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D2-JMM-4
3963: PPUSH
3964: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
3968: LD_EXP 16
3972: PPUSH
3973: LD_STRING D2-Bobby-4
3975: PPUSH
3976: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D2-JMM-5
3987: PPUSH
3988: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
3992: LD_EXP 16
3996: PPUSH
3997: LD_STRING D2-Bobby-5
3999: PPUSH
4000: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4004: LD_EXP 15
4008: PPUSH
4009: LD_STRING D2-JMM-6
4011: PPUSH
4012: CALL_OW 88
// if not powell_contact then
4016: LD_EXP 5
4020: NOT
4021: IFFALSE 4047
// begin Say ( Bobby , D2-Bobby-6 ) ;
4023: LD_EXP 16
4027: PPUSH
4028: LD_STRING D2-Bobby-6
4030: PPUSH
4031: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4035: LD_EXP 15
4039: PPUSH
4040: LD_STRING D2-JMM-7
4042: PPUSH
4043: CALL_OW 88
// end ; InGameOff ;
4047: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4051: LD_EXP 16
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4063: LD_EXP 15
4067: PUSH
4068: LD_EXP 16
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 139
// bobby_in_squad := true ;
4081: LD_ADDR_EXP 4
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4089: LD_EXP 5
4093: PUSH
4094: LD_EXP 7
4098: NOT
4099: AND
4100: IFFALSE 4109
// ChangeMissionObjectives ( M2b ) ;
4102: LD_STRING M2b
4104: PPUSH
4105: CALL_OW 337
// end ;
4109: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad do
4110: LD_EXP 3
4114: PUSH
4115: LD_EXP 4
4119: NOT
4120: AND
4121: IFFALSE 4141
4123: GO 4125
4125: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 75
4133: PPUSH
4134: LD_INT 83
4136: PPUSH
4137: CALL_OW 111
4141: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4142: LD_EXP 7
4146: PUSH
4147: LD_EXP 4
4151: NOT
4152: AND
4153: IFFALSE 4182
4155: GO 4157
4157: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4158: LD_EXP 16
4162: PPUSH
4163: LD_INT 105
4165: PPUSH
4166: LD_INT 97
4168: PPUSH
4169: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4173: LD_EXP 16
4177: PPUSH
4178: CALL_OW 197
// end ;
4182: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4183: LD_EXP 15
4187: PPUSH
4188: LD_INT 6
4190: PPUSH
4191: CALL_OW 308
4195: PUSH
4196: LD_EXP 15
4200: PPUSH
4201: LD_EXP 16
4205: PPUSH
4206: CALL_OW 296
4210: PUSH
4211: LD_INT 7
4213: LESS
4214: AND
4215: PUSH
4216: LD_EXP 4
4220: AND
4221: IFFALSE 4268
4223: GO 4225
4225: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4226: LD_EXP 15
4230: PUSH
4231: LD_EXP 16
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PPUSH
4240: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4244: LD_EXP 15
4248: PPUSH
4249: LD_STRING D2a-JMM-1
4251: PPUSH
4252: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4256: LD_EXP 16
4260: PPUSH
4261: LD_STRING D2a-Bobby-1
4263: PPUSH
4264: CALL_OW 88
// end ;
4268: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4269: LD_EXP 3
4273: PUSH
4274: LD_INT 3
4276: PPUSH
4277: LD_EXP 15
4281: PPUSH
4282: CALL_OW 292
4286: NOT
4287: AND
4288: IFFALSE 4464
4290: GO 4292
4292: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4293: LD_INT 350
4295: PPUSH
4296: LD_INT 700
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: CALL_OW 67
// InGameOn ;
4308: CALL_OW 8
// DialogueOn ;
4312: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4316: LD_EXP 18
4320: PPUSH
4321: LD_STRING D3-Pow-1
4323: PPUSH
4324: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4328: LD_EXP 15
4332: PPUSH
4333: LD_STRING D3-JMM-1
4335: PPUSH
4336: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4340: LD_EXP 18
4344: PPUSH
4345: LD_STRING D3-Pow-2
4347: PPUSH
4348: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4352: LD_EXP 15
4356: PPUSH
4357: LD_STRING D3-JMM-2
4359: PPUSH
4360: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4364: LD_EXP 18
4368: PPUSH
4369: LD_STRING D3-Pow-3
4371: PPUSH
4372: CALL_OW 94
// DialogueOff ;
4376: CALL_OW 7
// InGameOff ;
4380: CALL_OW 9
// powell_contact := true ;
4384: LD_ADDR_EXP 5
4388: PUSH
4389: LD_INT 1
4391: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4392: LD_INT 10
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: CALL_OW 424
// uc_side := 4 ;
4402: LD_ADDR_OWVAR 20
4406: PUSH
4407: LD_INT 4
4409: ST_TO_ADDR
// uc_nation := 1 ;
4410: LD_ADDR_OWVAR 21
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4418: LD_ADDR_EXP 18
4422: PUSH
4423: LD_STRING Powell
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL 182 0 2
4433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4434: LD_STRING M2
4436: PPUSH
4437: CALL_OW 337
// if not bobby_in_squad then
4441: LD_EXP 4
4445: NOT
4446: IFFALSE 4457
// ChangeMissionObjectives ( M2a ) else
4448: LD_STRING M2a
4450: PPUSH
4451: CALL_OW 337
4455: GO 4464
// ChangeMissionObjectives ( M2b ) ;
4457: LD_STRING M2b
4459: PPUSH
4460: CALL_OW 337
// end ;
4464: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4465: LD_EXP 15
4469: PPUSH
4470: LD_INT 7
4472: PPUSH
4473: CALL_OW 308
4477: IFFALSE 4612
4479: GO 4481
4481: DISABLE
// begin DialogueOn ;
4482: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4486: LD_EXP 19
4490: PPUSH
4491: LD_STRING D4-Rus3-1
4493: PPUSH
4494: CALL_OW 94
// DialogueOff ;
4498: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4502: LD_STRING M3a
4504: PPUSH
4505: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4509: LD_INT 11
4511: PPUSH
4512: LD_INT 1
4514: PPUSH
4515: CALL_OW 424
// Wait ( 0 0$02 ) ;
4519: LD_INT 70
4521: PPUSH
4522: CALL_OW 67
// DialogueOn ;
4526: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4530: LD_EXP 18
4534: PPUSH
4535: LD_STRING D4-Pow-1
4537: PPUSH
4538: CALL_OW 94
// DialogueOff ;
4542: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4546: LD_STRING M3b
4548: PPUSH
4549: CALL_OW 337
// case Query ( Q1 ) of 1 :
4553: LD_STRING Q1
4555: PPUSH
4556: CALL_OW 97
4560: PUSH
4561: LD_INT 1
4563: DOUBLE
4564: EQUAL
4565: IFTRUE 4569
4567: GO 4600
4569: POP
// begin macmilan_use_radio := true ;
4570: LD_ADDR_EXP 6
4574: PUSH
4575: LD_INT 1
4577: ST_TO_ADDR
// DialogueOn ;
4578: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4582: LD_EXP 15
4586: PPUSH
4587: LD_STRING D4a-JMM-1
4589: PPUSH
4590: CALL_OW 88
// DialogueOff ;
4594: CALL_OW 7
// end ; 2 :
4598: GO 4612
4600: LD_INT 2
4602: DOUBLE
4603: EQUAL
4604: IFTRUE 4608
4606: GO 4611
4608: POP
// ; end ;
4609: GO 4612
4611: POP
// end ;
4612: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4613: LD_EXP 15
4617: PPUSH
4618: LD_EXP 17
4622: PPUSH
4623: CALL_OW 296
4627: PUSH
4628: LD_INT 8
4630: LESS
4631: IFFALSE 4882
4633: GO 4635
4635: DISABLE
// begin InGameOn ;
4636: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4640: LD_EXP 15
4644: PPUSH
4645: LD_EXP 17
4649: PPUSH
4650: CALL_OW 250
4654: PPUSH
4655: LD_EXP 17
4659: PPUSH
4660: CALL_OW 251
4664: PPUSH
4665: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4669: LD_EXP 16
4673: PPUSH
4674: CALL_OW 302
4678: PUSH
4679: LD_EXP 4
4683: AND
4684: IFFALSE 4715
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4686: LD_EXP 16
4690: PPUSH
4691: LD_EXP 15
4695: PPUSH
4696: CALL_OW 250
4700: PPUSH
4701: LD_EXP 15
4705: PPUSH
4706: CALL_OW 251
4710: PPUSH
4711: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4715: LD_EXP 15
4719: PPUSH
4720: LD_STRING D5-JMM-1
4722: PPUSH
4723: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4727: LD_INT 10
4729: PPUSH
4730: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4734: LD_EXP 15
4738: PPUSH
4739: LD_EXP 17
4743: PPUSH
4744: CALL_OW 119
// ComWalk ( Cyrus ) ;
4748: LD_EXP 17
4752: PPUSH
4753: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4757: LD_EXP 17
4761: PPUSH
4762: LD_EXP 15
4766: PPUSH
4767: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
4771: LD_EXP 17
4775: PPUSH
4776: LD_STRING D5-Cyrus-1
4778: PPUSH
4779: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
4783: LD_EXP 16
4787: PPUSH
4788: CALL_OW 302
4792: PUSH
4793: LD_EXP 4
4797: AND
4798: IFFALSE 4838
// begin ComTurnUnit ( Bobby , Cyrus ) ;
4800: LD_EXP 16
4804: PPUSH
4805: LD_EXP 17
4809: PPUSH
4810: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
4814: LD_EXP 16
4818: PPUSH
4819: LD_STRING D5-Bobby-1
4821: PPUSH
4822: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
4826: LD_EXP 15
4830: PPUSH
4831: LD_STRING D5-JMM-2
4833: PPUSH
4834: CALL_OW 88
// end ; InGameOff ;
4838: CALL_OW 9
// cyrus_in_squad := true ;
4842: LD_ADDR_EXP 7
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
4850: LD_EXP 17
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: CALL_OW 235
// if powell_contact and not bobby_in_squad then
4862: LD_EXP 5
4866: PUSH
4867: LD_EXP 4
4871: NOT
4872: AND
4873: IFFALSE 4882
// ChangeMissionObjectives ( M2b ) ;
4875: LD_STRING M2b
4877: PPUSH
4878: CALL_OW 337
// end ;
4882: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
4883: LD_EXP 4
4887: PUSH
4888: LD_EXP 7
4892: AND
4893: IFFALSE 4905
4895: GO 4897
4897: DISABLE
// ChangeMissionObjectives ( M2c ) ;
4898: LD_STRING M2c
4900: PPUSH
4901: CALL_OW 337
4905: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
4906: LD_EXP 15
4910: PPUSH
4911: LD_INT 8
4913: PPUSH
4914: CALL_OW 308
4918: IFFALSE 4970
4920: GO 4922
4922: DISABLE
// begin macmilan_in_trap := true ;
4923: LD_ADDR_EXP 9
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4931: LD_INT 35
4933: PPUSH
4934: CALL_OW 67
// DialogueOn ;
4938: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
4942: LD_EXP 25
4946: PPUSH
4947: LD_STRING D5-Pok-1
4949: PPUSH
4950: CALL_OW 88
// DialogueOff ;
4954: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
4958: LD_EXP 15
4962: PPUSH
4963: LD_STRING D4b-JMM-1
4965: PPUSH
4966: CALL_OW 88
// end ;
4970: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or GetLives ( russian_meta_guards [ russian_meta_guards ] ) < 999 do var i , hp ;
4971: LD_EXP 15
4975: PPUSH
4976: LD_EXP 23
4980: PUSH
4981: LD_EXP 23
4985: ARRAY
4986: PPUSH
4987: CALL_OW 296
4991: PUSH
4992: LD_INT 12
4994: LESS
4995: PUSH
4996: LD_EXP 23
5000: PUSH
5001: LD_EXP 23
5005: ARRAY
5006: PPUSH
5007: CALL_OW 256
5011: PUSH
5012: LD_INT 999
5014: LESS
5015: OR
5016: IFFALSE 5246
5018: GO 5020
5020: DISABLE
5021: LD_INT 0
5023: PPUSH
5024: PPUSH
// begin hp := [ 200 , 150 , 100 ] [ Difficulty ] ;
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 200
5032: PUSH
5033: LD_INT 150
5035: PUSH
5036: LD_INT 100
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_OWVAR 67
5048: ARRAY
5049: ST_TO_ADDR
// for i in russian_meta_guards do
5050: LD_ADDR_VAR 0 1
5054: PUSH
5055: LD_EXP 23
5059: PUSH
5060: FOR_IN
5061: IFFALSE 5101
// if IsOk ( i ) then
5063: LD_VAR 0 1
5067: PPUSH
5068: CALL_OW 302
5072: IFFALSE 5099
// SetLives ( i , GetLives ( i ) - hp ) ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_VAR 0 1
5083: PPUSH
5084: CALL_OW 256
5088: PUSH
5089: LD_VAR 0 2
5093: MINUS
5094: PPUSH
5095: CALL_OW 234
5099: GO 5060
5101: POP
5102: POP
// DialogueOn ;
5103: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5107: LD_EXP 23
5111: PUSH
5112: LD_EXP 23
5116: ARRAY
5117: PPUSH
5118: LD_STRING D6-FRus1-1
5120: PPUSH
5121: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5125: LD_EXP 15
5129: PPUSH
5130: LD_STRING D6-JMM-1
5132: PPUSH
5133: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5137: LD_EXP 17
5141: PPUSH
5142: CALL_OW 302
5146: PUSH
5147: LD_EXP 7
5151: AND
5152: IFFALSE 5166
// Say ( Cyrus , D6-Cyrus-1 ) ;
5154: LD_EXP 17
5158: PPUSH
5159: LD_STRING D6-Cyrus-1
5161: PPUSH
5162: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5166: LD_EXP 16
5170: PPUSH
5171: CALL_OW 302
5175: PUSH
5176: LD_EXP 4
5180: AND
5181: IFFALSE 5195
// Say ( Bobby , D6-Bobby-1 ) ;
5183: LD_EXP 16
5187: PPUSH
5188: LD_STRING D6-Bobby-1
5190: PPUSH
5191: CALL_OW 88
// DialogueOff ;
5195: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5199: LD_INT 140
5201: PUSH
5202: LD_INT 105
5204: PUSH
5205: LD_INT 70
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: PUSH
5213: LD_OWVAR 67
5217: ARRAY
5218: PPUSH
5219: CALL_OW 67
// meta_action := true ;
5223: LD_ADDR_EXP 10
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5231: LD_EXP 23
5235: PPUSH
5236: LD_INT 94
5238: PPUSH
5239: LD_INT 8
5241: PPUSH
5242: CALL_OW 114
// end ;
5246: PPOPN 2
5248: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5249: LD_EXP 15
5253: PPUSH
5254: LD_INT 93
5256: PPUSH
5257: LD_INT 1
5259: PPUSH
5260: CALL_OW 297
5264: PUSH
5265: LD_INT 5
5267: LESS
5268: PUSH
5269: LD_INT 22
5271: PUSH
5272: LD_INT 1
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: CALL_OW 69
5283: PUSH
5284: LD_INT 1
5286: GREATER
5287: AND
5288: IFFALSE 5305
5290: GO 5292
5292: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5293: LD_EXP 15
5297: PPUSH
5298: LD_STRING D6a-JMM-1
5300: PPUSH
5301: CALL_OW 88
5305: END
// every 0 0$01 trigger IsDying ( JMM ) do
5306: LD_EXP 15
5310: PPUSH
5311: CALL_OW 303
5315: IFFALSE 5327
5317: GO 5319
5319: DISABLE
// YouLost ( JMM ) ;
5320: LD_STRING JMM
5322: PPUSH
5323: CALL_OW 104
5327: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5328: LD_EXP 16
5332: PPUSH
5333: LD_INT 10
5335: PPUSH
5336: CALL_OW 308
5340: IFFALSE 5389
5342: GO 5344
5344: DISABLE
// begin bobby_saved := true ;
5345: LD_ADDR_EXP 12
5349: PUSH
5350: LD_INT 1
5352: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5353: LD_EXP 16
5357: PPUSH
5358: CALL_OW 256
5362: PPUSH
5363: LD_STRING 01_BobbyLifePoints_1
5365: PPUSH
5366: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5370: LD_EXP 16
5374: PPUSH
5375: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5379: LD_STRING Bobby
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 101
// end ;
5389: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5390: LD_EXP 17
5394: PPUSH
5395: LD_INT 10
5397: PPUSH
5398: CALL_OW 308
5402: IFFALSE 5451
5404: GO 5406
5406: DISABLE
// begin cyrus_saved := true ;
5407: LD_ADDR_EXP 13
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5415: LD_EXP 17
5419: PPUSH
5420: CALL_OW 256
5424: PPUSH
5425: LD_STRING 01_CyrusLifePoints_1
5427: PPUSH
5428: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5432: LD_EXP 17
5436: PPUSH
5437: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5441: LD_STRING Cyrus
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 101
// end ;
5451: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5452: LD_EXP 15
5456: PPUSH
5457: LD_INT 10
5459: PPUSH
5460: CALL_OW 308
5464: IFFALSE 5973
5466: GO 5468
5468: DISABLE
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
5473: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5474: LD_EXP 13
5478: NOT
5479: PUSH
5480: LD_EXP 7
5484: AND
5485: PUSH
5486: LD_EXP 17
5490: PPUSH
5491: CALL_OW 302
5495: AND
5496: PUSH
5497: LD_EXP 12
5501: NOT
5502: PUSH
5503: LD_EXP 4
5507: AND
5508: PUSH
5509: LD_EXP 16
5513: PPUSH
5514: CALL_OW 302
5518: AND
5519: OR
5520: IFFALSE 5561
// case Query ( Q2 ) of 1 :
5522: LD_STRING Q2
5524: PPUSH
5525: CALL_OW 97
5529: PUSH
5530: LD_INT 1
5532: DOUBLE
5533: EQUAL
5534: IFTRUE 5538
5536: GO 5549
5538: POP
// wait_for_them := true ; 2 :
5539: LD_ADDR_VAR 0 3
5543: PUSH
5544: LD_INT 1
5546: ST_TO_ADDR
5547: GO 5561
5549: LD_INT 2
5551: DOUBLE
5552: EQUAL
5553: IFTRUE 5557
5555: GO 5560
5557: POP
// ; end ;
5558: GO 5561
5560: POP
// if wait_for_them then
5561: LD_VAR 0 3
5565: IFFALSE 5678
// repeat wait ( 0 0$01 ) ;
5567: LD_INT 35
5569: PPUSH
5570: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5574: LD_EXP 13
5578: PUSH
5579: LD_EXP 12
5583: AND
5584: PUSH
5585: LD_EXP 13
5589: PUSH
5590: LD_EXP 4
5594: NOT
5595: PUSH
5596: LD_EXP 16
5600: PPUSH
5601: CALL_OW 303
5605: OR
5606: PUSH
5607: LD_EXP 16
5611: PPUSH
5612: CALL_OW 301
5616: OR
5617: AND
5618: OR
5619: PUSH
5620: LD_EXP 12
5624: PUSH
5625: LD_EXP 7
5629: NOT
5630: PUSH
5631: LD_EXP 17
5635: PPUSH
5636: CALL_OW 303
5640: OR
5641: PUSH
5642: LD_EXP 17
5646: PPUSH
5647: CALL_OW 301
5651: OR
5652: AND
5653: OR
5654: PUSH
5655: LD_EXP 16
5659: PPUSH
5660: CALL_OW 301
5664: PUSH
5665: LD_EXP 17
5669: PPUSH
5670: CALL_OW 301
5674: AND
5675: OR
5676: IFFALSE 5567
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5678: LD_EXP 15
5682: PPUSH
5683: CALL_OW 256
5687: PPUSH
5688: LD_STRING 01_JMMLifePoints_1
5690: PPUSH
5691: CALL_OW 39
// RemoveUnit ( JMM ) ;
5695: LD_EXP 15
5699: PPUSH
5700: CALL_OW 64
// to_reward := [ JMM ] ;
5704: LD_ADDR_VAR 0 2
5708: PUSH
5709: LD_EXP 15
5713: PUSH
5714: EMPTY
5715: LIST
5716: ST_TO_ADDR
// if bobby_saved then
5717: LD_EXP 12
5721: IFFALSE 5739
// to_reward := to_reward ^ Bobby ;
5723: LD_ADDR_VAR 0 2
5727: PUSH
5728: LD_VAR 0 2
5732: PUSH
5733: LD_EXP 16
5737: ADD
5738: ST_TO_ADDR
// if cyrus_saved then
5739: LD_EXP 13
5743: IFFALSE 5761
// to_reward := to_reward ^ Cyrus ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_VAR 0 2
5754: PUSH
5755: LD_EXP 17
5759: ADD
5760: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
5761: LD_STRING JMM
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 101
// if not bobby_in_squad then
5771: LD_EXP 4
5775: NOT
5776: IFFALSE 5789
// AddMedal ( Bobby , - 1 ) ;
5778: LD_STRING Bobby
5780: PPUSH
5781: LD_INT 1
5783: NEG
5784: PPUSH
5785: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
5789: LD_EXP 12
5793: NOT
5794: PUSH
5795: LD_EXP 16
5799: PPUSH
5800: CALL_OW 303
5804: PUSH
5805: LD_EXP 16
5809: PPUSH
5810: CALL_OW 301
5814: OR
5815: AND
5816: IFFALSE 5829
// AddMedal ( Bobby , - 2 ) ;
5818: LD_STRING Bobby
5820: PPUSH
5821: LD_INT 2
5823: NEG
5824: PPUSH
5825: CALL_OW 101
// if not cyrus_in_squad then
5829: LD_EXP 7
5833: NOT
5834: IFFALSE 5847
// AddMedal ( Cyrus , - 1 ) ;
5836: LD_STRING Cyrus
5838: PPUSH
5839: LD_INT 1
5841: NEG
5842: PPUSH
5843: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
5847: LD_EXP 13
5851: NOT
5852: PUSH
5853: LD_EXP 17
5857: PPUSH
5858: CALL_OW 303
5862: PUSH
5863: LD_EXP 17
5867: PPUSH
5868: CALL_OW 301
5872: OR
5873: AND
5874: IFFALSE 5887
// AddMedal ( Cyrus , - 2 ) ;
5876: LD_STRING Cyrus
5878: PPUSH
5879: LD_INT 2
5881: NEG
5882: PPUSH
5883: CALL_OW 101
// GiveMedals ( MAIN ) ;
5887: LD_STRING MAIN
5889: PPUSH
5890: CALL_OW 102
// RewardPeople ( to_reward ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: CALL_OW 43
// if bobby_saved then
5903: LD_EXP 12
5907: IFFALSE 5927
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5909: LD_EXP 16
5913: PPUSH
5914: LD_EXP 2
5918: PUSH
5919: LD_STRING Bobby
5921: STR
5922: PPUSH
5923: CALL_OW 38
// if cyrus_saved then
5927: LD_EXP 13
5931: IFFALSE 5951
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5933: LD_EXP 17
5937: PPUSH
5938: LD_EXP 2
5942: PUSH
5943: LD_STRING Cyrus
5945: STR
5946: PPUSH
5947: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5951: LD_EXP 15
5955: PPUSH
5956: LD_EXP 2
5960: PUSH
5961: LD_STRING JMM
5963: STR
5964: PPUSH
5965: CALL_OW 38
// YouWin ;
5969: CALL_OW 103
// end ;
5973: PPOPN 3
5975: END
