// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 908 0 0
// InitRussian ;
  12: CALL 1147 0 0
// DebugMode ;
  16: CALL 145 0 0
// Action ;
  20: CALL 2579 0 0
// end ;
  24: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// mission_prefix := 01_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 01_
  35: ST_TO_ADDR
// debug := 0 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// active_russian_dialog := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// bobby_in_squad := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// cyrus_in_squad := false ;
  60: LD_ADDR_EXP 7
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// powell_contact := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// macmilan_use_radio := false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// active_road_patrol := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// macmilan_in_trap := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// meta_action := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// end_mission := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bobby_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// cyrus_saved := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// send_troops_to_forest := false ;
 132: LD_ADDR_EXP 14
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// end ;
 140: LD_VAR 0 1
 144: RET
// function DebugMode ; var i ; begin
 145: LD_INT 0
 147: PPUSH
 148: PPUSH
// if not debug then
 149: LD_EXP 1
 153: NOT
 154: IFFALSE 158
// exit ;
 156: GO 177
// Difficulty := 3 ;
 158: LD_ADDR_OWVAR 67
 162: PUSH
 163: LD_INT 3
 165: ST_TO_ADDR
// TurnFogOff ( ) ;
 166: CALL_OW 537
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// end ; end_of_file
 177: LD_VAR 0 1
 181: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 182: LD_INT 0
 184: PPUSH
 185: PPUSH
// if exist_mode then
 186: LD_VAR 0 2
 190: IFFALSE 209
// unit := CreateCharacter ( ident ) else
 192: LD_ADDR_VAR 0 4
 196: PUSH
 197: LD_VAR 0 1
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_VAR 0 4
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 3
 238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 239: LD_INT 0
 241: PPUSH
 242: PPUSH
 243: PPUSH
// uc_side := GetSide ( b ) ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 2
 253: PPUSH
 254: CALL_OW 255
 258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 248
 273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 274: LD_INT 0
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 254
 303: PUSH
 304: LD_INT 3
 306: MINUS
 307: ST_TO_ADDR
// if dir < 0 then
 308: LD_VAR 0 5
 312: PUSH
 313: LD_INT 0
 315: LESS
 316: IFFALSE 332
// dir := 6 + dir ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_INT 6
 325: PUSH
 326: LD_VAR 0 5
 330: PLUS
 331: ST_TO_ADDR
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// SetDir ( un , dir ) ;
 342: LD_VAR 0 4
 346: PPUSH
 347: LD_VAR 0 5
 351: PPUSH
 352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 356: LD_VAR 0 4
 360: PPUSH
 361: LD_VAR 0 2
 365: PPUSH
 366: CALL_OW 52
// end ;
 370: LD_VAR 0 3
 374: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 375: LD_INT 0
 377: PPUSH
// uc_side := side ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_VAR 0 1
 387: ST_TO_ADDR
// uc_nation := nation ;
 388: LD_ADDR_OWVAR 21
 392: PUSH
 393: LD_VAR 0 2
 397: ST_TO_ADDR
// vc_chassis := chassis ;
 398: LD_ADDR_OWVAR 37
 402: PUSH
 403: LD_VAR 0 3
 407: ST_TO_ADDR
// vc_engine := engine ;
 408: LD_ADDR_OWVAR 39
 412: PUSH
 413: LD_VAR 0 4
 417: ST_TO_ADDR
// vc_control := control ;
 418: LD_ADDR_OWVAR 38
 422: PUSH
 423: LD_VAR 0 5
 427: ST_TO_ADDR
// vc_weapon := weapon ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_VAR 0 6
 437: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 438: LD_ADDR_OWVAR 41
 442: PUSH
 443: LD_VAR 0 7
 447: ST_TO_ADDR
// result := CreateVehicle ;
 448: LD_ADDR_VAR 0 8
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// end ;
 458: LD_VAR 0 8
 462: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 463: LD_INT 0
 465: PPUSH
 466: PPUSH
// while ( active_road_patrol ) do
 467: LD_EXP 8
 471: IFFALSE 825
// begin Wait ( 0 0$01 ) ;
 473: LD_INT 35
 475: PPUSH
 476: CALL_OW 67
// if not unit then
 480: LD_VAR 0 1
 484: NOT
 485: IFFALSE 489
// exit ;
 487: GO 825
// if mode = road then
 489: LD_VAR 0 2
 493: PUSH
 494: LD_STRING road
 496: EQUAL
 497: IFFALSE 553
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 261
 508: PUSH
 509: LD_INT 50
 511: LESS
 512: PUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 292
 525: NOT
 526: AND
 527: PUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: CALL_OW 314
 537: NOT
 538: AND
 539: IFFALSE 553
// SetFuel ( unit , 100 ) ;
 541: LD_VAR 0 1
 545: PPUSH
 546: LD_INT 100
 548: PPUSH
 549: CALL_OW 240
// if mode = forest then
 553: LD_VAR 0 2
 557: PUSH
 558: LD_STRING forest
 560: EQUAL
 561: IFFALSE 641
// if GetLives ( unit ) < 600 then
 563: LD_VAR 0 1
 567: PPUSH
 568: CALL_OW 256
 572: PUSH
 573: LD_INT 600
 575: LESS
 576: IFFALSE 641
// begin ComMoveXY ( unit , 42 , 3 ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_INT 42
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 250
 607: PPUSH
 608: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: CALL_OW 232
// send_troops_to_forest := true ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// break ;
 639: GO 825
// end ; if not HasTask ( unit ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 314
 650: NOT
 651: IFFALSE 823
// begin for i = 1 to coords do
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_VAR 0 4
 667: PUSH
 668: FOR_TO
 669: IFFALSE 736
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 671: LD_VAR 0 1
 675: PPUSH
 676: LD_VAR 0 4
 680: PUSH
 681: LD_VAR 0 6
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 6
 696: PUSH
 697: LD_INT 1
 699: PLUS
 700: ARRAY
 701: PPUSH
 702: CALL_OW 174
// AddComWait ( unit , pause ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 202
// i := i + 1 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_INT 1
 732: PLUS
 733: ST_TO_ADDR
// end ;
 734: GO 668
 736: POP
 737: POP
// for i = coords downto 1 do
 738: LD_ADDR_VAR 0 6
 742: PUSH
 743: DOUBLE
 744: LD_VAR 0 4
 748: INC
 749: ST_TO_ADDR
 750: LD_INT 1
 752: PUSH
 753: FOR_DOWNTO
 754: IFFALSE 821
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 4
 765: PUSH
 766: LD_VAR 0 6
 770: PUSH
 771: LD_INT 1
 773: MINUS
 774: ARRAY
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: ARRAY
 786: PPUSH
 787: CALL_OW 174
// AddComWait ( unit , pause ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 3
 800: PPUSH
 801: CALL_OW 202
// i := i - 1 ;
 805: LD_ADDR_VAR 0 6
 809: PUSH
 810: LD_VAR 0 6
 814: PUSH
 815: LD_INT 1
 817: MINUS
 818: ST_TO_ADDR
// end ;
 819: GO 753
 821: POP
 822: POP
// end ; end ;
 823: GO 467
// end ;
 825: LD_VAR 0 5
 829: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
// uc_nation := 1 ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// uc_side := 0 ;
 842: LD_ADDR_OWVAR 20
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 380
// hc_name := speaker ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING speaker
 870: ST_TO_ADDR
// hc_gallery :=  ;
 871: LD_ADDR_OWVAR 33
 875: PUSH
 876: LD_STRING 
 878: ST_TO_ADDR
// speaker := CreateHuman ;
 879: LD_ADDR_VAR 0 3
 883: PUSH
 884: CALL_OW 44
 888: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 88
// end ; end_of_file
 903: LD_VAR 0 2
 907: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 908: LD_INT 0
 910: PPUSH
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 919: LD_ADDR_EXP 15
 923: PUSH
 924: LD_STRING JMM
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL 182 0 2
 934: ST_TO_ADDR
// uc_side := 4 ;
 935: LD_ADDR_OWVAR 20
 939: PUSH
 940: LD_INT 4
 942: ST_TO_ADDR
// hc_gallery := us ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING us
 950: ST_TO_ADDR
// hc_face_number := 7 ;
 951: LD_ADDR_OWVAR 34
 955: PUSH
 956: LD_INT 7
 958: ST_TO_ADDR
// hc_sex := sex_male ;
 959: LD_ADDR_OWVAR 27
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// hc_name := ... ;
 967: LD_ADDR_OWVAR 26
 971: PUSH
 972: LD_STRING ...
 974: ST_TO_ADDR
// hc_class := 1 ;
 975: LD_ADDR_OWVAR 28
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// Powell := CreateHuman ;
 983: LD_ADDR_EXP 18
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// hc_name := ... ;
 993: LD_ADDR_OWVAR 26
 997: PUSH
 998: LD_STRING ...
1000: ST_TO_ADDR
// hc_gallery := ru ;
1001: LD_ADDR_OWVAR 33
1005: PUSH
1006: LD_STRING ru
1008: ST_TO_ADDR
// hc_face_number := 4 ;
1009: LD_ADDR_OWVAR 34
1013: PUSH
1014: LD_INT 4
1016: ST_TO_ADDR
// hc_sex := sex_male ;
1017: LD_ADDR_OWVAR 27
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1025: LD_ADDR_EXP 19
1029: PUSH
1030: CALL_OW 44
1034: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1035: LD_ADDR_EXP 16
1039: PUSH
1040: LD_STRING Bobby
1042: PPUSH
1043: LD_INT 0
1045: PPUSH
1046: CALL 182 0 2
1050: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1051: LD_ADDR_EXP 17
1055: PUSH
1056: LD_STRING Cyrus
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL 182 0 2
1066: ST_TO_ADDR
// case Difficulty of 1 :
1067: LD_OWVAR 67
1071: PUSH
1072: LD_INT 1
1074: DOUBLE
1075: EQUAL
1076: IFTRUE 1080
1078: GO 1095
1080: POP
// SetLives ( Bobby , 500 ) ; 2 :
1081: LD_EXP 16
1085: PPUSH
1086: LD_INT 500
1088: PPUSH
1089: CALL_OW 234
1093: GO 1142
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1118
1103: POP
// SetLives ( Bobby , 460 ) ; 3 :
1104: LD_EXP 16
1108: PPUSH
1109: LD_INT 460
1111: PPUSH
1112: CALL_OW 234
1116: GO 1142
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1141
1126: POP
// SetLives ( Bobby , 420 ) ; end ;
1127: LD_EXP 16
1131: PPUSH
1132: LD_INT 420
1134: PPUSH
1135: CALL_OW 234
1139: GO 1142
1141: POP
// end ; end_of_file
1142: LD_VAR 0 1
1146: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1153: LD_ADDR_VAR 0 2
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_OWVAR 67
1176: ARRAY
1177: ST_TO_ADDR
// uc_side := 3 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// uc_nation := 3 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 3
1193: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1194: LD_ADDR_EXP 25
1198: PUSH
1199: LD_STRING Pokryshkin
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL 182 0 2
1209: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1210: LD_EXP 25
1214: PPUSH
1215: LD_INT 44
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 48
// hc_importance := 0 ;
1228: LD_ADDR_OWVAR 32
1232: PUSH
1233: LD_INT 0
1235: ST_TO_ADDR
// hc_gallery :=  ;
1236: LD_ADDR_OWVAR 33
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// hc_name :=  ;
1244: LD_ADDR_OWVAR 26
1248: PUSH
1249: LD_STRING 
1251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1252: LD_INT 1
1254: PPUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1267: LD_ADDR_OWVAR 33
1271: PUSH
1272: LD_STRING SecondCharsGal
1274: ST_TO_ADDR
// hc_face_number := 69 ;
1275: LD_ADDR_OWVAR 34
1279: PUSH
1280: LD_INT 69
1282: ST_TO_ADDR
// hc_sex := sex_male ;
1283: LD_ADDR_OWVAR 27
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1291: LD_ADDR_OWVAR 26
1295: PUSH
1296: LD_STRING Ilja Ivanov
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_EXP 20
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_VAR 0 4
1326: PPUSH
1327: CALL_OW 2
1331: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 70 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 70
1377: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Pavel Starczy
1385: ST_TO_ADDR
// un := CreateHuman ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: CALL_OW 44
1395: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1396: LD_ADDR_EXP 20
1400: PUSH
1401: LD_EXP 20
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL_OW 2
1418: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// InitHc ;
1434: CALL_OW 19
// for i = 1 to 7 do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1603
// begin PrepareHuman ( false , 1 , skill ) ;
1454: LD_INT 0
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 380
// un := CreateHuman ;
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// if i mod 2 = 0 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 2
1486: MOD
1487: PUSH
1488: LD_INT 0
1490: EQUAL
1491: IFFALSE 1548
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1493: LD_ADDR_EXP 20
1497: PUSH
1498: LD_EXP 20
1502: PPUSH
1503: LD_EXP 20
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_VAR 0 4
1516: PPUSH
1517: CALL_OW 2
1521: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// ComHold ( un ) ;
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 140
// end else
1546: GO 1601
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_EXP 21
1557: PPUSH
1558: LD_EXP 21
1562: PUSH
1563: LD_INT 1
1565: PLUS
1566: PPUSH
1567: LD_VAR 0 4
1571: PPUSH
1572: CALL_OW 2
1576: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1577: LD_VAR 0 4
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 49
// ComHold ( un ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL_OW 140
// end ; end ;
1601: GO 1451
1603: POP
1604: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: LD_INT 22
1612: PUSH
1613: LD_INT 3
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 30
1622: PUSH
1623: LD_INT 31
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 69
1638: PUSH
1639: FOR_IN
1640: IFFALSE 1658
// PrepareSolBun ( skill , i ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: CALL 239 0 2
1656: GO 1639
1658: POP
1659: POP
// for i = 1 to 2 do
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: DOUBLE
1666: LD_INT 1
1668: DEC
1669: ST_TO_ADDR
1670: LD_INT 2
1672: PUSH
1673: FOR_TO
1674: IFFALSE 1805
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1676: LD_ADDR_VAR 0 4
1680: PUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_INT 22
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: LD_INT 42
1698: PPUSH
1699: LD_INT 100
1701: PPUSH
1702: CALL 375 0 7
1706: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1707: LD_INT 0
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1722: CALL_OW 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1736: LD_VAR 0 4
1740: PPUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 131
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_VAR 0 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 14
1759: PUSH
1760: LD_INT 87
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_VAR 0 3
1771: ARRAY
1772: PPUSH
1773: LD_INT 0
1775: PPUSH
1776: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1780: LD_ADDR_EXP 22
1784: PUSH
1785: LD_EXP 22
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: CALL_OW 2
1802: ST_TO_ADDR
// end ;
1803: GO 1673
1805: POP
1806: POP
// for i = 1 to 2 do
1807: LD_ADDR_VAR 0 3
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 2
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1912
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1823: LD_INT 2
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: LD_INT 1
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_VAR 0 3
1841: ARRAY
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_INT 1
1848: PPUSH
1849: CALL_OW 380
// un := CreateHuman ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: CALL_OW 44
1862: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1863: LD_ADDR_EXP 23
1867: PUSH
1868: LD_EXP 23
1872: PPUSH
1873: LD_INT 1
1875: PPUSH
1876: LD_VAR 0 4
1880: PPUSH
1881: CALL_OW 2
1885: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1886: LD_VAR 0 4
1890: PPUSH
1891: LD_INT 10
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 49
// ComHold ( un ) ;
1901: LD_VAR 0 4
1905: PPUSH
1906: CALL_OW 140
// end ;
1910: GO 1820
1912: POP
1913: POP
// if Difficulty < 3 then
1914: LD_OWVAR 67
1918: PUSH
1919: LD_INT 3
1921: LESS
1922: IFFALSE 1926
// exit ;
1924: GO 1969
// PrepareHuman ( false , 1 , skill ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_VAR 0 2
1936: PPUSH
1937: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1941: LD_ADDR_EXP 24
1945: PUSH
1946: CALL_OW 44
1950: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1951: LD_EXP 24
1955: PPUSH
1956: LD_INT 82
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: CALL_OW 48
// end ;
1969: LD_VAR 0 1
1973: RET
// every 0 0$01 trigger active_road_patrol do
1974: LD_EXP 8
1978: IFFALSE 2044
1980: GO 1982
1982: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1983: LD_EXP 22
1987: PUSH
1988: LD_INT 1
1990: ARRAY
1991: PPUSH
1992: LD_STRING road
1994: PPUSH
1995: LD_INT 70
1997: PPUSH
1998: LD_INT 131
2000: PUSH
2001: LD_INT 87
2003: PUSH
2004: LD_INT 107
2006: PUSH
2007: LD_INT 75
2009: PUSH
2010: LD_INT 107
2012: PUSH
2013: LD_INT 66
2015: PUSH
2016: LD_INT 114
2018: PUSH
2019: LD_INT 61
2021: PUSH
2022: LD_INT 107
2024: PUSH
2025: LD_INT 34
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: PPUSH
2040: CALL 463 0 4
2044: END
// every 0 0$01 trigger active_road_patrol do
2045: LD_EXP 8
2049: IFFALSE 2107
2051: GO 2053
2053: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2054: LD_EXP 22
2058: PUSH
2059: LD_INT 2
2061: ARRAY
2062: PPUSH
2063: LD_STRING road
2065: PPUSH
2066: LD_INT 70
2068: PPUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 12
2074: PUSH
2075: LD_INT 37
2077: PUSH
2078: LD_INT 30
2080: PUSH
2081: LD_INT 65
2083: PUSH
2084: LD_INT 62
2086: PUSH
2087: LD_INT 107
2089: PUSH
2090: LD_INT 76
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: PPUSH
2103: CALL 463 0 4
2107: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2108: LD_EXP 24
2112: PPUSH
2113: CALL_OW 302
2117: IFFALSE 2179
2119: GO 2121
2121: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2122: LD_EXP 24
2126: PPUSH
2127: LD_STRING forest
2129: PPUSH
2130: LD_INT 35
2132: PPUSH
2133: LD_INT 52
2135: PUSH
2136: LD_INT 15
2138: PUSH
2139: LD_INT 81
2141: PUSH
2142: LD_INT 9
2144: PUSH
2145: LD_INT 120
2147: PUSH
2148: LD_INT 52
2150: PUSH
2151: LD_INT 135
2153: PUSH
2154: LD_INT 80
2156: PUSH
2157: LD_INT 122
2159: PUSH
2160: LD_INT 95
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL 463 0 4
2179: END
// every 0 0$01 trigger macmilan_use_radio do
2180: LD_EXP 6
2184: IFFALSE 2245
2186: GO 2188
2188: DISABLE
// begin active_road_patrol := false ;
2189: LD_ADDR_EXP 8
2193: PUSH
2194: LD_INT 0
2196: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2197: LD_EXP 22
2201: PPUSH
2202: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2206: LD_EXP 22
2210: PPUSH
2211: LD_INT 72
2213: PPUSH
2214: LD_INT 41
2216: PPUSH
2217: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2221: LD_EXP 21
2225: PPUSH
2226: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2230: LD_EXP 21
2234: PPUSH
2235: LD_INT 72
2237: PPUSH
2238: LD_INT 41
2240: PPUSH
2241: CALL_OW 174
// end ;
2245: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2246: LD_INT 9
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 1
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 70
2263: IFFALSE 2337
2265: GO 2267
2267: DISABLE
2268: LD_INT 0
2270: PPUSH
// begin enable ;
2271: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2272: LD_ADDR_VAR 0 1
2276: PUSH
2277: LD_INT 9
2279: PPUSH
2280: LD_INT 22
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 70
2294: PUSH
2295: LD_INT 1
2297: ARRAY
2298: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2299: LD_EXP 21
2303: PPUSH
2304: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2308: LD_EXP 21
2312: PPUSH
2313: LD_VAR 0 1
2317: PPUSH
2318: CALL_OW 250
2322: PPUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: CALL_OW 251
2332: PPUSH
2333: CALL_OW 174
// end ;
2337: PPOPN 1
2339: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2340: LD_EXP 22
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: CALL_OW 256
2353: PUSH
2354: LD_INT 999
2356: LESS
2357: PUSH
2358: LD_EXP 22
2362: PUSH
2363: LD_INT 2
2365: ARRAY
2366: PPUSH
2367: CALL_OW 256
2371: PUSH
2372: LD_INT 999
2374: LESS
2375: OR
2376: PUSH
2377: LD_INT 3
2379: PPUSH
2380: LD_EXP 15
2384: PPUSH
2385: CALL_OW 292
2389: AND
2390: IFFALSE 2417
2392: GO 2394
2394: DISABLE
// begin active_road_patrol := false ;
2395: LD_ADDR_EXP 8
2399: PUSH
2400: LD_INT 0
2402: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2403: LD_EXP 22
2407: PPUSH
2408: LD_EXP 15
2412: PPUSH
2413: CALL_OW 115
// end ;
2417: END
// every 0 0$01 trigger macmilan_in_trap do
2418: LD_EXP 9
2422: IFFALSE 2468
2424: GO 2426
2426: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2427: LD_EXP 21
2431: PPUSH
2432: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2436: LD_EXP 20
2440: PUSH
2441: LD_EXP 21
2445: ADD
2446: PUSH
2447: LD_EXP 25
2451: ADD
2452: PUSH
2453: LD_EXP 22
2457: ADD
2458: PPUSH
2459: LD_EXP 15
2463: PPUSH
2464: CALL_OW 115
// end ;
2468: END
// every 0 0$01 trigger meta_action do
2469: LD_EXP 10
2473: IFFALSE 2519
2475: GO 2477
2477: DISABLE
// begin active_road_patrol := false ;
2478: LD_ADDR_EXP 8
2482: PUSH
2483: LD_INT 0
2485: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2486: LD_EXP 20
2490: PUSH
2491: LD_EXP 21
2495: ADD
2496: PUSH
2497: LD_EXP 25
2501: ADD
2502: PUSH
2503: LD_EXP 22
2507: ADD
2508: PPUSH
2509: LD_INT 93
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 114
// end ;
2519: END
// every 0 0$20 trigger send_troops_to_forest do
2520: LD_EXP 14
2524: IFFALSE 2578
2526: GO 2528
2528: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2529: LD_EXP 24
2533: PPUSH
2534: CALL_OW 302
2538: NOT
2539: IFFALSE 2543
// exit ;
2541: GO 2578
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2543: LD_EXP 20
2547: PUSH
2548: LD_EXP 25
2552: ADD
2553: PPUSH
2554: LD_EXP 24
2558: PPUSH
2559: CALL_OW 252
2563: PPUSH
2564: LD_EXP 24
2568: PPUSH
2569: CALL_OW 253
2573: PPUSH
2574: CALL_OW 114
// end ; end_of_file
2578: END
// export function Action ; var i ; begin
2579: LD_INT 0
2581: PPUSH
2582: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2583: LD_ADDR_VAR 0 2
2587: PUSH
2588: LD_INT 22
2590: PUSH
2591: LD_INT 3
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PUSH
2598: LD_INT 25
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PPUSH
2612: CALL_OW 69
2616: PUSH
2617: FOR_IN
2618: IFFALSE 2631
// ComHold ( i ) ;
2620: LD_VAR 0 2
2624: PPUSH
2625: CALL_OW 140
2629: GO 2617
2631: POP
2632: POP
// InGameOn ;
2633: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2637: LD_INT 79
2639: PPUSH
2640: LD_INT 76
2642: PPUSH
2643: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2647: LD_INT 10
2649: PPUSH
2650: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2654: LD_EXP 15
2658: PPUSH
2659: LD_INT 80
2661: PPUSH
2662: LD_INT 79
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 48
// Wait ( 0 0$03 ) ;
2672: LD_INT 105
2674: PPUSH
2675: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2679: LD_EXP 15
2683: PPUSH
2684: LD_INT 80
2686: PPUSH
2687: LD_INT 76
2689: PPUSH
2690: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2694: LD_EXP 15
2698: PPUSH
2699: LD_STRING D1-JMM-1
2701: PPUSH
2702: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2706: LD_INT 10
2708: PPUSH
2709: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2713: LD_EXP 15
2717: PPUSH
2718: LD_INT 76
2720: PPUSH
2721: LD_INT 76
2723: PPUSH
2724: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2728: LD_EXP 15
2732: PPUSH
2733: LD_STRING D1-JMM-1a
2735: PPUSH
2736: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2740: LD_INT 10
2742: PPUSH
2743: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2747: LD_EXP 15
2751: PPUSH
2752: LD_INT 83
2754: PPUSH
2755: LD_INT 66
2757: PPUSH
2758: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2762: LD_EXP 15
2766: PPUSH
2767: LD_STRING D1-JMM-1b
2769: PPUSH
2770: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2774: LD_INT 18
2776: PPUSH
2777: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2781: LD_EXP 15
2785: PPUSH
2786: LD_STRING D1-JMM-1c
2788: PPUSH
2789: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2793: LD_INT 7
2795: PPUSH
2796: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2800: LD_EXP 18
2804: PPUSH
2805: LD_STRING D1-Pow-1
2807: PPUSH
2808: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2812: LD_EXP 15
2816: PPUSH
2817: LD_STRING D1-JMM-2
2819: PPUSH
2820: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2824: LD_EXP 18
2828: PPUSH
2829: LD_STRING D1-Pow-2
2831: PPUSH
2832: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2836: LD_EXP 15
2840: PPUSH
2841: LD_STRING D1-JMM-3
2843: PPUSH
2844: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2848: LD_EXP 18
2852: PPUSH
2853: LD_STRING D1-Pow-3
2855: PPUSH
2856: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2860: LD_EXP 15
2864: PPUSH
2865: LD_STRING D1-JMM-4
2867: PPUSH
2868: CALL_OW 88
// ComFree ( JMM ) ;
2872: LD_EXP 15
2876: PPUSH
2877: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 67
// InGameOff ;
2888: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2892: LD_STRING M1
2894: PPUSH
2895: CALL_OW 337
// SaveForQuickRestart ;
2899: CALL_OW 22
// active_russian_dialog := true ;
2903: LD_ADDR_EXP 3
2907: PUSH
2908: LD_INT 1
2910: ST_TO_ADDR
// active_road_patrol := true ;
2911: LD_ADDR_EXP 8
2915: PUSH
2916: LD_INT 1
2918: ST_TO_ADDR
// if Difficulty < 3 then
2919: LD_OWVAR 67
2923: PUSH
2924: LD_INT 3
2926: LESS
2927: IFFALSE 2958
// begin PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2929: LD_EXP 16
2933: PPUSH
2934: LD_INT 41
2936: PPUSH
2937: LD_INT 71
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 48
// ComHold ( Bobby ) ;
2947: LD_EXP 16
2951: PPUSH
2952: CALL_OW 140
// end else
2956: GO 3006
// begin SetDir ( Bobby , 5 ) ;
2958: LD_EXP 16
2962: PPUSH
2963: LD_INT 5
2965: PPUSH
2966: CALL_OW 233
// PlaceUnitXY ( Bobby , 108 , 97 , false ) ;
2970: LD_EXP 16
2974: PPUSH
2975: LD_INT 108
2977: PPUSH
2978: LD_INT 97
2980: PPUSH
2981: LD_INT 0
2983: PPUSH
2984: CALL_OW 48
// ComCrawl ( Bobby ) ;
2988: LD_EXP 16
2992: PPUSH
2993: CALL_OW 137
// AddComHold ( Bobby ) ;
2997: LD_EXP 16
3001: PPUSH
3002: CALL_OW 200
// end ; PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
3006: LD_EXP 17
3010: PPUSH
3011: LD_INT 90
3013: PPUSH
3014: LD_INT 42
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
3024: LD_EXP 17
3028: PPUSH
3029: LD_INT 79
3031: PPUSH
3032: LD_INT 34
3034: PPUSH
3035: CALL_OW 111
// AddComCrawl ( Cyrus ) ;
3039: LD_EXP 17
3043: PPUSH
3044: CALL_OW 197
// end ;
3048: LD_VAR 0 1
3052: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
3053: LD_EXP 3
3057: IFFALSE 3680
3059: GO 3061
3061: DISABLE
3062: LD_INT 0
3064: PPUSH
// begin wait_points := 0 ;
3065: LD_ADDR_VAR 0 1
3069: PUSH
3070: LD_INT 0
3072: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3073: LD_INT 70
3075: PPUSH
3076: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3080: LD_EXP 20
3084: PPUSH
3085: LD_INT 79
3087: PPUSH
3088: LD_INT 83
3090: PPUSH
3091: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3095: LD_EXP 20
3099: PUSH
3100: LD_INT 2
3102: ARRAY
3103: PPUSH
3104: LD_STRING D1R-Rus1-1
3106: PPUSH
3107: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3111: LD_EXP 20
3115: PUSH
3116: LD_INT 1
3118: ARRAY
3119: PPUSH
3120: LD_STRING D1R-Rus2-1
3122: PPUSH
3123: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
3127: LD_EXP 21
3131: PPUSH
3132: LD_INT 79
3134: PPUSH
3135: LD_INT 83
3137: PPUSH
3138: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3142: LD_INT 35
3144: PPUSH
3145: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3149: LD_EXP 20
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_INT 79
3160: PPUSH
3161: LD_INT 82
3163: PPUSH
3164: CALL_OW 297
3168: PUSH
3169: LD_INT 5
3171: LESS
3172: IFFALSE 3142
// if not IsInArea ( JMM , jmm_spot ) then
3174: LD_EXP 15
3178: PPUSH
3179: LD_INT 5
3181: PPUSH
3182: CALL_OW 308
3186: NOT
3187: IFFALSE 3207
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3189: LD_EXP 20
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PPUSH
3198: LD_STRING D1Ra-Rus2-1
3200: PPUSH
3201: CALL_OW 88
3205: GO 3343
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3207: LD_EXP 20
3211: PUSH
3212: LD_INT 2
3214: ARRAY
3215: PPUSH
3216: LD_STRING D1Rb-Rus1-1
3218: PPUSH
3219: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3223: LD_EXP 20
3227: PUSH
3228: LD_INT 1
3230: ARRAY
3231: PPUSH
3232: LD_STRING D1Rb-Rus2-1
3234: PPUSH
3235: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3239: LD_EXP 20
3243: PUSH
3244: LD_EXP 21
3248: ADD
3249: PPUSH
3250: LD_EXP 15
3254: PPUSH
3255: CALL_OW 250
3259: PPUSH
3260: LD_EXP 15
3264: PPUSH
3265: CALL_OW 251
3269: PPUSH
3270: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3274: LD_INT 35
3276: PPUSH
3277: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3281: LD_EXP 15
3285: PPUSH
3286: LD_INT 5
3288: PPUSH
3289: CALL_OW 308
3293: NOT
3294: PUSH
3295: LD_INT 3
3297: PPUSH
3298: LD_EXP 15
3302: PPUSH
3303: CALL_OW 292
3307: NOT
3308: AND
3309: IFFALSE 3274
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3311: LD_EXP 20
3315: PUSH
3316: LD_INT 2
3318: ARRAY
3319: PPUSH
3320: LD_STRING D1Rc-Rus1-1
3322: PPUSH
3323: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3327: LD_EXP 20
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_STRING D1Ra-Rus2-1a
3338: PPUSH
3339: CALL_OW 88
// end ; wait_points := 10 ;
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 10
3350: ST_TO_ADDR
// if Difficulty > 1 then
3351: LD_OWVAR 67
3355: PUSH
3356: LD_INT 1
3358: GREATER
3359: IFFALSE 3441
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3361: LD_EXP 20
3365: PPUSH
3366: LD_INT 78
3368: PPUSH
3369: LD_INT 95
3371: PPUSH
3372: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3376: LD_EXP 20
3380: PPUSH
3381: LD_INT 175
3383: PPUSH
3384: CALL_OW 202
// wait_points := wait_points + 15 ;
3388: LD_ADDR_VAR 0 1
3392: PUSH
3393: LD_VAR 0 1
3397: PUSH
3398: LD_INT 15
3400: PLUS
3401: ST_TO_ADDR
// if Difficulty > 2 then
3402: LD_OWVAR 67
3406: PUSH
3407: LD_INT 2
3409: GREATER
3410: IFFALSE 3441
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3412: LD_EXP 20
3416: PPUSH
3417: LD_INT 65
3419: PPUSH
3420: LD_INT 79
3422: PPUSH
3423: CALL_OW 174
// wait_points := wait_points + 5 ;
3427: LD_ADDR_VAR 0 1
3431: PUSH
3432: LD_VAR 0 1
3436: PUSH
3437: LD_INT 5
3439: PLUS
3440: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3441: LD_INT 35
3443: PPUSH
3444: CALL_OW 67
// wait_points := wait_points - 1 ;
3448: LD_ADDR_VAR 0 1
3452: PUSH
3453: LD_VAR 0 1
3457: PUSH
3458: LD_INT 1
3460: MINUS
3461: ST_TO_ADDR
// if See ( 3 , JMM ) then
3462: LD_INT 3
3464: PPUSH
3465: LD_EXP 15
3469: PPUSH
3470: CALL_OW 292
3474: IFFALSE 3528
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3476: LD_EXP 20
3480: PUSH
3481: LD_INT 2
3483: ARRAY
3484: PPUSH
3485: LD_STRING D1Rb-Rus1-1
3487: PPUSH
3488: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3492: LD_EXP 20
3496: PPUSH
3497: LD_EXP 15
3501: PPUSH
3502: CALL_OW 250
3506: PPUSH
3507: LD_EXP 15
3511: PPUSH
3512: CALL_OW 251
3516: PPUSH
3517: CALL_OW 114
// Wait ( 0 0$03 ) ;
3521: LD_INT 105
3523: PPUSH
3524: CALL_OW 67
// end ; until wait_points = 0 ;
3528: LD_VAR 0 1
3532: PUSH
3533: LD_INT 0
3535: EQUAL
3536: IFFALSE 3441
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3538: LD_EXP 20
3542: PPUSH
3543: LD_INT 45
3545: PPUSH
3546: LD_INT 5
3548: PPUSH
3549: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3553: LD_EXP 21
3557: PPUSH
3558: LD_INT 26
3560: PPUSH
3561: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3565: LD_INT 35
3567: PPUSH
3568: CALL_OW 67
// if See ( 3 , JMM ) then
3572: LD_INT 3
3574: PPUSH
3575: LD_EXP 15
3579: PPUSH
3580: CALL_OW 292
3584: IFFALSE 3640
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3586: LD_EXP 20
3590: PUSH
3591: LD_INT 2
3593: ARRAY
3594: PPUSH
3595: LD_STRING D1Rb-Rus1-1
3597: PPUSH
3598: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3602: LD_EXP 20
3606: PPUSH
3607: LD_EXP 15
3611: PPUSH
3612: CALL_OW 250
3616: PPUSH
3617: LD_EXP 15
3621: PPUSH
3622: CALL_OW 251
3626: PPUSH
3627: CALL_OW 114
// Wait ( 0 0$50 ) ;
3631: LD_INT 1750
3633: PPUSH
3634: CALL_OW 67
// end else
3638: GO 3655
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3640: LD_EXP 20
3644: PPUSH
3645: LD_INT 45
3647: PPUSH
3648: LD_INT 5
3650: PPUSH
3651: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3655: LD_EXP 20
3659: PUSH
3660: LD_INT 1
3662: ARRAY
3663: PPUSH
3664: LD_INT 45
3666: PPUSH
3667: LD_INT 5
3669: PPUSH
3670: CALL_OW 297
3674: PUSH
3675: LD_INT 10
3677: LESS
3678: IFFALSE 3565
// end ;
3680: PPOPN 1
3682: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3683: LD_EXP 15
3687: PPUSH
3688: LD_EXP 16
3692: PPUSH
3693: CALL_OW 296
3697: PUSH
3698: LD_INT 9
3700: LESS
3701: IFFALSE 4152
3703: GO 3705
3705: DISABLE
// begin ComWalk ( Bobby ) ;
3706: LD_EXP 16
3710: PPUSH
3711: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3715: LD_EXP 16
3719: PPUSH
3720: LD_EXP 15
3724: PPUSH
3725: CALL_OW 250
3729: PPUSH
3730: LD_EXP 15
3734: PPUSH
3735: CALL_OW 251
3739: PPUSH
3740: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3744: LD_INT 35
3746: PPUSH
3747: CALL_OW 67
// until See ( 4 , JMM ) ;
3751: LD_INT 4
3753: PPUSH
3754: LD_EXP 15
3758: PPUSH
3759: CALL_OW 292
3763: IFFALSE 3744
// InGameOn ;
3765: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3769: LD_EXP 15
3773: PPUSH
3774: LD_EXP 16
3778: PPUSH
3779: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3783: LD_EXP 7
3787: PUSH
3788: LD_EXP 17
3792: PPUSH
3793: CALL_OW 302
3797: AND
3798: PUSH
3799: LD_EXP 15
3803: PPUSH
3804: LD_EXP 17
3808: PPUSH
3809: CALL_OW 296
3813: PUSH
3814: LD_INT 10
3816: LESS
3817: AND
3818: IFFALSE 3863
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
3820: LD_EXP 17
3824: PPUSH
3825: LD_EXP 15
3829: PPUSH
3830: CALL_OW 250
3834: PPUSH
3835: LD_EXP 15
3839: PPUSH
3840: CALL_OW 251
3844: PPUSH
3845: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
3849: LD_EXP 17
3853: PPUSH
3854: LD_EXP 16
3858: PPUSH
3859: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
3863: LD_EXP 15
3867: PPUSH
3868: LD_STRING D2-JMM-1
3870: PPUSH
3871: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3875: LD_INT 10
3877: PPUSH
3878: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
3882: LD_EXP 16
3886: PPUSH
3887: LD_EXP 15
3891: PPUSH
3892: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
3896: LD_EXP 16
3900: PPUSH
3901: LD_STRING D2-Bobby-1
3903: PPUSH
3904: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3908: LD_EXP 15
3912: PPUSH
3913: LD_STRING D2-JMM-2
3915: PPUSH
3916: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3920: LD_EXP 16
3924: PPUSH
3925: LD_EXP 15
3929: PPUSH
3930: CALL_OW 250
3934: PPUSH
3935: LD_EXP 15
3939: PPUSH
3940: CALL_OW 251
3944: PPUSH
3945: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
3949: LD_EXP 16
3953: PPUSH
3954: LD_STRING D2-Bobby-2
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3961: LD_EXP 15
3965: PPUSH
3966: LD_STRING D2-JMM-3
3968: PPUSH
3969: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
3973: LD_EXP 16
3977: PPUSH
3978: LD_EXP 15
3982: PPUSH
3983: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
3987: LD_EXP 16
3991: PPUSH
3992: LD_STRING D2-Bobby-3
3994: PPUSH
3995: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3999: LD_EXP 15
4003: PPUSH
4004: LD_STRING D2-JMM-4
4006: PPUSH
4007: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
4011: LD_EXP 16
4015: PPUSH
4016: LD_STRING D2-Bobby-4
4018: PPUSH
4019: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
4023: LD_EXP 15
4027: PPUSH
4028: LD_STRING D2-JMM-5
4030: PPUSH
4031: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
4035: LD_EXP 16
4039: PPUSH
4040: LD_STRING D2-Bobby-5
4042: PPUSH
4043: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
4047: LD_EXP 15
4051: PPUSH
4052: LD_STRING D2-JMM-6
4054: PPUSH
4055: CALL_OW 88
// if not powell_contact then
4059: LD_EXP 5
4063: NOT
4064: IFFALSE 4090
// begin Say ( Bobby , D2-Bobby-6 ) ;
4066: LD_EXP 16
4070: PPUSH
4071: LD_STRING D2-Bobby-6
4073: PPUSH
4074: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4078: LD_EXP 15
4082: PPUSH
4083: LD_STRING D2-JMM-7
4085: PPUSH
4086: CALL_OW 88
// end ; InGameOff ;
4090: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4094: LD_EXP 16
4098: PPUSH
4099: LD_INT 1
4101: PPUSH
4102: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4106: LD_EXP 15
4110: PUSH
4111: LD_EXP 16
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 139
// bobby_in_squad := true ;
4124: LD_ADDR_EXP 4
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4132: LD_EXP 5
4136: PUSH
4137: LD_EXP 7
4141: NOT
4142: AND
4143: IFFALSE 4152
// ChangeMissionObjectives ( M2b ) ;
4145: LD_STRING M2b
4147: PPUSH
4148: CALL_OW 337
// end ;
4152: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad and Difficulty < 3 do
4153: LD_EXP 3
4157: PUSH
4158: LD_EXP 4
4162: NOT
4163: AND
4164: PUSH
4165: LD_OWVAR 67
4169: PUSH
4170: LD_INT 3
4172: LESS
4173: AND
4174: IFFALSE 4194
4176: GO 4178
4178: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4179: LD_EXP 16
4183: PPUSH
4184: LD_INT 75
4186: PPUSH
4187: LD_INT 83
4189: PPUSH
4190: CALL_OW 111
4194: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4195: LD_EXP 7
4199: PUSH
4200: LD_EXP 4
4204: NOT
4205: AND
4206: IFFALSE 4235
4208: GO 4210
4210: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4211: LD_EXP 16
4215: PPUSH
4216: LD_INT 105
4218: PPUSH
4219: LD_INT 97
4221: PPUSH
4222: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4226: LD_EXP 16
4230: PPUSH
4231: CALL_OW 197
// end ;
4235: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4236: LD_EXP 15
4240: PPUSH
4241: LD_INT 6
4243: PPUSH
4244: CALL_OW 308
4248: PUSH
4249: LD_EXP 15
4253: PPUSH
4254: LD_EXP 16
4258: PPUSH
4259: CALL_OW 296
4263: PUSH
4264: LD_INT 7
4266: LESS
4267: AND
4268: PUSH
4269: LD_EXP 4
4273: AND
4274: IFFALSE 4321
4276: GO 4278
4278: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4279: LD_EXP 15
4283: PUSH
4284: LD_EXP 16
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PPUSH
4293: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4297: LD_EXP 15
4301: PPUSH
4302: LD_STRING D2a-JMM-1
4304: PPUSH
4305: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4309: LD_EXP 16
4313: PPUSH
4314: LD_STRING D2a-Bobby-1
4316: PPUSH
4317: CALL_OW 88
// end ;
4321: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4322: LD_EXP 3
4326: PUSH
4327: LD_INT 3
4329: PPUSH
4330: LD_EXP 15
4334: PPUSH
4335: CALL_OW 292
4339: NOT
4340: AND
4341: IFFALSE 4517
4343: GO 4345
4345: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4346: LD_INT 350
4348: PPUSH
4349: LD_INT 700
4351: PPUSH
4352: CALL_OW 12
4356: PPUSH
4357: CALL_OW 67
// InGameOn ;
4361: CALL_OW 8
// DialogueOn ;
4365: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4369: LD_EXP 18
4373: PPUSH
4374: LD_STRING D3-Pow-1
4376: PPUSH
4377: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4381: LD_EXP 15
4385: PPUSH
4386: LD_STRING D3-JMM-1
4388: PPUSH
4389: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4393: LD_EXP 18
4397: PPUSH
4398: LD_STRING D3-Pow-2
4400: PPUSH
4401: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4405: LD_EXP 15
4409: PPUSH
4410: LD_STRING D3-JMM-2
4412: PPUSH
4413: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4417: LD_EXP 18
4421: PPUSH
4422: LD_STRING D3-Pow-3
4424: PPUSH
4425: CALL_OW 94
// DialogueOff ;
4429: CALL_OW 7
// InGameOff ;
4433: CALL_OW 9
// powell_contact := true ;
4437: LD_ADDR_EXP 5
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4445: LD_INT 10
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: CALL_OW 424
// uc_side := 4 ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_INT 4
4462: ST_TO_ADDR
// uc_nation := 1 ;
4463: LD_ADDR_OWVAR 21
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4471: LD_ADDR_EXP 18
4475: PUSH
4476: LD_STRING Powell
4478: PPUSH
4479: LD_INT 0
4481: PPUSH
4482: CALL 182 0 2
4486: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4487: LD_STRING M2
4489: PPUSH
4490: CALL_OW 337
// if not bobby_in_squad then
4494: LD_EXP 4
4498: NOT
4499: IFFALSE 4510
// ChangeMissionObjectives ( M2a ) else
4501: LD_STRING M2a
4503: PPUSH
4504: CALL_OW 337
4508: GO 4517
// ChangeMissionObjectives ( M2b ) ;
4510: LD_STRING M2b
4512: PPUSH
4513: CALL_OW 337
// end ;
4517: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4518: LD_EXP 15
4522: PPUSH
4523: LD_INT 7
4525: PPUSH
4526: CALL_OW 308
4530: IFFALSE 4665
4532: GO 4534
4534: DISABLE
// begin DialogueOn ;
4535: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4539: LD_EXP 19
4543: PPUSH
4544: LD_STRING D4-Rus3-1
4546: PPUSH
4547: CALL_OW 94
// DialogueOff ;
4551: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4555: LD_STRING M3a
4557: PPUSH
4558: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4562: LD_INT 11
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: CALL_OW 424
// Wait ( 0 0$02 ) ;
4572: LD_INT 70
4574: PPUSH
4575: CALL_OW 67
// DialogueOn ;
4579: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4583: LD_EXP 18
4587: PPUSH
4588: LD_STRING D4-Pow-1
4590: PPUSH
4591: CALL_OW 94
// DialogueOff ;
4595: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4599: LD_STRING M3b
4601: PPUSH
4602: CALL_OW 337
// case Query ( Q1 ) of 1 :
4606: LD_STRING Q1
4608: PPUSH
4609: CALL_OW 97
4613: PUSH
4614: LD_INT 1
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4622
4620: GO 4653
4622: POP
// begin macmilan_use_radio := true ;
4623: LD_ADDR_EXP 6
4627: PUSH
4628: LD_INT 1
4630: ST_TO_ADDR
// DialogueOn ;
4631: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4635: LD_EXP 15
4639: PPUSH
4640: LD_STRING D4a-JMM-1
4642: PPUSH
4643: CALL_OW 88
// DialogueOff ;
4647: CALL_OW 7
// end ; 2 :
4651: GO 4665
4653: LD_INT 2
4655: DOUBLE
4656: EQUAL
4657: IFTRUE 4661
4659: GO 4664
4661: POP
// ; end ;
4662: GO 4665
4664: POP
// end ;
4665: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4666: LD_EXP 15
4670: PPUSH
4671: LD_EXP 17
4675: PPUSH
4676: CALL_OW 296
4680: PUSH
4681: LD_INT 8
4683: LESS
4684: IFFALSE 4935
4686: GO 4688
4688: DISABLE
// begin InGameOn ;
4689: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4693: LD_EXP 15
4697: PPUSH
4698: LD_EXP 17
4702: PPUSH
4703: CALL_OW 250
4707: PPUSH
4708: LD_EXP 17
4712: PPUSH
4713: CALL_OW 251
4717: PPUSH
4718: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4722: LD_EXP 16
4726: PPUSH
4727: CALL_OW 302
4731: PUSH
4732: LD_EXP 4
4736: AND
4737: IFFALSE 4768
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4739: LD_EXP 16
4743: PPUSH
4744: LD_EXP 15
4748: PPUSH
4749: CALL_OW 250
4753: PPUSH
4754: LD_EXP 15
4758: PPUSH
4759: CALL_OW 251
4763: PPUSH
4764: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4768: LD_EXP 15
4772: PPUSH
4773: LD_STRING D5-JMM-1
4775: PPUSH
4776: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4780: LD_INT 10
4782: PPUSH
4783: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4787: LD_EXP 15
4791: PPUSH
4792: LD_EXP 17
4796: PPUSH
4797: CALL_OW 119
// ComWalk ( Cyrus ) ;
4801: LD_EXP 17
4805: PPUSH
4806: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4810: LD_EXP 17
4814: PPUSH
4815: LD_EXP 15
4819: PPUSH
4820: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
4824: LD_EXP 17
4828: PPUSH
4829: LD_STRING D5-Cyrus-1
4831: PPUSH
4832: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
4836: LD_EXP 16
4840: PPUSH
4841: CALL_OW 302
4845: PUSH
4846: LD_EXP 4
4850: AND
4851: IFFALSE 4891
// begin ComTurnUnit ( Bobby , Cyrus ) ;
4853: LD_EXP 16
4857: PPUSH
4858: LD_EXP 17
4862: PPUSH
4863: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
4867: LD_EXP 16
4871: PPUSH
4872: LD_STRING D5-Bobby-1
4874: PPUSH
4875: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
4879: LD_EXP 15
4883: PPUSH
4884: LD_STRING D5-JMM-2
4886: PPUSH
4887: CALL_OW 88
// end ; InGameOff ;
4891: CALL_OW 9
// cyrus_in_squad := true ;
4895: LD_ADDR_EXP 7
4899: PUSH
4900: LD_INT 1
4902: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
4903: LD_EXP 17
4907: PPUSH
4908: LD_INT 1
4910: PPUSH
4911: CALL_OW 235
// if powell_contact and not bobby_in_squad then
4915: LD_EXP 5
4919: PUSH
4920: LD_EXP 4
4924: NOT
4925: AND
4926: IFFALSE 4935
// ChangeMissionObjectives ( M2b ) ;
4928: LD_STRING M2b
4930: PPUSH
4931: CALL_OW 337
// end ;
4935: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
4936: LD_EXP 4
4940: PUSH
4941: LD_EXP 7
4945: AND
4946: IFFALSE 4958
4948: GO 4950
4950: DISABLE
// ChangeMissionObjectives ( M2c ) ;
4951: LD_STRING M2c
4953: PPUSH
4954: CALL_OW 337
4958: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
4959: LD_EXP 15
4963: PPUSH
4964: LD_INT 8
4966: PPUSH
4967: CALL_OW 308
4971: IFFALSE 5023
4973: GO 4975
4975: DISABLE
// begin macmilan_in_trap := true ;
4976: LD_ADDR_EXP 9
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4984: LD_INT 35
4986: PPUSH
4987: CALL_OW 67
// DialogueOn ;
4991: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
4995: LD_EXP 25
4999: PPUSH
5000: LD_STRING D5-Pok-1
5002: PPUSH
5003: CALL_OW 88
// DialogueOff ;
5007: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
5011: LD_EXP 15
5015: PPUSH
5016: LD_STRING D4b-JMM-1
5018: PPUSH
5019: CALL_OW 88
// end ;
5023: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or UnitFilter ( russian_meta_guards , [ f_not , [ f_lives , 990 ] ] ) do var i , hp ;
5024: LD_EXP 15
5028: PPUSH
5029: LD_EXP 23
5033: PUSH
5034: LD_EXP 23
5038: ARRAY
5039: PPUSH
5040: CALL_OW 296
5044: PUSH
5045: LD_INT 12
5047: LESS
5048: PUSH
5049: LD_EXP 23
5053: PPUSH
5054: LD_INT 3
5056: PUSH
5057: LD_INT 24
5059: PUSH
5060: LD_INT 990
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 72
5075: OR
5076: IFFALSE 5306
5078: GO 5080
5080: DISABLE
5081: LD_INT 0
5083: PPUSH
5084: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_INT 300
5092: PUSH
5093: LD_INT 250
5095: PUSH
5096: LD_INT 200
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_OWVAR 67
5108: ARRAY
5109: ST_TO_ADDR
// for i in russian_meta_guards do
5110: LD_ADDR_VAR 0 1
5114: PUSH
5115: LD_EXP 23
5119: PUSH
5120: FOR_IN
5121: IFFALSE 5161
// if IsOk ( i ) then
5123: LD_VAR 0 1
5127: PPUSH
5128: CALL_OW 302
5132: IFFALSE 5159
// SetLives ( i , GetLives ( i ) - hp ) ;
5134: LD_VAR 0 1
5138: PPUSH
5139: LD_VAR 0 1
5143: PPUSH
5144: CALL_OW 256
5148: PUSH
5149: LD_VAR 0 2
5153: MINUS
5154: PPUSH
5155: CALL_OW 234
5159: GO 5120
5161: POP
5162: POP
// DialogueOn ;
5163: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5167: LD_EXP 23
5171: PUSH
5172: LD_EXP 23
5176: ARRAY
5177: PPUSH
5178: LD_STRING D6-FRus1-1
5180: PPUSH
5181: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5185: LD_EXP 15
5189: PPUSH
5190: LD_STRING D6-JMM-1
5192: PPUSH
5193: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5197: LD_EXP 17
5201: PPUSH
5202: CALL_OW 302
5206: PUSH
5207: LD_EXP 7
5211: AND
5212: IFFALSE 5226
// Say ( Cyrus , D6-Cyrus-1 ) ;
5214: LD_EXP 17
5218: PPUSH
5219: LD_STRING D6-Cyrus-1
5221: PPUSH
5222: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5226: LD_EXP 16
5230: PPUSH
5231: CALL_OW 302
5235: PUSH
5236: LD_EXP 4
5240: AND
5241: IFFALSE 5255
// Say ( Bobby , D6-Bobby-1 ) ;
5243: LD_EXP 16
5247: PPUSH
5248: LD_STRING D6-Bobby-1
5250: PPUSH
5251: CALL_OW 88
// DialogueOff ;
5255: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5259: LD_INT 140
5261: PUSH
5262: LD_INT 105
5264: PUSH
5265: LD_INT 70
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_OWVAR 67
5277: ARRAY
5278: PPUSH
5279: CALL_OW 67
// meta_action := true ;
5283: LD_ADDR_EXP 10
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5291: LD_EXP 23
5295: PPUSH
5296: LD_INT 94
5298: PPUSH
5299: LD_INT 8
5301: PPUSH
5302: CALL_OW 114
// end ;
5306: PPOPN 2
5308: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5309: LD_EXP 15
5313: PPUSH
5314: LD_INT 93
5316: PPUSH
5317: LD_INT 1
5319: PPUSH
5320: CALL_OW 297
5324: PUSH
5325: LD_INT 5
5327: LESS
5328: PUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 69
5343: PUSH
5344: LD_INT 1
5346: GREATER
5347: AND
5348: IFFALSE 5365
5350: GO 5352
5352: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5353: LD_EXP 15
5357: PPUSH
5358: LD_STRING D6a-JMM-1
5360: PPUSH
5361: CALL_OW 88
5365: END
// on UnitGoesToRed ( un ) do begin if un = JMM then
5366: LD_VAR 0 1
5370: PUSH
5371: LD_EXP 15
5375: EQUAL
5376: IFFALSE 5385
// YouLost ( JMM ) ;
5378: LD_STRING JMM
5380: PPUSH
5381: CALL_OW 104
// end ;
5385: PPOPN 1
5387: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5388: LD_VAR 0 1
5392: PUSH
5393: LD_EXP 15
5397: EQUAL
5398: IFFALSE 5407
// YouLost ( JMM ) ;
5400: LD_STRING JMM
5402: PPUSH
5403: CALL_OW 104
// end ;
5407: PPOPN 1
5409: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5410: LD_EXP 16
5414: PPUSH
5415: LD_INT 10
5417: PPUSH
5418: CALL_OW 308
5422: IFFALSE 5471
5424: GO 5426
5426: DISABLE
// begin bobby_saved := true ;
5427: LD_ADDR_EXP 12
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5435: LD_EXP 16
5439: PPUSH
5440: CALL_OW 256
5444: PPUSH
5445: LD_STRING 01_BobbyLifePoints_1
5447: PPUSH
5448: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5461: LD_STRING Bobby
5463: PPUSH
5464: LD_INT 1
5466: PPUSH
5467: CALL_OW 101
// end ;
5471: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5472: LD_EXP 17
5476: PPUSH
5477: LD_INT 10
5479: PPUSH
5480: CALL_OW 308
5484: IFFALSE 5533
5486: GO 5488
5488: DISABLE
// begin cyrus_saved := true ;
5489: LD_ADDR_EXP 13
5493: PUSH
5494: LD_INT 1
5496: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5497: LD_EXP 17
5501: PPUSH
5502: CALL_OW 256
5506: PPUSH
5507: LD_STRING 01_CyrusLifePoints_1
5509: PPUSH
5510: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5514: LD_EXP 17
5518: PPUSH
5519: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5523: LD_STRING Cyrus
5525: PPUSH
5526: LD_INT 1
5528: PPUSH
5529: CALL_OW 101
// end ;
5533: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5534: LD_EXP 15
5538: PPUSH
5539: LD_INT 10
5541: PPUSH
5542: CALL_OW 308
5546: IFFALSE 6055
5548: GO 5550
5550: DISABLE
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
5555: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5556: LD_EXP 13
5560: NOT
5561: PUSH
5562: LD_EXP 7
5566: AND
5567: PUSH
5568: LD_EXP 17
5572: PPUSH
5573: CALL_OW 302
5577: AND
5578: PUSH
5579: LD_EXP 12
5583: NOT
5584: PUSH
5585: LD_EXP 4
5589: AND
5590: PUSH
5591: LD_EXP 16
5595: PPUSH
5596: CALL_OW 302
5600: AND
5601: OR
5602: IFFALSE 5643
// case Query ( Q2 ) of 1 :
5604: LD_STRING Q2
5606: PPUSH
5607: CALL_OW 97
5611: PUSH
5612: LD_INT 1
5614: DOUBLE
5615: EQUAL
5616: IFTRUE 5620
5618: GO 5631
5620: POP
// wait_for_them := true ; 2 :
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
5629: GO 5643
5631: LD_INT 2
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5642
5639: POP
// ; end ;
5640: GO 5643
5642: POP
// if wait_for_them then
5643: LD_VAR 0 3
5647: IFFALSE 5760
// repeat wait ( 0 0$01 ) ;
5649: LD_INT 35
5651: PPUSH
5652: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5656: LD_EXP 13
5660: PUSH
5661: LD_EXP 12
5665: AND
5666: PUSH
5667: LD_EXP 13
5671: PUSH
5672: LD_EXP 4
5676: NOT
5677: PUSH
5678: LD_EXP 16
5682: PPUSH
5683: CALL_OW 303
5687: OR
5688: PUSH
5689: LD_EXP 16
5693: PPUSH
5694: CALL_OW 301
5698: OR
5699: AND
5700: OR
5701: PUSH
5702: LD_EXP 12
5706: PUSH
5707: LD_EXP 7
5711: NOT
5712: PUSH
5713: LD_EXP 17
5717: PPUSH
5718: CALL_OW 303
5722: OR
5723: PUSH
5724: LD_EXP 17
5728: PPUSH
5729: CALL_OW 301
5733: OR
5734: AND
5735: OR
5736: PUSH
5737: LD_EXP 16
5741: PPUSH
5742: CALL_OW 301
5746: PUSH
5747: LD_EXP 17
5751: PPUSH
5752: CALL_OW 301
5756: AND
5757: OR
5758: IFFALSE 5649
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5760: LD_EXP 15
5764: PPUSH
5765: CALL_OW 256
5769: PPUSH
5770: LD_STRING 01_JMMLifePoints_1
5772: PPUSH
5773: CALL_OW 39
// RemoveUnit ( JMM ) ;
5777: LD_EXP 15
5781: PPUSH
5782: CALL_OW 64
// to_reward := [ JMM ] ;
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_EXP 15
5795: PUSH
5796: EMPTY
5797: LIST
5798: ST_TO_ADDR
// if bobby_saved then
5799: LD_EXP 12
5803: IFFALSE 5821
// to_reward := to_reward ^ Bobby ;
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: LD_VAR 0 2
5814: PUSH
5815: LD_EXP 16
5819: ADD
5820: ST_TO_ADDR
// if cyrus_saved then
5821: LD_EXP 13
5825: IFFALSE 5843
// to_reward := to_reward ^ Cyrus ;
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: LD_VAR 0 2
5836: PUSH
5837: LD_EXP 17
5841: ADD
5842: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
5843: LD_STRING JMM
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: CALL_OW 101
// if not bobby_in_squad then
5853: LD_EXP 4
5857: NOT
5858: IFFALSE 5871
// AddMedal ( Bobby , - 1 ) ;
5860: LD_STRING Bobby
5862: PPUSH
5863: LD_INT 1
5865: NEG
5866: PPUSH
5867: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
5871: LD_EXP 12
5875: NOT
5876: PUSH
5877: LD_EXP 16
5881: PPUSH
5882: CALL_OW 303
5886: PUSH
5887: LD_EXP 16
5891: PPUSH
5892: CALL_OW 301
5896: OR
5897: AND
5898: IFFALSE 5911
// AddMedal ( Bobby , - 2 ) ;
5900: LD_STRING Bobby
5902: PPUSH
5903: LD_INT 2
5905: NEG
5906: PPUSH
5907: CALL_OW 101
// if not cyrus_in_squad then
5911: LD_EXP 7
5915: NOT
5916: IFFALSE 5929
// AddMedal ( Cyrus , - 1 ) ;
5918: LD_STRING Cyrus
5920: PPUSH
5921: LD_INT 1
5923: NEG
5924: PPUSH
5925: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
5929: LD_EXP 13
5933: NOT
5934: PUSH
5935: LD_EXP 17
5939: PPUSH
5940: CALL_OW 303
5944: PUSH
5945: LD_EXP 17
5949: PPUSH
5950: CALL_OW 301
5954: OR
5955: AND
5956: IFFALSE 5969
// AddMedal ( Cyrus , - 2 ) ;
5958: LD_STRING Cyrus
5960: PPUSH
5961: LD_INT 2
5963: NEG
5964: PPUSH
5965: CALL_OW 101
// GiveMedals ( MAIN ) ;
5969: LD_STRING MAIN
5971: PPUSH
5972: CALL_OW 102
// RewardPeople ( to_reward ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: CALL_OW 43
// if bobby_saved then
5985: LD_EXP 12
5989: IFFALSE 6009
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5991: LD_EXP 16
5995: PPUSH
5996: LD_EXP 2
6000: PUSH
6001: LD_STRING Bobby
6003: STR
6004: PPUSH
6005: CALL_OW 38
// if cyrus_saved then
6009: LD_EXP 13
6013: IFFALSE 6033
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
6015: LD_EXP 17
6019: PPUSH
6020: LD_EXP 2
6024: PUSH
6025: LD_STRING Cyrus
6027: STR
6028: PPUSH
6029: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
6033: LD_EXP 15
6037: PPUSH
6038: LD_EXP 2
6042: PUSH
6043: LD_STRING JMM
6045: STR
6046: PPUSH
6047: CALL_OW 38
// YouWin ;
6051: CALL_OW 103
// end ;
6055: PPOPN 3
6057: END
