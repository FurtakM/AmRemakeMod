// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 908 0 0
// InitRussian ;
  12: CALL 1147 0 0
// DebugMode ;
  16: CALL 145 0 0
// Action ;
  20: CALL 2578 0 0
// end ;
  24: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// mission_prefix := 01_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 01_
  35: ST_TO_ADDR
// debug := false ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// active_russian_dialog := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// bobby_in_squad := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// cyrus_in_squad := false ;
  60: LD_ADDR_EXP 7
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// powell_contact := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// macmilan_use_radio := false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// active_road_patrol := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// macmilan_in_trap := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// meta_action := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// end_mission := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bobby_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// cyrus_saved := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// send_troops_to_forest := false ;
 132: LD_ADDR_EXP 14
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// end ;
 140: LD_VAR 0 1
 144: RET
// function DebugMode ; var i ; begin
 145: LD_INT 0
 147: PPUSH
 148: PPUSH
// if not debug then
 149: LD_EXP 1
 153: NOT
 154: IFFALSE 158
// exit ;
 156: GO 177
// Difficulty := 3 ;
 158: LD_ADDR_OWVAR 67
 162: PUSH
 163: LD_INT 3
 165: ST_TO_ADDR
// TurnFogOff ( ) ;
 166: CALL_OW 537
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// end ; end_of_file
 177: LD_VAR 0 1
 181: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 182: LD_INT 0
 184: PPUSH
 185: PPUSH
// if exist_mode then
 186: LD_VAR 0 2
 190: IFFALSE 209
// unit := CreateCharacter ( ident ) else
 192: LD_ADDR_VAR 0 4
 196: PUSH
 197: LD_VAR 0 1
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_VAR 0 4
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 3
 238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 239: LD_INT 0
 241: PPUSH
 242: PPUSH
 243: PPUSH
// uc_side := GetSide ( b ) ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 2
 253: PPUSH
 254: CALL_OW 255
 258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 248
 273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 274: LD_INT 0
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 254
 303: PUSH
 304: LD_INT 3
 306: MINUS
 307: ST_TO_ADDR
// if dir < 0 then
 308: LD_VAR 0 5
 312: PUSH
 313: LD_INT 0
 315: LESS
 316: IFFALSE 332
// dir := 6 + dir ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_INT 6
 325: PUSH
 326: LD_VAR 0 5
 330: PLUS
 331: ST_TO_ADDR
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// SetDir ( un , dir ) ;
 342: LD_VAR 0 4
 346: PPUSH
 347: LD_VAR 0 5
 351: PPUSH
 352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 356: LD_VAR 0 4
 360: PPUSH
 361: LD_VAR 0 2
 365: PPUSH
 366: CALL_OW 52
// end ;
 370: LD_VAR 0 3
 374: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 375: LD_INT 0
 377: PPUSH
// uc_side := side ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_VAR 0 1
 387: ST_TO_ADDR
// uc_nation := nation ;
 388: LD_ADDR_OWVAR 21
 392: PUSH
 393: LD_VAR 0 2
 397: ST_TO_ADDR
// vc_chassis := chassis ;
 398: LD_ADDR_OWVAR 37
 402: PUSH
 403: LD_VAR 0 3
 407: ST_TO_ADDR
// vc_engine := engine ;
 408: LD_ADDR_OWVAR 39
 412: PUSH
 413: LD_VAR 0 4
 417: ST_TO_ADDR
// vc_control := control ;
 418: LD_ADDR_OWVAR 38
 422: PUSH
 423: LD_VAR 0 5
 427: ST_TO_ADDR
// vc_weapon := weapon ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_VAR 0 6
 437: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 438: LD_ADDR_OWVAR 41
 442: PUSH
 443: LD_VAR 0 7
 447: ST_TO_ADDR
// result := CreateVehicle ;
 448: LD_ADDR_VAR 0 8
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// end ;
 458: LD_VAR 0 8
 462: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 463: LD_INT 0
 465: PPUSH
 466: PPUSH
// while ( active_road_patrol ) do
 467: LD_EXP 8
 471: IFFALSE 825
// begin Wait ( 0 0$01 ) ;
 473: LD_INT 35
 475: PPUSH
 476: CALL_OW 67
// if not unit then
 480: LD_VAR 0 1
 484: NOT
 485: IFFALSE 489
// exit ;
 487: GO 825
// if mode = road then
 489: LD_VAR 0 2
 493: PUSH
 494: LD_STRING road
 496: EQUAL
 497: IFFALSE 553
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 261
 508: PUSH
 509: LD_INT 50
 511: LESS
 512: PUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 292
 525: NOT
 526: AND
 527: PUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: CALL_OW 314
 537: NOT
 538: AND
 539: IFFALSE 553
// SetFuel ( unit , 100 ) ;
 541: LD_VAR 0 1
 545: PPUSH
 546: LD_INT 100
 548: PPUSH
 549: CALL_OW 240
// if mode = forest then
 553: LD_VAR 0 2
 557: PUSH
 558: LD_STRING forest
 560: EQUAL
 561: IFFALSE 641
// if GetLives ( unit ) < 600 then
 563: LD_VAR 0 1
 567: PPUSH
 568: CALL_OW 256
 572: PUSH
 573: LD_INT 600
 575: LESS
 576: IFFALSE 641
// begin ComMoveXY ( unit , 42 , 3 ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_INT 42
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 250
 607: PPUSH
 608: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: CALL_OW 232
// send_troops_to_forest := true ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// break ;
 639: GO 825
// end ; if not HasTask ( unit ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 314
 650: NOT
 651: IFFALSE 823
// begin for i = 1 to coords do
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_VAR 0 4
 667: PUSH
 668: FOR_TO
 669: IFFALSE 736
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 671: LD_VAR 0 1
 675: PPUSH
 676: LD_VAR 0 4
 680: PUSH
 681: LD_VAR 0 6
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 6
 696: PUSH
 697: LD_INT 1
 699: PLUS
 700: ARRAY
 701: PPUSH
 702: CALL_OW 174
// AddComWait ( unit , pause ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 202
// i := i + 1 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_INT 1
 732: PLUS
 733: ST_TO_ADDR
// end ;
 734: GO 668
 736: POP
 737: POP
// for i = coords downto 1 do
 738: LD_ADDR_VAR 0 6
 742: PUSH
 743: DOUBLE
 744: LD_VAR 0 4
 748: INC
 749: ST_TO_ADDR
 750: LD_INT 1
 752: PUSH
 753: FOR_DOWNTO
 754: IFFALSE 821
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 4
 765: PUSH
 766: LD_VAR 0 6
 770: PUSH
 771: LD_INT 1
 773: MINUS
 774: ARRAY
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: ARRAY
 786: PPUSH
 787: CALL_OW 174
// AddComWait ( unit , pause ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 3
 800: PPUSH
 801: CALL_OW 202
// i := i - 1 ;
 805: LD_ADDR_VAR 0 6
 809: PUSH
 810: LD_VAR 0 6
 814: PUSH
 815: LD_INT 1
 817: MINUS
 818: ST_TO_ADDR
// end ;
 819: GO 753
 821: POP
 822: POP
// end ; end ;
 823: GO 467
// end ;
 825: LD_VAR 0 5
 829: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
// uc_nation := 1 ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// uc_side := 0 ;
 842: LD_ADDR_OWVAR 20
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 380
// hc_name := speaker ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING speaker
 870: ST_TO_ADDR
// hc_gallery :=  ;
 871: LD_ADDR_OWVAR 33
 875: PUSH
 876: LD_STRING 
 878: ST_TO_ADDR
// speaker := CreateHuman ;
 879: LD_ADDR_VAR 0 3
 883: PUSH
 884: CALL_OW 44
 888: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 88
// end ; end_of_file
 903: LD_VAR 0 2
 907: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 908: LD_INT 0
 910: PPUSH
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 919: LD_ADDR_EXP 15
 923: PUSH
 924: LD_STRING JMM
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL 182 0 2
 934: ST_TO_ADDR
// uc_side := 4 ;
 935: LD_ADDR_OWVAR 20
 939: PUSH
 940: LD_INT 4
 942: ST_TO_ADDR
// hc_gallery := us ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING us
 950: ST_TO_ADDR
// hc_face_number := 7 ;
 951: LD_ADDR_OWVAR 34
 955: PUSH
 956: LD_INT 7
 958: ST_TO_ADDR
// hc_sex := sex_male ;
 959: LD_ADDR_OWVAR 27
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// hc_name := ... ;
 967: LD_ADDR_OWVAR 26
 971: PUSH
 972: LD_STRING ...
 974: ST_TO_ADDR
// hc_class := 1 ;
 975: LD_ADDR_OWVAR 28
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// Powell := CreateHuman ;
 983: LD_ADDR_EXP 18
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// hc_name := ... ;
 993: LD_ADDR_OWVAR 26
 997: PUSH
 998: LD_STRING ...
1000: ST_TO_ADDR
// hc_gallery := ru ;
1001: LD_ADDR_OWVAR 33
1005: PUSH
1006: LD_STRING ru
1008: ST_TO_ADDR
// hc_face_number := 4 ;
1009: LD_ADDR_OWVAR 34
1013: PUSH
1014: LD_INT 4
1016: ST_TO_ADDR
// hc_sex := sex_male ;
1017: LD_ADDR_OWVAR 27
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1025: LD_ADDR_EXP 19
1029: PUSH
1030: CALL_OW 44
1034: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1035: LD_ADDR_EXP 16
1039: PUSH
1040: LD_STRING Bobby
1042: PPUSH
1043: LD_INT 0
1045: PPUSH
1046: CALL 182 0 2
1050: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1051: LD_ADDR_EXP 17
1055: PUSH
1056: LD_STRING Cyrus
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL 182 0 2
1066: ST_TO_ADDR
// case Difficulty of 1 :
1067: LD_OWVAR 67
1071: PUSH
1072: LD_INT 1
1074: DOUBLE
1075: EQUAL
1076: IFTRUE 1080
1078: GO 1095
1080: POP
// SetLives ( Bobby , 500 ) ; 2 :
1081: LD_EXP 16
1085: PPUSH
1086: LD_INT 500
1088: PPUSH
1089: CALL_OW 234
1093: GO 1142
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1118
1103: POP
// SetLives ( Bobby , 450 ) ; 3 :
1104: LD_EXP 16
1108: PPUSH
1109: LD_INT 450
1111: PPUSH
1112: CALL_OW 234
1116: GO 1142
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1141
1126: POP
// SetLives ( Bobby , 400 ) ; end ;
1127: LD_EXP 16
1131: PPUSH
1132: LD_INT 400
1134: PPUSH
1135: CALL_OW 234
1139: GO 1142
1141: POP
// end ; end_of_file
1142: LD_VAR 0 1
1146: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1153: LD_ADDR_VAR 0 2
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_OWVAR 67
1176: ARRAY
1177: ST_TO_ADDR
// uc_side := 3 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// uc_nation := 3 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 3
1193: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1194: LD_ADDR_EXP 25
1198: PUSH
1199: LD_STRING Pokryshkin
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL 182 0 2
1209: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1210: LD_EXP 25
1214: PPUSH
1215: LD_INT 44
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 48
// hc_importance := 0 ;
1228: LD_ADDR_OWVAR 32
1232: PUSH
1233: LD_INT 0
1235: ST_TO_ADDR
// hc_gallery :=  ;
1236: LD_ADDR_OWVAR 33
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// hc_name :=  ;
1244: LD_ADDR_OWVAR 26
1248: PUSH
1249: LD_STRING 
1251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1252: LD_INT 1
1254: PPUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1267: LD_ADDR_OWVAR 33
1271: PUSH
1272: LD_STRING SecondCharsGal
1274: ST_TO_ADDR
// hc_face_number := 69 ;
1275: LD_ADDR_OWVAR 34
1279: PUSH
1280: LD_INT 69
1282: ST_TO_ADDR
// hc_sex := sex_male ;
1283: LD_ADDR_OWVAR 27
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1291: LD_ADDR_OWVAR 26
1295: PUSH
1296: LD_STRING Ilja Ivanov
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_EXP 20
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_VAR 0 4
1326: PPUSH
1327: CALL_OW 2
1331: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 70 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 70
1377: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Pavel Starczy
1385: ST_TO_ADDR
// un := CreateHuman ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: CALL_OW 44
1395: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1396: LD_ADDR_EXP 20
1400: PUSH
1401: LD_EXP 20
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL_OW 2
1418: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// InitHc ;
1434: CALL_OW 19
// for i = 1 to 7 do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1585
// begin PrepareHuman ( false , 1 , skill ) ;
1454: LD_INT 0
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 380
// un := CreateHuman ;
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// if i mod 2 = 0 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 2
1486: MOD
1487: PUSH
1488: LD_INT 0
1490: EQUAL
1491: IFFALSE 1539
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1493: LD_ADDR_EXP 20
1497: PUSH
1498: LD_EXP 20
1502: PPUSH
1503: LD_EXP 20
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_VAR 0 4
1516: PPUSH
1517: CALL_OW 2
1521: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// end else
1537: GO 1583
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1539: LD_ADDR_EXP 21
1543: PUSH
1544: LD_EXP 21
1548: PPUSH
1549: LD_EXP 21
1553: PUSH
1554: LD_INT 1
1556: PLUS
1557: PPUSH
1558: LD_VAR 0 4
1562: PPUSH
1563: CALL_OW 2
1567: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1568: LD_VAR 0 4
1572: PPUSH
1573: LD_INT 4
1575: PPUSH
1576: LD_INT 0
1578: PPUSH
1579: CALL_OW 49
// end ; end ;
1583: GO 1451
1585: POP
1586: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: LD_INT 22
1594: PUSH
1595: LD_INT 3
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 30
1604: PUSH
1605: LD_INT 31
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PPUSH
1616: CALL_OW 69
1620: PUSH
1621: FOR_IN
1622: IFFALSE 1640
// PrepareSolBun ( skill , i ) ;
1624: LD_VAR 0 2
1628: PPUSH
1629: LD_VAR 0 3
1633: PPUSH
1634: CALL 239 0 2
1638: GO 1621
1640: POP
1641: POP
// for i = 1 to 2 do
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: DOUBLE
1648: LD_INT 1
1650: DEC
1651: ST_TO_ADDR
1652: LD_INT 2
1654: PUSH
1655: FOR_TO
1656: IFFALSE 1787
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1658: LD_ADDR_VAR 0 4
1662: PUSH
1663: LD_INT 3
1665: PPUSH
1666: LD_INT 3
1668: PPUSH
1669: LD_INT 22
1671: PPUSH
1672: LD_INT 1
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 42
1680: PPUSH
1681: LD_INT 100
1683: PPUSH
1684: CALL 375 0 7
1688: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1689: LD_INT 0
1691: PPUSH
1692: LD_INT 3
1694: PPUSH
1695: LD_VAR 0 2
1699: PPUSH
1700: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1704: CALL_OW 44
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1718: LD_VAR 0 4
1722: PPUSH
1723: LD_INT 23
1725: PUSH
1726: LD_INT 131
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_VAR 0 3
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PUSH
1742: LD_INT 87
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_VAR 0 3
1753: ARRAY
1754: PPUSH
1755: LD_INT 0
1757: PPUSH
1758: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1762: LD_ADDR_EXP 22
1766: PUSH
1767: LD_EXP 22
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: LD_VAR 0 4
1779: PPUSH
1780: CALL_OW 2
1784: ST_TO_ADDR
// end ;
1785: GO 1655
1787: POP
1788: POP
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
1789: LD_ADDR_VAR 0 3
1793: PUSH
1794: DOUBLE
1795: LD_INT 1
1797: DEC
1798: ST_TO_ADDR
1799: LD_INT 2
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: LD_INT 3
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: LD_OWVAR 67
1817: ARRAY
1818: PUSH
1819: FOR_TO
1820: IFFALSE 1911
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1822: LD_INT 2
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_VAR 0 3
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 4
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1862: LD_ADDR_EXP 23
1866: PUSH
1867: LD_EXP 23
1871: PPUSH
1872: LD_INT 1
1874: PPUSH
1875: LD_VAR 0 4
1879: PPUSH
1880: CALL_OW 2
1884: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1885: LD_VAR 0 4
1889: PPUSH
1890: LD_INT 10
1892: PPUSH
1893: LD_INT 0
1895: PPUSH
1896: CALL_OW 49
// ComHold ( un ) ;
1900: LD_VAR 0 4
1904: PPUSH
1905: CALL_OW 140
// end ;
1909: GO 1819
1911: POP
1912: POP
// if Difficulty < 3 then
1913: LD_OWVAR 67
1917: PUSH
1918: LD_INT 3
1920: LESS
1921: IFFALSE 1925
// exit ;
1923: GO 1968
// PrepareHuman ( false , 1 , skill ) ;
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: LD_VAR 0 2
1935: PPUSH
1936: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1940: LD_ADDR_EXP 24
1944: PUSH
1945: CALL_OW 44
1949: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1950: LD_EXP 24
1954: PPUSH
1955: LD_INT 82
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 48
// end ;
1968: LD_VAR 0 1
1972: RET
// every 0 0$01 trigger active_road_patrol do
1973: LD_EXP 8
1977: IFFALSE 2043
1979: GO 1981
1981: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1982: LD_EXP 22
1986: PUSH
1987: LD_INT 1
1989: ARRAY
1990: PPUSH
1991: LD_STRING road
1993: PPUSH
1994: LD_INT 70
1996: PPUSH
1997: LD_INT 131
1999: PUSH
2000: LD_INT 87
2002: PUSH
2003: LD_INT 107
2005: PUSH
2006: LD_INT 75
2008: PUSH
2009: LD_INT 107
2011: PUSH
2012: LD_INT 66
2014: PUSH
2015: LD_INT 114
2017: PUSH
2018: LD_INT 61
2020: PUSH
2021: LD_INT 107
2023: PUSH
2024: LD_INT 34
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: PPUSH
2039: CALL 463 0 4
2043: END
// every 0 0$01 trigger active_road_patrol do
2044: LD_EXP 8
2048: IFFALSE 2106
2050: GO 2052
2052: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2053: LD_EXP 22
2057: PUSH
2058: LD_INT 2
2060: ARRAY
2061: PPUSH
2062: LD_STRING road
2064: PPUSH
2065: LD_INT 70
2067: PPUSH
2068: LD_INT 21
2070: PUSH
2071: LD_INT 12
2073: PUSH
2074: LD_INT 37
2076: PUSH
2077: LD_INT 30
2079: PUSH
2080: LD_INT 65
2082: PUSH
2083: LD_INT 62
2085: PUSH
2086: LD_INT 107
2088: PUSH
2089: LD_INT 76
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PPUSH
2102: CALL 463 0 4
2106: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2107: LD_EXP 24
2111: PPUSH
2112: CALL_OW 302
2116: IFFALSE 2178
2118: GO 2120
2120: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2121: LD_EXP 24
2125: PPUSH
2126: LD_STRING forest
2128: PPUSH
2129: LD_INT 35
2131: PPUSH
2132: LD_INT 52
2134: PUSH
2135: LD_INT 15
2137: PUSH
2138: LD_INT 81
2140: PUSH
2141: LD_INT 9
2143: PUSH
2144: LD_INT 120
2146: PUSH
2147: LD_INT 52
2149: PUSH
2150: LD_INT 135
2152: PUSH
2153: LD_INT 80
2155: PUSH
2156: LD_INT 122
2158: PUSH
2159: LD_INT 95
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL 463 0 4
2178: END
// every 0 0$01 trigger macmilan_use_radio do
2179: LD_EXP 6
2183: IFFALSE 2244
2185: GO 2187
2187: DISABLE
// begin active_road_patrol := false ;
2188: LD_ADDR_EXP 8
2192: PUSH
2193: LD_INT 0
2195: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2196: LD_EXP 22
2200: PPUSH
2201: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2205: LD_EXP 22
2209: PPUSH
2210: LD_INT 72
2212: PPUSH
2213: LD_INT 41
2215: PPUSH
2216: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2220: LD_EXP 21
2224: PPUSH
2225: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2229: LD_EXP 21
2233: PPUSH
2234: LD_INT 72
2236: PPUSH
2237: LD_INT 41
2239: PPUSH
2240: CALL_OW 174
// end ;
2244: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2245: LD_INT 9
2247: PPUSH
2248: LD_INT 22
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 70
2262: IFFALSE 2336
2264: GO 2266
2266: DISABLE
2267: LD_INT 0
2269: PPUSH
// begin enable ;
2270: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2271: LD_ADDR_VAR 0 1
2275: PUSH
2276: LD_INT 9
2278: PPUSH
2279: LD_INT 22
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PPUSH
2289: CALL_OW 70
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2298: LD_EXP 21
2302: PPUSH
2303: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2307: LD_EXP 21
2311: PPUSH
2312: LD_VAR 0 1
2316: PPUSH
2317: CALL_OW 250
2321: PPUSH
2322: LD_VAR 0 1
2326: PPUSH
2327: CALL_OW 251
2331: PPUSH
2332: CALL_OW 174
// end ;
2336: PPOPN 1
2338: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2339: LD_EXP 22
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 256
2352: PUSH
2353: LD_INT 999
2355: LESS
2356: PUSH
2357: LD_EXP 22
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: CALL_OW 256
2370: PUSH
2371: LD_INT 999
2373: LESS
2374: OR
2375: PUSH
2376: LD_INT 3
2378: PPUSH
2379: LD_EXP 15
2383: PPUSH
2384: CALL_OW 292
2388: AND
2389: IFFALSE 2416
2391: GO 2393
2393: DISABLE
// begin active_road_patrol := false ;
2394: LD_ADDR_EXP 8
2398: PUSH
2399: LD_INT 0
2401: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2402: LD_EXP 22
2406: PPUSH
2407: LD_EXP 15
2411: PPUSH
2412: CALL_OW 115
// end ;
2416: END
// every 0 0$01 trigger macmilan_in_trap do
2417: LD_EXP 9
2421: IFFALSE 2467
2423: GO 2425
2425: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2426: LD_EXP 21
2430: PPUSH
2431: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2435: LD_EXP 20
2439: PUSH
2440: LD_EXP 21
2444: ADD
2445: PUSH
2446: LD_EXP 25
2450: ADD
2451: PUSH
2452: LD_EXP 22
2456: ADD
2457: PPUSH
2458: LD_EXP 15
2462: PPUSH
2463: CALL_OW 115
// end ;
2467: END
// every 0 0$01 trigger meta_action do
2468: LD_EXP 10
2472: IFFALSE 2518
2474: GO 2476
2476: DISABLE
// begin active_road_patrol := false ;
2477: LD_ADDR_EXP 8
2481: PUSH
2482: LD_INT 0
2484: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2485: LD_EXP 20
2489: PUSH
2490: LD_EXP 21
2494: ADD
2495: PUSH
2496: LD_EXP 25
2500: ADD
2501: PUSH
2502: LD_EXP 22
2506: ADD
2507: PPUSH
2508: LD_INT 93
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 114
// end ;
2518: END
// every 0 0$20 trigger send_troops_to_forest do
2519: LD_EXP 14
2523: IFFALSE 2577
2525: GO 2527
2527: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2528: LD_EXP 24
2532: PPUSH
2533: CALL_OW 302
2537: NOT
2538: IFFALSE 2542
// exit ;
2540: GO 2577
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2542: LD_EXP 20
2546: PUSH
2547: LD_EXP 25
2551: ADD
2552: PPUSH
2553: LD_EXP 24
2557: PPUSH
2558: CALL_OW 252
2562: PPUSH
2563: LD_EXP 24
2567: PPUSH
2568: CALL_OW 253
2572: PPUSH
2573: CALL_OW 114
// end ; end_of_file
2577: END
// export function Action ; begin
2578: LD_INT 0
2580: PPUSH
// InGameOn ;
2581: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2585: LD_INT 79
2587: PPUSH
2588: LD_INT 76
2590: PPUSH
2591: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2595: LD_INT 10
2597: PPUSH
2598: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2602: LD_EXP 15
2606: PPUSH
2607: LD_INT 80
2609: PPUSH
2610: LD_INT 79
2612: PPUSH
2613: LD_INT 1
2615: PPUSH
2616: CALL_OW 48
// Wait ( 0 0$03 ) ;
2620: LD_INT 105
2622: PPUSH
2623: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2627: LD_EXP 15
2631: PPUSH
2632: LD_INT 80
2634: PPUSH
2635: LD_INT 76
2637: PPUSH
2638: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2642: LD_EXP 15
2646: PPUSH
2647: LD_STRING D1-JMM-1
2649: PPUSH
2650: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2654: LD_INT 10
2656: PPUSH
2657: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2661: LD_EXP 15
2665: PPUSH
2666: LD_INT 76
2668: PPUSH
2669: LD_INT 76
2671: PPUSH
2672: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2676: LD_EXP 15
2680: PPUSH
2681: LD_STRING D1-JMM-1a
2683: PPUSH
2684: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2688: LD_INT 10
2690: PPUSH
2691: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2695: LD_EXP 15
2699: PPUSH
2700: LD_INT 83
2702: PPUSH
2703: LD_INT 66
2705: PPUSH
2706: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2710: LD_EXP 15
2714: PPUSH
2715: LD_STRING D1-JMM-1b
2717: PPUSH
2718: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2722: LD_INT 18
2724: PPUSH
2725: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2729: LD_EXP 15
2733: PPUSH
2734: LD_STRING D1-JMM-1c
2736: PPUSH
2737: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2741: LD_INT 7
2743: PPUSH
2744: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2748: LD_EXP 18
2752: PPUSH
2753: LD_STRING D1-Pow-1
2755: PPUSH
2756: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2760: LD_EXP 15
2764: PPUSH
2765: LD_STRING D1-JMM-2
2767: PPUSH
2768: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2772: LD_EXP 18
2776: PPUSH
2777: LD_STRING D1-Pow-2
2779: PPUSH
2780: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2784: LD_EXP 15
2788: PPUSH
2789: LD_STRING D1-JMM-3
2791: PPUSH
2792: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2796: LD_EXP 18
2800: PPUSH
2801: LD_STRING D1-Pow-3
2803: PPUSH
2804: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2808: LD_EXP 15
2812: PPUSH
2813: LD_STRING D1-JMM-4
2815: PPUSH
2816: CALL_OW 88
// ComFree ( JMM ) ;
2820: LD_EXP 15
2824: PPUSH
2825: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2829: LD_INT 10
2831: PPUSH
2832: CALL_OW 67
// InGameOff ;
2836: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2840: LD_STRING M1
2842: PPUSH
2843: CALL_OW 337
// active_russian_dialog := true ;
2847: LD_ADDR_EXP 3
2851: PUSH
2852: LD_INT 1
2854: ST_TO_ADDR
// active_road_patrol := true ;
2855: LD_ADDR_EXP 8
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2863: LD_EXP 16
2867: PPUSH
2868: LD_INT 41
2870: PPUSH
2871: LD_INT 71
2873: PPUSH
2874: LD_INT 0
2876: PPUSH
2877: CALL_OW 48
// ComHold ( Bobby ) ;
2881: LD_EXP 16
2885: PPUSH
2886: CALL_OW 140
// PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
2890: LD_EXP 17
2894: PPUSH
2895: LD_INT 90
2897: PPUSH
2898: LD_INT 42
2900: PPUSH
2901: LD_INT 0
2903: PPUSH
2904: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
2908: LD_EXP 17
2912: PPUSH
2913: LD_INT 79
2915: PPUSH
2916: LD_INT 34
2918: PPUSH
2919: CALL_OW 111
// ComCrawl ( Cyrus ) ;
2923: LD_EXP 17
2927: PPUSH
2928: CALL_OW 137
// SaveForQuickRestart ;
2932: CALL_OW 22
// end ;
2936: LD_VAR 0 1
2940: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
2941: LD_EXP 3
2945: IFFALSE 3517
2947: GO 2949
2949: DISABLE
2950: LD_INT 0
2952: PPUSH
// begin wait_points := 0 ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 0
2960: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
2961: LD_INT 70
2963: PPUSH
2964: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
2968: LD_EXP 20
2972: PPUSH
2973: LD_INT 79
2975: PPUSH
2976: LD_INT 83
2978: PPUSH
2979: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
2983: LD_EXP 20
2987: PUSH
2988: LD_INT 2
2990: ARRAY
2991: PPUSH
2992: LD_STRING D1R-Rus1-1
2994: PPUSH
2995: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
2999: LD_EXP 20
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: LD_STRING D1R-Rus2-1
3010: PPUSH
3011: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
3015: LD_EXP 21
3019: PPUSH
3020: LD_INT 79
3022: PPUSH
3023: LD_INT 83
3025: PPUSH
3026: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3037: LD_EXP 20
3041: PUSH
3042: LD_INT 1
3044: ARRAY
3045: PPUSH
3046: LD_INT 79
3048: PPUSH
3049: LD_INT 82
3051: PPUSH
3052: CALL_OW 297
3056: PUSH
3057: LD_INT 5
3059: LESS
3060: IFFALSE 3030
// if not IsInArea ( JMM , jmm_spot ) then
3062: LD_EXP 15
3066: PPUSH
3067: LD_INT 5
3069: PPUSH
3070: CALL_OW 308
3074: NOT
3075: IFFALSE 3095
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3077: LD_EXP 20
3081: PUSH
3082: LD_INT 1
3084: ARRAY
3085: PPUSH
3086: LD_STRING D1Ra-Rus2-1
3088: PPUSH
3089: CALL_OW 88
3093: GO 3231
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3095: LD_EXP 20
3099: PUSH
3100: LD_INT 2
3102: ARRAY
3103: PPUSH
3104: LD_STRING D1Rb-Rus1-1
3106: PPUSH
3107: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3111: LD_EXP 20
3115: PUSH
3116: LD_INT 1
3118: ARRAY
3119: PPUSH
3120: LD_STRING D1Rb-Rus2-1
3122: PPUSH
3123: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3127: LD_EXP 20
3131: PUSH
3132: LD_EXP 21
3136: ADD
3137: PPUSH
3138: LD_EXP 15
3142: PPUSH
3143: CALL_OW 250
3147: PPUSH
3148: LD_EXP 15
3152: PPUSH
3153: CALL_OW 251
3157: PPUSH
3158: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3162: LD_INT 35
3164: PPUSH
3165: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3169: LD_EXP 15
3173: PPUSH
3174: LD_INT 5
3176: PPUSH
3177: CALL_OW 308
3181: NOT
3182: PUSH
3183: LD_INT 3
3185: PPUSH
3186: LD_EXP 15
3190: PPUSH
3191: CALL_OW 292
3195: NOT
3196: AND
3197: IFFALSE 3162
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3199: LD_EXP 20
3203: PUSH
3204: LD_INT 2
3206: ARRAY
3207: PPUSH
3208: LD_STRING D1Rc-Rus1-1
3210: PPUSH
3211: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3215: LD_EXP 20
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: LD_STRING D1Ra-Rus2-1a
3226: PPUSH
3227: CALL_OW 88
// end ; wait_points := 10 ;
3231: LD_ADDR_VAR 0 1
3235: PUSH
3236: LD_INT 10
3238: ST_TO_ADDR
// if Difficulty > 1 then
3239: LD_OWVAR 67
3243: PUSH
3244: LD_INT 1
3246: GREATER
3247: IFFALSE 3278
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3249: LD_EXP 20
3253: PPUSH
3254: LD_INT 78
3256: PPUSH
3257: LD_INT 95
3259: PPUSH
3260: CALL_OW 114
// wait_points := wait_points + 15 ;
3264: LD_ADDR_VAR 0 1
3268: PUSH
3269: LD_VAR 0 1
3273: PUSH
3274: LD_INT 15
3276: PLUS
3277: ST_TO_ADDR
// end ; repeat wait ( 0 0$01 ) ;
3278: LD_INT 35
3280: PPUSH
3281: CALL_OW 67
// wait_points := wait_points - 1 ;
3285: LD_ADDR_VAR 0 1
3289: PUSH
3290: LD_VAR 0 1
3294: PUSH
3295: LD_INT 1
3297: MINUS
3298: ST_TO_ADDR
// if See ( 3 , JMM ) then
3299: LD_INT 3
3301: PPUSH
3302: LD_EXP 15
3306: PPUSH
3307: CALL_OW 292
3311: IFFALSE 3365
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3313: LD_EXP 20
3317: PUSH
3318: LD_INT 2
3320: ARRAY
3321: PPUSH
3322: LD_STRING D1Rb-Rus1-1
3324: PPUSH
3325: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3329: LD_EXP 20
3333: PPUSH
3334: LD_EXP 15
3338: PPUSH
3339: CALL_OW 250
3343: PPUSH
3344: LD_EXP 15
3348: PPUSH
3349: CALL_OW 251
3353: PPUSH
3354: CALL_OW 114
// Wait ( 0 0$03 ) ;
3358: LD_INT 105
3360: PPUSH
3361: CALL_OW 67
// end ; until wait_points = 0 ;
3365: LD_VAR 0 1
3369: PUSH
3370: LD_INT 0
3372: EQUAL
3373: IFFALSE 3278
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3375: LD_EXP 20
3379: PPUSH
3380: LD_INT 45
3382: PPUSH
3383: LD_INT 5
3385: PPUSH
3386: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3390: LD_EXP 21
3394: PPUSH
3395: LD_INT 26
3397: PPUSH
3398: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3402: LD_INT 35
3404: PPUSH
3405: CALL_OW 67
// if See ( 3 , JMM ) then
3409: LD_INT 3
3411: PPUSH
3412: LD_EXP 15
3416: PPUSH
3417: CALL_OW 292
3421: IFFALSE 3477
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3423: LD_EXP 20
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: PPUSH
3432: LD_STRING D1Rb-Rus1-1
3434: PPUSH
3435: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3439: LD_EXP 20
3443: PPUSH
3444: LD_EXP 15
3448: PPUSH
3449: CALL_OW 250
3453: PPUSH
3454: LD_EXP 15
3458: PPUSH
3459: CALL_OW 251
3463: PPUSH
3464: CALL_OW 114
// Wait ( 0 0$50 ) ;
3468: LD_INT 1750
3470: PPUSH
3471: CALL_OW 67
// end else
3475: GO 3492
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3477: LD_EXP 20
3481: PPUSH
3482: LD_INT 45
3484: PPUSH
3485: LD_INT 5
3487: PPUSH
3488: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3492: LD_EXP 20
3496: PUSH
3497: LD_INT 1
3499: ARRAY
3500: PPUSH
3501: LD_INT 45
3503: PPUSH
3504: LD_INT 5
3506: PPUSH
3507: CALL_OW 297
3511: PUSH
3512: LD_INT 10
3514: LESS
3515: IFFALSE 3402
// end ;
3517: PPOPN 1
3519: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3520: LD_EXP 15
3524: PPUSH
3525: LD_EXP 16
3529: PPUSH
3530: CALL_OW 296
3534: PUSH
3535: LD_INT 9
3537: LESS
3538: IFFALSE 3989
3540: GO 3542
3542: DISABLE
// begin ComWalk ( Bobby ) ;
3543: LD_EXP 16
3547: PPUSH
3548: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3552: LD_EXP 16
3556: PPUSH
3557: LD_EXP 15
3561: PPUSH
3562: CALL_OW 250
3566: PPUSH
3567: LD_EXP 15
3571: PPUSH
3572: CALL_OW 251
3576: PPUSH
3577: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3581: LD_INT 35
3583: PPUSH
3584: CALL_OW 67
// until See ( 4 , JMM ) ;
3588: LD_INT 4
3590: PPUSH
3591: LD_EXP 15
3595: PPUSH
3596: CALL_OW 292
3600: IFFALSE 3581
// InGameOn ;
3602: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3606: LD_EXP 15
3610: PPUSH
3611: LD_EXP 16
3615: PPUSH
3616: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3620: LD_EXP 7
3624: PUSH
3625: LD_EXP 17
3629: PPUSH
3630: CALL_OW 302
3634: AND
3635: PUSH
3636: LD_EXP 15
3640: PPUSH
3641: LD_EXP 17
3645: PPUSH
3646: CALL_OW 296
3650: PUSH
3651: LD_INT 10
3653: LESS
3654: AND
3655: IFFALSE 3700
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
3657: LD_EXP 17
3661: PPUSH
3662: LD_EXP 15
3666: PPUSH
3667: CALL_OW 250
3671: PPUSH
3672: LD_EXP 15
3676: PPUSH
3677: CALL_OW 251
3681: PPUSH
3682: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
3686: LD_EXP 17
3690: PPUSH
3691: LD_EXP 16
3695: PPUSH
3696: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
3700: LD_EXP 15
3704: PPUSH
3705: LD_STRING D2-JMM-1
3707: PPUSH
3708: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3712: LD_INT 10
3714: PPUSH
3715: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
3719: LD_EXP 16
3723: PPUSH
3724: LD_EXP 15
3728: PPUSH
3729: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D2-Bobby-1
3740: PPUSH
3741: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3745: LD_EXP 15
3749: PPUSH
3750: LD_STRING D2-JMM-2
3752: PPUSH
3753: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_EXP 15
3766: PPUSH
3767: CALL_OW 250
3771: PPUSH
3772: LD_EXP 15
3776: PPUSH
3777: CALL_OW 251
3781: PPUSH
3782: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
3786: LD_EXP 16
3790: PPUSH
3791: LD_STRING D2-Bobby-2
3793: PPUSH
3794: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3798: LD_EXP 15
3802: PPUSH
3803: LD_STRING D2-JMM-3
3805: PPUSH
3806: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
3810: LD_EXP 16
3814: PPUSH
3815: LD_EXP 15
3819: PPUSH
3820: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
3824: LD_EXP 16
3828: PPUSH
3829: LD_STRING D2-Bobby-3
3831: PPUSH
3832: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3836: LD_EXP 15
3840: PPUSH
3841: LD_STRING D2-JMM-4
3843: PPUSH
3844: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
3848: LD_EXP 16
3852: PPUSH
3853: LD_STRING D2-Bobby-4
3855: PPUSH
3856: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
3860: LD_EXP 15
3864: PPUSH
3865: LD_STRING D2-JMM-5
3867: PPUSH
3868: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
3872: LD_EXP 16
3876: PPUSH
3877: LD_STRING D2-Bobby-5
3879: PPUSH
3880: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3884: LD_EXP 15
3888: PPUSH
3889: LD_STRING D2-JMM-6
3891: PPUSH
3892: CALL_OW 88
// if not powell_contact then
3896: LD_EXP 5
3900: NOT
3901: IFFALSE 3927
// begin Say ( Bobby , D2-Bobby-6 ) ;
3903: LD_EXP 16
3907: PPUSH
3908: LD_STRING D2-Bobby-6
3910: PPUSH
3911: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
3915: LD_EXP 15
3919: PPUSH
3920: LD_STRING D2-JMM-7
3922: PPUSH
3923: CALL_OW 88
// end ; InGameOff ;
3927: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
3931: LD_EXP 16
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
3943: LD_EXP 15
3947: PUSH
3948: LD_EXP 16
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PPUSH
3957: CALL_OW 139
// bobby_in_squad := true ;
3961: LD_ADDR_EXP 4
3965: PUSH
3966: LD_INT 1
3968: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
3969: LD_EXP 5
3973: PUSH
3974: LD_EXP 7
3978: NOT
3979: AND
3980: IFFALSE 3989
// ChangeMissionObjectives ( M2b ) ;
3982: LD_STRING M2b
3984: PPUSH
3985: CALL_OW 337
// end ;
3989: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad do
3990: LD_EXP 3
3994: PUSH
3995: LD_EXP 4
3999: NOT
4000: AND
4001: IFFALSE 4021
4003: GO 4005
4005: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_INT 75
4013: PPUSH
4014: LD_INT 83
4016: PPUSH
4017: CALL_OW 111
4021: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4022: LD_EXP 7
4026: PUSH
4027: LD_EXP 4
4031: NOT
4032: AND
4033: IFFALSE 4062
4035: GO 4037
4037: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4038: LD_EXP 16
4042: PPUSH
4043: LD_INT 105
4045: PPUSH
4046: LD_INT 97
4048: PPUSH
4049: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4053: LD_EXP 16
4057: PPUSH
4058: CALL_OW 197
// end ;
4062: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4063: LD_EXP 15
4067: PPUSH
4068: LD_INT 6
4070: PPUSH
4071: CALL_OW 308
4075: PUSH
4076: LD_EXP 15
4080: PPUSH
4081: LD_EXP 16
4085: PPUSH
4086: CALL_OW 296
4090: PUSH
4091: LD_INT 7
4093: LESS
4094: AND
4095: PUSH
4096: LD_EXP 4
4100: AND
4101: IFFALSE 4148
4103: GO 4105
4105: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4106: LD_EXP 15
4110: PUSH
4111: LD_EXP 16
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4124: LD_EXP 15
4128: PPUSH
4129: LD_STRING D2a-JMM-1
4131: PPUSH
4132: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4136: LD_EXP 16
4140: PPUSH
4141: LD_STRING D2a-Bobby-1
4143: PPUSH
4144: CALL_OW 88
// end ;
4148: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4149: LD_EXP 3
4153: PUSH
4154: LD_INT 3
4156: PPUSH
4157: LD_EXP 15
4161: PPUSH
4162: CALL_OW 292
4166: NOT
4167: AND
4168: IFFALSE 4344
4170: GO 4172
4172: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4173: LD_INT 350
4175: PPUSH
4176: LD_INT 700
4178: PPUSH
4179: CALL_OW 12
4183: PPUSH
4184: CALL_OW 67
// InGameOn ;
4188: CALL_OW 8
// DialogueOn ;
4192: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4196: LD_EXP 18
4200: PPUSH
4201: LD_STRING D3-Pow-1
4203: PPUSH
4204: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4208: LD_EXP 15
4212: PPUSH
4213: LD_STRING D3-JMM-1
4215: PPUSH
4216: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4220: LD_EXP 18
4224: PPUSH
4225: LD_STRING D3-Pow-2
4227: PPUSH
4228: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4232: LD_EXP 15
4236: PPUSH
4237: LD_STRING D3-JMM-2
4239: PPUSH
4240: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4244: LD_EXP 18
4248: PPUSH
4249: LD_STRING D3-Pow-3
4251: PPUSH
4252: CALL_OW 94
// DialogueOff ;
4256: CALL_OW 7
// InGameOff ;
4260: CALL_OW 9
// powell_contact := true ;
4264: LD_ADDR_EXP 5
4268: PUSH
4269: LD_INT 1
4271: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4272: LD_INT 10
4274: PPUSH
4275: LD_INT 1
4277: PPUSH
4278: CALL_OW 424
// uc_side := 4 ;
4282: LD_ADDR_OWVAR 20
4286: PUSH
4287: LD_INT 4
4289: ST_TO_ADDR
// uc_nation := 1 ;
4290: LD_ADDR_OWVAR 21
4294: PUSH
4295: LD_INT 1
4297: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4298: LD_ADDR_EXP 18
4302: PUSH
4303: LD_STRING Powell
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: CALL 182 0 2
4313: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4314: LD_STRING M2
4316: PPUSH
4317: CALL_OW 337
// if not bobby_in_squad then
4321: LD_EXP 4
4325: NOT
4326: IFFALSE 4337
// ChangeMissionObjectives ( M2a ) else
4328: LD_STRING M2a
4330: PPUSH
4331: CALL_OW 337
4335: GO 4344
// ChangeMissionObjectives ( M2b ) ;
4337: LD_STRING M2b
4339: PPUSH
4340: CALL_OW 337
// end ;
4344: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4345: LD_EXP 15
4349: PPUSH
4350: LD_INT 7
4352: PPUSH
4353: CALL_OW 308
4357: IFFALSE 4492
4359: GO 4361
4361: DISABLE
// begin DialogueOn ;
4362: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4366: LD_EXP 19
4370: PPUSH
4371: LD_STRING D4-Rus3-1
4373: PPUSH
4374: CALL_OW 94
// DialogueOff ;
4378: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4382: LD_STRING M3a
4384: PPUSH
4385: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4389: LD_INT 11
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 424
// Wait ( 0 0$02 ) ;
4399: LD_INT 70
4401: PPUSH
4402: CALL_OW 67
// DialogueOn ;
4406: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4410: LD_EXP 18
4414: PPUSH
4415: LD_STRING D4-Pow-1
4417: PPUSH
4418: CALL_OW 94
// DialogueOff ;
4422: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4426: LD_STRING M3b
4428: PPUSH
4429: CALL_OW 337
// case Query ( Q1 ) of 1 :
4433: LD_STRING Q1
4435: PPUSH
4436: CALL_OW 97
4440: PUSH
4441: LD_INT 1
4443: DOUBLE
4444: EQUAL
4445: IFTRUE 4449
4447: GO 4480
4449: POP
// begin macmilan_use_radio := true ;
4450: LD_ADDR_EXP 6
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// DialogueOn ;
4458: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4462: LD_EXP 15
4466: PPUSH
4467: LD_STRING D4a-JMM-1
4469: PPUSH
4470: CALL_OW 88
// DialogueOff ;
4474: CALL_OW 7
// end ; 2 :
4478: GO 4492
4480: LD_INT 2
4482: DOUBLE
4483: EQUAL
4484: IFTRUE 4488
4486: GO 4491
4488: POP
// ; end ;
4489: GO 4492
4491: POP
// end ;
4492: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4493: LD_EXP 15
4497: PPUSH
4498: LD_EXP 17
4502: PPUSH
4503: CALL_OW 296
4507: PUSH
4508: LD_INT 8
4510: LESS
4511: IFFALSE 4762
4513: GO 4515
4515: DISABLE
// begin InGameOn ;
4516: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4520: LD_EXP 15
4524: PPUSH
4525: LD_EXP 17
4529: PPUSH
4530: CALL_OW 250
4534: PPUSH
4535: LD_EXP 17
4539: PPUSH
4540: CALL_OW 251
4544: PPUSH
4545: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4549: LD_EXP 16
4553: PPUSH
4554: CALL_OW 302
4558: PUSH
4559: LD_EXP 4
4563: AND
4564: IFFALSE 4595
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4566: LD_EXP 16
4570: PPUSH
4571: LD_EXP 15
4575: PPUSH
4576: CALL_OW 250
4580: PPUSH
4581: LD_EXP 15
4585: PPUSH
4586: CALL_OW 251
4590: PPUSH
4591: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4595: LD_EXP 15
4599: PPUSH
4600: LD_STRING D5-JMM-1
4602: PPUSH
4603: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4607: LD_INT 10
4609: PPUSH
4610: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4614: LD_EXP 15
4618: PPUSH
4619: LD_EXP 17
4623: PPUSH
4624: CALL_OW 119
// ComWalk ( Cyrus ) ;
4628: LD_EXP 17
4632: PPUSH
4633: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4637: LD_EXP 17
4641: PPUSH
4642: LD_EXP 15
4646: PPUSH
4647: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
4651: LD_EXP 17
4655: PPUSH
4656: LD_STRING D5-Cyrus-1
4658: PPUSH
4659: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
4663: LD_EXP 16
4667: PPUSH
4668: CALL_OW 302
4672: PUSH
4673: LD_EXP 4
4677: AND
4678: IFFALSE 4718
// begin ComTurnUnit ( Bobby , Cyrus ) ;
4680: LD_EXP 16
4684: PPUSH
4685: LD_EXP 17
4689: PPUSH
4690: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
4694: LD_EXP 16
4698: PPUSH
4699: LD_STRING D5-Bobby-1
4701: PPUSH
4702: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
4706: LD_EXP 15
4710: PPUSH
4711: LD_STRING D5-JMM-2
4713: PPUSH
4714: CALL_OW 88
// end ; InGameOff ;
4718: CALL_OW 9
// cyrus_in_squad := true ;
4722: LD_ADDR_EXP 7
4726: PUSH
4727: LD_INT 1
4729: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
4730: LD_EXP 17
4734: PPUSH
4735: LD_INT 1
4737: PPUSH
4738: CALL_OW 235
// if powell_contact and not bobby_in_squad then
4742: LD_EXP 5
4746: PUSH
4747: LD_EXP 4
4751: NOT
4752: AND
4753: IFFALSE 4762
// ChangeMissionObjectives ( M2b ) ;
4755: LD_STRING M2b
4757: PPUSH
4758: CALL_OW 337
// end ;
4762: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
4763: LD_EXP 4
4767: PUSH
4768: LD_EXP 7
4772: AND
4773: IFFALSE 4785
4775: GO 4777
4777: DISABLE
// ChangeMissionObjectives ( M2c ) ;
4778: LD_STRING M2c
4780: PPUSH
4781: CALL_OW 337
4785: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
4786: LD_EXP 15
4790: PPUSH
4791: LD_INT 8
4793: PPUSH
4794: CALL_OW 308
4798: IFFALSE 4850
4800: GO 4802
4802: DISABLE
// begin macmilan_in_trap := true ;
4803: LD_ADDR_EXP 9
4807: PUSH
4808: LD_INT 1
4810: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4811: LD_INT 35
4813: PPUSH
4814: CALL_OW 67
// DialogueOn ;
4818: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
4822: LD_EXP 25
4826: PPUSH
4827: LD_STRING D5-Pok-1
4829: PPUSH
4830: CALL_OW 88
// DialogueOff ;
4834: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
4838: LD_EXP 15
4842: PPUSH
4843: LD_STRING D4b-JMM-1
4845: PPUSH
4846: CALL_OW 88
// end ;
4850: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or GetLives ( russian_meta_guards [ russian_meta_guards ] ) < 999 do var i , hp ;
4851: LD_EXP 15
4855: PPUSH
4856: LD_EXP 23
4860: PUSH
4861: LD_EXP 23
4865: ARRAY
4866: PPUSH
4867: CALL_OW 296
4871: PUSH
4872: LD_INT 12
4874: LESS
4875: PUSH
4876: LD_EXP 23
4880: PUSH
4881: LD_EXP 23
4885: ARRAY
4886: PPUSH
4887: CALL_OW 256
4891: PUSH
4892: LD_INT 999
4894: LESS
4895: OR
4896: IFFALSE 5111
4898: GO 4900
4900: DISABLE
4901: LD_INT 0
4903: PPUSH
4904: PPUSH
// begin hp := [ 200 , 150 , 100 ] [ Difficulty ] ;
4905: LD_ADDR_VAR 0 2
4909: PUSH
4910: LD_INT 200
4912: PUSH
4913: LD_INT 150
4915: PUSH
4916: LD_INT 100
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: PUSH
4924: LD_OWVAR 67
4928: ARRAY
4929: ST_TO_ADDR
// for i in russian_meta_guards do
4930: LD_ADDR_VAR 0 1
4934: PUSH
4935: LD_EXP 23
4939: PUSH
4940: FOR_IN
4941: IFFALSE 4981
// if IsOk ( i ) then
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4979
// SetLives ( i , GetLives ( i ) - hp ) ;
4954: LD_VAR 0 1
4958: PPUSH
4959: LD_VAR 0 1
4963: PPUSH
4964: CALL_OW 256
4968: PUSH
4969: LD_VAR 0 2
4973: MINUS
4974: PPUSH
4975: CALL_OW 234
4979: GO 4940
4981: POP
4982: POP
// DialogueOn ;
4983: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
4987: LD_EXP 23
4991: PUSH
4992: LD_EXP 23
4996: ARRAY
4997: PPUSH
4998: LD_STRING D6-FRus1-1
5000: PPUSH
5001: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5005: LD_EXP 15
5009: PPUSH
5010: LD_STRING D6-JMM-1
5012: PPUSH
5013: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5017: LD_EXP 17
5021: PPUSH
5022: CALL_OW 302
5026: PUSH
5027: LD_EXP 7
5031: AND
5032: IFFALSE 5046
// Say ( Cyrus , D6-Cyrus-1 ) ;
5034: LD_EXP 17
5038: PPUSH
5039: LD_STRING D6-Cyrus-1
5041: PPUSH
5042: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5046: LD_EXP 16
5050: PPUSH
5051: CALL_OW 302
5055: PUSH
5056: LD_EXP 4
5060: AND
5061: IFFALSE 5075
// Say ( Bobby , D6-Bobby-1 ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING D6-Bobby-1
5070: PPUSH
5071: CALL_OW 88
// DialogueOff ;
5075: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5079: LD_INT 140
5081: PUSH
5082: LD_INT 105
5084: PUSH
5085: LD_INT 70
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_OWVAR 67
5097: ARRAY
5098: PPUSH
5099: CALL_OW 67
// meta_action := true ;
5103: LD_ADDR_EXP 10
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// end ;
5111: PPOPN 2
5113: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5114: LD_EXP 15
5118: PPUSH
5119: LD_INT 93
5121: PPUSH
5122: LD_INT 1
5124: PPUSH
5125: CALL_OW 297
5129: PUSH
5130: LD_INT 5
5132: LESS
5133: PUSH
5134: LD_INT 22
5136: PUSH
5137: LD_INT 1
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: PUSH
5149: LD_INT 1
5151: GREATER
5152: AND
5153: IFFALSE 5170
5155: GO 5157
5157: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5158: LD_EXP 15
5162: PPUSH
5163: LD_STRING D6a-JMM-1
5165: PPUSH
5166: CALL_OW 88
5170: END
// every 0 0$01 trigger IsDying ( JMM ) do
5171: LD_EXP 15
5175: PPUSH
5176: CALL_OW 303
5180: IFFALSE 5192
5182: GO 5184
5184: DISABLE
// YouLost ( JMM ) ;
5185: LD_STRING JMM
5187: PPUSH
5188: CALL_OW 104
5192: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5193: LD_EXP 16
5197: PPUSH
5198: LD_INT 10
5200: PPUSH
5201: CALL_OW 308
5205: IFFALSE 5254
5207: GO 5209
5209: DISABLE
// begin bobby_saved := true ;
5210: LD_ADDR_EXP 12
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5218: LD_EXP 16
5222: PPUSH
5223: CALL_OW 256
5227: PPUSH
5228: LD_STRING 01_BobbyLifePoints_1
5230: PPUSH
5231: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5235: LD_EXP 16
5239: PPUSH
5240: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5244: LD_STRING Bobby
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: CALL_OW 101
// end ;
5254: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5255: LD_EXP 17
5259: PPUSH
5260: LD_INT 10
5262: PPUSH
5263: CALL_OW 308
5267: IFFALSE 5316
5269: GO 5271
5271: DISABLE
// begin cyrus_saved := true ;
5272: LD_ADDR_EXP 13
5276: PUSH
5277: LD_INT 1
5279: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5280: LD_EXP 17
5284: PPUSH
5285: CALL_OW 256
5289: PPUSH
5290: LD_STRING 01_CyrusLifePoints_1
5292: PPUSH
5293: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5297: LD_EXP 17
5301: PPUSH
5302: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5306: LD_STRING Cyrus
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 101
// end ;
5316: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5317: LD_EXP 15
5321: PPUSH
5322: LD_INT 10
5324: PPUSH
5325: CALL_OW 308
5329: IFFALSE 5838
5331: GO 5333
5333: DISABLE
5334: LD_INT 0
5336: PPUSH
5337: PPUSH
5338: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5339: LD_EXP 13
5343: NOT
5344: PUSH
5345: LD_EXP 7
5349: AND
5350: PUSH
5351: LD_EXP 17
5355: PPUSH
5356: CALL_OW 302
5360: AND
5361: PUSH
5362: LD_EXP 12
5366: NOT
5367: PUSH
5368: LD_EXP 4
5372: AND
5373: PUSH
5374: LD_EXP 16
5378: PPUSH
5379: CALL_OW 302
5383: AND
5384: OR
5385: IFFALSE 5426
// case Query ( Q2 ) of 1 :
5387: LD_STRING Q2
5389: PPUSH
5390: CALL_OW 97
5394: PUSH
5395: LD_INT 1
5397: DOUBLE
5398: EQUAL
5399: IFTRUE 5403
5401: GO 5414
5403: POP
// wait_for_them := true ; 2 :
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
5412: GO 5426
5414: LD_INT 2
5416: DOUBLE
5417: EQUAL
5418: IFTRUE 5422
5420: GO 5425
5422: POP
// ; end ;
5423: GO 5426
5425: POP
// if wait_for_them then
5426: LD_VAR 0 3
5430: IFFALSE 5543
// repeat wait ( 0 0$01 ) ;
5432: LD_INT 35
5434: PPUSH
5435: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5439: LD_EXP 13
5443: PUSH
5444: LD_EXP 12
5448: AND
5449: PUSH
5450: LD_EXP 13
5454: PUSH
5455: LD_EXP 4
5459: NOT
5460: PUSH
5461: LD_EXP 16
5465: PPUSH
5466: CALL_OW 303
5470: OR
5471: PUSH
5472: LD_EXP 16
5476: PPUSH
5477: CALL_OW 301
5481: OR
5482: AND
5483: OR
5484: PUSH
5485: LD_EXP 12
5489: PUSH
5490: LD_EXP 7
5494: NOT
5495: PUSH
5496: LD_EXP 17
5500: PPUSH
5501: CALL_OW 303
5505: OR
5506: PUSH
5507: LD_EXP 17
5511: PPUSH
5512: CALL_OW 301
5516: OR
5517: AND
5518: OR
5519: PUSH
5520: LD_EXP 16
5524: PPUSH
5525: CALL_OW 301
5529: PUSH
5530: LD_EXP 17
5534: PPUSH
5535: CALL_OW 301
5539: AND
5540: OR
5541: IFFALSE 5432
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5543: LD_EXP 15
5547: PPUSH
5548: CALL_OW 256
5552: PPUSH
5553: LD_STRING 01_JMMLifePoints_1
5555: PPUSH
5556: CALL_OW 39
// RemoveUnit ( JMM ) ;
5560: LD_EXP 15
5564: PPUSH
5565: CALL_OW 64
// to_reward := [ JMM ] ;
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: LD_EXP 15
5578: PUSH
5579: EMPTY
5580: LIST
5581: ST_TO_ADDR
// if bobby_saved then
5582: LD_EXP 12
5586: IFFALSE 5604
// to_reward := to_reward ^ Bobby ;
5588: LD_ADDR_VAR 0 2
5592: PUSH
5593: LD_VAR 0 2
5597: PUSH
5598: LD_EXP 16
5602: ADD
5603: ST_TO_ADDR
// if cyrus_saved then
5604: LD_EXP 13
5608: IFFALSE 5626
// to_reward := to_reward ^ Cyrus ;
5610: LD_ADDR_VAR 0 2
5614: PUSH
5615: LD_VAR 0 2
5619: PUSH
5620: LD_EXP 17
5624: ADD
5625: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
5626: LD_STRING JMM
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 101
// if not bobby_in_squad then
5636: LD_EXP 4
5640: NOT
5641: IFFALSE 5654
// AddMedal ( Bobby , - 1 ) ;
5643: LD_STRING Bobby
5645: PPUSH
5646: LD_INT 1
5648: NEG
5649: PPUSH
5650: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
5654: LD_EXP 12
5658: NOT
5659: PUSH
5660: LD_EXP 16
5664: PPUSH
5665: CALL_OW 303
5669: PUSH
5670: LD_EXP 16
5674: PPUSH
5675: CALL_OW 301
5679: OR
5680: AND
5681: IFFALSE 5694
// AddMedal ( Bobby , - 2 ) ;
5683: LD_STRING Bobby
5685: PPUSH
5686: LD_INT 2
5688: NEG
5689: PPUSH
5690: CALL_OW 101
// if not cyrus_in_squad then
5694: LD_EXP 7
5698: NOT
5699: IFFALSE 5712
// AddMedal ( Cyrus , - 1 ) ;
5701: LD_STRING Cyrus
5703: PPUSH
5704: LD_INT 1
5706: NEG
5707: PPUSH
5708: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
5712: LD_EXP 13
5716: NOT
5717: PUSH
5718: LD_EXP 17
5722: PPUSH
5723: CALL_OW 303
5727: PUSH
5728: LD_EXP 17
5732: PPUSH
5733: CALL_OW 301
5737: OR
5738: AND
5739: IFFALSE 5752
// AddMedal ( Cyrus , - 2 ) ;
5741: LD_STRING Cyrus
5743: PPUSH
5744: LD_INT 2
5746: NEG
5747: PPUSH
5748: CALL_OW 101
// GiveMedals ( MAIN ) ;
5752: LD_STRING MAIN
5754: PPUSH
5755: CALL_OW 102
// RewardPeople ( to_reward ) ;
5759: LD_VAR 0 2
5763: PPUSH
5764: CALL_OW 43
// if bobby_saved then
5768: LD_EXP 12
5772: IFFALSE 5792
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5774: LD_EXP 16
5778: PPUSH
5779: LD_EXP 2
5783: PUSH
5784: LD_STRING Bobby
5786: STR
5787: PPUSH
5788: CALL_OW 38
// if cyrus_saved then
5792: LD_EXP 13
5796: IFFALSE 5816
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5798: LD_EXP 17
5802: PPUSH
5803: LD_EXP 2
5807: PUSH
5808: LD_STRING Cyrus
5810: STR
5811: PPUSH
5812: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5816: LD_EXP 15
5820: PPUSH
5821: LD_EXP 2
5825: PUSH
5826: LD_STRING JMM
5828: STR
5829: PPUSH
5830: CALL_OW 38
// YouWin ;
5834: CALL_OW 103
// end ;
5838: PPOPN 3
5840: END
