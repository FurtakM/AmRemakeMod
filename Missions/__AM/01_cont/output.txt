// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 756 0 0
// InitRussian ;
  12: CALL 995 0 0
// DebugMode ;
  16: CALL 89 0 0
// Action ;
  20: CALL 1618 0 0
// end ;
  24: END
// export debug ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// active_russian_dialog := false ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// bobby_in_squad := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// cyrus_in_squad := false ;
  52: LD_ADDR_EXP 6
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// powell_contact := false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// macmilan_use_radio := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// active_road_patrol := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// end ;
  84: LD_VAR 0 1
  88: RET
// function DebugMode ; var i ; begin
  89: LD_INT 0
  91: PPUSH
  92: PPUSH
// if not debug then
  93: LD_EXP 1
  97: NOT
  98: IFFALSE 102
// exit ;
 100: GO 113
// TurnFogOff ( ) ;
 102: CALL_OW 537
// FogOff ( 1 ) ;
 106: LD_INT 1
 108: PPUSH
 109: CALL_OW 344
// end ; end_of_file
 113: LD_VAR 0 1
 117: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 118: LD_INT 0
 120: PPUSH
 121: PPUSH
// if exist_mode then
 122: LD_VAR 0 2
 126: IFFALSE 145
// unit := CreateCharacter ( ident ) else
 128: LD_ADDR_VAR 0 4
 132: PUSH
 133: LD_VAR 0 1
 137: PPUSH
 138: CALL_OW 34
 142: ST_TO_ADDR
 143: GO 160
// unit := NewCharacter ( ident ) ;
 145: LD_ADDR_VAR 0 4
 149: PUSH
 150: LD_VAR 0 1
 154: PPUSH
 155: CALL_OW 25
 159: ST_TO_ADDR
// result := unit ;
 160: LD_ADDR_VAR 0 3
 164: PUSH
 165: LD_VAR 0 4
 169: ST_TO_ADDR
// end ;
 170: LD_VAR 0 3
 174: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 175: LD_INT 0
 177: PPUSH
 178: PPUSH
 179: PPUSH
// uc_side := GetSide ( b ) ;
 180: LD_ADDR_OWVAR 20
 184: PUSH
 185: LD_VAR 0 2
 189: PPUSH
 190: CALL_OW 255
 194: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 195: LD_ADDR_OWVAR 21
 199: PUSH
 200: LD_VAR 0 2
 204: PPUSH
 205: CALL_OW 248
 209: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 210: LD_INT 0
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_VAR 0 1
 220: PPUSH
 221: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 225: LD_ADDR_VAR 0 5
 229: PUSH
 230: LD_VAR 0 2
 234: PPUSH
 235: CALL_OW 254
 239: PUSH
 240: LD_INT 3
 242: MINUS
 243: ST_TO_ADDR
// if dir < 0 then
 244: LD_VAR 0 5
 248: PUSH
 249: LD_INT 0
 251: LESS
 252: IFFALSE 268
// dir := 6 + dir ;
 254: LD_ADDR_VAR 0 5
 258: PUSH
 259: LD_INT 6
 261: PUSH
 262: LD_VAR 0 5
 266: PLUS
 267: ST_TO_ADDR
// un := CreateHuman ;
 268: LD_ADDR_VAR 0 4
 272: PUSH
 273: CALL_OW 44
 277: ST_TO_ADDR
// SetDir ( un , dir ) ;
 278: LD_VAR 0 4
 282: PPUSH
 283: LD_VAR 0 5
 287: PPUSH
 288: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 292: LD_VAR 0 4
 296: PPUSH
 297: LD_VAR 0 2
 301: PPUSH
 302: CALL_OW 52
// end ;
 306: LD_VAR 0 3
 310: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 311: LD_INT 0
 313: PPUSH
// uc_side := side ;
 314: LD_ADDR_OWVAR 20
 318: PUSH
 319: LD_VAR 0 1
 323: ST_TO_ADDR
// uc_nation := nation ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_VAR 0 2
 333: ST_TO_ADDR
// vc_chassis := chassis ;
 334: LD_ADDR_OWVAR 37
 338: PUSH
 339: LD_VAR 0 3
 343: ST_TO_ADDR
// vc_engine := engine ;
 344: LD_ADDR_OWVAR 39
 348: PUSH
 349: LD_VAR 0 4
 353: ST_TO_ADDR
// vc_control := control ;
 354: LD_ADDR_OWVAR 38
 358: PUSH
 359: LD_VAR 0 5
 363: ST_TO_ADDR
// vc_weapon := weapon ;
 364: LD_ADDR_OWVAR 40
 368: PUSH
 369: LD_VAR 0 6
 373: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 374: LD_ADDR_OWVAR 41
 378: PUSH
 379: LD_VAR 0 7
 383: ST_TO_ADDR
// result := CreateVehicle ;
 384: LD_ADDR_VAR 0 8
 388: PUSH
 389: CALL_OW 45
 393: ST_TO_ADDR
// end ;
 394: LD_VAR 0 8
 398: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 399: LD_INT 0
 401: PPUSH
 402: PPUSH
// while ( active_road_patrol ) do
 403: LD_EXP 7
 407: IFFALSE 673
// begin Wait ( 0 0$01 ) ;
 409: LD_INT 35
 411: PPUSH
 412: CALL_OW 67
// if not unit then
 416: LD_VAR 0 1
 420: NOT
 421: IFFALSE 425
// exit ;
 423: GO 673
// if mode = road then
 425: LD_VAR 0 2
 429: PUSH
 430: LD_STRING road
 432: EQUAL
 433: IFFALSE 489
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 435: LD_VAR 0 1
 439: PPUSH
 440: CALL_OW 261
 444: PUSH
 445: LD_INT 50
 447: LESS
 448: PUSH
 449: LD_INT 1
 451: PPUSH
 452: LD_VAR 0 1
 456: PPUSH
 457: CALL_OW 292
 461: NOT
 462: AND
 463: PUSH
 464: LD_VAR 0 1
 468: PPUSH
 469: CALL_OW 314
 473: NOT
 474: AND
 475: IFFALSE 489
// SetFuel ( unit , 100 ) ;
 477: LD_VAR 0 1
 481: PPUSH
 482: LD_INT 100
 484: PPUSH
 485: CALL_OW 240
// if not HasTask ( unit ) then
 489: LD_VAR 0 1
 493: PPUSH
 494: CALL_OW 314
 498: NOT
 499: IFFALSE 671
// begin for i = 1 to coords do
 501: LD_ADDR_VAR 0 6
 505: PUSH
 506: DOUBLE
 507: LD_INT 1
 509: DEC
 510: ST_TO_ADDR
 511: LD_VAR 0 4
 515: PUSH
 516: FOR_TO
 517: IFFALSE 584
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 519: LD_VAR 0 1
 523: PPUSH
 524: LD_VAR 0 4
 528: PUSH
 529: LD_VAR 0 6
 533: ARRAY
 534: PPUSH
 535: LD_VAR 0 4
 539: PUSH
 540: LD_VAR 0 6
 544: PUSH
 545: LD_INT 1
 547: PLUS
 548: ARRAY
 549: PPUSH
 550: CALL_OW 174
// AddComWait ( unit , pause ) ;
 554: LD_VAR 0 1
 558: PPUSH
 559: LD_VAR 0 3
 563: PPUSH
 564: CALL_OW 202
// i := i + 1 ;
 568: LD_ADDR_VAR 0 6
 572: PUSH
 573: LD_VAR 0 6
 577: PUSH
 578: LD_INT 1
 580: PLUS
 581: ST_TO_ADDR
// end ;
 582: GO 516
 584: POP
 585: POP
// for i = coords downto 1 do
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: DOUBLE
 592: LD_VAR 0 4
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 1
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 669
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 4
 613: PUSH
 614: LD_VAR 0 6
 618: PUSH
 619: LD_INT 1
 621: MINUS
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 4
 628: PUSH
 629: LD_VAR 0 6
 633: ARRAY
 634: PPUSH
 635: CALL_OW 174
// AddComWait ( unit , pause ) ;
 639: LD_VAR 0 1
 643: PPUSH
 644: LD_VAR 0 3
 648: PPUSH
 649: CALL_OW 202
// i := i - 1 ;
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: LD_VAR 0 6
 662: PUSH
 663: LD_INT 1
 665: MINUS
 666: ST_TO_ADDR
// end ;
 667: GO 601
 669: POP
 670: POP
// end ; end ;
 671: GO 403
// end ;
 673: LD_VAR 0 5
 677: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 678: LD_INT 0
 680: PPUSH
 681: PPUSH
// uc_nation := 1 ;
 682: LD_ADDR_OWVAR 21
 686: PUSH
 687: LD_INT 1
 689: ST_TO_ADDR
// uc_side := 0 ;
 690: LD_ADDR_OWVAR 20
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 698: LD_INT 0
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 380
// hc_name := speaker ;
 711: LD_ADDR_OWVAR 26
 715: PUSH
 716: LD_STRING speaker
 718: ST_TO_ADDR
// hc_gallery :=  ;
 719: LD_ADDR_OWVAR 33
 723: PUSH
 724: LD_STRING 
 726: ST_TO_ADDR
// speaker := CreateHuman ;
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: CALL_OW 44
 736: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 737: LD_VAR 0 3
 741: PPUSH
 742: LD_VAR 0 1
 746: PPUSH
 747: CALL_OW 88
// end ; end_of_file
 751: LD_VAR 0 2
 755: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 756: LD_INT 0
 758: PPUSH
// uc_nation := 1 ;
 759: LD_ADDR_OWVAR 21
 763: PUSH
 764: LD_INT 1
 766: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 767: LD_ADDR_EXP 8
 771: PUSH
 772: LD_STRING JMM
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL 118 0 2
 782: ST_TO_ADDR
// uc_side := 4 ;
 783: LD_ADDR_OWVAR 20
 787: PUSH
 788: LD_INT 4
 790: ST_TO_ADDR
// hc_gallery := us ;
 791: LD_ADDR_OWVAR 33
 795: PUSH
 796: LD_STRING us
 798: ST_TO_ADDR
// hc_face_number := 7 ;
 799: LD_ADDR_OWVAR 34
 803: PUSH
 804: LD_INT 7
 806: ST_TO_ADDR
// hc_sex := sex_male ;
 807: LD_ADDR_OWVAR 27
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// hc_name :=   ;
 815: LD_ADDR_OWVAR 26
 819: PUSH
 820: LD_STRING  
 822: ST_TO_ADDR
// hc_class := 1 ;
 823: LD_ADDR_OWVAR 28
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// Powell := CreateHuman ;
 831: LD_ADDR_EXP 11
 835: PUSH
 836: CALL_OW 44
 840: ST_TO_ADDR
// hc_name :=   ;
 841: LD_ADDR_OWVAR 26
 845: PUSH
 846: LD_STRING  
 848: ST_TO_ADDR
// hc_gallery := ru ;
 849: LD_ADDR_OWVAR 33
 853: PUSH
 854: LD_STRING ru
 856: ST_TO_ADDR
// hc_face_number := 4 ;
 857: LD_ADDR_OWVAR 34
 861: PUSH
 862: LD_INT 4
 864: ST_TO_ADDR
// hc_sex := sex_male ;
 865: LD_ADDR_OWVAR 27
 869: PUSH
 870: LD_INT 1
 872: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
 873: LD_ADDR_EXP 12
 877: PUSH
 878: CALL_OW 44
 882: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
 883: LD_ADDR_EXP 9
 887: PUSH
 888: LD_STRING Bobby
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL 118 0 2
 898: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
 899: LD_ADDR_EXP 10
 903: PUSH
 904: LD_STRING Cyrus
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL 118 0 2
 914: ST_TO_ADDR
// case Difficulty of 1 :
 915: LD_OWVAR 67
 919: PUSH
 920: LD_INT 1
 922: DOUBLE
 923: EQUAL
 924: IFTRUE 928
 926: GO 943
 928: POP
// SetLives ( Bobby , 500 ) ; 2 :
 929: LD_EXP 9
 933: PPUSH
 934: LD_INT 500
 936: PPUSH
 937: CALL_OW 234
 941: GO 990
 943: LD_INT 2
 945: DOUBLE
 946: EQUAL
 947: IFTRUE 951
 949: GO 966
 951: POP
// SetLives ( Bobby , 450 ) ; 3 :
 952: LD_EXP 9
 956: PPUSH
 957: LD_INT 450
 959: PPUSH
 960: CALL_OW 234
 964: GO 990
 966: LD_INT 3
 968: DOUBLE
 969: EQUAL
 970: IFTRUE 974
 972: GO 989
 974: POP
// SetLives ( Bobby , 400 ) ; end ;
 975: LD_EXP 9
 979: PPUSH
 980: LD_INT 400
 982: PPUSH
 983: CALL_OW 234
 987: GO 990
 989: POP
// end ; end_of_file
 990: LD_VAR 0 1
 994: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
 995: LD_INT 0
 997: PPUSH
 998: PPUSH
 999: PPUSH
1000: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 2
1011: PUSH
1012: LD_INT 3
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: ST_TO_ADDR
// uc_side := 3 ;
1026: LD_ADDR_OWVAR 20
1030: PUSH
1031: LD_INT 3
1033: ST_TO_ADDR
// uc_nation := 3 ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 3
1041: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1042: LD_ADDR_EXP 16
1046: PUSH
1047: LD_STRING Pokryshkin
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL 118 0 2
1057: ST_TO_ADDR
// hc_gallery :=  ;
1058: LD_ADDR_OWVAR 33
1062: PUSH
1063: LD_STRING 
1065: ST_TO_ADDR
// hc_name :=  ;
1066: LD_ADDR_OWVAR 26
1070: PUSH
1071: LD_STRING 
1073: ST_TO_ADDR
// for i = 1 to 8 do
1074: LD_ADDR_VAR 0 3
1078: PUSH
1079: DOUBLE
1080: LD_INT 1
1082: DEC
1083: ST_TO_ADDR
1084: LD_INT 8
1086: PUSH
1087: FOR_TO
1088: IFFALSE 1209
// begin PrepareHuman ( sex_male , 1 , skill ) ;
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 1
1095: PPUSH
1096: LD_VAR 0 2
1100: PPUSH
1101: CALL_OW 380
// un := CreateHuman ;
1105: LD_ADDR_VAR 0 4
1109: PUSH
1110: CALL_OW 44
1114: ST_TO_ADDR
// if i mod 2 = 0 then
1115: LD_VAR 0 3
1119: PUSH
1120: LD_INT 2
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1169
// begin russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1129: LD_ADDR_EXP 13
1133: PUSH
1134: LD_EXP 13
1138: PPUSH
1139: LD_INT 1
1141: PPUSH
1142: LD_VAR 0 4
1146: PPUSH
1147: CALL_OW 2
1151: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1152: LD_VAR 0 4
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: LD_INT 0
1162: PPUSH
1163: CALL_OW 49
// end else
1167: GO 1207
// begin russian_troops_2 := Insert ( russian_troops_2 , 1 , un ) ;
1169: LD_ADDR_EXP 14
1173: PUSH
1174: LD_EXP 14
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_VAR 0 4
1186: PPUSH
1187: CALL_OW 2
1191: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1192: LD_VAR 0 4
1196: PPUSH
1197: LD_INT 4
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; end ;
1207: GO 1087
1209: POP
1210: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_INT 22
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 30
1228: PUSH
1229: LD_INT 31
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PPUSH
1240: CALL_OW 69
1244: PUSH
1245: FOR_IN
1246: IFFALSE 1264
// PrepareSolBun ( skill , i ) ;
1248: LD_VAR 0 2
1252: PPUSH
1253: LD_VAR 0 3
1257: PPUSH
1258: CALL 175 0 2
1262: GO 1245
1264: POP
1265: POP
// for i = 1 to 2 do
1266: LD_ADDR_VAR 0 3
1270: PUSH
1271: DOUBLE
1272: LD_INT 1
1274: DEC
1275: ST_TO_ADDR
1276: LD_INT 2
1278: PUSH
1279: FOR_TO
1280: IFFALSE 1411
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 3
1289: PPUSH
1290: LD_INT 3
1292: PPUSH
1293: LD_INT 22
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: LD_INT 1
1301: PPUSH
1302: LD_INT 42
1304: PPUSH
1305: LD_INT 100
1307: PPUSH
1308: CALL 311 0 7
1312: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1313: LD_INT 0
1315: PPUSH
1316: LD_INT 3
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1328: CALL_OW 44
1332: PPUSH
1333: LD_VAR 0 4
1337: PPUSH
1338: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1342: LD_VAR 0 4
1346: PPUSH
1347: LD_INT 23
1349: PUSH
1350: LD_INT 131
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_VAR 0 3
1361: ARRAY
1362: PPUSH
1363: LD_INT 14
1365: PUSH
1366: LD_INT 87
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PUSH
1373: LD_VAR 0 3
1377: ARRAY
1378: PPUSH
1379: LD_INT 0
1381: PPUSH
1382: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1386: LD_ADDR_EXP 15
1390: PUSH
1391: LD_EXP 15
1395: PPUSH
1396: LD_INT 1
1398: PPUSH
1399: LD_VAR 0 4
1403: PPUSH
1404: CALL_OW 2
1408: ST_TO_ADDR
// end ;
1409: GO 1279
1411: POP
1412: POP
// end ;
1413: LD_VAR 0 1
1417: RET
// every 0 0$01 trigger active_road_patrol do
1418: LD_EXP 7
1422: IFFALSE 1488
1424: GO 1426
1426: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1427: LD_EXP 15
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PPUSH
1436: LD_STRING road
1438: PPUSH
1439: LD_INT 70
1441: PPUSH
1442: LD_INT 131
1444: PUSH
1445: LD_INT 87
1447: PUSH
1448: LD_INT 107
1450: PUSH
1451: LD_INT 75
1453: PUSH
1454: LD_INT 107
1456: PUSH
1457: LD_INT 66
1459: PUSH
1460: LD_INT 114
1462: PUSH
1463: LD_INT 61
1465: PUSH
1466: LD_INT 107
1468: PUSH
1469: LD_INT 34
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: PPUSH
1484: CALL 399 0 4
1488: END
// every 0 0$01 trigger active_road_patrol do
1489: LD_EXP 7
1493: IFFALSE 1551
1495: GO 1497
1497: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
1498: LD_EXP 15
1502: PUSH
1503: LD_INT 2
1505: ARRAY
1506: PPUSH
1507: LD_STRING road
1509: PPUSH
1510: LD_INT 70
1512: PPUSH
1513: LD_INT 21
1515: PUSH
1516: LD_INT 12
1518: PUSH
1519: LD_INT 37
1521: PUSH
1522: LD_INT 30
1524: PUSH
1525: LD_INT 65
1527: PUSH
1528: LD_INT 62
1530: PUSH
1531: LD_INT 107
1533: PUSH
1534: LD_INT 76
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL 399 0 4
1551: END
// every 0 0$01 trigger macmilan_use_radio do
1552: LD_EXP 5
1556: IFFALSE 1617
1558: GO 1560
1560: DISABLE
// begin active_road_patrol := false ;
1561: LD_ADDR_EXP 7
1565: PUSH
1566: LD_INT 0
1568: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
1569: LD_EXP 15
1573: PPUSH
1574: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
1578: LD_EXP 15
1582: PPUSH
1583: LD_INT 72
1585: PPUSH
1586: LD_INT 41
1588: PPUSH
1589: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
1593: LD_EXP 14
1597: PPUSH
1598: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
1602: LD_EXP 14
1606: PPUSH
1607: LD_INT 72
1609: PPUSH
1610: LD_INT 41
1612: PPUSH
1613: CALL_OW 174
// end ; end_of_file
1617: END
// export function Action ; begin
1618: LD_INT 0
1620: PPUSH
// InGameOn ;
1621: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
1625: LD_INT 79
1627: PPUSH
1628: LD_INT 76
1630: PPUSH
1631: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
1635: LD_INT 10
1637: PPUSH
1638: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
1642: LD_EXP 8
1646: PPUSH
1647: LD_INT 80
1649: PPUSH
1650: LD_INT 79
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 48
// Wait ( 0 0$03 ) ;
1660: LD_INT 105
1662: PPUSH
1663: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
1667: LD_EXP 8
1671: PPUSH
1672: LD_INT 80
1674: PPUSH
1675: LD_INT 76
1677: PPUSH
1678: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
1682: LD_EXP 8
1686: PPUSH
1687: LD_STRING D1-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
1694: LD_INT 10
1696: PPUSH
1697: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
1701: LD_EXP 8
1705: PPUSH
1706: LD_INT 76
1708: PPUSH
1709: LD_INT 76
1711: PPUSH
1712: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
1716: LD_EXP 8
1720: PPUSH
1721: LD_STRING D1-JMM-1a
1723: PPUSH
1724: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
1728: LD_INT 10
1730: PPUSH
1731: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
1735: LD_EXP 8
1739: PPUSH
1740: LD_INT 83
1742: PPUSH
1743: LD_INT 66
1745: PPUSH
1746: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING D1-JMM-1b
1757: PPUSH
1758: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
1762: LD_INT 18
1764: PPUSH
1765: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
1769: LD_EXP 8
1773: PPUSH
1774: LD_STRING D1-JMM-1c
1776: PPUSH
1777: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
1781: LD_INT 7
1783: PPUSH
1784: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
1788: LD_EXP 11
1792: PPUSH
1793: LD_STRING D1-Pow-1
1795: PPUSH
1796: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
1800: LD_EXP 8
1804: PPUSH
1805: LD_STRING D1-JMM-2
1807: PPUSH
1808: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1812: LD_EXP 11
1816: PPUSH
1817: LD_STRING D1-Pow-2
1819: PPUSH
1820: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
1824: LD_EXP 8
1828: PPUSH
1829: LD_STRING D1-JMM-3
1831: PPUSH
1832: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
1836: LD_EXP 11
1840: PPUSH
1841: LD_STRING D1-Pow-3
1843: PPUSH
1844: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1848: LD_EXP 8
1852: PPUSH
1853: LD_STRING D1-JMM-4
1855: PPUSH
1856: CALL_OW 88
// ComFree ( JMM ) ;
1860: LD_EXP 8
1864: PPUSH
1865: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
1869: LD_INT 10
1871: PPUSH
1872: CALL_OW 67
// InGameOff ;
1876: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1880: LD_STRING M1
1882: PPUSH
1883: CALL_OW 337
// active_russian_dialog := true ;
1887: LD_ADDR_EXP 2
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// active_road_patrol := true ;
1895: LD_ADDR_EXP 7
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
1903: LD_EXP 9
1907: PPUSH
1908: LD_INT 41
1910: PPUSH
1911: LD_INT 71
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL_OW 48
// ComHold ( Bobby ) ;
1921: LD_EXP 9
1925: PPUSH
1926: CALL_OW 140
// PlaceUnitXY ( Cyrus , 81 , 23 , false ) ;
1930: LD_EXP 10
1934: PPUSH
1935: LD_INT 81
1937: PPUSH
1938: LD_INT 23
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 32 ) ;
1948: LD_EXP 10
1952: PPUSH
1953: LD_INT 79
1955: PPUSH
1956: LD_INT 32
1958: PPUSH
1959: CALL_OW 111
// ComCrawl ( Cyrus ) ;
1963: LD_EXP 10
1967: PPUSH
1968: CALL_OW 137
// end ;
1972: LD_VAR 0 1
1976: RET
// every 0 0$01 trigger active_russian_dialog do
1977: LD_EXP 2
1981: IFFALSE 2290
1983: GO 1985
1985: DISABLE
// begin Wait ( 0 0$02 ) ;
1986: LD_INT 70
1988: PPUSH
1989: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
1993: LD_EXP 13
1997: PPUSH
1998: LD_INT 79
2000: PPUSH
2001: LD_INT 83
2003: PPUSH
2004: CALL_OW 114
// Say ( russian_troops_1 [ 1 ] , D1R-Rus1-1 ) ;
2008: LD_EXP 13
2012: PUSH
2013: LD_INT 1
2015: ARRAY
2016: PPUSH
2017: LD_STRING D1R-Rus1-1
2019: PPUSH
2020: CALL_OW 88
// Say ( russian_troops_1 [ 2 ] , D1R-Rus2-1 ) ;
2024: LD_EXP 13
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_STRING D1R-Rus2-1
2035: PPUSH
2036: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
2040: LD_EXP 14
2044: PPUSH
2045: LD_INT 79
2047: PPUSH
2048: LD_INT 83
2050: PPUSH
2051: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
2055: LD_INT 35
2057: PPUSH
2058: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
2062: LD_EXP 13
2066: PUSH
2067: LD_INT 1
2069: ARRAY
2070: PPUSH
2071: LD_INT 79
2073: PPUSH
2074: LD_INT 82
2076: PPUSH
2077: CALL_OW 297
2081: PUSH
2082: LD_INT 5
2084: LESS
2085: IFFALSE 2055
// if not IsInArea ( JMM , jmm_spot ) then
2087: LD_EXP 8
2091: PPUSH
2092: LD_INT 5
2094: PPUSH
2095: CALL_OW 308
2099: NOT
2100: IFFALSE 2120
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
2102: LD_EXP 13
2106: PUSH
2107: LD_INT 1
2109: ARRAY
2110: PPUSH
2111: LD_STRING D1Ra-Rus2-1
2113: PPUSH
2114: CALL_OW 88
2118: GO 2256
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
2120: LD_EXP 13
2124: PUSH
2125: LD_INT 2
2127: ARRAY
2128: PPUSH
2129: LD_STRING D1Rb-Rus1-1
2131: PPUSH
2132: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
2136: LD_EXP 13
2140: PUSH
2141: LD_INT 1
2143: ARRAY
2144: PPUSH
2145: LD_STRING D1Rb-Rus2-1
2147: PPUSH
2148: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
2152: LD_EXP 13
2156: PUSH
2157: LD_EXP 14
2161: ADD
2162: PPUSH
2163: LD_EXP 8
2167: PPUSH
2168: CALL_OW 250
2172: PPUSH
2173: LD_EXP 8
2177: PPUSH
2178: CALL_OW 251
2182: PPUSH
2183: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
2187: LD_INT 35
2189: PPUSH
2190: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
2194: LD_EXP 8
2198: PPUSH
2199: LD_INT 5
2201: PPUSH
2202: CALL_OW 308
2206: NOT
2207: PUSH
2208: LD_INT 3
2210: PPUSH
2211: LD_EXP 8
2215: PPUSH
2216: CALL_OW 292
2220: NOT
2221: AND
2222: IFFALSE 2187
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
2224: LD_EXP 13
2228: PUSH
2229: LD_INT 2
2231: ARRAY
2232: PPUSH
2233: LD_STRING D1Rc-Rus1-1
2235: PPUSH
2236: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
2240: LD_EXP 13
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PPUSH
2249: LD_STRING D1Ra-Rus2-1a
2251: PPUSH
2252: CALL_OW 88
// end ; Wait ( 0 0$10 ) ;
2256: LD_INT 350
2258: PPUSH
2259: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
2263: LD_EXP 13
2267: PPUSH
2268: LD_INT 45
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
2278: LD_EXP 14
2282: PPUSH
2283: LD_INT 26
2285: PPUSH
2286: CALL_OW 120
// end ;
2290: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
2291: LD_EXP 8
2295: PPUSH
2296: LD_EXP 9
2300: PPUSH
2301: CALL_OW 296
2305: PUSH
2306: LD_INT 9
2308: LESS
2309: IFFALSE 2760
2311: GO 2313
2313: DISABLE
// begin ComWalk ( Bobby ) ;
2314: LD_EXP 9
2318: PPUSH
2319: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
2323: LD_EXP 9
2327: PPUSH
2328: LD_EXP 8
2332: PPUSH
2333: CALL_OW 250
2337: PPUSH
2338: LD_EXP 8
2342: PPUSH
2343: CALL_OW 251
2347: PPUSH
2348: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
2352: LD_INT 35
2354: PPUSH
2355: CALL_OW 67
// until See ( 4 , JMM ) ;
2359: LD_INT 4
2361: PPUSH
2362: LD_EXP 8
2366: PPUSH
2367: CALL_OW 292
2371: IFFALSE 2352
// InGameOn ;
2373: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
2377: LD_EXP 8
2381: PPUSH
2382: LD_EXP 9
2386: PPUSH
2387: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
2391: LD_EXP 6
2395: PUSH
2396: LD_EXP 10
2400: PPUSH
2401: CALL_OW 302
2405: AND
2406: PUSH
2407: LD_EXP 8
2411: PPUSH
2412: LD_EXP 10
2416: PPUSH
2417: CALL_OW 296
2421: PUSH
2422: LD_INT 10
2424: LESS
2425: AND
2426: IFFALSE 2471
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
2428: LD_EXP 10
2432: PPUSH
2433: LD_EXP 8
2437: PPUSH
2438: CALL_OW 250
2442: PPUSH
2443: LD_EXP 8
2447: PPUSH
2448: CALL_OW 251
2452: PPUSH
2453: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
2457: LD_EXP 10
2461: PPUSH
2462: LD_EXP 9
2466: PPUSH
2467: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
2471: LD_EXP 8
2475: PPUSH
2476: LD_STRING D2-JMM-1
2478: PPUSH
2479: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2483: LD_INT 10
2485: PPUSH
2486: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
2490: LD_EXP 9
2494: PPUSH
2495: LD_EXP 8
2499: PPUSH
2500: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
2504: LD_EXP 9
2508: PPUSH
2509: LD_STRING D2-Bobby-1
2511: PPUSH
2512: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2516: LD_EXP 8
2520: PPUSH
2521: LD_STRING D2-JMM-2
2523: PPUSH
2524: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
2528: LD_EXP 9
2532: PPUSH
2533: LD_EXP 8
2537: PPUSH
2538: CALL_OW 250
2542: PPUSH
2543: LD_EXP 8
2547: PPUSH
2548: CALL_OW 251
2552: PPUSH
2553: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
2557: LD_EXP 9
2561: PPUSH
2562: LD_STRING D2-Bobby-2
2564: PPUSH
2565: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2569: LD_EXP 8
2573: PPUSH
2574: LD_STRING D2-JMM-3
2576: PPUSH
2577: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
2581: LD_EXP 9
2585: PPUSH
2586: LD_EXP 8
2590: PPUSH
2591: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
2595: LD_EXP 9
2599: PPUSH
2600: LD_STRING D2-Bobby-3
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
2607: LD_EXP 8
2611: PPUSH
2612: LD_STRING D2-JMM-4
2614: PPUSH
2615: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
2619: LD_EXP 9
2623: PPUSH
2624: LD_STRING D2-Bobby-4
2626: PPUSH
2627: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
2631: LD_EXP 8
2635: PPUSH
2636: LD_STRING D2-JMM-5
2638: PPUSH
2639: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
2643: LD_EXP 9
2647: PPUSH
2648: LD_STRING D2-Bobby-5
2650: PPUSH
2651: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
2655: LD_EXP 8
2659: PPUSH
2660: LD_STRING D2-JMM-6
2662: PPUSH
2663: CALL_OW 88
// if not cyrus_in_squad then
2667: LD_EXP 6
2671: NOT
2672: IFFALSE 2698
// begin Say ( Bobby , D2-Bobby-6 ) ;
2674: LD_EXP 9
2678: PPUSH
2679: LD_STRING D2-Bobby-6
2681: PPUSH
2682: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
2686: LD_EXP 8
2690: PPUSH
2691: LD_STRING D2-JMM-7
2693: PPUSH
2694: CALL_OW 88
// end ; InGameOff ;
2698: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
2702: LD_EXP 9
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
2714: LD_EXP 8
2718: PUSH
2719: LD_EXP 9
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 139
// bobby_in_squad := true ;
2732: LD_ADDR_EXP 3
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
2740: LD_EXP 4
2744: PUSH
2745: LD_EXP 6
2749: NOT
2750: AND
2751: IFFALSE 2760
// ChangeMissionObjectives ( M2b ) ;
2753: LD_STRING M2b
2755: PPUSH
2756: CALL_OW 337
// end ;
2760: END
// every 0 0$41 trigger active_russian_dialog and not bobby_in_squad do
2761: LD_EXP 2
2765: PUSH
2766: LD_EXP 3
2770: NOT
2771: AND
2772: IFFALSE 2792
2774: GO 2776
2776: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
2777: LD_EXP 9
2781: PPUSH
2782: LD_INT 75
2784: PPUSH
2785: LD_INT 83
2787: PPUSH
2788: CALL_OW 111
2792: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
2793: LD_EXP 6
2797: PUSH
2798: LD_EXP 3
2802: NOT
2803: AND
2804: IFFALSE 2833
2806: GO 2808
2808: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
2809: LD_EXP 9
2813: PPUSH
2814: LD_INT 105
2816: PPUSH
2817: LD_INT 97
2819: PPUSH
2820: CALL_OW 111
// AddComCrawl ( Bobby ) ;
2824: LD_EXP 9
2828: PPUSH
2829: CALL_OW 197
// end ;
2833: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
2834: LD_EXP 8
2838: PPUSH
2839: LD_INT 6
2841: PPUSH
2842: CALL_OW 308
2846: PUSH
2847: LD_EXP 8
2851: PPUSH
2852: LD_EXP 9
2856: PPUSH
2857: CALL_OW 296
2861: PUSH
2862: LD_INT 7
2864: LESS
2865: AND
2866: PUSH
2867: LD_EXP 3
2871: AND
2872: IFFALSE 2919
2874: GO 2876
2876: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
2877: LD_EXP 8
2881: PUSH
2882: LD_EXP 9
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PPUSH
2891: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
2895: LD_EXP 8
2899: PPUSH
2900: LD_STRING D2a-JMM-1
2902: PPUSH
2903: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
2907: LD_EXP 9
2911: PPUSH
2912: LD_STRING D2a-Bobby-1
2914: PPUSH
2915: CALL_OW 88
// end ;
2919: END
// every 0 0$40 trigger active_russian_dialog and not See ( 3 , JMM ) do
2920: LD_EXP 2
2924: PUSH
2925: LD_INT 3
2927: PPUSH
2928: LD_EXP 8
2932: PPUSH
2933: CALL_OW 292
2937: NOT
2938: AND
2939: IFFALSE 3090
2941: GO 2943
2943: DISABLE
// begin InGameOn ;
2944: CALL_OW 8
// DialogueOn ;
2948: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
2952: LD_EXP 11
2956: PPUSH
2957: LD_STRING D3-Pow-1
2959: PPUSH
2960: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
2964: LD_EXP 8
2968: PPUSH
2969: LD_STRING D3-JMM-1
2971: PPUSH
2972: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
2976: LD_EXP 11
2980: PPUSH
2981: LD_STRING D3-Pow-2
2983: PPUSH
2984: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
2988: LD_EXP 8
2992: PPUSH
2993: LD_STRING D3-JMM-2
2995: PPUSH
2996: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3000: LD_EXP 11
3004: PPUSH
3005: LD_STRING D3-Pow-3
3007: PPUSH
3008: CALL_OW 94
// DialogueOff ;
3012: CALL_OW 7
// InGameOff ;
3016: CALL_OW 9
// powell_contact := true ;
3020: LD_ADDR_EXP 4
3024: PUSH
3025: LD_INT 1
3027: ST_TO_ADDR
// uc_side := 4 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 4
3035: ST_TO_ADDR
// uc_nation := 1 ;
3036: LD_ADDR_OWVAR 21
3040: PUSH
3041: LD_INT 1
3043: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
3044: LD_ADDR_EXP 11
3048: PUSH
3049: LD_STRING Powell
3051: PPUSH
3052: LD_INT 0
3054: PPUSH
3055: CALL 118 0 2
3059: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
3060: LD_STRING M2
3062: PPUSH
3063: CALL_OW 337
// if not bobby_in_squad then
3067: LD_EXP 3
3071: NOT
3072: IFFALSE 3083
// ChangeMissionObjectives ( M2a ) else
3074: LD_STRING M2a
3076: PPUSH
3077: CALL_OW 337
3081: GO 3090
// ChangeMissionObjectives ( M2b ) ;
3083: LD_STRING M2b
3085: PPUSH
3086: CALL_OW 337
// end ;
3090: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
3091: LD_EXP 8
3095: PPUSH
3096: LD_INT 7
3098: PPUSH
3099: CALL_OW 308
3103: IFFALSE 3228
3105: GO 3107
3107: DISABLE
// begin DialogueOn ;
3108: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
3112: LD_EXP 12
3116: PPUSH
3117: LD_STRING D4-Rus3-1
3119: PPUSH
3120: CALL_OW 94
// DialogueOff ;
3124: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
3128: LD_STRING M3a
3130: PPUSH
3131: CALL_OW 337
// Wait ( 0 0$02 ) ;
3135: LD_INT 70
3137: PPUSH
3138: CALL_OW 67
// DialogueOn ;
3142: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
3146: LD_EXP 11
3150: PPUSH
3151: LD_STRING D4-Pow-1
3153: PPUSH
3154: CALL_OW 94
// DialogueOff ;
3158: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
3162: LD_STRING M3b
3164: PPUSH
3165: CALL_OW 337
// case Query ( Q1 ) of 1 :
3169: LD_STRING Q1
3171: PPUSH
3172: CALL_OW 97
3176: PUSH
3177: LD_INT 1
3179: DOUBLE
3180: EQUAL
3181: IFTRUE 3185
3183: GO 3216
3185: POP
// begin macmilan_use_radio := true ;
3186: LD_ADDR_EXP 5
3190: PUSH
3191: LD_INT 1
3193: ST_TO_ADDR
// DialogueOn ;
3194: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
3198: LD_EXP 8
3202: PPUSH
3203: LD_STRING D4a-JMM-1
3205: PPUSH
3206: CALL_OW 88
// DialogueOff ;
3210: CALL_OW 7
// end ; 2 :
3214: GO 3228
3216: LD_INT 2
3218: DOUBLE
3219: EQUAL
3220: IFTRUE 3224
3222: GO 3227
3224: POP
// ; end ;
3225: GO 3228
3227: POP
// end ;
3228: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
3229: LD_EXP 8
3233: PPUSH
3234: LD_EXP 10
3238: PPUSH
3239: CALL_OW 296
3243: PUSH
3244: LD_INT 8
3246: LESS
3247: IFFALSE 3498
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
3256: LD_EXP 8
3260: PPUSH
3261: LD_EXP 10
3265: PPUSH
3266: CALL_OW 250
3270: PPUSH
3271: LD_EXP 10
3275: PPUSH
3276: CALL_OW 251
3280: PPUSH
3281: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
3285: LD_EXP 9
3289: PPUSH
3290: CALL_OW 302
3294: PUSH
3295: LD_EXP 3
3299: AND
3300: IFFALSE 3331
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3302: LD_EXP 9
3306: PPUSH
3307: LD_EXP 8
3311: PPUSH
3312: CALL_OW 250
3316: PPUSH
3317: LD_EXP 8
3321: PPUSH
3322: CALL_OW 251
3326: PPUSH
3327: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
3331: LD_EXP 8
3335: PPUSH
3336: LD_STRING D5-JMM-1
3338: PPUSH
3339: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3343: LD_INT 10
3345: PPUSH
3346: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
3350: LD_EXP 8
3354: PPUSH
3355: LD_EXP 10
3359: PPUSH
3360: CALL_OW 119
// ComWalk ( Cyrus ) ;
3364: LD_EXP 10
3368: PPUSH
3369: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
3373: LD_EXP 10
3377: PPUSH
3378: LD_EXP 8
3382: PPUSH
3383: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
3387: LD_EXP 10
3391: PPUSH
3392: LD_STRING D5-Cyrus-1
3394: PPUSH
3395: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
3399: LD_EXP 9
3403: PPUSH
3404: CALL_OW 302
3408: PUSH
3409: LD_EXP 3
3413: AND
3414: IFFALSE 3454
// begin ComTurnUnit ( Bobby , Cyrus ) ;
3416: LD_EXP 9
3420: PPUSH
3421: LD_EXP 10
3425: PPUSH
3426: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
3430: LD_EXP 9
3434: PPUSH
3435: LD_STRING D5-Bobby-1
3437: PPUSH
3438: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
3442: LD_EXP 8
3446: PPUSH
3447: LD_STRING D5-JMM-2
3449: PPUSH
3450: CALL_OW 88
// end ; InGameOff ;
3454: CALL_OW 9
// cyrus_in_squad := true ;
3458: LD_ADDR_EXP 6
3462: PUSH
3463: LD_INT 1
3465: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
3466: LD_EXP 10
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: CALL_OW 235
// if powell_contact and not bobby_in_squad then
3478: LD_EXP 4
3482: PUSH
3483: LD_EXP 3
3487: NOT
3488: AND
3489: IFFALSE 3498
// ChangeMissionObjectives ( M2b ) ;
3491: LD_STRING M2b
3493: PPUSH
3494: CALL_OW 337
// end ;
3498: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
3499: LD_EXP 3
3503: PUSH
3504: LD_EXP 6
3508: AND
3509: IFFALSE 3521
3511: GO 3513
3513: DISABLE
// ChangeMissionObjectives ( M2c ) ;
3514: LD_STRING M2c
3516: PPUSH
3517: CALL_OW 337
3521: END
