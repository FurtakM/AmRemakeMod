// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 908 0 0
// InitRussian ;
  12: CALL 1147 0 0
// DebugMode ;
  16: CALL 145 0 0
// Action ;
  20: CALL 2564 0 0
// end ;
  24: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// mission_prefix := 01_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 01_
  35: ST_TO_ADDR
// debug := false ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// active_russian_dialog := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// bobby_in_squad := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// cyrus_in_squad := false ;
  60: LD_ADDR_EXP 7
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// powell_contact := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// macmilan_use_radio := false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// active_road_patrol := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// macmilan_in_trap := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// meta_action := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// end_mission := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bobby_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// cyrus_saved := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// send_troops_to_forest := false ;
 132: LD_ADDR_EXP 14
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// end ;
 140: LD_VAR 0 1
 144: RET
// function DebugMode ; var i ; begin
 145: LD_INT 0
 147: PPUSH
 148: PPUSH
// if not debug then
 149: LD_EXP 1
 153: NOT
 154: IFFALSE 158
// exit ;
 156: GO 177
// Difficulty := 3 ;
 158: LD_ADDR_OWVAR 67
 162: PUSH
 163: LD_INT 3
 165: ST_TO_ADDR
// TurnFogOff ( ) ;
 166: CALL_OW 537
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// end ; end_of_file
 177: LD_VAR 0 1
 181: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 182: LD_INT 0
 184: PPUSH
 185: PPUSH
// if exist_mode then
 186: LD_VAR 0 2
 190: IFFALSE 209
// unit := CreateCharacter ( ident ) else
 192: LD_ADDR_VAR 0 4
 196: PUSH
 197: LD_VAR 0 1
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_VAR 0 4
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 3
 238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 239: LD_INT 0
 241: PPUSH
 242: PPUSH
 243: PPUSH
// uc_side := GetSide ( b ) ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 2
 253: PPUSH
 254: CALL_OW 255
 258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 248
 273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 274: LD_INT 0
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 254
 303: PUSH
 304: LD_INT 3
 306: MINUS
 307: ST_TO_ADDR
// if dir < 0 then
 308: LD_VAR 0 5
 312: PUSH
 313: LD_INT 0
 315: LESS
 316: IFFALSE 332
// dir := 6 + dir ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_INT 6
 325: PUSH
 326: LD_VAR 0 5
 330: PLUS
 331: ST_TO_ADDR
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// SetDir ( un , dir ) ;
 342: LD_VAR 0 4
 346: PPUSH
 347: LD_VAR 0 5
 351: PPUSH
 352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 356: LD_VAR 0 4
 360: PPUSH
 361: LD_VAR 0 2
 365: PPUSH
 366: CALL_OW 52
// end ;
 370: LD_VAR 0 3
 374: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 375: LD_INT 0
 377: PPUSH
// uc_side := side ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_VAR 0 1
 387: ST_TO_ADDR
// uc_nation := nation ;
 388: LD_ADDR_OWVAR 21
 392: PUSH
 393: LD_VAR 0 2
 397: ST_TO_ADDR
// vc_chassis := chassis ;
 398: LD_ADDR_OWVAR 37
 402: PUSH
 403: LD_VAR 0 3
 407: ST_TO_ADDR
// vc_engine := engine ;
 408: LD_ADDR_OWVAR 39
 412: PUSH
 413: LD_VAR 0 4
 417: ST_TO_ADDR
// vc_control := control ;
 418: LD_ADDR_OWVAR 38
 422: PUSH
 423: LD_VAR 0 5
 427: ST_TO_ADDR
// vc_weapon := weapon ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_VAR 0 6
 437: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 438: LD_ADDR_OWVAR 41
 442: PUSH
 443: LD_VAR 0 7
 447: ST_TO_ADDR
// result := CreateVehicle ;
 448: LD_ADDR_VAR 0 8
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// end ;
 458: LD_VAR 0 8
 462: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 463: LD_INT 0
 465: PPUSH
 466: PPUSH
// while ( active_road_patrol ) do
 467: LD_EXP 8
 471: IFFALSE 825
// begin Wait ( 0 0$01 ) ;
 473: LD_INT 35
 475: PPUSH
 476: CALL_OW 67
// if not unit then
 480: LD_VAR 0 1
 484: NOT
 485: IFFALSE 489
// exit ;
 487: GO 825
// if mode = road then
 489: LD_VAR 0 2
 493: PUSH
 494: LD_STRING road
 496: EQUAL
 497: IFFALSE 553
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 261
 508: PUSH
 509: LD_INT 50
 511: LESS
 512: PUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 292
 525: NOT
 526: AND
 527: PUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: CALL_OW 314
 537: NOT
 538: AND
 539: IFFALSE 553
// SetFuel ( unit , 100 ) ;
 541: LD_VAR 0 1
 545: PPUSH
 546: LD_INT 100
 548: PPUSH
 549: CALL_OW 240
// if mode = forest then
 553: LD_VAR 0 2
 557: PUSH
 558: LD_STRING forest
 560: EQUAL
 561: IFFALSE 641
// if GetLives ( unit ) < 600 then
 563: LD_VAR 0 1
 567: PPUSH
 568: CALL_OW 256
 572: PUSH
 573: LD_INT 600
 575: LESS
 576: IFFALSE 641
// begin ComMoveXY ( unit , 42 , 3 ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_INT 42
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 250
 607: PPUSH
 608: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: CALL_OW 232
// send_troops_to_forest := true ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// break ;
 639: GO 825
// end ; if not HasTask ( unit ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 314
 650: NOT
 651: IFFALSE 823
// begin for i = 1 to coords do
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_VAR 0 4
 667: PUSH
 668: FOR_TO
 669: IFFALSE 736
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 671: LD_VAR 0 1
 675: PPUSH
 676: LD_VAR 0 4
 680: PUSH
 681: LD_VAR 0 6
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 6
 696: PUSH
 697: LD_INT 1
 699: PLUS
 700: ARRAY
 701: PPUSH
 702: CALL_OW 174
// AddComWait ( unit , pause ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 202
// i := i + 1 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_INT 1
 732: PLUS
 733: ST_TO_ADDR
// end ;
 734: GO 668
 736: POP
 737: POP
// for i = coords downto 1 do
 738: LD_ADDR_VAR 0 6
 742: PUSH
 743: DOUBLE
 744: LD_VAR 0 4
 748: INC
 749: ST_TO_ADDR
 750: LD_INT 1
 752: PUSH
 753: FOR_DOWNTO
 754: IFFALSE 821
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 4
 765: PUSH
 766: LD_VAR 0 6
 770: PUSH
 771: LD_INT 1
 773: MINUS
 774: ARRAY
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: ARRAY
 786: PPUSH
 787: CALL_OW 174
// AddComWait ( unit , pause ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 3
 800: PPUSH
 801: CALL_OW 202
// i := i - 1 ;
 805: LD_ADDR_VAR 0 6
 809: PUSH
 810: LD_VAR 0 6
 814: PUSH
 815: LD_INT 1
 817: MINUS
 818: ST_TO_ADDR
// end ;
 819: GO 753
 821: POP
 822: POP
// end ; end ;
 823: GO 467
// end ;
 825: LD_VAR 0 5
 829: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
// uc_nation := 1 ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// uc_side := 0 ;
 842: LD_ADDR_OWVAR 20
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 380
// hc_name := speaker ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING speaker
 870: ST_TO_ADDR
// hc_gallery :=  ;
 871: LD_ADDR_OWVAR 33
 875: PUSH
 876: LD_STRING 
 878: ST_TO_ADDR
// speaker := CreateHuman ;
 879: LD_ADDR_VAR 0 3
 883: PUSH
 884: CALL_OW 44
 888: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 88
// end ; end_of_file
 903: LD_VAR 0 2
 907: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 908: LD_INT 0
 910: PPUSH
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 919: LD_ADDR_EXP 15
 923: PUSH
 924: LD_STRING JMM
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL 182 0 2
 934: ST_TO_ADDR
// uc_side := 4 ;
 935: LD_ADDR_OWVAR 20
 939: PUSH
 940: LD_INT 4
 942: ST_TO_ADDR
// hc_gallery := us ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING us
 950: ST_TO_ADDR
// hc_face_number := 7 ;
 951: LD_ADDR_OWVAR 34
 955: PUSH
 956: LD_INT 7
 958: ST_TO_ADDR
// hc_sex := sex_male ;
 959: LD_ADDR_OWVAR 27
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// hc_name :=   ;
 967: LD_ADDR_OWVAR 26
 971: PUSH
 972: LD_STRING  
 974: ST_TO_ADDR
// hc_class := 1 ;
 975: LD_ADDR_OWVAR 28
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// Powell := CreateHuman ;
 983: LD_ADDR_EXP 18
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// hc_name :=   ;
 993: LD_ADDR_OWVAR 26
 997: PUSH
 998: LD_STRING  
1000: ST_TO_ADDR
// hc_gallery := ru ;
1001: LD_ADDR_OWVAR 33
1005: PUSH
1006: LD_STRING ru
1008: ST_TO_ADDR
// hc_face_number := 4 ;
1009: LD_ADDR_OWVAR 34
1013: PUSH
1014: LD_INT 4
1016: ST_TO_ADDR
// hc_sex := sex_male ;
1017: LD_ADDR_OWVAR 27
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1025: LD_ADDR_EXP 19
1029: PUSH
1030: CALL_OW 44
1034: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1035: LD_ADDR_EXP 16
1039: PUSH
1040: LD_STRING Bobby
1042: PPUSH
1043: LD_INT 0
1045: PPUSH
1046: CALL 182 0 2
1050: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1051: LD_ADDR_EXP 17
1055: PUSH
1056: LD_STRING Cyrus
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL 182 0 2
1066: ST_TO_ADDR
// case Difficulty of 1 :
1067: LD_OWVAR 67
1071: PUSH
1072: LD_INT 1
1074: DOUBLE
1075: EQUAL
1076: IFTRUE 1080
1078: GO 1095
1080: POP
// SetLives ( Bobby , 500 ) ; 2 :
1081: LD_EXP 16
1085: PPUSH
1086: LD_INT 500
1088: PPUSH
1089: CALL_OW 234
1093: GO 1142
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1118
1103: POP
// SetLives ( Bobby , 450 ) ; 3 :
1104: LD_EXP 16
1108: PPUSH
1109: LD_INT 450
1111: PPUSH
1112: CALL_OW 234
1116: GO 1142
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1141
1126: POP
// SetLives ( Bobby , 400 ) ; end ;
1127: LD_EXP 16
1131: PPUSH
1132: LD_INT 400
1134: PPUSH
1135: CALL_OW 234
1139: GO 1142
1141: POP
// end ; end_of_file
1142: LD_VAR 0 1
1146: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1153: LD_ADDR_VAR 0 2
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_OWVAR 67
1176: ARRAY
1177: ST_TO_ADDR
// uc_side := 3 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// uc_nation := 3 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 3
1193: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1194: LD_ADDR_EXP 25
1198: PUSH
1199: LD_STRING Pokryshkin
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL 182 0 2
1209: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1210: LD_EXP 25
1214: PPUSH
1215: LD_INT 44
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 48
// hc_importance := 0 ;
1228: LD_ADDR_OWVAR 32
1232: PUSH
1233: LD_INT 0
1235: ST_TO_ADDR
// hc_gallery :=  ;
1236: LD_ADDR_OWVAR 33
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// hc_name :=  ;
1244: LD_ADDR_OWVAR 26
1248: PUSH
1249: LD_STRING 
1251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1252: LD_INT 1
1254: PPUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1267: LD_ADDR_OWVAR 33
1271: PUSH
1272: LD_STRING SecondCharsGal
1274: ST_TO_ADDR
// hc_face_number := 69 ;
1275: LD_ADDR_OWVAR 34
1279: PUSH
1280: LD_INT 69
1282: ST_TO_ADDR
// hc_sex := sex_male ;
1283: LD_ADDR_OWVAR 27
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1291: LD_ADDR_OWVAR 26
1295: PUSH
1296: LD_STRING Ilja Ivanov
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_EXP 20
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_VAR 0 4
1326: PPUSH
1327: CALL_OW 2
1331: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 70 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 70
1377: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Pavel Starczy
1385: ST_TO_ADDR
// un := CreateHuman ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: CALL_OW 44
1395: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1396: LD_ADDR_EXP 20
1400: PUSH
1401: LD_EXP 20
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL_OW 2
1418: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// InitHc ;
1434: CALL_OW 19
// for i = 1 to 7 do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1585
// begin PrepareHuman ( false , 1 , skill ) ;
1454: LD_INT 0
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 380
// un := CreateHuman ;
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// if i mod 2 = 0 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 2
1486: MOD
1487: PUSH
1488: LD_INT 0
1490: EQUAL
1491: IFFALSE 1539
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1493: LD_ADDR_EXP 20
1497: PUSH
1498: LD_EXP 20
1502: PPUSH
1503: LD_EXP 20
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_VAR 0 4
1516: PPUSH
1517: CALL_OW 2
1521: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// end else
1537: GO 1583
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1539: LD_ADDR_EXP 21
1543: PUSH
1544: LD_EXP 21
1548: PPUSH
1549: LD_EXP 21
1553: PUSH
1554: LD_INT 1
1556: PLUS
1557: PPUSH
1558: LD_VAR 0 4
1562: PPUSH
1563: CALL_OW 2
1567: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1568: LD_VAR 0 4
1572: PPUSH
1573: LD_INT 4
1575: PPUSH
1576: LD_INT 0
1578: PPUSH
1579: CALL_OW 49
// end ; end ;
1583: GO 1451
1585: POP
1586: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: LD_INT 22
1594: PUSH
1595: LD_INT 3
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 30
1604: PUSH
1605: LD_INT 31
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PPUSH
1616: CALL_OW 69
1620: PUSH
1621: FOR_IN
1622: IFFALSE 1640
// PrepareSolBun ( skill , i ) ;
1624: LD_VAR 0 2
1628: PPUSH
1629: LD_VAR 0 3
1633: PPUSH
1634: CALL 239 0 2
1638: GO 1621
1640: POP
1641: POP
// for i = 1 to 2 do
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: DOUBLE
1648: LD_INT 1
1650: DEC
1651: ST_TO_ADDR
1652: LD_INT 2
1654: PUSH
1655: FOR_TO
1656: IFFALSE 1787
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1658: LD_ADDR_VAR 0 4
1662: PUSH
1663: LD_INT 3
1665: PPUSH
1666: LD_INT 3
1668: PPUSH
1669: LD_INT 22
1671: PPUSH
1672: LD_INT 1
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 42
1680: PPUSH
1681: LD_INT 100
1683: PPUSH
1684: CALL 375 0 7
1688: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1689: LD_INT 0
1691: PPUSH
1692: LD_INT 3
1694: PPUSH
1695: LD_VAR 0 2
1699: PPUSH
1700: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1704: CALL_OW 44
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1718: LD_VAR 0 4
1722: PPUSH
1723: LD_INT 23
1725: PUSH
1726: LD_INT 131
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_VAR 0 3
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PUSH
1742: LD_INT 87
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_VAR 0 3
1753: ARRAY
1754: PPUSH
1755: LD_INT 0
1757: PPUSH
1758: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1762: LD_ADDR_EXP 22
1766: PUSH
1767: LD_EXP 22
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: LD_VAR 0 4
1779: PPUSH
1780: CALL_OW 2
1784: ST_TO_ADDR
// end ;
1785: GO 1655
1787: POP
1788: POP
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
1789: LD_ADDR_VAR 0 3
1793: PUSH
1794: DOUBLE
1795: LD_INT 1
1797: DEC
1798: ST_TO_ADDR
1799: LD_INT 2
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: LD_INT 3
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: LD_OWVAR 67
1817: ARRAY
1818: PUSH
1819: FOR_TO
1820: IFFALSE 1911
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1822: LD_INT 2
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_VAR 0 3
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 4
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1862: LD_ADDR_EXP 23
1866: PUSH
1867: LD_EXP 23
1871: PPUSH
1872: LD_INT 1
1874: PPUSH
1875: LD_VAR 0 4
1879: PPUSH
1880: CALL_OW 2
1884: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1885: LD_VAR 0 4
1889: PPUSH
1890: LD_INT 10
1892: PPUSH
1893: LD_INT 0
1895: PPUSH
1896: CALL_OW 49
// ComHold ( un ) ;
1900: LD_VAR 0 4
1904: PPUSH
1905: CALL_OW 140
// end ;
1909: GO 1819
1911: POP
1912: POP
// if Difficulty < 3 then
1913: LD_OWVAR 67
1917: PUSH
1918: LD_INT 3
1920: LESS
1921: IFFALSE 1925
// exit ;
1923: GO 1968
// PrepareHuman ( false , 1 , skill ) ;
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: LD_VAR 0 2
1935: PPUSH
1936: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1940: LD_ADDR_EXP 24
1944: PUSH
1945: CALL_OW 44
1949: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1950: LD_EXP 24
1954: PPUSH
1955: LD_INT 82
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 48
// end ;
1968: LD_VAR 0 1
1972: RET
// every 0 0$01 trigger active_road_patrol do
1973: LD_EXP 8
1977: IFFALSE 2043
1979: GO 1981
1981: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1982: LD_EXP 22
1986: PUSH
1987: LD_INT 1
1989: ARRAY
1990: PPUSH
1991: LD_STRING road
1993: PPUSH
1994: LD_INT 70
1996: PPUSH
1997: LD_INT 131
1999: PUSH
2000: LD_INT 87
2002: PUSH
2003: LD_INT 107
2005: PUSH
2006: LD_INT 75
2008: PUSH
2009: LD_INT 107
2011: PUSH
2012: LD_INT 66
2014: PUSH
2015: LD_INT 114
2017: PUSH
2018: LD_INT 61
2020: PUSH
2021: LD_INT 107
2023: PUSH
2024: LD_INT 34
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: PPUSH
2039: CALL 463 0 4
2043: END
// every 0 0$01 trigger active_road_patrol do
2044: LD_EXP 8
2048: IFFALSE 2106
2050: GO 2052
2052: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2053: LD_EXP 22
2057: PUSH
2058: LD_INT 2
2060: ARRAY
2061: PPUSH
2062: LD_STRING road
2064: PPUSH
2065: LD_INT 70
2067: PPUSH
2068: LD_INT 21
2070: PUSH
2071: LD_INT 12
2073: PUSH
2074: LD_INT 37
2076: PUSH
2077: LD_INT 30
2079: PUSH
2080: LD_INT 65
2082: PUSH
2083: LD_INT 62
2085: PUSH
2086: LD_INT 107
2088: PUSH
2089: LD_INT 76
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PPUSH
2102: CALL 463 0 4
2106: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2107: LD_EXP 24
2111: PPUSH
2112: CALL_OW 302
2116: IFFALSE 2178
2118: GO 2120
2120: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2121: LD_EXP 24
2125: PPUSH
2126: LD_STRING forest
2128: PPUSH
2129: LD_INT 35
2131: PPUSH
2132: LD_INT 52
2134: PUSH
2135: LD_INT 15
2137: PUSH
2138: LD_INT 81
2140: PUSH
2141: LD_INT 9
2143: PUSH
2144: LD_INT 120
2146: PUSH
2147: LD_INT 52
2149: PUSH
2150: LD_INT 135
2152: PUSH
2153: LD_INT 80
2155: PUSH
2156: LD_INT 122
2158: PUSH
2159: LD_INT 95
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL 463 0 4
2178: END
// every 0 0$01 trigger macmilan_use_radio do
2179: LD_EXP 6
2183: IFFALSE 2244
2185: GO 2187
2187: DISABLE
// begin active_road_patrol := false ;
2188: LD_ADDR_EXP 8
2192: PUSH
2193: LD_INT 0
2195: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2196: LD_EXP 22
2200: PPUSH
2201: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2205: LD_EXP 22
2209: PPUSH
2210: LD_INT 72
2212: PPUSH
2213: LD_INT 41
2215: PPUSH
2216: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2220: LD_EXP 21
2224: PPUSH
2225: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2229: LD_EXP 21
2233: PPUSH
2234: LD_INT 72
2236: PPUSH
2237: LD_INT 41
2239: PPUSH
2240: CALL_OW 174
// end ;
2244: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2245: LD_INT 9
2247: PPUSH
2248: LD_INT 22
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 70
2262: IFFALSE 2336
2264: GO 2266
2266: DISABLE
2267: LD_INT 0
2269: PPUSH
// begin enable ;
2270: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2271: LD_ADDR_VAR 0 1
2275: PUSH
2276: LD_INT 9
2278: PPUSH
2279: LD_INT 22
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PPUSH
2289: CALL_OW 70
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2298: LD_EXP 21
2302: PPUSH
2303: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2307: LD_EXP 21
2311: PPUSH
2312: LD_VAR 0 1
2316: PPUSH
2317: CALL_OW 250
2321: PPUSH
2322: LD_VAR 0 1
2326: PPUSH
2327: CALL_OW 251
2331: PPUSH
2332: CALL_OW 174
// end ;
2336: PPOPN 1
2338: END
// every 0 0$01 trigger GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 do
2339: LD_EXP 22
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 256
2352: PUSH
2353: LD_INT 999
2355: LESS
2356: PUSH
2357: LD_EXP 22
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: CALL_OW 256
2370: PUSH
2371: LD_INT 999
2373: LESS
2374: OR
2375: IFFALSE 2402
2377: GO 2379
2379: DISABLE
// begin active_road_patrol := false ;
2380: LD_ADDR_EXP 8
2384: PUSH
2385: LD_INT 0
2387: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2388: LD_EXP 22
2392: PPUSH
2393: LD_EXP 15
2397: PPUSH
2398: CALL_OW 115
// end ;
2402: END
// every 0 0$01 trigger macmilan_in_trap do
2403: LD_EXP 9
2407: IFFALSE 2453
2409: GO 2411
2411: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2412: LD_EXP 21
2416: PPUSH
2417: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2421: LD_EXP 20
2425: PUSH
2426: LD_EXP 21
2430: ADD
2431: PUSH
2432: LD_EXP 25
2436: ADD
2437: PUSH
2438: LD_EXP 22
2442: ADD
2443: PPUSH
2444: LD_EXP 15
2448: PPUSH
2449: CALL_OW 115
// end ;
2453: END
// every 0 0$01 trigger meta_action do
2454: LD_EXP 10
2458: IFFALSE 2504
2460: GO 2462
2462: DISABLE
// begin active_road_patrol := false ;
2463: LD_ADDR_EXP 8
2467: PUSH
2468: LD_INT 0
2470: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2471: LD_EXP 20
2475: PUSH
2476: LD_EXP 21
2480: ADD
2481: PUSH
2482: LD_EXP 25
2486: ADD
2487: PUSH
2488: LD_EXP 22
2492: ADD
2493: PPUSH
2494: LD_INT 93
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 114
// end ;
2504: END
// every 0 0$20 trigger send_troops_to_forest do
2505: LD_EXP 14
2509: IFFALSE 2563
2511: GO 2513
2513: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2514: LD_EXP 24
2518: PPUSH
2519: CALL_OW 302
2523: NOT
2524: IFFALSE 2528
// exit ;
2526: GO 2563
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2528: LD_EXP 20
2532: PUSH
2533: LD_EXP 25
2537: ADD
2538: PPUSH
2539: LD_EXP 24
2543: PPUSH
2544: CALL_OW 252
2548: PPUSH
2549: LD_EXP 24
2553: PPUSH
2554: CALL_OW 253
2558: PPUSH
2559: CALL_OW 114
// end ; end_of_file
2563: END
// export function Action ; begin
2564: LD_INT 0
2566: PPUSH
// InGameOn ;
2567: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2571: LD_INT 79
2573: PPUSH
2574: LD_INT 76
2576: PPUSH
2577: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2581: LD_INT 10
2583: PPUSH
2584: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2588: LD_EXP 15
2592: PPUSH
2593: LD_INT 80
2595: PPUSH
2596: LD_INT 79
2598: PPUSH
2599: LD_INT 1
2601: PPUSH
2602: CALL_OW 48
// Wait ( 0 0$03 ) ;
2606: LD_INT 105
2608: PPUSH
2609: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2613: LD_EXP 15
2617: PPUSH
2618: LD_INT 80
2620: PPUSH
2621: LD_INT 76
2623: PPUSH
2624: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2628: LD_EXP 15
2632: PPUSH
2633: LD_STRING D1-JMM-1
2635: PPUSH
2636: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2640: LD_INT 10
2642: PPUSH
2643: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2647: LD_EXP 15
2651: PPUSH
2652: LD_INT 76
2654: PPUSH
2655: LD_INT 76
2657: PPUSH
2658: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2662: LD_EXP 15
2666: PPUSH
2667: LD_STRING D1-JMM-1a
2669: PPUSH
2670: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2674: LD_INT 10
2676: PPUSH
2677: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2681: LD_EXP 15
2685: PPUSH
2686: LD_INT 83
2688: PPUSH
2689: LD_INT 66
2691: PPUSH
2692: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2696: LD_EXP 15
2700: PPUSH
2701: LD_STRING D1-JMM-1b
2703: PPUSH
2704: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2708: LD_INT 18
2710: PPUSH
2711: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2715: LD_EXP 15
2719: PPUSH
2720: LD_STRING D1-JMM-1c
2722: PPUSH
2723: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2727: LD_INT 7
2729: PPUSH
2730: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2734: LD_EXP 18
2738: PPUSH
2739: LD_STRING D1-Pow-1
2741: PPUSH
2742: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2746: LD_EXP 15
2750: PPUSH
2751: LD_STRING D1-JMM-2
2753: PPUSH
2754: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2758: LD_EXP 18
2762: PPUSH
2763: LD_STRING D1-Pow-2
2765: PPUSH
2766: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2770: LD_EXP 15
2774: PPUSH
2775: LD_STRING D1-JMM-3
2777: PPUSH
2778: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2782: LD_EXP 18
2786: PPUSH
2787: LD_STRING D1-Pow-3
2789: PPUSH
2790: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2794: LD_EXP 15
2798: PPUSH
2799: LD_STRING D1-JMM-4
2801: PPUSH
2802: CALL_OW 88
// ComFree ( JMM ) ;
2806: LD_EXP 15
2810: PPUSH
2811: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// InGameOff ;
2822: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2826: LD_STRING M1
2828: PPUSH
2829: CALL_OW 337
// active_russian_dialog := true ;
2833: LD_ADDR_EXP 3
2837: PUSH
2838: LD_INT 1
2840: ST_TO_ADDR
// active_road_patrol := true ;
2841: LD_ADDR_EXP 8
2845: PUSH
2846: LD_INT 1
2848: ST_TO_ADDR
// PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2849: LD_EXP 16
2853: PPUSH
2854: LD_INT 41
2856: PPUSH
2857: LD_INT 71
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: CALL_OW 48
// ComHold ( Bobby ) ;
2867: LD_EXP 16
2871: PPUSH
2872: CALL_OW 140
// PlaceUnitXY ( Cyrus , 98 , 51 , false ) ;
2876: LD_EXP 17
2880: PPUSH
2881: LD_INT 98
2883: PPUSH
2884: LD_INT 51
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
2894: LD_EXP 17
2898: PPUSH
2899: LD_INT 79
2901: PPUSH
2902: LD_INT 34
2904: PPUSH
2905: CALL_OW 111
// ComCrawl ( Cyrus ) ;
2909: LD_EXP 17
2913: PPUSH
2914: CALL_OW 137
// SaveForQuickRestart ;
2918: CALL_OW 22
// end ;
2922: LD_VAR 0 1
2926: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
2927: LD_EXP 3
2931: IFFALSE 3503
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
// begin wait_points := 0 ;
2939: LD_ADDR_VAR 0 1
2943: PUSH
2944: LD_INT 0
2946: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
2947: LD_INT 70
2949: PPUSH
2950: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
2954: LD_EXP 20
2958: PPUSH
2959: LD_INT 79
2961: PPUSH
2962: LD_INT 83
2964: PPUSH
2965: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
2969: LD_EXP 20
2973: PUSH
2974: LD_INT 2
2976: ARRAY
2977: PPUSH
2978: LD_STRING D1R-Rus1-1
2980: PPUSH
2981: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
2985: LD_EXP 20
2989: PUSH
2990: LD_INT 1
2992: ARRAY
2993: PPUSH
2994: LD_STRING D1R-Rus2-1
2996: PPUSH
2997: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
3001: LD_EXP 21
3005: PPUSH
3006: LD_INT 79
3008: PPUSH
3009: LD_INT 83
3011: PPUSH
3012: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3016: LD_INT 35
3018: PPUSH
3019: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3023: LD_EXP 20
3027: PUSH
3028: LD_INT 1
3030: ARRAY
3031: PPUSH
3032: LD_INT 79
3034: PPUSH
3035: LD_INT 82
3037: PPUSH
3038: CALL_OW 297
3042: PUSH
3043: LD_INT 5
3045: LESS
3046: IFFALSE 3016
// if not IsInArea ( JMM , jmm_spot ) then
3048: LD_EXP 15
3052: PPUSH
3053: LD_INT 5
3055: PPUSH
3056: CALL_OW 308
3060: NOT
3061: IFFALSE 3081
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3063: LD_EXP 20
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: LD_STRING D1Ra-Rus2-1
3074: PPUSH
3075: CALL_OW 88
3079: GO 3217
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3081: LD_EXP 20
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_STRING D1Rb-Rus1-1
3092: PPUSH
3093: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3097: LD_EXP 20
3101: PUSH
3102: LD_INT 1
3104: ARRAY
3105: PPUSH
3106: LD_STRING D1Rb-Rus2-1
3108: PPUSH
3109: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3113: LD_EXP 20
3117: PUSH
3118: LD_EXP 21
3122: ADD
3123: PPUSH
3124: LD_EXP 15
3128: PPUSH
3129: CALL_OW 250
3133: PPUSH
3134: LD_EXP 15
3138: PPUSH
3139: CALL_OW 251
3143: PPUSH
3144: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3148: LD_INT 35
3150: PPUSH
3151: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_INT 5
3162: PPUSH
3163: CALL_OW 308
3167: NOT
3168: PUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_EXP 15
3176: PPUSH
3177: CALL_OW 292
3181: NOT
3182: AND
3183: IFFALSE 3148
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3185: LD_EXP 20
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: PPUSH
3194: LD_STRING D1Rc-Rus1-1
3196: PPUSH
3197: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3201: LD_EXP 20
3205: PUSH
3206: LD_INT 1
3208: ARRAY
3209: PPUSH
3210: LD_STRING D1Ra-Rus2-1a
3212: PPUSH
3213: CALL_OW 88
// end ; wait_points := 10 ;
3217: LD_ADDR_VAR 0 1
3221: PUSH
3222: LD_INT 10
3224: ST_TO_ADDR
// if Difficulty > 1 then
3225: LD_OWVAR 67
3229: PUSH
3230: LD_INT 1
3232: GREATER
3233: IFFALSE 3264
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3235: LD_EXP 20
3239: PPUSH
3240: LD_INT 78
3242: PPUSH
3243: LD_INT 95
3245: PPUSH
3246: CALL_OW 114
// wait_points := wait_points + 15 ;
3250: LD_ADDR_VAR 0 1
3254: PUSH
3255: LD_VAR 0 1
3259: PUSH
3260: LD_INT 15
3262: PLUS
3263: ST_TO_ADDR
// end ; repeat wait ( 0 0$01 ) ;
3264: LD_INT 35
3266: PPUSH
3267: CALL_OW 67
// wait_points := wait_points - 1 ;
3271: LD_ADDR_VAR 0 1
3275: PUSH
3276: LD_VAR 0 1
3280: PUSH
3281: LD_INT 1
3283: MINUS
3284: ST_TO_ADDR
// if See ( 3 , JMM ) then
3285: LD_INT 3
3287: PPUSH
3288: LD_EXP 15
3292: PPUSH
3293: CALL_OW 292
3297: IFFALSE 3351
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3299: LD_EXP 20
3303: PUSH
3304: LD_INT 2
3306: ARRAY
3307: PPUSH
3308: LD_STRING D1Rb-Rus1-1
3310: PPUSH
3311: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3315: LD_EXP 20
3319: PPUSH
3320: LD_EXP 15
3324: PPUSH
3325: CALL_OW 250
3329: PPUSH
3330: LD_EXP 15
3334: PPUSH
3335: CALL_OW 251
3339: PPUSH
3340: CALL_OW 114
// Wait ( 0 0$03 ) ;
3344: LD_INT 105
3346: PPUSH
3347: CALL_OW 67
// end ; until wait_points = 0 ;
3351: LD_VAR 0 1
3355: PUSH
3356: LD_INT 0
3358: EQUAL
3359: IFFALSE 3264
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3361: LD_EXP 20
3365: PPUSH
3366: LD_INT 45
3368: PPUSH
3369: LD_INT 5
3371: PPUSH
3372: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3376: LD_EXP 21
3380: PPUSH
3381: LD_INT 26
3383: PPUSH
3384: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3388: LD_INT 35
3390: PPUSH
3391: CALL_OW 67
// if See ( 3 , JMM ) then
3395: LD_INT 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 292
3407: IFFALSE 3463
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3409: LD_EXP 20
3413: PUSH
3414: LD_INT 2
3416: ARRAY
3417: PPUSH
3418: LD_STRING D1Rb-Rus1-1
3420: PPUSH
3421: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3425: LD_EXP 20
3429: PPUSH
3430: LD_EXP 15
3434: PPUSH
3435: CALL_OW 250
3439: PPUSH
3440: LD_EXP 15
3444: PPUSH
3445: CALL_OW 251
3449: PPUSH
3450: CALL_OW 114
// Wait ( 0 0$50 ) ;
3454: LD_INT 1750
3456: PPUSH
3457: CALL_OW 67
// end else
3461: GO 3478
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3463: LD_EXP 20
3467: PPUSH
3468: LD_INT 45
3470: PPUSH
3471: LD_INT 5
3473: PPUSH
3474: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3478: LD_EXP 20
3482: PUSH
3483: LD_INT 1
3485: ARRAY
3486: PPUSH
3487: LD_INT 45
3489: PPUSH
3490: LD_INT 5
3492: PPUSH
3493: CALL_OW 297
3497: PUSH
3498: LD_INT 10
3500: LESS
3501: IFFALSE 3388
// end ;
3503: PPOPN 1
3505: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3506: LD_EXP 15
3510: PPUSH
3511: LD_EXP 16
3515: PPUSH
3516: CALL_OW 296
3520: PUSH
3521: LD_INT 9
3523: LESS
3524: IFFALSE 3975
3526: GO 3528
3528: DISABLE
// begin ComWalk ( Bobby ) ;
3529: LD_EXP 16
3533: PPUSH
3534: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3538: LD_EXP 16
3542: PPUSH
3543: LD_EXP 15
3547: PPUSH
3548: CALL_OW 250
3552: PPUSH
3553: LD_EXP 15
3557: PPUSH
3558: CALL_OW 251
3562: PPUSH
3563: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3567: LD_INT 35
3569: PPUSH
3570: CALL_OW 67
// until See ( 4 , JMM ) ;
3574: LD_INT 4
3576: PPUSH
3577: LD_EXP 15
3581: PPUSH
3582: CALL_OW 292
3586: IFFALSE 3567
// InGameOn ;
3588: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3592: LD_EXP 15
3596: PPUSH
3597: LD_EXP 16
3601: PPUSH
3602: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3606: LD_EXP 7
3610: PUSH
3611: LD_EXP 17
3615: PPUSH
3616: CALL_OW 302
3620: AND
3621: PUSH
3622: LD_EXP 15
3626: PPUSH
3627: LD_EXP 17
3631: PPUSH
3632: CALL_OW 296
3636: PUSH
3637: LD_INT 10
3639: LESS
3640: AND
3641: IFFALSE 3686
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
3643: LD_EXP 17
3647: PPUSH
3648: LD_EXP 15
3652: PPUSH
3653: CALL_OW 250
3657: PPUSH
3658: LD_EXP 15
3662: PPUSH
3663: CALL_OW 251
3667: PPUSH
3668: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
3672: LD_EXP 17
3676: PPUSH
3677: LD_EXP 16
3681: PPUSH
3682: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D2-JMM-1
3693: PPUSH
3694: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3698: LD_INT 10
3700: PPUSH
3701: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
3705: LD_EXP 16
3709: PPUSH
3710: LD_EXP 15
3714: PPUSH
3715: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
3719: LD_EXP 16
3723: PPUSH
3724: LD_STRING D2-Bobby-1
3726: PPUSH
3727: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3731: LD_EXP 15
3735: PPUSH
3736: LD_STRING D2-JMM-2
3738: PPUSH
3739: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3743: LD_EXP 16
3747: PPUSH
3748: LD_EXP 15
3752: PPUSH
3753: CALL_OW 250
3757: PPUSH
3758: LD_EXP 15
3762: PPUSH
3763: CALL_OW 251
3767: PPUSH
3768: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
3772: LD_EXP 16
3776: PPUSH
3777: LD_STRING D2-Bobby-2
3779: PPUSH
3780: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D2-JMM-3
3791: PPUSH
3792: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
3796: LD_EXP 16
3800: PPUSH
3801: LD_EXP 15
3805: PPUSH
3806: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
3810: LD_EXP 16
3814: PPUSH
3815: LD_STRING D2-Bobby-3
3817: PPUSH
3818: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3822: LD_EXP 15
3826: PPUSH
3827: LD_STRING D2-JMM-4
3829: PPUSH
3830: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
3834: LD_EXP 16
3838: PPUSH
3839: LD_STRING D2-Bobby-4
3841: PPUSH
3842: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
3846: LD_EXP 15
3850: PPUSH
3851: LD_STRING D2-JMM-5
3853: PPUSH
3854: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
3858: LD_EXP 16
3862: PPUSH
3863: LD_STRING D2-Bobby-5
3865: PPUSH
3866: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3870: LD_EXP 15
3874: PPUSH
3875: LD_STRING D2-JMM-6
3877: PPUSH
3878: CALL_OW 88
// if not powell_contact then
3882: LD_EXP 5
3886: NOT
3887: IFFALSE 3913
// begin Say ( Bobby , D2-Bobby-6 ) ;
3889: LD_EXP 16
3893: PPUSH
3894: LD_STRING D2-Bobby-6
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
3901: LD_EXP 15
3905: PPUSH
3906: LD_STRING D2-JMM-7
3908: PPUSH
3909: CALL_OW 88
// end ; InGameOff ;
3913: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
3917: LD_EXP 16
3921: PPUSH
3922: LD_INT 1
3924: PPUSH
3925: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
3929: LD_EXP 15
3933: PUSH
3934: LD_EXP 16
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: CALL_OW 139
// bobby_in_squad := true ;
3947: LD_ADDR_EXP 4
3951: PUSH
3952: LD_INT 1
3954: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
3955: LD_EXP 5
3959: PUSH
3960: LD_EXP 7
3964: NOT
3965: AND
3966: IFFALSE 3975
// ChangeMissionObjectives ( M2b ) ;
3968: LD_STRING M2b
3970: PPUSH
3971: CALL_OW 337
// end ;
3975: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad do
3976: LD_EXP 3
3980: PUSH
3981: LD_EXP 4
3985: NOT
3986: AND
3987: IFFALSE 4007
3989: GO 3991
3991: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
3992: LD_EXP 16
3996: PPUSH
3997: LD_INT 75
3999: PPUSH
4000: LD_INT 83
4002: PPUSH
4003: CALL_OW 111
4007: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4008: LD_EXP 7
4012: PUSH
4013: LD_EXP 4
4017: NOT
4018: AND
4019: IFFALSE 4048
4021: GO 4023
4023: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4024: LD_EXP 16
4028: PPUSH
4029: LD_INT 105
4031: PPUSH
4032: LD_INT 97
4034: PPUSH
4035: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4039: LD_EXP 16
4043: PPUSH
4044: CALL_OW 197
// end ;
4048: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4049: LD_EXP 15
4053: PPUSH
4054: LD_INT 6
4056: PPUSH
4057: CALL_OW 308
4061: PUSH
4062: LD_EXP 15
4066: PPUSH
4067: LD_EXP 16
4071: PPUSH
4072: CALL_OW 296
4076: PUSH
4077: LD_INT 7
4079: LESS
4080: AND
4081: PUSH
4082: LD_EXP 4
4086: AND
4087: IFFALSE 4134
4089: GO 4091
4091: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4092: LD_EXP 15
4096: PUSH
4097: LD_EXP 16
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4110: LD_EXP 15
4114: PPUSH
4115: LD_STRING D2a-JMM-1
4117: PPUSH
4118: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4122: LD_EXP 16
4126: PPUSH
4127: LD_STRING D2a-Bobby-1
4129: PPUSH
4130: CALL_OW 88
// end ;
4134: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4135: LD_EXP 3
4139: PUSH
4140: LD_INT 3
4142: PPUSH
4143: LD_EXP 15
4147: PPUSH
4148: CALL_OW 292
4152: NOT
4153: AND
4154: IFFALSE 4330
4156: GO 4158
4158: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4159: LD_INT 350
4161: PPUSH
4162: LD_INT 700
4164: PPUSH
4165: CALL_OW 12
4169: PPUSH
4170: CALL_OW 67
// InGameOn ;
4174: CALL_OW 8
// DialogueOn ;
4178: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4182: LD_EXP 18
4186: PPUSH
4187: LD_STRING D3-Pow-1
4189: PPUSH
4190: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4194: LD_EXP 15
4198: PPUSH
4199: LD_STRING D3-JMM-1
4201: PPUSH
4202: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4206: LD_EXP 18
4210: PPUSH
4211: LD_STRING D3-Pow-2
4213: PPUSH
4214: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4218: LD_EXP 15
4222: PPUSH
4223: LD_STRING D3-JMM-2
4225: PPUSH
4226: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4230: LD_EXP 18
4234: PPUSH
4235: LD_STRING D3-Pow-3
4237: PPUSH
4238: CALL_OW 94
// DialogueOff ;
4242: CALL_OW 7
// InGameOff ;
4246: CALL_OW 9
// powell_contact := true ;
4250: LD_ADDR_EXP 5
4254: PUSH
4255: LD_INT 1
4257: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4258: LD_INT 10
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: CALL_OW 424
// uc_side := 4 ;
4268: LD_ADDR_OWVAR 20
4272: PUSH
4273: LD_INT 4
4275: ST_TO_ADDR
// uc_nation := 1 ;
4276: LD_ADDR_OWVAR 21
4280: PUSH
4281: LD_INT 1
4283: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4284: LD_ADDR_EXP 18
4288: PUSH
4289: LD_STRING Powell
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL 182 0 2
4299: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4300: LD_STRING M2
4302: PPUSH
4303: CALL_OW 337
// if not bobby_in_squad then
4307: LD_EXP 4
4311: NOT
4312: IFFALSE 4323
// ChangeMissionObjectives ( M2a ) else
4314: LD_STRING M2a
4316: PPUSH
4317: CALL_OW 337
4321: GO 4330
// ChangeMissionObjectives ( M2b ) ;
4323: LD_STRING M2b
4325: PPUSH
4326: CALL_OW 337
// end ;
4330: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4331: LD_EXP 15
4335: PPUSH
4336: LD_INT 7
4338: PPUSH
4339: CALL_OW 308
4343: IFFALSE 4478
4345: GO 4347
4347: DISABLE
// begin DialogueOn ;
4348: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4352: LD_EXP 19
4356: PPUSH
4357: LD_STRING D4-Rus3-1
4359: PPUSH
4360: CALL_OW 94
// DialogueOff ;
4364: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4368: LD_STRING M3a
4370: PPUSH
4371: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4375: LD_INT 11
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL_OW 424
// Wait ( 0 0$02 ) ;
4385: LD_INT 70
4387: PPUSH
4388: CALL_OW 67
// DialogueOn ;
4392: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4396: LD_EXP 18
4400: PPUSH
4401: LD_STRING D4-Pow-1
4403: PPUSH
4404: CALL_OW 94
// DialogueOff ;
4408: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4412: LD_STRING M3b
4414: PPUSH
4415: CALL_OW 337
// case Query ( Q1 ) of 1 :
4419: LD_STRING Q1
4421: PPUSH
4422: CALL_OW 97
4426: PUSH
4427: LD_INT 1
4429: DOUBLE
4430: EQUAL
4431: IFTRUE 4435
4433: GO 4466
4435: POP
// begin macmilan_use_radio := true ;
4436: LD_ADDR_EXP 6
4440: PUSH
4441: LD_INT 1
4443: ST_TO_ADDR
// DialogueOn ;
4444: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4448: LD_EXP 15
4452: PPUSH
4453: LD_STRING D4a-JMM-1
4455: PPUSH
4456: CALL_OW 88
// DialogueOff ;
4460: CALL_OW 7
// end ; 2 :
4464: GO 4478
4466: LD_INT 2
4468: DOUBLE
4469: EQUAL
4470: IFTRUE 4474
4472: GO 4477
4474: POP
// ; end ;
4475: GO 4478
4477: POP
// end ;
4478: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4479: LD_EXP 15
4483: PPUSH
4484: LD_EXP 17
4488: PPUSH
4489: CALL_OW 296
4493: PUSH
4494: LD_INT 8
4496: LESS
4497: IFFALSE 4748
4499: GO 4501
4501: DISABLE
// begin InGameOn ;
4502: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4506: LD_EXP 15
4510: PPUSH
4511: LD_EXP 17
4515: PPUSH
4516: CALL_OW 250
4520: PPUSH
4521: LD_EXP 17
4525: PPUSH
4526: CALL_OW 251
4530: PPUSH
4531: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4535: LD_EXP 16
4539: PPUSH
4540: CALL_OW 302
4544: PUSH
4545: LD_EXP 4
4549: AND
4550: IFFALSE 4581
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4552: LD_EXP 16
4556: PPUSH
4557: LD_EXP 15
4561: PPUSH
4562: CALL_OW 250
4566: PPUSH
4567: LD_EXP 15
4571: PPUSH
4572: CALL_OW 251
4576: PPUSH
4577: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4581: LD_EXP 15
4585: PPUSH
4586: LD_STRING D5-JMM-1
4588: PPUSH
4589: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4593: LD_INT 10
4595: PPUSH
4596: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4600: LD_EXP 15
4604: PPUSH
4605: LD_EXP 17
4609: PPUSH
4610: CALL_OW 119
// ComWalk ( Cyrus ) ;
4614: LD_EXP 17
4618: PPUSH
4619: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4623: LD_EXP 17
4627: PPUSH
4628: LD_EXP 15
4632: PPUSH
4633: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
4637: LD_EXP 17
4641: PPUSH
4642: LD_STRING D5-Cyrus-1
4644: PPUSH
4645: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
4649: LD_EXP 16
4653: PPUSH
4654: CALL_OW 302
4658: PUSH
4659: LD_EXP 4
4663: AND
4664: IFFALSE 4704
// begin ComTurnUnit ( Bobby , Cyrus ) ;
4666: LD_EXP 16
4670: PPUSH
4671: LD_EXP 17
4675: PPUSH
4676: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
4680: LD_EXP 16
4684: PPUSH
4685: LD_STRING D5-Bobby-1
4687: PPUSH
4688: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
4692: LD_EXP 15
4696: PPUSH
4697: LD_STRING D5-JMM-2
4699: PPUSH
4700: CALL_OW 88
// end ; InGameOff ;
4704: CALL_OW 9
// cyrus_in_squad := true ;
4708: LD_ADDR_EXP 7
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
4716: LD_EXP 17
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 235
// if powell_contact and not bobby_in_squad then
4728: LD_EXP 5
4732: PUSH
4733: LD_EXP 4
4737: NOT
4738: AND
4739: IFFALSE 4748
// ChangeMissionObjectives ( M2b ) ;
4741: LD_STRING M2b
4743: PPUSH
4744: CALL_OW 337
// end ;
4748: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
4749: LD_EXP 4
4753: PUSH
4754: LD_EXP 7
4758: AND
4759: IFFALSE 4771
4761: GO 4763
4763: DISABLE
// ChangeMissionObjectives ( M2c ) ;
4764: LD_STRING M2c
4766: PPUSH
4767: CALL_OW 337
4771: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
4772: LD_EXP 15
4776: PPUSH
4777: LD_INT 8
4779: PPUSH
4780: CALL_OW 308
4784: IFFALSE 4836
4786: GO 4788
4788: DISABLE
// begin macmilan_in_trap := true ;
4789: LD_ADDR_EXP 9
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4797: LD_INT 35
4799: PPUSH
4800: CALL_OW 67
// DialogueOn ;
4804: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
4808: LD_EXP 25
4812: PPUSH
4813: LD_STRING D5-Pok-1
4815: PPUSH
4816: CALL_OW 88
// DialogueOff ;
4820: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
4824: LD_EXP 15
4828: PPUSH
4829: LD_STRING D4b-JMM-1
4831: PPUSH
4832: CALL_OW 88
// end ;
4836: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or GetLives ( russian_meta_guards [ russian_meta_guards ] ) < 999 do var i , hp ;
4837: LD_EXP 15
4841: PPUSH
4842: LD_EXP 23
4846: PUSH
4847: LD_EXP 23
4851: ARRAY
4852: PPUSH
4853: CALL_OW 296
4857: PUSH
4858: LD_INT 12
4860: LESS
4861: PUSH
4862: LD_EXP 23
4866: PUSH
4867: LD_EXP 23
4871: ARRAY
4872: PPUSH
4873: CALL_OW 256
4877: PUSH
4878: LD_INT 999
4880: LESS
4881: OR
4882: IFFALSE 5097
4884: GO 4886
4886: DISABLE
4887: LD_INT 0
4889: PPUSH
4890: PPUSH
// begin hp := [ 200 , 150 , 100 ] [ Difficulty ] ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 200
4898: PUSH
4899: LD_INT 150
4901: PUSH
4902: LD_INT 100
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: LD_OWVAR 67
4914: ARRAY
4915: ST_TO_ADDR
// for i in russian_meta_guards do
4916: LD_ADDR_VAR 0 1
4920: PUSH
4921: LD_EXP 23
4925: PUSH
4926: FOR_IN
4927: IFFALSE 4967
// if IsOk ( i ) then
4929: LD_VAR 0 1
4933: PPUSH
4934: CALL_OW 302
4938: IFFALSE 4965
// SetLives ( i , GetLives ( i ) - hp ) ;
4940: LD_VAR 0 1
4944: PPUSH
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 256
4954: PUSH
4955: LD_VAR 0 2
4959: MINUS
4960: PPUSH
4961: CALL_OW 234
4965: GO 4926
4967: POP
4968: POP
// DialogueOn ;
4969: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
4973: LD_EXP 23
4977: PUSH
4978: LD_EXP 23
4982: ARRAY
4983: PPUSH
4984: LD_STRING D6-FRus1-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
4991: LD_EXP 15
4995: PPUSH
4996: LD_STRING D6-JMM-1
4998: PPUSH
4999: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5003: LD_EXP 17
5007: PPUSH
5008: CALL_OW 302
5012: PUSH
5013: LD_EXP 7
5017: AND
5018: IFFALSE 5032
// Say ( Cyrus , D6-Cyrus-1 ) ;
5020: LD_EXP 17
5024: PPUSH
5025: LD_STRING D6-Cyrus-1
5027: PPUSH
5028: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5032: LD_EXP 16
5036: PPUSH
5037: CALL_OW 302
5041: PUSH
5042: LD_EXP 4
5046: AND
5047: IFFALSE 5061
// Say ( Bobby , D6-Bobby-1 ) ;
5049: LD_EXP 16
5053: PPUSH
5054: LD_STRING D6-Bobby-1
5056: PPUSH
5057: CALL_OW 88
// DialogueOff ;
5061: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5065: LD_INT 140
5067: PUSH
5068: LD_INT 105
5070: PUSH
5071: LD_INT 70
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_OWVAR 67
5083: ARRAY
5084: PPUSH
5085: CALL_OW 67
// meta_action := true ;
5089: LD_ADDR_EXP 10
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// end ;
5097: PPOPN 2
5099: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5100: LD_EXP 15
5104: PPUSH
5105: LD_INT 93
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 297
5115: PUSH
5116: LD_INT 5
5118: LESS
5119: PUSH
5120: LD_INT 22
5122: PUSH
5123: LD_INT 1
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PPUSH
5130: CALL_OW 69
5134: PUSH
5135: LD_INT 1
5137: GREATER
5138: AND
5139: IFFALSE 5156
5141: GO 5143
5143: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5144: LD_EXP 15
5148: PPUSH
5149: LD_STRING D6a-JMM-1
5151: PPUSH
5152: CALL_OW 88
5156: END
// every 0 0$01 trigger IsDying ( JMM ) do
5157: LD_EXP 15
5161: PPUSH
5162: CALL_OW 303
5166: IFFALSE 5178
5168: GO 5170
5170: DISABLE
// YouLost ( JMM ) ;
5171: LD_STRING JMM
5173: PPUSH
5174: CALL_OW 104
5178: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5179: LD_EXP 16
5183: PPUSH
5184: LD_INT 10
5186: PPUSH
5187: CALL_OW 308
5191: IFFALSE 5240
5193: GO 5195
5195: DISABLE
// begin bobby_saved := true ;
5196: LD_ADDR_EXP 12
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5204: LD_EXP 16
5208: PPUSH
5209: CALL_OW 256
5213: PPUSH
5214: LD_STRING 01_BobbyLifePoints_1
5216: PPUSH
5217: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5221: LD_EXP 16
5225: PPUSH
5226: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5230: LD_STRING Bobby
5232: PPUSH
5233: LD_INT 1
5235: PPUSH
5236: CALL_OW 101
// end ;
5240: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5241: LD_EXP 17
5245: PPUSH
5246: LD_INT 10
5248: PPUSH
5249: CALL_OW 308
5253: IFFALSE 5302
5255: GO 5257
5257: DISABLE
// begin cyrus_saved := true ;
5258: LD_ADDR_EXP 13
5262: PUSH
5263: LD_INT 1
5265: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5266: LD_EXP 17
5270: PPUSH
5271: CALL_OW 256
5275: PPUSH
5276: LD_STRING 01_CyrusLifePoints_1
5278: PPUSH
5279: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5283: LD_EXP 17
5287: PPUSH
5288: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5292: LD_STRING Cyrus
5294: PPUSH
5295: LD_INT 1
5297: PPUSH
5298: CALL_OW 101
// end ;
5302: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5303: LD_EXP 15
5307: PPUSH
5308: LD_INT 10
5310: PPUSH
5311: CALL_OW 308
5315: IFFALSE 5824
5317: GO 5319
5319: DISABLE
5320: LD_INT 0
5322: PPUSH
5323: PPUSH
5324: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5325: LD_EXP 13
5329: NOT
5330: PUSH
5331: LD_EXP 7
5335: AND
5336: PUSH
5337: LD_EXP 17
5341: PPUSH
5342: CALL_OW 302
5346: AND
5347: PUSH
5348: LD_EXP 12
5352: NOT
5353: PUSH
5354: LD_EXP 4
5358: AND
5359: PUSH
5360: LD_EXP 16
5364: PPUSH
5365: CALL_OW 302
5369: AND
5370: OR
5371: IFFALSE 5412
// case Query ( Q2 ) of 1 :
5373: LD_STRING Q2
5375: PPUSH
5376: CALL_OW 97
5380: PUSH
5381: LD_INT 1
5383: DOUBLE
5384: EQUAL
5385: IFTRUE 5389
5387: GO 5400
5389: POP
// wait_for_them := true ; 2 :
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
5398: GO 5412
5400: LD_INT 2
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5411
5408: POP
// ; end ;
5409: GO 5412
5411: POP
// if wait_for_them then
5412: LD_VAR 0 3
5416: IFFALSE 5529
// repeat wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5425: LD_EXP 13
5429: PUSH
5430: LD_EXP 12
5434: AND
5435: PUSH
5436: LD_EXP 13
5440: PUSH
5441: LD_EXP 4
5445: NOT
5446: PUSH
5447: LD_EXP 16
5451: PPUSH
5452: CALL_OW 303
5456: OR
5457: PUSH
5458: LD_EXP 16
5462: PPUSH
5463: CALL_OW 301
5467: OR
5468: AND
5469: OR
5470: PUSH
5471: LD_EXP 12
5475: PUSH
5476: LD_EXP 7
5480: NOT
5481: PUSH
5482: LD_EXP 17
5486: PPUSH
5487: CALL_OW 303
5491: OR
5492: PUSH
5493: LD_EXP 17
5497: PPUSH
5498: CALL_OW 301
5502: OR
5503: AND
5504: OR
5505: PUSH
5506: LD_EXP 16
5510: PPUSH
5511: CALL_OW 301
5515: PUSH
5516: LD_EXP 17
5520: PPUSH
5521: CALL_OW 301
5525: AND
5526: OR
5527: IFFALSE 5418
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5529: LD_EXP 15
5533: PPUSH
5534: CALL_OW 256
5538: PPUSH
5539: LD_STRING 01_JMMLifePoints_1
5541: PPUSH
5542: CALL_OW 39
// RemoveUnit ( JMM ) ;
5546: LD_EXP 15
5550: PPUSH
5551: CALL_OW 64
// to_reward := [ JMM ] ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_EXP 15
5564: PUSH
5565: EMPTY
5566: LIST
5567: ST_TO_ADDR
// if bobby_saved then
5568: LD_EXP 12
5572: IFFALSE 5590
// to_reward := to_reward ^ Bobby ;
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_VAR 0 2
5583: PUSH
5584: LD_EXP 16
5588: ADD
5589: ST_TO_ADDR
// if cyrus_saved then
5590: LD_EXP 13
5594: IFFALSE 5612
// to_reward := to_reward ^ Cyrus ;
5596: LD_ADDR_VAR 0 2
5600: PUSH
5601: LD_VAR 0 2
5605: PUSH
5606: LD_EXP 17
5610: ADD
5611: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
5612: LD_STRING JMM
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: CALL_OW 101
// if not bobby_in_squad then
5622: LD_EXP 4
5626: NOT
5627: IFFALSE 5640
// AddMedal ( Bobby , - 1 ) ;
5629: LD_STRING Bobby
5631: PPUSH
5632: LD_INT 1
5634: NEG
5635: PPUSH
5636: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
5640: LD_EXP 12
5644: NOT
5645: PUSH
5646: LD_EXP 16
5650: PPUSH
5651: CALL_OW 303
5655: PUSH
5656: LD_EXP 16
5660: PPUSH
5661: CALL_OW 301
5665: OR
5666: AND
5667: IFFALSE 5680
// AddMedal ( Bobby , - 2 ) ;
5669: LD_STRING Bobby
5671: PPUSH
5672: LD_INT 2
5674: NEG
5675: PPUSH
5676: CALL_OW 101
// if not cyrus_in_squad then
5680: LD_EXP 7
5684: NOT
5685: IFFALSE 5698
// AddMedal ( Cyrus , - 1 ) ;
5687: LD_STRING Cyrus
5689: PPUSH
5690: LD_INT 1
5692: NEG
5693: PPUSH
5694: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
5698: LD_EXP 13
5702: NOT
5703: PUSH
5704: LD_EXP 17
5708: PPUSH
5709: CALL_OW 303
5713: PUSH
5714: LD_EXP 17
5718: PPUSH
5719: CALL_OW 301
5723: OR
5724: AND
5725: IFFALSE 5738
// AddMedal ( Cyrus , - 2 ) ;
5727: LD_STRING Cyrus
5729: PPUSH
5730: LD_INT 2
5732: NEG
5733: PPUSH
5734: CALL_OW 101
// GiveMedals ( MAIN ) ;
5738: LD_STRING MAIN
5740: PPUSH
5741: CALL_OW 102
// RewardPeople ( to_reward ) ;
5745: LD_VAR 0 2
5749: PPUSH
5750: CALL_OW 43
// if bobby_saved then
5754: LD_EXP 12
5758: IFFALSE 5778
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5760: LD_EXP 16
5764: PPUSH
5765: LD_EXP 2
5769: PUSH
5770: LD_STRING Bobby
5772: STR
5773: PPUSH
5774: CALL_OW 38
// if cyrus_saved then
5778: LD_EXP 13
5782: IFFALSE 5802
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5784: LD_EXP 17
5788: PPUSH
5789: LD_EXP 2
5793: PUSH
5794: LD_STRING Cyrus
5796: STR
5797: PPUSH
5798: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5802: LD_EXP 15
5806: PPUSH
5807: LD_EXP 2
5811: PUSH
5812: LD_STRING JMM
5814: STR
5815: PPUSH
5816: CALL_OW 38
// YouWin ;
5820: CALL_OW 103
// end ;
5824: PPOPN 3
5826: END
