// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// InitAmerican ;
   8: CALL 908 0 0
// InitRussian ;
  12: CALL 1147 0 0
// DebugMode ;
  16: CALL 145 0 0
// Action ;
  20: CALL 2579 0 0
// end ;
  24: END
// export debug ; export mission_prefix ; export active_russian_dialog , bobby_in_squad , powell_contact , macmilan_use_radio , cyrus_in_squad , active_road_patrol , macmilan_in_trap , meta_action , end_mission , bobby_saved , cyrus_saved , send_troops_to_forest ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// mission_prefix := 01_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 01_
  35: ST_TO_ADDR
// debug := false ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// active_russian_dialog := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// bobby_in_squad := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// cyrus_in_squad := false ;
  60: LD_ADDR_EXP 7
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// powell_contact := false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// macmilan_use_radio := false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// active_road_patrol := false ;
  84: LD_ADDR_EXP 8
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// macmilan_in_trap := false ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// meta_action := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// end_mission := false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bobby_saved := false ;
 116: LD_ADDR_EXP 12
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// cyrus_saved := false ;
 124: LD_ADDR_EXP 13
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// send_troops_to_forest := false ;
 132: LD_ADDR_EXP 14
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// end ;
 140: LD_VAR 0 1
 144: RET
// function DebugMode ; var i ; begin
 145: LD_INT 0
 147: PPUSH
 148: PPUSH
// if not debug then
 149: LD_EXP 1
 153: NOT
 154: IFFALSE 158
// exit ;
 156: GO 177
// Difficulty := 3 ;
 158: LD_ADDR_OWVAR 67
 162: PUSH
 163: LD_INT 3
 165: ST_TO_ADDR
// TurnFogOff ( ) ;
 166: CALL_OW 537
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// end ; end_of_file
 177: LD_VAR 0 1
 181: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 182: LD_INT 0
 184: PPUSH
 185: PPUSH
// if exist_mode then
 186: LD_VAR 0 2
 190: IFFALSE 209
// unit := CreateCharacter ( ident ) else
 192: LD_ADDR_VAR 0 4
 196: PUSH
 197: LD_VAR 0 1
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_VAR 0 4
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 3
 238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 239: LD_INT 0
 241: PPUSH
 242: PPUSH
 243: PPUSH
// uc_side := GetSide ( b ) ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 2
 253: PPUSH
 254: CALL_OW 255
 258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_VAR 0 2
 268: PPUSH
 269: CALL_OW 248
 273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 274: LD_INT 0
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 254
 303: PUSH
 304: LD_INT 3
 306: MINUS
 307: ST_TO_ADDR
// if dir < 0 then
 308: LD_VAR 0 5
 312: PUSH
 313: LD_INT 0
 315: LESS
 316: IFFALSE 332
// dir := 6 + dir ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_INT 6
 325: PUSH
 326: LD_VAR 0 5
 330: PLUS
 331: ST_TO_ADDR
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// SetDir ( un , dir ) ;
 342: LD_VAR 0 4
 346: PPUSH
 347: LD_VAR 0 5
 351: PPUSH
 352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 356: LD_VAR 0 4
 360: PPUSH
 361: LD_VAR 0 2
 365: PPUSH
 366: CALL_OW 52
// end ;
 370: LD_VAR 0 3
 374: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 375: LD_INT 0
 377: PPUSH
// uc_side := side ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_VAR 0 1
 387: ST_TO_ADDR
// uc_nation := nation ;
 388: LD_ADDR_OWVAR 21
 392: PUSH
 393: LD_VAR 0 2
 397: ST_TO_ADDR
// vc_chassis := chassis ;
 398: LD_ADDR_OWVAR 37
 402: PUSH
 403: LD_VAR 0 3
 407: ST_TO_ADDR
// vc_engine := engine ;
 408: LD_ADDR_OWVAR 39
 412: PUSH
 413: LD_VAR 0 4
 417: ST_TO_ADDR
// vc_control := control ;
 418: LD_ADDR_OWVAR 38
 422: PUSH
 423: LD_VAR 0 5
 427: ST_TO_ADDR
// vc_weapon := weapon ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_VAR 0 6
 437: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 438: LD_ADDR_OWVAR 41
 442: PUSH
 443: LD_VAR 0 7
 447: ST_TO_ADDR
// result := CreateVehicle ;
 448: LD_ADDR_VAR 0 8
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// end ;
 458: LD_VAR 0 8
 462: RET
// export function ComPatrol ( unit , mode , pause , coords ) ; var i ; begin
 463: LD_INT 0
 465: PPUSH
 466: PPUSH
// while ( active_road_patrol ) do
 467: LD_EXP 8
 471: IFFALSE 825
// begin Wait ( 0 0$01 ) ;
 473: LD_INT 35
 475: PPUSH
 476: CALL_OW 67
// if not unit then
 480: LD_VAR 0 1
 484: NOT
 485: IFFALSE 489
// exit ;
 487: GO 825
// if mode = road then
 489: LD_VAR 0 2
 493: PUSH
 494: LD_STRING road
 496: EQUAL
 497: IFFALSE 553
// if GetFuel ( unit ) < 50 and not See ( 1 , unit ) and not HasTask ( unit ) then
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 261
 508: PUSH
 509: LD_INT 50
 511: LESS
 512: PUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_VAR 0 1
 520: PPUSH
 521: CALL_OW 292
 525: NOT
 526: AND
 527: PUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: CALL_OW 314
 537: NOT
 538: AND
 539: IFFALSE 553
// SetFuel ( unit , 100 ) ;
 541: LD_VAR 0 1
 545: PPUSH
 546: LD_INT 100
 548: PPUSH
 549: CALL_OW 240
// if mode = forest then
 553: LD_VAR 0 2
 557: PUSH
 558: LD_STRING forest
 560: EQUAL
 561: IFFALSE 641
// if GetLives ( unit ) < 600 then
 563: LD_VAR 0 1
 567: PPUSH
 568: CALL_OW 256
 572: PUSH
 573: LD_INT 600
 575: LESS
 576: IFFALSE 641
// begin ComMoveXY ( unit , 42 , 3 ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_INT 42
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 111
// SetRememberedX ( unit , GetX ( unit ) ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 250
 607: PPUSH
 608: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: CALL_OW 232
// send_troops_to_forest := true ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// break ;
 639: GO 825
// end ; if not HasTask ( unit ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: CALL_OW 314
 650: NOT
 651: IFFALSE 823
// begin for i = 1 to coords do
 653: LD_ADDR_VAR 0 6
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_VAR 0 4
 667: PUSH
 668: FOR_TO
 669: IFFALSE 736
// begin AddComAgressiveMove ( unit , coords [ i ] , coords [ i + 1 ] ) ;
 671: LD_VAR 0 1
 675: PPUSH
 676: LD_VAR 0 4
 680: PUSH
 681: LD_VAR 0 6
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_VAR 0 6
 696: PUSH
 697: LD_INT 1
 699: PLUS
 700: ARRAY
 701: PPUSH
 702: CALL_OW 174
// AddComWait ( unit , pause ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 202
// i := i + 1 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_INT 1
 732: PLUS
 733: ST_TO_ADDR
// end ;
 734: GO 668
 736: POP
 737: POP
// for i = coords downto 1 do
 738: LD_ADDR_VAR 0 6
 742: PUSH
 743: DOUBLE
 744: LD_VAR 0 4
 748: INC
 749: ST_TO_ADDR
 750: LD_INT 1
 752: PUSH
 753: FOR_DOWNTO
 754: IFFALSE 821
// begin AddComAgressiveMove ( unit , coords [ i - 1 ] , coords [ i ] ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 4
 765: PUSH
 766: LD_VAR 0 6
 770: PUSH
 771: LD_INT 1
 773: MINUS
 774: ARRAY
 775: PPUSH
 776: LD_VAR 0 4
 780: PUSH
 781: LD_VAR 0 6
 785: ARRAY
 786: PPUSH
 787: CALL_OW 174
// AddComWait ( unit , pause ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: LD_VAR 0 3
 800: PPUSH
 801: CALL_OW 202
// i := i - 1 ;
 805: LD_ADDR_VAR 0 6
 809: PUSH
 810: LD_VAR 0 6
 814: PUSH
 815: LD_INT 1
 817: MINUS
 818: ST_TO_ADDR
// end ;
 819: GO 753
 821: POP
 822: POP
// end ; end ;
 823: GO 467
// end ;
 825: LD_VAR 0 5
 829: RET
// export function DebugSay ( dialog ) ; var speaker ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
// uc_nation := 1 ;
 834: LD_ADDR_OWVAR 21
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// uc_side := 0 ;
 842: LD_ADDR_OWVAR 20
 846: PUSH
 847: LD_INT 0
 849: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 380
// hc_name := speaker ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING speaker
 870: ST_TO_ADDR
// hc_gallery :=  ;
 871: LD_ADDR_OWVAR 33
 875: PUSH
 876: LD_STRING 
 878: ST_TO_ADDR
// speaker := CreateHuman ;
 879: LD_ADDR_VAR 0 3
 883: PUSH
 884: CALL_OW 44
 888: ST_TO_ADDR
// Say ( speaker , dialog ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 88
// end ; end_of_file
 903: LD_VAR 0 2
 907: RET
// export JMM , Bobby , Cyrus , Powell , fakePokryshkin ; export function InitAmerican ; begin
 908: LD_INT 0
 910: PPUSH
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , false ) ;
 919: LD_ADDR_EXP 15
 923: PUSH
 924: LD_STRING JMM
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL 182 0 2
 934: ST_TO_ADDR
// uc_side := 4 ;
 935: LD_ADDR_OWVAR 20
 939: PUSH
 940: LD_INT 4
 942: ST_TO_ADDR
// hc_gallery := us ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING us
 950: ST_TO_ADDR
// hc_face_number := 7 ;
 951: LD_ADDR_OWVAR 34
 955: PUSH
 956: LD_INT 7
 958: ST_TO_ADDR
// hc_sex := sex_male ;
 959: LD_ADDR_OWVAR 27
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// hc_name := ... ;
 967: LD_ADDR_OWVAR 26
 971: PUSH
 972: LD_STRING ...
 974: ST_TO_ADDR
// hc_class := 1 ;
 975: LD_ADDR_OWVAR 28
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// Powell := CreateHuman ;
 983: LD_ADDR_EXP 18
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// hc_name := ... ;
 993: LD_ADDR_OWVAR 26
 997: PUSH
 998: LD_STRING ...
1000: ST_TO_ADDR
// hc_gallery := ru ;
1001: LD_ADDR_OWVAR 33
1005: PUSH
1006: LD_STRING ru
1008: ST_TO_ADDR
// hc_face_number := 4 ;
1009: LD_ADDR_OWVAR 34
1013: PUSH
1014: LD_INT 4
1016: ST_TO_ADDR
// hc_sex := sex_male ;
1017: LD_ADDR_OWVAR 27
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// fakePokryshkin := CreateHuman ;
1025: LD_ADDR_EXP 19
1029: PUSH
1030: CALL_OW 44
1034: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , false ) ;
1035: LD_ADDR_EXP 16
1039: PUSH
1040: LD_STRING Bobby
1042: PPUSH
1043: LD_INT 0
1045: PPUSH
1046: CALL 182 0 2
1050: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , false ) ;
1051: LD_ADDR_EXP 17
1055: PUSH
1056: LD_STRING Cyrus
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL 182 0 2
1066: ST_TO_ADDR
// case Difficulty of 1 :
1067: LD_OWVAR 67
1071: PUSH
1072: LD_INT 1
1074: DOUBLE
1075: EQUAL
1076: IFTRUE 1080
1078: GO 1095
1080: POP
// SetLives ( Bobby , 500 ) ; 2 :
1081: LD_EXP 16
1085: PPUSH
1086: LD_INT 500
1088: PPUSH
1089: CALL_OW 234
1093: GO 1142
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1118
1103: POP
// SetLives ( Bobby , 450 ) ; 3 :
1104: LD_EXP 16
1108: PPUSH
1109: LD_INT 450
1111: PPUSH
1112: CALL_OW 234
1116: GO 1142
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1141
1126: POP
// SetLives ( Bobby , 400 ) ; end ;
1127: LD_EXP 16
1131: PPUSH
1132: LD_INT 400
1134: PPUSH
1135: CALL_OW 234
1139: GO 1142
1141: POP
// end ; end_of_file
1142: LD_VAR 0 1
1146: RET
// export russian_troops_1 , russian_troops_2 , russian_patrol_tanks , russian_meta_guards , russian_patrol_forest ; export Pokryshkin ; export function InitRussian ; var skill , i , un ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
// skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
1153: LD_ADDR_VAR 0 2
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_OWVAR 67
1176: ARRAY
1177: ST_TO_ADDR
// uc_side := 3 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// uc_nation := 3 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 3
1193: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
1194: LD_ADDR_EXP 25
1198: PUSH
1199: LD_STRING Pokryshkin
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL 182 0 2
1209: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 44 , 5 , false ) ;
1210: LD_EXP 25
1214: PPUSH
1215: LD_INT 44
1217: PPUSH
1218: LD_INT 5
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 48
// hc_importance := 0 ;
1228: LD_ADDR_OWVAR 32
1232: PUSH
1233: LD_INT 0
1235: ST_TO_ADDR
// hc_gallery :=  ;
1236: LD_ADDR_OWVAR 33
1240: PUSH
1241: LD_STRING 
1243: ST_TO_ADDR
// hc_name :=  ;
1244: LD_ADDR_OWVAR 26
1248: PUSH
1249: LD_STRING 
1251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1252: LD_INT 1
1254: PPUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1267: LD_ADDR_OWVAR 33
1271: PUSH
1272: LD_STRING SecondCharsGal
1274: ST_TO_ADDR
// hc_face_number := 69 ;
1275: LD_ADDR_OWVAR 34
1279: PUSH
1280: LD_INT 69
1282: ST_TO_ADDR
// hc_sex := sex_male ;
1283: LD_ADDR_OWVAR 27
1287: PUSH
1288: LD_INT 1
1290: ST_TO_ADDR
// hc_name := Ilja Ivanov ;
1291: LD_ADDR_OWVAR 26
1295: PUSH
1296: LD_STRING Ilja Ivanov
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 1 , un ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_EXP 20
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_VAR 0 4
1326: PPUSH
1327: CALL_OW 2
1331: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 3
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// PrepareHuman ( sex_male , 1 , skill ) ;
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: CALL_OW 380
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 70 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 70
1377: ST_TO_ADDR
// hc_name := Pavel Starczy ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Pavel Starczy
1385: ST_TO_ADDR
// un := CreateHuman ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: CALL_OW 44
1395: ST_TO_ADDR
// russian_troops_1 := Insert ( russian_troops_1 , 2 , un ) ;
1396: LD_ADDR_EXP 20
1400: PUSH
1401: LD_EXP 20
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 4
1413: PPUSH
1414: CALL_OW 2
1418: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// InitHc ;
1434: CALL_OW 19
// for i = 1 to 7 do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1603
// begin PrepareHuman ( false , 1 , skill ) ;
1454: LD_INT 0
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 380
// un := CreateHuman ;
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// if i mod 2 = 0 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 2
1486: MOD
1487: PUSH
1488: LD_INT 0
1490: EQUAL
1491: IFFALSE 1548
// begin russian_troops_1 := Insert ( russian_troops_1 , russian_troops_1 + 1 , un ) ;
1493: LD_ADDR_EXP 20
1497: PUSH
1498: LD_EXP 20
1502: PPUSH
1503: LD_EXP 20
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_VAR 0 4
1516: PPUSH
1517: CALL_OW 2
1521: ST_TO_ADDR
// PlaceUnitArea ( un , guard_north , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// ComHold ( un ) ;
1537: LD_VAR 0 4
1541: PPUSH
1542: CALL_OW 140
// end else
1546: GO 1601
// begin russian_troops_2 := Insert ( russian_troops_2 , russian_troops_2 + 1 , un ) ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_EXP 21
1557: PPUSH
1558: LD_EXP 21
1562: PUSH
1563: LD_INT 1
1565: PLUS
1566: PPUSH
1567: LD_VAR 0 4
1571: PPUSH
1572: CALL_OW 2
1576: ST_TO_ADDR
// PlaceUnitArea ( un , guard_south , false ) ;
1577: LD_VAR 0 4
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 49
// ComHold ( un ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL_OW 140
// end ; end ;
1601: GO 1451
1603: POP
1604: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: LD_INT 22
1612: PUSH
1613: LD_INT 3
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 30
1622: PUSH
1623: LD_INT 31
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 69
1638: PUSH
1639: FOR_IN
1640: IFFALSE 1658
// PrepareSolBun ( skill , i ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: CALL 239 0 2
1656: GO 1639
1658: POP
1659: POP
// for i = 1 to 2 do
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: DOUBLE
1666: LD_INT 1
1668: DEC
1669: ST_TO_ADDR
1670: LD_INT 2
1672: PUSH
1673: FOR_TO
1674: IFFALSE 1805
// begin un := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1676: LD_ADDR_VAR 0 4
1680: PUSH
1681: LD_INT 3
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: LD_INT 22
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: LD_INT 42
1698: PPUSH
1699: LD_INT 100
1701: PPUSH
1702: CALL 375 0 7
1706: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
1707: LD_INT 0
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_VAR 0 2
1717: PPUSH
1718: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1722: CALL_OW 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 52
// PlaceUnitXY ( un , [ 23 , 131 ] [ i ] , [ 14 , 87 ] [ i ] , false ) ;
1736: LD_VAR 0 4
1740: PPUSH
1741: LD_INT 23
1743: PUSH
1744: LD_INT 131
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_VAR 0 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 14
1759: PUSH
1760: LD_INT 87
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_VAR 0 3
1771: ARRAY
1772: PPUSH
1773: LD_INT 0
1775: PPUSH
1776: CALL_OW 48
// russian_patrol_tanks := Insert ( russian_patrol_tanks , 1 , un ) ;
1780: LD_ADDR_EXP 22
1784: PUSH
1785: LD_EXP 22
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: CALL_OW 2
1802: ST_TO_ADDR
// end ;
1803: GO 1673
1805: POP
1806: POP
// for i = 1 to 2 do
1807: LD_ADDR_VAR 0 3
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 2
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1912
// begin PrepareHuman ( [ sex_female , sex_male , sex_male ] [ i ] , 1 , 1 ) ;
1823: LD_INT 2
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: LD_INT 1
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_VAR 0 3
1841: ARRAY
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: LD_INT 1
1848: PPUSH
1849: CALL_OW 380
// un := CreateHuman ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: CALL_OW 44
1862: ST_TO_ADDR
// russian_meta_guards := Insert ( russian_meta_guards , 1 , un ) ;
1863: LD_ADDR_EXP 23
1867: PUSH
1868: LD_EXP 23
1872: PPUSH
1873: LD_INT 1
1875: PPUSH
1876: LD_VAR 0 4
1880: PPUSH
1881: CALL_OW 2
1885: ST_TO_ADDR
// PlaceUnitArea ( un , exitArea , false ) ;
1886: LD_VAR 0 4
1890: PPUSH
1891: LD_INT 10
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 49
// ComHold ( un ) ;
1901: LD_VAR 0 4
1905: PPUSH
1906: CALL_OW 140
// end ;
1910: GO 1820
1912: POP
1913: POP
// if Difficulty < 3 then
1914: LD_OWVAR 67
1918: PUSH
1919: LD_INT 3
1921: LESS
1922: IFFALSE 1926
// exit ;
1924: GO 1969
// PrepareHuman ( false , 1 , skill ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_VAR 0 2
1936: PPUSH
1937: CALL_OW 380
// russian_patrol_forest := CreateHuman ;
1941: LD_ADDR_EXP 24
1945: PUSH
1946: CALL_OW 44
1950: ST_TO_ADDR
// PlaceUnitXY ( russian_patrol_forest , 82 , 2 , false ) ;
1951: LD_EXP 24
1955: PPUSH
1956: LD_INT 82
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: CALL_OW 48
// end ;
1969: LD_VAR 0 1
1973: RET
// every 0 0$01 trigger active_road_patrol do
1974: LD_EXP 8
1978: IFFALSE 2044
1980: GO 1982
1982: DISABLE
// ComPatrol ( russian_patrol_tanks [ 1 ] , road , 0 0$02 , [ 131 , 87 , 107 , 75 , 107 , 66 , 114 , 61 , 107 , 34 ] ) ;
1983: LD_EXP 22
1987: PUSH
1988: LD_INT 1
1990: ARRAY
1991: PPUSH
1992: LD_STRING road
1994: PPUSH
1995: LD_INT 70
1997: PPUSH
1998: LD_INT 131
2000: PUSH
2001: LD_INT 87
2003: PUSH
2004: LD_INT 107
2006: PUSH
2007: LD_INT 75
2009: PUSH
2010: LD_INT 107
2012: PUSH
2013: LD_INT 66
2015: PUSH
2016: LD_INT 114
2018: PUSH
2019: LD_INT 61
2021: PUSH
2022: LD_INT 107
2024: PUSH
2025: LD_INT 34
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: PPUSH
2040: CALL 463 0 4
2044: END
// every 0 0$01 trigger active_road_patrol do
2045: LD_EXP 8
2049: IFFALSE 2107
2051: GO 2053
2053: DISABLE
// ComPatrol ( russian_patrol_tanks [ 2 ] , road , 0 0$02 , [ 21 , 12 , 37 , 30 , 65 , 62 , 107 , 76 ] ) ;
2054: LD_EXP 22
2058: PUSH
2059: LD_INT 2
2061: ARRAY
2062: PPUSH
2063: LD_STRING road
2065: PPUSH
2066: LD_INT 70
2068: PPUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 12
2074: PUSH
2075: LD_INT 37
2077: PUSH
2078: LD_INT 30
2080: PUSH
2081: LD_INT 65
2083: PUSH
2084: LD_INT 62
2086: PUSH
2087: LD_INT 107
2089: PUSH
2090: LD_INT 76
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: PPUSH
2103: CALL 463 0 4
2107: END
// every 0 0$01 trigger IsOk ( russian_patrol_forest ) do
2108: LD_EXP 24
2112: PPUSH
2113: CALL_OW 302
2117: IFFALSE 2179
2119: GO 2121
2121: DISABLE
// ComPatrol ( russian_patrol_forest , forest , 0 0$01 , [ 52 , 15 , 81 , 9 , 120 , 52 , 135 , 80 , 122 , 95 ] ) ;
2122: LD_EXP 24
2126: PPUSH
2127: LD_STRING forest
2129: PPUSH
2130: LD_INT 35
2132: PPUSH
2133: LD_INT 52
2135: PUSH
2136: LD_INT 15
2138: PUSH
2139: LD_INT 81
2141: PUSH
2142: LD_INT 9
2144: PUSH
2145: LD_INT 120
2147: PUSH
2148: LD_INT 52
2150: PUSH
2151: LD_INT 135
2153: PUSH
2154: LD_INT 80
2156: PUSH
2157: LD_INT 122
2159: PUSH
2160: LD_INT 95
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL 463 0 4
2179: END
// every 0 0$01 trigger macmilan_use_radio do
2180: LD_EXP 6
2184: IFFALSE 2245
2186: GO 2188
2188: DISABLE
// begin active_road_patrol := false ;
2189: LD_ADDR_EXP 8
2193: PUSH
2194: LD_INT 0
2196: ST_TO_ADDR
// ComStop ( russian_patrol_tanks ) ;
2197: LD_EXP 22
2201: PPUSH
2202: CALL_OW 141
// AddComAgressiveMove ( russian_patrol_tanks , 72 , 41 ) ;
2206: LD_EXP 22
2210: PPUSH
2211: LD_INT 72
2213: PPUSH
2214: LD_INT 41
2216: PPUSH
2217: CALL_OW 174
// ComExitBuilding ( russian_troops_2 ) ;
2221: LD_EXP 21
2225: PPUSH
2226: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , 72 , 41 ) ;
2230: LD_EXP 21
2234: PPUSH
2235: LD_INT 72
2237: PPUSH
2238: LD_INT 41
2240: PPUSH
2241: CALL_OW 174
// end ;
2245: END
// every 0 0$03 trigger FilterUnitsInArea ( def_south , [ f_side , 1 ] ) do var un ;
2246: LD_INT 9
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 1
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 70
2263: IFFALSE 2337
2265: GO 2267
2267: DISABLE
2268: LD_INT 0
2270: PPUSH
// begin enable ;
2271: ENABLE
// un := FilterUnitsInArea ( def_south , [ f_side , 1 ] ) [ 1 ] ;
2272: LD_ADDR_VAR 0 1
2276: PUSH
2277: LD_INT 9
2279: PPUSH
2280: LD_INT 22
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 70
2294: PUSH
2295: LD_INT 1
2297: ARRAY
2298: ST_TO_ADDR
// ComExitBuilding ( russian_troops_2 ) ;
2299: LD_EXP 21
2303: PPUSH
2304: CALL_OW 122
// AddComAgressiveMove ( russian_troops_2 , GetX ( un ) , GetY ( un ) ) ;
2308: LD_EXP 21
2312: PPUSH
2313: LD_VAR 0 1
2317: PPUSH
2318: CALL_OW 250
2322: PPUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: CALL_OW 251
2332: PPUSH
2333: CALL_OW 174
// end ;
2337: PPOPN 1
2339: END
// every 0 0$01 trigger ( GetLives ( russian_patrol_tanks [ 1 ] ) < 999 or GetLives ( russian_patrol_tanks [ 2 ] ) < 999 ) and See ( 3 , JMM ) do
2340: LD_EXP 22
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: CALL_OW 256
2353: PUSH
2354: LD_INT 999
2356: LESS
2357: PUSH
2358: LD_EXP 22
2362: PUSH
2363: LD_INT 2
2365: ARRAY
2366: PPUSH
2367: CALL_OW 256
2371: PUSH
2372: LD_INT 999
2374: LESS
2375: OR
2376: PUSH
2377: LD_INT 3
2379: PPUSH
2380: LD_EXP 15
2384: PPUSH
2385: CALL_OW 292
2389: AND
2390: IFFALSE 2417
2392: GO 2394
2394: DISABLE
// begin active_road_patrol := false ;
2395: LD_ADDR_EXP 8
2399: PUSH
2400: LD_INT 0
2402: ST_TO_ADDR
// ComAttackUnit ( russian_patrol_tanks , JMM ) ;
2403: LD_EXP 22
2407: PPUSH
2408: LD_EXP 15
2412: PPUSH
2413: CALL_OW 115
// end ;
2417: END
// every 0 0$01 trigger macmilan_in_trap do
2418: LD_EXP 9
2422: IFFALSE 2468
2424: GO 2426
2426: DISABLE
// begin ComExitBuilding ( russian_troops_2 ) ;
2427: LD_EXP 21
2431: PPUSH
2432: CALL_OW 122
// ComAttackUnit ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , JMM ) ;
2436: LD_EXP 20
2440: PUSH
2441: LD_EXP 21
2445: ADD
2446: PUSH
2447: LD_EXP 25
2451: ADD
2452: PUSH
2453: LD_EXP 22
2457: ADD
2458: PPUSH
2459: LD_EXP 15
2463: PPUSH
2464: CALL_OW 115
// end ;
2468: END
// every 0 0$01 trigger meta_action do
2469: LD_EXP 10
2473: IFFALSE 2519
2475: GO 2477
2477: DISABLE
// begin active_road_patrol := false ;
2478: LD_ADDR_EXP 8
2482: PUSH
2483: LD_INT 0
2485: ST_TO_ADDR
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 ^ Pokryshkin ^ russian_patrol_tanks , 93 , 1 ) ;
2486: LD_EXP 20
2490: PUSH
2491: LD_EXP 21
2495: ADD
2496: PUSH
2497: LD_EXP 25
2501: ADD
2502: PUSH
2503: LD_EXP 22
2507: ADD
2508: PPUSH
2509: LD_INT 93
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 114
// end ;
2519: END
// every 0 0$20 trigger send_troops_to_forest do
2520: LD_EXP 14
2524: IFFALSE 2578
2526: GO 2528
2528: DISABLE
// begin if not IsOk ( russian_patrol_forest ) then
2529: LD_EXP 24
2533: PPUSH
2534: CALL_OW 302
2538: NOT
2539: IFFALSE 2543
// exit ;
2541: GO 2578
// ComAgressiveMove ( russian_troops_1 ^ Pokryshkin , GetRememberedX ( russian_patrol_forest ) , GetRememberedY ( russian_patrol_forest ) ) ;
2543: LD_EXP 20
2547: PUSH
2548: LD_EXP 25
2552: ADD
2553: PPUSH
2554: LD_EXP 24
2558: PPUSH
2559: CALL_OW 252
2563: PPUSH
2564: LD_EXP 24
2568: PPUSH
2569: CALL_OW 253
2573: PPUSH
2574: CALL_OW 114
// end ; end_of_file
2578: END
// export function Action ; var i ; begin
2579: LD_INT 0
2581: PPUSH
2582: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
2583: LD_ADDR_VAR 0 2
2587: PUSH
2588: LD_INT 22
2590: PUSH
2591: LD_INT 3
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PUSH
2598: LD_INT 25
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PPUSH
2612: CALL_OW 69
2616: PUSH
2617: FOR_IN
2618: IFFALSE 2631
// ComHold ( i ) ;
2620: LD_VAR 0 2
2624: PPUSH
2625: CALL_OW 140
2629: GO 2617
2631: POP
2632: POP
// InGameOn ;
2633: CALL_OW 8
// CenterOnXY ( 79 , 76 ) ;
2637: LD_INT 79
2639: PPUSH
2640: LD_INT 76
2642: PPUSH
2643: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
2647: LD_INT 10
2649: PPUSH
2650: CALL_OW 67
// PlaceUnitXY ( JMM , 80 , 79 , true ) ;
2654: LD_EXP 15
2658: PPUSH
2659: LD_INT 80
2661: PPUSH
2662: LD_INT 79
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 48
// Wait ( 0 0$03 ) ;
2672: LD_INT 105
2674: PPUSH
2675: CALL_OW 67
// ComMoveXY ( JMM , 80 , 76 ) ;
2679: LD_EXP 15
2683: PPUSH
2684: LD_INT 80
2686: PPUSH
2687: LD_INT 76
2689: PPUSH
2690: CALL_OW 111
// Say ( JMM , D1-JMM-1 ) ;
2694: LD_EXP 15
2698: PPUSH
2699: LD_STRING D1-JMM-1
2701: PPUSH
2702: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2706: LD_INT 10
2708: PPUSH
2709: CALL_OW 67
// ComMoveXY ( JMM , 76 , 76 ) ;
2713: LD_EXP 15
2717: PPUSH
2718: LD_INT 76
2720: PPUSH
2721: LD_INT 76
2723: PPUSH
2724: CALL_OW 111
// Say ( JMM , D1-JMM-1a ) ;
2728: LD_EXP 15
2732: PPUSH
2733: LD_STRING D1-JMM-1a
2735: PPUSH
2736: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2740: LD_INT 10
2742: PPUSH
2743: CALL_OW 67
// ComTurnXY ( JMM , 83 , 66 ) ;
2747: LD_EXP 15
2751: PPUSH
2752: LD_INT 83
2754: PPUSH
2755: LD_INT 66
2757: PPUSH
2758: CALL_OW 118
// Say ( JMM , D1-JMM-1b ) ;
2762: LD_EXP 15
2766: PPUSH
2767: LD_STRING D1-JMM-1b
2769: PPUSH
2770: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2774: LD_INT 18
2776: PPUSH
2777: CALL_OW 67
// Say ( JMM , D1-JMM-1c ) ;
2781: LD_EXP 15
2785: PPUSH
2786: LD_STRING D1-JMM-1c
2788: PPUSH
2789: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2793: LD_INT 7
2795: PPUSH
2796: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
2800: LD_EXP 18
2804: PPUSH
2805: LD_STRING D1-Pow-1
2807: PPUSH
2808: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
2812: LD_EXP 15
2816: PPUSH
2817: LD_STRING D1-JMM-2
2819: PPUSH
2820: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
2824: LD_EXP 18
2828: PPUSH
2829: LD_STRING D1-Pow-2
2831: PPUSH
2832: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
2836: LD_EXP 15
2840: PPUSH
2841: LD_STRING D1-JMM-3
2843: PPUSH
2844: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
2848: LD_EXP 18
2852: PPUSH
2853: LD_STRING D1-Pow-3
2855: PPUSH
2856: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
2860: LD_EXP 15
2864: PPUSH
2865: LD_STRING D1-JMM-4
2867: PPUSH
2868: CALL_OW 88
// ComFree ( JMM ) ;
2872: LD_EXP 15
2876: PPUSH
2877: CALL_OW 139
// Wait ( 0 0$0.3 ) ;
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 67
// InGameOff ;
2888: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2892: LD_STRING M1
2894: PPUSH
2895: CALL_OW 337
// active_russian_dialog := true ;
2899: LD_ADDR_EXP 3
2903: PUSH
2904: LD_INT 1
2906: ST_TO_ADDR
// active_road_patrol := true ;
2907: LD_ADDR_EXP 8
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// PlaceUnitXY ( Bobby , 41 , 71 , false ) ;
2915: LD_EXP 16
2919: PPUSH
2920: LD_INT 41
2922: PPUSH
2923: LD_INT 71
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 48
// ComHold ( Bobby ) ;
2933: LD_EXP 16
2937: PPUSH
2938: CALL_OW 140
// PlaceUnitXY ( Cyrus , 90 , 42 , false ) ;
2942: LD_EXP 17
2946: PPUSH
2947: LD_INT 90
2949: PPUSH
2950: LD_INT 42
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// ComMoveXY ( Cyrus , 79 , 34 ) ;
2960: LD_EXP 17
2964: PPUSH
2965: LD_INT 79
2967: PPUSH
2968: LD_INT 34
2970: PPUSH
2971: CALL_OW 111
// ComCrawl ( Cyrus ) ;
2975: LD_EXP 17
2979: PPUSH
2980: CALL_OW 137
// SaveForQuickRestart ;
2984: CALL_OW 22
// end ;
2988: LD_VAR 0 1
2992: RET
// every 0 0$01 trigger active_russian_dialog do var wait_points ;
2993: LD_EXP 3
2997: IFFALSE 3620
2999: GO 3001
3001: DISABLE
3002: LD_INT 0
3004: PPUSH
// begin wait_points := 0 ;
3005: LD_ADDR_VAR 0 1
3009: PUSH
3010: LD_INT 0
3012: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
3013: LD_INT 70
3015: PPUSH
3016: CALL_OW 67
// ComAgressiveMove ( russian_troops_1 , 79 , 83 ) ;
3020: LD_EXP 20
3024: PPUSH
3025: LD_INT 79
3027: PPUSH
3028: LD_INT 83
3030: PPUSH
3031: CALL_OW 114
// Say ( russian_troops_1 [ 2 ] , D1R-Rus1-1 ) ;
3035: LD_EXP 20
3039: PUSH
3040: LD_INT 2
3042: ARRAY
3043: PPUSH
3044: LD_STRING D1R-Rus1-1
3046: PPUSH
3047: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1R-Rus2-1 ) ;
3051: LD_EXP 20
3055: PUSH
3056: LD_INT 1
3058: ARRAY
3059: PPUSH
3060: LD_STRING D1R-Rus2-1
3062: PPUSH
3063: CALL_OW 88
// ComAgressiveMove ( russian_troops_2 , 79 , 83 ) ;
3067: LD_EXP 21
3071: PPUSH
3072: LD_INT 79
3074: PPUSH
3075: LD_INT 83
3077: PPUSH
3078: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3082: LD_INT 35
3084: PPUSH
3085: CALL_OW 67
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 79 , 82 ) < 5 ;
3089: LD_EXP 20
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PPUSH
3098: LD_INT 79
3100: PPUSH
3101: LD_INT 82
3103: PPUSH
3104: CALL_OW 297
3108: PUSH
3109: LD_INT 5
3111: LESS
3112: IFFALSE 3082
// if not IsInArea ( JMM , jmm_spot ) then
3114: LD_EXP 15
3118: PPUSH
3119: LD_INT 5
3121: PPUSH
3122: CALL_OW 308
3126: NOT
3127: IFFALSE 3147
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1 ) else
3129: LD_EXP 20
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_STRING D1Ra-Rus2-1
3140: PPUSH
3141: CALL_OW 88
3145: GO 3283
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3147: LD_EXP 20
3151: PUSH
3152: LD_INT 2
3154: ARRAY
3155: PPUSH
3156: LD_STRING D1Rb-Rus1-1
3158: PPUSH
3159: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Rb-Rus2-1 ) ;
3163: LD_EXP 20
3167: PUSH
3168: LD_INT 1
3170: ARRAY
3171: PPUSH
3172: LD_STRING D1Rb-Rus2-1
3174: PPUSH
3175: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 ^ russian_troops_2 , GetX ( JMM ) , GetY ( JMM ) ) ;
3179: LD_EXP 20
3183: PUSH
3184: LD_EXP 21
3188: ADD
3189: PPUSH
3190: LD_EXP 15
3194: PPUSH
3195: CALL_OW 250
3199: PPUSH
3200: LD_EXP 15
3204: PPUSH
3205: CALL_OW 251
3209: PPUSH
3210: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
3214: LD_INT 35
3216: PPUSH
3217: CALL_OW 67
// until not IsInArea ( JMM , jmm_spot ) and not See ( 3 , jmm ) ;
3221: LD_EXP 15
3225: PPUSH
3226: LD_INT 5
3228: PPUSH
3229: CALL_OW 308
3233: NOT
3234: PUSH
3235: LD_INT 3
3237: PPUSH
3238: LD_EXP 15
3242: PPUSH
3243: CALL_OW 292
3247: NOT
3248: AND
3249: IFFALSE 3214
// Say ( russian_troops_1 [ 2 ] , D1Rc-Rus1-1 ) ;
3251: LD_EXP 20
3255: PUSH
3256: LD_INT 2
3258: ARRAY
3259: PPUSH
3260: LD_STRING D1Rc-Rus1-1
3262: PPUSH
3263: CALL_OW 88
// Say ( russian_troops_1 [ 1 ] , D1Ra-Rus2-1a ) ;
3267: LD_EXP 20
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: PPUSH
3276: LD_STRING D1Ra-Rus2-1a
3278: PPUSH
3279: CALL_OW 88
// end ; wait_points := 10 ;
3283: LD_ADDR_VAR 0 1
3287: PUSH
3288: LD_INT 10
3290: ST_TO_ADDR
// if Difficulty > 1 then
3291: LD_OWVAR 67
3295: PUSH
3296: LD_INT 1
3298: GREATER
3299: IFFALSE 3381
// begin ComAgressiveMove ( russian_troops_1 , 78 , 95 ) ;
3301: LD_EXP 20
3305: PPUSH
3306: LD_INT 78
3308: PPUSH
3309: LD_INT 95
3311: PPUSH
3312: CALL_OW 114
// AddComWait ( russian_troops_1 , 0 0$05 ) ;
3316: LD_EXP 20
3320: PPUSH
3321: LD_INT 175
3323: PPUSH
3324: CALL_OW 202
// wait_points := wait_points + 15 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_VAR 0 1
3337: PUSH
3338: LD_INT 15
3340: PLUS
3341: ST_TO_ADDR
// if Difficulty > 2 then
3342: LD_OWVAR 67
3346: PUSH
3347: LD_INT 2
3349: GREATER
3350: IFFALSE 3381
// begin AddComAgressiveMove ( russian_troops_1 , 65 , 79 ) ;
3352: LD_EXP 20
3356: PPUSH
3357: LD_INT 65
3359: PPUSH
3360: LD_INT 79
3362: PPUSH
3363: CALL_OW 174
// wait_points := wait_points + 5 ;
3367: LD_ADDR_VAR 0 1
3371: PUSH
3372: LD_VAR 0 1
3376: PUSH
3377: LD_INT 5
3379: PLUS
3380: ST_TO_ADDR
// end ; end ; repeat wait ( 0 0$01 ) ;
3381: LD_INT 35
3383: PPUSH
3384: CALL_OW 67
// wait_points := wait_points - 1 ;
3388: LD_ADDR_VAR 0 1
3392: PUSH
3393: LD_VAR 0 1
3397: PUSH
3398: LD_INT 1
3400: MINUS
3401: ST_TO_ADDR
// if See ( 3 , JMM ) then
3402: LD_INT 3
3404: PPUSH
3405: LD_EXP 15
3409: PPUSH
3410: CALL_OW 292
3414: IFFALSE 3468
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3416: LD_EXP 20
3420: PUSH
3421: LD_INT 2
3423: ARRAY
3424: PPUSH
3425: LD_STRING D1Rb-Rus1-1
3427: PPUSH
3428: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3432: LD_EXP 20
3436: PPUSH
3437: LD_EXP 15
3441: PPUSH
3442: CALL_OW 250
3446: PPUSH
3447: LD_EXP 15
3451: PPUSH
3452: CALL_OW 251
3456: PPUSH
3457: CALL_OW 114
// Wait ( 0 0$03 ) ;
3461: LD_INT 105
3463: PPUSH
3464: CALL_OW 67
// end ; until wait_points = 0 ;
3468: LD_VAR 0 1
3472: PUSH
3473: LD_INT 0
3475: EQUAL
3476: IFFALSE 3381
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3478: LD_EXP 20
3482: PPUSH
3483: LD_INT 45
3485: PPUSH
3486: LD_INT 5
3488: PPUSH
3489: CALL_OW 114
// ComEnterUnit ( russian_troops_2 , rbar1 ) ;
3493: LD_EXP 21
3497: PPUSH
3498: LD_INT 26
3500: PPUSH
3501: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
3505: LD_INT 35
3507: PPUSH
3508: CALL_OW 67
// if See ( 3 , JMM ) then
3512: LD_INT 3
3514: PPUSH
3515: LD_EXP 15
3519: PPUSH
3520: CALL_OW 292
3524: IFFALSE 3580
// begin Say ( russian_troops_1 [ 2 ] , D1Rb-Rus1-1 ) ;
3526: LD_EXP 20
3530: PUSH
3531: LD_INT 2
3533: ARRAY
3534: PPUSH
3535: LD_STRING D1Rb-Rus1-1
3537: PPUSH
3538: CALL_OW 88
// ComAgressiveMove ( russian_troops_1 , GetX ( JMM ) , GetY ( JMM ) ) ;
3542: LD_EXP 20
3546: PPUSH
3547: LD_EXP 15
3551: PPUSH
3552: CALL_OW 250
3556: PPUSH
3557: LD_EXP 15
3561: PPUSH
3562: CALL_OW 251
3566: PPUSH
3567: CALL_OW 114
// Wait ( 0 0$50 ) ;
3571: LD_INT 1750
3573: PPUSH
3574: CALL_OW 67
// end else
3578: GO 3595
// ComAgressiveMove ( russian_troops_1 , 45 , 5 ) ;
3580: LD_EXP 20
3584: PPUSH
3585: LD_INT 45
3587: PPUSH
3588: LD_INT 5
3590: PPUSH
3591: CALL_OW 114
// until GetDistUnitXY ( russian_troops_1 [ 1 ] , 45 , 5 ) < 10 ;
3595: LD_EXP 20
3599: PUSH
3600: LD_INT 1
3602: ARRAY
3603: PPUSH
3604: LD_INT 45
3606: PPUSH
3607: LD_INT 5
3609: PPUSH
3610: CALL_OW 297
3614: PUSH
3615: LD_INT 10
3617: LESS
3618: IFFALSE 3505
// end ;
3620: PPOPN 1
3622: END
// every 0 0$02 trigger GetDistUnits ( JMM , Bobby ) < 9 do
3623: LD_EXP 15
3627: PPUSH
3628: LD_EXP 16
3632: PPUSH
3633: CALL_OW 296
3637: PUSH
3638: LD_INT 9
3640: LESS
3641: IFFALSE 4092
3643: GO 3645
3645: DISABLE
// begin ComWalk ( Bobby ) ;
3646: LD_EXP 16
3650: PPUSH
3651: CALL_OW 138
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3655: LD_EXP 16
3659: PPUSH
3660: LD_EXP 15
3664: PPUSH
3665: CALL_OW 250
3669: PPUSH
3670: LD_EXP 15
3674: PPUSH
3675: CALL_OW 251
3679: PPUSH
3680: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
3684: LD_INT 35
3686: PPUSH
3687: CALL_OW 67
// until See ( 4 , JMM ) ;
3691: LD_INT 4
3693: PPUSH
3694: LD_EXP 15
3698: PPUSH
3699: CALL_OW 292
3703: IFFALSE 3684
// InGameOn ;
3705: CALL_OW 8
// ComTurnUnit ( JMM , Bobby ) ;
3709: LD_EXP 15
3713: PPUSH
3714: LD_EXP 16
3718: PPUSH
3719: CALL_OW 119
// if cyrus_in_squad and IsOk ( Cyrus ) and GetDistUnits ( JMM , Cyrus ) < 10 then
3723: LD_EXP 7
3727: PUSH
3728: LD_EXP 17
3732: PPUSH
3733: CALL_OW 302
3737: AND
3738: PUSH
3739: LD_EXP 15
3743: PPUSH
3744: LD_EXP 17
3748: PPUSH
3749: CALL_OW 296
3753: PUSH
3754: LD_INT 10
3756: LESS
3757: AND
3758: IFFALSE 3803
// begin ComMoveXY ( Cyrus , GetX ( JMM ) , GetY ( JMM ) ) ;
3760: LD_EXP 17
3764: PPUSH
3765: LD_EXP 15
3769: PPUSH
3770: CALL_OW 250
3774: PPUSH
3775: LD_EXP 15
3779: PPUSH
3780: CALL_OW 251
3784: PPUSH
3785: CALL_OW 111
// AddComTurnUnit ( Cyrus , Bobby ) ;
3789: LD_EXP 17
3793: PPUSH
3794: LD_EXP 16
3798: PPUSH
3799: CALL_OW 179
// end ; Say ( JMM , D2-JMM-1 ) ;
3803: LD_EXP 15
3807: PPUSH
3808: LD_STRING D2-JMM-1
3810: PPUSH
3811: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3815: LD_INT 10
3817: PPUSH
3818: CALL_OW 67
// ComTurnUnit ( Bobby , JMM ) ;
3822: LD_EXP 16
3826: PPUSH
3827: LD_EXP 15
3831: PPUSH
3832: CALL_OW 119
// Say ( Bobby , D2-Bobby-1 ) ;
3836: LD_EXP 16
3840: PPUSH
3841: LD_STRING D2-Bobby-1
3843: PPUSH
3844: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
3848: LD_EXP 15
3852: PPUSH
3853: LD_STRING D2-JMM-2
3855: PPUSH
3856: CALL_OW 88
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
3860: LD_EXP 16
3864: PPUSH
3865: LD_EXP 15
3869: PPUSH
3870: CALL_OW 250
3874: PPUSH
3875: LD_EXP 15
3879: PPUSH
3880: CALL_OW 251
3884: PPUSH
3885: CALL_OW 111
// Say ( Bobby , D2-Bobby-2 ) ;
3889: LD_EXP 16
3893: PPUSH
3894: LD_STRING D2-Bobby-2
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
3901: LD_EXP 15
3905: PPUSH
3906: LD_STRING D2-JMM-3
3908: PPUSH
3909: CALL_OW 88
// ComTurnUnit ( Bobby , JMM ) ;
3913: LD_EXP 16
3917: PPUSH
3918: LD_EXP 15
3922: PPUSH
3923: CALL_OW 119
// Say ( Bobby , D2-Bobby-3 ) ;
3927: LD_EXP 16
3931: PPUSH
3932: LD_STRING D2-Bobby-3
3934: PPUSH
3935: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
3939: LD_EXP 15
3943: PPUSH
3944: LD_STRING D2-JMM-4
3946: PPUSH
3947: CALL_OW 88
// Say ( Bobby , D2-Bobby-4 ) ;
3951: LD_EXP 16
3955: PPUSH
3956: LD_STRING D2-Bobby-4
3958: PPUSH
3959: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
3963: LD_EXP 15
3967: PPUSH
3968: LD_STRING D2-JMM-5
3970: PPUSH
3971: CALL_OW 88
// Say ( Bobby , D2-Bobby-5 ) ;
3975: LD_EXP 16
3979: PPUSH
3980: LD_STRING D2-Bobby-5
3982: PPUSH
3983: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3987: LD_EXP 15
3991: PPUSH
3992: LD_STRING D2-JMM-6
3994: PPUSH
3995: CALL_OW 88
// if not powell_contact then
3999: LD_EXP 5
4003: NOT
4004: IFFALSE 4030
// begin Say ( Bobby , D2-Bobby-6 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING D2-Bobby-6
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
4018: LD_EXP 15
4022: PPUSH
4023: LD_STRING D2-JMM-7
4025: PPUSH
4026: CALL_OW 88
// end ; InGameOff ;
4030: CALL_OW 9
// SetSide ( Bobby , 1 ) ;
4034: LD_EXP 16
4038: PPUSH
4039: LD_INT 1
4041: PPUSH
4042: CALL_OW 235
// ComFree ( [ JMM , Bobby ] ) ;
4046: LD_EXP 15
4050: PUSH
4051: LD_EXP 16
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 139
// bobby_in_squad := true ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_INT 1
4071: ST_TO_ADDR
// if powell_contact and not cyrus_in_squad then
4072: LD_EXP 5
4076: PUSH
4077: LD_EXP 7
4081: NOT
4082: AND
4083: IFFALSE 4092
// ChangeMissionObjectives ( M2b ) ;
4085: LD_STRING M2b
4087: PPUSH
4088: CALL_OW 337
// end ;
4092: END
// every 0 0$45 trigger active_russian_dialog and not bobby_in_squad do
4093: LD_EXP 3
4097: PUSH
4098: LD_EXP 4
4102: NOT
4103: AND
4104: IFFALSE 4124
4106: GO 4108
4108: DISABLE
// ComMoveXY ( Bobby , 75 , 83 ) ;
4109: LD_EXP 16
4113: PPUSH
4114: LD_INT 75
4116: PPUSH
4117: LD_INT 83
4119: PPUSH
4120: CALL_OW 111
4124: END
// every 0 0$10 trigger cyrus_in_squad and not bobby_in_squad do
4125: LD_EXP 7
4129: PUSH
4130: LD_EXP 4
4134: NOT
4135: AND
4136: IFFALSE 4165
4138: GO 4140
4140: DISABLE
// begin ComMoveXY ( Bobby , 105 , 97 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 105
4148: PPUSH
4149: LD_INT 97
4151: PPUSH
4152: CALL_OW 111
// AddComCrawl ( Bobby ) ;
4156: LD_EXP 16
4160: PPUSH
4161: CALL_OW 197
// end ;
4165: END
// every 0 0$01 trigger IsInArea ( JMM , obstacle_area ) and GetDistUnits ( JMM , Bobby ) < 7 and bobby_in_squad do
4166: LD_EXP 15
4170: PPUSH
4171: LD_INT 6
4173: PPUSH
4174: CALL_OW 308
4178: PUSH
4179: LD_EXP 15
4183: PPUSH
4184: LD_EXP 16
4188: PPUSH
4189: CALL_OW 296
4193: PUSH
4194: LD_INT 7
4196: LESS
4197: AND
4198: PUSH
4199: LD_EXP 4
4203: AND
4204: IFFALSE 4251
4206: GO 4208
4208: DISABLE
// begin ComHold ( [ JMM , Bobby ] ) ;
4209: LD_EXP 15
4213: PUSH
4214: LD_EXP 16
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PPUSH
4223: CALL_OW 140
// Say ( JMM , D2a-JMM-1 ) ;
4227: LD_EXP 15
4231: PPUSH
4232: LD_STRING D2a-JMM-1
4234: PPUSH
4235: CALL_OW 88
// Say ( Bobby , D2a-Bobby-1 ) ;
4239: LD_EXP 16
4243: PPUSH
4244: LD_STRING D2a-Bobby-1
4246: PPUSH
4247: CALL_OW 88
// end ;
4251: END
// every 0 0$50 trigger active_russian_dialog and not See ( 3 , JMM ) do
4252: LD_EXP 3
4256: PUSH
4257: LD_INT 3
4259: PPUSH
4260: LD_EXP 15
4264: PPUSH
4265: CALL_OW 292
4269: NOT
4270: AND
4271: IFFALSE 4447
4273: GO 4275
4275: DISABLE
// begin Wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
4276: LD_INT 350
4278: PPUSH
4279: LD_INT 700
4281: PPUSH
4282: CALL_OW 12
4286: PPUSH
4287: CALL_OW 67
// InGameOn ;
4291: CALL_OW 8
// DialogueOn ;
4295: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
4299: LD_EXP 18
4303: PPUSH
4304: LD_STRING D3-Pow-1
4306: PPUSH
4307: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
4311: LD_EXP 15
4315: PPUSH
4316: LD_STRING D3-JMM-1
4318: PPUSH
4319: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
4323: LD_EXP 18
4327: PPUSH
4328: LD_STRING D3-Pow-2
4330: PPUSH
4331: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
4335: LD_EXP 15
4339: PPUSH
4340: LD_STRING D3-JMM-2
4342: PPUSH
4343: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
4347: LD_EXP 18
4351: PPUSH
4352: LD_STRING D3-Pow-3
4354: PPUSH
4355: CALL_OW 94
// DialogueOff ;
4359: CALL_OW 7
// InGameOff ;
4363: CALL_OW 9
// powell_contact := true ;
4367: LD_ADDR_EXP 5
4371: PUSH
4372: LD_INT 1
4374: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
4375: LD_INT 10
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL_OW 424
// uc_side := 4 ;
4385: LD_ADDR_OWVAR 20
4389: PUSH
4390: LD_INT 4
4392: ST_TO_ADDR
// uc_nation := 1 ;
4393: LD_ADDR_OWVAR 21
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
4401: LD_ADDR_EXP 18
4405: PUSH
4406: LD_STRING Powell
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL 182 0 2
4416: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
4417: LD_STRING M2
4419: PPUSH
4420: CALL_OW 337
// if not bobby_in_squad then
4424: LD_EXP 4
4428: NOT
4429: IFFALSE 4440
// ChangeMissionObjectives ( M2a ) else
4431: LD_STRING M2a
4433: PPUSH
4434: CALL_OW 337
4438: GO 4447
// ChangeMissionObjectives ( M2b ) ;
4440: LD_STRING M2b
4442: PPUSH
4443: CALL_OW 337
// end ;
4447: END
// every 0 0$01 trigger IsInArea ( JMM , fakeArea ) do
4448: LD_EXP 15
4452: PPUSH
4453: LD_INT 7
4455: PPUSH
4456: CALL_OW 308
4460: IFFALSE 4595
4462: GO 4464
4464: DISABLE
// begin DialogueOn ;
4465: CALL_OW 6
// SayRadio ( fakePokryshkin , D4-Rus3-1 ) ;
4469: LD_EXP 19
4473: PPUSH
4474: LD_STRING D4-Rus3-1
4476: PPUSH
4477: CALL_OW 94
// DialogueOff ;
4481: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
4485: LD_STRING M3a
4487: PPUSH
4488: CALL_OW 337
// SetAreaMapShow ( fakeEnd , 1 ) ;
4492: LD_INT 11
4494: PPUSH
4495: LD_INT 1
4497: PPUSH
4498: CALL_OW 424
// Wait ( 0 0$02 ) ;
4502: LD_INT 70
4504: PPUSH
4505: CALL_OW 67
// DialogueOn ;
4509: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
4513: LD_EXP 18
4517: PPUSH
4518: LD_STRING D4-Pow-1
4520: PPUSH
4521: CALL_OW 94
// DialogueOff ;
4525: CALL_OW 7
// ChangeMissionObjectives ( M3b ) ;
4529: LD_STRING M3b
4531: PPUSH
4532: CALL_OW 337
// case Query ( Q1 ) of 1 :
4536: LD_STRING Q1
4538: PPUSH
4539: CALL_OW 97
4543: PUSH
4544: LD_INT 1
4546: DOUBLE
4547: EQUAL
4548: IFTRUE 4552
4550: GO 4583
4552: POP
// begin macmilan_use_radio := true ;
4553: LD_ADDR_EXP 6
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// DialogueOn ;
4561: CALL_OW 6
// Say ( JMM , D4a-JMM-1 ) ;
4565: LD_EXP 15
4569: PPUSH
4570: LD_STRING D4a-JMM-1
4572: PPUSH
4573: CALL_OW 88
// DialogueOff ;
4577: CALL_OW 7
// end ; 2 :
4581: GO 4595
4583: LD_INT 2
4585: DOUBLE
4586: EQUAL
4587: IFTRUE 4591
4589: GO 4594
4591: POP
// ; end ;
4592: GO 4595
4594: POP
// end ;
4595: END
// every 0 0$02 trigger GetDistUnits ( JMM , Cyrus ) < 8 do
4596: LD_EXP 15
4600: PPUSH
4601: LD_EXP 17
4605: PPUSH
4606: CALL_OW 296
4610: PUSH
4611: LD_INT 8
4613: LESS
4614: IFFALSE 4865
4616: GO 4618
4618: DISABLE
// begin InGameOn ;
4619: CALL_OW 8
// ComMoveXY ( JMM , GetX ( Cyrus ) , GetY ( Cyrus ) ) ;
4623: LD_EXP 15
4627: PPUSH
4628: LD_EXP 17
4632: PPUSH
4633: CALL_OW 250
4637: PPUSH
4638: LD_EXP 17
4642: PPUSH
4643: CALL_OW 251
4647: PPUSH
4648: CALL_OW 111
// if IsOk ( Bobby ) and bobby_in_squad then
4652: LD_EXP 16
4656: PPUSH
4657: CALL_OW 302
4661: PUSH
4662: LD_EXP 4
4666: AND
4667: IFFALSE 4698
// ComMoveXY ( Bobby , GetX ( JMM ) , GetY ( JMM ) ) ;
4669: LD_EXP 16
4673: PPUSH
4674: LD_EXP 15
4678: PPUSH
4679: CALL_OW 250
4683: PPUSH
4684: LD_EXP 15
4688: PPUSH
4689: CALL_OW 251
4693: PPUSH
4694: CALL_OW 111
// Say ( JMM , D5-JMM-1 ) ;
4698: LD_EXP 15
4702: PPUSH
4703: LD_STRING D5-JMM-1
4705: PPUSH
4706: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4710: LD_INT 10
4712: PPUSH
4713: CALL_OW 67
// ComTurnUnit ( JMM , Cyrus ) ;
4717: LD_EXP 15
4721: PPUSH
4722: LD_EXP 17
4726: PPUSH
4727: CALL_OW 119
// ComWalk ( Cyrus ) ;
4731: LD_EXP 17
4735: PPUSH
4736: CALL_OW 138
// ComTurnUnit ( Cyrus , JMM ) ;
4740: LD_EXP 17
4744: PPUSH
4745: LD_EXP 15
4749: PPUSH
4750: CALL_OW 119
// Say ( Cyrus , D5-Cyrus-1 ) ;
4754: LD_EXP 17
4758: PPUSH
4759: LD_STRING D5-Cyrus-1
4761: PPUSH
4762: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
4766: LD_EXP 16
4770: PPUSH
4771: CALL_OW 302
4775: PUSH
4776: LD_EXP 4
4780: AND
4781: IFFALSE 4821
// begin ComTurnUnit ( Bobby , Cyrus ) ;
4783: LD_EXP 16
4787: PPUSH
4788: LD_EXP 17
4792: PPUSH
4793: CALL_OW 119
// Say ( Bobby , D5-Bobby-1 ) ;
4797: LD_EXP 16
4801: PPUSH
4802: LD_STRING D5-Bobby-1
4804: PPUSH
4805: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
4809: LD_EXP 15
4813: PPUSH
4814: LD_STRING D5-JMM-2
4816: PPUSH
4817: CALL_OW 88
// end ; InGameOff ;
4821: CALL_OW 9
// cyrus_in_squad := true ;
4825: LD_ADDR_EXP 7
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// SetSide ( Cyrus , 1 ) ;
4833: LD_EXP 17
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 235
// if powell_contact and not bobby_in_squad then
4845: LD_EXP 5
4849: PUSH
4850: LD_EXP 4
4854: NOT
4855: AND
4856: IFFALSE 4865
// ChangeMissionObjectives ( M2b ) ;
4858: LD_STRING M2b
4860: PPUSH
4861: CALL_OW 337
// end ;
4865: END
// every 0 0$01 trigger bobby_in_squad and cyrus_in_squad do
4866: LD_EXP 4
4870: PUSH
4871: LD_EXP 7
4875: AND
4876: IFFALSE 4888
4878: GO 4880
4880: DISABLE
// ChangeMissionObjectives ( M2c ) ;
4881: LD_STRING M2c
4883: PPUSH
4884: CALL_OW 337
4888: END
// every 0 0$01 trigger IsInArea ( JMM , trap ) do
4889: LD_EXP 15
4893: PPUSH
4894: LD_INT 8
4896: PPUSH
4897: CALL_OW 308
4901: IFFALSE 4953
4903: GO 4905
4905: DISABLE
// begin macmilan_in_trap := true ;
4906: LD_ADDR_EXP 9
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4914: LD_INT 35
4916: PPUSH
4917: CALL_OW 67
// DialogueOn ;
4921: CALL_OW 6
// Say ( Pokryshkin , D5-Pok-1 ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_STRING D5-Pok-1
4932: PPUSH
4933: CALL_OW 88
// DialogueOff ;
4937: CALL_OW 7
// Say ( JMM , D4b-JMM-1 ) ;
4941: LD_EXP 15
4945: PPUSH
4946: LD_STRING D4b-JMM-1
4948: PPUSH
4949: CALL_OW 88
// end ;
4953: END
// every 0 0$01 trigger GetDistUnits ( JMM , russian_meta_guards [ russian_meta_guards ] ) < 12 or GetLives ( russian_meta_guards [ russian_meta_guards ] ) < 999 do var i , hp ;
4954: LD_EXP 15
4958: PPUSH
4959: LD_EXP 23
4963: PUSH
4964: LD_EXP 23
4968: ARRAY
4969: PPUSH
4970: CALL_OW 296
4974: PUSH
4975: LD_INT 12
4977: LESS
4978: PUSH
4979: LD_EXP 23
4983: PUSH
4984: LD_EXP 23
4988: ARRAY
4989: PPUSH
4990: CALL_OW 256
4994: PUSH
4995: LD_INT 999
4997: LESS
4998: OR
4999: IFFALSE 5229
5001: GO 5003
5003: DISABLE
5004: LD_INT 0
5006: PPUSH
5007: PPUSH
// begin hp := [ 300 , 250 , 200 ] [ Difficulty ] ;
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 300
5015: PUSH
5016: LD_INT 250
5018: PUSH
5019: LD_INT 200
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: PUSH
5027: LD_OWVAR 67
5031: ARRAY
5032: ST_TO_ADDR
// for i in russian_meta_guards do
5033: LD_ADDR_VAR 0 1
5037: PUSH
5038: LD_EXP 23
5042: PUSH
5043: FOR_IN
5044: IFFALSE 5084
// if IsOk ( i ) then
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5082
// SetLives ( i , GetLives ( i ) - hp ) ;
5057: LD_VAR 0 1
5061: PPUSH
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 256
5071: PUSH
5072: LD_VAR 0 2
5076: MINUS
5077: PPUSH
5078: CALL_OW 234
5082: GO 5043
5084: POP
5085: POP
// DialogueOn ;
5086: CALL_OW 6
// Say ( russian_meta_guards [ russian_meta_guards ] , D6-FRus1-1 ) ;
5090: LD_EXP 23
5094: PUSH
5095: LD_EXP 23
5099: ARRAY
5100: PPUSH
5101: LD_STRING D6-FRus1-1
5103: PPUSH
5104: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5108: LD_EXP 15
5112: PPUSH
5113: LD_STRING D6-JMM-1
5115: PPUSH
5116: CALL_OW 88
// if IsOk ( Cyrus ) and cyrus_in_squad then
5120: LD_EXP 17
5124: PPUSH
5125: CALL_OW 302
5129: PUSH
5130: LD_EXP 7
5134: AND
5135: IFFALSE 5149
// Say ( Cyrus , D6-Cyrus-1 ) ;
5137: LD_EXP 17
5141: PPUSH
5142: LD_STRING D6-Cyrus-1
5144: PPUSH
5145: CALL_OW 88
// if IsOk ( Bobby ) and bobby_in_squad then
5149: LD_EXP 16
5153: PPUSH
5154: CALL_OW 302
5158: PUSH
5159: LD_EXP 4
5163: AND
5164: IFFALSE 5178
// Say ( Bobby , D6-Bobby-1 ) ;
5166: LD_EXP 16
5170: PPUSH
5171: LD_STRING D6-Bobby-1
5173: PPUSH
5174: CALL_OW 88
// DialogueOff ;
5178: CALL_OW 7
// Wait ( [ 0 0$04 , 0 0$03 , 0 0$02 ] [ Difficulty ] ) ;
5182: LD_INT 140
5184: PUSH
5185: LD_INT 105
5187: PUSH
5188: LD_INT 70
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: PUSH
5196: LD_OWVAR 67
5200: ARRAY
5201: PPUSH
5202: CALL_OW 67
// meta_action := true ;
5206: LD_ADDR_EXP 10
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// ComAgressiveMove ( russian_meta_guards , 94 , 8 ) ;
5214: LD_EXP 23
5218: PPUSH
5219: LD_INT 94
5221: PPUSH
5222: LD_INT 8
5224: PPUSH
5225: CALL_OW 114
// end ;
5229: PPOPN 2
5231: END
// every 0 0$01 trigger GetDistUnitXY ( JMM , 93 , 1 ) < 5 and FilterAllUnits ( [ f_side , 1 ] ) > 1 do
5232: LD_EXP 15
5236: PPUSH
5237: LD_INT 93
5239: PPUSH
5240: LD_INT 1
5242: PPUSH
5243: CALL_OW 297
5247: PUSH
5248: LD_INT 5
5250: LESS
5251: PUSH
5252: LD_INT 22
5254: PUSH
5255: LD_INT 1
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: PUSH
5267: LD_INT 1
5269: GREATER
5270: AND
5271: IFFALSE 5288
5273: GO 5275
5275: DISABLE
// Say ( JMM , D6a-JMM-1 ) ;
5276: LD_EXP 15
5280: PPUSH
5281: LD_STRING D6a-JMM-1
5283: PPUSH
5284: CALL_OW 88
5288: END
// every 0 0$01 trigger IsDying ( JMM ) or IsDead ( JMM ) do
5289: LD_EXP 15
5293: PPUSH
5294: CALL_OW 303
5298: PUSH
5299: LD_EXP 15
5303: PPUSH
5304: CALL_OW 301
5308: OR
5309: IFFALSE 5321
5311: GO 5313
5313: DISABLE
// YouLost ( JMM ) ;
5314: LD_STRING JMM
5316: PPUSH
5317: CALL_OW 104
5321: END
// every 0 0$01 trigger IsInArea ( Bobby , exitArea ) do
5322: LD_EXP 16
5326: PPUSH
5327: LD_INT 10
5329: PPUSH
5330: CALL_OW 308
5334: IFFALSE 5383
5336: GO 5338
5338: DISABLE
// begin bobby_saved := true ;
5339: LD_ADDR_EXP 12
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// SaveVariable ( GetLives ( Bobby ) , 01_BobbyLifePoints_1 ) ;
5347: LD_EXP 16
5351: PPUSH
5352: CALL_OW 256
5356: PPUSH
5357: LD_STRING 01_BobbyLifePoints_1
5359: PPUSH
5360: CALL_OW 39
// RemoveUnit ( Bobby ) ;
5364: LD_EXP 16
5368: PPUSH
5369: CALL_OW 64
// AddMedal ( Bobby , 1 ) ;
5373: LD_STRING Bobby
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: CALL_OW 101
// end ;
5383: END
// every 0 0$01 trigger IsInArea ( Cyrus , exitArea ) do
5384: LD_EXP 17
5388: PPUSH
5389: LD_INT 10
5391: PPUSH
5392: CALL_OW 308
5396: IFFALSE 5445
5398: GO 5400
5400: DISABLE
// begin cyrus_saved := true ;
5401: LD_ADDR_EXP 13
5405: PUSH
5406: LD_INT 1
5408: ST_TO_ADDR
// SaveVariable ( GetLives ( Cyrus ) , 01_CyrusLifePoints_1 ) ;
5409: LD_EXP 17
5413: PPUSH
5414: CALL_OW 256
5418: PPUSH
5419: LD_STRING 01_CyrusLifePoints_1
5421: PPUSH
5422: CALL_OW 39
// RemoveUnit ( Cyrus ) ;
5426: LD_EXP 17
5430: PPUSH
5431: CALL_OW 64
// AddMedal ( Cyrus , 1 ) ;
5435: LD_STRING Cyrus
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 101
// end ;
5445: END
// every 0 0$01 trigger IsInArea ( JMM , exitArea ) do var i , to_reward , wait_for_them ;
5446: LD_EXP 15
5450: PPUSH
5451: LD_INT 10
5453: PPUSH
5454: CALL_OW 308
5458: IFFALSE 5967
5460: GO 5462
5462: DISABLE
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
// begin if ( not cyrus_saved and cyrus_in_squad and IsOk ( Cyrus ) ) or ( not bobby_saved and bobby_in_squad and IsOk ( Bobby ) ) then
5468: LD_EXP 13
5472: NOT
5473: PUSH
5474: LD_EXP 7
5478: AND
5479: PUSH
5480: LD_EXP 17
5484: PPUSH
5485: CALL_OW 302
5489: AND
5490: PUSH
5491: LD_EXP 12
5495: NOT
5496: PUSH
5497: LD_EXP 4
5501: AND
5502: PUSH
5503: LD_EXP 16
5507: PPUSH
5508: CALL_OW 302
5512: AND
5513: OR
5514: IFFALSE 5555
// case Query ( Q2 ) of 1 :
5516: LD_STRING Q2
5518: PPUSH
5519: CALL_OW 97
5523: PUSH
5524: LD_INT 1
5526: DOUBLE
5527: EQUAL
5528: IFTRUE 5532
5530: GO 5543
5532: POP
// wait_for_them := true ; 2 :
5533: LD_ADDR_VAR 0 3
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
5541: GO 5555
5543: LD_INT 2
5545: DOUBLE
5546: EQUAL
5547: IFTRUE 5551
5549: GO 5554
5551: POP
// ; end ;
5552: GO 5555
5554: POP
// if wait_for_them then
5555: LD_VAR 0 3
5559: IFFALSE 5672
// repeat wait ( 0 0$01 ) ;
5561: LD_INT 35
5563: PPUSH
5564: CALL_OW 67
// until ( cyrus_saved and bobby_saved ) or ( cyrus_saved and ( not bobby_in_squad or IsDying ( Bobby ) or IsDead ( Bobby ) ) ) or ( bobby_saved and ( not cyrus_in_squad or IsDying ( Cyrus ) or IsDead ( Cyrus ) ) ) or ( IsDead ( Bobby ) and IsDead ( Cyrus ) ) ;
5568: LD_EXP 13
5572: PUSH
5573: LD_EXP 12
5577: AND
5578: PUSH
5579: LD_EXP 13
5583: PUSH
5584: LD_EXP 4
5588: NOT
5589: PUSH
5590: LD_EXP 16
5594: PPUSH
5595: CALL_OW 303
5599: OR
5600: PUSH
5601: LD_EXP 16
5605: PPUSH
5606: CALL_OW 301
5610: OR
5611: AND
5612: OR
5613: PUSH
5614: LD_EXP 12
5618: PUSH
5619: LD_EXP 7
5623: NOT
5624: PUSH
5625: LD_EXP 17
5629: PPUSH
5630: CALL_OW 303
5634: OR
5635: PUSH
5636: LD_EXP 17
5640: PPUSH
5641: CALL_OW 301
5645: OR
5646: AND
5647: OR
5648: PUSH
5649: LD_EXP 16
5653: PPUSH
5654: CALL_OW 301
5658: PUSH
5659: LD_EXP 17
5663: PPUSH
5664: CALL_OW 301
5668: AND
5669: OR
5670: IFFALSE 5561
// SaveVariable ( GetLives ( JMM ) , 01_JMMLifePoints_1 ) ;
5672: LD_EXP 15
5676: PPUSH
5677: CALL_OW 256
5681: PPUSH
5682: LD_STRING 01_JMMLifePoints_1
5684: PPUSH
5685: CALL_OW 39
// RemoveUnit ( JMM ) ;
5689: LD_EXP 15
5693: PPUSH
5694: CALL_OW 64
// to_reward := [ JMM ] ;
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: LD_EXP 15
5707: PUSH
5708: EMPTY
5709: LIST
5710: ST_TO_ADDR
// if bobby_saved then
5711: LD_EXP 12
5715: IFFALSE 5733
// to_reward := to_reward ^ Bobby ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_EXP 16
5731: ADD
5732: ST_TO_ADDR
// if cyrus_saved then
5733: LD_EXP 13
5737: IFFALSE 5755
// to_reward := to_reward ^ Cyrus ;
5739: LD_ADDR_VAR 0 2
5743: PUSH
5744: LD_VAR 0 2
5748: PUSH
5749: LD_EXP 17
5753: ADD
5754: ST_TO_ADDR
// AddMedal ( JMM , 1 ) ;
5755: LD_STRING JMM
5757: PPUSH
5758: LD_INT 1
5760: PPUSH
5761: CALL_OW 101
// if not bobby_in_squad then
5765: LD_EXP 4
5769: NOT
5770: IFFALSE 5783
// AddMedal ( Bobby , - 1 ) ;
5772: LD_STRING Bobby
5774: PPUSH
5775: LD_INT 1
5777: NEG
5778: PPUSH
5779: CALL_OW 101
// if not bobby_saved and ( IsDying ( Bobby ) or IsDead ( Bobby ) ) then
5783: LD_EXP 12
5787: NOT
5788: PUSH
5789: LD_EXP 16
5793: PPUSH
5794: CALL_OW 303
5798: PUSH
5799: LD_EXP 16
5803: PPUSH
5804: CALL_OW 301
5808: OR
5809: AND
5810: IFFALSE 5823
// AddMedal ( Bobby , - 2 ) ;
5812: LD_STRING Bobby
5814: PPUSH
5815: LD_INT 2
5817: NEG
5818: PPUSH
5819: CALL_OW 101
// if not cyrus_in_squad then
5823: LD_EXP 7
5827: NOT
5828: IFFALSE 5841
// AddMedal ( Cyrus , - 1 ) ;
5830: LD_STRING Cyrus
5832: PPUSH
5833: LD_INT 1
5835: NEG
5836: PPUSH
5837: CALL_OW 101
// if not cyrus_saved and ( IsDying ( Cyrus ) or IsDead ( Cyrus ) ) then
5841: LD_EXP 13
5845: NOT
5846: PUSH
5847: LD_EXP 17
5851: PPUSH
5852: CALL_OW 303
5856: PUSH
5857: LD_EXP 17
5861: PPUSH
5862: CALL_OW 301
5866: OR
5867: AND
5868: IFFALSE 5881
// AddMedal ( Cyrus , - 2 ) ;
5870: LD_STRING Cyrus
5872: PPUSH
5873: LD_INT 2
5875: NEG
5876: PPUSH
5877: CALL_OW 101
// GiveMedals ( MAIN ) ;
5881: LD_STRING MAIN
5883: PPUSH
5884: CALL_OW 102
// RewardPeople ( to_reward ) ;
5888: LD_VAR 0 2
5892: PPUSH
5893: CALL_OW 43
// if bobby_saved then
5897: LD_EXP 12
5901: IFFALSE 5921
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5903: LD_EXP 16
5907: PPUSH
5908: LD_EXP 2
5912: PUSH
5913: LD_STRING Bobby
5915: STR
5916: PPUSH
5917: CALL_OW 38
// if cyrus_saved then
5921: LD_EXP 13
5925: IFFALSE 5945
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5927: LD_EXP 17
5931: PPUSH
5932: LD_EXP 2
5936: PUSH
5937: LD_STRING Cyrus
5939: STR
5940: PPUSH
5941: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5945: LD_EXP 15
5949: PPUSH
5950: LD_EXP 2
5954: PUSH
5955: LD_STRING JMM
5957: STR
5958: PPUSH
5959: CALL_OW 38
// YouWin ;
5963: CALL_OW 103
// end ;
5967: PPOPN 3
5969: END
