// export Stevens , Baker , Gordon , Peter , DeltaDoctor , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13Omega ; export Burlak , burlakVeh ; export omegaHeroes ; export ruAttacksCounter ; export amSciStatus ; export russianTPUnits ; export escapeAvalaible ; export StevensStatus , BurlakStatus ; export unitLost ; export allUnitsLengh ; export mission_prefix ; export siberiteRocketStatus ; export JMMGirl ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// ChangeSideFog ( 4 , 1 ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL_OW 343
// PrepareNature ( 4 , 3 , 3 , 3 , 2 , 0 , 0 , natureArea , 0 ) ;
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 3
  26: PPUSH
  27: LD_INT 3
  29: PPUSH
  30: LD_INT 2
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: LD_INT 17
  41: PPUSH
  42: LD_INT 0
  44: PPUSH
  45: CALL 7542 0 9
// SetBName ( amheaddepo , lambda ) ;
  49: LD_INT 295
  51: PPUSH
  52: LD_STRING lambda
  54: PPUSH
  55: CALL_OW 500
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
  59: LD_ADDR_EXP 28
  63: PUSH
  64: LD_STRING 13_StevensStatus_1
  66: PPUSH
  67: LD_INT 0
  69: PPUSH
  70: CALL_OW 30
  74: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
  75: LD_ADDR_EXP 29
  79: PUSH
  80: LD_STRING 13_BurlakStatus_1
  82: PPUSH
  83: LD_INT 0
  85: PPUSH
  86: CALL_OW 30
  90: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 0 ) ;
  91: LD_ADDR_EXP 34
  95: PUSH
  96: LD_STRING 14_JMMGirl_1
  98: PPUSH
  99: LD_INT 0
 101: PPUSH
 102: CALL_OW 30
 106: ST_TO_ADDR
// omegaHeroes = [ ] ;
 107: LD_ADDR_EXP 23
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// russianTPUnits = [ ] ;
 114: LD_ADDR_EXP 26
 118: PUSH
 119: EMPTY
 120: ST_TO_ADDR
// ruAttacksCounter = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// escapeAvalaible = 0 ;
 129: LD_ADDR_EXP 27
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allUnitsLengh = 0 ;
 137: LD_ADDR_EXP 31
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// siberiteRocketStatus = 0 ;
 145: LD_ADDR_EXP 33
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// unitLost = 0 ;
 153: LD_ADDR_EXP 30
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// amSciStatus = 1 ;
 161: LD_ADDR_EXP 25
 165: PUSH
 166: LD_INT 1
 168: ST_TO_ADDR
// mission_prefix = 15_ ;
 169: LD_ADDR_EXP 32
 173: PUSH
 174: LD_STRING 15_
 176: ST_TO_ADDR
// debugMode = 0 ;
 177: LD_ADDR_EXP 35
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , 1 , - 32972 ) ;
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 1
 190: PPUSH
 191: LD_INT 1
 193: PPUSH
 194: LD_INT 32972
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
 202: LD_INT 1
 204: PPUSH
 205: LD_INT 1
 207: PPUSH
 208: LD_INT 1
 210: PPUSH
 211: CALL_OW 331
// PrepareOmegaTeam ;
 215: CALL 541 0 0
// SetDifficulty ;
 219: CALL 3539 0 0
// end ;
 223: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 224: LD_EXP 35
 228: PUSH
 229: LD_INT 1
 231: EQUAL
 232: IFFALSE 538
 234: GO 236
 236: DISABLE
 237: LD_INT 0
 239: PPUSH
// begin enable ;
 240: ENABLE
// fogoff ( true ) ;
 241: LD_INT 1
 243: PPUSH
 244: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 248: LD_ADDR_VAR 0 1
 252: PUSH
 253: LD_INT 22
 255: PUSH
 256: LD_INT 1
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: PUSH
 263: LD_INT 21
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PPUSH
 277: CALL_OW 69
 281: PUSH
 282: FOR_IN
 283: IFFALSE 299
// SetLives ( i , 1000 ) ;
 285: LD_VAR 0 1
 289: PPUSH
 290: LD_INT 1000
 292: PPUSH
 293: CALL_OW 234
 297: GO 282
 299: POP
 300: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 301: LD_ADDR_VAR 0 1
 305: PUSH
 306: LD_INT 22
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 2
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 30
 331: PUSH
 332: LD_INT 1
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: FOR_IN
 354: IFFALSE 378
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 356: LD_VAR 0 1
 360: PPUSH
 361: CALL_OW 274
 365: PPUSH
 366: LD_INT 1
 368: PPUSH
 369: LD_INT 9999
 371: PPUSH
 372: CALL_OW 277
 376: GO 353
 378: POP
 379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 380: LD_ADDR_VAR 0 1
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 2
 397: PUSH
 398: LD_INT 30
 400: PUSH
 401: LD_INT 0
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 30
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: LIST
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PPUSH
 427: CALL_OW 69
 431: PUSH
 432: FOR_IN
 433: IFFALSE 457
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 435: LD_VAR 0 1
 439: PPUSH
 440: CALL_OW 274
 444: PPUSH
 445: LD_INT 2
 447: PPUSH
 448: LD_INT 9999
 450: PPUSH
 451: CALL_OW 277
 455: GO 432
 457: POP
 458: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 459: LD_ADDR_VAR 0 1
 463: PUSH
 464: LD_INT 22
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 2
 476: PUSH
 477: LD_INT 30
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 30
 489: PUSH
 490: LD_INT 1
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PPUSH
 506: CALL_OW 69
 510: PUSH
 511: FOR_IN
 512: IFFALSE 536
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 514: LD_VAR 0 1
 518: PPUSH
 519: CALL_OW 274
 523: PPUSH
 524: LD_INT 3
 526: PPUSH
 527: LD_INT 9999
 529: PPUSH
 530: CALL_OW 277
 534: GO 511
 536: POP
 537: POP
// end ; end_of_file
 538: PPOPN 1
 540: END
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , un , mecha , avalaibleVehs , randBuild ; begin
 541: LD_INT 0
 543: PPUSH
 544: PPUSH
 545: PPUSH
 546: PPUSH
 547: PPUSH
 548: PPUSH
 549: PPUSH
 550: PPUSH
 551: PPUSH
// uc_side = 1 ;
 552: LD_ADDR_OWVAR 20
 556: PUSH
 557: LD_INT 1
 559: ST_TO_ADDR
// uc_nation := 0 ;
 560: LD_ADDR_OWVAR 21
 564: PUSH
 565: LD_INT 0
 567: ST_TO_ADDR
// for i = 1 to 5 do
 568: LD_ADDR_VAR 0 2
 572: PUSH
 573: DOUBLE
 574: LD_INT 1
 576: DEC
 577: ST_TO_ADDR
 578: LD_INT 5
 580: PUSH
 581: FOR_TO
 582: IFFALSE 630
// begin PrepareHuman ( false , class_apeman_engineer , 5 ) ;
 584: LD_INT 0
 586: PPUSH
 587: LD_INT 16
 589: PPUSH
 590: LD_INT 5
 592: PPUSH
 593: CALL_OW 380
// un := CreateHuman ;
 597: LD_ADDR_VAR 0 6
 601: PUSH
 602: CALL_OW 44
 606: ST_TO_ADDR
// PlaceUnitXYR ( un , 69 , 36 , 8 , false ) ;
 607: LD_VAR 0 6
 611: PPUSH
 612: LD_INT 69
 614: PPUSH
 615: LD_INT 36
 617: PPUSH
 618: LD_INT 8
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 50
// end ;
 628: GO 581
 630: POP
 631: POP
// uc_nation = 1 ;
 632: LD_ADDR_OWVAR 21
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// omegaVeh = [ ] ;
 640: LD_ADDR_VAR 0 3
 644: PUSH
 645: EMPTY
 646: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 647: LD_ADDR_EXP 19
 651: PUSH
 652: LD_STRING Powell
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: CALL 3230 0 2
 662: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
 663: LD_STRING 13s_Lisa
 665: PPUSH
 666: CALL_OW 28
 670: PUSH
 671: LD_INT 0
 673: EQUAL
 674: IFFALSE 689
// Lisa = PrepareUnitOmega ( Lisa ) ;
 676: LD_ADDR_EXP 6
 680: PUSH
 681: LD_STRING Lisa
 683: PPUSH
 684: CALL 3287 0 1
 688: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
 689: LD_STRING 13s_Donaldson
 691: PPUSH
 692: CALL_OW 28
 696: PUSH
 697: LD_INT 0
 699: EQUAL
 700: IFFALSE 715
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
 702: LD_ADDR_EXP 7
 706: PUSH
 707: LD_STRING Donaldson
 709: PPUSH
 710: CALL 3287 0 1
 714: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
 715: LD_STRING 13s_Bobby
 717: PPUSH
 718: CALL_OW 28
 722: PUSH
 723: LD_INT 0
 725: EQUAL
 726: IFFALSE 741
// Bobby = PrepareUnitOmega ( Bobby ) ;
 728: LD_ADDR_EXP 8
 732: PUSH
 733: LD_STRING Bobby
 735: PPUSH
 736: CALL 3287 0 1
 740: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
 741: LD_STRING 13s_Cyrus
 743: PPUSH
 744: CALL_OW 28
 748: PUSH
 749: LD_INT 0
 751: EQUAL
 752: IFFALSE 767
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_STRING Cyrus
 761: PPUSH
 762: CALL 3287 0 1
 766: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
 767: LD_STRING 13s_Denis
 769: PPUSH
 770: CALL_OW 28
 774: PUSH
 775: LD_INT 0
 777: EQUAL
 778: IFFALSE 793
// Denis = PrepareUnitOmega ( Denis ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Denis
 787: PPUSH
 788: CALL 3287 0 1
 792: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
 793: LD_STRING 13s_Brown
 795: PPUSH
 796: CALL_OW 28
 800: PUSH
 801: LD_INT 0
 803: EQUAL
 804: IFFALSE 819
// Brown = PrepareUnitOmega ( Brown ) ;
 806: LD_ADDR_EXP 11
 810: PUSH
 811: LD_STRING Brown
 813: PPUSH
 814: CALL 3287 0 1
 818: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
 819: LD_STRING 13s_Gladstone
 821: PPUSH
 822: CALL_OW 28
 826: PUSH
 827: LD_INT 0
 829: EQUAL
 830: IFFALSE 845
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
 832: LD_ADDR_EXP 12
 836: PUSH
 837: LD_STRING Gladstone
 839: PPUSH
 840: CALL 3287 0 1
 844: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
 845: LD_STRING 13s_Houten
 847: PPUSH
 848: CALL_OW 28
 852: PUSH
 853: LD_INT 0
 855: EQUAL
 856: IFFALSE 871
// Houten = PrepareUnitOmega ( Houten ) ;
 858: LD_ADDR_EXP 13
 862: PUSH
 863: LD_STRING Houten
 865: PPUSH
 866: CALL 3287 0 1
 870: ST_TO_ADDR
// if TestCharacters ( 13s_Cornel ) = false then
 871: LD_STRING 13s_Cornel
 873: PPUSH
 874: CALL_OW 28
 878: PUSH
 879: LD_INT 0
 881: EQUAL
 882: IFFALSE 897
// Cornell = PrepareUnitOmega ( Cornell ) ;
 884: LD_ADDR_EXP 14
 888: PUSH
 889: LD_STRING Cornell
 891: PPUSH
 892: CALL 3287 0 1
 896: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
 897: LD_STRING 13s_Gary
 899: PPUSH
 900: CALL_OW 28
 904: PUSH
 905: LD_INT 0
 907: EQUAL
 908: IFFALSE 923
// Gary = PrepareUnitOmega ( Gary ) ;
 910: LD_ADDR_EXP 15
 914: PUSH
 915: LD_STRING Gary
 917: PPUSH
 918: CALL 3287 0 1
 922: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
 923: LD_STRING 13s_Frank
 925: PPUSH
 926: CALL_OW 28
 930: PUSH
 931: LD_INT 0
 933: EQUAL
 934: IFFALSE 949
// Frank = PrepareUnitOmega ( Frank ) ;
 936: LD_ADDR_EXP 16
 940: PUSH
 941: LD_STRING Frank
 943: PPUSH
 944: CALL 3287 0 1
 948: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
 949: LD_STRING 13s_Kikuchi
 951: PPUSH
 952: CALL_OW 28
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 975
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
 962: LD_ADDR_EXP 17
 966: PUSH
 967: LD_STRING Kikuchi
 969: PPUSH
 970: CALL 3287 0 1
 974: ST_TO_ADDR
// if JMMGirl <> 3 then
 975: LD_EXP 34
 979: PUSH
 980: LD_INT 3
 982: NONEQUAL
 983: IFFALSE 1013
// begin Connie = PrepareUnit ( Coonie , false ) ;
 985: LD_ADDR_EXP 18
 989: PUSH
 990: LD_STRING Coonie
 992: PPUSH
 993: LD_INT 0
 995: PPUSH
 996: CALL 3230 0 2
1000: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , AmFab1 ) ;
1001: LD_EXP 18
1005: PPUSH
1006: LD_INT 51
1008: PPUSH
1009: CALL_OW 52
// end ; Gordon = NewCharacter ( Gordon ) ;
1013: LD_ADDR_EXP 3
1017: PUSH
1018: LD_STRING Gordon
1020: PPUSH
1021: CALL_OW 25
1025: ST_TO_ADDR
// PlaceUnitArea ( Gordon , GordonSpawn , false ) ;
1026: LD_EXP 3
1030: PPUSH
1031: LD_INT 3
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// ComTurnXY ( Gordon , 125 , 16 ) ;
1041: LD_EXP 3
1045: PPUSH
1046: LD_INT 125
1048: PPUSH
1049: LD_INT 16
1051: PPUSH
1052: CALL_OW 118
// hc_name = Peter McClain ;
1056: LD_ADDR_OWVAR 26
1060: PUSH
1061: LD_STRING Peter McClain
1063: ST_TO_ADDR
// hc_gallery =  ;
1064: LD_ADDR_OWVAR 33
1068: PUSH
1069: LD_STRING 
1071: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 10
1077: PPUSH
1078: CALL_OW 384
// Peter = CreateHuman ;
1082: LD_ADDR_EXP 4
1086: PUSH
1087: CALL_OW 44
1091: ST_TO_ADDR
// PlaceUnitArea ( Peter , PeterSpawn , false ) ;
1092: LD_EXP 4
1096: PPUSH
1097: LD_INT 4
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 49
// ComTurnXY ( Peter , 125 , 16 ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_INT 125
1114: PPUSH
1115: LD_INT 16
1117: PPUSH
1118: CALL_OW 118
// if TestCharacters ( 10c_DeltaDoctor ) = true then
1122: LD_STRING 10c_DeltaDoctor
1124: PPUSH
1125: CALL_OW 28
1129: PUSH
1130: LD_INT 1
1132: EQUAL
1133: IFFALSE 1193
// begin DeltaDoctor = PrepareUnit ( 10c_DeltaDoctor , true ) ;
1135: LD_ADDR_EXP 5
1139: PUSH
1140: LD_STRING 10c_DeltaDoctor
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL 3230 0 2
1150: ST_TO_ADDR
// PlaceUnitArea ( DeltaDoctor , DeltaSciSpawn , false ) ;
1151: LD_EXP 5
1155: PPUSH
1156: LD_INT 10
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 49
// ComTurnXY ( DeltaDoctor , 125 , 16 ) ;
1166: LD_EXP 5
1170: PPUSH
1171: LD_INT 125
1173: PPUSH
1174: LD_INT 16
1176: PPUSH
1177: CALL_OW 118
// SetClass ( DeltaDoctor , 4 ) ;
1181: LD_EXP 5
1185: PPUSH
1186: LD_INT 4
1188: PPUSH
1189: CALL_OW 336
// end ; others13Omega = CreateCharacterSet ( 13_other_survivors ) ;
1193: LD_ADDR_EXP 20
1197: PUSH
1198: LD_STRING 13_other_survivors
1200: PPUSH
1201: CALL_OW 31
1205: ST_TO_ADDR
// for i in omegaHeroes do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: LD_EXP 23
1215: PUSH
1216: FOR_IN
1217: IFFALSE 1359
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1219: LD_INT 22
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 30
1231: PUSH
1232: LD_INT 32
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 58
1241: PUSH
1242: EMPTY
1243: LIST
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 69
1254: PUSH
1255: LD_INT 0
1257: GREATER
1258: IFFALSE 1323
// begin PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1260: LD_VAR 0 2
1264: PPUSH
1265: LD_INT 22
1267: PUSH
1268: LD_INT 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 30
1277: PUSH
1278: LD_INT 32
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 58
1287: PUSH
1288: EMPTY
1289: LIST
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: PPUSH
1296: CALL_OW 69
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: CALL_OW 52
// SetClass ( i , 1 ) ;
1309: LD_VAR 0 2
1313: PPUSH
1314: LD_INT 1
1316: PPUSH
1317: CALL_OW 336
// end else
1321: GO 1357
// begin PlaceUnitArea ( i , [ AmericanSpawn1 , AmericanSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1323: LD_VAR 0 2
1327: PPUSH
1328: LD_INT 5
1330: PUSH
1331: LD_INT 6
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 1
1340: PPUSH
1341: LD_INT 2
1343: PPUSH
1344: CALL_OW 12
1348: ARRAY
1349: PPUSH
1350: LD_INT 0
1352: PPUSH
1353: CALL_OW 49
// end ; end ;
1357: GO 1216
1359: POP
1360: POP
// if others13Omega >= 2 then
1361: LD_EXP 20
1365: PUSH
1366: LD_INT 2
1368: GREATEREQUAL
1369: IFFALSE 1573
// begin for i := 1 to others13Omega - 1 do
1371: LD_ADDR_VAR 0 2
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_EXP 20
1385: PUSH
1386: LD_INT 1
1388: MINUS
1389: PUSH
1390: FOR_TO
1391: IFFALSE 1571
// begin if GetSkill ( others13Omega [ i ] , 3 ) < GetSkill ( others13Omega [ i + 1 ] , 3 ) then
1393: LD_EXP 20
1397: PUSH
1398: LD_VAR 0 2
1402: ARRAY
1403: PPUSH
1404: LD_INT 3
1406: PPUSH
1407: CALL_OW 259
1411: PUSH
1412: LD_EXP 20
1416: PUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: PLUS
1425: ARRAY
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL_OW 259
1434: LESS
1435: IFFALSE 1569
// begin mecha = others13Omega [ i + 1 ] ;
1437: LD_ADDR_VAR 0 7
1441: PUSH
1442: LD_EXP 20
1446: PUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 1
1454: PLUS
1455: ARRAY
1456: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1457: LD_VAR 0 7
1461: PPUSH
1462: LD_INT 3
1464: PPUSH
1465: CALL_OW 336
// PlaceHumanInUnit ( mecha , AmControlTow ) ;
1469: LD_VAR 0 7
1473: PPUSH
1474: LD_INT 148
1476: PPUSH
1477: CALL_OW 52
// others13Omega = others13Omega diff mecha ;
1481: LD_ADDR_EXP 20
1485: PUSH
1486: LD_EXP 20
1490: PUSH
1491: LD_VAR 0 7
1495: DIFF
1496: ST_TO_ADDR
// for i in FilterUnitsInArea ( AmericanBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) do
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 21
1517: PUSH
1518: LD_INT 2
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: LD_INT 3
1527: PUSH
1528: LD_INT 61
1530: PUSH
1531: EMPTY
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: PPUSH
1543: CALL_OW 70
1547: PUSH
1548: FOR_IN
1549: IFFALSE 1567
// ComLinkTo ( i , mecha ) ;
1551: LD_VAR 0 2
1555: PPUSH
1556: LD_VAR 0 7
1560: PPUSH
1561: CALL_OW 135
1565: GO 1548
1567: POP
1568: POP
// end ; end ;
1569: GO 1390
1571: POP
1572: POP
// end ; if others13Omega > 0 then
1573: LD_EXP 20
1577: PUSH
1578: LD_INT 0
1580: GREATER
1581: IFFALSE 1920
// begin for i = 1 to others13Omega do
1583: LD_ADDR_VAR 0 2
1587: PUSH
1588: DOUBLE
1589: LD_INT 1
1591: DEC
1592: ST_TO_ADDR
1593: LD_EXP 20
1597: PUSH
1598: FOR_TO
1599: IFFALSE 1918
// begin randBuild = [ AmLab1 , AmLab2 , AmLab3 , AmFab1 , AmFab2 , AmBar1 , AmBar2 ] [ Rand ( 1 , 7 ) ] ;
1601: LD_ADDR_VAR 0 9
1605: PUSH
1606: LD_INT 339
1608: PUSH
1609: LD_INT 336
1611: PUSH
1612: LD_INT 66
1614: PUSH
1615: LD_INT 51
1617: PUSH
1618: LD_INT 60
1620: PUSH
1621: LD_INT 31
1623: PUSH
1624: LD_INT 69
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 1
1638: PPUSH
1639: LD_INT 7
1641: PPUSH
1642: CALL_OW 12
1646: ARRAY
1647: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) > 0 then
1648: LD_INT 22
1650: PUSH
1651: LD_INT 1
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 30
1660: PUSH
1661: LD_INT 32
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 58
1670: PUSH
1671: EMPTY
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PPUSH
1679: CALL_OW 69
1683: PUSH
1684: LD_INT 0
1686: GREATER
1687: IFFALSE 1764
// begin PlaceHumanInUnit ( others13Omega [ i ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
1689: LD_EXP 20
1693: PUSH
1694: LD_VAR 0 2
1698: ARRAY
1699: PPUSH
1700: LD_INT 22
1702: PUSH
1703: LD_INT 1
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 30
1712: PUSH
1713: LD_INT 32
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 58
1722: PUSH
1723: EMPTY
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: PPUSH
1731: CALL_OW 69
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PPUSH
1740: CALL_OW 52
// SetClass ( others13Omega [ i ] , 1 ) ;
1744: LD_EXP 20
1748: PUSH
1749: LD_VAR 0 2
1753: ARRAY
1754: PPUSH
1755: LD_INT 1
1757: PPUSH
1758: CALL_OW 336
// end else
1762: GO 1916
// begin PlaceHumanInUnit ( others13Omega [ i ] , randBuild ) ;
1764: LD_EXP 20
1768: PUSH
1769: LD_VAR 0 2
1773: ARRAY
1774: PPUSH
1775: LD_VAR 0 9
1779: PPUSH
1780: CALL_OW 52
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_factory then
1784: LD_EXP 20
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: CALL_OW 310
1799: PPUSH
1800: CALL_OW 266
1804: PUSH
1805: LD_INT 3
1807: EQUAL
1808: IFFALSE 1828
// SetClass ( others13Omega [ i ] , 3 ) ;
1810: LD_EXP 20
1814: PUSH
1815: LD_VAR 0 2
1819: ARRAY
1820: PPUSH
1821: LD_INT 3
1823: PPUSH
1824: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_barracks then
1828: LD_EXP 20
1832: PUSH
1833: LD_VAR 0 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 310
1843: PPUSH
1844: CALL_OW 266
1848: PUSH
1849: LD_INT 5
1851: EQUAL
1852: IFFALSE 1872
// SetClass ( others13Omega [ i ] , 1 ) ;
1854: LD_EXP 20
1858: PUSH
1859: LD_VAR 0 2
1863: ARRAY
1864: PPUSH
1865: LD_INT 1
1867: PPUSH
1868: CALL_OW 336
// if GetBType ( IsInUnit ( others13Omega [ i ] ) ) = b_lab_full then
1872: LD_EXP 20
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PPUSH
1883: CALL_OW 310
1887: PPUSH
1888: CALL_OW 266
1892: PUSH
1893: LD_INT 8
1895: EQUAL
1896: IFFALSE 1916
// SetClass ( others13Omega [ i ] , 4 ) ;
1898: LD_EXP 20
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PPUSH
1909: LD_INT 4
1911: PPUSH
1912: CALL_OW 336
// end ; end ;
1916: GO 1598
1918: POP
1919: POP
// end ; if StevensStatus = 1 then
1920: LD_EXP 28
1924: PUSH
1925: LD_INT 1
1927: EQUAL
1928: IFFALSE 1987
// begin Stevens = PrepareUnitOmega ( Stevens ) ;
1930: LD_ADDR_EXP 1
1934: PUSH
1935: LD_STRING Stevens
1937: PPUSH
1938: CALL 3287 0 1
1942: ST_TO_ADDR
// PlaceUnitArea ( Stevens , StevensSpawn , false ) ;
1943: LD_EXP 1
1947: PPUSH
1948: LD_INT 2
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL_OW 49
// ComTurnXY ( Stevens , 125 , 16 ) ;
1958: LD_EXP 1
1962: PPUSH
1963: LD_INT 125
1965: PPUSH
1966: LD_INT 16
1968: PPUSH
1969: CALL_OW 118
// SetClass ( Stevens , 4 ) ;
1973: LD_EXP 1
1977: PPUSH
1978: LD_INT 4
1980: PPUSH
1981: CALL_OW 336
// end else
1985: GO 2053
// begin hc_name = Baker Smith ;
1987: LD_ADDR_OWVAR 26
1991: PUSH
1992: LD_STRING Baker Smith
1994: ST_TO_ADDR
// hc_gallery =  ;
1995: LD_ADDR_OWVAR 33
1999: PUSH
2000: LD_STRING 
2002: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 10
2008: PPUSH
2009: CALL_OW 384
// Baker = CreateHuman ;
2013: LD_ADDR_EXP 2
2017: PUSH
2018: CALL_OW 44
2022: ST_TO_ADDR
// PlaceUnitArea ( Baker , StevensSpawn , false ) ;
2023: LD_EXP 2
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: LD_INT 0
2033: PPUSH
2034: CALL_OW 49
// ComTurnXY ( Baker , 125 , 16 ) ;
2038: LD_EXP 2
2042: PPUSH
2043: LD_INT 125
2045: PPUSH
2046: LD_INT 16
2048: PPUSH
2049: CALL_OW 118
// end ; for i = 1 to 8 do
2053: LD_ADDR_VAR 0 2
2057: PUSH
2058: DOUBLE
2059: LD_INT 1
2061: DEC
2062: ST_TO_ADDR
2063: LD_INT 8
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2233
// begin PrepareVehicle ( [ us_morphling , us_heavy_tracked , us_medium_tracked ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , [ control_computer , control_remote , control_computer ] [ rand ( 1 , 3 ) ] , [ us_laser , us_rocket_launcher , us_laser , us_crane , us_double_gun ] [ i mod 5 + 1 ] , 100 ) ;
2069: LD_INT 5
2071: PUSH
2072: LD_INT 4
2074: PUSH
2075: LD_INT 3
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 1
2085: PPUSH
2086: LD_INT 3
2088: PPUSH
2089: CALL_OW 12
2093: ARRAY
2094: PPUSH
2095: LD_INT 1
2097: PUSH
2098: LD_INT 3
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: CALL_OW 12
2115: ARRAY
2116: PPUSH
2117: LD_INT 3
2119: PUSH
2120: LD_INT 2
2122: PUSH
2123: LD_INT 3
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: ARRAY
2142: PPUSH
2143: LD_INT 9
2145: PUSH
2146: LD_INT 7
2148: PUSH
2149: LD_INT 9
2151: PUSH
2152: LD_INT 13
2154: PUSH
2155: LD_INT 5
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: PUSH
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 5
2172: MOD
2173: PUSH
2174: LD_INT 1
2176: PLUS
2177: ARRAY
2178: PPUSH
2179: LD_INT 100
2181: PPUSH
2182: CALL 3389 0 5
// veh := CreateVehicle ;
2186: LD_ADDR_VAR 0 5
2190: PUSH
2191: CALL_OW 45
2195: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 0
2203: PPUSH
2204: LD_INT 5
2206: PPUSH
2207: CALL_OW 12
2211: PPUSH
2212: CALL_OW 233
// PlaceUnitArea ( veh , base_vehicles , false ) ;
2216: LD_VAR 0 5
2220: PPUSH
2221: LD_INT 16
2223: PPUSH
2224: LD_INT 0
2226: PPUSH
2227: CALL_OW 49
// end ;
2231: GO 2066
2233: POP
2234: POP
// PrepareVehicle ( us_morphling , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , us_cargo_bay , 100 ) ;
2235: LD_INT 5
2237: PPUSH
2238: LD_INT 1
2240: PUSH
2241: LD_INT 3
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 1
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: CALL_OW 12
2258: ARRAY
2259: PPUSH
2260: LD_INT 2
2262: PPUSH
2263: LD_INT 12
2265: PPUSH
2266: LD_INT 100
2268: PPUSH
2269: CALL 3389 0 5
// veh := CreateVehicle ;
2273: LD_ADDR_VAR 0 5
2277: PUSH
2278: CALL_OW 45
2282: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
2283: LD_VAR 0 5
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: LD_INT 5
2293: PPUSH
2294: CALL_OW 12
2298: PPUSH
2299: CALL_OW 233
// PlaceUnitArea ( veh , base_vehicles , false ) ;
2303: LD_VAR 0 5
2307: PPUSH
2308: LD_INT 16
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: LD_INT 22
2325: PUSH
2326: LD_INT 1
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: LD_INT 33
2335: PUSH
2336: LD_INT 2
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PPUSH
2347: CALL_OW 69
2351: PUSH
2352: FOR_IN
2353: IFFALSE 2366
// Connect ( i ) ;
2355: LD_VAR 0 2
2359: PPUSH
2360: CALL 2876 0 1
2364: GO 2352
2366: POP
2367: POP
// end ; end_of_file
2368: LD_VAR 0 1
2372: RET
// export function PrepareFirstAtacks ; var i , veh ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
// for i := 1 to 10 do
2378: LD_ADDR_VAR 0 2
2382: PUSH
2383: DOUBLE
2384: LD_INT 1
2386: DEC
2387: ST_TO_ADDR
2388: LD_INT 10
2390: PUSH
2391: FOR_TO
2392: IFFALSE 2541
// begin uc_side = 3 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 3
2401: ST_TO_ADDR
// uc_nation = 3 ;
2402: LD_ADDR_OWVAR 21
2406: PUSH
2407: LD_INT 3
2409: ST_TO_ADDR
// vc_engine = 3 ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_INT 3
2417: ST_TO_ADDR
// vc_control = 3 ;
2418: LD_ADDR_OWVAR 38
2422: PUSH
2423: LD_INT 3
2425: ST_TO_ADDR
// vc_weapon = [ 46 , 44 , 45 , 47 ] [ Rand ( 1 , 4 ) ] ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_INT 46
2433: PUSH
2434: LD_INT 44
2436: PUSH
2437: LD_INT 45
2439: PUSH
2440: LD_INT 47
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: PUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 4
2454: PPUSH
2455: CALL_OW 12
2459: ARRAY
2460: ST_TO_ADDR
// vc_chassis = 24 ;
2461: LD_ADDR_OWVAR 37
2465: PUSH
2466: LD_INT 24
2468: ST_TO_ADDR
// veh = CreateVehicle ;
2469: LD_ADDR_VAR 0 3
2473: PUSH
2474: CALL_OW 45
2478: ST_TO_ADDR
// PlaceUnitArea ( veh , PreludiumAttack , false ) ;
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 7
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: CALL_OW 49
// ComAgressiveMove ( veh , 104 , 143 ) ;
2494: LD_VAR 0 3
2498: PPUSH
2499: LD_INT 104
2501: PPUSH
2502: LD_INT 143
2504: PPUSH
2505: CALL_OW 114
// AddComAgressiveMove ( veh , 114 , 136 ) ;
2509: LD_VAR 0 3
2513: PPUSH
2514: LD_INT 114
2516: PPUSH
2517: LD_INT 136
2519: PPUSH
2520: CALL_OW 174
// AddComAgressiveMove ( veh , 112 , 40 ) ;
2524: LD_VAR 0 3
2528: PPUSH
2529: LD_INT 112
2531: PPUSH
2532: LD_INT 40
2534: PPUSH
2535: CALL_OW 174
// end ;
2539: GO 2391
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// export function PrepareRussianTPUNits ; var i , un ; begin
2548: LD_INT 0
2550: PPUSH
2551: PPUSH
2552: PPUSH
// for i = 1 to 6 do
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_INT 6
2565: PUSH
2566: FOR_TO
2567: IFFALSE 2657
// begin uc_side = 3 ;
2569: LD_ADDR_OWVAR 20
2573: PUSH
2574: LD_INT 3
2576: ST_TO_ADDR
// uc_nation = 3 ;
2577: LD_ADDR_OWVAR 21
2581: PUSH
2582: LD_INT 3
2584: ST_TO_ADDR
// hc_name =  ;
2585: LD_ADDR_OWVAR 26
2589: PUSH
2590: LD_STRING 
2592: ST_TO_ADDR
// hc_gallery =  ;
2593: LD_ADDR_OWVAR 33
2597: PUSH
2598: LD_STRING 
2600: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
2601: LD_INT 0
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 380
// un = CreateHuman ;
2614: LD_ADDR_VAR 0 3
2618: PUSH
2619: CALL_OW 44
2623: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2624: LD_VAR 0 3
2628: PPUSH
2629: LD_INT 14
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2639: LD_ADDR_EXP 26
2643: PUSH
2644: LD_EXP 26
2648: PUSH
2649: LD_VAR 0 3
2653: ADD
2654: ST_TO_ADDR
// end ;
2655: GO 2566
2657: POP
2658: POP
// for i = 1 to 3 do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: DOUBLE
2665: LD_INT 1
2667: DEC
2668: ST_TO_ADDR
2669: LD_INT 3
2671: PUSH
2672: FOR_TO
2673: IFFALSE 2763
// begin uc_side = 3 ;
2675: LD_ADDR_OWVAR 20
2679: PUSH
2680: LD_INT 3
2682: ST_TO_ADDR
// uc_nation = 3 ;
2683: LD_ADDR_OWVAR 21
2687: PUSH
2688: LD_INT 3
2690: ST_TO_ADDR
// hc_name =  ;
2691: LD_ADDR_OWVAR 26
2695: PUSH
2696: LD_STRING 
2698: ST_TO_ADDR
// hc_gallery =  ;
2699: LD_ADDR_OWVAR 33
2703: PUSH
2704: LD_STRING 
2706: ST_TO_ADDR
// PrepareHuman ( false , 9 , 10 ) ;
2707: LD_INT 0
2709: PPUSH
2710: LD_INT 9
2712: PPUSH
2713: LD_INT 10
2715: PPUSH
2716: CALL_OW 380
// un = CreateHuman ;
2720: LD_ADDR_VAR 0 3
2724: PUSH
2725: CALL_OW 44
2729: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2730: LD_VAR 0 3
2734: PPUSH
2735: LD_INT 14
2737: PPUSH
2738: LD_INT 0
2740: PPUSH
2741: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2745: LD_ADDR_EXP 26
2749: PUSH
2750: LD_EXP 26
2754: PUSH
2755: LD_VAR 0 3
2759: ADD
2760: ST_TO_ADDR
// end ;
2761: GO 2672
2763: POP
2764: POP
// for i = 1 to 2 do
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: DOUBLE
2771: LD_INT 1
2773: DEC
2774: ST_TO_ADDR
2775: LD_INT 2
2777: PUSH
2778: FOR_TO
2779: IFFALSE 2869
// begin uc_side = 3 ;
2781: LD_ADDR_OWVAR 20
2785: PUSH
2786: LD_INT 3
2788: ST_TO_ADDR
// uc_nation = 3 ;
2789: LD_ADDR_OWVAR 21
2793: PUSH
2794: LD_INT 3
2796: ST_TO_ADDR
// hc_name =  ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING 
2804: ST_TO_ADDR
// hc_gallery =  ;
2805: LD_ADDR_OWVAR 33
2809: PUSH
2810: LD_STRING 
2812: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
2813: LD_INT 1
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: LD_INT 10
2821: PPUSH
2822: CALL_OW 380
// un = CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// PlaceUnitArea ( un , RussianTPSpawn , false ) ;
2836: LD_VAR 0 3
2840: PPUSH
2841: LD_INT 14
2843: PPUSH
2844: LD_INT 0
2846: PPUSH
2847: CALL_OW 49
// russianTPUnits = russianTPUnits ^ un ;
2851: LD_ADDR_EXP 26
2855: PUSH
2856: LD_EXP 26
2860: PUSH
2861: LD_VAR 0 3
2865: ADD
2866: ST_TO_ADDR
// end ;
2867: GO 2778
2869: POP
2870: POP
// end ; end_of_file end_of_file
2871: LD_VAR 0 1
2875: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
2876: LD_INT 0
2878: PPUSH
2879: PPUSH
2880: PPUSH
2881: PPUSH
2882: PPUSH
2883: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
2884: LD_VAR 0 1
2888: NOT
2889: PUSH
2890: LD_VAR 0 1
2894: PPUSH
2895: CALL_OW 263
2899: PUSH
2900: LD_INT 2
2902: EQUAL
2903: NOT
2904: OR
2905: IFFALSE 2909
// exit ;
2907: GO 3225
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
2909: LD_ADDR_VAR 0 6
2913: PUSH
2914: LD_INT 22
2916: PUSH
2917: LD_VAR 0 1
2921: PPUSH
2922: CALL_OW 255
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: LD_INT 30
2936: PUSH
2937: LD_INT 36
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 34
2946: PUSH
2947: LD_INT 31
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PPUSH
2963: CALL_OW 69
2967: ST_TO_ADDR
// if not tmp then
2968: LD_VAR 0 6
2972: NOT
2973: IFFALSE 2977
// exit ;
2975: GO 3225
// result := [ ] ;
2977: LD_ADDR_VAR 0 2
2981: PUSH
2982: EMPTY
2983: ST_TO_ADDR
// for i in tmp do
2984: LD_ADDR_VAR 0 3
2988: PUSH
2989: LD_VAR 0 6
2993: PUSH
2994: FOR_IN
2995: IFFALSE 3066
// begin t := UnitsInside ( i ) ;
2997: LD_ADDR_VAR 0 4
3001: PUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 313
3011: ST_TO_ADDR
// if t then
3012: LD_VAR 0 4
3016: IFFALSE 3064
// for j in t do
3018: LD_ADDR_VAR 0 7
3022: PUSH
3023: LD_VAR 0 4
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3062
// result := Insert ( result , result + 1 , j ) ;
3031: LD_ADDR_VAR 0 2
3035: PUSH
3036: LD_VAR 0 2
3040: PPUSH
3041: LD_VAR 0 2
3045: PUSH
3046: LD_INT 1
3048: PLUS
3049: PPUSH
3050: LD_VAR 0 7
3054: PPUSH
3055: CALL_OW 2
3059: ST_TO_ADDR
3060: GO 3028
3062: POP
3063: POP
// end ;
3064: GO 2994
3066: POP
3067: POP
// if not result then
3068: LD_VAR 0 2
3072: NOT
3073: IFFALSE 3077
// exit ;
3075: GO 3225
// mech := result [ 1 ] ;
3077: LD_ADDR_VAR 0 5
3081: PUSH
3082: LD_VAR 0 2
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: ST_TO_ADDR
// if result > 1 then
3091: LD_VAR 0 2
3095: PUSH
3096: LD_INT 1
3098: GREATER
3099: IFFALSE 3211
// for i = 2 to result do
3101: LD_ADDR_VAR 0 3
3105: PUSH
3106: DOUBLE
3107: LD_INT 2
3109: DEC
3110: ST_TO_ADDR
3111: LD_VAR 0 2
3115: PUSH
3116: FOR_TO
3117: IFFALSE 3209
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
3119: LD_ADDR_VAR 0 4
3123: PUSH
3124: LD_VAR 0 2
3128: PUSH
3129: LD_VAR 0 3
3133: ARRAY
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: CALL_OW 259
3142: PUSH
3143: LD_VAR 0 2
3147: PUSH
3148: LD_VAR 0 3
3152: ARRAY
3153: PPUSH
3154: CALL_OW 432
3158: MINUS
3159: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
3160: LD_VAR 0 4
3164: PUSH
3165: LD_VAR 0 5
3169: PPUSH
3170: LD_INT 3
3172: PPUSH
3173: CALL_OW 259
3177: PUSH
3178: LD_VAR 0 5
3182: PPUSH
3183: CALL_OW 432
3187: MINUS
3188: GREATEREQUAL
3189: IFFALSE 3207
// mech := result [ i ] ;
3191: LD_ADDR_VAR 0 5
3195: PUSH
3196: LD_VAR 0 2
3200: PUSH
3201: LD_VAR 0 3
3205: ARRAY
3206: ST_TO_ADDR
// end ;
3207: GO 3116
3209: POP
3210: POP
// ComLinkTo ( vehicle , mech ) ;
3211: LD_VAR 0 1
3215: PPUSH
3216: LD_VAR 0 5
3220: PPUSH
3221: CALL_OW 135
// end ;
3225: LD_VAR 0 2
3229: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3230: LD_INT 0
3232: PPUSH
3233: PPUSH
// if exist_mode then
3234: LD_VAR 0 2
3238: IFFALSE 3257
// unit := CreateCharacter ( ident ) else
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_VAR 0 1
3249: PPUSH
3250: CALL_OW 34
3254: ST_TO_ADDR
3255: GO 3272
// unit := NewCharacter ( ident ) ;
3257: LD_ADDR_VAR 0 4
3261: PUSH
3262: LD_VAR 0 1
3266: PPUSH
3267: CALL_OW 25
3271: ST_TO_ADDR
// result := unit ;
3272: LD_ADDR_VAR 0 3
3276: PUSH
3277: LD_VAR 0 4
3281: ST_TO_ADDR
// end ;
3282: LD_VAR 0 3
3286: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
3287: LD_INT 0
3289: PPUSH
3290: PPUSH
// if TestCharacters ( 13f_ & ident ) = true then
3291: LD_STRING 13f_
3293: PUSH
3294: LD_VAR 0 1
3298: STR
3299: PPUSH
3300: CALL_OW 28
3304: PUSH
3305: LD_INT 1
3307: EQUAL
3308: IFFALSE 3374
// begin unit = CreateCharacter ( 13f_ & ident ) ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: LD_STRING 13f_
3317: PUSH
3318: LD_VAR 0 1
3322: STR
3323: PPUSH
3324: CALL_OW 34
3328: ST_TO_ADDR
// omegaHeroes = omegaHeroes ^ unit ;
3329: LD_ADDR_EXP 23
3333: PUSH
3334: LD_EXP 23
3338: PUSH
3339: LD_VAR 0 3
3343: ADD
3344: ST_TO_ADDR
// if not unit = Stevens then
3345: LD_VAR 0 3
3349: PUSH
3350: LD_EXP 1
3354: EQUAL
3355: NOT
3356: IFFALSE 3374
// omegaHeroes = omegaHeroes ^ unit ;
3358: LD_ADDR_EXP 23
3362: PUSH
3363: LD_EXP 23
3367: PUSH
3368: LD_VAR 0 3
3372: ADD
3373: ST_TO_ADDR
// end ; result := unit ;
3374: LD_ADDR_VAR 0 2
3378: PUSH
3379: LD_VAR 0 3
3383: ST_TO_ADDR
// end ;
3384: LD_VAR 0 2
3388: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
3389: LD_INT 0
3391: PPUSH
// vc_chassis := chassis ;
3392: LD_ADDR_OWVAR 37
3396: PUSH
3397: LD_VAR 0 1
3401: ST_TO_ADDR
// vc_engine := engine ;
3402: LD_ADDR_OWVAR 39
3406: PUSH
3407: LD_VAR 0 2
3411: ST_TO_ADDR
// vc_control := control ;
3412: LD_ADDR_OWVAR 38
3416: PUSH
3417: LD_VAR 0 3
3421: ST_TO_ADDR
// vc_weapon := weapon ;
3422: LD_ADDR_OWVAR 40
3426: PUSH
3427: LD_VAR 0 4
3431: ST_TO_ADDR
// vc_fuel_battery := fuel ;
3432: LD_ADDR_OWVAR 41
3436: PUSH
3437: LD_VAR 0 5
3441: ST_TO_ADDR
// end ;
3442: LD_VAR 0 6
3446: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
3447: LD_INT 0
3449: PPUSH
3450: PPUSH
// for i in charactersList do
3451: LD_ADDR_VAR 0 4
3455: PUSH
3456: LD_VAR 0 1
3460: PUSH
3461: FOR_IN
3462: IFFALSE 3491
// begin if IsOk ( i ) then
3464: LD_VAR 0 4
3468: PPUSH
3469: CALL_OW 302
3473: IFFALSE 3489
// SaveCharacters ( i , ident ) ;
3475: LD_VAR 0 4
3479: PPUSH
3480: LD_VAR 0 2
3484: PPUSH
3485: CALL_OW 38
// end ;
3489: GO 3461
3491: POP
3492: POP
// end ;
3493: LD_VAR 0 3
3497: RET
// export function TabLenght ( tab ) ; var i ; begin
3498: LD_INT 0
3500: PPUSH
3501: PPUSH
// for i = 1 to tab do
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: DOUBLE
3508: LD_INT 1
3510: DEC
3511: ST_TO_ADDR
3512: LD_VAR 0 1
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3532
// result = i ;
3520: LD_ADDR_VAR 0 2
3524: PUSH
3525: LD_VAR 0 3
3529: ST_TO_ADDR
3530: GO 3517
3532: POP
3533: POP
// end ;
3534: LD_VAR 0 2
3538: RET
// export function SetDifficulty ; begin
3539: LD_INT 0
3541: PPUSH
// if Difficulty = 1 then
3542: LD_OWVAR 67
3546: PUSH
3547: LD_INT 1
3549: EQUAL
3550: IFFALSE 3617
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
3552: LD_INT 51
3554: PPUSH
3555: LD_INT 3
3557: PPUSH
3558: LD_INT 2
3560: PPUSH
3561: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3565: LD_INT 57
3567: PPUSH
3568: LD_INT 3
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3578: LD_INT 63
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: LD_INT 2
3586: PPUSH
3587: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
3591: LD_INT 52
3593: PPUSH
3594: LD_INT 3
3596: PPUSH
3597: LD_INT 2
3599: PPUSH
3600: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3604: LD_INT 58
3606: PPUSH
3607: LD_INT 3
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: CALL_OW 322
// end ; if Difficulty = 2 then
3617: LD_OWVAR 67
3621: PUSH
3622: LD_INT 2
3624: EQUAL
3625: IFFALSE 3718
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
3627: LD_INT 51
3629: PPUSH
3630: LD_INT 3
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3640: LD_INT 57
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 2
3648: PPUSH
3649: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3653: LD_INT 63
3655: PPUSH
3656: LD_INT 3
3658: PPUSH
3659: LD_INT 2
3661: PPUSH
3662: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
3666: LD_INT 52
3668: PPUSH
3669: LD_INT 3
3671: PPUSH
3672: LD_INT 2
3674: PPUSH
3675: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3679: LD_INT 58
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 2
3687: PPUSH
3688: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3692: LD_INT 64
3694: PPUSH
3695: LD_INT 3
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3705: LD_INT 59
3707: PPUSH
3708: LD_INT 3
3710: PPUSH
3711: LD_INT 2
3713: PPUSH
3714: CALL_OW 322
// end ; if Difficulty = 3 then
3718: LD_OWVAR 67
3722: PUSH
3723: LD_INT 3
3725: EQUAL
3726: IFFALSE 3845
// begin SetTech ( tech_Weap1 , 3 , state_researched ) ;
3728: LD_INT 51
3730: PPUSH
3731: LD_INT 3
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3741: LD_INT 57
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 2
3749: PPUSH
3750: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3754: LD_INT 63
3756: PPUSH
3757: LD_INT 3
3759: PPUSH
3760: LD_INT 2
3762: PPUSH
3763: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
3767: LD_INT 52
3769: PPUSH
3770: LD_INT 3
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3780: LD_INT 58
3782: PPUSH
3783: LD_INT 3
3785: PPUSH
3786: LD_INT 2
3788: PPUSH
3789: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3793: LD_INT 64
3795: PPUSH
3796: LD_INT 3
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
3806: LD_INT 53
3808: PPUSH
3809: LD_INT 3
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3819: LD_INT 59
3821: PPUSH
3822: LD_INT 3
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 322
// SetTech ( tech_ST3 , 3 , state_researched ) ;
3832: LD_INT 65
3834: PPUSH
3835: LD_INT 3
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 322
// end ; end ;
3845: LD_VAR 0 1
3849: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3850: LD_INT 0
3852: PPUSH
3853: PPUSH
3854: PPUSH
// characters := characters diff [ Stevens , Baker , Gordon , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornell , Gary , Frank , Kikuchi , Powell ] ;
3855: LD_ADDR_VAR 0 1
3859: PUSH
3860: LD_VAR 0 1
3864: PUSH
3865: LD_EXP 1
3869: PUSH
3870: LD_EXP 2
3874: PUSH
3875: LD_EXP 3
3879: PUSH
3880: LD_EXP 6
3884: PUSH
3885: LD_EXP 7
3889: PUSH
3890: LD_EXP 8
3894: PUSH
3895: LD_EXP 9
3899: PUSH
3900: LD_EXP 10
3904: PUSH
3905: LD_EXP 11
3909: PUSH
3910: LD_EXP 12
3914: PUSH
3915: LD_EXP 13
3919: PUSH
3920: LD_EXP 14
3924: PUSH
3925: LD_EXP 15
3929: PUSH
3930: LD_EXP 16
3934: PUSH
3935: LD_EXP 17
3939: PUSH
3940: LD_EXP 19
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: DIFF
3963: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
3964: LD_ADDR_VAR 0 6
3968: PUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 12
3981: ST_TO_ADDR
// for i = 1 to characters do
3982: LD_ADDR_VAR 0 5
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_VAR 0 1
3996: PUSH
3997: FOR_TO
3998: IFFALSE 4108
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4000: LD_VAR 0 5
4004: PUSH
4005: LD_VAR 0 6
4009: EQUAL
4010: PUSH
4011: LD_VAR 0 1
4015: PUSH
4016: LD_VAR 0 5
4020: ARRAY
4021: PPUSH
4022: CALL_OW 258
4026: PUSH
4027: LD_INT 1
4029: EQUAL
4030: AND
4031: IFFALSE 4053
// Say ( characters [ i ] , dialogMID ) ;
4033: LD_VAR 0 1
4037: PUSH
4038: LD_VAR 0 5
4042: ARRAY
4043: PPUSH
4044: LD_VAR 0 2
4048: PPUSH
4049: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4053: LD_VAR 0 5
4057: PUSH
4058: LD_VAR 0 6
4062: EQUAL
4063: PUSH
4064: LD_VAR 0 1
4068: PUSH
4069: LD_VAR 0 5
4073: ARRAY
4074: PPUSH
4075: CALL_OW 258
4079: PUSH
4080: LD_INT 2
4082: EQUAL
4083: AND
4084: IFFALSE 4106
// Say ( characters [ i ] , dialogFID ) ;
4086: LD_VAR 0 1
4090: PUSH
4091: LD_VAR 0 5
4095: ARRAY
4096: PPUSH
4097: LD_VAR 0 3
4101: PPUSH
4102: CALL_OW 88
// end ;
4106: GO 3997
4108: POP
4109: POP
// end ;
4110: LD_VAR 0 4
4114: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
4115: LD_INT 0
4117: PPUSH
4118: PPUSH
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
4123: LD_ADDR_VAR 0 6
4127: PUSH
4128: LD_INT 22
4130: PUSH
4131: LD_VAR 0 1
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 9
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PPUSH
4154: CALL_OW 69
4158: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4159: LD_ADDR_VAR 0 7
4163: PUSH
4164: LD_INT 81
4166: PUSH
4167: LD_VAR 0 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 3
4178: PUSH
4179: LD_INT 21
4181: PUSH
4182: LD_INT 3
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 69
4201: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
4202: LD_ADDR_VAR 0 4
4206: PUSH
4207: LD_INT 1
4209: PPUSH
4210: LD_INT 3
4212: PPUSH
4213: CALL_OW 12
4217: ST_TO_ADDR
// for i = 1 to list do
4218: LD_ADDR_VAR 0 5
4222: PUSH
4223: DOUBLE
4224: LD_INT 1
4226: DEC
4227: ST_TO_ADDR
4228: LD_VAR 0 6
4232: PUSH
4233: FOR_TO
4234: IFFALSE 4436
// for ta in filter do
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: LD_VAR 0 7
4245: PUSH
4246: FOR_IN
4247: IFFALSE 4432
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
4249: LD_VAR 0 6
4253: PUSH
4254: LD_VAR 0 5
4258: ARRAY
4259: PPUSH
4260: LD_VAR 0 3
4264: PPUSH
4265: CALL_OW 296
4269: PUSH
4270: LD_INT 15
4272: LESSEQUAL
4273: IFFALSE 4430
// begin case c of 1 :
4275: LD_VAR 0 4
4279: PUSH
4280: LD_INT 1
4282: DOUBLE
4283: EQUAL
4284: IFTRUE 4288
4286: GO 4326
4288: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4289: LD_VAR 0 6
4293: PUSH
4294: LD_VAR 0 5
4298: ARRAY
4299: PPUSH
4300: LD_VAR 0 3
4304: PPUSH
4305: CALL_OW 250
4309: PPUSH
4310: LD_VAR 0 3
4314: PPUSH
4315: CALL_OW 251
4319: PPUSH
4320: CALL_OW 154
4324: GO 4430
4326: LD_INT 2
4328: DOUBLE
4329: EQUAL
4330: IFTRUE 4334
4332: GO 4398
4334: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4335: LD_VAR 0 6
4339: PUSH
4340: LD_VAR 0 5
4344: ARRAY
4345: PPUSH
4346: LD_VAR 0 3
4350: PPUSH
4351: CALL_OW 250
4355: PUSH
4356: LD_INT 1
4358: NEG
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: CALL_OW 12
4367: PLUS
4368: PPUSH
4369: LD_VAR 0 3
4373: PPUSH
4374: CALL_OW 251
4378: PUSH
4379: LD_INT 1
4381: NEG
4382: PPUSH
4383: LD_INT 1
4385: PPUSH
4386: CALL_OW 12
4390: PLUS
4391: PPUSH
4392: CALL_OW 153
4396: GO 4430
4398: LD_INT 3
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4429
4406: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4407: LD_VAR 0 6
4411: PUSH
4412: LD_VAR 0 5
4416: ARRAY
4417: PPUSH
4418: LD_VAR 0 3
4422: PPUSH
4423: CALL_OW 115
4427: GO 4430
4429: POP
// end ; end ;
4430: GO 4246
4432: POP
4433: POP
4434: GO 4233
4436: POP
4437: POP
// end ;
4438: LD_VAR 0 2
4442: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit , vehs ; begin
4443: LD_INT 0
4445: PPUSH
4446: PPUSH
4447: PPUSH
4448: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
4449: LD_INT 22
4451: PUSH
4452: LD_VAR 0 1
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 21
4463: PUSH
4464: LD_INT 2
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 34
4473: PUSH
4474: LD_INT 49
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: PUSH
4491: LD_INT 0
4493: GREATER
4494: IFFALSE 4702
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: LD_INT 22
4503: PUSH
4504: LD_VAR 0 1
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 21
4515: PUSH
4516: LD_INT 2
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 34
4525: PUSH
4526: LD_INT 49
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL_OW 69
4542: ST_TO_ADDR
// wait ( 0 0$3 ) ;
4543: LD_INT 105
4545: PPUSH
4546: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
4550: LD_ADDR_VAR 0 3
4554: PUSH
4555: LD_VAR 0 5
4559: PPUSH
4560: LD_INT 3
4562: PUSH
4563: LD_INT 60
4565: PUSH
4566: EMPTY
4567: LIST
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 72
4577: PUSH
4578: FOR_IN
4579: IFFALSE 4690
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: LD_INT 81
4588: PUSH
4589: LD_VAR 0 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 101
4600: PUSH
4601: LD_INT 1
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 2
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 1
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 3
4623: PUSH
4624: LD_INT 58
4626: PUSH
4627: EMPTY
4628: LIST
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: PPUSH
4644: CALL_OW 69
4648: PPUSH
4649: LD_VAR 0 3
4653: PPUSH
4654: CALL_OW 74
4658: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4659: LD_VAR 0 3
4663: PPUSH
4664: LD_VAR 0 4
4668: PPUSH
4669: CALL_OW 250
4673: PPUSH
4674: LD_VAR 0 4
4678: PPUSH
4679: CALL_OW 251
4683: PPUSH
4684: CALL_OW 111
// end ;
4688: GO 4578
4690: POP
4691: POP
// until vehs = 0 ;
4692: LD_VAR 0 5
4696: PUSH
4697: LD_INT 0
4699: EQUAL
4700: IFFALSE 4496
// end ;
4702: LD_VAR 0 2
4706: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
4707: LD_INT 0
4709: PPUSH
4710: PPUSH
4711: PPUSH
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
// for i = 1 to medicCount do
4720: LD_ADDR_VAR 0 13
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_VAR 0 7
4734: PUSH
4735: FOR_TO
4736: IFFALSE 4818
// begin uc_side = side ;
4738: LD_ADDR_OWVAR 20
4742: PUSH
4743: LD_VAR 0 1
4747: ST_TO_ADDR
// uc_nation = nation ;
4748: LD_ADDR_OWVAR 21
4752: PUSH
4753: LD_VAR 0 2
4757: ST_TO_ADDR
// hc_name =  ;
4758: LD_ADDR_OWVAR 26
4762: PUSH
4763: LD_STRING 
4765: ST_TO_ADDR
// hc_gallery =  ;
4766: LD_ADDR_OWVAR 33
4770: PUSH
4771: LD_STRING 
4773: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
4774: LD_INT 0
4776: PPUSH
4777: LD_INT 4
4779: PPUSH
4780: LD_VAR 0 8
4784: PPUSH
4785: CALL_OW 380
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 15
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4799: LD_VAR 0 15
4803: PPUSH
4804: LD_VAR 0 9
4808: PPUSH
4809: LD_INT 0
4811: PPUSH
4812: CALL_OW 49
// end ;
4816: GO 4735
4818: POP
4819: POP
// for i = 1 to soldierCount do
4820: LD_ADDR_VAR 0 13
4824: PUSH
4825: DOUBLE
4826: LD_INT 1
4828: DEC
4829: ST_TO_ADDR
4830: LD_VAR 0 3
4834: PUSH
4835: FOR_TO
4836: IFFALSE 4918
// begin uc_side = side ;
4838: LD_ADDR_OWVAR 20
4842: PUSH
4843: LD_VAR 0 1
4847: ST_TO_ADDR
// uc_nation = nation ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_VAR 0 2
4857: ST_TO_ADDR
// hc_name =  ;
4858: LD_ADDR_OWVAR 26
4862: PUSH
4863: LD_STRING 
4865: ST_TO_ADDR
// hc_gallery =  ;
4866: LD_ADDR_OWVAR 33
4870: PUSH
4871: LD_STRING 
4873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
4874: LD_INT 0
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: LD_VAR 0 8
4884: PPUSH
4885: CALL_OW 380
// un = CreateHuman ;
4889: LD_ADDR_VAR 0 15
4893: PUSH
4894: CALL_OW 44
4898: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4899: LD_VAR 0 15
4903: PPUSH
4904: LD_VAR 0 9
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4835
4918: POP
4919: POP
// for i = 1 to sniperCount do
4920: LD_ADDR_VAR 0 13
4924: PUSH
4925: DOUBLE
4926: LD_INT 1
4928: DEC
4929: ST_TO_ADDR
4930: LD_VAR 0 4
4934: PUSH
4935: FOR_TO
4936: IFFALSE 5018
// begin uc_side = side ;
4938: LD_ADDR_OWVAR 20
4942: PUSH
4943: LD_VAR 0 1
4947: ST_TO_ADDR
// uc_nation = nation ;
4948: LD_ADDR_OWVAR 21
4952: PUSH
4953: LD_VAR 0 2
4957: ST_TO_ADDR
// hc_name =  ;
4958: LD_ADDR_OWVAR 26
4962: PUSH
4963: LD_STRING 
4965: ST_TO_ADDR
// hc_gallery =  ;
4966: LD_ADDR_OWVAR 33
4970: PUSH
4971: LD_STRING 
4973: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
4974: LD_INT 0
4976: PPUSH
4977: LD_INT 5
4979: PPUSH
4980: LD_VAR 0 8
4984: PPUSH
4985: CALL_OW 380
// un = CreateHuman ;
4989: LD_ADDR_VAR 0 15
4993: PUSH
4994: CALL_OW 44
4998: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4999: LD_VAR 0 15
5003: PPUSH
5004: LD_VAR 0 9
5008: PPUSH
5009: LD_INT 0
5011: PPUSH
5012: CALL_OW 49
// end ;
5016: GO 4935
5018: POP
5019: POP
// for i = 1 to bazookCount do
5020: LD_ADDR_VAR 0 13
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_VAR 0 5
5034: PUSH
5035: FOR_TO
5036: IFFALSE 5118
// begin uc_side = side ;
5038: LD_ADDR_OWVAR 20
5042: PUSH
5043: LD_VAR 0 1
5047: ST_TO_ADDR
// uc_nation = nation ;
5048: LD_ADDR_OWVAR 21
5052: PUSH
5053: LD_VAR 0 2
5057: ST_TO_ADDR
// hc_name =  ;
5058: LD_ADDR_OWVAR 26
5062: PUSH
5063: LD_STRING 
5065: ST_TO_ADDR
// hc_gallery =  ;
5066: LD_ADDR_OWVAR 33
5070: PUSH
5071: LD_STRING 
5073: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5074: LD_INT 0
5076: PPUSH
5077: LD_INT 9
5079: PPUSH
5080: LD_VAR 0 8
5084: PPUSH
5085: CALL_OW 380
// un = CreateHuman ;
5089: LD_ADDR_VAR 0 15
5093: PUSH
5094: CALL_OW 44
5098: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5099: LD_VAR 0 15
5103: PPUSH
5104: LD_VAR 0 9
5108: PPUSH
5109: LD_INT 0
5111: PPUSH
5112: CALL_OW 49
// end ;
5116: GO 5035
5118: POP
5119: POP
// for i = 1 to mortalCount do
5120: LD_ADDR_VAR 0 13
5124: PUSH
5125: DOUBLE
5126: LD_INT 1
5128: DEC
5129: ST_TO_ADDR
5130: LD_VAR 0 6
5134: PUSH
5135: FOR_TO
5136: IFFALSE 5218
// begin uc_side = side ;
5138: LD_ADDR_OWVAR 20
5142: PUSH
5143: LD_VAR 0 1
5147: ST_TO_ADDR
// uc_nation = nation ;
5148: LD_ADDR_OWVAR 21
5152: PUSH
5153: LD_VAR 0 2
5157: ST_TO_ADDR
// hc_name =  ;
5158: LD_ADDR_OWVAR 26
5162: PUSH
5163: LD_STRING 
5165: ST_TO_ADDR
// hc_gallery =  ;
5166: LD_ADDR_OWVAR 33
5170: PUSH
5171: LD_STRING 
5173: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5174: LD_INT 0
5176: PPUSH
5177: LD_INT 8
5179: PPUSH
5180: LD_VAR 0 8
5184: PPUSH
5185: CALL_OW 380
// un = CreateHuman ;
5189: LD_ADDR_VAR 0 15
5193: PUSH
5194: CALL_OW 44
5198: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5199: LD_VAR 0 15
5203: PPUSH
5204: LD_VAR 0 9
5208: PPUSH
5209: LD_INT 0
5211: PPUSH
5212: CALL_OW 49
// end ;
5216: GO 5135
5218: POP
5219: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5220: LD_ADDR_VAR 0 17
5224: PUSH
5225: LD_INT 22
5227: PUSH
5228: LD_VAR 0 1
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 25
5239: PUSH
5240: LD_INT 4
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PPUSH
5251: CALL_OW 69
5255: ST_TO_ADDR
// for i in medic_list do
5256: LD_ADDR_VAR 0 13
5260: PUSH
5261: LD_VAR 0 17
5265: PUSH
5266: FOR_IN
5267: IFFALSE 5285
// ComMoveToArea ( i , healArea ) ;
5269: LD_VAR 0 13
5273: PPUSH
5274: LD_VAR 0 10
5278: PPUSH
5279: CALL_OW 113
5283: GO 5266
5285: POP
5286: POP
// repeat wait ( 0 0$1 ) ;
5287: LD_INT 35
5289: PPUSH
5290: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
5294: LD_ADDR_VAR 0 16
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_VAR 0 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 1
5313: PUSH
5314: LD_INT 3
5316: PUSH
5317: LD_INT 24
5319: PUSH
5320: LD_INT 550
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 24
5333: PUSH
5334: LD_INT 250
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PPUSH
5350: CALL_OW 69
5354: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
5355: LD_ADDR_VAR 0 18
5359: PUSH
5360: LD_INT 22
5362: PUSH
5363: LD_VAR 0 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 2
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 5
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 25
5397: PUSH
5398: LD_INT 8
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PUSH
5405: LD_INT 25
5407: PUSH
5408: LD_INT 9
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 24
5424: PUSH
5425: LD_INT 1000
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: PPUSH
5437: CALL_OW 69
5441: ST_TO_ADDR
// if medicCount > 0 then
5442: LD_VAR 0 7
5446: PUSH
5447: LD_INT 0
5449: GREATER
5450: IFFALSE 5524
// begin if damageUnit_list > 0 then
5452: LD_VAR 0 16
5456: PUSH
5457: LD_INT 0
5459: GREATER
5460: IFFALSE 5524
// begin for i in damageUnit_list do
5462: LD_ADDR_VAR 0 13
5466: PUSH
5467: LD_VAR 0 16
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5522
// begin ComMoveToArea ( i , healArea ) ;
5475: LD_VAR 0 13
5479: PPUSH
5480: LD_VAR 0 10
5484: PPUSH
5485: CALL_OW 113
// for j in medic_list do
5489: LD_ADDR_VAR 0 14
5493: PUSH
5494: LD_VAR 0 17
5498: PUSH
5499: FOR_IN
5500: IFFALSE 5518
// AddComHeal ( j , i ) ;
5502: LD_VAR 0 14
5506: PPUSH
5507: LD_VAR 0 13
5511: PPUSH
5512: CALL_OW 188
5516: GO 5499
5518: POP
5519: POP
// end ;
5520: GO 5472
5522: POP
5523: POP
// end ; end ; for i in soldiersOK_list do
5524: LD_ADDR_VAR 0 13
5528: PUSH
5529: LD_VAR 0 18
5533: PUSH
5534: FOR_IN
5535: IFFALSE 5711
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , i ) ;
5537: LD_ADDR_VAR 0 21
5541: PUSH
5542: LD_INT 81
5544: PUSH
5545: LD_VAR 0 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 69
5558: PPUSH
5559: LD_VAR 0 13
5563: PPUSH
5564: CALL_OW 74
5568: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5569: LD_ADDR_VAR 0 22
5573: PUSH
5574: LD_INT 81
5576: PUSH
5577: LD_VAR 0 1
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 2
5588: PUSH
5589: LD_INT 59
5591: PUSH
5592: EMPTY
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 2
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: PPUSH
5628: CALL_OW 69
5632: PPUSH
5633: LD_VAR 0 13
5637: PPUSH
5638: CALL_OW 74
5642: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5643: LD_VAR 0 13
5647: PPUSH
5648: LD_VAR 0 21
5652: PPUSH
5653: CALL_OW 296
5657: PUSH
5658: LD_INT 8
5660: PLUS
5661: PUSH
5662: LD_VAR 0 13
5666: PPUSH
5667: LD_VAR 0 22
5671: PPUSH
5672: CALL_OW 296
5676: LESS
5677: IFFALSE 5695
// begin ComAttackUnit ( i , target1 ) ;
5679: LD_VAR 0 13
5683: PPUSH
5684: LD_VAR 0 21
5688: PPUSH
5689: CALL_OW 115
// end else
5693: GO 5709
// begin ComAttackUnit ( i , target2 ) ;
5695: LD_VAR 0 13
5699: PPUSH
5700: LD_VAR 0 22
5704: PPUSH
5705: CALL_OW 115
// end ; end ;
5709: GO 5534
5711: POP
5712: POP
// until soldiersOK_list = [ ] ;
5713: LD_VAR 0 18
5717: PUSH
5718: EMPTY
5719: EQUAL
5720: IFFALSE 5287
// end ;
5722: LD_VAR 0 12
5726: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
5727: LD_INT 0
5729: PPUSH
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
5735: PPUSH
5736: PPUSH
5737: PPUSH
5738: PPUSH
5739: PPUSH
// amChassisTab = [ ] ;
5740: LD_ADDR_VAR 0 19
5744: PUSH
5745: EMPTY
5746: ST_TO_ADDR
// arChassisTab = [ ] ;
5747: LD_ADDR_VAR 0 18
5751: PUSH
5752: EMPTY
5753: ST_TO_ADDR
// ruChassisTab = [ ] ;
5754: LD_ADDR_VAR 0 17
5758: PUSH
5759: EMPTY
5760: ST_TO_ADDR
// for i = 1 to vehCount do
5761: LD_ADDR_VAR 0 13
5765: PUSH
5766: DOUBLE
5767: LD_INT 1
5769: DEC
5770: ST_TO_ADDR
5771: LD_VAR 0 3
5775: PUSH
5776: FOR_TO
5777: IFFALSE 7201
// begin wait ( 0 0$01 ) ;
5779: LD_INT 35
5781: PPUSH
5782: CALL_OW 67
// if nation = 1 then
5786: LD_VAR 0 5
5790: PUSH
5791: LD_INT 1
5793: EQUAL
5794: IFFALSE 6275
// begin uc_side = side ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_VAR 0 2
5805: ST_TO_ADDR
// uc_nation = nation ;
5806: LD_ADDR_OWVAR 21
5810: PUSH
5811: LD_VAR 0 5
5815: ST_TO_ADDR
// vc_engine = vehengine ;
5816: LD_ADDR_OWVAR 39
5820: PUSH
5821: LD_VAR 0 6
5825: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
5826: LD_ADDR_OWVAR 40
5830: PUSH
5831: LD_VAR 0 10
5835: PUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_VAR 0 10
5843: PPUSH
5844: CALL_OW 12
5848: ARRAY
5849: ST_TO_ADDR
// for j = 1 to AMWeapon do
5850: LD_ADDR_VAR 0 14
5854: PUSH
5855: DOUBLE
5856: LD_INT 1
5858: DEC
5859: ST_TO_ADDR
5860: LD_VAR 0 10
5864: PUSH
5865: FOR_TO
5866: IFFALSE 6167
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
5868: LD_VAR 0 10
5872: PUSH
5873: LD_VAR 0 14
5877: ARRAY
5878: PUSH
5879: LD_INT 2
5881: EQUAL
5882: PUSH
5883: LD_VAR 0 10
5887: PUSH
5888: LD_VAR 0 14
5892: ARRAY
5893: PUSH
5894: LD_INT 3
5896: EQUAL
5897: OR
5898: IFFALSE 5951
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
5900: LD_ADDR_VAR 0 19
5904: PUSH
5905: LD_INT 1
5907: PUSH
5908: LD_INT 2
5910: PUSH
5911: LD_INT 3
5913: PUSH
5914: LD_INT 4
5916: PUSH
5917: LD_INT 5
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
5927: LD_ADDR_OWVAR 37
5931: PUSH
5932: LD_VAR 0 19
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_VAR 0 19
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
5951: LD_VAR 0 10
5955: PUSH
5956: LD_VAR 0 14
5960: ARRAY
5961: PUSH
5962: LD_INT 4
5964: EQUAL
5965: PUSH
5966: LD_VAR 0 10
5970: PUSH
5971: LD_VAR 0 14
5975: ARRAY
5976: PUSH
5977: LD_INT 5
5979: EQUAL
5980: OR
5981: PUSH
5982: LD_VAR 0 10
5986: PUSH
5987: LD_VAR 0 14
5991: ARRAY
5992: PUSH
5993: LD_INT 9
5995: EQUAL
5996: OR
5997: PUSH
5998: LD_VAR 0 10
6002: PUSH
6003: LD_VAR 0 14
6007: ARRAY
6008: PUSH
6009: LD_INT 11
6011: EQUAL
6012: OR
6013: PUSH
6014: LD_VAR 0 10
6018: PUSH
6019: LD_VAR 0 14
6023: ARRAY
6024: PUSH
6025: LD_INT 7
6027: EQUAL
6028: OR
6029: IFFALSE 6078
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
6031: LD_ADDR_VAR 0 19
6035: PUSH
6036: LD_INT 2
6038: PUSH
6039: LD_INT 3
6041: PUSH
6042: LD_INT 4
6044: PUSH
6045: LD_INT 5
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6054: LD_ADDR_OWVAR 37
6058: PUSH
6059: LD_VAR 0 19
6063: PUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_VAR 0 19
6071: PPUSH
6072: CALL_OW 12
6076: ARRAY
6077: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
6078: LD_VAR 0 10
6082: PUSH
6083: LD_VAR 0 14
6087: ARRAY
6088: PUSH
6089: LD_INT 8
6091: EQUAL
6092: PUSH
6093: LD_VAR 0 10
6097: PUSH
6098: LD_VAR 0 14
6102: ARRAY
6103: PUSH
6104: LD_INT 6
6106: EQUAL
6107: OR
6108: PUSH
6109: LD_VAR 0 10
6113: PUSH
6114: LD_VAR 0 14
6118: ARRAY
6119: PUSH
6120: LD_INT 10
6122: EQUAL
6123: OR
6124: IFFALSE 6165
// begin amChassisTab = [ 4 , 5 ] ;
6126: LD_ADDR_VAR 0 19
6130: PUSH
6131: LD_INT 4
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6141: LD_ADDR_OWVAR 37
6145: PUSH
6146: LD_VAR 0 19
6150: PUSH
6151: LD_INT 1
6153: PPUSH
6154: LD_VAR 0 19
6158: PPUSH
6159: CALL_OW 12
6163: ARRAY
6164: ST_TO_ADDR
// end ; end ;
6165: GO 5865
6167: POP
6168: POP
// veh = CreateVehicle ;
6169: LD_ADDR_VAR 0 16
6173: PUSH
6174: CALL_OW 45
6178: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6179: LD_VAR 0 16
6183: PPUSH
6184: LD_VAR 0 1
6188: PPUSH
6189: LD_INT 0
6191: PPUSH
6192: CALL_OW 49
// if vc_control = 1 then
6196: LD_OWVAR 38
6200: PUSH
6201: LD_INT 1
6203: EQUAL
6204: IFFALSE 6261
// begin hc_gallery =  ;
6206: LD_ADDR_OWVAR 33
6210: PUSH
6211: LD_STRING 
6213: ST_TO_ADDR
// hc_name =  ;
6214: LD_ADDR_OWVAR 26
6218: PUSH
6219: LD_STRING 
6221: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: LD_VAR 0 4
6232: PPUSH
6233: CALL_OW 380
// un = CreateHuman ;
6237: LD_ADDR_VAR 0 15
6241: PUSH
6242: CALL_OW 44
6246: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6247: LD_VAR 0 15
6251: PPUSH
6252: LD_VAR 0 16
6256: PPUSH
6257: CALL_OW 52
// end ; i = i + 1 ;
6261: LD_ADDR_VAR 0 13
6265: PUSH
6266: LD_VAR 0 13
6270: PUSH
6271: LD_INT 1
6273: PLUS
6274: ST_TO_ADDR
// end ; if nation = 2 then
6275: LD_VAR 0 5
6279: PUSH
6280: LD_INT 2
6282: EQUAL
6283: IFFALSE 6785
// begin uc_side = side ;
6285: LD_ADDR_OWVAR 20
6289: PUSH
6290: LD_VAR 0 2
6294: ST_TO_ADDR
// uc_nation = nation ;
6295: LD_ADDR_OWVAR 21
6299: PUSH
6300: LD_VAR 0 5
6304: ST_TO_ADDR
// vc_engine = vehengine ;
6305: LD_ADDR_OWVAR 39
6309: PUSH
6310: LD_VAR 0 6
6314: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
6315: LD_INT 22
6317: PUSH
6318: LD_VAR 0 2
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 33
6339: PUSH
6340: LD_INT 2
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: PUSH
6347: LD_INT 50
6349: PUSH
6350: EMPTY
6351: LIST
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PPUSH
6359: CALL_OW 69
6363: PUSH
6364: LD_INT 8
6366: LESSEQUAL
6367: IFFALSE 6395
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
6369: LD_ADDR_OWVAR 38
6373: PUSH
6374: LD_VAR 0 7
6378: PUSH
6379: LD_INT 1
6381: PPUSH
6382: LD_VAR 0 7
6386: PPUSH
6387: CALL_OW 12
6391: ARRAY
6392: ST_TO_ADDR
6393: GO 6403
// vc_control = control_apeman ;
6395: LD_ADDR_OWVAR 38
6399: PUSH
6400: LD_INT 5
6402: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
6403: LD_ADDR_OWVAR 40
6407: PUSH
6408: LD_VAR 0 9
6412: PUSH
6413: LD_INT 1
6415: PPUSH
6416: LD_VAR 0 9
6420: PPUSH
6421: CALL_OW 12
6425: ARRAY
6426: ST_TO_ADDR
// for j = 1 to ARWeapons do
6427: LD_ADDR_VAR 0 14
6431: PUSH
6432: DOUBLE
6433: LD_INT 1
6435: DEC
6436: ST_TO_ADDR
6437: LD_VAR 0 9
6441: PUSH
6442: FOR_TO
6443: IFFALSE 6677
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
6445: LD_VAR 0 9
6449: PUSH
6450: LD_VAR 0 14
6454: ARRAY
6455: PUSH
6456: LD_INT 24
6458: EQUAL
6459: PUSH
6460: LD_VAR 0 9
6464: PUSH
6465: LD_VAR 0 14
6469: ARRAY
6470: PUSH
6471: LD_INT 22
6473: EQUAL
6474: OR
6475: PUSH
6476: LD_VAR 0 9
6480: PUSH
6481: LD_VAR 0 14
6485: ARRAY
6486: PUSH
6487: LD_INT 23
6489: EQUAL
6490: OR
6491: PUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 30
6505: EQUAL
6506: OR
6507: IFFALSE 6556
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
6509: LD_ADDR_VAR 0 18
6513: PUSH
6514: LD_INT 11
6516: PUSH
6517: LD_INT 12
6519: PUSH
6520: LD_INT 13
6522: PUSH
6523: LD_INT 14
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
6532: LD_ADDR_OWVAR 37
6536: PUSH
6537: LD_VAR 0 18
6541: PUSH
6542: LD_INT 1
6544: PPUSH
6545: LD_VAR 0 18
6549: PPUSH
6550: CALL_OW 12
6554: ARRAY
6555: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
6556: LD_VAR 0 9
6560: PUSH
6561: LD_VAR 0 14
6565: ARRAY
6566: PUSH
6567: LD_INT 29
6569: EQUAL
6570: PUSH
6571: LD_VAR 0 9
6575: PUSH
6576: LD_VAR 0 14
6580: ARRAY
6581: PUSH
6582: LD_INT 28
6584: EQUAL
6585: OR
6586: PUSH
6587: LD_VAR 0 9
6591: PUSH
6592: LD_VAR 0 14
6596: ARRAY
6597: PUSH
6598: LD_INT 27
6600: EQUAL
6601: OR
6602: PUSH
6603: LD_VAR 0 9
6607: PUSH
6608: LD_VAR 0 14
6612: ARRAY
6613: PUSH
6614: LD_INT 26
6616: EQUAL
6617: OR
6618: PUSH
6619: LD_VAR 0 9
6623: PUSH
6624: LD_VAR 0 14
6628: ARRAY
6629: PUSH
6630: LD_INT 25
6632: EQUAL
6633: OR
6634: IFFALSE 6675
// begin arChassisTab = [ 13 , 14 ] ;
6636: LD_ADDR_VAR 0 18
6640: PUSH
6641: LD_INT 13
6643: PUSH
6644: LD_INT 14
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
6651: LD_ADDR_OWVAR 37
6655: PUSH
6656: LD_VAR 0 18
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_VAR 0 18
6668: PPUSH
6669: CALL_OW 12
6673: ARRAY
6674: ST_TO_ADDR
// end ; end ;
6675: GO 6442
6677: POP
6678: POP
// veh = CreateVehicle ;
6679: LD_ADDR_VAR 0 16
6683: PUSH
6684: CALL_OW 45
6688: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6689: LD_VAR 0 16
6693: PPUSH
6694: LD_VAR 0 1
6698: PPUSH
6699: LD_INT 0
6701: PPUSH
6702: CALL_OW 49
// if vc_control = 1 then
6706: LD_OWVAR 38
6710: PUSH
6711: LD_INT 1
6713: EQUAL
6714: IFFALSE 6771
// begin hc_gallery =  ;
6716: LD_ADDR_OWVAR 33
6720: PUSH
6721: LD_STRING 
6723: ST_TO_ADDR
// hc_name =  ;
6724: LD_ADDR_OWVAR 26
6728: PUSH
6729: LD_STRING 
6731: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6732: LD_INT 0
6734: PPUSH
6735: LD_INT 3
6737: PPUSH
6738: LD_VAR 0 4
6742: PPUSH
6743: CALL_OW 380
// un = CreateHuman ;
6747: LD_ADDR_VAR 0 15
6751: PUSH
6752: CALL_OW 44
6756: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6757: LD_VAR 0 15
6761: PPUSH
6762: LD_VAR 0 16
6766: PPUSH
6767: CALL_OW 52
// end ; i = i + 1 ;
6771: LD_ADDR_VAR 0 13
6775: PUSH
6776: LD_VAR 0 13
6780: PUSH
6781: LD_INT 1
6783: PLUS
6784: ST_TO_ADDR
// end ; if nation = 3 then
6785: LD_VAR 0 5
6789: PUSH
6790: LD_INT 3
6792: EQUAL
6793: IFFALSE 7199
// begin uc_side = side ;
6795: LD_ADDR_OWVAR 20
6799: PUSH
6800: LD_VAR 0 2
6804: ST_TO_ADDR
// uc_nation = nation ;
6805: LD_ADDR_OWVAR 21
6809: PUSH
6810: LD_VAR 0 5
6814: ST_TO_ADDR
// vc_engine = vehengine ;
6815: LD_ADDR_OWVAR 39
6819: PUSH
6820: LD_VAR 0 6
6824: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
6825: LD_ADDR_OWVAR 38
6829: PUSH
6830: LD_VAR 0 7
6834: PUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_VAR 0 7
6842: PPUSH
6843: CALL_OW 12
6847: ARRAY
6848: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
6849: LD_ADDR_OWVAR 40
6853: PUSH
6854: LD_VAR 0 8
6858: PUSH
6859: LD_INT 1
6861: PPUSH
6862: LD_VAR 0 8
6866: PPUSH
6867: CALL_OW 12
6871: ARRAY
6872: ST_TO_ADDR
// for j = 1 to RuWeapons do
6873: LD_ADDR_VAR 0 14
6877: PUSH
6878: DOUBLE
6879: LD_INT 1
6881: DEC
6882: ST_TO_ADDR
6883: LD_VAR 0 8
6887: PUSH
6888: FOR_TO
6889: IFFALSE 7075
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
6891: LD_VAR 0 8
6895: PUSH
6896: LD_VAR 0 14
6900: ARRAY
6901: PUSH
6902: LD_INT 42
6904: EQUAL
6905: PUSH
6906: LD_VAR 0 8
6910: PUSH
6911: LD_VAR 0 14
6915: ARRAY
6916: PUSH
6917: LD_INT 43
6919: EQUAL
6920: OR
6921: PUSH
6922: LD_VAR 0 8
6926: PUSH
6927: LD_VAR 0 14
6931: ARRAY
6932: PUSH
6933: LD_INT 44
6935: EQUAL
6936: OR
6937: PUSH
6938: LD_VAR 0 8
6942: PUSH
6943: LD_VAR 0 14
6947: ARRAY
6948: PUSH
6949: LD_INT 45
6951: EQUAL
6952: OR
6953: PUSH
6954: LD_VAR 0 8
6958: PUSH
6959: LD_VAR 0 14
6963: ARRAY
6964: PUSH
6965: LD_INT 49
6967: EQUAL
6968: OR
6969: IFFALSE 7006
// begin ruChassisTab = [ 24 ] ;
6971: LD_ADDR_VAR 0 17
6975: PUSH
6976: LD_INT 24
6978: PUSH
6979: EMPTY
6980: LIST
6981: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
6982: LD_ADDR_OWVAR 37
6986: PUSH
6987: LD_VAR 0 17
6991: PUSH
6992: LD_INT 1
6994: PPUSH
6995: LD_VAR 0 17
6999: PPUSH
7000: CALL_OW 12
7004: ARRAY
7005: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
7006: LD_VAR 0 8
7010: PUSH
7011: LD_VAR 0 14
7015: ARRAY
7016: PUSH
7017: LD_INT 46
7019: EQUAL
7020: PUSH
7021: LD_VAR 0 8
7025: PUSH
7026: LD_VAR 0 14
7030: ARRAY
7031: PUSH
7032: LD_INT 47
7034: EQUAL
7035: OR
7036: IFFALSE 7073
// begin ruChassisTab = [ 24 ] ;
7038: LD_ADDR_VAR 0 17
7042: PUSH
7043: LD_INT 24
7045: PUSH
7046: EMPTY
7047: LIST
7048: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7049: LD_ADDR_OWVAR 37
7053: PUSH
7054: LD_VAR 0 17
7058: PUSH
7059: LD_INT 1
7061: PPUSH
7062: LD_VAR 0 17
7066: PPUSH
7067: CALL_OW 12
7071: ARRAY
7072: ST_TO_ADDR
// end ; end ;
7073: GO 6888
7075: POP
7076: POP
// veh = CreateVehicle ;
7077: LD_ADDR_VAR 0 16
7081: PUSH
7082: CALL_OW 45
7086: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7087: LD_VAR 0 16
7091: PPUSH
7092: LD_VAR 0 1
7096: PPUSH
7097: LD_INT 0
7099: PPUSH
7100: CALL_OW 49
// if vc_control = 1 then
7104: LD_OWVAR 38
7108: PUSH
7109: LD_INT 1
7111: EQUAL
7112: IFFALSE 7199
// begin if uc_side = 8 then
7114: LD_OWVAR 20
7118: PUSH
7119: LD_INT 8
7121: EQUAL
7122: IFFALSE 7134
// uc_nation = 2 else
7124: LD_ADDR_OWVAR 21
7128: PUSH
7129: LD_INT 2
7131: ST_TO_ADDR
7132: GO 7144
// uc_nation = nation ;
7134: LD_ADDR_OWVAR 21
7138: PUSH
7139: LD_VAR 0 5
7143: ST_TO_ADDR
// hc_gallery =  ;
7144: LD_ADDR_OWVAR 33
7148: PUSH
7149: LD_STRING 
7151: ST_TO_ADDR
// hc_name =  ;
7152: LD_ADDR_OWVAR 26
7156: PUSH
7157: LD_STRING 
7159: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7160: LD_INT 0
7162: PPUSH
7163: LD_INT 3
7165: PPUSH
7166: LD_VAR 0 4
7170: PPUSH
7171: CALL_OW 380
// un = CreateHuman ;
7175: LD_ADDR_VAR 0 15
7179: PUSH
7180: CALL_OW 44
7184: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7185: LD_VAR 0 15
7189: PPUSH
7190: LD_VAR 0 16
7194: PPUSH
7195: CALL_OW 52
// end ; end ; end ;
7199: GO 5776
7201: POP
7202: POP
// repeat wait ( 0 0$1 ) ;
7203: LD_INT 35
7205: PPUSH
7206: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
7210: LD_ADDR_VAR 0 20
7214: PUSH
7215: LD_INT 22
7217: PUSH
7218: LD_VAR 0 2
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 21
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 24
7239: PUSH
7240: LD_INT 250
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: PUSH
7257: LD_INT 22
7259: PUSH
7260: LD_VAR 0 2
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 21
7271: PUSH
7272: LD_INT 2
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 34
7281: PUSH
7282: LD_INT 49
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: LIST
7293: PPUSH
7294: CALL_OW 69
7298: DIFF
7299: ST_TO_ADDR
// if vehicleOK_list > 0 then
7300: LD_VAR 0 20
7304: PUSH
7305: LD_INT 0
7307: GREATER
7308: IFFALSE 7527
// begin for i in vehicleOK_list do
7310: LD_ADDR_VAR 0 13
7314: PUSH
7315: LD_VAR 0 20
7319: PUSH
7320: FOR_IN
7321: IFFALSE 7525
// begin if GetSide ( i ) <> side then
7323: LD_VAR 0 13
7327: PPUSH
7328: CALL_OW 255
7332: PUSH
7333: LD_VAR 0 2
7337: NONEQUAL
7338: IFFALSE 7351
// begin ComStop ( i ) ;
7340: LD_VAR 0 13
7344: PPUSH
7345: CALL_OW 141
// continue ;
7349: GO 7320
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , i ) ;
7351: LD_ADDR_VAR 0 21
7355: PUSH
7356: LD_INT 81
7358: PUSH
7359: LD_VAR 0 2
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PPUSH
7368: CALL_OW 69
7372: PPUSH
7373: LD_VAR 0 13
7377: PPUSH
7378: CALL_OW 74
7382: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7383: LD_ADDR_VAR 0 22
7387: PUSH
7388: LD_INT 81
7390: PUSH
7391: LD_VAR 0 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: LD_INT 2
7402: PUSH
7403: LD_INT 59
7405: PUSH
7406: EMPTY
7407: LIST
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 1
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 21
7421: PUSH
7422: LD_INT 2
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: EMPTY
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: PPUSH
7447: LD_VAR 0 13
7451: PPUSH
7452: CALL_OW 74
7456: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7457: LD_VAR 0 13
7461: PPUSH
7462: LD_VAR 0 21
7466: PPUSH
7467: CALL_OW 296
7471: PUSH
7472: LD_INT 8
7474: PLUS
7475: PUSH
7476: LD_VAR 0 13
7480: PPUSH
7481: LD_VAR 0 22
7485: PPUSH
7486: CALL_OW 296
7490: LESS
7491: IFFALSE 7509
// begin ComAttackUnit ( i , target1 ) ;
7493: LD_VAR 0 13
7497: PPUSH
7498: LD_VAR 0 21
7502: PPUSH
7503: CALL_OW 115
// end else
7507: GO 7523
// begin ComAttackUnit ( i , target2 ) ;
7509: LD_VAR 0 13
7513: PPUSH
7514: LD_VAR 0 22
7518: PPUSH
7519: CALL_OW 115
// end ; end ;
7523: GO 7320
7525: POP
7526: POP
// end ; until vehicleOK_list = 0 ;
7527: LD_VAR 0 20
7531: PUSH
7532: LD_INT 0
7534: EQUAL
7535: IFFALSE 7203
// end ;
7537: LD_VAR 0 12
7541: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
7542: LD_INT 0
7544: PPUSH
7545: PPUSH
7546: PPUSH
// uc_side = 0 ;
7547: LD_ADDR_OWVAR 20
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// uc_nation = 0 ;
7555: LD_ADDR_OWVAR 21
7559: PUSH
7560: LD_INT 0
7562: ST_TO_ADDR
// InitHc ;
7563: CALL_OW 19
// InitVc ;
7567: CALL_OW 20
// if mastodonts then
7571: LD_VAR 0 6
7575: IFFALSE 7642
// for i = 1 to mastodonts do
7577: LD_ADDR_VAR 0 11
7581: PUSH
7582: DOUBLE
7583: LD_INT 1
7585: DEC
7586: ST_TO_ADDR
7587: LD_VAR 0 6
7591: PUSH
7592: FOR_TO
7593: IFFALSE 7640
// begin vc_chassis := 31 ;
7595: LD_ADDR_OWVAR 37
7599: PUSH
7600: LD_INT 31
7602: ST_TO_ADDR
// vc_control := control_rider ;
7603: LD_ADDR_OWVAR 38
7607: PUSH
7608: LD_INT 4
7610: ST_TO_ADDR
// animal := CreateVehicle ;
7611: LD_ADDR_VAR 0 12
7615: PUSH
7616: CALL_OW 45
7620: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7621: LD_VAR 0 12
7625: PPUSH
7626: LD_VAR 0 8
7630: PPUSH
7631: LD_INT 0
7633: PPUSH
7634: CALL_OW 49
// end ;
7638: GO 7592
7640: POP
7641: POP
// if horses then
7642: LD_VAR 0 5
7646: IFFALSE 7713
// for i = 1 to horses do
7648: LD_ADDR_VAR 0 11
7652: PUSH
7653: DOUBLE
7654: LD_INT 1
7656: DEC
7657: ST_TO_ADDR
7658: LD_VAR 0 5
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7711
// begin hc_class := 21 ;
7666: LD_ADDR_OWVAR 28
7670: PUSH
7671: LD_INT 21
7673: ST_TO_ADDR
// hc_gallery :=  ;
7674: LD_ADDR_OWVAR 33
7678: PUSH
7679: LD_STRING 
7681: ST_TO_ADDR
// animal := CreateHuman ;
7682: LD_ADDR_VAR 0 12
7686: PUSH
7687: CALL_OW 44
7691: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7692: LD_VAR 0 12
7696: PPUSH
7697: LD_VAR 0 8
7701: PPUSH
7702: LD_INT 0
7704: PPUSH
7705: CALL_OW 49
// end ;
7709: GO 7663
7711: POP
7712: POP
// if birds then
7713: LD_VAR 0 1
7717: IFFALSE 7784
// for i = 1 to birds do
7719: LD_ADDR_VAR 0 11
7723: PUSH
7724: DOUBLE
7725: LD_INT 1
7727: DEC
7728: ST_TO_ADDR
7729: LD_VAR 0 1
7733: PUSH
7734: FOR_TO
7735: IFFALSE 7782
// begin hc_class = 18 ;
7737: LD_ADDR_OWVAR 28
7741: PUSH
7742: LD_INT 18
7744: ST_TO_ADDR
// hc_gallery =  ;
7745: LD_ADDR_OWVAR 33
7749: PUSH
7750: LD_STRING 
7752: ST_TO_ADDR
// animal := CreateHuman ;
7753: LD_ADDR_VAR 0 12
7757: PUSH
7758: CALL_OW 44
7762: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7763: LD_VAR 0 12
7767: PPUSH
7768: LD_VAR 0 8
7772: PPUSH
7773: LD_INT 0
7775: PPUSH
7776: CALL_OW 49
// end ;
7780: GO 7734
7782: POP
7783: POP
// if tigers then
7784: LD_VAR 0 2
7788: IFFALSE 7872
// for i = 1 to tigers do
7790: LD_ADDR_VAR 0 11
7794: PUSH
7795: DOUBLE
7796: LD_INT 1
7798: DEC
7799: ST_TO_ADDR
7800: LD_VAR 0 2
7804: PUSH
7805: FOR_TO
7806: IFFALSE 7870
// begin hc_class = class_tiger ;
7808: LD_ADDR_OWVAR 28
7812: PUSH
7813: LD_INT 14
7815: ST_TO_ADDR
// hc_gallery =  ;
7816: LD_ADDR_OWVAR 33
7820: PUSH
7821: LD_STRING 
7823: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7824: LD_ADDR_OWVAR 35
7828: PUSH
7829: LD_INT 7
7831: NEG
7832: PPUSH
7833: LD_INT 7
7835: PPUSH
7836: CALL_OW 12
7840: ST_TO_ADDR
// animal := CreateHuman ;
7841: LD_ADDR_VAR 0 12
7845: PUSH
7846: CALL_OW 44
7850: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7851: LD_VAR 0 12
7855: PPUSH
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_INT 0
7863: PPUSH
7864: CALL_OW 49
// end ;
7868: GO 7805
7870: POP
7871: POP
// if apemans then
7872: LD_VAR 0 3
7876: IFFALSE 7999
// for i = 1 to apemans do
7878: LD_ADDR_VAR 0 11
7882: PUSH
7883: DOUBLE
7884: LD_INT 1
7886: DEC
7887: ST_TO_ADDR
7888: LD_VAR 0 3
7892: PUSH
7893: FOR_TO
7894: IFFALSE 7997
// begin hc_class = class_apeman ;
7896: LD_ADDR_OWVAR 28
7900: PUSH
7901: LD_INT 12
7903: ST_TO_ADDR
// hc_gallery =  ;
7904: LD_ADDR_OWVAR 33
7908: PUSH
7909: LD_STRING 
7911: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
7912: LD_ADDR_OWVAR 35
7916: PUSH
7917: LD_INT 5
7919: NEG
7920: PPUSH
7921: LD_INT 5
7923: PPUSH
7924: CALL_OW 12
7928: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
7929: LD_ADDR_OWVAR 31
7933: PUSH
7934: LD_INT 1
7936: PPUSH
7937: LD_INT 3
7939: PPUSH
7940: CALL_OW 12
7944: PUSH
7945: LD_INT 1
7947: PPUSH
7948: LD_INT 3
7950: PPUSH
7951: CALL_OW 12
7955: PUSH
7956: LD_INT 0
7958: PUSH
7959: LD_INT 0
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
// animal := CreateHuman ;
7968: LD_ADDR_VAR 0 12
7972: PUSH
7973: CALL_OW 44
7977: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
7978: LD_VAR 0 12
7982: PPUSH
7983: LD_VAR 0 8
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: CALL_OW 49
// end ;
7995: GO 7893
7997: POP
7998: POP
// if enchidnas then
7999: LD_VAR 0 4
8003: IFFALSE 8070
// for i = 1 to enchidnas do
8005: LD_ADDR_VAR 0 11
8009: PUSH
8010: DOUBLE
8011: LD_INT 1
8013: DEC
8014: ST_TO_ADDR
8015: LD_VAR 0 4
8019: PUSH
8020: FOR_TO
8021: IFFALSE 8068
// begin hc_class = 13 ;
8023: LD_ADDR_OWVAR 28
8027: PUSH
8028: LD_INT 13
8030: ST_TO_ADDR
// hc_gallery =  ;
8031: LD_ADDR_OWVAR 33
8035: PUSH
8036: LD_STRING 
8038: ST_TO_ADDR
// animal := CreateHuman ;
8039: LD_ADDR_VAR 0 12
8043: PUSH
8044: CALL_OW 44
8048: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
8049: LD_VAR 0 12
8053: PPUSH
8054: LD_VAR 0 8
8058: PPUSH
8059: LD_INT 0
8061: PPUSH
8062: CALL_OW 49
// end ;
8066: GO 8020
8068: POP
8069: POP
// if not wat_area then
8070: LD_VAR 0 9
8074: NOT
8075: IFFALSE 8079
// exit ;
8077: GO 8150
// if fishes then
8079: LD_VAR 0 7
8083: IFFALSE 8150
// for i = 1 to fishes do
8085: LD_ADDR_VAR 0 11
8089: PUSH
8090: DOUBLE
8091: LD_INT 1
8093: DEC
8094: ST_TO_ADDR
8095: LD_VAR 0 7
8099: PUSH
8100: FOR_TO
8101: IFFALSE 8148
// begin hc_class = 20 ;
8103: LD_ADDR_OWVAR 28
8107: PUSH
8108: LD_INT 20
8110: ST_TO_ADDR
// hc_gallery =  ;
8111: LD_ADDR_OWVAR 33
8115: PUSH
8116: LD_STRING 
8118: ST_TO_ADDR
// animal := CreateHuman ;
8119: LD_ADDR_VAR 0 12
8123: PUSH
8124: CALL_OW 44
8128: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
8129: LD_VAR 0 12
8133: PPUSH
8134: LD_VAR 0 9
8138: PPUSH
8139: LD_INT 0
8141: PPUSH
8142: CALL_OW 49
// end ;
8146: GO 8100
8148: POP
8149: POP
// end ; end_of_file
8150: LD_VAR 0 10
8154: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
8155: LD_VAR 0 1
8159: PUSH
8160: LD_INT 1
8162: EQUAL
8163: PUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 4
8171: EQUAL
8172: AND
8173: IFFALSE 8182
// YouLost ( sojusz ) ;
8175: LD_STRING sojusz
8177: PPUSH
8178: CALL_OW 104
// end ;
8182: PPOPN 2
8184: END
// on BuildingCaptured ( building , side , human ) do begin if side = 4 then
8185: LD_VAR 0 2
8189: PUSH
8190: LD_INT 4
8192: EQUAL
8193: IFFALSE 8207
// SetSide ( building , 4 ) ;
8195: LD_VAR 0 1
8199: PPUSH
8200: LD_INT 4
8202: PPUSH
8203: CALL_OW 235
// end ;
8207: PPOPN 3
8209: END
// on UnitDestroyed ( unit ) do var i ;
8210: LD_INT 0
8212: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 255
8222: PUSH
8223: LD_INT 1
8225: EQUAL
8226: PUSH
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 247
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: AND
8241: IFFALSE 8292
// begin unitLost = unitLost + 1 ;
8243: LD_ADDR_EXP 30
8247: PUSH
8248: LD_EXP 30
8252: PUSH
8253: LD_INT 1
8255: PLUS
8256: ST_TO_ADDR
// if unit in [ DeltaDoctor , Gordon , Peter ] then
8257: LD_VAR 0 1
8261: PUSH
8262: LD_EXP 5
8266: PUSH
8267: LD_EXP 3
8271: PUSH
8272: LD_EXP 4
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: IN
8282: IFFALSE 8292
// amSciStatus = 0 ;
8284: LD_ADDR_EXP 25
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// end ; end ;
8292: PPOPN 2
8294: END
// on SiberiteRocketExploded ( unit , x , y ) do var i ;
8295: LD_INT 0
8297: PPUSH
// begin if not siberiteRocketStatus then
8298: LD_EXP 33
8302: NOT
8303: IFFALSE 8355
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , x , y , 25 ] ] ) then
8305: LD_INT 22
8307: PUSH
8308: LD_INT 3
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: LD_INT 92
8317: PUSH
8318: LD_VAR 0 2
8322: PUSH
8323: LD_VAR 0 3
8327: PUSH
8328: LD_INT 25
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PPUSH
8341: CALL_OW 69
8345: IFFALSE 8355
// siberiteRocketStatus := true ;
8347: LD_ADDR_EXP 33
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// end ; end_of_file
8355: PPOPN 4
8357: END
// every 1 do
8358: GO 8360
8360: DISABLE
// begin InGameOn ;
8361: CALL_OW 8
// SetClass ( Stevens , 4 ) ;
8365: LD_EXP 1
8369: PPUSH
8370: LD_INT 4
8372: PPUSH
8373: CALL_OW 336
// RevealFogArea ( 1 , AmericanBaseArea ) ;
8377: LD_INT 1
8379: PPUSH
8380: LD_INT 1
8382: PPUSH
8383: CALL_OW 332
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
8387: LD_EXP 3
8391: PUSH
8392: LD_EXP 4
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PPUSH
8401: CALL_OW 87
// Say ( Peter , D1-Pet-1 ) ;
8405: LD_EXP 4
8409: PPUSH
8410: LD_STRING D1-Pet-1
8412: PPUSH
8413: CALL_OW 88
// if IsOK ( Stevens ) then
8417: LD_EXP 1
8421: PPUSH
8422: CALL_OW 302
8426: IFFALSE 8442
// Say ( Stevens , D1-Stev-1 ) else
8428: LD_EXP 1
8432: PPUSH
8433: LD_STRING D1-Stev-1
8435: PPUSH
8436: CALL_OW 88
8440: GO 8454
// Say ( Baker , D1-Stev-1 ) ;
8442: LD_EXP 2
8446: PPUSH
8447: LD_STRING D1-Stev-1
8449: PPUSH
8450: CALL_OW 88
// CenterOnXY ( 108 , 140 ) ;
8454: LD_INT 108
8456: PPUSH
8457: LD_INT 140
8459: PPUSH
8460: CALL_OW 84
// wait ( 0 0$2 ) ;
8464: LD_INT 70
8466: PPUSH
8467: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
8471: LD_EXP 3
8475: PUSH
8476: LD_EXP 4
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PPUSH
8485: CALL_OW 87
// SayRadio ( Powell , D1-Pow-1 ) ;
8489: LD_EXP 19
8493: PPUSH
8494: LD_STRING D1-Pow-1
8496: PPUSH
8497: CALL_OW 94
// if IsOK ( Stevens ) then
8501: LD_EXP 1
8505: PPUSH
8506: CALL_OW 302
8510: IFFALSE 8526
// Say ( Stevens , D1-Stev-2 ) else
8512: LD_EXP 1
8516: PPUSH
8517: LD_STRING D1-Stev-2
8519: PPUSH
8520: CALL_OW 88
8524: GO 8538
// Say ( Baker , D1-Stev-2 ) ;
8526: LD_EXP 2
8530: PPUSH
8531: LD_STRING D1-Stev-2
8533: PPUSH
8534: CALL_OW 88
// PrepareFirstAtacks ;
8538: CALL 2373 0 0
// CenterOnXY ( 108 , 140 ) ;
8542: LD_INT 108
8544: PPUSH
8545: LD_INT 140
8547: PPUSH
8548: CALL_OW 84
// wait ( 0 0$5 ) ;
8552: LD_INT 175
8554: PPUSH
8555: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff Peter , D1-Rand-1 ,  ) ;
8559: LD_INT 22
8561: PUSH
8562: LD_INT 1
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 21
8571: PUSH
8572: LD_INT 1
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 26
8581: PUSH
8582: LD_INT 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: LD_INT 25
8594: PUSH
8595: LD_INT 1
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 25
8604: PUSH
8605: LD_INT 2
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 3
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 4
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 5
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 69
8660: PUSH
8661: LD_EXP 4
8665: DIFF
8666: PPUSH
8667: LD_STRING D1-Rand-1
8669: PPUSH
8670: LD_STRING 
8672: PPUSH
8673: CALL 3850 0 3
// wait ( 0 0$3 ) ;
8677: LD_INT 105
8679: PPUSH
8680: CALL_OW 67
// CenterNowOnUnits ( [ Gordon , Peter ] ) ;
8684: LD_EXP 3
8688: PUSH
8689: LD_EXP 4
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 87
// Say ( Peter , D1-Pet-2 ) ;
8702: LD_EXP 4
8706: PPUSH
8707: LD_STRING D1-Pet-2
8709: PPUSH
8710: CALL_OW 88
// if IsOK ( Stevens ) then
8714: LD_EXP 1
8718: PPUSH
8719: CALL_OW 302
8723: IFFALSE 8739
// Say ( Stevens , D1-Stev-3 ) else
8725: LD_EXP 1
8729: PPUSH
8730: LD_STRING D1-Stev-3
8732: PPUSH
8733: CALL_OW 88
8737: GO 8751
// Say ( Baker , D1-Stev-3 ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_STRING D1-Stev-3
8746: PPUSH
8747: CALL_OW 88
// Say ( Peter , D1-Pet-3 ) ;
8751: LD_EXP 4
8755: PPUSH
8756: LD_STRING D1-Pet-3
8758: PPUSH
8759: CALL_OW 88
// SetLives ( FilterUnitsInArea ( ObsBaseArea , [ f_side , 1 ] ) , 150 ) ;
8763: LD_INT 9
8765: PPUSH
8766: LD_INT 22
8768: PUSH
8769: LD_INT 1
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PPUSH
8776: CALL_OW 70
8780: PPUSH
8781: LD_INT 150
8783: PPUSH
8784: CALL_OW 234
// InGameOff ;
8788: CALL_OW 9
// if IsOk ( Stevens ) then
8792: LD_EXP 1
8796: PPUSH
8797: CALL_OW 302
8801: IFFALSE 8812
// ChangeMissionObjectives ( C1stev ) else
8803: LD_STRING C1stev
8805: PPUSH
8806: CALL_OW 337
8810: GO 8819
// ChangeMissionObjectives ( C1baker ) ;
8812: LD_STRING C1baker
8814: PPUSH
8815: CALL_OW 337
// end ;
8819: END
// every 0 0$1 trigger EscapeAvalaible = 1 do
8820: LD_EXP 27
8824: PUSH
8825: LD_INT 1
8827: EQUAL
8828: IFFALSE 8880
8830: GO 8832
8832: DISABLE
// begin enable ;
8833: ENABLE
// allUnitsLengh = TabLenght ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) ;
8834: LD_ADDR_EXP 31
8838: PUSH
8839: LD_INT 22
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 21
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 50
8861: PUSH
8862: EMPTY
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: PPUSH
8870: CALL_OW 69
8874: PPUSH
8875: CALL 3498 0 1
8879: ST_TO_ADDR
// end ;
8880: END
// every 0 0$10 trigger ruAttacksCounter = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
8881: LD_EXP 24
8885: PUSH
8886: LD_INT 3
8888: EQUAL
8889: PUSH
8890: LD_INT 22
8892: PUSH
8893: LD_INT 3
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 21
8905: PUSH
8906: LD_INT 2
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 21
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PPUSH
8932: CALL_OW 69
8936: PUSH
8937: LD_INT 0
8939: EQUAL
8940: AND
8941: IFFALSE 8954
8943: GO 8945
8945: DISABLE
// EscapeAvalaible = 1 ;
8946: LD_ADDR_EXP 27
8950: PUSH
8951: LD_INT 1
8953: ST_TO_ADDR
8954: END
// every 0 0$1 trigger EscapeAvalaible = 1 do var i , tmp ;
8955: LD_EXP 27
8959: PUSH
8960: LD_INT 1
8962: EQUAL
8963: IFFALSE 9915
8965: GO 8967
8967: DISABLE
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
// begin InGameOn ;
8972: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , true ) ;
8976: LD_INT 3
8978: PPUSH
8979: LD_INT 1
8981: PPUSH
8982: LD_INT 1
8984: PPUSH
8985: LD_INT 1
8987: PPUSH
8988: CALL_OW 80
// PlaceSeeing ( 126 , 17 , 1 , - 8 ) ;
8992: LD_INT 126
8994: PPUSH
8995: LD_INT 17
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: LD_INT 8
9003: NEG
9004: PPUSH
9005: CALL_OW 330
// CenterNowOnUnits ( amsiblab ) ;
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 87
// PrepareRussianTPUNits ;
9016: CALL 2548 0 0
// ChangeSideFog ( 3 , 1 ) ;
9020: LD_INT 3
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: CALL_OW 343
// wait ( 0 0$5 ) ;
9030: LD_INT 175
9032: PPUSH
9033: CALL_OW 67
// tmp := FilterUnitsInArea ( labHill , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9037: LD_ADDR_VAR 0 2
9041: PUSH
9042: LD_INT 15
9044: PPUSH
9045: LD_INT 22
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_INT 3
9057: PUSH
9058: LD_INT 21
9060: PUSH
9061: LD_INT 3
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 70
9080: ST_TO_ADDR
// if tmp then
9081: LD_VAR 0 2
9085: IFFALSE 9125
// for i in tmp do
9087: LD_ADDR_VAR 0 1
9091: PUSH
9092: LD_VAR 0 2
9096: PUSH
9097: FOR_IN
9098: IFFALSE 9123
// TeleportUnit ( i , 143 , 98 , 10 , true ) ;
9100: LD_VAR 0 1
9104: PPUSH
9105: LD_INT 143
9107: PPUSH
9108: LD_INT 98
9110: PPUSH
9111: LD_INT 10
9113: PPUSH
9114: LD_INT 1
9116: PPUSH
9117: CALL_OW 483
9121: GO 9097
9123: POP
9124: POP
// for i in russianTPUnits do
9125: LD_ADDR_VAR 0 1
9129: PUSH
9130: LD_EXP 26
9134: PUSH
9135: FOR_IN
9136: IFFALSE 9161
// TeleportUnit ( i , 128 , 19 , 4 , true ) ;
9138: LD_VAR 0 1
9142: PPUSH
9143: LD_INT 128
9145: PPUSH
9146: LD_INT 19
9148: PPUSH
9149: LD_INT 4
9151: PPUSH
9152: LD_INT 1
9154: PPUSH
9155: CALL_OW 483
9159: GO 9135
9161: POP
9162: POP
// wait ( 0 0$1 ) ;
9163: LD_INT 35
9165: PPUSH
9166: CALL_OW 67
// ComTurnUnit ( russianTPUnits , amsiblab ) ;
9170: LD_EXP 26
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 119
// SetSide ( amsiblab , 3 ) ;
9182: LD_INT 1
9184: PPUSH
9185: LD_INT 3
9187: PPUSH
9188: CALL_OW 235
// ComEnterUnit ( UnitFilter ( russianTPUnits , [ f_class , 4 ] ) , amsiblab ) ;
9192: LD_EXP 26
9196: PPUSH
9197: LD_INT 25
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PPUSH
9207: CALL_OW 72
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: CALL_OW 120
// for i in FilterUnitsInArea ( LabHill , [ [ f_type , unit_building ] ] ) diff [ amsiblab ] do
9219: LD_ADDR_VAR 0 1
9223: PUSH
9224: LD_INT 15
9226: PPUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: PPUSH
9240: CALL_OW 70
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: DIFF
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9271
// AddComAttackUnit ( russianTPUnits , i ) ;
9255: LD_EXP 26
9259: PPUSH
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 175
9269: GO 9252
9271: POP
9272: POP
// wait ( 0 0$2 ) ;
9273: LD_INT 70
9275: PPUSH
9276: CALL_OW 67
// if IsOK ( Peter ) then
9280: LD_EXP 4
9284: PPUSH
9285: CALL_OW 302
9289: IFFALSE 9305
// Say ( Peter , D2-Pet-1 ) else
9291: LD_EXP 4
9295: PPUSH
9296: LD_STRING D2-Pet-1
9298: PPUSH
9299: CALL_OW 88
9303: GO 9355
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) , D2-Pet-1 ,  ) ;
9305: LD_INT 22
9307: PUSH
9308: LD_INT 1
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: LD_INT 21
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 26
9327: PUSH
9328: LD_INT 1
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: PPUSH
9340: CALL_OW 69
9344: PPUSH
9345: LD_STRING D2-Pet-1
9347: PPUSH
9348: LD_STRING 
9350: PPUSH
9351: CALL 3850 0 3
// if IsOK ( Stevens ) then
9355: LD_EXP 1
9359: PPUSH
9360: CALL_OW 302
9364: IFFALSE 9380
// Say ( Stevens , D2-Stev-1 ) else
9366: LD_EXP 1
9370: PPUSH
9371: LD_STRING D2-Stev-1
9373: PPUSH
9374: CALL_OW 88
9378: GO 9392
// Say ( Baker , D2-Stev-1 ) ;
9380: LD_EXP 2
9384: PPUSH
9385: LD_STRING D2-Stev-1
9387: PPUSH
9388: CALL_OW 88
// if IsOk ( Peter ) then
9392: LD_EXP 4
9396: PPUSH
9397: CALL_OW 302
9401: IFFALSE 9417
// begin Say ( Peter , D2-Pet-2 ) ;
9403: LD_EXP 4
9407: PPUSH
9408: LD_STRING D2-Pet-2
9410: PPUSH
9411: CALL_OW 88
// end else
9415: GO 9554
// begin if IsOk ( DeltaDoctor ) then
9417: LD_EXP 5
9421: PPUSH
9422: CALL_OW 302
9426: IFFALSE 9442
// begin Say ( DeltaDoctor , D2-Pet-2 ) ;
9428: LD_EXP 5
9432: PPUSH
9433: LD_STRING D2-Pet-2
9435: PPUSH
9436: CALL_OW 88
// end else
9440: GO 9554
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-2 ,  ) ;
9442: LD_INT 22
9444: PUSH
9445: LD_INT 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 1
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 26
9464: PUSH
9465: LD_INT 1
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 2
9474: PUSH
9475: LD_INT 25
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 25
9487: PUSH
9488: LD_INT 2
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 25
9497: PUSH
9498: LD_INT 3
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: LD_INT 25
9507: PUSH
9508: LD_INT 4
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 25
9517: PUSH
9518: LD_INT 5
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PPUSH
9539: CALL_OW 69
9543: PPUSH
9544: LD_STRING D2-Pet-2
9546: PPUSH
9547: LD_STRING 
9549: PPUSH
9550: CALL 3850 0 3
// end ; end ; if IsOK ( Stevens ) then
9554: LD_EXP 1
9558: PPUSH
9559: CALL_OW 302
9563: IFFALSE 9579
// Say ( Stevens , D2-Stev-2 ) else
9565: LD_EXP 1
9569: PPUSH
9570: LD_STRING D2-Stev-2
9572: PPUSH
9573: CALL_OW 88
9577: GO 9591
// Say ( Baker , D2-Stev-2 ) ;
9579: LD_EXP 2
9583: PPUSH
9584: LD_STRING D2-Stev-2
9586: PPUSH
9587: CALL_OW 88
// if IsOk ( Peter ) then
9591: LD_EXP 4
9595: PPUSH
9596: CALL_OW 302
9600: IFFALSE 9616
// begin Say ( Peter , D2-Pet-3 ) ;
9602: LD_EXP 4
9606: PPUSH
9607: LD_STRING D2-Pet-3
9609: PPUSH
9610: CALL_OW 88
// end else
9614: GO 9753
// begin if IsOk ( DeltaDoctor ) then
9616: LD_EXP 5
9620: PPUSH
9621: CALL_OW 302
9625: IFFALSE 9641
// begin Say ( DeltaDoctor , D2-Pet-3 ) ;
9627: LD_EXP 5
9631: PPUSH
9632: LD_STRING D2-Pet-3
9634: PPUSH
9635: CALL_OW 88
// end else
9639: GO 9753
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D2-Pet-3 ,  ) ;
9641: LD_INT 22
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 21
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 26
9663: PUSH
9664: LD_INT 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 2
9673: PUSH
9674: LD_INT 25
9676: PUSH
9677: LD_INT 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 25
9686: PUSH
9687: LD_INT 2
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 25
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 25
9706: PUSH
9707: LD_INT 4
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: LD_INT 25
9716: PUSH
9717: LD_INT 5
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 69
9742: PPUSH
9743: LD_STRING D2-Pet-3
9745: PPUSH
9746: LD_STRING 
9748: PPUSH
9749: CALL 3850 0 3
// end ; end ; ComExitBuilding ( UnitsInside ( amsiblab ) ) ;
9753: LD_INT 1
9755: PPUSH
9756: CALL_OW 313
9760: PPUSH
9761: CALL_OW 122
// wait ( 0 0$2 ) ;
9765: LD_INT 70
9767: PPUSH
9768: CALL_OW 67
// for i in russianTPUnits do
9772: LD_ADDR_VAR 0 1
9776: PUSH
9777: LD_EXP 26
9781: PUSH
9782: FOR_IN
9783: IFFALSE 9808
// TeleportUnit ( i , 185 , 175 , 4 , true ) ;
9785: LD_VAR 0 1
9789: PPUSH
9790: LD_INT 185
9792: PPUSH
9793: LD_INT 175
9795: PPUSH
9796: LD_INT 4
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL_OW 483
9806: GO 9782
9808: POP
9809: POP
// wait ( 0 0$2 ) ;
9810: LD_INT 70
9812: PPUSH
9813: CALL_OW 67
// SetLives ( amsiblab , 0 ) ;
9817: LD_INT 1
9819: PPUSH
9820: LD_INT 0
9822: PPUSH
9823: CALL_OW 234
// wait ( 0 0$2 ) ;
9827: LD_INT 70
9829: PPUSH
9830: CALL_OW 67
// for i in russianTPUnits do
9834: LD_ADDR_VAR 0 1
9838: PUSH
9839: LD_EXP 26
9843: PUSH
9844: FOR_IN
9845: IFFALSE 9858
// RemoveUnit ( i ) ;
9847: LD_VAR 0 1
9851: PPUSH
9852: CALL_OW 64
9856: GO 9844
9858: POP
9859: POP
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
9860: LD_INT 3
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_INT 2
9868: PPUSH
9869: LD_INT 1
9871: PPUSH
9872: CALL_OW 80
// ChangeSideFog ( 3 , 3 ) ;
9876: LD_INT 3
9878: PPUSH
9879: LD_INT 3
9881: PPUSH
9882: CALL_OW 343
// escapeAvalaible = 1 ;
9886: LD_ADDR_EXP 27
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// InGameOff ;
9894: CALL_OW 9
// ChangeMissionObjectives ( C2 ) ;
9898: LD_STRING C2
9900: PPUSH
9901: CALL_OW 337
// SetAreaMapShow ( EscapeArea , 1 ) ;
9905: LD_INT 11
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 424
// end ; end_of_file
9915: PPOPN 2
9917: END
// every 0 0$1 trigger StevensStatus = 1 and IsDead ( Stevens ) do
9918: LD_EXP 28
9922: PUSH
9923: LD_INT 1
9925: EQUAL
9926: PUSH
9927: LD_EXP 1
9931: PPUSH
9932: CALL_OW 301
9936: AND
9937: IFFALSE 9949
9939: GO 9941
9941: DISABLE
// YouLost ( stevded ) ;
9942: LD_STRING stevded
9944: PPUSH
9945: CALL_OW 104
9949: END
// every 0 0$1 trigger not StevensStatus = 1 and IsDead ( Baker ) do
9950: LD_EXP 28
9954: PUSH
9955: LD_INT 1
9957: EQUAL
9958: NOT
9959: PUSH
9960: LD_EXP 2
9964: PPUSH
9965: CALL_OW 301
9969: AND
9970: IFFALSE 9982
9972: GO 9974
9974: DISABLE
// YouLost ( bakerded ) ;
9975: LD_STRING bakerded
9977: PPUSH
9978: CALL_OW 104
9982: END
// every 0 0$1 trigger IsDead ( amsiblab ) and EscapeAvalaible = 0 do
9983: LD_INT 1
9985: PPUSH
9986: CALL_OW 301
9990: PUSH
9991: LD_EXP 27
9995: PUSH
9996: LD_INT 0
9998: EQUAL
9999: AND
10000: IFFALSE 10012
10002: GO 10004
10004: DISABLE
// YouLost ( lab ) ; end_of_file
10005: LD_STRING lab
10007: PPUSH
10008: CALL_OW 104
10012: END
// every 3 3$0 do
10013: GO 10015
10015: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 10 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10016: LD_INT 8
10018: PPUSH
10019: LD_INT 3
10021: PPUSH
10022: LD_INT 10
10024: PUSH
10025: LD_INT 11
10027: PUSH
10028: LD_INT 12
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: LD_OWVAR 67
10040: ARRAY
10041: PUSH
10042: LD_INT 5
10044: PPUSH
10045: LD_INT 10
10047: PPUSH
10048: CALL_OW 12
10052: PLUS
10053: PPUSH
10054: LD_INT 10
10056: PPUSH
10057: LD_INT 3
10059: PPUSH
10060: LD_INT 3
10062: PPUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PPUSH
10073: LD_INT 44
10075: PUSH
10076: LD_INT 45
10078: PUSH
10079: LD_INT 46
10081: PUSH
10082: LD_INT 47
10084: PUSH
10085: LD_INT 49
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: PPUSH
10095: EMPTY
10096: PPUSH
10097: EMPTY
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: CALL 5727 0 11
// end ;
10106: END
// every 3 3$0 do
10107: GO 10109
10109: DISABLE
// begin ruAttacksCounter = 1 ;
10110: LD_ADDR_EXP 24
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 5 , 5 , 6 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10118: LD_INT 3
10120: PPUSH
10121: LD_INT 3
10123: PPUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 3
10129: PUSH
10130: LD_INT 4
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: LD_OWVAR 67
10142: ARRAY
10143: PPUSH
10144: LD_INT 0
10146: PPUSH
10147: LD_INT 5
10149: PUSH
10150: LD_INT 5
10152: PUSH
10153: LD_INT 6
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: LIST
10160: PUSH
10161: LD_OWVAR 67
10165: ARRAY
10166: PPUSH
10167: LD_INT 0
10169: PPUSH
10170: LD_INT 0
10172: PPUSH
10173: LD_INT 6
10175: PUSH
10176: LD_INT 7
10178: PUSH
10179: LD_INT 8
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: PUSH
10187: LD_OWVAR 67
10191: ARRAY
10192: PPUSH
10193: LD_INT 8
10195: PPUSH
10196: LD_INT 8
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL 4707 0 11
// end ;
10206: END
// every 11 11$0 do
10207: GO 10209
10209: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 11 , 11 , 12 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10210: LD_INT 8
10212: PPUSH
10213: LD_INT 3
10215: PPUSH
10216: LD_INT 11
10218: PUSH
10219: LD_INT 11
10221: PUSH
10222: LD_INT 12
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: PUSH
10230: LD_OWVAR 67
10234: ARRAY
10235: PUSH
10236: LD_INT 5
10238: PPUSH
10239: LD_INT 10
10241: PPUSH
10242: CALL_OW 12
10246: PLUS
10247: PPUSH
10248: LD_INT 10
10250: PPUSH
10251: LD_INT 3
10253: PPUSH
10254: LD_INT 3
10256: PPUSH
10257: LD_INT 3
10259: PUSH
10260: LD_INT 3
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: LD_INT 44
10269: PUSH
10270: LD_INT 45
10272: PUSH
10273: LD_INT 46
10275: PUSH
10276: LD_INT 47
10278: PUSH
10279: LD_INT 49
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PPUSH
10289: EMPTY
10290: PPUSH
10291: EMPTY
10292: PPUSH
10293: LD_INT 1
10295: PPUSH
10296: CALL 5727 0 11
// end ;
10300: END
// every 11 11$0 do
10301: GO 10303
10303: DISABLE
// begin ruAttacksCounter = 2 ;
10304: LD_ADDR_EXP 24
10308: PUSH
10309: LD_INT 2
10311: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 6 , 7 , 7 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10312: LD_INT 3
10314: PPUSH
10315: LD_INT 3
10317: PPUSH
10318: LD_INT 2
10320: PUSH
10321: LD_INT 3
10323: PUSH
10324: LD_INT 4
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PUSH
10332: LD_OWVAR 67
10336: ARRAY
10337: PPUSH
10338: LD_INT 0
10340: PPUSH
10341: LD_INT 6
10343: PUSH
10344: LD_INT 7
10346: PUSH
10347: LD_INT 7
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: PUSH
10355: LD_OWVAR 67
10359: ARRAY
10360: PPUSH
10361: LD_INT 0
10363: PPUSH
10364: LD_INT 0
10366: PPUSH
10367: LD_INT 6
10369: PUSH
10370: LD_INT 7
10372: PUSH
10373: LD_INT 8
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: LD_OWVAR 67
10385: ARRAY
10386: PPUSH
10387: LD_INT 8
10389: PPUSH
10390: LD_INT 8
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: CALL 4707 0 11
// end ;
10400: END
// every 18 18$0 trigger BurlakStatus = 1 do
10401: LD_EXP 29
10405: PUSH
10406: LD_INT 1
10408: EQUAL
10409: IFFALSE 10504
10411: GO 10413
10413: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10414: LD_INT 8
10416: PPUSH
10417: LD_INT 3
10419: PPUSH
10420: LD_INT 13
10422: PUSH
10423: LD_INT 14
10425: PUSH
10426: LD_INT 15
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: PUSH
10434: LD_OWVAR 67
10438: ARRAY
10439: PUSH
10440: LD_INT 5
10442: PPUSH
10443: LD_INT 10
10445: PPUSH
10446: CALL_OW 12
10450: PLUS
10451: PPUSH
10452: LD_INT 10
10454: PPUSH
10455: LD_INT 3
10457: PPUSH
10458: LD_INT 3
10460: PPUSH
10461: LD_INT 3
10463: PUSH
10464: LD_INT 3
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: LD_INT 44
10473: PUSH
10474: LD_INT 45
10476: PUSH
10477: LD_INT 46
10479: PUSH
10480: LD_INT 47
10482: PUSH
10483: LD_INT 49
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PPUSH
10493: EMPTY
10494: PPUSH
10495: EMPTY
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL 5727 0 11
// end ;
10504: END
// every 18 18$0 trigger BurlakStatus = 1 do
10505: LD_EXP 29
10509: PUSH
10510: LD_INT 1
10512: EQUAL
10513: IFFALSE 10614
10515: GO 10517
10517: DISABLE
// begin ruAttacksCounter = 3 ;
10518: LD_ADDR_EXP 24
10522: PUSH
10523: LD_INT 3
10525: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10526: LD_INT 3
10528: PPUSH
10529: LD_INT 3
10531: PPUSH
10532: LD_INT 2
10534: PUSH
10535: LD_INT 3
10537: PUSH
10538: LD_INT 4
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: PUSH
10546: LD_OWVAR 67
10550: ARRAY
10551: PPUSH
10552: LD_INT 0
10554: PPUSH
10555: LD_INT 7
10557: PUSH
10558: LD_INT 8
10560: PUSH
10561: LD_INT 9
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: PUSH
10569: LD_OWVAR 67
10573: ARRAY
10574: PPUSH
10575: LD_INT 0
10577: PPUSH
10578: LD_INT 0
10580: PPUSH
10581: LD_INT 6
10583: PUSH
10584: LD_INT 7
10586: PUSH
10587: LD_INT 8
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: LD_OWVAR 67
10599: ARRAY
10600: PPUSH
10601: LD_INT 8
10603: PPUSH
10604: LD_INT 8
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: CALL 4707 0 11
// end ;
10614: END
// every 18 18$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
10615: LD_EXP 24
10619: PUSH
10620: LD_INT 2
10622: EQUAL
10623: PUSH
10624: LD_EXP 29
10628: PUSH
10629: LD_INT 0
10631: EQUAL
10632: AND
10633: IFFALSE 10728
10635: GO 10637
10637: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 3 , [ 13 , 14 , 15 ] [ Difficulty ] + rand ( 5 , 10 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10638: LD_INT 8
10640: PPUSH
10641: LD_INT 3
10643: PPUSH
10644: LD_INT 13
10646: PUSH
10647: LD_INT 14
10649: PUSH
10650: LD_INT 15
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: PUSH
10658: LD_OWVAR 67
10662: ARRAY
10663: PUSH
10664: LD_INT 5
10666: PPUSH
10667: LD_INT 10
10669: PPUSH
10670: CALL_OW 12
10674: PLUS
10675: PPUSH
10676: LD_INT 10
10678: PPUSH
10679: LD_INT 3
10681: PPUSH
10682: LD_INT 3
10684: PPUSH
10685: LD_INT 3
10687: PUSH
10688: LD_INT 3
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PPUSH
10695: LD_INT 44
10697: PUSH
10698: LD_INT 45
10700: PUSH
10701: LD_INT 46
10703: PUSH
10704: LD_INT 47
10706: PUSH
10707: LD_INT 49
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: PPUSH
10717: EMPTY
10718: PPUSH
10719: EMPTY
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL 5727 0 11
// end ;
10728: END
// every 18 18$0 trigger ruAttacksCounter = 2 and BurlakStatus = 0 do
10729: LD_EXP 24
10733: PUSH
10734: LD_INT 2
10736: EQUAL
10737: PUSH
10738: LD_EXP 29
10742: PUSH
10743: LD_INT 0
10745: EQUAL
10746: AND
10747: IFFALSE 10848
10749: GO 10751
10751: DISABLE
// begin ruAttacksCounter = 3 ;
10752: LD_ADDR_EXP 24
10756: PUSH
10757: LD_INT 3
10759: ST_TO_ADDR
// RespawnAttackInfantry ( 3 , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , [ 7 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , RussianAttackSpawn , RussianAttackSpawn , 1 ) ;
10760: LD_INT 3
10762: PPUSH
10763: LD_INT 3
10765: PPUSH
10766: LD_INT 6
10768: PUSH
10769: LD_INT 7
10771: PUSH
10772: LD_INT 8
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: PUSH
10780: LD_OWVAR 67
10784: ARRAY
10785: PPUSH
10786: LD_INT 0
10788: PPUSH
10789: LD_INT 7
10791: PUSH
10792: LD_INT 8
10794: PUSH
10795: LD_INT 9
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: PUSH
10803: LD_OWVAR 67
10807: ARRAY
10808: PPUSH
10809: LD_INT 0
10811: PPUSH
10812: LD_INT 0
10814: PPUSH
10815: LD_INT 6
10817: PUSH
10818: LD_INT 7
10820: PUSH
10821: LD_INT 8
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: LIST
10828: PUSH
10829: LD_OWVAR 67
10833: ARRAY
10834: PPUSH
10835: LD_INT 8
10837: PPUSH
10838: LD_INT 8
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL 4707 0 11
// end ;
10848: END
// every 18 18$0 trigger BurlakStatus = 0 do
10849: LD_EXP 29
10853: PUSH
10854: LD_INT 0
10856: EQUAL
10857: IFFALSE 10952
10859: GO 10861
10861: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10862: LD_INT 8
10864: PPUSH
10865: LD_INT 7
10867: PPUSH
10868: LD_INT 6
10870: PUSH
10871: LD_INT 7
10873: PUSH
10874: LD_INT 7
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: PUSH
10882: LD_OWVAR 67
10886: ARRAY
10887: PUSH
10888: LD_INT 2
10890: PPUSH
10891: LD_INT 4
10893: PPUSH
10894: CALL_OW 12
10898: PLUS
10899: PPUSH
10900: LD_INT 10
10902: PPUSH
10903: LD_INT 3
10905: PPUSH
10906: LD_INT 3
10908: PPUSH
10909: LD_INT 3
10911: PUSH
10912: LD_INT 3
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PPUSH
10919: LD_INT 44
10921: PUSH
10922: LD_INT 45
10924: PUSH
10925: LD_INT 46
10927: PUSH
10928: LD_INT 47
10930: PUSH
10931: LD_INT 49
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: PPUSH
10941: EMPTY
10942: PPUSH
10943: EMPTY
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL 5727 0 11
// end ;
10952: END
// every 18 18$0 trigger BurlakStatus = 0 do
10953: LD_EXP 29
10957: PUSH
10958: LD_INT 0
10960: EQUAL
10961: IFFALSE 11056
10963: GO 10965
10965: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
10966: LD_INT 8
10968: PPUSH
10969: LD_INT 7
10971: PPUSH
10972: LD_INT 6
10974: PUSH
10975: LD_INT 7
10977: PUSH
10978: LD_INT 7
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: PUSH
10986: LD_OWVAR 67
10990: ARRAY
10991: PUSH
10992: LD_INT 2
10994: PPUSH
10995: LD_INT 4
10997: PPUSH
10998: CALL_OW 12
11002: PLUS
11003: PPUSH
11004: LD_INT 10
11006: PPUSH
11007: LD_INT 3
11009: PPUSH
11010: LD_INT 3
11012: PPUSH
11013: LD_INT 3
11015: PUSH
11016: LD_INT 3
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: LD_INT 44
11025: PUSH
11026: LD_INT 45
11028: PUSH
11029: LD_INT 46
11031: PUSH
11032: LD_INT 47
11034: PUSH
11035: LD_INT 49
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: PPUSH
11045: EMPTY
11046: PPUSH
11047: EMPTY
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL 5727 0 11
// end ;
11056: END
// every 18 18$0 trigger BurlakStatus = 0 do
11057: LD_EXP 29
11061: PUSH
11062: LD_INT 0
11064: EQUAL
11065: IFFALSE 11156
11067: GO 11069
11069: DISABLE
// begin RespawnAttackVehicle ( RussianAttackSpawn , 7 , [ 6 , 7 , 7 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 1 , 3 , [ 3 , 3 ] , [ ] , [ ] , [ 10 , 9 , 7 , 6 ] , 1 ) ;
11070: LD_INT 8
11072: PPUSH
11073: LD_INT 7
11075: PPUSH
11076: LD_INT 6
11078: PUSH
11079: LD_INT 7
11081: PUSH
11082: LD_INT 7
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: PUSH
11090: LD_OWVAR 67
11094: ARRAY
11095: PUSH
11096: LD_INT 2
11098: PPUSH
11099: LD_INT 4
11101: PPUSH
11102: CALL_OW 12
11106: PLUS
11107: PPUSH
11108: LD_INT 10
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: LD_INT 3
11116: PPUSH
11117: LD_INT 3
11119: PUSH
11120: LD_INT 3
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PPUSH
11127: EMPTY
11128: PPUSH
11129: EMPTY
11130: PPUSH
11131: LD_INT 10
11133: PUSH
11134: LD_INT 9
11136: PUSH
11137: LD_INT 7
11139: PUSH
11140: LD_INT 6
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL 5727 0 11
// end ;
11156: END
// every 18 18$0 trigger BurlakStatus = 0 do
11157: LD_EXP 29
11161: PUSH
11162: LD_INT 0
11164: EQUAL
11165: IFFALSE 11309
11167: GO 11169
11169: DISABLE
// begin uc_side = 7 ;
11170: LD_ADDR_OWVAR 20
11174: PUSH
11175: LD_INT 7
11177: ST_TO_ADDR
// uc_nation = 1 ;
11178: LD_ADDR_OWVAR 21
11182: PUSH
11183: LD_INT 1
11185: ST_TO_ADDR
// vc_engine = 3 ;
11186: LD_ADDR_OWVAR 39
11190: PUSH
11191: LD_INT 3
11193: ST_TO_ADDR
// vc_control = 1 ;
11194: LD_ADDR_OWVAR 38
11198: PUSH
11199: LD_INT 1
11201: ST_TO_ADDR
// vc_chassis = 24 ;
11202: LD_ADDR_OWVAR 37
11206: PUSH
11207: LD_INT 24
11209: ST_TO_ADDR
// vc_weapon = 46 ;
11210: LD_ADDR_OWVAR 40
11214: PUSH
11215: LD_INT 46
11217: ST_TO_ADDR
// burlakVeh = CreateVehicle ;
11218: LD_ADDR_EXP 22
11222: PUSH
11223: CALL_OW 45
11227: ST_TO_ADDR
// PlaceUnitArea ( burlakVeh , RussianAttackSpawn , false ) ;
11228: LD_EXP 22
11232: PPUSH
11233: LD_INT 8
11235: PPUSH
11236: LD_INT 0
11238: PPUSH
11239: CALL_OW 49
// Burlak = PrepareUnit ( Burlak , false ) ;
11243: LD_ADDR_EXP 21
11247: PUSH
11248: LD_STRING Burlak
11250: PPUSH
11251: LD_INT 0
11253: PPUSH
11254: CALL 3230 0 2
11258: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , burlakVeh ) ;
11259: LD_EXP 21
11263: PPUSH
11264: LD_EXP 22
11268: PPUSH
11269: CALL_OW 52
// SetMark ( burlakVeh , 1 ) ;
11273: LD_EXP 22
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 242
// ComAgressiveMove ( [ Burlak , BurlakVeh ] , 117 , 39 ) ;
11285: LD_EXP 21
11289: PUSH
11290: LD_EXP 22
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: LD_INT 117
11301: PPUSH
11302: LD_INT 39
11304: PPUSH
11305: CALL_OW 114
// end ;
11309: END
// every 0 0$50 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 and escapeAvalaible = 1 and IsDead ( amsiblab ) do
11310: LD_INT 22
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 21
11322: PUSH
11323: LD_INT 2
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 50
11332: PUSH
11333: EMPTY
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: PUSH
11346: LD_INT 0
11348: EQUAL
11349: PUSH
11350: LD_EXP 27
11354: PUSH
11355: LD_INT 1
11357: EQUAL
11358: AND
11359: PUSH
11360: LD_INT 1
11362: PPUSH
11363: CALL_OW 301
11367: AND
11368: IFFALSE 11464
11370: GO 11372
11372: DISABLE
// begin RespawnAttackVehicle ( RussianSpawn2 , 3 , [ 8 , 9 , 9 ] [ Difficulty ] + rand ( 2 , 4 ) , 10 , 3 , 3 , [ 3 , 3 ] , [ 44 , 45 , 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
11373: LD_INT 13
11375: PPUSH
11376: LD_INT 3
11378: PPUSH
11379: LD_INT 8
11381: PUSH
11382: LD_INT 9
11384: PUSH
11385: LD_INT 9
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: LD_OWVAR 67
11397: ARRAY
11398: PUSH
11399: LD_INT 2
11401: PPUSH
11402: LD_INT 4
11404: PPUSH
11405: CALL_OW 12
11409: PLUS
11410: PPUSH
11411: LD_INT 10
11413: PPUSH
11414: LD_INT 3
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 3
11422: PUSH
11423: LD_INT 3
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PPUSH
11430: LD_INT 44
11432: PUSH
11433: LD_INT 45
11435: PUSH
11436: LD_INT 46
11438: PUSH
11439: LD_INT 47
11441: PUSH
11442: LD_INT 49
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: PPUSH
11452: EMPTY
11453: PPUSH
11454: EMPTY
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL 5727 0 11
// enable ;
11463: ENABLE
// end ; end_of_file
11464: END
// every 0 0$1 do
11465: GO 11467
11467: DISABLE
// begin enable ;
11468: ENABLE
// TimeLapsersAI ( 3 ) ;
11469: LD_INT 3
11471: PPUSH
11472: CALL 4443 0 1
// IntBazooka ( 3 ) ;
11476: LD_INT 3
11478: PPUSH
11479: CALL 4115 0 1
// end ; end_of_file
11483: END
// every 0 0$1 trigger FilterUnitsExceptArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_engine , 3 ] , [ f_not , [ f_empty ] ] ] ) = allUnitsLengh and EscapeAvalaible = 1 do var i , cargoType , yourVehicles ;
11484: LD_INT 11
11486: PPUSH
11487: LD_INT 22
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 71
11515: PUSH
11516: LD_INT 0
11518: EQUAL
11519: PUSH
11520: LD_INT 11
11522: PPUSH
11523: LD_INT 22
11525: PUSH
11526: LD_INT 1
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 2
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 33
11545: PUSH
11546: LD_INT 1
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 32
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 3
11565: PUSH
11566: LD_INT 58
11568: PUSH
11569: EMPTY
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 70
11587: PUSH
11588: LD_EXP 31
11592: EQUAL
11593: AND
11594: PUSH
11595: LD_EXP 27
11599: PUSH
11600: LD_INT 1
11602: EQUAL
11603: AND
11604: IFFALSE 12718
11606: GO 11608
11608: DISABLE
11609: LD_INT 0
11611: PPUSH
11612: PPUSH
11613: PPUSH
// begin yourVehicles = [ ] ;
11614: LD_ADDR_VAR 0 3
11618: PUSH
11619: EMPTY
11620: ST_TO_ADDR
// if FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11621: LD_INT 11
11623: PPUSH
11624: LD_INT 21
11626: PUSH
11627: LD_INT 2
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 33
11636: PUSH
11637: LD_INT 1
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: LD_INT 58
11649: PUSH
11650: EMPTY
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 70
11666: PUSH
11667: LD_INT 0
11669: GREATER
11670: IFFALSE 11938
// begin for i in FilterUnitsInArea ( EscapeArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
11672: LD_ADDR_VAR 0 1
11676: PUSH
11677: LD_INT 11
11679: PPUSH
11680: LD_INT 21
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 33
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: LD_INT 58
11705: PUSH
11706: EMPTY
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 70
11722: PUSH
11723: FOR_IN
11724: IFFALSE 11924
// begin cargoType = GetCargoType ( i ) ;
11726: LD_ADDR_VAR 0 2
11730: PUSH
11731: LD_VAR 0 1
11735: PPUSH
11736: CALL_OW 288
11740: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 264
11750: PUSH
11751: LD_INT 12
11753: EQUAL
11754: IFFALSE 11851
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
11756: LD_ADDR_VAR 0 3
11760: PUSH
11761: LD_VAR 0 3
11765: PUSH
11766: LD_VAR 0 1
11770: PPUSH
11771: CALL_OW 248
11775: PUSH
11776: LD_VAR 0 1
11780: PPUSH
11781: CALL_OW 265
11785: PUSH
11786: LD_VAR 0 1
11790: PPUSH
11791: CALL_OW 262
11795: PUSH
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 263
11805: PUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 264
11815: PUSH
11816: LD_VAR 0 2
11820: PUSH
11821: LD_VAR 0 1
11825: PPUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL_OW 289
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: ADD
11848: ST_TO_ADDR
// end else
11849: GO 11922
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
11851: LD_ADDR_VAR 0 3
11855: PUSH
11856: LD_VAR 0 3
11860: PUSH
11861: LD_VAR 0 1
11865: PPUSH
11866: CALL_OW 248
11870: PUSH
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 265
11880: PUSH
11881: LD_VAR 0 1
11885: PPUSH
11886: CALL_OW 262
11890: PUSH
11891: LD_VAR 0 1
11895: PPUSH
11896: CALL_OW 263
11900: PUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: CALL_OW 264
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: ADD
11921: ST_TO_ADDR
// end ; end ;
11922: GO 11723
11924: POP
11925: POP
// SaveVariable ( yourVehicles , 15_Vehicles_1 ) ;
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_STRING 15_Vehicles_1
11933: PPUSH
11934: CALL_OW 39
// end ; SaveCargos ;
11938: CALL 12721 0 0
// if siberiteRocketStatus = 1 then
11942: LD_EXP 33
11946: PUSH
11947: LD_INT 1
11949: EQUAL
11950: IFFALSE 11964
// AddMedal ( med1 , 1 ) else
11952: LD_STRING med1
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 101
11962: GO 11975
// AddMedal ( med1 , - 1 ) ;
11964: LD_STRING med1
11966: PPUSH
11967: LD_INT 1
11969: NEG
11970: PPUSH
11971: CALL_OW 101
// if unitLost > 3 and unitLost < 5 then
11975: LD_EXP 30
11979: PUSH
11980: LD_INT 3
11982: GREATER
11983: PUSH
11984: LD_EXP 30
11988: PUSH
11989: LD_INT 5
11991: LESS
11992: AND
11993: IFFALSE 12007
// begin AddMedal ( med2 , 2 ) end else
11995: LD_STRING med2
11997: PPUSH
11998: LD_INT 2
12000: PPUSH
12001: CALL_OW 101
12005: GO 12040
// begin if unitLost > 5 then
12007: LD_EXP 30
12011: PUSH
12012: LD_INT 5
12014: GREATER
12015: IFFALSE 12030
// AddMedal ( med2 , - 1 ) else
12017: LD_STRING med2
12019: PPUSH
12020: LD_INT 1
12022: NEG
12023: PPUSH
12024: CALL_OW 101
12028: GO 12040
// AddMedal ( med2 , 1 ) ;
12030: LD_STRING med2
12032: PPUSH
12033: LD_INT 1
12035: PPUSH
12036: CALL_OW 101
// end ; if amSciStatus = 1 then
12040: LD_EXP 25
12044: PUSH
12045: LD_INT 1
12047: EQUAL
12048: IFFALSE 12062
// AddMedal ( med3 , 1 ) else
12050: LD_STRING med3
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: CALL_OW 101
12060: GO 12073
// AddMedal ( med3 , - 1 ) ;
12062: LD_STRING med3
12064: PPUSH
12065: LD_INT 1
12067: NEG
12068: PPUSH
12069: CALL_OW 101
// GiveMedals ( MAIN ) ;
12073: LD_STRING MAIN
12075: PPUSH
12076: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
12080: LD_INT 50
12082: PUSH
12083: EMPTY
12084: LIST
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 21
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 25
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 25
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 25
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 25
12141: PUSH
12142: LD_INT 4
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 25
12151: PUSH
12152: LD_INT 5
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 25
12161: PUSH
12162: LD_INT 8
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PPUSH
12184: CALL_OW 69
12188: PPUSH
12189: CALL_OW 43
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
12193: LD_EXP 11
12197: PPUSH
12198: LD_EXP 32
12202: PUSH
12203: LD_STRING Brown
12205: STR
12206: PPUSH
12207: CALL 3447 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
12211: LD_EXP 7
12215: PPUSH
12216: LD_EXP 32
12220: PUSH
12221: LD_STRING Donaldson
12223: STR
12224: PPUSH
12225: CALL 3447 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12229: LD_EXP 8
12233: PPUSH
12234: LD_EXP 32
12238: PUSH
12239: LD_STRING Bobby
12241: STR
12242: PPUSH
12243: CALL 3447 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12247: LD_EXP 9
12251: PPUSH
12252: LD_EXP 32
12256: PUSH
12257: LD_STRING Cyrus
12259: STR
12260: PPUSH
12261: CALL 3447 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12265: LD_EXP 6
12269: PPUSH
12270: LD_EXP 32
12274: PUSH
12275: LD_STRING Lisa
12277: STR
12278: PPUSH
12279: CALL 3447 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
12283: LD_EXP 16
12287: PPUSH
12288: LD_EXP 32
12292: PUSH
12293: LD_STRING Frank
12295: STR
12296: PPUSH
12297: CALL 3447 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
12301: LD_EXP 17
12305: PPUSH
12306: LD_EXP 32
12310: PUSH
12311: LD_STRING Kikuchi
12313: STR
12314: PPUSH
12315: CALL 3447 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
12319: LD_EXP 13
12323: PPUSH
12324: LD_EXP 32
12328: PUSH
12329: LD_STRING Houten
12331: STR
12332: PPUSH
12333: CALL 3447 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
12337: LD_EXP 15
12341: PPUSH
12342: LD_EXP 32
12346: PUSH
12347: LD_STRING Gary
12349: STR
12350: PPUSH
12351: CALL 3447 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
12355: LD_EXP 14
12359: PPUSH
12360: LD_EXP 32
12364: PUSH
12365: LD_STRING Cornell
12367: STR
12368: PPUSH
12369: CALL 3447 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
12373: LD_EXP 10
12377: PPUSH
12378: LD_EXP 32
12382: PUSH
12383: LD_STRING Denis
12385: STR
12386: PPUSH
12387: CALL 3447 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
12391: LD_EXP 12
12395: PPUSH
12396: LD_EXP 32
12400: PUSH
12401: LD_STRING Gladstone
12403: STR
12404: PPUSH
12405: CALL 3447 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
12409: LD_EXP 1
12413: PPUSH
12414: LD_EXP 32
12418: PUSH
12419: LD_STRING Stevens
12421: STR
12422: PPUSH
12423: CALL 3447 0 2
// EnchancedSaveCharacters ( Baker , mission_prefix & Baker ) ;
12427: LD_EXP 2
12431: PPUSH
12432: LD_EXP 32
12436: PUSH
12437: LD_STRING Baker
12439: STR
12440: PPUSH
12441: CALL 3447 0 2
// EnchancedSaveCharacters ( Gordon , mission_prefix & Gordon ) ;
12445: LD_EXP 3
12449: PPUSH
12450: LD_EXP 32
12454: PUSH
12455: LD_STRING Gordon
12457: STR
12458: PPUSH
12459: CALL 3447 0 2
// EnchancedSaveCharacters ( Peter , mission_prefix & Peter ) ;
12463: LD_EXP 4
12467: PPUSH
12468: LD_EXP 32
12472: PUSH
12473: LD_STRING Peter
12475: STR
12476: PPUSH
12477: CALL 3447 0 2
// EnchancedSaveCharacters ( Connie , mission_prefix & Connie ) ;
12481: LD_EXP 18
12485: PPUSH
12486: LD_EXP 32
12490: PUSH
12491: LD_STRING Connie
12493: STR
12494: PPUSH
12495: CALL 3447 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornell , Stevens , Baker , Gordon , Peter ] , 15_other_survivors ) ;
12499: LD_INT 50
12501: PUSH
12502: EMPTY
12503: LIST
12504: PUSH
12505: LD_INT 22
12507: PUSH
12508: LD_INT 1
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 1
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: LD_INT 25
12530: PUSH
12531: LD_INT 1
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 25
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 25
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 25
12560: PUSH
12561: LD_INT 4
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 25
12570: PUSH
12571: LD_INT 5
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 25
12580: PUSH
12581: LD_INT 8
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: PPUSH
12603: CALL_OW 69
12607: PUSH
12608: LD_EXP 11
12612: PUSH
12613: LD_EXP 7
12617: PUSH
12618: LD_EXP 8
12622: PUSH
12623: LD_EXP 9
12627: PUSH
12628: LD_EXP 6
12632: PUSH
12633: LD_EXP 16
12637: PUSH
12638: LD_EXP 12
12642: PUSH
12643: LD_EXP 17
12647: PUSH
12648: LD_EXP 10
12652: PUSH
12653: LD_EXP 13
12657: PUSH
12658: LD_EXP 15
12662: PUSH
12663: LD_EXP 14
12667: PUSH
12668: LD_EXP 1
12672: PUSH
12673: LD_EXP 2
12677: PUSH
12678: LD_EXP 3
12682: PUSH
12683: LD_EXP 4
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: DIFF
12706: PPUSH
12707: LD_STRING 15_other_survivors
12709: PPUSH
12710: CALL_OW 38
// YouWin ;
12714: CALL_OW 103
// end ;
12718: PPOPN 3
12720: END
// export function SaveCargos ; var i , resources ; begin
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
12725: PPUSH
// resources = [ ] ;
12726: LD_ADDR_VAR 0 3
12730: PUSH
12731: EMPTY
12732: ST_TO_ADDR
// for i in FilterUnitsInArea ( EscapeArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
12733: LD_ADDR_VAR 0 2
12737: PUSH
12738: LD_INT 11
12740: PPUSH
12741: LD_INT 22
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 33
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 34
12763: PUSH
12764: LD_INT 12
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 70
12780: PUSH
12781: FOR_IN
12782: IFFALSE 12810
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
12784: LD_ADDR_VAR 0 3
12788: PUSH
12789: LD_VAR 0 3
12793: PUSH
12794: LD_VAR 0 2
12798: PPUSH
12799: CALL 12829 0 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: ADD
12807: ST_TO_ADDR
12808: GO 12781
12810: POP
12811: POP
// SaveVariable ( resources , 15_ResourcesInCargo_1 ) ;
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_STRING 15_ResourcesInCargo_1
12819: PPUSH
12820: CALL_OW 39
// end ;
12824: LD_VAR 0 1
12828: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
12829: LD_INT 0
12831: PPUSH
12832: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
12833: LD_ADDR_VAR 0 2
12837: PUSH
12838: LD_VAR 0 1
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 289
12850: PUSH
12851: LD_VAR 0 1
12855: PPUSH
12856: LD_INT 2
12858: PPUSH
12859: CALL_OW 289
12863: PUSH
12864: LD_VAR 0 1
12868: PPUSH
12869: LD_INT 3
12871: PPUSH
12872: CALL_OW 289
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: ST_TO_ADDR
// end ; end_of_file
12882: LD_VAR 0 2
12886: RET
// every 2 2$30 do
12887: GO 12889
12889: DISABLE
// begin enable ;
12890: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12891: LD_INT 3
12893: PPUSH
12894: LD_INT 5
12896: PPUSH
12897: CALL_OW 12
12901: PPUSH
12902: LD_INT 12
12904: PPUSH
12905: LD_INT 1
12907: PPUSH
12908: CALL_OW 55
// end ;
12912: END
